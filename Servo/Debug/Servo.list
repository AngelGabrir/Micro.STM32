
Servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007494  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  08007624  08007624  00017624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007910  08007910  000204a0  2**0
                  CONTENTS
  4 .ARM          00000000  08007910  08007910  000204a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007910  08007910  000204a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007910  08007910  00017910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007914  08007914  00017914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a0  20000000  08007918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200004a0  08007db8  000204a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000758  08007db8  00020758  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f35  00000000  00000000  000204d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000269a  00000000  00000000  00033405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  00035aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  00036ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003330  00000000  00000000  00037a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015522  00000000  00000000  0003ad30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7ac7  00000000  00000000  00050252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7d19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000497c  00000000  00000000  000f7d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004a0 	.word	0x200004a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800760c 	.word	0x0800760c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004a4 	.word	0x200004a4
 80001cc:	0800760c 	.word	0x0800760c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <stepper_half_drive>:
#include "stm32f3xx_hal.h"
#include "StepMotor.h"

float anglePerSequence = 0.703125;
//funcion activacion de las bobinas stepper
void stepper_half_drive(int Paso) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b0a2      	sub	sp, #136	; 0x88
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
    const int pinValues[][4] = {
 8000aa4:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <stepper_half_drive+0x90>)
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	4611      	mov	r1, r2
 8000aac:	2280      	movs	r2, #128	; 0x80
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f006 f896 	bl	8006be0 <memcpy>
        {0, 0, 1, 1}, // Paso 5
        {0, 0, 0, 1}, // Paso 6
        {1, 0, 0, 1}  // Paso 7
    };

    if (Paso >= 0 && Paso < 8) {
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	db34      	blt.n	8000b24 <stepper_half_drive+0x88>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b07      	cmp	r3, #7
 8000abe:	dc31      	bgt.n	8000b24 <stepper_half_drive+0x88>
        HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, pinValues[Paso][0]);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	011b      	lsls	r3, r3, #4
 8000ac4:	3388      	adds	r3, #136	; 0x88
 8000ac6:	443b      	add	r3, r7
 8000ac8:	3b80      	subs	r3, #128	; 0x80
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	461a      	mov	r2, r3
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	4817      	ldr	r0, [pc, #92]	; (8000b30 <stepper_half_drive+0x94>)
 8000ad4:	f002 fae6 	bl	80030a4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, pinValues[Paso][1]);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	011b      	lsls	r3, r3, #4
 8000adc:	3388      	adds	r3, #136	; 0x88
 8000ade:	443b      	add	r3, r7
 8000ae0:	3b7c      	subs	r3, #124	; 0x7c
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	2102      	movs	r1, #2
 8000aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aee:	f002 fad9 	bl	80030a4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, pinValues[Paso][2]);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	011b      	lsls	r3, r3, #4
 8000af6:	3388      	adds	r3, #136	; 0x88
 8000af8:	443b      	add	r3, r7
 8000afa:	3b78      	subs	r3, #120	; 0x78
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	461a      	mov	r2, r3
 8000b02:	2101      	movs	r1, #1
 8000b04:	480a      	ldr	r0, [pc, #40]	; (8000b30 <stepper_half_drive+0x94>)
 8000b06:	f002 facd 	bl	80030a4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, pinValues[Paso][3]);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	011b      	lsls	r3, r3, #4
 8000b0e:	3388      	adds	r3, #136	; 0x88
 8000b10:	443b      	add	r3, r7
 8000b12:	3b74      	subs	r3, #116	; 0x74
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	461a      	mov	r2, r3
 8000b1a:	2140      	movs	r1, #64	; 0x40
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b20:	f002 fac0 	bl	80030a4 <HAL_GPIO_WritePin>
    }
}
 8000b24:	bf00      	nop
 8000b26:	3788      	adds	r7, #136	; 0x88
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	08007624 	.word	0x08007624
 8000b30:	48000400 	.word	0x48000400

08000b34 <stepper_set_rpm>:

//funcion velocidad
void stepper_set_rpm (int rpm)  //rpm maximo 13 y minimo 5
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	delay(60000000/stepsperrev/rpm);
 8000b3c:	f643 1238 	movw	r2, #14648	; 0x3938
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 fb6a 	bl	8001220 <delay>
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <stepper_step_angle>:



// funcion cambio de direccion
void stepper_step_angle(float angle, int direction, int rpm) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	ed87 0a03 	vstr	s0, [r7, #12]
 8000b5e:	60b8      	str	r0, [r7, #8]
 8000b60:	6079      	str	r1, [r7, #4]
    int numberOfSequences = (int)(angle / anglePerSequence);
 8000b62:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <stepper_step_angle+0x94>)
 8000b64:	ed93 7a00 	vldr	s14, [r3]
 8000b68:	edd7 6a03 	vldr	s13, [r7, #12]
 8000b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b74:	ee17 3a90 	vmov	r3, s15
 8000b78:	61fb      	str	r3, [r7, #28]

    for (int seq = 0; seq < numberOfSequences; seq++) {
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b7e:	e02a      	b.n	8000bd6 <stepper_step_angle+0x82>
        int startStep = (direction == 0) ? 7 : 0;
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d101      	bne.n	8000b8a <stepper_step_angle+0x36>
 8000b86:	2307      	movs	r3, #7
 8000b88:	e000      	b.n	8000b8c <stepper_step_angle+0x38>
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61bb      	str	r3, [r7, #24]
        int endStep = (direction == 0) ? -1 : 8;
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d102      	bne.n	8000b9a <stepper_step_angle+0x46>
 8000b94:	f04f 33ff 	mov.w	r3, #4294967295
 8000b98:	e000      	b.n	8000b9c <stepper_step_angle+0x48>
 8000b9a:	2308      	movs	r3, #8
 8000b9c:	617b      	str	r3, [r7, #20]
        int stepIncrement = (direction == 0) ? -1 : 1;
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d102      	bne.n	8000baa <stepper_step_angle+0x56>
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba8:	e000      	b.n	8000bac <stepper_step_angle+0x58>
 8000baa:	2301      	movs	r3, #1
 8000bac:	613b      	str	r3, [r7, #16]

        for (int step = startStep; step != endStep; step += stepIncrement) {
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	623b      	str	r3, [r7, #32]
 8000bb2:	e009      	b.n	8000bc8 <stepper_step_angle+0x74>
            stepper_half_drive(step);
 8000bb4:	6a38      	ldr	r0, [r7, #32]
 8000bb6:	f7ff ff71 	bl	8000a9c <stepper_half_drive>
            stepper_set_rpm(rpm);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ffba 	bl	8000b34 <stepper_set_rpm>
        for (int step = startStep; step != endStep; step += stepIncrement) {
 8000bc0:	6a3a      	ldr	r2, [r7, #32]
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	623b      	str	r3, [r7, #32]
 8000bc8:	6a3a      	ldr	r2, [r7, #32]
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d1f1      	bne.n	8000bb4 <stepper_step_angle+0x60>
    for (int seq = 0; seq < numberOfSequences; seq++) {
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8000bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	dbd0      	blt.n	8000b80 <stepper_step_angle+0x2c>
        }
    }
}
 8000bde:	bf00      	nop
 8000be0:	bf00      	nop
 8000be2:	3728      	adds	r7, #40	; 0x28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000000 	.word	0x20000000

08000bec <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af02      	add	r7, sp, #8
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	f023 030f 	bic.w	r3, r3, #15
 8000bfc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	011b      	lsls	r3, r3, #4
 8000c02:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	f043 030c 	orr.w	r3, r3, #12
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000c18:	7bbb      	ldrb	r3, [r7, #14]
 8000c1a:	f043 030c 	orr.w	r3, r3, #12
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000c22:	7bbb      	ldrb	r3, [r7, #14]
 8000c24:	f043 0308 	orr.w	r3, r3, #8
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c2c:	f107 0208 	add.w	r2, r7, #8
 8000c30:	2364      	movs	r3, #100	; 0x64
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	2304      	movs	r3, #4
 8000c36:	214e      	movs	r1, #78	; 0x4e
 8000c38:	4803      	ldr	r0, [pc, #12]	; (8000c48 <lcd_send_cmd+0x5c>)
 8000c3a:	f002 faf5 	bl	8003228 <HAL_I2C_Master_Transmit>
}
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200004c0 	.word	0x200004c0

08000c4c <lcd_send_data>:

void lcd_send_data (char data)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af02      	add	r7, sp, #8
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	f023 030f 	bic.w	r3, r3, #15
 8000c5c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	011b      	lsls	r3, r3, #4
 8000c62:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
 8000c66:	f043 030d 	orr.w	r3, r3, #13
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	f043 0309 	orr.w	r3, r3, #9
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000c78:	7bbb      	ldrb	r3, [r7, #14]
 8000c7a:	f043 030d 	orr.w	r3, r3, #13
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000c82:	7bbb      	ldrb	r3, [r7, #14]
 8000c84:	f043 0309 	orr.w	r3, r3, #9
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c8c:	f107 0208 	add.w	r2, r7, #8
 8000c90:	2364      	movs	r3, #100	; 0x64
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	2304      	movs	r3, #4
 8000c96:	214e      	movs	r1, #78	; 0x4e
 8000c98:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <lcd_send_data+0x5c>)
 8000c9a:	f002 fac5 	bl	8003228 <HAL_I2C_Master_Transmit>
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200004c0 	.word	0x200004c0

08000cac <lcd_enviar>:

void lcd_enviar(char *string,int row,int col)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
	lcd_put_cur(row,col);
 8000cb8:	6879      	ldr	r1, [r7, #4]
 8000cba:	68b8      	ldr	r0, [r7, #8]
 8000cbc:	f000 f81e 	bl	8000cfc <lcd_put_cur>
	lcd_send_string(string);
 8000cc0:	68f8      	ldr	r0, [r7, #12]
 8000cc2:	f000 f877 	bl	8000db4 <lcd_send_string>
}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <lcd_clear>:

void lcd_clear (void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000cd4:	2080      	movs	r0, #128	; 0x80
 8000cd6:	f7ff ff89 	bl	8000bec <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	e005      	b.n	8000cec <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000ce0:	2020      	movs	r0, #32
 8000ce2:	f7ff ffb3 	bl	8000c4c <lcd_send_data>
	for (int i=0; i<70; i++)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b45      	cmp	r3, #69	; 0x45
 8000cf0:	ddf6      	ble.n	8000ce0 <lcd_clear+0x12>
	}
}
 8000cf2:	bf00      	nop
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
    switch (row)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d003      	beq.n	8000d14 <lcd_put_cur+0x18>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d005      	beq.n	8000d1e <lcd_put_cur+0x22>
 8000d12:	e009      	b.n	8000d28 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d1a:	603b      	str	r3, [r7, #0]
            break;
 8000d1c:	e004      	b.n	8000d28 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d24:	603b      	str	r3, [r7, #0]
            break;
 8000d26:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff5d 	bl	8000bec <lcd_send_cmd>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <lcd_init>:


void lcd_init (void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000d3e:	2032      	movs	r0, #50	; 0x32
 8000d40:	f001 fef0 	bl	8002b24 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d44:	2030      	movs	r0, #48	; 0x30
 8000d46:	f7ff ff51 	bl	8000bec <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000d4a:	2005      	movs	r0, #5
 8000d4c:	f001 feea 	bl	8002b24 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d50:	2030      	movs	r0, #48	; 0x30
 8000d52:	f7ff ff4b 	bl	8000bec <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000d56:	2001      	movs	r0, #1
 8000d58:	f001 fee4 	bl	8002b24 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d5c:	2030      	movs	r0, #48	; 0x30
 8000d5e:	f7ff ff45 	bl	8000bec <lcd_send_cmd>
	HAL_Delay(10);
 8000d62:	200a      	movs	r0, #10
 8000d64:	f001 fede 	bl	8002b24 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000d68:	2020      	movs	r0, #32
 8000d6a:	f7ff ff3f 	bl	8000bec <lcd_send_cmd>
	HAL_Delay(10);
 8000d6e:	200a      	movs	r0, #10
 8000d70:	f001 fed8 	bl	8002b24 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000d74:	2028      	movs	r0, #40	; 0x28
 8000d76:	f7ff ff39 	bl	8000bec <lcd_send_cmd>
	HAL_Delay(1);
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f001 fed2 	bl	8002b24 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000d80:	2008      	movs	r0, #8
 8000d82:	f7ff ff33 	bl	8000bec <lcd_send_cmd>
	HAL_Delay(1);
 8000d86:	2001      	movs	r0, #1
 8000d88:	f001 fecc 	bl	8002b24 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f7ff ff2d 	bl	8000bec <lcd_send_cmd>
	HAL_Delay(1);
 8000d92:	2001      	movs	r0, #1
 8000d94:	f001 fec6 	bl	8002b24 <HAL_Delay>
	HAL_Delay(1);
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f001 fec3 	bl	8002b24 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000d9e:	2006      	movs	r0, #6
 8000da0:	f7ff ff24 	bl	8000bec <lcd_send_cmd>
	HAL_Delay(1);
 8000da4:	2001      	movs	r0, #1
 8000da6:	f001 febd 	bl	8002b24 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000daa:	200c      	movs	r0, #12
 8000dac:	f7ff ff1e 	bl	8000bec <lcd_send_cmd>
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000dbc:	e006      	b.n	8000dcc <lcd_send_string+0x18>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	1c5a      	adds	r2, r3, #1
 8000dc2:	607a      	str	r2, [r7, #4]
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff40 	bl	8000c4c <lcd_send_data>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1f4      	bne.n	8000dbe <lcd_send_string+0xa>
}
 8000dd4:	bf00      	nop
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <Keypad_Get_Char>:
                         {'4','5','6','B'},
                         {'7','8','9','C'},
                         {'*','0','#','D'}};

char Keypad_Get_Char(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	val_key = 0;
 8000de4:	4bd5      	ldr	r3, [pc, #852]	; (800113c <Keypad_Get_Char+0x35c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df4:	f002 f956 	bl	80030a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dfe:	48d0      	ldr	r0, [pc, #832]	; (8001140 <Keypad_Get_Char+0x360>)
 8000e00:	f002 f950 	bl	80030a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	2110      	movs	r1, #16
 8000e08:	48cd      	ldr	r0, [pc, #820]	; (8001140 <Keypad_Get_Char+0x360>)
 8000e0a:	f002 f94b 	bl	80030a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2120      	movs	r1, #32
 8000e12:	48cb      	ldr	r0, [pc, #812]	; (8001140 <Keypad_Get_Char+0x360>)
 8000e14:	f002 f946 	bl	80030a4 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 8000e18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e20:	f002 f928 	bl	8003074 <HAL_GPIO_ReadPin>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d112      	bne.n	8000e50 <Keypad_Get_Char+0x70>
		HAL_Delay(4);
 8000e2a:	2004      	movs	r0, #4
 8000e2c:	f001 fe7a 	bl	8002b24 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)));
 8000e30:	bf00      	nop
 8000e32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3a:	f002 f91b 	bl	8003074 <HAL_GPIO_ReadPin>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d0f6      	beq.n	8000e32 <Keypad_Get_Char+0x52>
		HAL_Delay(4);
 8000e44:	2004      	movs	r0, #4
 8000e46:	f001 fe6d 	bl	8002b24 <HAL_Delay>
		val_key = keys[0][0];
 8000e4a:	2231      	movs	r2, #49	; 0x31
 8000e4c:	4bbb      	ldr	r3, [pc, #748]	; (800113c <Keypad_Get_Char+0x35c>)
 8000e4e:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 8000e50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e58:	f002 f90c 	bl	8003074 <HAL_GPIO_ReadPin>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d112      	bne.n	8000e88 <Keypad_Get_Char+0xa8>
		HAL_Delay(4);
 8000e62:	2004      	movs	r0, #4
 8000e64:	f001 fe5e 	bl	8002b24 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 8000e68:	bf00      	nop
 8000e6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e72:	f002 f8ff 	bl	8003074 <HAL_GPIO_ReadPin>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0f6      	beq.n	8000e6a <Keypad_Get_Char+0x8a>
		HAL_Delay(4);
 8000e7c:	2004      	movs	r0, #4
 8000e7e:	f001 fe51 	bl	8002b24 <HAL_Delay>
		val_key = keys[0][1];
 8000e82:	2232      	movs	r2, #50	; 0x32
 8000e84:	4bad      	ldr	r3, [pc, #692]	; (800113c <Keypad_Get_Char+0x35c>)
 8000e86:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 8000e88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e90:	f002 f8f0 	bl	8003074 <HAL_GPIO_ReadPin>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d112      	bne.n	8000ec0 <Keypad_Get_Char+0xe0>
		HAL_Delay(4);
 8000e9a:	2004      	movs	r0, #4
 8000e9c:	f001 fe42 	bl	8002b24 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8000ea0:	bf00      	nop
 8000ea2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eaa:	f002 f8e3 	bl	8003074 <HAL_GPIO_ReadPin>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0f6      	beq.n	8000ea2 <Keypad_Get_Char+0xc2>
		HAL_Delay(4);
 8000eb4:	2004      	movs	r0, #4
 8000eb6:	f001 fe35 	bl	8002b24 <HAL_Delay>
		val_key = keys[0][2];
 8000eba:	2233      	movs	r2, #51	; 0x33
 8000ebc:	4b9f      	ldr	r3, [pc, #636]	; (800113c <Keypad_Get_Char+0x35c>)
 8000ebe:	701a      	strb	r2, [r3, #0]
	}
	if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 8000ec0:	2180      	movs	r1, #128	; 0x80
 8000ec2:	48a0      	ldr	r0, [pc, #640]	; (8001144 <Keypad_Get_Char+0x364>)
 8000ec4:	f002 f8d6 	bl	8003074 <HAL_GPIO_ReadPin>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d110      	bne.n	8000ef0 <Keypad_Get_Char+0x110>
		HAL_Delay(4);
 8000ece:	2004      	movs	r0, #4
 8000ed0:	f001 fe28 	bl	8002b24 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 8000ed4:	bf00      	nop
 8000ed6:	2180      	movs	r1, #128	; 0x80
 8000ed8:	489a      	ldr	r0, [pc, #616]	; (8001144 <Keypad_Get_Char+0x364>)
 8000eda:	f002 f8cb 	bl	8003074 <HAL_GPIO_ReadPin>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d0f8      	beq.n	8000ed6 <Keypad_Get_Char+0xf6>
		HAL_Delay(4);
 8000ee4:	2004      	movs	r0, #4
 8000ee6:	f001 fe1d 	bl	8002b24 <HAL_Delay>
		val_key = keys[0][3];
 8000eea:	2241      	movs	r2, #65	; 0x41
 8000eec:	4b93      	ldr	r3, [pc, #588]	; (800113c <Keypad_Get_Char+0x35c>)
 8000eee:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efa:	f002 f8d3 	bl	80030a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f04:	488e      	ldr	r0, [pc, #568]	; (8001140 <Keypad_Get_Char+0x360>)
 8000f06:	f002 f8cd 	bl	80030a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	488c      	ldr	r0, [pc, #560]	; (8001140 <Keypad_Get_Char+0x360>)
 8000f10:	f002 f8c8 	bl	80030a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	2120      	movs	r1, #32
 8000f18:	4889      	ldr	r0, [pc, #548]	; (8001140 <Keypad_Get_Char+0x360>)
 8000f1a:	f002 f8c3 	bl	80030a4 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 8000f1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f26:	f002 f8a5 	bl	8003074 <HAL_GPIO_ReadPin>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d112      	bne.n	8000f56 <Keypad_Get_Char+0x176>
		HAL_Delay(4);
 8000f30:	2004      	movs	r0, #4
 8000f32:	f001 fdf7 	bl	8002b24 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 8000f36:	bf00      	nop
 8000f38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f40:	f002 f898 	bl	8003074 <HAL_GPIO_ReadPin>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f6      	beq.n	8000f38 <Keypad_Get_Char+0x158>
		HAL_Delay(4);
 8000f4a:	2004      	movs	r0, #4
 8000f4c:	f001 fdea 	bl	8002b24 <HAL_Delay>
		val_key = keys[1][0];
 8000f50:	2234      	movs	r2, #52	; 0x34
 8000f52:	4b7a      	ldr	r3, [pc, #488]	; (800113c <Keypad_Get_Char+0x35c>)
 8000f54:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 8000f56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5e:	f002 f889 	bl	8003074 <HAL_GPIO_ReadPin>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d112      	bne.n	8000f8e <Keypad_Get_Char+0x1ae>
		HAL_Delay(4);
 8000f68:	2004      	movs	r0, #4
 8000f6a:	f001 fddb 	bl	8002b24 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 8000f6e:	bf00      	nop
 8000f70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f78:	f002 f87c 	bl	8003074 <HAL_GPIO_ReadPin>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d0f6      	beq.n	8000f70 <Keypad_Get_Char+0x190>
		HAL_Delay(4);
 8000f82:	2004      	movs	r0, #4
 8000f84:	f001 fdce 	bl	8002b24 <HAL_Delay>
		val_key = keys[1][1];
 8000f88:	2235      	movs	r2, #53	; 0x35
 8000f8a:	4b6c      	ldr	r3, [pc, #432]	; (800113c <Keypad_Get_Char+0x35c>)
 8000f8c:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 8000f8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f96:	f002 f86d 	bl	8003074 <HAL_GPIO_ReadPin>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d112      	bne.n	8000fc6 <Keypad_Get_Char+0x1e6>
		HAL_Delay(4);
 8000fa0:	2004      	movs	r0, #4
 8000fa2:	f001 fdbf 	bl	8002b24 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8000fa6:	bf00      	nop
 8000fa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb0:	f002 f860 	bl	8003074 <HAL_GPIO_ReadPin>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0f6      	beq.n	8000fa8 <Keypad_Get_Char+0x1c8>
		HAL_Delay(4);
 8000fba:	2004      	movs	r0, #4
 8000fbc:	f001 fdb2 	bl	8002b24 <HAL_Delay>
		val_key = keys[1][2];
 8000fc0:	2236      	movs	r2, #54	; 0x36
 8000fc2:	4b5e      	ldr	r3, [pc, #376]	; (800113c <Keypad_Get_Char+0x35c>)
 8000fc4:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 8000fc6:	2180      	movs	r1, #128	; 0x80
 8000fc8:	485e      	ldr	r0, [pc, #376]	; (8001144 <Keypad_Get_Char+0x364>)
 8000fca:	f002 f853 	bl	8003074 <HAL_GPIO_ReadPin>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d110      	bne.n	8000ff6 <Keypad_Get_Char+0x216>
		HAL_Delay(4);
 8000fd4:	2004      	movs	r0, #4
 8000fd6:	f001 fda5 	bl	8002b24 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 8000fda:	bf00      	nop
 8000fdc:	2180      	movs	r1, #128	; 0x80
 8000fde:	4859      	ldr	r0, [pc, #356]	; (8001144 <Keypad_Get_Char+0x364>)
 8000fe0:	f002 f848 	bl	8003074 <HAL_GPIO_ReadPin>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0f8      	beq.n	8000fdc <Keypad_Get_Char+0x1fc>
		HAL_Delay(4);
 8000fea:	2004      	movs	r0, #4
 8000fec:	f001 fd9a 	bl	8002b24 <HAL_Delay>
		val_key = keys[1][3];
 8000ff0:	2242      	movs	r2, #66	; 0x42
 8000ff2:	4b52      	ldr	r3, [pc, #328]	; (800113c <Keypad_Get_Char+0x35c>)
 8000ff4:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001000:	f002 f850 	bl	80030a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800100a:	484d      	ldr	r0, [pc, #308]	; (8001140 <Keypad_Get_Char+0x360>)
 800100c:	f002 f84a 	bl	80030a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	2110      	movs	r1, #16
 8001014:	484a      	ldr	r0, [pc, #296]	; (8001140 <Keypad_Get_Char+0x360>)
 8001016:	f002 f845 	bl	80030a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	2120      	movs	r1, #32
 800101e:	4848      	ldr	r0, [pc, #288]	; (8001140 <Keypad_Get_Char+0x360>)
 8001020:	f002 f840 	bl	80030a4 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 8001024:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102c:	f002 f822 	bl	8003074 <HAL_GPIO_ReadPin>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d112      	bne.n	800105c <Keypad_Get_Char+0x27c>
		HAL_Delay(4);
 8001036:	2004      	movs	r0, #4
 8001038:	f001 fd74 	bl	8002b24 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 800103c:	bf00      	nop
 800103e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001046:	f002 f815 	bl	8003074 <HAL_GPIO_ReadPin>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0f6      	beq.n	800103e <Keypad_Get_Char+0x25e>
		HAL_Delay(4);
 8001050:	2004      	movs	r0, #4
 8001052:	f001 fd67 	bl	8002b24 <HAL_Delay>
		val_key = keys[2][0];
 8001056:	2237      	movs	r2, #55	; 0x37
 8001058:	4b38      	ldr	r3, [pc, #224]	; (800113c <Keypad_Get_Char+0x35c>)
 800105a:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 800105c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001064:	f002 f806 	bl	8003074 <HAL_GPIO_ReadPin>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d112      	bne.n	8001094 <Keypad_Get_Char+0x2b4>
		HAL_Delay(4);
 800106e:	2004      	movs	r0, #4
 8001070:	f001 fd58 	bl	8002b24 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 8001074:	bf00      	nop
 8001076:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107e:	f001 fff9 	bl	8003074 <HAL_GPIO_ReadPin>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0f6      	beq.n	8001076 <Keypad_Get_Char+0x296>
		HAL_Delay(4);
 8001088:	2004      	movs	r0, #4
 800108a:	f001 fd4b 	bl	8002b24 <HAL_Delay>
		val_key = keys[2][1];
 800108e:	2238      	movs	r2, #56	; 0x38
 8001090:	4b2a      	ldr	r3, [pc, #168]	; (800113c <Keypad_Get_Char+0x35c>)
 8001092:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 8001094:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109c:	f001 ffea 	bl	8003074 <HAL_GPIO_ReadPin>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d112      	bne.n	80010cc <Keypad_Get_Char+0x2ec>
		HAL_Delay(4);
 80010a6:	2004      	movs	r0, #4
 80010a8:	f001 fd3c 	bl	8002b24 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 80010ac:	bf00      	nop
 80010ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b6:	f001 ffdd 	bl	8003074 <HAL_GPIO_ReadPin>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d0f6      	beq.n	80010ae <Keypad_Get_Char+0x2ce>
		HAL_Delay(4);
 80010c0:	2004      	movs	r0, #4
 80010c2:	f001 fd2f 	bl	8002b24 <HAL_Delay>
		val_key = keys[2][2];
 80010c6:	2239      	movs	r2, #57	; 0x39
 80010c8:	4b1c      	ldr	r3, [pc, #112]	; (800113c <Keypad_Get_Char+0x35c>)
 80010ca:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin))){
 80010cc:	2180      	movs	r1, #128	; 0x80
 80010ce:	481d      	ldr	r0, [pc, #116]	; (8001144 <Keypad_Get_Char+0x364>)
 80010d0:	f001 ffd0 	bl	8003074 <HAL_GPIO_ReadPin>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d110      	bne.n	80010fc <Keypad_Get_Char+0x31c>
		HAL_Delay(4);
 80010da:	2004      	movs	r0, #4
 80010dc:	f001 fd22 	bl	8002b24 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 80010e0:	bf00      	nop
 80010e2:	2180      	movs	r1, #128	; 0x80
 80010e4:	4817      	ldr	r0, [pc, #92]	; (8001144 <Keypad_Get_Char+0x364>)
 80010e6:	f001 ffc5 	bl	8003074 <HAL_GPIO_ReadPin>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0f8      	beq.n	80010e2 <Keypad_Get_Char+0x302>
		HAL_Delay(4);
 80010f0:	2004      	movs	r0, #4
 80010f2:	f001 fd17 	bl	8002b24 <HAL_Delay>
		val_key = keys[2][3];
 80010f6:	2243      	movs	r2, #67	; 0x43
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <Keypad_Get_Char+0x35c>)
 80010fa:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 80010fc:	2201      	movs	r2, #1
 80010fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001106:	f001 ffcd 	bl	80030a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001110:	480b      	ldr	r0, [pc, #44]	; (8001140 <Keypad_Get_Char+0x360>)
 8001112:	f001 ffc7 	bl	80030a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8001116:	2201      	movs	r2, #1
 8001118:	2110      	movs	r1, #16
 800111a:	4809      	ldr	r0, [pc, #36]	; (8001140 <Keypad_Get_Char+0x360>)
 800111c:	f001 ffc2 	bl	80030a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2120      	movs	r1, #32
 8001124:	4806      	ldr	r0, [pc, #24]	; (8001140 <Keypad_Get_Char+0x360>)
 8001126:	f001 ffbd 	bl	80030a4 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 800112a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800112e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001132:	f001 ff9f 	bl	8003074 <HAL_GPIO_ReadPin>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	e005      	b.n	8001148 <Keypad_Get_Char+0x368>
 800113c:	200004bc 	.word	0x200004bc
 8001140:	48000400 	.word	0x48000400
 8001144:	48000800 	.word	0x48000800
 8001148:	d112      	bne.n	8001170 <Keypad_Get_Char+0x390>
		HAL_Delay(4);
 800114a:	2004      	movs	r0, #4
 800114c:	f001 fcea 	bl	8002b24 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 8001150:	bf00      	nop
 8001152:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001156:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115a:	f001 ff8b 	bl	8003074 <HAL_GPIO_ReadPin>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f6      	beq.n	8001152 <Keypad_Get_Char+0x372>
		HAL_Delay(4);
 8001164:	2004      	movs	r0, #4
 8001166:	f001 fcdd 	bl	8002b24 <HAL_Delay>
		val_key = keys[3][0];
 800116a:	222a      	movs	r2, #42	; 0x2a
 800116c:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <Keypad_Get_Char+0x438>)
 800116e:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 8001170:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001174:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001178:	f001 ff7c 	bl	8003074 <HAL_GPIO_ReadPin>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d112      	bne.n	80011a8 <Keypad_Get_Char+0x3c8>
		HAL_Delay(4);
 8001182:	2004      	movs	r0, #4
 8001184:	f001 fcce 	bl	8002b24 <HAL_Delay>
		while (!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 8001188:	bf00      	nop
 800118a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800118e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001192:	f001 ff6f 	bl	8003074 <HAL_GPIO_ReadPin>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f6      	beq.n	800118a <Keypad_Get_Char+0x3aa>
		HAL_Delay(4);
 800119c:	2004      	movs	r0, #4
 800119e:	f001 fcc1 	bl	8002b24 <HAL_Delay>
		val_key = keys[3][1];
 80011a2:	2230      	movs	r2, #48	; 0x30
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <Keypad_Get_Char+0x438>)
 80011a6:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 80011a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b0:	f001 ff60 	bl	8003074 <HAL_GPIO_ReadPin>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d112      	bne.n	80011e0 <Keypad_Get_Char+0x400>
		HAL_Delay(4);
 80011ba:	2004      	movs	r0, #4
 80011bc:	f001 fcb2 	bl	8002b24 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 80011c0:	bf00      	nop
 80011c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ca:	f001 ff53 	bl	8003074 <HAL_GPIO_ReadPin>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f6      	beq.n	80011c2 <Keypad_Get_Char+0x3e2>
		HAL_Delay(4);
 80011d4:	2004      	movs	r0, #4
 80011d6:	f001 fca5 	bl	8002b24 <HAL_Delay>
		val_key = keys[3][2];
 80011da:	2223      	movs	r2, #35	; 0x23
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <Keypad_Get_Char+0x438>)
 80011de:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 80011e0:	2180      	movs	r1, #128	; 0x80
 80011e2:	480e      	ldr	r0, [pc, #56]	; (800121c <Keypad_Get_Char+0x43c>)
 80011e4:	f001 ff46 	bl	8003074 <HAL_GPIO_ReadPin>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d110      	bne.n	8001210 <Keypad_Get_Char+0x430>
		HAL_Delay(4);
 80011ee:	2004      	movs	r0, #4
 80011f0:	f001 fc98 	bl	8002b24 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 80011f4:	bf00      	nop
 80011f6:	2180      	movs	r1, #128	; 0x80
 80011f8:	4808      	ldr	r0, [pc, #32]	; (800121c <Keypad_Get_Char+0x43c>)
 80011fa:	f001 ff3b 	bl	8003074 <HAL_GPIO_ReadPin>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f8      	beq.n	80011f6 <Keypad_Get_Char+0x416>
		HAL_Delay(4);
 8001204:	2004      	movs	r0, #4
 8001206:	f001 fc8d 	bl	8002b24 <HAL_Delay>
		val_key = keys[3][3];
 800120a:	2244      	movs	r2, #68	; 0x44
 800120c:	4b02      	ldr	r3, [pc, #8]	; (8001218 <Keypad_Get_Char+0x438>)
 800120e:	701a      	strb	r2, [r3, #0]
	}
	return val_key;
 8001210:	4b01      	ldr	r3, [pc, #4]	; (8001218 <Keypad_Get_Char+0x438>)
 8001212:	781b      	ldrb	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	bd80      	pop	{r7, pc}
 8001218:	200004bc 	.word	0x200004bc
 800121c:	48000800 	.word	0x48000800

08001220 <delay>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint16_t us) {
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <delay+0x30>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	; 0x24

	while (__HAL_TIM_GET_COUNTER(&htim1) < us)
 8001232:	bf00      	nop
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <delay+0x30>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	429a      	cmp	r2, r3
 800123e:	d3f9      	bcc.n	8001234 <delay+0x14>
		;
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000514 	.word	0x20000514

08001254 <HAL_TIM_PeriodElapsedCallback>:

#define stepsperrev 4096

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d104      	bne.n	8001270 <HAL_TIM_PeriodElapsedCallback+0x1c>

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8001266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800126a:	480f      	ldr	r0, [pc, #60]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800126c:	f001 ff32 	bl	80030d4 <HAL_GPIO_TogglePin>

	}

	if (htim->Instance == TIM1) {
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d104      	bne.n	8001284 <HAL_TIM_PeriodElapsedCallback+0x30>

			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 800127a:	2110      	movs	r1, #16
 800127c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001280:	f001 ff28 	bl	80030d4 <HAL_GPIO_TogglePin>

		}
	if (htim->Instance == TIM15) {
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a08      	ldr	r2, [pc, #32]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x58>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d105      	bne.n	800129a <HAL_TIM_PeriodElapsedCallback+0x46>

			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 800128e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001296:	f001 ff1d 	bl	80030d4 <HAL_GPIO_TogglePin>

		}

}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40012c00 	.word	0x40012c00
 80012a8:	48000400 	.word	0x48000400
 80012ac:	40014000 	.word	0x40014000

080012b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b091      	sub	sp, #68	; 0x44
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b6:	f001 fbcf 	bl	8002a58 <HAL_Init>
  /* USER CODE BEGIN Init */
	//Servo servo;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ba:	f000 fc9d 	bl	8001bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012be:	f000 fe8b 	bl	8001fd8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012c2:	f000 fe59 	bl	8001f78 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80012c6:	f000 fcf9 	bl	8001cbc <MX_I2C1_Init>
  MX_TIM1_Init();
 80012ca:	f000 fd37 	bl	8001d3c <MX_TIM1_Init>
  MX_TIM2_Init();
 80012ce:	f000 fd89 	bl	8001de4 <MX_TIM2_Init>
  MX_TIM15_Init();
 80012d2:	f000 fdff 	bl	8001ed4 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80012d6:	2100      	movs	r1, #0
 80012d8:	48b1      	ldr	r0, [pc, #708]	; (80015a0 <main+0x2f0>)
 80012da:	f004 f855 	bl	8005388 <HAL_TIM_PWM_Start>
	//HAL_TIM_Base_Start(&htim1);
	HAL_TIM_Base_Start_IT(&htim2);
 80012de:	48b0      	ldr	r0, [pc, #704]	; (80015a0 <main+0x2f0>)
 80012e0:	f003 ff9c 	bl	800521c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim15);
 80012e4:	48af      	ldr	r0, [pc, #700]	; (80015a4 <main+0x2f4>)
 80012e6:	f003 ff99 	bl	800521c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 80012ea:	48af      	ldr	r0, [pc, #700]	; (80015a8 <main+0x2f8>)
 80012ec:	f003 ff96 	bl	800521c <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 80012f0:	2200      	movs	r2, #0
 80012f2:	2101      	movs	r1, #1
 80012f4:	48ad      	ldr	r0, [pc, #692]	; (80015ac <main+0x2fc>)
 80012f6:	f001 fed5 	bl	80030a4 <HAL_GPIO_WritePin>
	lcd_init();
 80012fa:	f7ff fd1e 	bl	8000d3a <lcd_init>
	max_init(0x02);
 80012fe:	2002      	movs	r0, #2
 8001300:	f001 f98a 	bl	8002618 <max_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	write_char(2, 1);
 8001304:	2101      	movs	r1, #1
 8001306:	2002      	movs	r0, #2
 8001308:	f001 f842 	bl	8002390 <write_char>
	lcd_put_cur(0, 0);
 800130c:	2100      	movs	r1, #0
 800130e:	2000      	movs	r0, #0
 8001310:	f7ff fcf4 	bl	8000cfc <lcd_put_cur>
	lcd_send_string("---BIENVENIDO---");
 8001314:	48a6      	ldr	r0, [pc, #664]	; (80015b0 <main+0x300>)
 8001316:	f7ff fd4d 	bl	8000db4 <lcd_send_string>
	HAL_Delay(2000);
 800131a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800131e:	f001 fc01 	bl	8002b24 <HAL_Delay>
	max_clear();
 8001322:	f001 f8dd 	bl	80024e0 <max_clear>
	lcd_clear();
 8001326:	f7ff fcd2 	bl	8000cce <lcd_clear>
	write_char(63, 1);
 800132a:	2101      	movs	r1, #1
 800132c:	203f      	movs	r0, #63	; 0x3f
 800132e:	f001 f82f 	bl	8002390 <write_char>
	lcd_put_cur(0, 0);
 8001332:	2100      	movs	r1, #0
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff fce1 	bl	8000cfc <lcd_put_cur>
	lcd_send_string("  SEL. OPCION  ");
 800133a:	489e      	ldr	r0, [pc, #632]	; (80015b4 <main+0x304>)
 800133c:	f7ff fd3a 	bl	8000db4 <lcd_send_string>
	lcd_put_cur(1, 0);
 8001340:	2100      	movs	r1, #0
 8001342:	2001      	movs	r0, #1
 8001344:	f7ff fcda 	bl	8000cfc <lcd_put_cur>
	lcd_send_string("   SIGUIENTE   ");
 8001348:	489b      	ldr	r0, [pc, #620]	; (80015b8 <main+0x308>)
 800134a:	f7ff fd33 	bl	8000db4 <lcd_send_string>
	HAL_Delay(2000);
 800134e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001352:	f001 fbe7 	bl	8002b24 <HAL_Delay>
	lcd_clear();
 8001356:	f7ff fcba 	bl	8000cce <lcd_clear>
	max_clear();
 800135a:	f001 f8c1 	bl	80024e0 <max_clear>
	lcd_put_cur(0, 0);
 800135e:	2100      	movs	r1, #0
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff fccb 	bl	8000cfc <lcd_put_cur>
	lcd_send_string("  (A)SENSOR   ");
 8001366:	4895      	ldr	r0, [pc, #596]	; (80015bc <main+0x30c>)
 8001368:	f7ff fd24 	bl	8000db4 <lcd_send_string>
	lcd_put_cur(1, 0);
 800136c:	2100      	movs	r1, #0
 800136e:	2001      	movs	r0, #1
 8001370:	f7ff fcc4 	bl	8000cfc <lcd_put_cur>
	lcd_send_string("(B)SERVO (C)M.PP");
 8001374:	4892      	ldr	r0, [pc, #584]	; (80015c0 <main+0x310>)
 8001376:	f7ff fd1d 	bl	8000db4 <lcd_send_string>
	scroll_string((uint8_t*) "A B C  ", 100, left);
 800137a:	224c      	movs	r2, #76	; 0x4c
 800137c:	2164      	movs	r1, #100	; 0x64
 800137e:	4891      	ldr	r0, [pc, #580]	; (80015c4 <main+0x314>)
 8001380:	f001 f892 	bl	80024a8 <scroll_string>

	while (1) {

		char keypad_key = Keypad_Get_Char();
 8001384:	f7ff fd2c 	bl	8000de0 <Keypad_Get_Char>
 8001388:	4603      	mov	r3, r0
 800138a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (keypad_key == 'A') {
 800138e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001392:	2b41      	cmp	r3, #65	; 0x41
 8001394:	f040 81bc 	bne.w	8001710 <main+0x460>
			lcd_clear();
 8001398:	f7ff fc99 	bl	8000cce <lcd_clear>
			max_clear();
 800139c:	f001 f8a0 	bl	80024e0 <max_clear>
			write_char(65, 1);
 80013a0:	2101      	movs	r1, #1
 80013a2:	2041      	movs	r0, #65	; 0x41
 80013a4:	f000 fff4 	bl	8002390 <write_char>
			HAL_Delay(200);
 80013a8:	20c8      	movs	r0, #200	; 0xc8
 80013aa:	f001 fbbb 	bl	8002b24 <HAL_Delay>
			while (keypad_key == 'A') {
 80013ae:	e19b      	b.n	80016e8 <main+0x438>
				HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 80013b0:	2201      	movs	r2, #1
 80013b2:	2101      	movs	r1, #1
 80013b4:	487d      	ldr	r0, [pc, #500]	; (80015ac <main+0x2fc>)
 80013b6:	f001 fe75 	bl	80030a4 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COUNTER(&htim1, 0);
 80013ba:	4b7b      	ldr	r3, [pc, #492]	; (80015a8 <main+0x2f8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2200      	movs	r2, #0
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24
				while (__HAL_TIM_GET_COUNTER (&htim1) < 10)
 80013c2:	bf00      	nop
 80013c4:	4b78      	ldr	r3, [pc, #480]	; (80015a8 <main+0x2f8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	2b09      	cmp	r3, #9
 80013cc:	d9fa      	bls.n	80013c4 <main+0x114>
					; // wait for 10 us
				HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 80013ce:	2200      	movs	r2, #0
 80013d0:	2101      	movs	r1, #1
 80013d2:	4876      	ldr	r0, [pc, #472]	; (80015ac <main+0x2fc>)
 80013d4:	f001 fe66 	bl	80030a4 <HAL_GPIO_WritePin>

				pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 80013d8:	f001 fb98 	bl	8002b0c <HAL_GetTick>
 80013dc:	4603      	mov	r3, r0
 80013de:	4a7a      	ldr	r2, [pc, #488]	; (80015c8 <main+0x318>)
 80013e0:	6013      	str	r3, [r2, #0]
				//wait for the echo pin to go high
				while (!(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN))
 80013e2:	bf00      	nop
 80013e4:	2102      	movs	r1, #2
 80013e6:	4871      	ldr	r0, [pc, #452]	; (80015ac <main+0x2fc>)
 80013e8:	f001 fe44 	bl	8003074 <HAL_GPIO_ReadPin>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d108      	bne.n	8001404 <main+0x154>
						&& pMillis + 10 > HAL_GetTick())
 80013f2:	4b75      	ldr	r3, [pc, #468]	; (80015c8 <main+0x318>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f103 040a 	add.w	r4, r3, #10
 80013fa:	f001 fb87 	bl	8002b0c <HAL_GetTick>
 80013fe:	4603      	mov	r3, r0
 8001400:	429c      	cmp	r4, r3
 8001402:	d8ef      	bhi.n	80013e4 <main+0x134>
					;
				Value1 = __HAL_TIM_GET_COUNTER(&htim1);
 8001404:	4b68      	ldr	r3, [pc, #416]	; (80015a8 <main+0x2f8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	4a70      	ldr	r2, [pc, #448]	; (80015cc <main+0x31c>)
 800140c:	6013      	str	r3, [r2, #0]

				pMillis = HAL_GetTick();// used this to avoid infinite while loop (for timeout)
 800140e:	f001 fb7d 	bl	8002b0c <HAL_GetTick>
 8001412:	4603      	mov	r3, r0
 8001414:	4a6c      	ldr	r2, [pc, #432]	; (80015c8 <main+0x318>)
 8001416:	6013      	str	r3, [r2, #0]
				// wait for the echo pin to go low
				while ((HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN))
 8001418:	bf00      	nop
 800141a:	2102      	movs	r1, #2
 800141c:	4863      	ldr	r0, [pc, #396]	; (80015ac <main+0x2fc>)
 800141e:	f001 fe29 	bl	8003074 <HAL_GPIO_ReadPin>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d008      	beq.n	800143a <main+0x18a>
						&& pMillis + 50 > HAL_GetTick())
 8001428:	4b67      	ldr	r3, [pc, #412]	; (80015c8 <main+0x318>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001430:	f001 fb6c 	bl	8002b0c <HAL_GetTick>
 8001434:	4603      	mov	r3, r0
 8001436:	429c      	cmp	r4, r3
 8001438:	d8ef      	bhi.n	800141a <main+0x16a>
					;

				Value2 = __HAL_TIM_GET_COUNTER(&htim1);
 800143a:	4b5b      	ldr	r3, [pc, #364]	; (80015a8 <main+0x2f8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	4a63      	ldr	r2, [pc, #396]	; (80015d0 <main+0x320>)
 8001442:	6013      	str	r3, [r2, #0]

				lcd_put_cur(0, 0);
 8001444:	2100      	movs	r1, #0
 8001446:	2000      	movs	r0, #0
 8001448:	f7ff fc58 	bl	8000cfc <lcd_put_cur>
				lcd_send_string("Dist= ");
 800144c:	4861      	ldr	r0, [pc, #388]	; (80015d4 <main+0x324>)
 800144e:	f7ff fcb1 	bl	8000db4 <lcd_send_string>
				Distance = (Value2 - Value1) * 0.034 / 2;
 8001452:	4b5f      	ldr	r3, [pc, #380]	; (80015d0 <main+0x320>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	4b5d      	ldr	r3, [pc, #372]	; (80015cc <main+0x31c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f849 	bl	80004f4 <__aeabi_ui2d>
 8001462:	a34d      	add	r3, pc, #308	; (adr r3, 8001598 <main+0x2e8>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f7ff f8be 	bl	80005e8 <__aeabi_dmul>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800147c:	f7ff f9de 	bl	800083c <__aeabi_ddiv>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff fae8 	bl	8000a5c <__aeabi_d2uiz>
 800148c:	4603      	mov	r3, r0
 800148e:	b29a      	uxth	r2, r3
 8001490:	4b51      	ldr	r3, [pc, #324]	; (80015d8 <main+0x328>)
 8001492:	801a      	strh	r2, [r3, #0]

				lcd_send_string("Dist= ");
 8001494:	484f      	ldr	r0, [pc, #316]	; (80015d4 <main+0x324>)
 8001496:	f7ff fc8d 	bl	8000db4 <lcd_send_string>
				Distance = (Value2 - Value1) * 0.034 / 2;
 800149a:	4b4d      	ldr	r3, [pc, #308]	; (80015d0 <main+0x320>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4b4b      	ldr	r3, [pc, #300]	; (80015cc <main+0x31c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f825 	bl	80004f4 <__aeabi_ui2d>
 80014aa:	a33b      	add	r3, pc, #236	; (adr r3, 8001598 <main+0x2e8>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f89a 	bl	80005e8 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014c4:	f7ff f9ba 	bl	800083c <__aeabi_ddiv>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	f7ff fac4 	bl	8000a5c <__aeabi_d2uiz>
 80014d4:	4603      	mov	r3, r0
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <main+0x328>)
 80014da:	801a      	strh	r2, [r3, #0]
				// Limpia el espacio para la distancia
				lcd_put_cur(0, 6);// Establece el cursor en la columna 7, fila 0
 80014dc:	2106      	movs	r1, #6
 80014de:	2000      	movs	r0, #0
 80014e0:	f7ff fc0c 	bl	8000cfc <lcd_put_cur>
				lcd_send_data(' ');					// Borra el espacio anterior
 80014e4:	2020      	movs	r0, #32
 80014e6:	f7ff fbb1 	bl	8000c4c <lcd_send_data>

				// Muestra los dígitos de la distancia en el lugar deseado
				lcd_put_cur(0, 6);// Establece el cursor en la columna 7, fila 0
 80014ea:	2106      	movs	r1, #6
 80014ec:	2000      	movs	r0, #0
 80014ee:	f7ff fc05 	bl	8000cfc <lcd_put_cur>
				lcd_send_data((Distance / 100) + 48);				// 100th pos
 80014f2:	4b39      	ldr	r3, [pc, #228]	; (80015d8 <main+0x328>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	4a39      	ldr	r2, [pc, #228]	; (80015dc <main+0x32c>)
 80014f8:	fba2 2303 	umull	r2, r3, r2, r3
 80014fc:	095b      	lsrs	r3, r3, #5
 80014fe:	b29b      	uxth	r3, r3
 8001500:	b2db      	uxtb	r3, r3
 8001502:	3330      	adds	r3, #48	; 0x30
 8001504:	b2db      	uxtb	r3, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fba0 	bl	8000c4c <lcd_send_data>
				lcd_send_data(((Distance / 10) % 10) + 48);			// 10th pos
 800150c:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <main+0x328>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	4a33      	ldr	r2, [pc, #204]	; (80015e0 <main+0x330>)
 8001512:	fba2 2303 	umull	r2, r3, r2, r3
 8001516:	08db      	lsrs	r3, r3, #3
 8001518:	b29a      	uxth	r2, r3
 800151a:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <main+0x330>)
 800151c:	fba3 1302 	umull	r1, r3, r3, r2
 8001520:	08d9      	lsrs	r1, r3, #3
 8001522:	460b      	mov	r3, r1
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	440b      	add	r3, r1
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	b29b      	uxth	r3, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	3330      	adds	r3, #48	; 0x30
 8001532:	b2db      	uxtb	r3, r3
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fb89 	bl	8000c4c <lcd_send_data>
				lcd_send_data((Distance % 10) + 48);				// 1st pos
 800153a:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <main+0x328>)
 800153c:	881a      	ldrh	r2, [r3, #0]
 800153e:	4b28      	ldr	r3, [pc, #160]	; (80015e0 <main+0x330>)
 8001540:	fba3 1302 	umull	r1, r3, r3, r2
 8001544:	08d9      	lsrs	r1, r3, #3
 8001546:	460b      	mov	r3, r1
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	440b      	add	r3, r1
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	b29b      	uxth	r3, r3
 8001552:	b2db      	uxtb	r3, r3
 8001554:	3330      	adds	r3, #48	; 0x30
 8001556:	b2db      	uxtb	r3, r3
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fb77 	bl	8000c4c <lcd_send_data>
				lcd_send_string(" cm");
 800155e:	4821      	ldr	r0, [pc, #132]	; (80015e4 <main+0x334>)
 8001560:	f7ff fc28 	bl	8000db4 <lcd_send_string>
				//HAL_Delay(800);

				key = Distance;
 8001564:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <main+0x328>)
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <main+0x338>)
 800156c:	701a      	strb	r2, [r3, #0]
				char keyString[5];// Variable para almacenar el valor de key como cadena de caracteres
				static int previousKey = 0;	// Variable para almacenar el valor anterior de key
				//uint8_t change = 0;

				if (key < previousKey) {
 800156e:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <main+0x338>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	461a      	mov	r2, r3
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <main+0x33c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	da3b      	bge.n	80015f4 <main+0x344>
					change = 0;
 800157c:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <main+0x340>)
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
					//stepper_step_angle(90, change, 13);
					write_char(26, 1);
 8001582:	2101      	movs	r1, #1
 8001584:	201a      	movs	r0, #26
 8001586:	f000 ff03 	bl	8002390 <write_char>
					HAL_Delay(500);
 800158a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800158e:	f001 fac9 	bl	8002b24 <HAL_Delay>
					max_clear();
 8001592:	f000 ffa5 	bl	80024e0 <max_clear>
 8001596:	e041      	b.n	800161c <main+0x36c>
 8001598:	b020c49c 	.word	0xb020c49c
 800159c:	3fa16872 	.word	0x3fa16872
 80015a0:	20000560 	.word	0x20000560
 80015a4:	200005ac 	.word	0x200005ac
 80015a8:	20000514 	.word	0x20000514
 80015ac:	48000800 	.word	0x48000800
 80015b0:	080076a4 	.word	0x080076a4
 80015b4:	080076b8 	.word	0x080076b8
 80015b8:	080076c8 	.word	0x080076c8
 80015bc:	080076d8 	.word	0x080076d8
 80015c0:	080076e8 	.word	0x080076e8
 80015c4:	080076fc 	.word	0x080076fc
 80015c8:	20000688 	.word	0x20000688
 80015cc:	2000068c 	.word	0x2000068c
 80015d0:	20000690 	.word	0x20000690
 80015d4:	08007704 	.word	0x08007704
 80015d8:	20000694 	.word	0x20000694
 80015dc:	51eb851f 	.word	0x51eb851f
 80015e0:	cccccccd 	.word	0xcccccccd
 80015e4:	0800770c 	.word	0x0800770c
 80015e8:	20000684 	.word	0x20000684
 80015ec:	20000698 	.word	0x20000698
 80015f0:	20000696 	.word	0x20000696
					//lcd_put_cur(1, 0);
					//lcd_send_string("Disminuye");
					//HAL_Delay(1000);
				} else if (key > previousKey) {
 80015f4:	4ba2      	ldr	r3, [pc, #648]	; (8001880 <main+0x5d0>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4ba2      	ldr	r3, [pc, #648]	; (8001884 <main+0x5d4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	dd0c      	ble.n	800161c <main+0x36c>
					change = 1;
 8001602:	4ba1      	ldr	r3, [pc, #644]	; (8001888 <main+0x5d8>)
 8001604:	2201      	movs	r2, #1
 8001606:	701a      	strb	r2, [r3, #0]
					//stepper_step_angle(90, change, 13);
					write_char(27, 1);
 8001608:	2101      	movs	r1, #1
 800160a:	201b      	movs	r0, #27
 800160c:	f000 fec0 	bl	8002390 <write_char>
					HAL_Delay(500);
 8001610:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001614:	f001 fa86 	bl	8002b24 <HAL_Delay>
					max_clear();
 8001618:	f000 ff62 	bl	80024e0 <max_clear>
					//lcd_send_string("Aumenta");
					//HAL_Delay(1000);
				}
				static int currentAngle = 0; // Variable para almacenar la posición actual del stepper

					if (Distance != currentAngle) {
 800161c:	4b9b      	ldr	r3, [pc, #620]	; (800188c <main+0x5dc>)
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	4b9b      	ldr	r3, [pc, #620]	; (8001890 <main+0x5e0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d01e      	beq.n	8001668 <main+0x3b8>
						int stepsToMove = abs(Distance - currentAngle);
 800162a:	4b98      	ldr	r3, [pc, #608]	; (800188c <main+0x5dc>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	4b97      	ldr	r3, [pc, #604]	; (8001890 <main+0x5e0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	bfb8      	it	lt
 800163a:	425b      	neglt	r3, r3
 800163c:	61bb      	str	r3, [r7, #24]
						stepperDelay = stepsToMove;
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	4a94      	ldr	r2, [pc, #592]	; (8001894 <main+0x5e4>)
 8001642:	6013      	str	r3, [r2, #0]
						stepper_step_angle(stepsToMove, change, 13);
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	ee07 3a90 	vmov	s15, r3
 800164a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164e:	4b8e      	ldr	r3, [pc, #568]	; (8001888 <main+0x5d8>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	210d      	movs	r1, #13
 8001654:	4618      	mov	r0, r3
 8001656:	eeb0 0a67 	vmov.f32	s0, s15
 800165a:	f7ff fa7b 	bl	8000b54 <stepper_step_angle>
						currentAngle = Distance;
 800165e:	4b8b      	ldr	r3, [pc, #556]	; (800188c <main+0x5dc>)
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	4b8a      	ldr	r3, [pc, #552]	; (8001890 <main+0x5e0>)
 8001666:	601a      	str	r2, [r3, #0]

					}
					int mov = Distance * 3;
 8001668:	4b88      	ldr	r3, [pc, #544]	; (800188c <main+0x5dc>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	617b      	str	r3, [r7, #20]
					htim2.Instance->CCR1 = 500 + (mov * 11.11111);
 8001676:	6978      	ldr	r0, [r7, #20]
 8001678:	f7fe ff4c 	bl	8000514 <__aeabi_i2d>
 800167c:	a37c      	add	r3, pc, #496	; (adr r3, 8001870 <main+0x5c0>)
 800167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001682:	f7fe ffb1 	bl	80005e8 <__aeabi_dmul>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	4b81      	ldr	r3, [pc, #516]	; (8001898 <main+0x5e8>)
 8001694:	f7fe fdf2 	bl	800027c <__adddf3>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	497f      	ldr	r1, [pc, #508]	; (800189c <main+0x5ec>)
 800169e:	680c      	ldr	r4, [r1, #0]
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	f7ff f9da 	bl	8000a5c <__aeabi_d2uiz>
 80016a8:	4603      	mov	r3, r0
 80016aa:	6363      	str	r3, [r4, #52]	; 0x34



				snprintf(keyString, sizeof(keyString), "%d", key); // Convierte el valor de key a una cadena de caracteres
 80016ac:	4b74      	ldr	r3, [pc, #464]	; (8001880 <main+0x5d0>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	f107 000c 	add.w	r0, r7, #12
 80016b4:	4a7a      	ldr	r2, [pc, #488]	; (80018a0 <main+0x5f0>)
 80016b6:	2105      	movs	r1, #5
 80016b8:	f005 faa8 	bl	8006c0c <sniprintf>
				lcd_clear(); // Borra la pantalla
 80016bc:	f7ff fb07 	bl	8000cce <lcd_clear>
				lcd_send_string(keyString); // Muestra el valor de key en la pantalla
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fb75 	bl	8000db4 <lcd_send_string>
				previousKey = key; // Actualiza el valor anterior de key
 80016ca:	4b6d      	ldr	r3, [pc, #436]	; (8001880 <main+0x5d0>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b6c      	ldr	r3, [pc, #432]	; (8001884 <main+0x5d4>)
 80016d2:	601a      	str	r2, [r3, #0]

				if (Keypad_Get_Char() == '#') {
 80016d4:	f7ff fb84 	bl	8000de0 <Keypad_Get_Char>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b23      	cmp	r3, #35	; 0x23
 80016dc:	d104      	bne.n	80016e8 <main+0x438>
					lcd_clear();
 80016de:	f7ff faf6 	bl	8000cce <lcd_clear>
					max_clear();
 80016e2:	f000 fefd 	bl	80024e0 <max_clear>
 80016e6:	e004      	b.n	80016f2 <main+0x442>
			while (keypad_key == 'A') {
 80016e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80016ec:	2b41      	cmp	r3, #65	; 0x41
 80016ee:	f43f ae5f 	beq.w	80013b0 <main+0x100>
					break; // Exit the while loop and go back to the beginning
				}
			}
			lcd_put_cur(0, 0);
 80016f2:	2100      	movs	r1, #0
 80016f4:	2000      	movs	r0, #0
 80016f6:	f7ff fb01 	bl	8000cfc <lcd_put_cur>
			lcd_send_string("  (A)SENSOR   ");
 80016fa:	486a      	ldr	r0, [pc, #424]	; (80018a4 <main+0x5f4>)
 80016fc:	f7ff fb5a 	bl	8000db4 <lcd_send_string>
			lcd_put_cur(1, 0);
 8001700:	2100      	movs	r1, #0
 8001702:	2001      	movs	r0, #1
 8001704:	f7ff fafa 	bl	8000cfc <lcd_put_cur>
			lcd_send_string("(B)SERVO (C)M.PP");
 8001708:	4867      	ldr	r0, [pc, #412]	; (80018a8 <main+0x5f8>)
 800170a:	f7ff fb53 	bl	8000db4 <lcd_send_string>
 800170e:	e639      	b.n	8001384 <main+0xd4>
		} else if (keypad_key == 'B') {
 8001710:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001714:	2b42      	cmp	r3, #66	; 0x42
 8001716:	f040 8111 	bne.w	800193c <main+0x68c>
			lcd_clear();
 800171a:	f7ff fad8 	bl	8000cce <lcd_clear>
			max_clear();
 800171e:	f000 fedf 	bl	80024e0 <max_clear>
			write_char(66, 1);
 8001722:	2101      	movs	r1, #1
 8001724:	2042      	movs	r0, #66	; 0x42
 8001726:	f000 fe33 	bl	8002390 <write_char>
			HAL_Delay(200);
 800172a:	20c8      	movs	r0, #200	; 0xc8
 800172c:	f001 f9fa 	bl	8002b24 <HAL_Delay>
			while (keypad_key == 'B') {
 8001730:	e0f0      	b.n	8001914 <main+0x664>
				lcd_put_cur(0, 0);
 8001732:	2100      	movs	r1, #0
 8001734:	2000      	movs	r0, #0
 8001736:	f7ff fae1 	bl	8000cfc <lcd_put_cur>
				lcd_send_string("---INT. ANGULO--");
 800173a:	485c      	ldr	r0, [pc, #368]	; (80018ac <main+0x5fc>)
 800173c:	f7ff fb3a 	bl	8000db4 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001740:	2100      	movs	r1, #0
 8001742:	2001      	movs	r0, #1
 8001744:	f7ff fada 	bl	8000cfc <lcd_put_cur>
				lcd_send_string("GRADOS:");
 8001748:	4859      	ldr	r0, [pc, #356]	; (80018b0 <main+0x600>)
 800174a:	f7ff fb33 	bl	8000db4 <lcd_send_string>
				write_char(132, 1);
 800174e:	2101      	movs	r1, #1
 8001750:	2084      	movs	r0, #132	; 0x84
 8001752:	f000 fe1d 	bl	8002390 <write_char>

				char digits[4]; // Variable para almacenar los dígitos ingresados (3 dígitos + el carácter nulo)
				int digitCount = 0; // Contador de dígitos
 8001756:	2300      	movs	r3, #0
 8001758:	63bb      	str	r3, [r7, #56]	; 0x38

				while (digitCount < 3) {
 800175a:	e035      	b.n	80017c8 <main+0x518>
					keypad = Keypad_Get_Char();
 800175c:	f7ff fb40 	bl	8000de0 <Keypad_Get_Char>
 8001760:	4603      	mov	r3, r0
 8001762:	461a      	mov	r2, r3
 8001764:	4b53      	ldr	r3, [pc, #332]	; (80018b4 <main+0x604>)
 8001766:	701a      	strb	r2, [r3, #0]

					if (keypad >= '0' && keypad <= '9') {
 8001768:	4b52      	ldr	r3, [pc, #328]	; (80018b4 <main+0x604>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b2f      	cmp	r3, #47	; 0x2f
 800176e:	d913      	bls.n	8001798 <main+0x4e8>
 8001770:	4b50      	ldr	r3, [pc, #320]	; (80018b4 <main+0x604>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b39      	cmp	r3, #57	; 0x39
 8001776:	d80f      	bhi.n	8001798 <main+0x4e8>
						digits[digitCount] = keypad;
 8001778:	4b4e      	ldr	r3, [pc, #312]	; (80018b4 <main+0x604>)
 800177a:	7819      	ldrb	r1, [r3, #0]
 800177c:	f107 0208 	add.w	r2, r7, #8
 8001780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001782:	4413      	add	r3, r2
 8001784:	460a      	mov	r2, r1
 8001786:	701a      	strb	r2, [r3, #0]
						digitCount++;
 8001788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800178a:	3301      	adds	r3, #1
 800178c:	63bb      	str	r3, [r7, #56]	; 0x38
						lcd_send_data(keypad);
 800178e:	4b49      	ldr	r3, [pc, #292]	; (80018b4 <main+0x604>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fa5a 	bl	8000c4c <lcd_send_data>
					}

					// Si se presiona el botón 'D', se borra la pantalla LCD y se establece el ángulo del servo en 0 grados
					if (keypad == 'D') {
 8001798:	4b46      	ldr	r3, [pc, #280]	; (80018b4 <main+0x604>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b44      	cmp	r3, #68	; 0x44
 800179e:	d107      	bne.n	80017b0 <main+0x500>
						lcd_clear();
 80017a0:	f7ff fa95 	bl	8000cce <lcd_clear>
						htim2.Instance->CCR1 = 500;  // 0.5ms = 0 grados
 80017a4:	4b3d      	ldr	r3, [pc, #244]	; (800189c <main+0x5ec>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017ac:	635a      	str	r2, [r3, #52]	; 0x34
						break;
 80017ae:	e00e      	b.n	80017ce <main+0x51e>
					}

					// Si se presiona el botón '#', se sale de la selección y vuelve al inicio
					if (keypad == '#') {
 80017b0:	4b40      	ldr	r3, [pc, #256]	; (80018b4 <main+0x604>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b23      	cmp	r3, #35	; 0x23
 80017b6:	d107      	bne.n	80017c8 <main+0x518>
						lcd_clear();
 80017b8:	f7ff fa89 	bl	8000cce <lcd_clear>
						keypad_key = ' '; // Reiniciar la opción seleccionada para volver al inicio
 80017bc:	2320      	movs	r3, #32
 80017be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						max_clear();
 80017c2:	f000 fe8d 	bl	80024e0 <max_clear>
						break;
 80017c6:	e002      	b.n	80017ce <main+0x51e>
				while (digitCount < 3) {
 80017c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	ddc6      	ble.n	800175c <main+0x4ac>

					}

				}

				if (digitCount == 3) {
 80017ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	f040 809f 	bne.w	8001914 <main+0x664>
					digits[digitCount] = '\0'; // Agregar el carácter nulo al final de los dígitos para formar una cadena válida
 80017d6:	f107 0208 	add.w	r2, r7, #8
 80017da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017dc:	4413      	add	r3, r2
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
					int angle = atoi(digits); // Convertir los dígitos a un entero
 80017e2:	f107 0308 	add.w	r3, r7, #8
 80017e6:	4618      	mov	r0, r3
 80017e8:	f005 f9cb 	bl	8006b82 <atoi>
 80017ec:	6238      	str	r0, [r7, #32]

					// Validar el rango del ángulo (por ejemplo, asegurarse de que esté entre 0 y 180 grados)
					if (angle >= 0 && angle <= 180) {
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	db61      	blt.n	80018b8 <main+0x608>
 80017f4:	6a3b      	ldr	r3, [r7, #32]
 80017f6:	2bb4      	cmp	r3, #180	; 0xb4
 80017f8:	dc5e      	bgt.n	80018b8 <main+0x608>
						int servoAngle = 500 + angle * 11.1111; // Calcular el valor correspondiente del ángulo para el servo
 80017fa:	6a38      	ldr	r0, [r7, #32]
 80017fc:	f7fe fe8a 	bl	8000514 <__aeabi_i2d>
 8001800:	a31d      	add	r3, pc, #116	; (adr r3, 8001878 <main+0x5c8>)
 8001802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001806:	f7fe feef 	bl	80005e8 <__aeabi_dmul>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <main+0x5e8>)
 8001818:	f7fe fd30 	bl	800027c <__adddf3>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	f7ff f8f2 	bl	8000a0c <__aeabi_d2iz>
 8001828:	4603      	mov	r3, r0
 800182a:	61fb      	str	r3, [r7, #28]
						htim2.Instance->CCR1 = servoAngle;
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <main+0x5ec>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	69fa      	ldr	r2, [r7, #28]
 8001832:	635a      	str	r2, [r3, #52]	; 0x34
						HAL_Delay(3000);
 8001834:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001838:	f001 f974 	bl	8002b24 <HAL_Delay>
						lcd_clear();
 800183c:	f7ff fa47 	bl	8000cce <lcd_clear>
						lcd_put_cur(0, 0);
 8001840:	2100      	movs	r1, #0
 8001842:	2000      	movs	r0, #0
 8001844:	f7ff fa5a 	bl	8000cfc <lcd_put_cur>
						lcd_send_string("---INT. ANGULO--");
 8001848:	4818      	ldr	r0, [pc, #96]	; (80018ac <main+0x5fc>)
 800184a:	f7ff fab3 	bl	8000db4 <lcd_send_string>
						lcd_put_cur(1, 0);
 800184e:	2100      	movs	r1, #0
 8001850:	2001      	movs	r0, #1
 8001852:	f7ff fa53 	bl	8000cfc <lcd_put_cur>
						lcd_send_string("GRADOS:");
 8001856:	4816      	ldr	r0, [pc, #88]	; (80018b0 <main+0x600>)
 8001858:	f7ff faac 	bl	8000db4 <lcd_send_string>
						write_char(132, 1);
 800185c:	2101      	movs	r1, #1
 800185e:	2084      	movs	r0, #132	; 0x84
 8001860:	f000 fd96 	bl	8002390 <write_char>
						max_clear();
 8001864:	f000 fe3c 	bl	80024e0 <max_clear>
					if (angle >= 0 && angle <= 180) {
 8001868:	e054      	b.n	8001914 <main+0x664>
 800186a:	bf00      	nop
 800186c:	f3af 8000 	nop.w
 8001870:	68f08462 	.word	0x68f08462
 8001874:	402638e3 	.word	0x402638e3
 8001878:	19652bd4 	.word	0x19652bd4
 800187c:	402638e2 	.word	0x402638e2
 8001880:	20000684 	.word	0x20000684
 8001884:	20000698 	.word	0x20000698
 8001888:	20000696 	.word	0x20000696
 800188c:	20000694 	.word	0x20000694
 8001890:	2000069c 	.word	0x2000069c
 8001894:	20000680 	.word	0x20000680
 8001898:	407f4000 	.word	0x407f4000
 800189c:	20000560 	.word	0x20000560
 80018a0:	08007710 	.word	0x08007710
 80018a4:	080076d8 	.word	0x080076d8
 80018a8:	080076e8 	.word	0x080076e8
 80018ac:	08007714 	.word	0x08007714
 80018b0:	08007728 	.word	0x08007728
 80018b4:	20000685 	.word	0x20000685

					} else {
						max_clear();
 80018b8:	f000 fe12 	bl	80024e0 <max_clear>
						lcd_clear();
 80018bc:	f7ff fa07 	bl	8000cce <lcd_clear>
						write_char(130, 1);
 80018c0:	2101      	movs	r1, #1
 80018c2:	2082      	movs	r0, #130	; 0x82
 80018c4:	f000 fd64 	bl	8002390 <write_char>
						lcd_put_cur(0, 0);
 80018c8:	2100      	movs	r1, #0
 80018ca:	2000      	movs	r0, #0
 80018cc:	f7ff fa16 	bl	8000cfc <lcd_put_cur>
						lcd_send_string("Angulo fuera de ");
 80018d0:	48bb      	ldr	r0, [pc, #748]	; (8001bc0 <main+0x910>)
 80018d2:	f7ff fa6f 	bl	8000db4 <lcd_send_string>
						lcd_put_cur(1, 0);
 80018d6:	2100      	movs	r1, #0
 80018d8:	2001      	movs	r0, #1
 80018da:	f7ff fa0f 	bl	8000cfc <lcd_put_cur>
						lcd_send_string("rango ");
 80018de:	48b9      	ldr	r0, [pc, #740]	; (8001bc4 <main+0x914>)
 80018e0:	f7ff fa68 	bl	8000db4 <lcd_send_string>
						HAL_Delay(2000);
 80018e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018e8:	f001 f91c 	bl	8002b24 <HAL_Delay>
						max_clear();
 80018ec:	f000 fdf8 	bl	80024e0 <max_clear>
						lcd_put_cur(0, 0);
 80018f0:	2100      	movs	r1, #0
 80018f2:	2000      	movs	r0, #0
 80018f4:	f7ff fa02 	bl	8000cfc <lcd_put_cur>
						lcd_send_string("---INT. ANGULO--");
 80018f8:	48b3      	ldr	r0, [pc, #716]	; (8001bc8 <main+0x918>)
 80018fa:	f7ff fa5b 	bl	8000db4 <lcd_send_string>
						lcd_put_cur(1, 0);
 80018fe:	2100      	movs	r1, #0
 8001900:	2001      	movs	r0, #1
 8001902:	f7ff f9fb 	bl	8000cfc <lcd_put_cur>
						lcd_send_string("GRADOS:");
 8001906:	48b1      	ldr	r0, [pc, #708]	; (8001bcc <main+0x91c>)
 8001908:	f7ff fa54 	bl	8000db4 <lcd_send_string>
						write_char(132, 1);
 800190c:	2101      	movs	r1, #1
 800190e:	2084      	movs	r0, #132	; 0x84
 8001910:	f000 fd3e 	bl	8002390 <write_char>
			while (keypad_key == 'B') {
 8001914:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001918:	2b42      	cmp	r3, #66	; 0x42
 800191a:	f43f af0a 	beq.w	8001732 <main+0x482>
						// Angulo fuera de rango, mostrar mensaje de error o tomar alguna acción adecuada

					}
				}
			}
			lcd_put_cur(0, 0);
 800191e:	2100      	movs	r1, #0
 8001920:	2000      	movs	r0, #0
 8001922:	f7ff f9eb 	bl	8000cfc <lcd_put_cur>
			lcd_send_string("  (A)SENSOR   ");
 8001926:	48aa      	ldr	r0, [pc, #680]	; (8001bd0 <main+0x920>)
 8001928:	f7ff fa44 	bl	8000db4 <lcd_send_string>
			lcd_put_cur(1, 0);
 800192c:	2100      	movs	r1, #0
 800192e:	2001      	movs	r0, #1
 8001930:	f7ff f9e4 	bl	8000cfc <lcd_put_cur>
			lcd_send_string("(B)SERVO (C)M.PP");
 8001934:	48a7      	ldr	r0, [pc, #668]	; (8001bd4 <main+0x924>)
 8001936:	f7ff fa3d 	bl	8000db4 <lcd_send_string>
 800193a:	e523      	b.n	8001384 <main+0xd4>

		} else if (keypad_key == 'C') {
 800193c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001940:	2b43      	cmp	r3, #67	; 0x43
 8001942:	f040 810e 	bne.w	8001b62 <main+0x8b2>
			lcd_clear();
 8001946:	f7ff f9c2 	bl	8000cce <lcd_clear>
			max_clear();
 800194a:	f000 fdc9 	bl	80024e0 <max_clear>
			write_char(80, 1);
 800194e:	2101      	movs	r1, #1
 8001950:	2050      	movs	r0, #80	; 0x50
 8001952:	f000 fd1d 	bl	8002390 <write_char>
			HAL_Delay(200);
 8001956:	20c8      	movs	r0, #200	; 0xc8
 8001958:	f001 f8e4 	bl	8002b24 <HAL_Delay>
			while (keypad_key == 'C') {
 800195c:	e0e9      	b.n	8001b32 <main+0x882>
				lcd_put_cur(0, 0);
 800195e:	2100      	movs	r1, #0
 8001960:	2000      	movs	r0, #0
 8001962:	f7ff f9cb 	bl	8000cfc <lcd_put_cur>
				lcd_send_string("---INT. PASOS--");
 8001966:	489c      	ldr	r0, [pc, #624]	; (8001bd8 <main+0x928>)
 8001968:	f7ff fa24 	bl	8000db4 <lcd_send_string>
				lcd_put_cur(1, 0);
 800196c:	2100      	movs	r1, #0
 800196e:	2001      	movs	r0, #1
 8001970:	f7ff f9c4 	bl	8000cfc <lcd_put_cur>
				lcd_send_string("PASOS:");
 8001974:	4899      	ldr	r0, [pc, #612]	; (8001bdc <main+0x92c>)
 8001976:	f7ff fa1d 	bl	8000db4 <lcd_send_string>
				write_char(80, 1);
 800197a:	2101      	movs	r1, #1
 800197c:	2050      	movs	r0, #80	; 0x50
 800197e:	f000 fd07 	bl	8002390 <write_char>

				char digits[4]; // Variable para almacenar los dígitos ingresados (3 dígitos + el carácter nulo)
				int digitCount = 0; // Contador de dígitos
 8001982:	2300      	movs	r3, #0
 8001984:	637b      	str	r3, [r7, #52]	; 0x34
				int exitFlag = 0; // Bandera para indicar si se debe salir completamente
 8001986:	2300      	movs	r3, #0
 8001988:	633b      	str	r3, [r7, #48]	; 0x30

				while (digitCount < 3) {
 800198a:	e03d      	b.n	8001a08 <main+0x758>
					keypad = Keypad_Get_Char();
 800198c:	f7ff fa28 	bl	8000de0 <Keypad_Get_Char>
 8001990:	4603      	mov	r3, r0
 8001992:	461a      	mov	r2, r3
 8001994:	4b92      	ldr	r3, [pc, #584]	; (8001be0 <main+0x930>)
 8001996:	701a      	strb	r2, [r3, #0]

					if (keypad >= '0' && keypad <= '9') {
 8001998:	4b91      	ldr	r3, [pc, #580]	; (8001be0 <main+0x930>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b2f      	cmp	r3, #47	; 0x2f
 800199e:	d912      	bls.n	80019c6 <main+0x716>
 80019a0:	4b8f      	ldr	r3, [pc, #572]	; (8001be0 <main+0x930>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b39      	cmp	r3, #57	; 0x39
 80019a6:	d80e      	bhi.n	80019c6 <main+0x716>
						digits[digitCount] = keypad;
 80019a8:	4b8d      	ldr	r3, [pc, #564]	; (8001be0 <main+0x930>)
 80019aa:	7819      	ldrb	r1, [r3, #0]
 80019ac:	1d3a      	adds	r2, r7, #4
 80019ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b0:	4413      	add	r3, r2
 80019b2:	460a      	mov	r2, r1
 80019b4:	701a      	strb	r2, [r3, #0]
						digitCount++;
 80019b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b8:	3301      	adds	r3, #1
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
						lcd_send_data(keypad);
 80019bc:	4b88      	ldr	r3, [pc, #544]	; (8001be0 <main+0x930>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff f943 	bl	8000c4c <lcd_send_data>

					}

					// Si se presiona el botón '#', se sale de la selección y vuelve al inicio
					if (keypad == '#') {
 80019c6:	4b86      	ldr	r3, [pc, #536]	; (8001be0 <main+0x930>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b23      	cmp	r3, #35	; 0x23
 80019cc:	d109      	bne.n	80019e2 <main+0x732>
						lcd_clear();
 80019ce:	f7ff f97e 	bl	8000cce <lcd_clear>
						keypad_key = ' '; // Reiniciar la opción seleccionada para volver al inicio
 80019d2:	2320      	movs	r3, #32
 80019d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						max_clear();
 80019d8:	f000 fd82 	bl	80024e0 <max_clear>
						exitFlag = 1; // Activar la bandera para salir completamente
 80019dc:	2301      	movs	r3, #1
 80019de:	633b      	str	r3, [r7, #48]	; 0x30
						break;
 80019e0:	e015      	b.n	8001a0e <main+0x75e>

					}

					// Verificar si se presionó la tecla D para eliminar el último dígito ingresado
					if (keypad == 'D') {
 80019e2:	4b7f      	ldr	r3, [pc, #508]	; (8001be0 <main+0x930>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b44      	cmp	r3, #68	; 0x44
 80019e8:	d10e      	bne.n	8001a08 <main+0x758>
						if (digitCount > 0) {
 80019ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	dd0b      	ble.n	8001a08 <main+0x758>
							digitCount--; // Decrementar el índice de num1 para eliminar el último dígito
 80019f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f2:	3b01      	subs	r3, #1
 80019f4:	637b      	str	r3, [r7, #52]	; 0x34
							lcd_send_cmd(0x10); // Mover el cursor a la posición anterior en la pantalla LCD
 80019f6:	2010      	movs	r0, #16
 80019f8:	f7ff f8f8 	bl	8000bec <lcd_send_cmd>
							lcd_send_data(' '); // Borrar el dígito anterior en la pantalla LCD
 80019fc:	2020      	movs	r0, #32
 80019fe:	f7ff f925 	bl	8000c4c <lcd_send_data>
							lcd_send_cmd(0x10); // Mover el cursor nuevamente a la posición anterior
 8001a02:	2010      	movs	r0, #16
 8001a04:	f7ff f8f2 	bl	8000bec <lcd_send_cmd>
				while (digitCount < 3) {
 8001a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	ddbe      	ble.n	800198c <main+0x6dc>

						}
					}
				}
				if (exitFlag) {
 8001a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f040 8094 	bne.w	8001b3e <main+0x88e>
					break; // Salir completamente del bucle while (keypad_key == 'C')
				}

				lcd_put_cur(0, 0);
 8001a16:	2100      	movs	r1, #0
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f7ff f96f 	bl	8000cfc <lcd_put_cur>
				lcd_send_string("  (A)SENSOR   ");
 8001a1e:	486c      	ldr	r0, [pc, #432]	; (8001bd0 <main+0x920>)
 8001a20:	f7ff f9c8 	bl	8000db4 <lcd_send_string>
				lcd_put_cur(1, 0);
 8001a24:	2100      	movs	r1, #0
 8001a26:	2001      	movs	r0, #1
 8001a28:	f7ff f968 	bl	8000cfc <lcd_put_cur>
				lcd_send_string("(B)SERVO (C)M.PP");
 8001a2c:	4869      	ldr	r0, [pc, #420]	; (8001bd4 <main+0x924>)
 8001a2e:	f7ff f9c1 	bl	8000db4 <lcd_send_string>
				if (digitCount == 3) {
 8001a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d114      	bne.n	8001a62 <main+0x7b2>
					digits[digitCount] = '\0'; // Agregar el carácter nulo al final de los dígitos para formar una cadena válida
 8001a38:	1d3a      	adds	r2, r7, #4
 8001a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3c:	4413      	add	r3, r2
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
					lcd_clear();
 8001a42:	f7ff f944 	bl	8000cce <lcd_clear>
					lcd_put_cur(0, 0);
 8001a46:	2100      	movs	r1, #0
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7ff f957 	bl	8000cfc <lcd_put_cur>
					lcd_send_string("Direccion:");
 8001a4e:	4865      	ldr	r0, [pc, #404]	; (8001be4 <main+0x934>)
 8001a50:	f7ff f9b0 	bl	8000db4 <lcd_send_string>
					lcd_put_cur(1, 0);
 8001a54:	2100      	movs	r1, #0
 8001a56:	2001      	movs	r0, #1
 8001a58:	f7ff f950 	bl	8000cfc <lcd_put_cur>
					lcd_send_string("0 - CW, 1 - CCW");
 8001a5c:	4862      	ldr	r0, [pc, #392]	; (8001be8 <main+0x938>)
 8001a5e:	f7ff f9a9 	bl	8000db4 <lcd_send_string>
				}

				int direction = -1; // Valor inicial inválido para la dirección
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
 8001a66:	62fb      	str	r3, [r7, #44]	; 0x2c
				while (direction != 0 && direction != 1) {
 8001a68:	e028      	b.n	8001abc <main+0x80c>
					keypad = Keypad_Get_Char();
 8001a6a:	f7ff f9b9 	bl	8000de0 <Keypad_Get_Char>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b5b      	ldr	r3, [pc, #364]	; (8001be0 <main+0x930>)
 8001a74:	701a      	strb	r2, [r3, #0]

					if (keypad == '0' || keypad == '1') {
 8001a76:	4b5a      	ldr	r3, [pc, #360]	; (8001be0 <main+0x930>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b30      	cmp	r3, #48	; 0x30
 8001a7c:	d003      	beq.n	8001a86 <main+0x7d6>
 8001a7e:	4b58      	ldr	r3, [pc, #352]	; (8001be0 <main+0x930>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b31      	cmp	r3, #49	; 0x31
 8001a84:	d10c      	bne.n	8001aa0 <main+0x7f0>
						direction = keypad - '0'; // Convertir el carácter a un entero (0 o 1)
 8001a86:	4b56      	ldr	r3, [pc, #344]	; (8001be0 <main+0x930>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	3b30      	subs	r3, #48	; 0x30
 8001a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
						lcd_clear();
 8001a8e:	f7ff f91e 	bl	8000cce <lcd_clear>
						lcd_put_cur(0, 0);
 8001a92:	2100      	movs	r1, #0
 8001a94:	2000      	movs	r0, #0
 8001a96:	f7ff f931 	bl	8000cfc <lcd_put_cur>
						lcd_send_string("MOTOR EN MOV.");
 8001a9a:	4854      	ldr	r0, [pc, #336]	; (8001bec <main+0x93c>)
 8001a9c:	f7ff f98a 	bl	8000db4 <lcd_send_string>

					}

					// Si se presiona el botón '#', se sale de la selección y vuelve al inicio
					if (keypad == '#') {
 8001aa0:	4b4f      	ldr	r3, [pc, #316]	; (8001be0 <main+0x930>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b23      	cmp	r3, #35	; 0x23
 8001aa6:	d109      	bne.n	8001abc <main+0x80c>
						lcd_clear();
 8001aa8:	f7ff f911 	bl	8000cce <lcd_clear>
						keypad_key = ' '; // Reiniciar la opción seleccionada para volver al inicio
 8001aac:	2320      	movs	r3, #32
 8001aae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						max_clear();
 8001ab2:	f000 fd15 	bl	80024e0 <max_clear>
						exitFlag = 1; // Activar la bandera para salir completamente
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	633b      	str	r3, [r7, #48]	; 0x30
						break;
 8001aba:	e005      	b.n	8001ac8 <main+0x818>
				while (direction != 0 && direction != 1) {
 8001abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <main+0x818>
 8001ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d1d0      	bne.n	8001a6a <main+0x7ba>
					}
				}
				if (exitFlag) {
 8001ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d139      	bne.n	8001b42 <main+0x892>
					break; // Salir completamente del bucle while (keypad_key == 'C')
				}
				int stepsToMove = atoi(digits); // Convertir los dígitos a un entero
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f005 f856 	bl	8006b82 <atoi>
 8001ad6:	6278      	str	r0, [r7, #36]	; 0x24
				if (direction == 0) {
 8001ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d113      	bne.n	8001b06 <main+0x856>
					max_clear();
 8001ade:	f000 fcff 	bl	80024e0 <max_clear>
					write_char(26, 1);
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	201a      	movs	r0, #26
 8001ae6:	f000 fc53 	bl	8002390 <write_char>
					// Dirección: CW (sentido de las agujas del reloj)
					// Mover el motor paso a paso en sentido CW aquí
					stepper_step_angle(stepsToMove, 1, 13);
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	ee07 3a90 	vmov	s15, r3
 8001af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af4:	210d      	movs	r1, #13
 8001af6:	2001      	movs	r0, #1
 8001af8:	eeb0 0a67 	vmov.f32	s0, s15
 8001afc:	f7ff f82a 	bl	8000b54 <stepper_step_angle>
					max_clear();
 8001b00:	f000 fcee 	bl	80024e0 <max_clear>
 8001b04:	e015      	b.n	8001b32 <main+0x882>
				} else if (direction == 1) {
 8001b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d112      	bne.n	8001b32 <main+0x882>
					max_clear();
 8001b0c:	f000 fce8 	bl	80024e0 <max_clear>
					write_char(27, 1);
 8001b10:	2101      	movs	r1, #1
 8001b12:	201b      	movs	r0, #27
 8001b14:	f000 fc3c 	bl	8002390 <write_char>
					// Dirección: CCW (sentido contrario a las agujas del reloj)
					// Mover el motor paso a paso en sentido CCW aquí
					stepper_step_angle(stepsToMove, 0, 13);
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	ee07 3a90 	vmov	s15, r3
 8001b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b22:	210d      	movs	r1, #13
 8001b24:	2000      	movs	r0, #0
 8001b26:	eeb0 0a67 	vmov.f32	s0, s15
 8001b2a:	f7ff f813 	bl	8000b54 <stepper_step_angle>

					max_clear();
 8001b2e:	f000 fcd7 	bl	80024e0 <max_clear>
			while (keypad_key == 'C') {
 8001b32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b36:	2b43      	cmp	r3, #67	; 0x43
 8001b38:	f43f af11 	beq.w	800195e <main+0x6ae>
 8001b3c:	e002      	b.n	8001b44 <main+0x894>
					break; // Salir completamente del bucle while (keypad_key == 'C')
 8001b3e:	bf00      	nop
 8001b40:	e000      	b.n	8001b44 <main+0x894>
					break; // Salir completamente del bucle while (keypad_key == 'C')
 8001b42:	bf00      	nop
				}

			}
			lcd_put_cur(0, 0);
 8001b44:	2100      	movs	r1, #0
 8001b46:	2000      	movs	r0, #0
 8001b48:	f7ff f8d8 	bl	8000cfc <lcd_put_cur>
			lcd_send_string("  (A)SENSOR   ");
 8001b4c:	4820      	ldr	r0, [pc, #128]	; (8001bd0 <main+0x920>)
 8001b4e:	f7ff f931 	bl	8000db4 <lcd_send_string>
			lcd_put_cur(1, 0);
 8001b52:	2100      	movs	r1, #0
 8001b54:	2001      	movs	r0, #1
 8001b56:	f7ff f8d1 	bl	8000cfc <lcd_put_cur>
			lcd_send_string("(B)SERVO (C)M.PP");
 8001b5a:	481e      	ldr	r0, [pc, #120]	; (8001bd4 <main+0x924>)
 8001b5c:	f7ff f92a 	bl	8000db4 <lcd_send_string>
 8001b60:	e410      	b.n	8001384 <main+0xd4>

		} else if (keypad_key != 0) {
 8001b62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f43f ac0c 	beq.w	8001384 <main+0xd4>
			for (int i = 0; i < 1; i++) {
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b70:	e002      	b.n	8001b78 <main+0x8c8>
 8001b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b74:	3301      	adds	r3, #1
 8001b76:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	ddf9      	ble.n	8001b72 <main+0x8c2>
			}
			lcd_clear();
 8001b7e:	f7ff f8a6 	bl	8000cce <lcd_clear>
			lcd_enviar("Opcion invalida  ", 0, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	481a      	ldr	r0, [pc, #104]	; (8001bf0 <main+0x940>)
 8001b88:	f7ff f890 	bl	8000cac <lcd_enviar>
			lcd_send_string(&key);
 8001b8c:	4819      	ldr	r0, [pc, #100]	; (8001bf4 <main+0x944>)
 8001b8e:	f7ff f911 	bl	8000db4 <lcd_send_string>
			HAL_Delay(1000);
 8001b92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b96:	f000 ffc5 	bl	8002b24 <HAL_Delay>
			lcd_clear();
 8001b9a:	f7ff f898 	bl	8000cce <lcd_clear>
			lcd_put_cur(0, 0);
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f7ff f8ab 	bl	8000cfc <lcd_put_cur>
			lcd_send_string("  (A)SENSOR   ");
 8001ba6:	480a      	ldr	r0, [pc, #40]	; (8001bd0 <main+0x920>)
 8001ba8:	f7ff f904 	bl	8000db4 <lcd_send_string>
			lcd_put_cur(1, 0);
 8001bac:	2100      	movs	r1, #0
 8001bae:	2001      	movs	r0, #1
 8001bb0:	f7ff f8a4 	bl	8000cfc <lcd_put_cur>
			lcd_send_string("(B)SERVO (C)M.PP");
 8001bb4:	4807      	ldr	r0, [pc, #28]	; (8001bd4 <main+0x924>)
 8001bb6:	f7ff f8fd 	bl	8000db4 <lcd_send_string>
	while (1) {
 8001bba:	f7ff bbe3 	b.w	8001384 <main+0xd4>
 8001bbe:	bf00      	nop
 8001bc0:	08007730 	.word	0x08007730
 8001bc4:	08007744 	.word	0x08007744
 8001bc8:	08007714 	.word	0x08007714
 8001bcc:	08007728 	.word	0x08007728
 8001bd0:	080076d8 	.word	0x080076d8
 8001bd4:	080076e8 	.word	0x080076e8
 8001bd8:	0800774c 	.word	0x0800774c
 8001bdc:	0800775c 	.word	0x0800775c
 8001be0:	20000685 	.word	0x20000685
 8001be4:	08007764 	.word	0x08007764
 8001be8:	08007770 	.word	0x08007770
 8001bec:	08007780 	.word	0x08007780
 8001bf0:	08007790 	.word	0x08007790
 8001bf4:	20000684 	.word	0x20000684

08001bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b09c      	sub	sp, #112	; 0x70
 8001bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bfe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c02:	2228      	movs	r2, #40	; 0x28
 8001c04:	2100      	movs	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f004 fff8 	bl	8006bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c1c:	463b      	mov	r3, r7
 8001c1e:	2234      	movs	r2, #52	; 0x34
 8001c20:	2100      	movs	r1, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f004 ffea 	bl	8006bfc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c2c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c30:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c32:	2300      	movs	r3, #0
 8001c34:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c36:	2301      	movs	r3, #1
 8001c38:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c3a:	2310      	movs	r3, #16
 8001c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c46:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c48:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c52:	4618      	mov	r0, r3
 8001c54:	f001 fe84 	bl	8003960 <HAL_RCC_OscConfig>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001c5e:	f000 fa73 	bl	8002148 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c62:	230f      	movs	r3, #15
 8001c64:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c66:	2302      	movs	r3, #2
 8001c68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c74:	2300      	movs	r3, #0
 8001c76:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c7c:	2102      	movs	r1, #2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f002 feac 	bl	80049dc <HAL_RCC_ClockConfig>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001c8a:	f000 fa5d 	bl	8002148 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <SystemClock_Config+0xc0>)
 8001c90:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM15;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f003 f8d1 	bl	8004e48 <HAL_RCCEx_PeriphCLKConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001cac:	f000 fa4c 	bl	8002148 <Error_Handler>
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3770      	adds	r7, #112	; 0x70
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	00041020 	.word	0x00041020

08001cbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cc0:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <MX_I2C1_Init+0x74>)
 8001cc2:	4a1c      	ldr	r2, [pc, #112]	; (8001d34 <MX_I2C1_Init+0x78>)
 8001cc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001cc6:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <MX_I2C1_Init+0x74>)
 8001cc8:	4a1b      	ldr	r2, [pc, #108]	; (8001d38 <MX_I2C1_Init+0x7c>)
 8001cca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ccc:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <MX_I2C1_Init+0x74>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cd2:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <MX_I2C1_Init+0x74>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cd8:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <MX_I2C1_Init+0x74>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001cde:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <MX_I2C1_Init+0x74>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <MX_I2C1_Init+0x74>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <MX_I2C1_Init+0x74>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <MX_I2C1_Init+0x74>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cf6:	480e      	ldr	r0, [pc, #56]	; (8001d30 <MX_I2C1_Init+0x74>)
 8001cf8:	f001 fa06 	bl	8003108 <HAL_I2C_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d02:	f000 fa21 	bl	8002148 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d06:	2100      	movs	r1, #0
 8001d08:	4809      	ldr	r0, [pc, #36]	; (8001d30 <MX_I2C1_Init+0x74>)
 8001d0a:	f001 fd91 	bl	8003830 <HAL_I2CEx_ConfigAnalogFilter>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d14:	f000 fa18 	bl	8002148 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4805      	ldr	r0, [pc, #20]	; (8001d30 <MX_I2C1_Init+0x74>)
 8001d1c:	f001 fdd3 	bl	80038c6 <HAL_I2CEx_ConfigDigitalFilter>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d26:	f000 fa0f 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	200004c0 	.word	0x200004c0
 8001d34:	40005400 	.word	0x40005400
 8001d38:	2000090e 	.word	0x2000090e

08001d3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d42:	f107 0310 	add.w	r3, r7, #16
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d5a:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <MX_TIM1_Init+0xa0>)
 8001d5c:	4a20      	ldr	r2, [pc, #128]	; (8001de0 <MX_TIM1_Init+0xa4>)
 8001d5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001d60:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <MX_TIM1_Init+0xa0>)
 8001d62:	2247      	movs	r2, #71	; 0x47
 8001d64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d66:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <MX_TIM1_Init+0xa0>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d6c:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <MX_TIM1_Init+0xa0>)
 8001d6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d74:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <MX_TIM1_Init+0xa0>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d7a:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <MX_TIM1_Init+0xa0>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d80:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <MX_TIM1_Init+0xa0>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d86:	4815      	ldr	r0, [pc, #84]	; (8001ddc <MX_TIM1_Init+0xa0>)
 8001d88:	f003 f9f0 	bl	800516c <HAL_TIM_Base_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001d92:	f000 f9d9 	bl	8002148 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	4619      	mov	r1, r3
 8001da2:	480e      	ldr	r0, [pc, #56]	; (8001ddc <MX_TIM1_Init+0xa0>)
 8001da4:	f003 fe0a 	bl	80059bc <HAL_TIM_ConfigClockSource>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001dae:	f000 f9cb 	bl	8002148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db2:	2300      	movs	r3, #0
 8001db4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4806      	ldr	r0, [pc, #24]	; (8001ddc <MX_TIM1_Init+0xa0>)
 8001dc4:	f004 fac0 	bl	8006348 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001dce:	f000 f9bb 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001dd2:	bf00      	nop
 8001dd4:	3720      	adds	r7, #32
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000514 	.word	0x20000514
 8001de0:	40012c00 	.word	0x40012c00

08001de4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08e      	sub	sp, #56	; 0x38
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e04:	463b      	mov	r3, r7
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	60da      	str	r2, [r3, #12]
 8001e10:	611a      	str	r2, [r3, #16]
 8001e12:	615a      	str	r2, [r3, #20]
 8001e14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e16:	4b2e      	ldr	r3, [pc, #184]	; (8001ed0 <MX_TIM2_Init+0xec>)
 8001e18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e1c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001e1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ed0 <MX_TIM2_Init+0xec>)
 8001e20:	2247      	movs	r2, #71	; 0x47
 8001e22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e24:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <MX_TIM2_Init+0xec>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8001e2a:	4b29      	ldr	r3, [pc, #164]	; (8001ed0 <MX_TIM2_Init+0xec>)
 8001e2c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001e30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e32:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <MX_TIM2_Init+0xec>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e38:	4b25      	ldr	r3, [pc, #148]	; (8001ed0 <MX_TIM2_Init+0xec>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e3e:	4824      	ldr	r0, [pc, #144]	; (8001ed0 <MX_TIM2_Init+0xec>)
 8001e40:	f003 f994 	bl	800516c <HAL_TIM_Base_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001e4a:	f000 f97d 	bl	8002148 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e58:	4619      	mov	r1, r3
 8001e5a:	481d      	ldr	r0, [pc, #116]	; (8001ed0 <MX_TIM2_Init+0xec>)
 8001e5c:	f003 fdae 	bl	80059bc <HAL_TIM_ConfigClockSource>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001e66:	f000 f96f 	bl	8002148 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e6a:	4819      	ldr	r0, [pc, #100]	; (8001ed0 <MX_TIM2_Init+0xec>)
 8001e6c:	f003 fa2a 	bl	80052c4 <HAL_TIM_PWM_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001e76:	f000 f967 	bl	8002148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e82:	f107 031c 	add.w	r3, r7, #28
 8001e86:	4619      	mov	r1, r3
 8001e88:	4811      	ldr	r0, [pc, #68]	; (8001ed0 <MX_TIM2_Init+0xec>)
 8001e8a:	f004 fa5d 	bl	8006348 <HAL_TIMEx_MasterConfigSynchronization>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001e94:	f000 f958 	bl	8002148 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e98:	2360      	movs	r3, #96	; 0x60
 8001e9a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001e9c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ea0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eaa:	463b      	mov	r3, r7
 8001eac:	2200      	movs	r2, #0
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4807      	ldr	r0, [pc, #28]	; (8001ed0 <MX_TIM2_Init+0xec>)
 8001eb2:	f003 fc6f 	bl	8005794 <HAL_TIM_PWM_ConfigChannel>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001ebc:	f000 f944 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ec0:	4803      	ldr	r0, [pc, #12]	; (8001ed0 <MX_TIM2_Init+0xec>)
 8001ec2:	f000 fc95 	bl	80027f0 <HAL_TIM_MspPostInit>

}
 8001ec6:	bf00      	nop
 8001ec8:	3738      	adds	r7, #56	; 0x38
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000560 	.word	0x20000560

08001ed4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eda:	f107 0310 	add.w	r3, r7, #16
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001ef2:	4b1f      	ldr	r3, [pc, #124]	; (8001f70 <MX_TIM15_Init+0x9c>)
 8001ef4:	4a1f      	ldr	r2, [pc, #124]	; (8001f74 <MX_TIM15_Init+0xa0>)
 8001ef6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 72-1;
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <MX_TIM15_Init+0x9c>)
 8001efa:	2247      	movs	r2, #71	; 0x47
 8001efc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efe:	4b1c      	ldr	r3, [pc, #112]	; (8001f70 <MX_TIM15_Init+0x9c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 7000;
 8001f04:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <MX_TIM15_Init+0x9c>)
 8001f06:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001f0a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0c:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <MX_TIM15_Init+0x9c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001f12:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <MX_TIM15_Init+0x9c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f18:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <MX_TIM15_Init+0x9c>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001f1e:	4814      	ldr	r0, [pc, #80]	; (8001f70 <MX_TIM15_Init+0x9c>)
 8001f20:	f003 f924 	bl	800516c <HAL_TIM_Base_Init>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001f2a:	f000 f90d 	bl	8002148 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001f34:	f107 0310 	add.w	r3, r7, #16
 8001f38:	4619      	mov	r1, r3
 8001f3a:	480d      	ldr	r0, [pc, #52]	; (8001f70 <MX_TIM15_Init+0x9c>)
 8001f3c:	f003 fd3e 	bl	80059bc <HAL_TIM_ConfigClockSource>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001f46:	f000 f8ff 	bl	8002148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001f52:	1d3b      	adds	r3, r7, #4
 8001f54:	4619      	mov	r1, r3
 8001f56:	4806      	ldr	r0, [pc, #24]	; (8001f70 <MX_TIM15_Init+0x9c>)
 8001f58:	f004 f9f6 	bl	8006348 <HAL_TIMEx_MasterConfigSynchronization>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001f62:	f000 f8f1 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001f66:	bf00      	nop
 8001f68:	3720      	adds	r7, #32
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	200005ac 	.word	0x200005ac
 8001f74:	40014000 	.word	0x40014000

08001f78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f7c:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <MX_USART2_UART_Init+0x58>)
 8001f7e:	4a15      	ldr	r2, [pc, #84]	; (8001fd4 <MX_USART2_UART_Init+0x5c>)
 8001f80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <MX_USART2_UART_Init+0x58>)
 8001f84:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001f88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f8a:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <MX_USART2_UART_Init+0x58>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f90:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <MX_USART2_UART_Init+0x58>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f96:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <MX_USART2_UART_Init+0x58>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <MX_USART2_UART_Init+0x58>)
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <MX_USART2_UART_Init+0x58>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <MX_USART2_UART_Init+0x58>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <MX_USART2_UART_Init+0x58>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <MX_USART2_UART_Init+0x58>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fba:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <MX_USART2_UART_Init+0x58>)
 8001fbc:	f004 fa48 	bl	8006450 <HAL_UART_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001fc6:	f000 f8bf 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	200005f8 	.word	0x200005f8
 8001fd4:	40004400 	.word	0x40004400

08001fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	; 0x28
 8001fdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	609a      	str	r2, [r3, #8]
 8001fea:	60da      	str	r2, [r3, #12]
 8001fec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fee:	4b53      	ldr	r3, [pc, #332]	; (800213c <MX_GPIO_Init+0x164>)
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	4a52      	ldr	r2, [pc, #328]	; (800213c <MX_GPIO_Init+0x164>)
 8001ff4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ff8:	6153      	str	r3, [r2, #20]
 8001ffa:	4b50      	ldr	r3, [pc, #320]	; (800213c <MX_GPIO_Init+0x164>)
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002006:	4b4d      	ldr	r3, [pc, #308]	; (800213c <MX_GPIO_Init+0x164>)
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	4a4c      	ldr	r2, [pc, #304]	; (800213c <MX_GPIO_Init+0x164>)
 800200c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002010:	6153      	str	r3, [r2, #20]
 8002012:	4b4a      	ldr	r3, [pc, #296]	; (800213c <MX_GPIO_Init+0x164>)
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800201e:	4b47      	ldr	r3, [pc, #284]	; (800213c <MX_GPIO_Init+0x164>)
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	4a46      	ldr	r2, [pc, #280]	; (800213c <MX_GPIO_Init+0x164>)
 8002024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002028:	6153      	str	r3, [r2, #20]
 800202a:	4b44      	ldr	r3, [pc, #272]	; (800213c <MX_GPIO_Init+0x164>)
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002036:	4b41      	ldr	r3, [pc, #260]	; (800213c <MX_GPIO_Init+0x164>)
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	4a40      	ldr	r2, [pc, #256]	; (800213c <MX_GPIO_Init+0x164>)
 800203c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002040:	6153      	str	r3, [r2, #20]
 8002042:	4b3e      	ldr	r3, [pc, #248]	; (800213c <MX_GPIO_Init+0x164>)
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800204a:	607b      	str	r3, [r7, #4]
 800204c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800204e:	2200      	movs	r2, #0
 8002050:	2101      	movs	r1, #1
 8002052:	483b      	ldr	r0, [pc, #236]	; (8002140 <MX_GPIO_Init+0x168>)
 8002054:	f001 f826 	bl	80030a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN2_Pin|GPIO_PIN_4|IN4_Pin|R1_Pin
 8002058:	2200      	movs	r2, #0
 800205a:	f640 1152 	movw	r1, #2386	; 0x952
 800205e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002062:	f001 f81f 	bl	80030a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN3_Pin|R2_Pin|LD2_Pin|GPIO_PIN_14
 8002066:	2200      	movs	r2, #0
 8002068:	f24e 41f1 	movw	r1, #58609	; 0xe4f1
 800206c:	4835      	ldr	r0, [pc, #212]	; (8002144 <MX_GPIO_Init+0x16c>)
 800206e:	f001 f819 	bl	80030a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|R3_Pin|R4_Pin|GPIO_PIN_6
                          |IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002072:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002076:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002078:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800207c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002082:	f107 0314 	add.w	r3, r7, #20
 8002086:	4619      	mov	r1, r3
 8002088:	482d      	ldr	r0, [pc, #180]	; (8002140 <MX_GPIO_Init+0x168>)
 800208a:	f000 fe81 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800208e:	2301      	movs	r3, #1
 8002090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002092:	2301      	movs	r3, #1
 8002094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209a:	2300      	movs	r3, #0
 800209c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209e:	f107 0314 	add.w	r3, r7, #20
 80020a2:	4619      	mov	r1, r3
 80020a4:	4826      	ldr	r0, [pc, #152]	; (8002140 <MX_GPIO_Init+0x168>)
 80020a6:	f000 fe73 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020aa:	2302      	movs	r3, #2
 80020ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b6:	f107 0314 	add.w	r3, r7, #20
 80020ba:	4619      	mov	r1, r3
 80020bc:	4820      	ldr	r0, [pc, #128]	; (8002140 <MX_GPIO_Init+0x168>)
 80020be:	f000 fe67 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_Pin PA4 IN4_Pin R1_Pin
                           PA11 */
  GPIO_InitStruct.Pin = IN2_Pin|GPIO_PIN_4|IN4_Pin|R1_Pin
 80020c2:	f640 1352 	movw	r3, #2386	; 0x952
 80020c6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c8:	2301      	movs	r3, #1
 80020ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2300      	movs	r3, #0
 80020d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d4:	f107 0314 	add.w	r3, r7, #20
 80020d8:	4619      	mov	r1, r3
 80020da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020de:	f000 fe57 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN3_Pin R2_Pin LD2_Pin PB14
                           PB15 R3_Pin R4_Pin PB6
                           IN1_Pin */
  GPIO_InitStruct.Pin = IN3_Pin|R2_Pin|LD2_Pin|GPIO_PIN_14
 80020e2:	f24e 43f1 	movw	r3, #58609	; 0xe4f1
 80020e6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|R3_Pin|R4_Pin|GPIO_PIN_6
                          |IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e8:	2301      	movs	r3, #1
 80020ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	4619      	mov	r1, r3
 80020fa:	4812      	ldr	r0, [pc, #72]	; (8002144 <MX_GPIO_Init+0x16c>)
 80020fc:	f000 fe48 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : C4_Pin */
  GPIO_InitStruct.Pin = C4_Pin;
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002104:	2300      	movs	r3, #0
 8002106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002108:	2301      	movs	r3, #1
 800210a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(C4_GPIO_Port, &GPIO_InitStruct);
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	4619      	mov	r1, r3
 8002112:	480b      	ldr	r0, [pc, #44]	; (8002140 <MX_GPIO_Init+0x168>)
 8002114:	f000 fe3c 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : C3_Pin C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C3_Pin|C2_Pin|C1_Pin;
 8002118:	f44f 4306 	mov.w	r3, #34304	; 0x8600
 800211c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800211e:	2300      	movs	r3, #0
 8002120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002122:	2301      	movs	r3, #1
 8002124:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002126:	f107 0314 	add.w	r3, r7, #20
 800212a:	4619      	mov	r1, r3
 800212c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002130:	f000 fe2e 	bl	8002d90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002134:	bf00      	nop
 8002136:	3728      	adds	r7, #40	; 0x28
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40021000 	.word	0x40021000
 8002140:	48000800 	.word	0x48000800
 8002144:	48000400 	.word	0x48000400

08002148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800214c:	b672      	cpsid	i
}
 800214e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002150:	e7fe      	b.n	8002150 <Error_Handler+0x8>
	...

08002154 <write_byte>:
};



void write_byte (uint8_t byte)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	e01a      	b.n	800219a <write_byte+0x46>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 8002164:	2200      	movs	r2, #0
 8002166:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800216a:	4810      	ldr	r0, [pc, #64]	; (80021ac <write_byte+0x58>)
 800216c:	f000 ff9a 	bl	80030a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002176:	b2db      	uxtb	r3, r3
 8002178:	461a      	mov	r2, r3
 800217a:	2140      	movs	r1, #64	; 0x40
 800217c:	480b      	ldr	r0, [pc, #44]	; (80021ac <write_byte+0x58>)
 800217e:	f000 ff91 	bl	80030a4 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 8002188:	2201      	movs	r2, #1
 800218a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800218e:	4807      	ldr	r0, [pc, #28]	; (80021ac <write_byte+0x58>)
 8002190:	f000 ff88 	bl	80030a4 <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3301      	adds	r3, #1
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2b07      	cmp	r3, #7
 800219e:	dde1      	ble.n	8002164 <write_byte+0x10>
	}
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	48000400 	.word	0x48000400

080021b0 <write_max_cmd>:


void write_max_cmd (uint8_t address, uint8_t cmd)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	460a      	mov	r2, r1
 80021ba:	71fb      	strb	r3, [r7, #7]
 80021bc:	4613      	mov	r3, r2
 80021be:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 80021c0:	2200      	movs	r2, #0
 80021c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021c6:	4812      	ldr	r0, [pc, #72]	; (8002210 <write_max_cmd+0x60>)
 80021c8:	f000 ff6c 	bl	80030a4 <HAL_GPIO_WritePin>
	for (int i=0;i<num; i++)
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	e00a      	b.n	80021e8 <write_max_cmd+0x38>
	{
		write_byte (address);
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ffbd 	bl	8002154 <write_byte>
		write_byte (cmd); 
 80021da:	79bb      	ldrb	r3, [r7, #6]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ffb9 	bl	8002154 <write_byte>
	for (int i=0;i<num; i++)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	3301      	adds	r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	ddf1      	ble.n	80021d2 <write_max_cmd+0x22>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 80021ee:	2200      	movs	r2, #0
 80021f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021f4:	4806      	ldr	r0, [pc, #24]	; (8002210 <write_max_cmd+0x60>)
 80021f6:	f000 ff55 	bl	80030a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 80021fa:	2201      	movs	r2, #1
 80021fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002200:	4803      	ldr	r0, [pc, #12]	; (8002210 <write_max_cmd+0x60>)
 8002202:	f000 ff4f 	bl	80030a4 <HAL_GPIO_WritePin>
}
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	48000400 	.word	0x48000400

08002214 <setled>:


void setled(uint8_t row, uint8_t col, uint8_t value)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
 800221e:	460b      	mov	r3, r1
 8002220:	71bb      	strb	r3, [r7, #6]
 8002222:	4613      	mov	r3, r2
 8002224:	717b      	strb	r3, [r7, #5]
  bitWrite(buffer[col], row, value);
 8002226:	797b      	ldrb	r3, [r7, #5]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00d      	beq.n	8002248 <setled+0x34>
 800222c:	79bb      	ldrb	r3, [r7, #6]
 800222e:	4a2e      	ldr	r2, [pc, #184]	; (80022e8 <setled+0xd4>)
 8002230:	5cd1      	ldrb	r1, [r2, r3]
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	2201      	movs	r2, #1
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	b2da      	uxtb	r2, r3
 800223c:	79bb      	ldrb	r3, [r7, #6]
 800223e:	430a      	orrs	r2, r1
 8002240:	b2d1      	uxtb	r1, r2
 8002242:	4a29      	ldr	r2, [pc, #164]	; (80022e8 <setled+0xd4>)
 8002244:	54d1      	strb	r1, [r2, r3]
 8002246:	e00e      	b.n	8002266 <setled+0x52>
 8002248:	79bb      	ldrb	r3, [r7, #6]
 800224a:	4a27      	ldr	r2, [pc, #156]	; (80022e8 <setled+0xd4>)
 800224c:	5cd1      	ldrb	r1, [r2, r3]
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	2201      	movs	r2, #1
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	b2db      	uxtb	r3, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	b2da      	uxtb	r2, r3
 800225c:	79bb      	ldrb	r3, [r7, #6]
 800225e:	400a      	ands	r2, r1
 8002260:	b2d1      	uxtb	r1, r2
 8002262:	4a21      	ldr	r2, [pc, #132]	; (80022e8 <setled+0xd4>)
 8002264:	54d1      	strb	r1, [r2, r3]

	int n = col / 8;
 8002266:	79bb      	ldrb	r3, [r7, #6]
 8002268:	08db      	lsrs	r3, r3, #3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	613b      	str	r3, [r7, #16]
	int c = col % 8;
 800226e:	79bb      	ldrb	r3, [r7, #6]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW    
 8002276:	2200      	movs	r2, #0
 8002278:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800227c:	481b      	ldr	r0, [pc, #108]	; (80022ec <setled+0xd8>)
 800227e:	f000 ff11 	bl	80030a4 <HAL_GPIO_WritePin>
	for (int i=0; i<num; i++) 
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e01b      	b.n	80022c0 <setled+0xac>
	{
		if (i == (num-(n+1)))
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	425b      	negs	r3, r3
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	429a      	cmp	r2, r3
 8002290:	d10d      	bne.n	80022ae <setled+0x9a>
		{
			write_byte (((c+1)));
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	3301      	adds	r3, #1
 8002298:	b2db      	uxtb	r3, r3
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff ff5a 	bl	8002154 <write_byte>
			write_byte (buffer[col]);
 80022a0:	79bb      	ldrb	r3, [r7, #6]
 80022a2:	4a11      	ldr	r2, [pc, #68]	; (80022e8 <setled+0xd4>)
 80022a4:	5cd3      	ldrb	r3, [r2, r3]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff ff54 	bl	8002154 <write_byte>
 80022ac:	e005      	b.n	80022ba <setled+0xa6>
		}
		else
		{
			write_byte (0);
 80022ae:	2000      	movs	r0, #0
 80022b0:	f7ff ff50 	bl	8002154 <write_byte>
			write_byte (0);
 80022b4:	2000      	movs	r0, #0
 80022b6:	f7ff ff4d 	bl	8002154 <write_byte>
	for (int i=0; i<num; i++) 
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	3301      	adds	r3, #1
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	dde0      	ble.n	8002288 <setled+0x74>
		}
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW 
 80022c6:	2200      	movs	r2, #0
 80022c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022cc:	4807      	ldr	r0, [pc, #28]	; (80022ec <setled+0xd8>)
 80022ce:	f000 fee9 	bl	80030a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH 
 80022d2:	2201      	movs	r2, #1
 80022d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022d8:	4804      	ldr	r0, [pc, #16]	; (80022ec <setled+0xd8>)
 80022da:	f000 fee3 	bl	80030a4 <HAL_GPIO_WritePin>
}
 80022de:	bf00      	nop
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200006a0 	.word	0x200006a0
 80022ec:	48000400 	.word	0x48000400

080022f0 <setrow>:


void setrow(uint8_t row, uint8_t value)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	460a      	mov	r2, r1
 80022fa:	71fb      	strb	r3, [r7, #7]
 80022fc:	4613      	mov	r3, r2
 80022fe:	71bb      	strb	r3, [r7, #6]
	int n = row / 8;
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	08db      	lsrs	r3, r3, #3
 8002304:	b2db      	uxtb	r3, r3
 8002306:	617b      	str	r3, [r7, #20]
	int r = row % 8;
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	613b      	str	r3, [r7, #16]
	
	uint8_t store = value;
 8002310:	79bb      	ldrb	r3, [r7, #6]
 8002312:	73fb      	strb	r3, [r7, #15]
	for (int i=0; i<num; i++) 
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
 8002318:	e02d      	b.n	8002376 <setrow+0x86>
	{
		if (i == ((n)))
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	429a      	cmp	r2, r3
 8002320:	d120      	bne.n	8002364 <setrow+0x74>
		{
//			for (int col=0+(8*n); col<8+(8*n); col++)  // uncomment this if the character looks inverted about X axis
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	3307      	adds	r3, #7
 8002328:	61bb      	str	r3, [r7, #24]
 800232a:	e015      	b.n	8002358 <setrow+0x68>
			{
				bool b = value&0x80;
 800232c:	79bb      	ldrb	r3, [r7, #6]
 800232e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002332:	2b00      	cmp	r3, #0
 8002334:	bf14      	ite	ne
 8002336:	2301      	movne	r3, #1
 8002338:	2300      	moveq	r3, #0
 800233a:	73bb      	strb	r3, [r7, #14]
				setled (r, col, b);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	b2d1      	uxtb	r1, r2
 8002344:	7bba      	ldrb	r2, [r7, #14]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff ff64 	bl	8002214 <setled>
				value<<=1;
 800234c:	79bb      	ldrb	r3, [r7, #6]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	71bb      	strb	r3, [r7, #6]
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	3b01      	subs	r3, #1
 8002356:	61bb      	str	r3, [r7, #24]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	429a      	cmp	r2, r3
 8002360:	dae4      	bge.n	800232c <setrow+0x3c>
 8002362:	e005      	b.n	8002370 <setrow+0x80>
			}
		}
		else
		{
			write_byte (0);
 8002364:	2000      	movs	r0, #0
 8002366:	f7ff fef5 	bl	8002154 <write_byte>
			write_byte (0);
 800236a:	2000      	movs	r0, #0
 800236c:	f7ff fef2 	bl	8002154 <write_byte>
	for (int i=0; i<num; i++) 
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	3301      	adds	r3, #1
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	2b00      	cmp	r3, #0
 800237a:	ddce      	ble.n	800231a <setrow+0x2a>
		}
	}
	buffer_row[row] = store;
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	4903      	ldr	r1, [pc, #12]	; (800238c <setrow+0x9c>)
 8002380:	7bfa      	ldrb	r2, [r7, #15]
 8002382:	54ca      	strb	r2, [r1, r3]
}
 8002384:	bf00      	nop
 8002386:	3720      	adds	r7, #32
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	200006f0 	.word	0x200006f0

08002390 <write_char>:
		


void write_char (char c, uint8_t max)  
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	460a      	mov	r2, r1
 800239a:	71fb      	strb	r3, [r7, #7]
 800239c:	4613      	mov	r3, r2
 800239e:	71bb      	strb	r3, [r7, #6]
	int width = CH[8*c];
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4a16      	ldr	r2, [pc, #88]	; (8002400 <write_char+0x70>)
 80023a6:	5cd3      	ldrb	r3, [r2, r3]
 80023a8:	60fb      	str	r3, [r7, #12]
	int start= (8*c)+1;
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	3301      	adds	r3, #1
 80023b0:	60bb      	str	r3, [r7, #8]
	int row =6;
 80023b2:	2306      	movs	r3, #6
 80023b4:	617b      	str	r3, [r7, #20]
	for (int j=start; j<(start+width); j++) 
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	e016      	b.n	80023ea <write_char+0x5a>
//	for (int j=start+7; j>=(start); j--)   // uncomment this if the character looks inverted about Y axis
	{
		setrow (row+(8*(max-1)), CH[j]);
 80023bc:	79bb      	ldrb	r3, [r7, #6]
 80023be:	3b01      	subs	r3, #1
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	4413      	add	r3, r2
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	490c      	ldr	r1, [pc, #48]	; (8002400 <write_char+0x70>)
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	440b      	add	r3, r1
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	4619      	mov	r1, r3
 80023d8:	4610      	mov	r0, r2
 80023da:	f7ff ff89 	bl	80022f0 <setrow>
		row--;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	3b01      	subs	r3, #1
 80023e2:	617b      	str	r3, [r7, #20]
	for (int j=start; j<(start+width); j++) 
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	3301      	adds	r3, #1
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4413      	add	r3, r2
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	dbe2      	blt.n	80023bc <write_char+0x2c>
	}
}
 80023f6:	bf00      	nop
 80023f8:	bf00      	nop
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000004 	.word	0x20000004

08002404 <shift_char>:
					break;
			}			
}	
		
void shift_char (char c, uint32_t speed, char direction)  
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	6039      	str	r1, [r7, #0]
 800240e:	71fb      	strb	r3, [r7, #7]
 8002410:	4613      	mov	r3, r2
 8002412:	71bb      	strb	r3, [r7, #6]
	int width = CH[8*c];
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4a22      	ldr	r2, [pc, #136]	; (80024a4 <shift_char+0xa0>)
 800241a:	5cd3      	ldrb	r3, [r2, r3]
 800241c:	60fb      	str	r3, [r7, #12]
	int start= (8*c)+1;
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	3301      	adds	r3, #1
 8002424:	60bb      	str	r3, [r7, #8]

		switch (direction)
 8002426:	79bb      	ldrb	r3, [r7, #6]
 8002428:	2b4c      	cmp	r3, #76	; 0x4c
 800242a:	d002      	beq.n	8002432 <shift_char+0x2e>
 800242c:	2b52      	cmp	r3, #82	; 0x52
 800242e:	d01a      	beq.n	8002466 <shift_char+0x62>
						HAL_Delay (speed);
					}
					break;
			
				default :
					break;
 8002430:	e034      	b.n	800249c <shift_char+0x98>
					for (int j=start; j<(start+width+1); j++)
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	e00f      	b.n	8002458 <shift_char+0x54>
						setrow (0, CH[j]);
 8002438:	4a1a      	ldr	r2, [pc, #104]	; (80024a4 <shift_char+0xa0>)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	4413      	add	r3, r2
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	4619      	mov	r1, r3
 8002442:	2000      	movs	r0, #0
 8002444:	f7ff ff54 	bl	80022f0 <setrow>
						shiftleft();
 8002448:	f000 f878 	bl	800253c <shiftleft>
						HAL_Delay (speed);
 800244c:	6838      	ldr	r0, [r7, #0]
 800244e:	f000 fb69 	bl	8002b24 <HAL_Delay>
					for (int j=start; j<(start+width+1); j++)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	3301      	adds	r3, #1
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4413      	add	r3, r2
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	429a      	cmp	r2, r3
 8002462:	dde9      	ble.n	8002438 <shift_char+0x34>
						break;
 8002464:	e01a      	b.n	800249c <shift_char+0x98>
					for (int j=start+width+1; j>=(start); j--)
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4413      	add	r3, r2
 800246c:	3301      	adds	r3, #1
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	e00f      	b.n	8002492 <shift_char+0x8e>
						setrow ((num*8)-1, CH[j]);
 8002472:	4a0c      	ldr	r2, [pc, #48]	; (80024a4 <shift_char+0xa0>)
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	4413      	add	r3, r2
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	4619      	mov	r1, r3
 800247c:	2007      	movs	r0, #7
 800247e:	f7ff ff37 	bl	80022f0 <setrow>
						shiftright();
 8002482:	f000 f893 	bl	80025ac <shiftright>
						HAL_Delay (speed);
 8002486:	6838      	ldr	r0, [r7, #0]
 8002488:	f000 fb4c 	bl	8002b24 <HAL_Delay>
					for (int j=start+width+1; j>=(start); j--)
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	3b01      	subs	r3, #1
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	429a      	cmp	r2, r3
 8002498:	daeb      	bge.n	8002472 <shift_char+0x6e>
					break;
 800249a:	bf00      	nop
			}
}
 800249c:	bf00      	nop
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000004 	.word	0x20000004

080024a8 <scroll_string>:



void scroll_string (uint8_t *string, uint32_t speed, char direction)
{	
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	4613      	mov	r3, r2
 80024b4:	71fb      	strb	r3, [r7, #7]
	while (*string != 0) 
 80024b6:	e009      	b.n	80024cc <scroll_string+0x24>
	{	
		shift_char (*string, speed, direction);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	79fa      	ldrb	r2, [r7, #7]
 80024be:	68b9      	ldr	r1, [r7, #8]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff ff9f 	bl	8002404 <shift_char>
		string++;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	3301      	adds	r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]
	while (*string != 0) 
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f1      	bne.n	80024b8 <scroll_string+0x10>
  }
}
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <max_clear>:



void max_clear(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
	for (int i=0; i<num*8; i++) 
 80024e6:	2300      	movs	r3, #0
 80024e8:	607b      	str	r3, [r7, #4]
 80024ea:	e008      	b.n	80024fe <max_clear+0x1e>
		setrow(i,0);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2100      	movs	r1, #0
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fefc 	bl	80022f0 <setrow>
	for (int i=0; i<num*8; i++) 
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3301      	adds	r3, #1
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b07      	cmp	r3, #7
 8002502:	ddf3      	ble.n	80024ec <max_clear+0xc>
		
	for (int i=0; i<80; i++)
 8002504:	2300      	movs	r3, #0
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	e00c      	b.n	8002524 <max_clear+0x44>
	{
		buffer[i] = 0;
 800250a:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <max_clear+0x54>)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	4413      	add	r3, r2
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
	  buffer_row[i] = 0;
 8002514:	4a08      	ldr	r2, [pc, #32]	; (8002538 <max_clear+0x58>)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	4413      	add	r3, r2
 800251a:	2200      	movs	r2, #0
 800251c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	3301      	adds	r3, #1
 8002522:	603b      	str	r3, [r7, #0]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	2b4f      	cmp	r3, #79	; 0x4f
 8002528:	ddef      	ble.n	800250a <max_clear+0x2a>
	}
}
 800252a:	bf00      	nop
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	200006a0 	.word	0x200006a0
 8002538:	200006f0 	.word	0x200006f0

0800253c <shiftleft>:



void shiftleft(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
	int last = num*8-1;
 8002542:	2307      	movs	r3, #7
 8002544:	60bb      	str	r3, [r7, #8]
	uint8_t old = buffer_row[last];
 8002546:	4a18      	ldr	r2, [pc, #96]	; (80025a8 <shiftleft+0x6c>)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	4413      	add	r3, r2
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	71fb      	strb	r3, [r7, #7]
	int i;
	for (i=0; i<num*8; i++)
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	e00c      	b.n	8002570 <shiftleft+0x34>
	{
		setrow(i, buffer_row[i]);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4913      	ldr	r1, [pc, #76]	; (80025a8 <shiftleft+0x6c>)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	440b      	add	r3, r1
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	4619      	mov	r1, r3
 8002564:	4610      	mov	r0, r2
 8002566:	f7ff fec3 	bl	80022f0 <setrow>
	for (i=0; i<num*8; i++)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	3301      	adds	r3, #1
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2b07      	cmp	r3, #7
 8002574:	ddef      	ble.n	8002556 <shiftleft+0x1a>
	}
	for (i=79; i>0; i--)
 8002576:	234f      	movs	r3, #79	; 0x4f
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	e00b      	b.n	8002594 <shiftleft+0x58>
	{
 		buffer_row[i] = buffer_row[i-1];
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	3b01      	subs	r3, #1
 8002580:	4a09      	ldr	r2, [pc, #36]	; (80025a8 <shiftleft+0x6c>)
 8002582:	5cd1      	ldrb	r1, [r2, r3]
 8002584:	4a08      	ldr	r2, [pc, #32]	; (80025a8 <shiftleft+0x6c>)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4413      	add	r3, r2
 800258a:	460a      	mov	r2, r1
 800258c:	701a      	strb	r2, [r3, #0]
	for (i=79; i>0; i--)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	3b01      	subs	r3, #1
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2b00      	cmp	r3, #0
 8002598:	dcf0      	bgt.n	800257c <shiftleft+0x40>
	}
	
	buffer_row[0] = old;
 800259a:	4a03      	ldr	r2, [pc, #12]	; (80025a8 <shiftleft+0x6c>)
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	7013      	strb	r3, [r2, #0]
}
 80025a0:	bf00      	nop
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	200006f0 	.word	0x200006f0

080025ac <shiftright>:


void shiftright(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
	int last = num*8-1;	
 80025b2:	2307      	movs	r3, #7
 80025b4:	607b      	str	r3, [r7, #4]
	uint8_t old = buffer_row[0];
 80025b6:	4b17      	ldr	r3, [pc, #92]	; (8002614 <shiftright+0x68>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	70fb      	strb	r3, [r7, #3]
	
	for (int i=last; i>=0; i--)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	e00c      	b.n	80025dc <shiftright+0x30>
	{
		setrow (i, buffer_row[i]);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4913      	ldr	r1, [pc, #76]	; (8002614 <shiftright+0x68>)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	440b      	add	r3, r1
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	4619      	mov	r1, r3
 80025d0:	4610      	mov	r0, r2
 80025d2:	f7ff fe8d 	bl	80022f0 <setrow>
	for (int i=last; i>=0; i--)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	3b01      	subs	r3, #1
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	daef      	bge.n	80025c2 <shiftright+0x16>
	}
	
	for (int i=0; i<80; i++)
 80025e2:	2300      	movs	r3, #0
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	e00b      	b.n	8002600 <shiftright+0x54>
	{
		buffer_row[i] = buffer_row[i+1];
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	3301      	adds	r3, #1
 80025ec:	4a09      	ldr	r2, [pc, #36]	; (8002614 <shiftright+0x68>)
 80025ee:	5cd1      	ldrb	r1, [r2, r3]
 80025f0:	4a08      	ldr	r2, [pc, #32]	; (8002614 <shiftright+0x68>)
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	4413      	add	r3, r2
 80025f6:	460a      	mov	r2, r1
 80025f8:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	3301      	adds	r3, #1
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2b4f      	cmp	r3, #79	; 0x4f
 8002604:	ddf0      	ble.n	80025e8 <shiftright+0x3c>
	}
	
	buffer_row[num*8-1] = old;
 8002606:	4a03      	ldr	r2, [pc, #12]	; (8002614 <shiftright+0x68>)
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	71d3      	strb	r3, [r2, #7]
}
 800260c:	bf00      	nop
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	200006f0 	.word	0x200006f0

08002618 <max_init>:



void max_init (uint8_t brightness)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
	write_max_cmd(0x09, 0x00);       //  no decoding
 8002622:	2100      	movs	r1, #0
 8002624:	2009      	movs	r0, #9
 8002626:	f7ff fdc3 	bl	80021b0 <write_max_cmd>
	write_max_cmd(0x0b, 0x07);       //  scan limit = 8 LEDs
 800262a:	2107      	movs	r1, #7
 800262c:	200b      	movs	r0, #11
 800262e:	f7ff fdbf 	bl	80021b0 <write_max_cmd>
	write_max_cmd(0x0c, 0x01);       //  power down =0,normal mode = 1
 8002632:	2101      	movs	r1, #1
 8002634:	200c      	movs	r0, #12
 8002636:	f7ff fdbb 	bl	80021b0 <write_max_cmd>
	write_max_cmd(0x0f, 0x00);       //  no test display
 800263a:	2100      	movs	r1, #0
 800263c:	200f      	movs	r0, #15
 800263e:	f7ff fdb7 	bl	80021b0 <write_max_cmd>
	
	max_clear ();
 8002642:	f7ff ff4d 	bl	80024e0 <max_clear>
	
	write_max_cmd(0x0a, brightness);       //  brightness intensity
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	4619      	mov	r1, r3
 800264a:	200a      	movs	r0, #10
 800264c:	f7ff fdb0 	bl	80021b0 <write_max_cmd>
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800265e:	4b0f      	ldr	r3, [pc, #60]	; (800269c <HAL_MspInit+0x44>)
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	4a0e      	ldr	r2, [pc, #56]	; (800269c <HAL_MspInit+0x44>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	6193      	str	r3, [r2, #24]
 800266a:	4b0c      	ldr	r3, [pc, #48]	; (800269c <HAL_MspInit+0x44>)
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	607b      	str	r3, [r7, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_MspInit+0x44>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	4a08      	ldr	r2, [pc, #32]	; (800269c <HAL_MspInit+0x44>)
 800267c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002680:	61d3      	str	r3, [r2, #28]
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_MspInit+0x44>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800268e:	2007      	movs	r0, #7
 8002690:	f000 fb3c 	bl	8002d0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021000 	.word	0x40021000

080026a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	; 0x28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 0314 	add.w	r3, r7, #20
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a17      	ldr	r2, [pc, #92]	; (800271c <HAL_I2C_MspInit+0x7c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d128      	bne.n	8002714 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c2:	4b17      	ldr	r3, [pc, #92]	; (8002720 <HAL_I2C_MspInit+0x80>)
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	4a16      	ldr	r2, [pc, #88]	; (8002720 <HAL_I2C_MspInit+0x80>)
 80026c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026cc:	6153      	str	r3, [r2, #20]
 80026ce:	4b14      	ldr	r3, [pc, #80]	; (8002720 <HAL_I2C_MspInit+0x80>)
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026e0:	2312      	movs	r3, #18
 80026e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026e8:	2303      	movs	r3, #3
 80026ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026ec:	2304      	movs	r3, #4
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f0:	f107 0314 	add.w	r3, r7, #20
 80026f4:	4619      	mov	r1, r3
 80026f6:	480b      	ldr	r0, [pc, #44]	; (8002724 <HAL_I2C_MspInit+0x84>)
 80026f8:	f000 fb4a 	bl	8002d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026fc:	4b08      	ldr	r3, [pc, #32]	; (8002720 <HAL_I2C_MspInit+0x80>)
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	4a07      	ldr	r2, [pc, #28]	; (8002720 <HAL_I2C_MspInit+0x80>)
 8002702:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002706:	61d3      	str	r3, [r2, #28]
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <HAL_I2C_MspInit+0x80>)
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002714:	bf00      	nop
 8002716:	3728      	adds	r7, #40	; 0x28
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40005400 	.word	0x40005400
 8002720:	40021000 	.word	0x40021000
 8002724:	48000400 	.word	0x48000400

08002728 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a2b      	ldr	r2, [pc, #172]	; (80027e4 <HAL_TIM_Base_MspInit+0xbc>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d11c      	bne.n	8002774 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800273a:	4b2b      	ldr	r3, [pc, #172]	; (80027e8 <HAL_TIM_Base_MspInit+0xc0>)
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	4a2a      	ldr	r2, [pc, #168]	; (80027e8 <HAL_TIM_Base_MspInit+0xc0>)
 8002740:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002744:	6193      	str	r3, [r2, #24]
 8002746:	4b28      	ldr	r3, [pc, #160]	; (80027e8 <HAL_TIM_Base_MspInit+0xc0>)
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002752:	2200      	movs	r2, #0
 8002754:	2100      	movs	r1, #0
 8002756:	2018      	movs	r0, #24
 8002758:	f000 fae3 	bl	8002d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800275c:	2018      	movs	r0, #24
 800275e:	f000 fafc 	bl	8002d5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002762:	2200      	movs	r2, #0
 8002764:	2100      	movs	r1, #0
 8002766:	2019      	movs	r0, #25
 8002768:	f000 fadb 	bl	8002d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800276c:	2019      	movs	r0, #25
 800276e:	f000 faf4 	bl	8002d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002772:	e032      	b.n	80027da <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800277c:	d114      	bne.n	80027a8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800277e:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <HAL_TIM_Base_MspInit+0xc0>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	4a19      	ldr	r2, [pc, #100]	; (80027e8 <HAL_TIM_Base_MspInit+0xc0>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	61d3      	str	r3, [r2, #28]
 800278a:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <HAL_TIM_Base_MspInit+0xc0>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002796:	2200      	movs	r2, #0
 8002798:	2100      	movs	r1, #0
 800279a:	201c      	movs	r0, #28
 800279c:	f000 fac1 	bl	8002d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027a0:	201c      	movs	r0, #28
 80027a2:	f000 fada 	bl	8002d5a <HAL_NVIC_EnableIRQ>
}
 80027a6:	e018      	b.n	80027da <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM15)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a0f      	ldr	r2, [pc, #60]	; (80027ec <HAL_TIM_Base_MspInit+0xc4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d113      	bne.n	80027da <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80027b2:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <HAL_TIM_Base_MspInit+0xc0>)
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	4a0c      	ldr	r2, [pc, #48]	; (80027e8 <HAL_TIM_Base_MspInit+0xc0>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027bc:	6193      	str	r3, [r2, #24]
 80027be:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <HAL_TIM_Base_MspInit+0xc0>)
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80027ca:	2200      	movs	r2, #0
 80027cc:	2100      	movs	r1, #0
 80027ce:	2018      	movs	r0, #24
 80027d0:	f000 faa7 	bl	8002d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80027d4:	2018      	movs	r0, #24
 80027d6:	f000 fac0 	bl	8002d5a <HAL_NVIC_EnableIRQ>
}
 80027da:	bf00      	nop
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40012c00 	.word	0x40012c00
 80027e8:	40021000 	.word	0x40021000
 80027ec:	40014000 	.word	0x40014000

080027f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f8:	f107 030c 	add.w	r3, r7, #12
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002810:	d11c      	bne.n	800284c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <HAL_TIM_MspPostInit+0x64>)
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	4a0f      	ldr	r2, [pc, #60]	; (8002854 <HAL_TIM_MspPostInit+0x64>)
 8002818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800281c:	6153      	str	r3, [r2, #20]
 800281e:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <HAL_TIM_MspPostInit+0x64>)
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800282a:	2301      	movs	r3, #1
 800282c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282e:	2302      	movs	r3, #2
 8002830:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002836:	2300      	movs	r3, #0
 8002838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800283a:	2301      	movs	r3, #1
 800283c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283e:	f107 030c 	add.w	r3, r7, #12
 8002842:	4619      	mov	r1, r3
 8002844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002848:	f000 faa2 	bl	8002d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800284c:	bf00      	nop
 800284e:	3720      	adds	r7, #32
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021000 	.word	0x40021000

08002858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	; 0x28
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002860:	f107 0314 	add.w	r3, r7, #20
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	60da      	str	r2, [r3, #12]
 800286e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a17      	ldr	r2, [pc, #92]	; (80028d4 <HAL_UART_MspInit+0x7c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d128      	bne.n	80028cc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800287a:	4b17      	ldr	r3, [pc, #92]	; (80028d8 <HAL_UART_MspInit+0x80>)
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	4a16      	ldr	r2, [pc, #88]	; (80028d8 <HAL_UART_MspInit+0x80>)
 8002880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002884:	61d3      	str	r3, [r2, #28]
 8002886:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <HAL_UART_MspInit+0x80>)
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002892:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <HAL_UART_MspInit+0x80>)
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	4a10      	ldr	r2, [pc, #64]	; (80028d8 <HAL_UART_MspInit+0x80>)
 8002898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289c:	6153      	str	r3, [r2, #20]
 800289e:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <HAL_UART_MspInit+0x80>)
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80028aa:	230c      	movs	r3, #12
 80028ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ae:	2302      	movs	r3, #2
 80028b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b6:	2300      	movs	r3, #0
 80028b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028ba:	2307      	movs	r3, #7
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028be:	f107 0314 	add.w	r3, r7, #20
 80028c2:	4619      	mov	r1, r3
 80028c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028c8:	f000 fa62 	bl	8002d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028cc:	bf00      	nop
 80028ce:	3728      	adds	r7, #40	; 0x28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40004400 	.word	0x40004400
 80028d8:	40021000 	.word	0x40021000

080028dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028e0:	e7fe      	b.n	80028e0 <NMI_Handler+0x4>

080028e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028e6:	e7fe      	b.n	80028e6 <HardFault_Handler+0x4>

080028e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028ec:	e7fe      	b.n	80028ec <MemManage_Handler+0x4>

080028ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028f2:	e7fe      	b.n	80028f2 <BusFault_Handler+0x4>

080028f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f8:	e7fe      	b.n	80028f8 <UsageFault_Handler+0x4>

080028fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002916:	b480      	push	{r7}
 8002918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002928:	f000 f8dc 	bl	8002ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800292c:	bf00      	nop
 800292e:	bd80      	pop	{r7, pc}

08002930 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002934:	4803      	ldr	r0, [pc, #12]	; (8002944 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8002936:	f002 fe0d 	bl	8005554 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800293a:	4803      	ldr	r0, [pc, #12]	; (8002948 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 800293c:	f002 fe0a 	bl	8005554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002940:	bf00      	nop
 8002942:	bd80      	pop	{r7, pc}
 8002944:	20000514 	.word	0x20000514
 8002948:	200005ac 	.word	0x200005ac

0800294c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002950:	4802      	ldr	r0, [pc, #8]	; (800295c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002952:	f002 fdff 	bl	8005554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000514 	.word	0x20000514

08002960 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002964:	4802      	ldr	r0, [pc, #8]	; (8002970 <TIM2_IRQHandler+0x10>)
 8002966:	f002 fdf5 	bl	8005554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000560 	.word	0x20000560

08002974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800297c:	4a14      	ldr	r2, [pc, #80]	; (80029d0 <_sbrk+0x5c>)
 800297e:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <_sbrk+0x60>)
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002988:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <_sbrk+0x64>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d102      	bne.n	8002996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <_sbrk+0x64>)
 8002992:	4a12      	ldr	r2, [pc, #72]	; (80029dc <_sbrk+0x68>)
 8002994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <_sbrk+0x64>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4413      	add	r3, r2
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d207      	bcs.n	80029b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029a4:	f004 f8f2 	bl	8006b8c <__errno>
 80029a8:	4603      	mov	r3, r0
 80029aa:	220c      	movs	r2, #12
 80029ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ae:	f04f 33ff 	mov.w	r3, #4294967295
 80029b2:	e009      	b.n	80029c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029b4:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <_sbrk+0x64>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029ba:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <_sbrk+0x64>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	4a05      	ldr	r2, [pc, #20]	; (80029d8 <_sbrk+0x64>)
 80029c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029c6:	68fb      	ldr	r3, [r7, #12]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20004000 	.word	0x20004000
 80029d4:	00000400 	.word	0x00000400
 80029d8:	20000740 	.word	0x20000740
 80029dc:	20000758 	.word	0x20000758

080029e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <SystemInit+0x20>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ea:	4a05      	ldr	r2, [pc, #20]	; (8002a00 <SystemInit+0x20>)
 80029ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	e000ed00 	.word	0xe000ed00

08002a04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a3c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a08:	f7ff ffea 	bl	80029e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a0c:	480c      	ldr	r0, [pc, #48]	; (8002a40 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a0e:	490d      	ldr	r1, [pc, #52]	; (8002a44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a10:	4a0d      	ldr	r2, [pc, #52]	; (8002a48 <LoopForever+0xe>)
  movs r3, #0
 8002a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a14:	e002      	b.n	8002a1c <LoopCopyDataInit>

08002a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a1a:	3304      	adds	r3, #4

08002a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a20:	d3f9      	bcc.n	8002a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a22:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a24:	4c0a      	ldr	r4, [pc, #40]	; (8002a50 <LoopForever+0x16>)
  movs r3, #0
 8002a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a28:	e001      	b.n	8002a2e <LoopFillZerobss>

08002a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a2c:	3204      	adds	r2, #4

08002a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a30:	d3fb      	bcc.n	8002a2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a32:	f004 f8b1 	bl	8006b98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a36:	f7fe fc3b 	bl	80012b0 <main>

08002a3a <LoopForever>:

LoopForever:
    b LoopForever
 8002a3a:	e7fe      	b.n	8002a3a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a3c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a44:	200004a0 	.word	0x200004a0
  ldr r2, =_sidata
 8002a48:	08007918 	.word	0x08007918
  ldr r2, =_sbss
 8002a4c:	200004a0 	.word	0x200004a0
  ldr r4, =_ebss
 8002a50:	20000758 	.word	0x20000758

08002a54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a54:	e7fe      	b.n	8002a54 <ADC1_IRQHandler>
	...

08002a58 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a5c:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <HAL_Init+0x28>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a07      	ldr	r2, [pc, #28]	; (8002a80 <HAL_Init+0x28>)
 8002a62:	f043 0310 	orr.w	r3, r3, #16
 8002a66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a68:	2003      	movs	r0, #3
 8002a6a:	f000 f94f 	bl	8002d0c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f000 f808 	bl	8002a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a74:	f7ff fdf0 	bl	8002658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40022000 	.word	0x40022000

08002a84 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <HAL_InitTick+0x54>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b12      	ldr	r3, [pc, #72]	; (8002adc <HAL_InitTick+0x58>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	4619      	mov	r1, r3
 8002a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 f967 	bl	8002d76 <HAL_SYSTICK_Config>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e00e      	b.n	8002ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b0f      	cmp	r3, #15
 8002ab6:	d80a      	bhi.n	8002ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac0:	f000 f92f 	bl	8002d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ac4:	4a06      	ldr	r2, [pc, #24]	; (8002ae0 <HAL_InitTick+0x5c>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e000      	b.n	8002ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20000430 	.word	0x20000430
 8002adc:	20000438 	.word	0x20000438
 8002ae0:	20000434 	.word	0x20000434

08002ae4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_IncTick+0x20>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_IncTick+0x24>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4413      	add	r3, r2
 8002af4:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <HAL_IncTick+0x24>)
 8002af6:	6013      	str	r3, [r2, #0]
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000438 	.word	0x20000438
 8002b08:	20000744 	.word	0x20000744

08002b0c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002b10:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <HAL_GetTick+0x14>)
 8002b12:	681b      	ldr	r3, [r3, #0]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20000744 	.word	0x20000744

08002b24 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b2c:	f7ff ffee 	bl	8002b0c <HAL_GetTick>
 8002b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3c:	d005      	beq.n	8002b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b3e:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <HAL_Delay+0x44>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4413      	add	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002b4a:	bf00      	nop
 8002b4c:	f7ff ffde 	bl	8002b0c <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d8f7      	bhi.n	8002b4c <HAL_Delay+0x28>
  {
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	bf00      	nop
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000438 	.word	0x20000438

08002b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b88:	4013      	ands	r3, r2
 8002b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b9e:	4a04      	ldr	r2, [pc, #16]	; (8002bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	60d3      	str	r3, [r2, #12]
}
 8002ba4:	bf00      	nop
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb8:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <__NVIC_GetPriorityGrouping+0x18>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	0a1b      	lsrs	r3, r3, #8
 8002bbe:	f003 0307 	and.w	r3, r3, #7
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	db0b      	blt.n	8002bfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	f003 021f 	and.w	r2, r3, #31
 8002be8:	4907      	ldr	r1, [pc, #28]	; (8002c08 <__NVIC_EnableIRQ+0x38>)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	e000e100 	.word	0xe000e100

08002c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	6039      	str	r1, [r7, #0]
 8002c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	db0a      	blt.n	8002c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	490c      	ldr	r1, [pc, #48]	; (8002c58 <__NVIC_SetPriority+0x4c>)
 8002c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2a:	0112      	lsls	r2, r2, #4
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	440b      	add	r3, r1
 8002c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c34:	e00a      	b.n	8002c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	4908      	ldr	r1, [pc, #32]	; (8002c5c <__NVIC_SetPriority+0x50>)
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	3b04      	subs	r3, #4
 8002c44:	0112      	lsls	r2, r2, #4
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	440b      	add	r3, r1
 8002c4a:	761a      	strb	r2, [r3, #24]
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	e000e100 	.word	0xe000e100
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b089      	sub	sp, #36	; 0x24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f1c3 0307 	rsb	r3, r3, #7
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	bf28      	it	cs
 8002c7e:	2304      	movcs	r3, #4
 8002c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3304      	adds	r3, #4
 8002c86:	2b06      	cmp	r3, #6
 8002c88:	d902      	bls.n	8002c90 <NVIC_EncodePriority+0x30>
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	3b03      	subs	r3, #3
 8002c8e:	e000      	b.n	8002c92 <NVIC_EncodePriority+0x32>
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c94:	f04f 32ff 	mov.w	r2, #4294967295
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43da      	mvns	r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb2:	43d9      	mvns	r1, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb8:	4313      	orrs	r3, r2
         );
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3724      	adds	r7, #36	; 0x24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cd8:	d301      	bcc.n	8002cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e00f      	b.n	8002cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cde:	4a0a      	ldr	r2, [pc, #40]	; (8002d08 <SysTick_Config+0x40>)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ce6:	210f      	movs	r1, #15
 8002ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cec:	f7ff ff8e 	bl	8002c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cf0:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <SysTick_Config+0x40>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cf6:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <SysTick_Config+0x40>)
 8002cf8:	2207      	movs	r2, #7
 8002cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	e000e010 	.word	0xe000e010

08002d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7ff ff29 	bl	8002b6c <__NVIC_SetPriorityGrouping>
}
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b086      	sub	sp, #24
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	4603      	mov	r3, r0
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d34:	f7ff ff3e 	bl	8002bb4 <__NVIC_GetPriorityGrouping>
 8002d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	6978      	ldr	r0, [r7, #20]
 8002d40:	f7ff ff8e 	bl	8002c60 <NVIC_EncodePriority>
 8002d44:	4602      	mov	r2, r0
 8002d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff ff5d 	bl	8002c0c <__NVIC_SetPriority>
}
 8002d52:	bf00      	nop
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	4603      	mov	r3, r0
 8002d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff ff31 	bl	8002bd0 <__NVIC_EnableIRQ>
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7ff ffa2 	bl	8002cc8 <SysTick_Config>
 8002d84:	4603      	mov	r3, r0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d9e:	e14e      	b.n	800303e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	2101      	movs	r1, #1
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dac:	4013      	ands	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 8140 	beq.w	8003038 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d005      	beq.n	8002dd0 <HAL_GPIO_Init+0x40>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d130      	bne.n	8002e32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	2203      	movs	r2, #3
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e06:	2201      	movs	r2, #1
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4013      	ands	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	091b      	lsrs	r3, r3, #4
 8002e1c:	f003 0201 	and.w	r2, r3, #1
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d017      	beq.n	8002e6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	2203      	movs	r2, #3
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4013      	ands	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d123      	bne.n	8002ec2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	08da      	lsrs	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3208      	adds	r2, #8
 8002e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	220f      	movs	r2, #15
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43db      	mvns	r3, r3
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	691a      	ldr	r2, [r3, #16]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	08da      	lsrs	r2, r3, #3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3208      	adds	r2, #8
 8002ebc:	6939      	ldr	r1, [r7, #16]
 8002ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	2203      	movs	r2, #3
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 0203 	and.w	r2, r3, #3
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 809a 	beq.w	8003038 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f04:	4b55      	ldr	r3, [pc, #340]	; (800305c <HAL_GPIO_Init+0x2cc>)
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	4a54      	ldr	r2, [pc, #336]	; (800305c <HAL_GPIO_Init+0x2cc>)
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	6193      	str	r3, [r2, #24]
 8002f10:	4b52      	ldr	r3, [pc, #328]	; (800305c <HAL_GPIO_Init+0x2cc>)
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f1c:	4a50      	ldr	r2, [pc, #320]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	089b      	lsrs	r3, r3, #2
 8002f22:	3302      	adds	r3, #2
 8002f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	220f      	movs	r2, #15
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f46:	d013      	beq.n	8002f70 <HAL_GPIO_Init+0x1e0>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a46      	ldr	r2, [pc, #280]	; (8003064 <HAL_GPIO_Init+0x2d4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00d      	beq.n	8002f6c <HAL_GPIO_Init+0x1dc>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a45      	ldr	r2, [pc, #276]	; (8003068 <HAL_GPIO_Init+0x2d8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d007      	beq.n	8002f68 <HAL_GPIO_Init+0x1d8>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a44      	ldr	r2, [pc, #272]	; (800306c <HAL_GPIO_Init+0x2dc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d101      	bne.n	8002f64 <HAL_GPIO_Init+0x1d4>
 8002f60:	2303      	movs	r3, #3
 8002f62:	e006      	b.n	8002f72 <HAL_GPIO_Init+0x1e2>
 8002f64:	2305      	movs	r3, #5
 8002f66:	e004      	b.n	8002f72 <HAL_GPIO_Init+0x1e2>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e002      	b.n	8002f72 <HAL_GPIO_Init+0x1e2>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <HAL_GPIO_Init+0x1e2>
 8002f70:	2300      	movs	r3, #0
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	f002 0203 	and.w	r2, r2, #3
 8002f78:	0092      	lsls	r2, r2, #2
 8002f7a:	4093      	lsls	r3, r2
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f82:	4937      	ldr	r1, [pc, #220]	; (8003060 <HAL_GPIO_Init+0x2d0>)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	089b      	lsrs	r3, r3, #2
 8002f88:	3302      	adds	r3, #2
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f90:	4b37      	ldr	r3, [pc, #220]	; (8003070 <HAL_GPIO_Init+0x2e0>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002fb4:	4a2e      	ldr	r2, [pc, #184]	; (8003070 <HAL_GPIO_Init+0x2e0>)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fba:	4b2d      	ldr	r3, [pc, #180]	; (8003070 <HAL_GPIO_Init+0x2e0>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002fde:	4a24      	ldr	r2, [pc, #144]	; (8003070 <HAL_GPIO_Init+0x2e0>)
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fe4:	4b22      	ldr	r3, [pc, #136]	; (8003070 <HAL_GPIO_Init+0x2e0>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	43db      	mvns	r3, r3
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003008:	4a19      	ldr	r2, [pc, #100]	; (8003070 <HAL_GPIO_Init+0x2e0>)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800300e:	4b18      	ldr	r3, [pc, #96]	; (8003070 <HAL_GPIO_Init+0x2e0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	43db      	mvns	r3, r3
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4013      	ands	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003032:	4a0f      	ldr	r2, [pc, #60]	; (8003070 <HAL_GPIO_Init+0x2e0>)
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	3301      	adds	r3, #1
 800303c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	fa22 f303 	lsr.w	r3, r2, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	f47f aea9 	bne.w	8002da0 <HAL_GPIO_Init+0x10>
  }
}
 800304e:	bf00      	nop
 8003050:	bf00      	nop
 8003052:	371c      	adds	r7, #28
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	40021000 	.word	0x40021000
 8003060:	40010000 	.word	0x40010000
 8003064:	48000400 	.word	0x48000400
 8003068:	48000800 	.word	0x48000800
 800306c:	48000c00 	.word	0x48000c00
 8003070:	40010400 	.word	0x40010400

08003074 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	887b      	ldrh	r3, [r7, #2]
 8003086:	4013      	ands	r3, r2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800308c:	2301      	movs	r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
 8003090:	e001      	b.n	8003096 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003092:	2300      	movs	r3, #0
 8003094:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003096:	7bfb      	ldrb	r3, [r7, #15]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	807b      	strh	r3, [r7, #2]
 80030b0:	4613      	mov	r3, r2
 80030b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030b4:	787b      	ldrb	r3, [r7, #1]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030ba:	887a      	ldrh	r2, [r7, #2]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030c0:	e002      	b.n	80030c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030c2:	887a      	ldrh	r2, [r7, #2]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030e6:	887a      	ldrh	r2, [r7, #2]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4013      	ands	r3, r2
 80030ec:	041a      	lsls	r2, r3, #16
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	43d9      	mvns	r1, r3
 80030f2:	887b      	ldrh	r3, [r7, #2]
 80030f4:	400b      	ands	r3, r1
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	619a      	str	r2, [r3, #24]
}
 80030fc:	bf00      	nop
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e081      	b.n	800321e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff fab6 	bl	80026a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2224      	movs	r2, #36	; 0x24
 8003138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0201 	bic.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003158:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003168:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d107      	bne.n	8003182 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	e006      	b.n	8003190 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800318e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	2b02      	cmp	r3, #2
 8003196:	d104      	bne.n	80031a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68da      	ldr	r2, [r3, #12]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691a      	ldr	r2, [r3, #16]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69d9      	ldr	r1, [r3, #28]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a1a      	ldr	r2, [r3, #32]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af02      	add	r7, sp, #8
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	461a      	mov	r2, r3
 8003234:	460b      	mov	r3, r1
 8003236:	817b      	strh	r3, [r7, #10]
 8003238:	4613      	mov	r3, r2
 800323a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b20      	cmp	r3, #32
 8003246:	f040 80da 	bne.w	80033fe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_I2C_Master_Transmit+0x30>
 8003254:	2302      	movs	r3, #2
 8003256:	e0d3      	b.n	8003400 <HAL_I2C_Master_Transmit+0x1d8>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003260:	f7ff fc54 	bl	8002b0c <HAL_GetTick>
 8003264:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	2319      	movs	r3, #25
 800326c:	2201      	movs	r2, #1
 800326e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f8f0 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e0be      	b.n	8003400 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2221      	movs	r2, #33	; 0x21
 8003286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2210      	movs	r2, #16
 800328e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	893a      	ldrh	r2, [r7, #8]
 80032a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2bff      	cmp	r3, #255	; 0xff
 80032b2:	d90e      	bls.n	80032d2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	22ff      	movs	r2, #255	; 0xff
 80032b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	8979      	ldrh	r1, [r7, #10]
 80032c2:	4b51      	ldr	r3, [pc, #324]	; (8003408 <HAL_I2C_Master_Transmit+0x1e0>)
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 fa7e 	bl	80037cc <I2C_TransferConfig>
 80032d0:	e06c      	b.n	80033ac <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	8979      	ldrh	r1, [r7, #10]
 80032e4:	4b48      	ldr	r3, [pc, #288]	; (8003408 <HAL_I2C_Master_Transmit+0x1e0>)
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 fa6d 	bl	80037cc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80032f2:	e05b      	b.n	80033ac <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	6a39      	ldr	r1, [r7, #32]
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 f8fc 	bl	80034f6 <I2C_WaitOnTXISFlagUntilTimeout>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e07b      	b.n	8003400 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	781a      	ldrb	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d034      	beq.n	80033ac <HAL_I2C_Master_Transmit+0x184>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003346:	2b00      	cmp	r3, #0
 8003348:	d130      	bne.n	80033ac <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	2200      	movs	r2, #0
 8003352:	2180      	movs	r1, #128	; 0x80
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 f87f 	bl	8003458 <I2C_WaitOnFlagUntilTimeout>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e04d      	b.n	8003400 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003368:	b29b      	uxth	r3, r3
 800336a:	2bff      	cmp	r3, #255	; 0xff
 800336c:	d90e      	bls.n	800338c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	22ff      	movs	r2, #255	; 0xff
 8003372:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003378:	b2da      	uxtb	r2, r3
 800337a:	8979      	ldrh	r1, [r7, #10]
 800337c:	2300      	movs	r3, #0
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 fa21 	bl	80037cc <I2C_TransferConfig>
 800338a:	e00f      	b.n	80033ac <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339a:	b2da      	uxtb	r2, r3
 800339c:	8979      	ldrh	r1, [r7, #10]
 800339e:	2300      	movs	r3, #0
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 fa10 	bl	80037cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d19e      	bne.n	80032f4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	6a39      	ldr	r1, [r7, #32]
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f8e2 	bl	8003584 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e01a      	b.n	8003400 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2220      	movs	r2, #32
 80033d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6859      	ldr	r1, [r3, #4]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4b0b      	ldr	r3, [pc, #44]	; (800340c <HAL_I2C_Master_Transmit+0x1e4>)
 80033de:	400b      	ands	r3, r1
 80033e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	e000      	b.n	8003400 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80033fe:	2302      	movs	r3, #2
  }
}
 8003400:	4618      	mov	r0, r3
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	80002000 	.word	0x80002000
 800340c:	fe00e800 	.word	0xfe00e800

08003410 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b02      	cmp	r3, #2
 8003424:	d103      	bne.n	800342e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2200      	movs	r2, #0
 800342c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b01      	cmp	r3, #1
 800343a:	d007      	beq.n	800344c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699a      	ldr	r2, [r3, #24]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	619a      	str	r2, [r3, #24]
  }
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	603b      	str	r3, [r7, #0]
 8003464:	4613      	mov	r3, r2
 8003466:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003468:	e031      	b.n	80034ce <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003470:	d02d      	beq.n	80034ce <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003472:	f7ff fb4b 	bl	8002b0c <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d302      	bcc.n	8003488 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d122      	bne.n	80034ce <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699a      	ldr	r2, [r3, #24]
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	4013      	ands	r3, r2
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	429a      	cmp	r2, r3
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	461a      	mov	r2, r3
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d113      	bne.n	80034ce <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	f043 0220 	orr.w	r2, r3, #32
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e00f      	b.n	80034ee <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699a      	ldr	r2, [r3, #24]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4013      	ands	r3, r2
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	429a      	cmp	r2, r3
 80034dc:	bf0c      	ite	eq
 80034de:	2301      	moveq	r3, #1
 80034e0:	2300      	movne	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	461a      	mov	r2, r3
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d0be      	beq.n	800346a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b084      	sub	sp, #16
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	60f8      	str	r0, [r7, #12]
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003502:	e033      	b.n	800356c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	68b9      	ldr	r1, [r7, #8]
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 f87f 	bl	800360c <I2C_IsErrorOccurred>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e031      	b.n	800357c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351e:	d025      	beq.n	800356c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003520:	f7ff faf4 	bl	8002b0c <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	429a      	cmp	r2, r3
 800352e:	d302      	bcc.n	8003536 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d11a      	bne.n	800356c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b02      	cmp	r3, #2
 8003542:	d013      	beq.n	800356c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003548:	f043 0220 	orr.w	r2, r3, #32
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e007      	b.n	800357c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b02      	cmp	r3, #2
 8003578:	d1c4      	bne.n	8003504 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003590:	e02f      	b.n	80035f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 f838 	bl	800360c <I2C_IsErrorOccurred>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e02d      	b.n	8003602 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a6:	f7ff fab1 	bl	8002b0c <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d302      	bcc.n	80035bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d11a      	bne.n	80035f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b20      	cmp	r3, #32
 80035c8:	d013      	beq.n	80035f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	f043 0220 	orr.w	r2, r3, #32
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e007      	b.n	8003602 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	d1c8      	bne.n	8003592 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08a      	sub	sp, #40	; 0x28
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003626:	2300      	movs	r3, #0
 8003628:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	f003 0310 	and.w	r3, r3, #16
 8003634:	2b00      	cmp	r3, #0
 8003636:	d068      	beq.n	800370a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2210      	movs	r2, #16
 800363e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003640:	e049      	b.n	80036d6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003648:	d045      	beq.n	80036d6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800364a:	f7ff fa5f 	bl	8002b0c <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	429a      	cmp	r2, r3
 8003658:	d302      	bcc.n	8003660 <I2C_IsErrorOccurred+0x54>
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d13a      	bne.n	80036d6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800366a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003672:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800367e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003682:	d121      	bne.n	80036c8 <I2C_IsErrorOccurred+0xbc>
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800368a:	d01d      	beq.n	80036c8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800368c:	7cfb      	ldrb	r3, [r7, #19]
 800368e:	2b20      	cmp	r3, #32
 8003690:	d01a      	beq.n	80036c8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036a2:	f7ff fa33 	bl	8002b0c <HAL_GetTick>
 80036a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036a8:	e00e      	b.n	80036c8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036aa:	f7ff fa2f 	bl	8002b0c <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b19      	cmp	r3, #25
 80036b6:	d907      	bls.n	80036c8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	f043 0320 	orr.w	r3, r3, #32
 80036be:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80036c6:	e006      	b.n	80036d6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b20      	cmp	r3, #32
 80036d4:	d1e9      	bne.n	80036aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	f003 0320 	and.w	r3, r3, #32
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	d003      	beq.n	80036ec <I2C_IsErrorOccurred+0xe0>
 80036e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0aa      	beq.n	8003642 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80036ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d103      	bne.n	80036fc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2220      	movs	r2, #32
 80036fa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	f043 0304 	orr.w	r3, r3, #4
 8003702:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00b      	beq.n	8003734 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	f043 0301 	orr.w	r3, r3, #1
 8003722:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f44f 7280 	mov.w	r2, #256	; 0x100
 800372c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00b      	beq.n	8003756 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	f043 0308 	orr.w	r3, r3, #8
 8003744:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800374e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00b      	beq.n	8003778 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	f043 0302 	orr.w	r3, r3, #2
 8003766:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003770:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003778:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800377c:	2b00      	cmp	r3, #0
 800377e:	d01c      	beq.n	80037ba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f7ff fe45 	bl	8003410 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6859      	ldr	r1, [r3, #4]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <I2C_IsErrorOccurred+0x1bc>)
 8003792:	400b      	ands	r3, r1
 8003794:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	431a      	orrs	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80037ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3728      	adds	r7, #40	; 0x28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	fe00e800 	.word	0xfe00e800

080037cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	607b      	str	r3, [r7, #4]
 80037d6:	460b      	mov	r3, r1
 80037d8:	817b      	strh	r3, [r7, #10]
 80037da:	4613      	mov	r3, r2
 80037dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037de:	897b      	ldrh	r3, [r7, #10]
 80037e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037e4:	7a7b      	ldrb	r3, [r7, #9]
 80037e6:	041b      	lsls	r3, r3, #16
 80037e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	0d5b      	lsrs	r3, r3, #21
 8003806:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800380a:	4b08      	ldr	r3, [pc, #32]	; (800382c <I2C_TransferConfig+0x60>)
 800380c:	430b      	orrs	r3, r1
 800380e:	43db      	mvns	r3, r3
 8003810:	ea02 0103 	and.w	r1, r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800381e:	bf00      	nop
 8003820:	371c      	adds	r7, #28
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	03ff63ff 	.word	0x03ff63ff

08003830 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b20      	cmp	r3, #32
 8003844:	d138      	bne.n	80038b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800384c:	2b01      	cmp	r3, #1
 800384e:	d101      	bne.n	8003854 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003850:	2302      	movs	r3, #2
 8003852:	e032      	b.n	80038ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2224      	movs	r2, #36	; 0x24
 8003860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0201 	bic.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003882:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6819      	ldr	r1, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e000      	b.n	80038ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038b8:	2302      	movs	r3, #2
  }
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b085      	sub	sp, #20
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b20      	cmp	r3, #32
 80038da:	d139      	bne.n	8003950 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038e6:	2302      	movs	r3, #2
 80038e8:	e033      	b.n	8003952 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2224      	movs	r2, #36	; 0x24
 80038f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0201 	bic.w	r2, r2, #1
 8003908:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003918:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	021b      	lsls	r3, r3, #8
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	4313      	orrs	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800394c:	2300      	movs	r3, #0
 800394e:	e000      	b.n	8003952 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003950:	2302      	movs	r3, #2
  }
}
 8003952:	4618      	mov	r0, r3
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
	...

08003960 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003966:	af00      	add	r7, sp, #0
 8003968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800396c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003970:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003976:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d102      	bne.n	8003986 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	f001 b823 	b.w	80049cc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 817d 	beq.w	8003c96 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800399c:	4bbc      	ldr	r3, [pc, #752]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 030c 	and.w	r3, r3, #12
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d00c      	beq.n	80039c2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039a8:	4bb9      	ldr	r3, [pc, #740]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 030c 	and.w	r3, r3, #12
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d15c      	bne.n	8003a6e <HAL_RCC_OscConfig+0x10e>
 80039b4:	4bb6      	ldr	r3, [pc, #728]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c0:	d155      	bne.n	8003a6e <HAL_RCC_OscConfig+0x10e>
 80039c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039c6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80039ce:	fa93 f3a3 	rbit	r3, r3
 80039d2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80039d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039da:	fab3 f383 	clz	r3, r3
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d102      	bne.n	80039f4 <HAL_RCC_OscConfig+0x94>
 80039ee:	4ba8      	ldr	r3, [pc, #672]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	e015      	b.n	8003a20 <HAL_RCC_OscConfig+0xc0>
 80039f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039f8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003a00:	fa93 f3a3 	rbit	r3, r3
 8003a04:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003a08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a0c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003a10:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003a14:	fa93 f3a3 	rbit	r3, r3
 8003a18:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003a1c:	4b9c      	ldr	r3, [pc, #624]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a24:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003a28:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003a2c:	fa92 f2a2 	rbit	r2, r2
 8003a30:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003a34:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003a38:	fab2 f282 	clz	r2, r2
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	f042 0220 	orr.w	r2, r2, #32
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	f002 021f 	and.w	r2, r2, #31
 8003a48:	2101      	movs	r1, #1
 8003a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 811f 	beq.w	8003c94 <HAL_RCC_OscConfig+0x334>
 8003a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f040 8116 	bne.w	8003c94 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f000 bfaf 	b.w	80049cc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a7e:	d106      	bne.n	8003a8e <HAL_RCC_OscConfig+0x12e>
 8003a80:	4b83      	ldr	r3, [pc, #524]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a82      	ldr	r2, [pc, #520]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 8003a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	e036      	b.n	8003afc <HAL_RCC_OscConfig+0x19c>
 8003a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x158>
 8003a9e:	4b7c      	ldr	r3, [pc, #496]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a7b      	ldr	r2, [pc, #492]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 8003aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	4b79      	ldr	r3, [pc, #484]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a78      	ldr	r2, [pc, #480]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 8003ab0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	e021      	b.n	8003afc <HAL_RCC_OscConfig+0x19c>
 8003ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003abc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ac8:	d10c      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x184>
 8003aca:	4b71      	ldr	r3, [pc, #452]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a70      	ldr	r2, [pc, #448]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 8003ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	4b6e      	ldr	r3, [pc, #440]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a6d      	ldr	r2, [pc, #436]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 8003adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	e00b      	b.n	8003afc <HAL_RCC_OscConfig+0x19c>
 8003ae4:	4b6a      	ldr	r3, [pc, #424]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a69      	ldr	r2, [pc, #420]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 8003aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aee:	6013      	str	r3, [r2, #0]
 8003af0:	4b67      	ldr	r3, [pc, #412]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a66      	ldr	r2, [pc, #408]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 8003af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003afa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003afc:	4b64      	ldr	r3, [pc, #400]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	f023 020f 	bic.w	r2, r3, #15
 8003b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	495f      	ldr	r1, [pc, #380]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d059      	beq.n	8003bda <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b26:	f7fe fff1 	bl	8002b0c <HAL_GetTick>
 8003b2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2e:	e00a      	b.n	8003b46 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b30:	f7fe ffec 	bl	8002b0c <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b64      	cmp	r3, #100	; 0x64
 8003b3e:	d902      	bls.n	8003b46 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	f000 bf43 	b.w	80049cc <HAL_RCC_OscConfig+0x106c>
 8003b46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b4a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003b52:	fa93 f3a3 	rbit	r3, r3
 8003b56:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003b5a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5e:	fab3 f383 	clz	r3, r3
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	f043 0301 	orr.w	r3, r3, #1
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d102      	bne.n	8003b78 <HAL_RCC_OscConfig+0x218>
 8003b72:	4b47      	ldr	r3, [pc, #284]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	e015      	b.n	8003ba4 <HAL_RCC_OscConfig+0x244>
 8003b78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b7c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b80:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003b84:	fa93 f3a3 	rbit	r3, r3
 8003b88:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003b8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b90:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003b94:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003b98:	fa93 f3a3 	rbit	r3, r3
 8003b9c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003ba0:	4b3b      	ldr	r3, [pc, #236]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ba8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003bac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003bb0:	fa92 f2a2 	rbit	r2, r2
 8003bb4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003bb8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003bbc:	fab2 f282 	clz	r2, r2
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	f042 0220 	orr.w	r2, r2, #32
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	f002 021f 	and.w	r2, r2, #31
 8003bcc:	2101      	movs	r1, #1
 8003bce:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0ab      	beq.n	8003b30 <HAL_RCC_OscConfig+0x1d0>
 8003bd8:	e05d      	b.n	8003c96 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bda:	f7fe ff97 	bl	8002b0c <HAL_GetTick>
 8003bde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003be2:	e00a      	b.n	8003bfa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003be4:	f7fe ff92 	bl	8002b0c <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b64      	cmp	r3, #100	; 0x64
 8003bf2:	d902      	bls.n	8003bfa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	f000 bee9 	b.w	80049cc <HAL_RCC_OscConfig+0x106c>
 8003bfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bfe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003c06:	fa93 f3a3 	rbit	r3, r3
 8003c0a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003c0e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c12:	fab3 f383 	clz	r3, r3
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f043 0301 	orr.w	r3, r3, #1
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d102      	bne.n	8003c2c <HAL_RCC_OscConfig+0x2cc>
 8003c26:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	e015      	b.n	8003c58 <HAL_RCC_OscConfig+0x2f8>
 8003c2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c30:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c34:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003c38:	fa93 f3a3 	rbit	r3, r3
 8003c3c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003c40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c44:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003c48:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003c4c:	fa93 f3a3 	rbit	r3, r3
 8003c50:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003c54:	4b0e      	ldr	r3, [pc, #56]	; (8003c90 <HAL_RCC_OscConfig+0x330>)
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c5c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003c60:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003c64:	fa92 f2a2 	rbit	r2, r2
 8003c68:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003c6c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003c70:	fab2 f282 	clz	r2, r2
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	f042 0220 	orr.w	r2, r2, #32
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	f002 021f 	and.w	r2, r2, #31
 8003c80:	2101      	movs	r1, #1
 8003c82:	fa01 f202 	lsl.w	r2, r1, r2
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1ab      	bne.n	8003be4 <HAL_RCC_OscConfig+0x284>
 8003c8c:	e003      	b.n	8003c96 <HAL_RCC_OscConfig+0x336>
 8003c8e:	bf00      	nop
 8003c90:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 817d 	beq.w	8003fa6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003cac:	4ba6      	ldr	r3, [pc, #664]	; (8003f48 <HAL_RCC_OscConfig+0x5e8>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 030c 	and.w	r3, r3, #12
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00b      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003cb8:	4ba3      	ldr	r3, [pc, #652]	; (8003f48 <HAL_RCC_OscConfig+0x5e8>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 030c 	and.w	r3, r3, #12
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d172      	bne.n	8003daa <HAL_RCC_OscConfig+0x44a>
 8003cc4:	4ba0      	ldr	r3, [pc, #640]	; (8003f48 <HAL_RCC_OscConfig+0x5e8>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d16c      	bne.n	8003daa <HAL_RCC_OscConfig+0x44a>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003cda:	fa93 f3a3 	rbit	r3, r3
 8003cde:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003ce2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ce6:	fab3 f383 	clz	r3, r3
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	095b      	lsrs	r3, r3, #5
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f043 0301 	orr.w	r3, r3, #1
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d102      	bne.n	8003d00 <HAL_RCC_OscConfig+0x3a0>
 8003cfa:	4b93      	ldr	r3, [pc, #588]	; (8003f48 <HAL_RCC_OscConfig+0x5e8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	e013      	b.n	8003d28 <HAL_RCC_OscConfig+0x3c8>
 8003d00:	2302      	movs	r3, #2
 8003d02:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d06:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003d0a:	fa93 f3a3 	rbit	r3, r3
 8003d0e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003d12:	2302      	movs	r3, #2
 8003d14:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003d18:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d1c:	fa93 f3a3 	rbit	r3, r3
 8003d20:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003d24:	4b88      	ldr	r3, [pc, #544]	; (8003f48 <HAL_RCC_OscConfig+0x5e8>)
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	2202      	movs	r2, #2
 8003d2a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003d2e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003d32:	fa92 f2a2 	rbit	r2, r2
 8003d36:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003d3a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003d3e:	fab2 f282 	clz	r2, r2
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	f042 0220 	orr.w	r2, r2, #32
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	f002 021f 	and.w	r2, r2, #31
 8003d4e:	2101      	movs	r1, #1
 8003d50:	fa01 f202 	lsl.w	r2, r1, r2
 8003d54:	4013      	ands	r3, r2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <HAL_RCC_OscConfig+0x410>
 8003d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d002      	beq.n	8003d70 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	f000 be2e 	b.w	80049cc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d70:	4b75      	ldr	r3, [pc, #468]	; (8003f48 <HAL_RCC_OscConfig+0x5e8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	21f8      	movs	r1, #248	; 0xf8
 8003d86:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003d8e:	fa91 f1a1 	rbit	r1, r1
 8003d92:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003d96:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003d9a:	fab1 f181 	clz	r1, r1
 8003d9e:	b2c9      	uxtb	r1, r1
 8003da0:	408b      	lsls	r3, r1
 8003da2:	4969      	ldr	r1, [pc, #420]	; (8003f48 <HAL_RCC_OscConfig+0x5e8>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003da8:	e0fd      	b.n	8003fa6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 8088 	beq.w	8003ecc <HAL_RCC_OscConfig+0x56c>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003dc6:	fa93 f3a3 	rbit	r3, r3
 8003dca:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003dce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dd2:	fab3 f383 	clz	r3, r3
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ddc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	461a      	mov	r2, r3
 8003de4:	2301      	movs	r3, #1
 8003de6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de8:	f7fe fe90 	bl	8002b0c <HAL_GetTick>
 8003dec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df0:	e00a      	b.n	8003e08 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003df2:	f7fe fe8b 	bl	8002b0c <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d902      	bls.n	8003e08 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	f000 bde2 	b.w	80049cc <HAL_RCC_OscConfig+0x106c>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003e12:	fa93 f3a3 	rbit	r3, r3
 8003e16:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003e1a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e1e:	fab3 f383 	clz	r3, r3
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	095b      	lsrs	r3, r3, #5
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d102      	bne.n	8003e38 <HAL_RCC_OscConfig+0x4d8>
 8003e32:	4b45      	ldr	r3, [pc, #276]	; (8003f48 <HAL_RCC_OscConfig+0x5e8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	e013      	b.n	8003e60 <HAL_RCC_OscConfig+0x500>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003e42:	fa93 f3a3 	rbit	r3, r3
 8003e46:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003e50:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003e54:	fa93 f3a3 	rbit	r3, r3
 8003e58:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003e5c:	4b3a      	ldr	r3, [pc, #232]	; (8003f48 <HAL_RCC_OscConfig+0x5e8>)
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	2202      	movs	r2, #2
 8003e62:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003e66:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003e6a:	fa92 f2a2 	rbit	r2, r2
 8003e6e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003e72:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003e76:	fab2 f282 	clz	r2, r2
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	f042 0220 	orr.w	r2, r2, #32
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	f002 021f 	and.w	r2, r2, #31
 8003e86:	2101      	movs	r1, #1
 8003e88:	fa01 f202 	lsl.w	r2, r1, r2
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0af      	beq.n	8003df2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e92:	4b2d      	ldr	r3, [pc, #180]	; (8003f48 <HAL_RCC_OscConfig+0x5e8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	21f8      	movs	r1, #248	; 0xf8
 8003ea8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eac:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003eb0:	fa91 f1a1 	rbit	r1, r1
 8003eb4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003eb8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003ebc:	fab1 f181 	clz	r1, r1
 8003ec0:	b2c9      	uxtb	r1, r1
 8003ec2:	408b      	lsls	r3, r1
 8003ec4:	4920      	ldr	r1, [pc, #128]	; (8003f48 <HAL_RCC_OscConfig+0x5e8>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]
 8003eca:	e06c      	b.n	8003fa6 <HAL_RCC_OscConfig+0x646>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003ed6:	fa93 f3a3 	rbit	r3, r3
 8003eda:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003ede:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ee2:	fab3 f383 	clz	r3, r3
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003eec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef8:	f7fe fe08 	bl	8002b0c <HAL_GetTick>
 8003efc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f00:	e00a      	b.n	8003f18 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f02:	f7fe fe03 	bl	8002b0c <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d902      	bls.n	8003f18 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	f000 bd5a 	b.w	80049cc <HAL_RCC_OscConfig+0x106c>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003f22:	fa93 f3a3 	rbit	r3, r3
 8003f26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2e:	fab3 f383 	clz	r3, r3
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	095b      	lsrs	r3, r3, #5
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	f043 0301 	orr.w	r3, r3, #1
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d104      	bne.n	8003f4c <HAL_RCC_OscConfig+0x5ec>
 8003f42:	4b01      	ldr	r3, [pc, #4]	; (8003f48 <HAL_RCC_OscConfig+0x5e8>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	e015      	b.n	8003f74 <HAL_RCC_OscConfig+0x614>
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f56:	fa93 f3a3 	rbit	r3, r3
 8003f5a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003f5e:	2302      	movs	r3, #2
 8003f60:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003f64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003f68:	fa93 f3a3 	rbit	r3, r3
 8003f6c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003f70:	4bc8      	ldr	r3, [pc, #800]	; (8004294 <HAL_RCC_OscConfig+0x934>)
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	2202      	movs	r2, #2
 8003f76:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003f7a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003f7e:	fa92 f2a2 	rbit	r2, r2
 8003f82:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003f86:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003f8a:	fab2 f282 	clz	r2, r2
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	f042 0220 	orr.w	r2, r2, #32
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	f002 021f 	and.w	r2, r2, #31
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1ad      	bne.n	8003f02 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003faa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 8110 	beq.w	80041dc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d079      	beq.n	80040c0 <HAL_RCC_OscConfig+0x760>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003fd6:	fa93 f3a3 	rbit	r3, r3
 8003fda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fe2:	fab3 f383 	clz	r3, r3
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4bab      	ldr	r3, [pc, #684]	; (8004298 <HAL_RCC_OscConfig+0x938>)
 8003fec:	4413      	add	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ff6:	f7fe fd89 	bl	8002b0c <HAL_GetTick>
 8003ffa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ffe:	e00a      	b.n	8004016 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004000:	f7fe fd84 	bl	8002b0c <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d902      	bls.n	8004016 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	f000 bcdb 	b.w	80049cc <HAL_RCC_OscConfig+0x106c>
 8004016:	2302      	movs	r3, #2
 8004018:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004020:	fa93 f3a3 	rbit	r3, r3
 8004024:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800402c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004030:	2202      	movs	r2, #2
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004038:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	fa93 f2a3 	rbit	r2, r3
 8004042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004046:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004054:	2202      	movs	r2, #2
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	fa93 f2a3 	rbit	r2, r3
 8004066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800406a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800406e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004070:	4b88      	ldr	r3, [pc, #544]	; (8004294 <HAL_RCC_OscConfig+0x934>)
 8004072:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004078:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800407c:	2102      	movs	r1, #2
 800407e:	6019      	str	r1, [r3, #0]
 8004080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004084:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	fa93 f1a3 	rbit	r1, r3
 800408e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004092:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004096:	6019      	str	r1, [r3, #0]
  return result;
 8004098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800409c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	fab3 f383 	clz	r3, r3
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	f003 031f 	and.w	r3, r3, #31
 80040b2:	2101      	movs	r1, #1
 80040b4:	fa01 f303 	lsl.w	r3, r1, r3
 80040b8:	4013      	ands	r3, r2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0a0      	beq.n	8004000 <HAL_RCC_OscConfig+0x6a0>
 80040be:	e08d      	b.n	80041dc <HAL_RCC_OscConfig+0x87c>
 80040c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80040c8:	2201      	movs	r2, #1
 80040ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	fa93 f2a3 	rbit	r2, r3
 80040da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040de:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80040e2:	601a      	str	r2, [r3, #0]
  return result;
 80040e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80040ec:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040ee:	fab3 f383 	clz	r3, r3
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	4b68      	ldr	r3, [pc, #416]	; (8004298 <HAL_RCC_OscConfig+0x938>)
 80040f8:	4413      	add	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	461a      	mov	r2, r3
 80040fe:	2300      	movs	r3, #0
 8004100:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004102:	f7fe fd03 	bl	8002b0c <HAL_GetTick>
 8004106:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800410a:	e00a      	b.n	8004122 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800410c:	f7fe fcfe 	bl	8002b0c <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d902      	bls.n	8004122 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	f000 bc55 	b.w	80049cc <HAL_RCC_OscConfig+0x106c>
 8004122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004126:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800412a:	2202      	movs	r2, #2
 800412c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004132:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	fa93 f2a3 	rbit	r2, r3
 800413c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004140:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800414a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800414e:	2202      	movs	r2, #2
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004156:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	fa93 f2a3 	rbit	r2, r3
 8004160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004164:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800416e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004172:	2202      	movs	r2, #2
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800417a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	fa93 f2a3 	rbit	r2, r3
 8004184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004188:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800418c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800418e:	4b41      	ldr	r3, [pc, #260]	; (8004294 <HAL_RCC_OscConfig+0x934>)
 8004190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004196:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800419a:	2102      	movs	r1, #2
 800419c:	6019      	str	r1, [r3, #0]
 800419e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	fa93 f1a3 	rbit	r1, r3
 80041ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80041b4:	6019      	str	r1, [r3, #0]
  return result;
 80041b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	fab3 f383 	clz	r3, r3
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	f003 031f 	and.w	r3, r3, #31
 80041d0:	2101      	movs	r1, #1
 80041d2:	fa01 f303 	lsl.w	r3, r1, r3
 80041d6:	4013      	ands	r3, r2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d197      	bne.n	800410c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 81a1 	beq.w	8004534 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f2:	2300      	movs	r3, #0
 80041f4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041f8:	4b26      	ldr	r3, [pc, #152]	; (8004294 <HAL_RCC_OscConfig+0x934>)
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d116      	bne.n	8004232 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004204:	4b23      	ldr	r3, [pc, #140]	; (8004294 <HAL_RCC_OscConfig+0x934>)
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	4a22      	ldr	r2, [pc, #136]	; (8004294 <HAL_RCC_OscConfig+0x934>)
 800420a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800420e:	61d3      	str	r3, [r2, #28]
 8004210:	4b20      	ldr	r3, [pc, #128]	; (8004294 <HAL_RCC_OscConfig+0x934>)
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800421c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004226:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800422a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800422c:	2301      	movs	r3, #1
 800422e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004232:	4b1a      	ldr	r3, [pc, #104]	; (800429c <HAL_RCC_OscConfig+0x93c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423a:	2b00      	cmp	r3, #0
 800423c:	d11a      	bne.n	8004274 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800423e:	4b17      	ldr	r3, [pc, #92]	; (800429c <HAL_RCC_OscConfig+0x93c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a16      	ldr	r2, [pc, #88]	; (800429c <HAL_RCC_OscConfig+0x93c>)
 8004244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004248:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800424a:	f7fe fc5f 	bl	8002b0c <HAL_GetTick>
 800424e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004252:	e009      	b.n	8004268 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004254:	f7fe fc5a 	bl	8002b0c <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b64      	cmp	r3, #100	; 0x64
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e3b1      	b.n	80049cc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004268:	4b0c      	ldr	r3, [pc, #48]	; (800429c <HAL_RCC_OscConfig+0x93c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0ef      	beq.n	8004254 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004278:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d10d      	bne.n	80042a0 <HAL_RCC_OscConfig+0x940>
 8004284:	4b03      	ldr	r3, [pc, #12]	; (8004294 <HAL_RCC_OscConfig+0x934>)
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	4a02      	ldr	r2, [pc, #8]	; (8004294 <HAL_RCC_OscConfig+0x934>)
 800428a:	f043 0301 	orr.w	r3, r3, #1
 800428e:	6213      	str	r3, [r2, #32]
 8004290:	e03c      	b.n	800430c <HAL_RCC_OscConfig+0x9ac>
 8004292:	bf00      	nop
 8004294:	40021000 	.word	0x40021000
 8004298:	10908120 	.word	0x10908120
 800429c:	40007000 	.word	0x40007000
 80042a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10c      	bne.n	80042ca <HAL_RCC_OscConfig+0x96a>
 80042b0:	4bc1      	ldr	r3, [pc, #772]	; (80045b8 <HAL_RCC_OscConfig+0xc58>)
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	4ac0      	ldr	r2, [pc, #768]	; (80045b8 <HAL_RCC_OscConfig+0xc58>)
 80042b6:	f023 0301 	bic.w	r3, r3, #1
 80042ba:	6213      	str	r3, [r2, #32]
 80042bc:	4bbe      	ldr	r3, [pc, #760]	; (80045b8 <HAL_RCC_OscConfig+0xc58>)
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	4abd      	ldr	r2, [pc, #756]	; (80045b8 <HAL_RCC_OscConfig+0xc58>)
 80042c2:	f023 0304 	bic.w	r3, r3, #4
 80042c6:	6213      	str	r3, [r2, #32]
 80042c8:	e020      	b.n	800430c <HAL_RCC_OscConfig+0x9ac>
 80042ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	2b05      	cmp	r3, #5
 80042d8:	d10c      	bne.n	80042f4 <HAL_RCC_OscConfig+0x994>
 80042da:	4bb7      	ldr	r3, [pc, #732]	; (80045b8 <HAL_RCC_OscConfig+0xc58>)
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	4ab6      	ldr	r2, [pc, #728]	; (80045b8 <HAL_RCC_OscConfig+0xc58>)
 80042e0:	f043 0304 	orr.w	r3, r3, #4
 80042e4:	6213      	str	r3, [r2, #32]
 80042e6:	4bb4      	ldr	r3, [pc, #720]	; (80045b8 <HAL_RCC_OscConfig+0xc58>)
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	4ab3      	ldr	r2, [pc, #716]	; (80045b8 <HAL_RCC_OscConfig+0xc58>)
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	6213      	str	r3, [r2, #32]
 80042f2:	e00b      	b.n	800430c <HAL_RCC_OscConfig+0x9ac>
 80042f4:	4bb0      	ldr	r3, [pc, #704]	; (80045b8 <HAL_RCC_OscConfig+0xc58>)
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	4aaf      	ldr	r2, [pc, #700]	; (80045b8 <HAL_RCC_OscConfig+0xc58>)
 80042fa:	f023 0301 	bic.w	r3, r3, #1
 80042fe:	6213      	str	r3, [r2, #32]
 8004300:	4bad      	ldr	r3, [pc, #692]	; (80045b8 <HAL_RCC_OscConfig+0xc58>)
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	4aac      	ldr	r2, [pc, #688]	; (80045b8 <HAL_RCC_OscConfig+0xc58>)
 8004306:	f023 0304 	bic.w	r3, r3, #4
 800430a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800430c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004310:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 8081 	beq.w	8004420 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800431e:	f7fe fbf5 	bl	8002b0c <HAL_GetTick>
 8004322:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004326:	e00b      	b.n	8004340 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004328:	f7fe fbf0 	bl	8002b0c <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	f241 3288 	movw	r2, #5000	; 0x1388
 8004338:	4293      	cmp	r3, r2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e345      	b.n	80049cc <HAL_RCC_OscConfig+0x106c>
 8004340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004344:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004348:	2202      	movs	r2, #2
 800434a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004350:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	fa93 f2a3 	rbit	r2, r3
 800435a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800435e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004368:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800436c:	2202      	movs	r2, #2
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004374:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	fa93 f2a3 	rbit	r2, r3
 800437e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004382:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004386:	601a      	str	r2, [r3, #0]
  return result;
 8004388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800438c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004390:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004392:	fab3 f383 	clz	r3, r3
 8004396:	b2db      	uxtb	r3, r3
 8004398:	095b      	lsrs	r3, r3, #5
 800439a:	b2db      	uxtb	r3, r3
 800439c:	f043 0302 	orr.w	r3, r3, #2
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d102      	bne.n	80043ac <HAL_RCC_OscConfig+0xa4c>
 80043a6:	4b84      	ldr	r3, [pc, #528]	; (80045b8 <HAL_RCC_OscConfig+0xc58>)
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	e013      	b.n	80043d4 <HAL_RCC_OscConfig+0xa74>
 80043ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80043b4:	2202      	movs	r2, #2
 80043b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043bc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	fa93 f2a3 	rbit	r2, r3
 80043c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ca:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	4b79      	ldr	r3, [pc, #484]	; (80045b8 <HAL_RCC_OscConfig+0xc58>)
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043d8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80043dc:	2102      	movs	r1, #2
 80043de:	6011      	str	r1, [r2, #0]
 80043e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043e4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80043e8:	6812      	ldr	r2, [r2, #0]
 80043ea:	fa92 f1a2 	rbit	r1, r2
 80043ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043f2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80043f6:	6011      	str	r1, [r2, #0]
  return result;
 80043f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043fc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004400:	6812      	ldr	r2, [r2, #0]
 8004402:	fab2 f282 	clz	r2, r2
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	f002 021f 	and.w	r2, r2, #31
 8004412:	2101      	movs	r1, #1
 8004414:	fa01 f202 	lsl.w	r2, r1, r2
 8004418:	4013      	ands	r3, r2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d084      	beq.n	8004328 <HAL_RCC_OscConfig+0x9c8>
 800441e:	e07f      	b.n	8004520 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004420:	f7fe fb74 	bl	8002b0c <HAL_GetTick>
 8004424:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004428:	e00b      	b.n	8004442 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800442a:	f7fe fb6f 	bl	8002b0c <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	f241 3288 	movw	r2, #5000	; 0x1388
 800443a:	4293      	cmp	r3, r2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e2c4      	b.n	80049cc <HAL_RCC_OscConfig+0x106c>
 8004442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004446:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800444a:	2202      	movs	r2, #2
 800444c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004452:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	fa93 f2a3 	rbit	r2, r3
 800445c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004460:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800446a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800446e:	2202      	movs	r2, #2
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004476:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	fa93 f2a3 	rbit	r2, r3
 8004480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004484:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004488:	601a      	str	r2, [r3, #0]
  return result;
 800448a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800448e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004492:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004494:	fab3 f383 	clz	r3, r3
 8004498:	b2db      	uxtb	r3, r3
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	b2db      	uxtb	r3, r3
 800449e:	f043 0302 	orr.w	r3, r3, #2
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d102      	bne.n	80044ae <HAL_RCC_OscConfig+0xb4e>
 80044a8:	4b43      	ldr	r3, [pc, #268]	; (80045b8 <HAL_RCC_OscConfig+0xc58>)
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	e013      	b.n	80044d6 <HAL_RCC_OscConfig+0xb76>
 80044ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80044b6:	2202      	movs	r2, #2
 80044b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044be:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	fa93 f2a3 	rbit	r2, r3
 80044c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044cc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	4b39      	ldr	r3, [pc, #228]	; (80045b8 <HAL_RCC_OscConfig+0xc58>)
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044da:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80044de:	2102      	movs	r1, #2
 80044e0:	6011      	str	r1, [r2, #0]
 80044e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044e6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80044ea:	6812      	ldr	r2, [r2, #0]
 80044ec:	fa92 f1a2 	rbit	r1, r2
 80044f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044f4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80044f8:	6011      	str	r1, [r2, #0]
  return result;
 80044fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044fe:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004502:	6812      	ldr	r2, [r2, #0]
 8004504:	fab2 f282 	clz	r2, r2
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	f002 021f 	and.w	r2, r2, #31
 8004514:	2101      	movs	r1, #1
 8004516:	fa01 f202 	lsl.w	r2, r1, r2
 800451a:	4013      	ands	r3, r2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d184      	bne.n	800442a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004520:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004524:	2b01      	cmp	r3, #1
 8004526:	d105      	bne.n	8004534 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004528:	4b23      	ldr	r3, [pc, #140]	; (80045b8 <HAL_RCC_OscConfig+0xc58>)
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	4a22      	ldr	r2, [pc, #136]	; (80045b8 <HAL_RCC_OscConfig+0xc58>)
 800452e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004532:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004538:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 8242 	beq.w	80049ca <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004546:	4b1c      	ldr	r3, [pc, #112]	; (80045b8 <HAL_RCC_OscConfig+0xc58>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	2b08      	cmp	r3, #8
 8004550:	f000 8213 	beq.w	800497a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004558:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	2b02      	cmp	r3, #2
 8004562:	f040 8162 	bne.w	800482a <HAL_RCC_OscConfig+0xeca>
 8004566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800456a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800456e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004572:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004578:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	fa93 f2a3 	rbit	r2, r3
 8004582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004586:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800458a:	601a      	str	r2, [r3, #0]
  return result;
 800458c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004590:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004594:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004596:	fab3 f383 	clz	r3, r3
 800459a:	b2db      	uxtb	r3, r3
 800459c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80045a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	461a      	mov	r2, r3
 80045a8:	2300      	movs	r3, #0
 80045aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ac:	f7fe faae 	bl	8002b0c <HAL_GetTick>
 80045b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045b4:	e00c      	b.n	80045d0 <HAL_RCC_OscConfig+0xc70>
 80045b6:	bf00      	nop
 80045b8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045bc:	f7fe faa6 	bl	8002b0c <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e1fd      	b.n	80049cc <HAL_RCC_OscConfig+0x106c>
 80045d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80045d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	fa93 f2a3 	rbit	r2, r3
 80045ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045f0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80045f4:	601a      	str	r2, [r3, #0]
  return result;
 80045f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045fa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80045fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004600:	fab3 f383 	clz	r3, r3
 8004604:	b2db      	uxtb	r3, r3
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	b2db      	uxtb	r3, r3
 800460a:	f043 0301 	orr.w	r3, r3, #1
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b01      	cmp	r3, #1
 8004612:	d102      	bne.n	800461a <HAL_RCC_OscConfig+0xcba>
 8004614:	4bb0      	ldr	r3, [pc, #704]	; (80048d8 <HAL_RCC_OscConfig+0xf78>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	e027      	b.n	800466a <HAL_RCC_OscConfig+0xd0a>
 800461a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800461e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004622:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004626:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800462c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	fa93 f2a3 	rbit	r2, r3
 8004636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800463a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004644:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004648:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004652:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	fa93 f2a3 	rbit	r2, r3
 800465c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004660:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	4b9c      	ldr	r3, [pc, #624]	; (80048d8 <HAL_RCC_OscConfig+0xf78>)
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800466e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004672:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004676:	6011      	str	r1, [r2, #0]
 8004678:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800467c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004680:	6812      	ldr	r2, [r2, #0]
 8004682:	fa92 f1a2 	rbit	r1, r2
 8004686:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800468a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800468e:	6011      	str	r1, [r2, #0]
  return result;
 8004690:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004694:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004698:	6812      	ldr	r2, [r2, #0]
 800469a:	fab2 f282 	clz	r2, r2
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	f042 0220 	orr.w	r2, r2, #32
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	f002 021f 	and.w	r2, r2, #31
 80046aa:	2101      	movs	r1, #1
 80046ac:	fa01 f202 	lsl.w	r2, r1, r2
 80046b0:	4013      	ands	r3, r2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d182      	bne.n	80045bc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046b6:	4b88      	ldr	r3, [pc, #544]	; (80048d8 <HAL_RCC_OscConfig+0xf78>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80046be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80046ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	430b      	orrs	r3, r1
 80046d8:	497f      	ldr	r1, [pc, #508]	; (80048d8 <HAL_RCC_OscConfig+0xf78>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	604b      	str	r3, [r1, #4]
 80046de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80046e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	fa93 f2a3 	rbit	r2, r3
 80046fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046fe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004702:	601a      	str	r2, [r3, #0]
  return result;
 8004704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004708:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800470c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800470e:	fab3 f383 	clz	r3, r3
 8004712:	b2db      	uxtb	r3, r3
 8004714:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004718:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	461a      	mov	r2, r3
 8004720:	2301      	movs	r3, #1
 8004722:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004724:	f7fe f9f2 	bl	8002b0c <HAL_GetTick>
 8004728:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800472c:	e009      	b.n	8004742 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800472e:	f7fe f9ed 	bl	8002b0c <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e144      	b.n	80049cc <HAL_RCC_OscConfig+0x106c>
 8004742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004746:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800474a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800474e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004754:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	fa93 f2a3 	rbit	r2, r3
 800475e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004762:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004766:	601a      	str	r2, [r3, #0]
  return result;
 8004768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800476c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004770:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004772:	fab3 f383 	clz	r3, r3
 8004776:	b2db      	uxtb	r3, r3
 8004778:	095b      	lsrs	r3, r3, #5
 800477a:	b2db      	uxtb	r3, r3
 800477c:	f043 0301 	orr.w	r3, r3, #1
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b01      	cmp	r3, #1
 8004784:	d102      	bne.n	800478c <HAL_RCC_OscConfig+0xe2c>
 8004786:	4b54      	ldr	r3, [pc, #336]	; (80048d8 <HAL_RCC_OscConfig+0xf78>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	e027      	b.n	80047dc <HAL_RCC_OscConfig+0xe7c>
 800478c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004790:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004794:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004798:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800479e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	fa93 f2a3 	rbit	r2, r3
 80047a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80047ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	fa93 f2a3 	rbit	r2, r3
 80047ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	4b3f      	ldr	r3, [pc, #252]	; (80048d8 <HAL_RCC_OscConfig+0xf78>)
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047e0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80047e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80047e8:	6011      	str	r1, [r2, #0]
 80047ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047ee:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80047f2:	6812      	ldr	r2, [r2, #0]
 80047f4:	fa92 f1a2 	rbit	r1, r2
 80047f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047fc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004800:	6011      	str	r1, [r2, #0]
  return result;
 8004802:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004806:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800480a:	6812      	ldr	r2, [r2, #0]
 800480c:	fab2 f282 	clz	r2, r2
 8004810:	b2d2      	uxtb	r2, r2
 8004812:	f042 0220 	orr.w	r2, r2, #32
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	f002 021f 	and.w	r2, r2, #31
 800481c:	2101      	movs	r1, #1
 800481e:	fa01 f202 	lsl.w	r2, r1, r2
 8004822:	4013      	ands	r3, r2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d082      	beq.n	800472e <HAL_RCC_OscConfig+0xdce>
 8004828:	e0cf      	b.n	80049ca <HAL_RCC_OscConfig+0x106a>
 800482a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800482e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004832:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004836:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800483c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	fa93 f2a3 	rbit	r2, r3
 8004846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800484a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800484e:	601a      	str	r2, [r3, #0]
  return result;
 8004850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004854:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004858:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800485a:	fab3 f383 	clz	r3, r3
 800485e:	b2db      	uxtb	r3, r3
 8004860:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004864:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	461a      	mov	r2, r3
 800486c:	2300      	movs	r3, #0
 800486e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004870:	f7fe f94c 	bl	8002b0c <HAL_GetTick>
 8004874:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004878:	e009      	b.n	800488e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800487a:	f7fe f947 	bl	8002b0c <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e09e      	b.n	80049cc <HAL_RCC_OscConfig+0x106c>
 800488e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004892:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004896:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800489a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	fa93 f2a3 	rbit	r2, r3
 80048aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ae:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80048b2:	601a      	str	r2, [r3, #0]
  return result;
 80048b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80048bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048be:	fab3 f383 	clz	r3, r3
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	095b      	lsrs	r3, r3, #5
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	f043 0301 	orr.w	r3, r3, #1
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d104      	bne.n	80048dc <HAL_RCC_OscConfig+0xf7c>
 80048d2:	4b01      	ldr	r3, [pc, #4]	; (80048d8 <HAL_RCC_OscConfig+0xf78>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	e029      	b.n	800492c <HAL_RCC_OscConfig+0xfcc>
 80048d8:	40021000 	.word	0x40021000
 80048dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048e0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80048e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	fa93 f2a3 	rbit	r2, r3
 80048f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048fc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004906:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800490a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004914:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	fa93 f2a3 	rbit	r2, r3
 800491e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004922:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	4b2b      	ldr	r3, [pc, #172]	; (80049d8 <HAL_RCC_OscConfig+0x1078>)
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004930:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004934:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004938:	6011      	str	r1, [r2, #0]
 800493a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800493e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004942:	6812      	ldr	r2, [r2, #0]
 8004944:	fa92 f1a2 	rbit	r1, r2
 8004948:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800494c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004950:	6011      	str	r1, [r2, #0]
  return result;
 8004952:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004956:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800495a:	6812      	ldr	r2, [r2, #0]
 800495c:	fab2 f282 	clz	r2, r2
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	f042 0220 	orr.w	r2, r2, #32
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	f002 021f 	and.w	r2, r2, #31
 800496c:	2101      	movs	r1, #1
 800496e:	fa01 f202 	lsl.w	r2, r1, r2
 8004972:	4013      	ands	r3, r2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d180      	bne.n	800487a <HAL_RCC_OscConfig+0xf1a>
 8004978:	e027      	b.n	80049ca <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800497a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800497e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e01e      	b.n	80049cc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800498e:	4b12      	ldr	r3, [pc, #72]	; (80049d8 <HAL_RCC_OscConfig+0x1078>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004996:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800499a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800499e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d10b      	bne.n	80049c6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80049ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80049b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80049b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d001      	beq.n	80049ca <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e000      	b.n	80049cc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	40021000 	.word	0x40021000

080049dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b09e      	sub	sp, #120	; 0x78
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e162      	b.n	8004cba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049f4:	4b90      	ldr	r3, [pc, #576]	; (8004c38 <HAL_RCC_ClockConfig+0x25c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d910      	bls.n	8004a24 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a02:	4b8d      	ldr	r3, [pc, #564]	; (8004c38 <HAL_RCC_ClockConfig+0x25c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f023 0207 	bic.w	r2, r3, #7
 8004a0a:	498b      	ldr	r1, [pc, #556]	; (8004c38 <HAL_RCC_ClockConfig+0x25c>)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a12:	4b89      	ldr	r3, [pc, #548]	; (8004c38 <HAL_RCC_ClockConfig+0x25c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d001      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e14a      	b.n	8004cba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d008      	beq.n	8004a42 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a30:	4b82      	ldr	r3, [pc, #520]	; (8004c3c <HAL_RCC_ClockConfig+0x260>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	497f      	ldr	r1, [pc, #508]	; (8004c3c <HAL_RCC_ClockConfig+0x260>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 80dc 	beq.w	8004c08 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d13c      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xf6>
 8004a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a5c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a60:	fa93 f3a3 	rbit	r3, r3
 8004a64:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a68:	fab3 f383 	clz	r3, r3
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	095b      	lsrs	r3, r3, #5
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	f043 0301 	orr.w	r3, r3, #1
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d102      	bne.n	8004a82 <HAL_RCC_ClockConfig+0xa6>
 8004a7c:	4b6f      	ldr	r3, [pc, #444]	; (8004c3c <HAL_RCC_ClockConfig+0x260>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	e00f      	b.n	8004aa2 <HAL_RCC_ClockConfig+0xc6>
 8004a82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a8a:	fa93 f3a3 	rbit	r3, r3
 8004a8e:	667b      	str	r3, [r7, #100]	; 0x64
 8004a90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a94:	663b      	str	r3, [r7, #96]	; 0x60
 8004a96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a98:	fa93 f3a3 	rbit	r3, r3
 8004a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a9e:	4b67      	ldr	r3, [pc, #412]	; (8004c3c <HAL_RCC_ClockConfig+0x260>)
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004aa6:	65ba      	str	r2, [r7, #88]	; 0x58
 8004aa8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004aaa:	fa92 f2a2 	rbit	r2, r2
 8004aae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004ab0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ab2:	fab2 f282 	clz	r2, r2
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	f042 0220 	orr.w	r2, r2, #32
 8004abc:	b2d2      	uxtb	r2, r2
 8004abe:	f002 021f 	and.w	r2, r2, #31
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ac8:	4013      	ands	r3, r2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d17b      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e0f3      	b.n	8004cba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d13c      	bne.n	8004b54 <HAL_RCC_ClockConfig+0x178>
 8004ada:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ade:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ae2:	fa93 f3a3 	rbit	r3, r3
 8004ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aea:	fab3 f383 	clz	r3, r3
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	095b      	lsrs	r3, r3, #5
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	f043 0301 	orr.w	r3, r3, #1
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d102      	bne.n	8004b04 <HAL_RCC_ClockConfig+0x128>
 8004afe:	4b4f      	ldr	r3, [pc, #316]	; (8004c3c <HAL_RCC_ClockConfig+0x260>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	e00f      	b.n	8004b24 <HAL_RCC_ClockConfig+0x148>
 8004b04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b0c:	fa93 f3a3 	rbit	r3, r3
 8004b10:	647b      	str	r3, [r7, #68]	; 0x44
 8004b12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b16:	643b      	str	r3, [r7, #64]	; 0x40
 8004b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b1a:	fa93 f3a3 	rbit	r3, r3
 8004b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b20:	4b46      	ldr	r3, [pc, #280]	; (8004c3c <HAL_RCC_ClockConfig+0x260>)
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b28:	63ba      	str	r2, [r7, #56]	; 0x38
 8004b2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b2c:	fa92 f2a2 	rbit	r2, r2
 8004b30:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004b32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b34:	fab2 f282 	clz	r2, r2
 8004b38:	b2d2      	uxtb	r2, r2
 8004b3a:	f042 0220 	orr.w	r2, r2, #32
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	f002 021f 	and.w	r2, r2, #31
 8004b44:	2101      	movs	r1, #1
 8004b46:	fa01 f202 	lsl.w	r2, r1, r2
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d13a      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e0b2      	b.n	8004cba <HAL_RCC_ClockConfig+0x2de>
 8004b54:	2302      	movs	r3, #2
 8004b56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5a:	fa93 f3a3 	rbit	r3, r3
 8004b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b62:	fab3 f383 	clz	r3, r3
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	095b      	lsrs	r3, r3, #5
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	f043 0301 	orr.w	r3, r3, #1
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d102      	bne.n	8004b7c <HAL_RCC_ClockConfig+0x1a0>
 8004b76:	4b31      	ldr	r3, [pc, #196]	; (8004c3c <HAL_RCC_ClockConfig+0x260>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	e00d      	b.n	8004b98 <HAL_RCC_ClockConfig+0x1bc>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b82:	fa93 f3a3 	rbit	r3, r3
 8004b86:	627b      	str	r3, [r7, #36]	; 0x24
 8004b88:	2302      	movs	r3, #2
 8004b8a:	623b      	str	r3, [r7, #32]
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	fa93 f3a3 	rbit	r3, r3
 8004b92:	61fb      	str	r3, [r7, #28]
 8004b94:	4b29      	ldr	r3, [pc, #164]	; (8004c3c <HAL_RCC_ClockConfig+0x260>)
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	2202      	movs	r2, #2
 8004b9a:	61ba      	str	r2, [r7, #24]
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	fa92 f2a2 	rbit	r2, r2
 8004ba2:	617a      	str	r2, [r7, #20]
  return result;
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	fab2 f282 	clz	r2, r2
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	f042 0220 	orr.w	r2, r2, #32
 8004bb0:	b2d2      	uxtb	r2, r2
 8004bb2:	f002 021f 	and.w	r2, r2, #31
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e079      	b.n	8004cba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bc6:	4b1d      	ldr	r3, [pc, #116]	; (8004c3c <HAL_RCC_ClockConfig+0x260>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f023 0203 	bic.w	r2, r3, #3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	491a      	ldr	r1, [pc, #104]	; (8004c3c <HAL_RCC_ClockConfig+0x260>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bd8:	f7fd ff98 	bl	8002b0c <HAL_GetTick>
 8004bdc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bde:	e00a      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be0:	f7fd ff94 	bl	8002b0c <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e061      	b.n	8004cba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf6:	4b11      	ldr	r3, [pc, #68]	; (8004c3c <HAL_RCC_ClockConfig+0x260>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f003 020c 	and.w	r2, r3, #12
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d1eb      	bne.n	8004be0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c08:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <HAL_RCC_ClockConfig+0x25c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d214      	bcs.n	8004c40 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c16:	4b08      	ldr	r3, [pc, #32]	; (8004c38 <HAL_RCC_ClockConfig+0x25c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f023 0207 	bic.w	r2, r3, #7
 8004c1e:	4906      	ldr	r1, [pc, #24]	; (8004c38 <HAL_RCC_ClockConfig+0x25c>)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c26:	4b04      	ldr	r3, [pc, #16]	; (8004c38 <HAL_RCC_ClockConfig+0x25c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d005      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e040      	b.n	8004cba <HAL_RCC_ClockConfig+0x2de>
 8004c38:	40022000 	.word	0x40022000
 8004c3c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d008      	beq.n	8004c5e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c4c:	4b1d      	ldr	r3, [pc, #116]	; (8004cc4 <HAL_RCC_ClockConfig+0x2e8>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	491a      	ldr	r1, [pc, #104]	; (8004cc4 <HAL_RCC_ClockConfig+0x2e8>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d009      	beq.n	8004c7e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c6a:	4b16      	ldr	r3, [pc, #88]	; (8004cc4 <HAL_RCC_ClockConfig+0x2e8>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	4912      	ldr	r1, [pc, #72]	; (8004cc4 <HAL_RCC_ClockConfig+0x2e8>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004c7e:	f000 f829 	bl	8004cd4 <HAL_RCC_GetSysClockFreq>
 8004c82:	4601      	mov	r1, r0
 8004c84:	4b0f      	ldr	r3, [pc, #60]	; (8004cc4 <HAL_RCC_ClockConfig+0x2e8>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c8c:	22f0      	movs	r2, #240	; 0xf0
 8004c8e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	fa92 f2a2 	rbit	r2, r2
 8004c96:	60fa      	str	r2, [r7, #12]
  return result;
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	fab2 f282 	clz	r2, r2
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	40d3      	lsrs	r3, r2
 8004ca2:	4a09      	ldr	r2, [pc, #36]	; (8004cc8 <HAL_RCC_ClockConfig+0x2ec>)
 8004ca4:	5cd3      	ldrb	r3, [r2, r3]
 8004ca6:	fa21 f303 	lsr.w	r3, r1, r3
 8004caa:	4a08      	ldr	r2, [pc, #32]	; (8004ccc <HAL_RCC_ClockConfig+0x2f0>)
 8004cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004cae:	4b08      	ldr	r3, [pc, #32]	; (8004cd0 <HAL_RCC_ClockConfig+0x2f4>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fd fee6 	bl	8002a84 <HAL_InitTick>
  
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3778      	adds	r7, #120	; 0x78
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	080077a4 	.word	0x080077a4
 8004ccc:	20000430 	.word	0x20000430
 8004cd0:	20000434 	.word	0x20000434

08004cd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b08b      	sub	sp, #44	; 0x2c
 8004cd8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	61fb      	str	r3, [r7, #28]
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61bb      	str	r3, [r7, #24]
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004cee:	4b29      	ldr	r3, [pc, #164]	; (8004d94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	f003 030c 	and.w	r3, r3, #12
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d002      	beq.n	8004d04 <HAL_RCC_GetSysClockFreq+0x30>
 8004cfe:	2b08      	cmp	r3, #8
 8004d00:	d003      	beq.n	8004d0a <HAL_RCC_GetSysClockFreq+0x36>
 8004d02:	e03c      	b.n	8004d7e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d04:	4b24      	ldr	r3, [pc, #144]	; (8004d98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004d06:	623b      	str	r3, [r7, #32]
      break;
 8004d08:	e03c      	b.n	8004d84 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004d10:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004d14:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	fa92 f2a2 	rbit	r2, r2
 8004d1c:	607a      	str	r2, [r7, #4]
  return result;
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	fab2 f282 	clz	r2, r2
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	40d3      	lsrs	r3, r2
 8004d28:	4a1c      	ldr	r2, [pc, #112]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d2a:	5cd3      	ldrb	r3, [r2, r3]
 8004d2c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004d2e:	4b19      	ldr	r3, [pc, #100]	; (8004d94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	220f      	movs	r2, #15
 8004d38:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	fa92 f2a2 	rbit	r2, r2
 8004d40:	60fa      	str	r2, [r7, #12]
  return result;
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	fab2 f282 	clz	r2, r2
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	40d3      	lsrs	r3, r2
 8004d4c:	4a14      	ldr	r2, [pc, #80]	; (8004da0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004d4e:	5cd3      	ldrb	r3, [r2, r3]
 8004d50:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d008      	beq.n	8004d6e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d5c:	4a0e      	ldr	r2, [pc, #56]	; (8004d98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	fb02 f303 	mul.w	r3, r2, r3
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6c:	e004      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	4a0c      	ldr	r2, [pc, #48]	; (8004da4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d72:	fb02 f303 	mul.w	r3, r2, r3
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	623b      	str	r3, [r7, #32]
      break;
 8004d7c:	e002      	b.n	8004d84 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d7e:	4b06      	ldr	r3, [pc, #24]	; (8004d98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004d80:	623b      	str	r3, [r7, #32]
      break;
 8004d82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d84:	6a3b      	ldr	r3, [r7, #32]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	372c      	adds	r7, #44	; 0x2c
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	40021000 	.word	0x40021000
 8004d98:	007a1200 	.word	0x007a1200
 8004d9c:	080077bc 	.word	0x080077bc
 8004da0:	080077cc 	.word	0x080077cc
 8004da4:	003d0900 	.word	0x003d0900

08004da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dac:	4b03      	ldr	r3, [pc, #12]	; (8004dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8004dae:	681b      	ldr	r3, [r3, #0]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	20000430 	.word	0x20000430

08004dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004dc6:	f7ff ffef 	bl	8004da8 <HAL_RCC_GetHCLKFreq>
 8004dca:	4601      	mov	r1, r0
 8004dcc:	4b0b      	ldr	r3, [pc, #44]	; (8004dfc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004dd4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004dd8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	fa92 f2a2 	rbit	r2, r2
 8004de0:	603a      	str	r2, [r7, #0]
  return result;
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	fab2 f282 	clz	r2, r2
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	40d3      	lsrs	r3, r2
 8004dec:	4a04      	ldr	r2, [pc, #16]	; (8004e00 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004dee:	5cd3      	ldrb	r3, [r2, r3]
 8004df0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004df4:	4618      	mov	r0, r3
 8004df6:	3708      	adds	r7, #8
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	080077b4 	.word	0x080077b4

08004e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004e0a:	f7ff ffcd 	bl	8004da8 <HAL_RCC_GetHCLKFreq>
 8004e0e:	4601      	mov	r1, r0
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004e18:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004e1c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	fa92 f2a2 	rbit	r2, r2
 8004e24:	603a      	str	r2, [r7, #0]
  return result;
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	fab2 f282 	clz	r2, r2
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	40d3      	lsrs	r3, r2
 8004e30:	4a04      	ldr	r2, [pc, #16]	; (8004e44 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004e32:	5cd3      	ldrb	r3, [r2, r3]
 8004e34:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	40021000 	.word	0x40021000
 8004e44:	080077b4 	.word	0x080077b4

08004e48 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b092      	sub	sp, #72	; 0x48
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 80d4 	beq.w	8005014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e6c:	4b4e      	ldr	r3, [pc, #312]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10e      	bne.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e78:	4b4b      	ldr	r3, [pc, #300]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	4a4a      	ldr	r2, [pc, #296]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e82:	61d3      	str	r3, [r2, #28]
 8004e84:	4b48      	ldr	r3, [pc, #288]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e8c:	60bb      	str	r3, [r7, #8]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e90:	2301      	movs	r3, #1
 8004e92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e96:	4b45      	ldr	r3, [pc, #276]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d118      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ea2:	4b42      	ldr	r3, [pc, #264]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a41      	ldr	r2, [pc, #260]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eae:	f7fd fe2d 	bl	8002b0c <HAL_GetTick>
 8004eb2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb6:	f7fd fe29 	bl	8002b0c <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b64      	cmp	r3, #100	; 0x64
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e14b      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec8:	4b38      	ldr	r3, [pc, #224]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0f0      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ed4:	4b34      	ldr	r3, [pc, #208]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004edc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 8084 	beq.w	8004fee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d07c      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ef4:	4b2c      	ldr	r3, [pc, #176]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004efc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004efe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	fa93 f3a3 	rbit	r3, r3
 8004f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f0e:	fab3 f383 	clz	r3, r3
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	461a      	mov	r2, r3
 8004f16:	4b26      	ldr	r3, [pc, #152]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	2301      	movs	r3, #1
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2a:	fa93 f3a3 	rbit	r3, r3
 8004f2e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f32:	fab3 f383 	clz	r3, r3
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	461a      	mov	r2, r3
 8004f3a:	4b1d      	ldr	r3, [pc, #116]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	461a      	mov	r2, r3
 8004f42:	2300      	movs	r3, #0
 8004f44:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f46:	4a18      	ldr	r2, [pc, #96]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f4a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d04b      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f56:	f7fd fdd9 	bl	8002b0c <HAL_GetTick>
 8004f5a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f5c:	e00a      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f5e:	f7fd fdd5 	bl	8002b0c <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e0f5      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004f74:	2302      	movs	r3, #2
 8004f76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	fa93 f3a3 	rbit	r3, r3
 8004f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f80:	2302      	movs	r3, #2
 8004f82:	623b      	str	r3, [r7, #32]
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	fa93 f3a3 	rbit	r3, r3
 8004f8a:	61fb      	str	r3, [r7, #28]
  return result;
 8004f8c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f8e:	fab3 f383 	clz	r3, r3
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	095b      	lsrs	r3, r3, #5
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	f043 0302 	orr.w	r3, r3, #2
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d108      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004fa2:	4b01      	ldr	r3, [pc, #4]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	e00d      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	40007000 	.word	0x40007000
 8004fb0:	10908100 	.word	0x10908100
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	fa93 f3a3 	rbit	r3, r3
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	4b69      	ldr	r3, [pc, #420]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	613a      	str	r2, [r7, #16]
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	fa92 f2a2 	rbit	r2, r2
 8004fce:	60fa      	str	r2, [r7, #12]
  return result;
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	fab2 f282 	clz	r2, r2
 8004fd6:	b2d2      	uxtb	r2, r2
 8004fd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	f002 021f 	and.w	r2, r2, #31
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8004fe8:	4013      	ands	r3, r2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0b7      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004fee:	4b5e      	ldr	r3, [pc, #376]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	495b      	ldr	r1, [pc, #364]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005000:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005004:	2b01      	cmp	r3, #1
 8005006:	d105      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005008:	4b57      	ldr	r3, [pc, #348]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	4a56      	ldr	r2, [pc, #344]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800500e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005012:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	2b00      	cmp	r3, #0
 800501e:	d008      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005020:	4b51      	ldr	r3, [pc, #324]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005024:	f023 0203 	bic.w	r2, r3, #3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	494e      	ldr	r1, [pc, #312]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800502e:	4313      	orrs	r3, r2
 8005030:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0320 	and.w	r3, r3, #32
 800503a:	2b00      	cmp	r3, #0
 800503c:	d008      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800503e:	4b4a      	ldr	r3, [pc, #296]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005042:	f023 0210 	bic.w	r2, r3, #16
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	4947      	ldr	r1, [pc, #284]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800504c:	4313      	orrs	r3, r2
 800504e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d008      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800505c:	4b42      	ldr	r3, [pc, #264]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005068:	493f      	ldr	r1, [pc, #252]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800506a:	4313      	orrs	r3, r2
 800506c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005076:	2b00      	cmp	r3, #0
 8005078:	d008      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800507a:	4b3b      	ldr	r3, [pc, #236]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507e:	f023 0220 	bic.w	r2, r3, #32
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	4938      	ldr	r1, [pc, #224]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005088:	4313      	orrs	r3, r2
 800508a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d008      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005098:	4b33      	ldr	r3, [pc, #204]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800509a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	4930      	ldr	r1, [pc, #192]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d008      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050b6:	4b2c      	ldr	r3, [pc, #176]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	4929      	ldr	r1, [pc, #164]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80050d4:	4b24      	ldr	r3, [pc, #144]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80050d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	4921      	ldr	r1, [pc, #132]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d008      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80050f2:	4b1d      	ldr	r3, [pc, #116]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	491a      	ldr	r1, [pc, #104]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005100:	4313      	orrs	r3, r2
 8005102:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d008      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005110:	4b15      	ldr	r3, [pc, #84]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005114:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	4912      	ldr	r1, [pc, #72]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800511e:	4313      	orrs	r3, r2
 8005120:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d008      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800512e:	4b0e      	ldr	r3, [pc, #56]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005132:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513a:	490b      	ldr	r1, [pc, #44]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800513c:	4313      	orrs	r3, r2
 800513e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d008      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800514c:	4b06      	ldr	r3, [pc, #24]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800514e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005150:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	4903      	ldr	r1, [pc, #12]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800515a:	4313      	orrs	r3, r2
 800515c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3748      	adds	r7, #72	; 0x48
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	40021000 	.word	0x40021000

0800516c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e049      	b.n	8005212 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d106      	bne.n	8005198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fd fac8 	bl	8002728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3304      	adds	r3, #4
 80051a8:	4619      	mov	r1, r3
 80051aa:	4610      	mov	r0, r2
 80051ac:	f000 fcf8 	bl	8005ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
	...

0800521c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b01      	cmp	r3, #1
 800522e:	d001      	beq.n	8005234 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e03b      	b.n	80052ac <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0201 	orr.w	r2, r2, #1
 800524a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a19      	ldr	r2, [pc, #100]	; (80052b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d009      	beq.n	800526a <HAL_TIM_Base_Start_IT+0x4e>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800525e:	d004      	beq.n	800526a <HAL_TIM_Base_Start_IT+0x4e>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a15      	ldr	r2, [pc, #84]	; (80052bc <HAL_TIM_Base_Start_IT+0xa0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d115      	bne.n	8005296 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	4b13      	ldr	r3, [pc, #76]	; (80052c0 <HAL_TIM_Base_Start_IT+0xa4>)
 8005272:	4013      	ands	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b06      	cmp	r3, #6
 800527a:	d015      	beq.n	80052a8 <HAL_TIM_Base_Start_IT+0x8c>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005282:	d011      	beq.n	80052a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0201 	orr.w	r2, r2, #1
 8005292:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005294:	e008      	b.n	80052a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 0201 	orr.w	r2, r2, #1
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	e000      	b.n	80052aa <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	40012c00 	.word	0x40012c00
 80052bc:	40014000 	.word	0x40014000
 80052c0:	00010007 	.word	0x00010007

080052c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e049      	b.n	800536a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d106      	bne.n	80052f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f841 	bl	8005372 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3304      	adds	r3, #4
 8005300:	4619      	mov	r1, r3
 8005302:	4610      	mov	r0, r2
 8005304:	f000 fc4c 	bl	8005ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
	...

08005388 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d109      	bne.n	80053ac <HAL_TIM_PWM_Start+0x24>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	bf14      	ite	ne
 80053a4:	2301      	movne	r3, #1
 80053a6:	2300      	moveq	r3, #0
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	e03c      	b.n	8005426 <HAL_TIM_PWM_Start+0x9e>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d109      	bne.n	80053c6 <HAL_TIM_PWM_Start+0x3e>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	bf14      	ite	ne
 80053be:	2301      	movne	r3, #1
 80053c0:	2300      	moveq	r3, #0
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	e02f      	b.n	8005426 <HAL_TIM_PWM_Start+0x9e>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d109      	bne.n	80053e0 <HAL_TIM_PWM_Start+0x58>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	bf14      	ite	ne
 80053d8:	2301      	movne	r3, #1
 80053da:	2300      	moveq	r3, #0
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	e022      	b.n	8005426 <HAL_TIM_PWM_Start+0x9e>
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	2b0c      	cmp	r3, #12
 80053e4:	d109      	bne.n	80053fa <HAL_TIM_PWM_Start+0x72>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	bf14      	ite	ne
 80053f2:	2301      	movne	r3, #1
 80053f4:	2300      	moveq	r3, #0
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	e015      	b.n	8005426 <HAL_TIM_PWM_Start+0x9e>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b10      	cmp	r3, #16
 80053fe:	d109      	bne.n	8005414 <HAL_TIM_PWM_Start+0x8c>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b01      	cmp	r3, #1
 800540a:	bf14      	ite	ne
 800540c:	2301      	movne	r3, #1
 800540e:	2300      	moveq	r3, #0
 8005410:	b2db      	uxtb	r3, r3
 8005412:	e008      	b.n	8005426 <HAL_TIM_PWM_Start+0x9e>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b01      	cmp	r3, #1
 800541e:	bf14      	ite	ne
 8005420:	2301      	movne	r3, #1
 8005422:	2300      	moveq	r3, #0
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e083      	b.n	8005536 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d104      	bne.n	800543e <HAL_TIM_PWM_Start+0xb6>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800543c:	e023      	b.n	8005486 <HAL_TIM_PWM_Start+0xfe>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b04      	cmp	r3, #4
 8005442:	d104      	bne.n	800544e <HAL_TIM_PWM_Start+0xc6>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800544c:	e01b      	b.n	8005486 <HAL_TIM_PWM_Start+0xfe>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b08      	cmp	r3, #8
 8005452:	d104      	bne.n	800545e <HAL_TIM_PWM_Start+0xd6>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800545c:	e013      	b.n	8005486 <HAL_TIM_PWM_Start+0xfe>
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b0c      	cmp	r3, #12
 8005462:	d104      	bne.n	800546e <HAL_TIM_PWM_Start+0xe6>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800546c:	e00b      	b.n	8005486 <HAL_TIM_PWM_Start+0xfe>
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b10      	cmp	r3, #16
 8005472:	d104      	bne.n	800547e <HAL_TIM_PWM_Start+0xf6>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800547c:	e003      	b.n	8005486 <HAL_TIM_PWM_Start+0xfe>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2202      	movs	r2, #2
 8005482:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2201      	movs	r2, #1
 800548c:	6839      	ldr	r1, [r7, #0]
 800548e:	4618      	mov	r0, r3
 8005490:	f000 ff34 	bl	80062fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a29      	ldr	r2, [pc, #164]	; (8005540 <HAL_TIM_PWM_Start+0x1b8>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d00e      	beq.n	80054bc <HAL_TIM_PWM_Start+0x134>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a28      	ldr	r2, [pc, #160]	; (8005544 <HAL_TIM_PWM_Start+0x1bc>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d009      	beq.n	80054bc <HAL_TIM_PWM_Start+0x134>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a26      	ldr	r2, [pc, #152]	; (8005548 <HAL_TIM_PWM_Start+0x1c0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d004      	beq.n	80054bc <HAL_TIM_PWM_Start+0x134>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a25      	ldr	r2, [pc, #148]	; (800554c <HAL_TIM_PWM_Start+0x1c4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d101      	bne.n	80054c0 <HAL_TIM_PWM_Start+0x138>
 80054bc:	2301      	movs	r3, #1
 80054be:	e000      	b.n	80054c2 <HAL_TIM_PWM_Start+0x13a>
 80054c0:	2300      	movs	r3, #0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d007      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a19      	ldr	r2, [pc, #100]	; (8005540 <HAL_TIM_PWM_Start+0x1b8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d009      	beq.n	80054f4 <HAL_TIM_PWM_Start+0x16c>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e8:	d004      	beq.n	80054f4 <HAL_TIM_PWM_Start+0x16c>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a15      	ldr	r2, [pc, #84]	; (8005544 <HAL_TIM_PWM_Start+0x1bc>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d115      	bne.n	8005520 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689a      	ldr	r2, [r3, #8]
 80054fa:	4b15      	ldr	r3, [pc, #84]	; (8005550 <HAL_TIM_PWM_Start+0x1c8>)
 80054fc:	4013      	ands	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2b06      	cmp	r3, #6
 8005504:	d015      	beq.n	8005532 <HAL_TIM_PWM_Start+0x1aa>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800550c:	d011      	beq.n	8005532 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f042 0201 	orr.w	r2, r2, #1
 800551c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800551e:	e008      	b.n	8005532 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0201 	orr.w	r2, r2, #1
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	e000      	b.n	8005534 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005532:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	40012c00 	.word	0x40012c00
 8005544:	40014000 	.word	0x40014000
 8005548:	40014400 	.word	0x40014400
 800554c:	40014800 	.word	0x40014800
 8005550:	00010007 	.word	0x00010007

08005554 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b02      	cmp	r3, #2
 8005568:	d122      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b02      	cmp	r3, #2
 8005576:	d11b      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f06f 0202 	mvn.w	r2, #2
 8005580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fae3 	bl	8005b62 <HAL_TIM_IC_CaptureCallback>
 800559c:	e005      	b.n	80055aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fad5 	bl	8005b4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fae6 	bl	8005b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f003 0304 	and.w	r3, r3, #4
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d122      	bne.n	8005604 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b04      	cmp	r3, #4
 80055ca:	d11b      	bne.n	8005604 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f06f 0204 	mvn.w	r2, #4
 80055d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2202      	movs	r2, #2
 80055da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fab9 	bl	8005b62 <HAL_TIM_IC_CaptureCallback>
 80055f0:	e005      	b.n	80055fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 faab 	bl	8005b4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 fabc 	bl	8005b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	f003 0308 	and.w	r3, r3, #8
 800560e:	2b08      	cmp	r3, #8
 8005610:	d122      	bne.n	8005658 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f003 0308 	and.w	r3, r3, #8
 800561c:	2b08      	cmp	r3, #8
 800561e:	d11b      	bne.n	8005658 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f06f 0208 	mvn.w	r2, #8
 8005628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2204      	movs	r2, #4
 800562e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	f003 0303 	and.w	r3, r3, #3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 fa8f 	bl	8005b62 <HAL_TIM_IC_CaptureCallback>
 8005644:	e005      	b.n	8005652 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fa81 	bl	8005b4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 fa92 	bl	8005b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f003 0310 	and.w	r3, r3, #16
 8005662:	2b10      	cmp	r3, #16
 8005664:	d122      	bne.n	80056ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f003 0310 	and.w	r3, r3, #16
 8005670:	2b10      	cmp	r3, #16
 8005672:	d11b      	bne.n	80056ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f06f 0210 	mvn.w	r2, #16
 800567c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2208      	movs	r2, #8
 8005682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fa65 	bl	8005b62 <HAL_TIM_IC_CaptureCallback>
 8005698:	e005      	b.n	80056a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fa57 	bl	8005b4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fa68 	bl	8005b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d10e      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d107      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f06f 0201 	mvn.w	r2, #1
 80056d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7fb fdbe 	bl	8001254 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e2:	2b80      	cmp	r3, #128	; 0x80
 80056e4:	d10e      	bne.n	8005704 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f0:	2b80      	cmp	r3, #128	; 0x80
 80056f2:	d107      	bne.n	8005704 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fe92 	bl	8006428 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800570e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005712:	d10e      	bne.n	8005732 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571e:	2b80      	cmp	r3, #128	; 0x80
 8005720:	d107      	bne.n	8005732 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800572a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 fe85 	bl	800643c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573c:	2b40      	cmp	r3, #64	; 0x40
 800573e:	d10e      	bne.n	800575e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574a:	2b40      	cmp	r3, #64	; 0x40
 800574c:	d107      	bne.n	800575e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fa16 	bl	8005b8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	f003 0320 	and.w	r3, r3, #32
 8005768:	2b20      	cmp	r3, #32
 800576a:	d10e      	bne.n	800578a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b20      	cmp	r3, #32
 8005778:	d107      	bne.n	800578a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f06f 0220 	mvn.w	r2, #32
 8005782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fe45 	bl	8006414 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800578a:	bf00      	nop
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057ae:	2302      	movs	r3, #2
 80057b0:	e0ff      	b.n	80059b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b14      	cmp	r3, #20
 80057be:	f200 80f0 	bhi.w	80059a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80057c2:	a201      	add	r2, pc, #4	; (adr r2, 80057c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c8:	0800581d 	.word	0x0800581d
 80057cc:	080059a3 	.word	0x080059a3
 80057d0:	080059a3 	.word	0x080059a3
 80057d4:	080059a3 	.word	0x080059a3
 80057d8:	0800585d 	.word	0x0800585d
 80057dc:	080059a3 	.word	0x080059a3
 80057e0:	080059a3 	.word	0x080059a3
 80057e4:	080059a3 	.word	0x080059a3
 80057e8:	0800589f 	.word	0x0800589f
 80057ec:	080059a3 	.word	0x080059a3
 80057f0:	080059a3 	.word	0x080059a3
 80057f4:	080059a3 	.word	0x080059a3
 80057f8:	080058df 	.word	0x080058df
 80057fc:	080059a3 	.word	0x080059a3
 8005800:	080059a3 	.word	0x080059a3
 8005804:	080059a3 	.word	0x080059a3
 8005808:	08005921 	.word	0x08005921
 800580c:	080059a3 	.word	0x080059a3
 8005810:	080059a3 	.word	0x080059a3
 8005814:	080059a3 	.word	0x080059a3
 8005818:	08005961 	.word	0x08005961
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68b9      	ldr	r1, [r7, #8]
 8005822:	4618      	mov	r0, r3
 8005824:	f000 fa2a 	bl	8005c7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699a      	ldr	r2, [r3, #24]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0208 	orr.w	r2, r2, #8
 8005836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0204 	bic.w	r2, r2, #4
 8005846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6999      	ldr	r1, [r3, #24]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	691a      	ldr	r2, [r3, #16]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	619a      	str	r2, [r3, #24]
      break;
 800585a:	e0a5      	b.n	80059a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68b9      	ldr	r1, [r7, #8]
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fa90 	bl	8005d88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6999      	ldr	r1, [r3, #24]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	021a      	lsls	r2, r3, #8
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	619a      	str	r2, [r3, #24]
      break;
 800589c:	e084      	b.n	80059a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68b9      	ldr	r1, [r7, #8]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 faef 	bl	8005e88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f042 0208 	orr.w	r2, r2, #8
 80058b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69da      	ldr	r2, [r3, #28]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0204 	bic.w	r2, r2, #4
 80058c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69d9      	ldr	r1, [r3, #28]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	691a      	ldr	r2, [r3, #16]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	61da      	str	r2, [r3, #28]
      break;
 80058dc:	e064      	b.n	80059a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68b9      	ldr	r1, [r7, #8]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 fb4d 	bl	8005f84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69da      	ldr	r2, [r3, #28]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69da      	ldr	r2, [r3, #28]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69d9      	ldr	r1, [r3, #28]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	021a      	lsls	r2, r3, #8
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	61da      	str	r2, [r3, #28]
      break;
 800591e:	e043      	b.n	80059a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68b9      	ldr	r1, [r7, #8]
 8005926:	4618      	mov	r0, r3
 8005928:	f000 fb90 	bl	800604c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0208 	orr.w	r2, r2, #8
 800593a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0204 	bic.w	r2, r2, #4
 800594a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	691a      	ldr	r2, [r3, #16]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800595e:	e023      	b.n	80059a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68b9      	ldr	r1, [r7, #8]
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fbce 	bl	8006108 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800597a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800598a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	021a      	lsls	r2, r3, #8
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80059a0:	e002      	b.n	80059a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	75fb      	strb	r3, [r7, #23]
      break;
 80059a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop

080059bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d101      	bne.n	80059d8 <HAL_TIM_ConfigClockSource+0x1c>
 80059d4:	2302      	movs	r3, #2
 80059d6:	e0b6      	b.n	8005b46 <HAL_TIM_ConfigClockSource+0x18a>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a14:	d03e      	beq.n	8005a94 <HAL_TIM_ConfigClockSource+0xd8>
 8005a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a1a:	f200 8087 	bhi.w	8005b2c <HAL_TIM_ConfigClockSource+0x170>
 8005a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a22:	f000 8086 	beq.w	8005b32 <HAL_TIM_ConfigClockSource+0x176>
 8005a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a2a:	d87f      	bhi.n	8005b2c <HAL_TIM_ConfigClockSource+0x170>
 8005a2c:	2b70      	cmp	r3, #112	; 0x70
 8005a2e:	d01a      	beq.n	8005a66 <HAL_TIM_ConfigClockSource+0xaa>
 8005a30:	2b70      	cmp	r3, #112	; 0x70
 8005a32:	d87b      	bhi.n	8005b2c <HAL_TIM_ConfigClockSource+0x170>
 8005a34:	2b60      	cmp	r3, #96	; 0x60
 8005a36:	d050      	beq.n	8005ada <HAL_TIM_ConfigClockSource+0x11e>
 8005a38:	2b60      	cmp	r3, #96	; 0x60
 8005a3a:	d877      	bhi.n	8005b2c <HAL_TIM_ConfigClockSource+0x170>
 8005a3c:	2b50      	cmp	r3, #80	; 0x50
 8005a3e:	d03c      	beq.n	8005aba <HAL_TIM_ConfigClockSource+0xfe>
 8005a40:	2b50      	cmp	r3, #80	; 0x50
 8005a42:	d873      	bhi.n	8005b2c <HAL_TIM_ConfigClockSource+0x170>
 8005a44:	2b40      	cmp	r3, #64	; 0x40
 8005a46:	d058      	beq.n	8005afa <HAL_TIM_ConfigClockSource+0x13e>
 8005a48:	2b40      	cmp	r3, #64	; 0x40
 8005a4a:	d86f      	bhi.n	8005b2c <HAL_TIM_ConfigClockSource+0x170>
 8005a4c:	2b30      	cmp	r3, #48	; 0x30
 8005a4e:	d064      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0x15e>
 8005a50:	2b30      	cmp	r3, #48	; 0x30
 8005a52:	d86b      	bhi.n	8005b2c <HAL_TIM_ConfigClockSource+0x170>
 8005a54:	2b20      	cmp	r3, #32
 8005a56:	d060      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0x15e>
 8005a58:	2b20      	cmp	r3, #32
 8005a5a:	d867      	bhi.n	8005b2c <HAL_TIM_ConfigClockSource+0x170>
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d05c      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0x15e>
 8005a60:	2b10      	cmp	r3, #16
 8005a62:	d05a      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0x15e>
 8005a64:	e062      	b.n	8005b2c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6818      	ldr	r0, [r3, #0]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	6899      	ldr	r1, [r3, #8]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f000 fc21 	bl	80062bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	609a      	str	r2, [r3, #8]
      break;
 8005a92:	e04f      	b.n	8005b34 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6818      	ldr	r0, [r3, #0]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	6899      	ldr	r1, [r3, #8]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f000 fc0a 	bl	80062bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ab6:	609a      	str	r2, [r3, #8]
      break;
 8005ab8:	e03c      	b.n	8005b34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6818      	ldr	r0, [r3, #0]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	6859      	ldr	r1, [r3, #4]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f000 fb7e 	bl	80061c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2150      	movs	r1, #80	; 0x50
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fbd7 	bl	8006286 <TIM_ITRx_SetConfig>
      break;
 8005ad8:	e02c      	b.n	8005b34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6818      	ldr	r0, [r3, #0]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	6859      	ldr	r1, [r3, #4]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	f000 fb9d 	bl	8006226 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2160      	movs	r1, #96	; 0x60
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 fbc7 	bl	8006286 <TIM_ITRx_SetConfig>
      break;
 8005af8:	e01c      	b.n	8005b34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6818      	ldr	r0, [r3, #0]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	6859      	ldr	r1, [r3, #4]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	461a      	mov	r2, r3
 8005b08:	f000 fb5e 	bl	80061c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2140      	movs	r1, #64	; 0x40
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 fbb7 	bl	8006286 <TIM_ITRx_SetConfig>
      break;
 8005b18:	e00c      	b.n	8005b34 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4619      	mov	r1, r3
 8005b24:	4610      	mov	r0, r2
 8005b26:	f000 fbae 	bl	8006286 <TIM_ITRx_SetConfig>
      break;
 8005b2a:	e003      	b.n	8005b34 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b30:	e000      	b.n	8005b34 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005b32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b083      	sub	sp, #12
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b6a:	bf00      	nop
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b083      	sub	sp, #12
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b7e:	bf00      	nop
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b92:	bf00      	nop
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
	...

08005ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a2e      	ldr	r2, [pc, #184]	; (8005c6c <TIM_Base_SetConfig+0xcc>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d003      	beq.n	8005bc0 <TIM_Base_SetConfig+0x20>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bbe:	d108      	bne.n	8005bd2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a25      	ldr	r2, [pc, #148]	; (8005c6c <TIM_Base_SetConfig+0xcc>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d00f      	beq.n	8005bfa <TIM_Base_SetConfig+0x5a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be0:	d00b      	beq.n	8005bfa <TIM_Base_SetConfig+0x5a>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a22      	ldr	r2, [pc, #136]	; (8005c70 <TIM_Base_SetConfig+0xd0>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d007      	beq.n	8005bfa <TIM_Base_SetConfig+0x5a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a21      	ldr	r2, [pc, #132]	; (8005c74 <TIM_Base_SetConfig+0xd4>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d003      	beq.n	8005bfa <TIM_Base_SetConfig+0x5a>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a20      	ldr	r2, [pc, #128]	; (8005c78 <TIM_Base_SetConfig+0xd8>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d108      	bne.n	8005c0c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a0e      	ldr	r2, [pc, #56]	; (8005c6c <TIM_Base_SetConfig+0xcc>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d00b      	beq.n	8005c50 <TIM_Base_SetConfig+0xb0>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a0d      	ldr	r2, [pc, #52]	; (8005c70 <TIM_Base_SetConfig+0xd0>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d007      	beq.n	8005c50 <TIM_Base_SetConfig+0xb0>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a0c      	ldr	r2, [pc, #48]	; (8005c74 <TIM_Base_SetConfig+0xd4>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d003      	beq.n	8005c50 <TIM_Base_SetConfig+0xb0>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a0b      	ldr	r2, [pc, #44]	; (8005c78 <TIM_Base_SetConfig+0xd8>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d103      	bne.n	8005c58 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	691a      	ldr	r2, [r3, #16]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	615a      	str	r2, [r3, #20]
}
 8005c5e:	bf00      	nop
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	40012c00 	.word	0x40012c00
 8005c70:	40014000 	.word	0x40014000
 8005c74:	40014400 	.word	0x40014400
 8005c78:	40014800 	.word	0x40014800

08005c7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	f023 0201 	bic.w	r2, r3, #1
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 0303 	bic.w	r3, r3, #3
 8005cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f023 0302 	bic.w	r3, r3, #2
 8005cc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a28      	ldr	r2, [pc, #160]	; (8005d78 <TIM_OC1_SetConfig+0xfc>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d00b      	beq.n	8005cf4 <TIM_OC1_SetConfig+0x78>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a27      	ldr	r2, [pc, #156]	; (8005d7c <TIM_OC1_SetConfig+0x100>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d007      	beq.n	8005cf4 <TIM_OC1_SetConfig+0x78>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a26      	ldr	r2, [pc, #152]	; (8005d80 <TIM_OC1_SetConfig+0x104>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d003      	beq.n	8005cf4 <TIM_OC1_SetConfig+0x78>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a25      	ldr	r2, [pc, #148]	; (8005d84 <TIM_OC1_SetConfig+0x108>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d10c      	bne.n	8005d0e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f023 0308 	bic.w	r3, r3, #8
 8005cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f023 0304 	bic.w	r3, r3, #4
 8005d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a19      	ldr	r2, [pc, #100]	; (8005d78 <TIM_OC1_SetConfig+0xfc>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d00b      	beq.n	8005d2e <TIM_OC1_SetConfig+0xb2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a18      	ldr	r2, [pc, #96]	; (8005d7c <TIM_OC1_SetConfig+0x100>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d007      	beq.n	8005d2e <TIM_OC1_SetConfig+0xb2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a17      	ldr	r2, [pc, #92]	; (8005d80 <TIM_OC1_SetConfig+0x104>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d003      	beq.n	8005d2e <TIM_OC1_SetConfig+0xb2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a16      	ldr	r2, [pc, #88]	; (8005d84 <TIM_OC1_SetConfig+0x108>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d111      	bne.n	8005d52 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	621a      	str	r2, [r3, #32]
}
 8005d6c:	bf00      	nop
 8005d6e:	371c      	adds	r7, #28
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	40012c00 	.word	0x40012c00
 8005d7c:	40014000 	.word	0x40014000
 8005d80:	40014400 	.word	0x40014400
 8005d84:	40014800 	.word	0x40014800

08005d88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	f023 0210 	bic.w	r2, r3, #16
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	021b      	lsls	r3, r3, #8
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f023 0320 	bic.w	r3, r3, #32
 8005dd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	011b      	lsls	r3, r3, #4
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a24      	ldr	r2, [pc, #144]	; (8005e78 <TIM_OC2_SetConfig+0xf0>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d10d      	bne.n	8005e08 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005df2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	011b      	lsls	r3, r3, #4
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a1b      	ldr	r2, [pc, #108]	; (8005e78 <TIM_OC2_SetConfig+0xf0>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d00b      	beq.n	8005e28 <TIM_OC2_SetConfig+0xa0>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a1a      	ldr	r2, [pc, #104]	; (8005e7c <TIM_OC2_SetConfig+0xf4>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d007      	beq.n	8005e28 <TIM_OC2_SetConfig+0xa0>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a19      	ldr	r2, [pc, #100]	; (8005e80 <TIM_OC2_SetConfig+0xf8>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d003      	beq.n	8005e28 <TIM_OC2_SetConfig+0xa0>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a18      	ldr	r2, [pc, #96]	; (8005e84 <TIM_OC2_SetConfig+0xfc>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d113      	bne.n	8005e50 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e2e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e36:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	621a      	str	r2, [r3, #32]
}
 8005e6a:	bf00      	nop
 8005e6c:	371c      	adds	r7, #28
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	40012c00 	.word	0x40012c00
 8005e7c:	40014000 	.word	0x40014000
 8005e80:	40014400 	.word	0x40014400
 8005e84:	40014800 	.word	0x40014800

08005e88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0303 	bic.w	r3, r3, #3
 8005ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	021b      	lsls	r3, r3, #8
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a23      	ldr	r2, [pc, #140]	; (8005f74 <TIM_OC3_SetConfig+0xec>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d10d      	bne.n	8005f06 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ef0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	021b      	lsls	r3, r3, #8
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f04:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a1a      	ldr	r2, [pc, #104]	; (8005f74 <TIM_OC3_SetConfig+0xec>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d00b      	beq.n	8005f26 <TIM_OC3_SetConfig+0x9e>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a19      	ldr	r2, [pc, #100]	; (8005f78 <TIM_OC3_SetConfig+0xf0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d007      	beq.n	8005f26 <TIM_OC3_SetConfig+0x9e>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a18      	ldr	r2, [pc, #96]	; (8005f7c <TIM_OC3_SetConfig+0xf4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d003      	beq.n	8005f26 <TIM_OC3_SetConfig+0x9e>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a17      	ldr	r2, [pc, #92]	; (8005f80 <TIM_OC3_SetConfig+0xf8>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d113      	bne.n	8005f4e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	011b      	lsls	r3, r3, #4
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	621a      	str	r2, [r3, #32]
}
 8005f68:	bf00      	nop
 8005f6a:	371c      	adds	r7, #28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	40012c00 	.word	0x40012c00
 8005f78:	40014000 	.word	0x40014000
 8005f7c:	40014400 	.word	0x40014400
 8005f80:	40014800 	.word	0x40014800

08005f84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	021b      	lsls	r3, r3, #8
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	031b      	lsls	r3, r3, #12
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a16      	ldr	r2, [pc, #88]	; (800603c <TIM_OC4_SetConfig+0xb8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d00b      	beq.n	8006000 <TIM_OC4_SetConfig+0x7c>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a15      	ldr	r2, [pc, #84]	; (8006040 <TIM_OC4_SetConfig+0xbc>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d007      	beq.n	8006000 <TIM_OC4_SetConfig+0x7c>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a14      	ldr	r2, [pc, #80]	; (8006044 <TIM_OC4_SetConfig+0xc0>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d003      	beq.n	8006000 <TIM_OC4_SetConfig+0x7c>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a13      	ldr	r2, [pc, #76]	; (8006048 <TIM_OC4_SetConfig+0xc4>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d109      	bne.n	8006014 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006006:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	019b      	lsls	r3, r3, #6
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	4313      	orrs	r3, r2
 8006012:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	621a      	str	r2, [r3, #32]
}
 800602e:	bf00      	nop
 8006030:	371c      	adds	r7, #28
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	40012c00 	.word	0x40012c00
 8006040:	40014000 	.word	0x40014000
 8006044:	40014400 	.word	0x40014400
 8006048:	40014800 	.word	0x40014800

0800604c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800604c:	b480      	push	{r7}
 800604e:	b087      	sub	sp, #28
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800607a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	4313      	orrs	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006090:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	041b      	lsls	r3, r3, #16
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	4313      	orrs	r3, r2
 800609c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a15      	ldr	r2, [pc, #84]	; (80060f8 <TIM_OC5_SetConfig+0xac>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00b      	beq.n	80060be <TIM_OC5_SetConfig+0x72>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a14      	ldr	r2, [pc, #80]	; (80060fc <TIM_OC5_SetConfig+0xb0>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d007      	beq.n	80060be <TIM_OC5_SetConfig+0x72>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a13      	ldr	r2, [pc, #76]	; (8006100 <TIM_OC5_SetConfig+0xb4>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d003      	beq.n	80060be <TIM_OC5_SetConfig+0x72>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a12      	ldr	r2, [pc, #72]	; (8006104 <TIM_OC5_SetConfig+0xb8>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d109      	bne.n	80060d2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	021b      	lsls	r3, r3, #8
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	621a      	str	r2, [r3, #32]
}
 80060ec:	bf00      	nop
 80060ee:	371c      	adds	r7, #28
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	40012c00 	.word	0x40012c00
 80060fc:	40014000 	.word	0x40014000
 8006100:	40014400 	.word	0x40014400
 8006104:	40014800 	.word	0x40014800

08006108 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800613a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	021b      	lsls	r3, r3, #8
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4313      	orrs	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800614e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	051b      	lsls	r3, r3, #20
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a16      	ldr	r2, [pc, #88]	; (80061b8 <TIM_OC6_SetConfig+0xb0>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d00b      	beq.n	800617c <TIM_OC6_SetConfig+0x74>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a15      	ldr	r2, [pc, #84]	; (80061bc <TIM_OC6_SetConfig+0xb4>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d007      	beq.n	800617c <TIM_OC6_SetConfig+0x74>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a14      	ldr	r2, [pc, #80]	; (80061c0 <TIM_OC6_SetConfig+0xb8>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d003      	beq.n	800617c <TIM_OC6_SetConfig+0x74>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a13      	ldr	r2, [pc, #76]	; (80061c4 <TIM_OC6_SetConfig+0xbc>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d109      	bne.n	8006190 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006182:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	029b      	lsls	r3, r3, #10
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	4313      	orrs	r3, r2
 800618e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	40012c00 	.word	0x40012c00
 80061bc:	40014000 	.word	0x40014000
 80061c0:	40014400 	.word	0x40014400
 80061c4:	40014800 	.word	0x40014800

080061c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b087      	sub	sp, #28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	f023 0201 	bic.w	r2, r3, #1
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f023 030a 	bic.w	r3, r3, #10
 8006204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	4313      	orrs	r3, r2
 800620c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	621a      	str	r2, [r3, #32]
}
 800621a:	bf00      	nop
 800621c:	371c      	adds	r7, #28
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006226:	b480      	push	{r7}
 8006228:	b087      	sub	sp, #28
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	f023 0210 	bic.w	r2, r3, #16
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006250:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	031b      	lsls	r3, r3, #12
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	4313      	orrs	r3, r2
 800625a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006262:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	011b      	lsls	r3, r3, #4
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	4313      	orrs	r3, r2
 800626c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	621a      	str	r2, [r3, #32]
}
 800627a:	bf00      	nop
 800627c:	371c      	adds	r7, #28
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006286:	b480      	push	{r7}
 8006288:	b085      	sub	sp, #20
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	f043 0307 	orr.w	r3, r3, #7
 80062a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	609a      	str	r2, [r3, #8]
}
 80062b0:	bf00      	nop
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062bc:	b480      	push	{r7}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
 80062c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	021a      	lsls	r2, r3, #8
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	431a      	orrs	r2, r3
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	609a      	str	r2, [r3, #8]
}
 80062f0:	bf00      	nop
 80062f2:	371c      	adds	r7, #28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f003 031f 	and.w	r3, r3, #31
 800630e:	2201      	movs	r2, #1
 8006310:	fa02 f303 	lsl.w	r3, r2, r3
 8006314:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a1a      	ldr	r2, [r3, #32]
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	43db      	mvns	r3, r3
 800631e:	401a      	ands	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6a1a      	ldr	r2, [r3, #32]
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	f003 031f 	and.w	r3, r3, #31
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	fa01 f303 	lsl.w	r3, r1, r3
 8006334:	431a      	orrs	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	621a      	str	r2, [r3, #32]
}
 800633a:	bf00      	nop
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
	...

08006348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006358:	2b01      	cmp	r3, #1
 800635a:	d101      	bne.n	8006360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800635c:	2302      	movs	r3, #2
 800635e:	e04f      	b.n	8006400 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a21      	ldr	r2, [pc, #132]	; (800640c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d108      	bne.n	800639c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006390:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	4313      	orrs	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a14      	ldr	r2, [pc, #80]	; (800640c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d009      	beq.n	80063d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c8:	d004      	beq.n	80063d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a10      	ldr	r2, [pc, #64]	; (8006410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d10c      	bne.n	80063ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	40012c00 	.word	0x40012c00
 8006410:	40014000 	.word	0x40014000

08006414 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e040      	b.n	80064e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006466:	2b00      	cmp	r3, #0
 8006468:	d106      	bne.n	8006478 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7fc f9f0 	bl	8002858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2224      	movs	r2, #36	; 0x24
 800647c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 0201 	bic.w	r2, r2, #1
 800648c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f82c 	bl	80064ec <UART_SetConfig>
 8006494:	4603      	mov	r3, r0
 8006496:	2b01      	cmp	r3, #1
 8006498:	d101      	bne.n	800649e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e022      	b.n	80064e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d002      	beq.n	80064ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f956 	bl	8006758 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685a      	ldr	r2, [r3, #4]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689a      	ldr	r2, [r3, #8]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f042 0201 	orr.w	r2, r2, #1
 80064da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f9dd 	bl	800689c <UART_CheckIdleState>
 80064e2:	4603      	mov	r3, r0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b088      	sub	sp, #32
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	431a      	orrs	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	431a      	orrs	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	4313      	orrs	r3, r2
 800650e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	4b8a      	ldr	r3, [pc, #552]	; (8006740 <UART_SetConfig+0x254>)
 8006518:	4013      	ands	r3, r2
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	6812      	ldr	r2, [r2, #0]
 800651e:	6979      	ldr	r1, [r7, #20]
 8006520:	430b      	orrs	r3, r1
 8006522:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68da      	ldr	r2, [r3, #12]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	4313      	orrs	r3, r2
 8006548:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	430a      	orrs	r2, r1
 800655c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a78      	ldr	r2, [pc, #480]	; (8006744 <UART_SetConfig+0x258>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d120      	bne.n	80065aa <UART_SetConfig+0xbe>
 8006568:	4b77      	ldr	r3, [pc, #476]	; (8006748 <UART_SetConfig+0x25c>)
 800656a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656c:	f003 0303 	and.w	r3, r3, #3
 8006570:	2b03      	cmp	r3, #3
 8006572:	d817      	bhi.n	80065a4 <UART_SetConfig+0xb8>
 8006574:	a201      	add	r2, pc, #4	; (adr r2, 800657c <UART_SetConfig+0x90>)
 8006576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657a:	bf00      	nop
 800657c:	0800658d 	.word	0x0800658d
 8006580:	08006599 	.word	0x08006599
 8006584:	0800659f 	.word	0x0800659f
 8006588:	08006593 	.word	0x08006593
 800658c:	2300      	movs	r3, #0
 800658e:	77fb      	strb	r3, [r7, #31]
 8006590:	e01d      	b.n	80065ce <UART_SetConfig+0xe2>
 8006592:	2302      	movs	r3, #2
 8006594:	77fb      	strb	r3, [r7, #31]
 8006596:	e01a      	b.n	80065ce <UART_SetConfig+0xe2>
 8006598:	2304      	movs	r3, #4
 800659a:	77fb      	strb	r3, [r7, #31]
 800659c:	e017      	b.n	80065ce <UART_SetConfig+0xe2>
 800659e:	2308      	movs	r3, #8
 80065a0:	77fb      	strb	r3, [r7, #31]
 80065a2:	e014      	b.n	80065ce <UART_SetConfig+0xe2>
 80065a4:	2310      	movs	r3, #16
 80065a6:	77fb      	strb	r3, [r7, #31]
 80065a8:	e011      	b.n	80065ce <UART_SetConfig+0xe2>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a67      	ldr	r2, [pc, #412]	; (800674c <UART_SetConfig+0x260>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d102      	bne.n	80065ba <UART_SetConfig+0xce>
 80065b4:	2300      	movs	r3, #0
 80065b6:	77fb      	strb	r3, [r7, #31]
 80065b8:	e009      	b.n	80065ce <UART_SetConfig+0xe2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a64      	ldr	r2, [pc, #400]	; (8006750 <UART_SetConfig+0x264>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d102      	bne.n	80065ca <UART_SetConfig+0xde>
 80065c4:	2300      	movs	r3, #0
 80065c6:	77fb      	strb	r3, [r7, #31]
 80065c8:	e001      	b.n	80065ce <UART_SetConfig+0xe2>
 80065ca:	2310      	movs	r3, #16
 80065cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065d6:	d15a      	bne.n	800668e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80065d8:	7ffb      	ldrb	r3, [r7, #31]
 80065da:	2b08      	cmp	r3, #8
 80065dc:	d827      	bhi.n	800662e <UART_SetConfig+0x142>
 80065de:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <UART_SetConfig+0xf8>)
 80065e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e4:	08006609 	.word	0x08006609
 80065e8:	08006611 	.word	0x08006611
 80065ec:	08006619 	.word	0x08006619
 80065f0:	0800662f 	.word	0x0800662f
 80065f4:	0800661f 	.word	0x0800661f
 80065f8:	0800662f 	.word	0x0800662f
 80065fc:	0800662f 	.word	0x0800662f
 8006600:	0800662f 	.word	0x0800662f
 8006604:	08006627 	.word	0x08006627
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006608:	f7fe fbda 	bl	8004dc0 <HAL_RCC_GetPCLK1Freq>
 800660c:	61b8      	str	r0, [r7, #24]
        break;
 800660e:	e013      	b.n	8006638 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006610:	f7fe fbf8 	bl	8004e04 <HAL_RCC_GetPCLK2Freq>
 8006614:	61b8      	str	r0, [r7, #24]
        break;
 8006616:	e00f      	b.n	8006638 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006618:	4b4e      	ldr	r3, [pc, #312]	; (8006754 <UART_SetConfig+0x268>)
 800661a:	61bb      	str	r3, [r7, #24]
        break;
 800661c:	e00c      	b.n	8006638 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800661e:	f7fe fb59 	bl	8004cd4 <HAL_RCC_GetSysClockFreq>
 8006622:	61b8      	str	r0, [r7, #24]
        break;
 8006624:	e008      	b.n	8006638 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800662a:	61bb      	str	r3, [r7, #24]
        break;
 800662c:	e004      	b.n	8006638 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	77bb      	strb	r3, [r7, #30]
        break;
 8006636:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d074      	beq.n	8006728 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	005a      	lsls	r2, r3, #1
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	085b      	lsrs	r3, r3, #1
 8006648:	441a      	add	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006652:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	2b0f      	cmp	r3, #15
 8006658:	d916      	bls.n	8006688 <UART_SetConfig+0x19c>
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006660:	d212      	bcs.n	8006688 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	b29b      	uxth	r3, r3
 8006666:	f023 030f 	bic.w	r3, r3, #15
 800666a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	085b      	lsrs	r3, r3, #1
 8006670:	b29b      	uxth	r3, r3
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	b29a      	uxth	r2, r3
 8006678:	89fb      	ldrh	r3, [r7, #14]
 800667a:	4313      	orrs	r3, r2
 800667c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	89fa      	ldrh	r2, [r7, #14]
 8006684:	60da      	str	r2, [r3, #12]
 8006686:	e04f      	b.n	8006728 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	77bb      	strb	r3, [r7, #30]
 800668c:	e04c      	b.n	8006728 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800668e:	7ffb      	ldrb	r3, [r7, #31]
 8006690:	2b08      	cmp	r3, #8
 8006692:	d828      	bhi.n	80066e6 <UART_SetConfig+0x1fa>
 8006694:	a201      	add	r2, pc, #4	; (adr r2, 800669c <UART_SetConfig+0x1b0>)
 8006696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669a:	bf00      	nop
 800669c:	080066c1 	.word	0x080066c1
 80066a0:	080066c9 	.word	0x080066c9
 80066a4:	080066d1 	.word	0x080066d1
 80066a8:	080066e7 	.word	0x080066e7
 80066ac:	080066d7 	.word	0x080066d7
 80066b0:	080066e7 	.word	0x080066e7
 80066b4:	080066e7 	.word	0x080066e7
 80066b8:	080066e7 	.word	0x080066e7
 80066bc:	080066df 	.word	0x080066df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066c0:	f7fe fb7e 	bl	8004dc0 <HAL_RCC_GetPCLK1Freq>
 80066c4:	61b8      	str	r0, [r7, #24]
        break;
 80066c6:	e013      	b.n	80066f0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066c8:	f7fe fb9c 	bl	8004e04 <HAL_RCC_GetPCLK2Freq>
 80066cc:	61b8      	str	r0, [r7, #24]
        break;
 80066ce:	e00f      	b.n	80066f0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066d0:	4b20      	ldr	r3, [pc, #128]	; (8006754 <UART_SetConfig+0x268>)
 80066d2:	61bb      	str	r3, [r7, #24]
        break;
 80066d4:	e00c      	b.n	80066f0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066d6:	f7fe fafd 	bl	8004cd4 <HAL_RCC_GetSysClockFreq>
 80066da:	61b8      	str	r0, [r7, #24]
        break;
 80066dc:	e008      	b.n	80066f0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066e2:	61bb      	str	r3, [r7, #24]
        break;
 80066e4:	e004      	b.n	80066f0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	77bb      	strb	r3, [r7, #30]
        break;
 80066ee:	bf00      	nop
    }

    if (pclk != 0U)
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d018      	beq.n	8006728 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	085a      	lsrs	r2, r3, #1
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	441a      	add	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	fbb2 f3f3 	udiv	r3, r2, r3
 8006708:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	2b0f      	cmp	r3, #15
 800670e:	d909      	bls.n	8006724 <UART_SetConfig+0x238>
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006716:	d205      	bcs.n	8006724 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	b29a      	uxth	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	60da      	str	r2, [r3, #12]
 8006722:	e001      	b.n	8006728 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006734:	7fbb      	ldrb	r3, [r7, #30]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3720      	adds	r7, #32
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	efff69f3 	.word	0xefff69f3
 8006744:	40013800 	.word	0x40013800
 8006748:	40021000 	.word	0x40021000
 800674c:	40004400 	.word	0x40004400
 8006750:	40004800 	.word	0x40004800
 8006754:	007a1200 	.word	0x007a1200

08006758 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00a      	beq.n	8006782 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00a      	beq.n	80067a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	f003 0304 	and.w	r3, r3, #4
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00a      	beq.n	80067c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	f003 0308 	and.w	r3, r3, #8
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00a      	beq.n	80067e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ec:	f003 0310 	and.w	r3, r3, #16
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00a      	beq.n	800680a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	430a      	orrs	r2, r1
 8006808:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	f003 0320 	and.w	r3, r3, #32
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00a      	beq.n	800682c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006834:	2b00      	cmp	r3, #0
 8006836:	d01a      	beq.n	800686e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	430a      	orrs	r2, r1
 800684c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006856:	d10a      	bne.n	800686e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	430a      	orrs	r2, r1
 800686c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00a      	beq.n	8006890 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	430a      	orrs	r2, r1
 800688e:	605a      	str	r2, [r3, #4]
  }
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b098      	sub	sp, #96	; 0x60
 80068a0:	af02      	add	r7, sp, #8
 80068a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068ac:	f7fc f92e 	bl	8002b0c <HAL_GetTick>
 80068b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0308 	and.w	r3, r3, #8
 80068bc:	2b08      	cmp	r3, #8
 80068be:	d12e      	bne.n	800691e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068c8:	2200      	movs	r2, #0
 80068ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f88c 	bl	80069ec <UART_WaitOnFlagUntilTimeout>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d021      	beq.n	800691e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e2:	e853 3f00 	ldrex	r3, [r3]
 80068e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068ee:	653b      	str	r3, [r7, #80]	; 0x50
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	461a      	mov	r2, r3
 80068f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068f8:	647b      	str	r3, [r7, #68]	; 0x44
 80068fa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006900:	e841 2300 	strex	r3, r2, [r1]
 8006904:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1e6      	bne.n	80068da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2220      	movs	r2, #32
 8006910:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e062      	b.n	80069e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b04      	cmp	r3, #4
 800692a:	d149      	bne.n	80069c0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800692c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006934:	2200      	movs	r2, #0
 8006936:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f856 	bl	80069ec <UART_WaitOnFlagUntilTimeout>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d03c      	beq.n	80069c0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694e:	e853 3f00 	ldrex	r3, [r3]
 8006952:	623b      	str	r3, [r7, #32]
   return(result);
 8006954:	6a3b      	ldr	r3, [r7, #32]
 8006956:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800695a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	461a      	mov	r2, r3
 8006962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006964:	633b      	str	r3, [r7, #48]	; 0x30
 8006966:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006968:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800696a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800696c:	e841 2300 	strex	r3, r2, [r1]
 8006970:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1e6      	bne.n	8006946 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	3308      	adds	r3, #8
 800697e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	e853 3f00 	ldrex	r3, [r3]
 8006986:	60fb      	str	r3, [r7, #12]
   return(result);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 0301 	bic.w	r3, r3, #1
 800698e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	3308      	adds	r3, #8
 8006996:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006998:	61fa      	str	r2, [r7, #28]
 800699a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699c:	69b9      	ldr	r1, [r7, #24]
 800699e:	69fa      	ldr	r2, [r7, #28]
 80069a0:	e841 2300 	strex	r3, r2, [r1]
 80069a4:	617b      	str	r3, [r7, #20]
   return(result);
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1e5      	bne.n	8006978 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2220      	movs	r2, #32
 80069b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e011      	b.n	80069e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2220      	movs	r2, #32
 80069c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2220      	movs	r2, #32
 80069ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3758      	adds	r7, #88	; 0x58
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	603b      	str	r3, [r7, #0]
 80069f8:	4613      	mov	r3, r2
 80069fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069fc:	e049      	b.n	8006a92 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a04:	d045      	beq.n	8006a92 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a06:	f7fc f881 	bl	8002b0c <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d302      	bcc.n	8006a1c <UART_WaitOnFlagUntilTimeout+0x30>
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e048      	b.n	8006ab2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0304 	and.w	r3, r3, #4
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d031      	beq.n	8006a92 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	69db      	ldr	r3, [r3, #28]
 8006a34:	f003 0308 	and.w	r3, r3, #8
 8006a38:	2b08      	cmp	r3, #8
 8006a3a:	d110      	bne.n	8006a5e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2208      	movs	r2, #8
 8006a42:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 f838 	bl	8006aba <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2208      	movs	r2, #8
 8006a4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e029      	b.n	8006ab2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a6c:	d111      	bne.n	8006a92 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 f81e 	bl	8006aba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2220      	movs	r2, #32
 8006a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e00f      	b.n	8006ab2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69da      	ldr	r2, [r3, #28]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	bf0c      	ite	eq
 8006aa2:	2301      	moveq	r3, #1
 8006aa4:	2300      	movne	r3, #0
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	79fb      	ldrb	r3, [r7, #7]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d0a6      	beq.n	80069fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b095      	sub	sp, #84	; 0x54
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aca:	e853 3f00 	ldrex	r3, [r3]
 8006ace:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	461a      	mov	r2, r3
 8006ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ae0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ae2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ae6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ae8:	e841 2300 	strex	r3, r2, [r1]
 8006aec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e6      	bne.n	8006ac2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3308      	adds	r3, #8
 8006afa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	e853 3f00 	ldrex	r3, [r3]
 8006b02:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	f023 0301 	bic.w	r3, r3, #1
 8006b0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	3308      	adds	r3, #8
 8006b12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b1c:	e841 2300 	strex	r3, r2, [r1]
 8006b20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1e5      	bne.n	8006af4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d118      	bne.n	8006b62 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	f023 0310 	bic.w	r3, r3, #16
 8006b44:	647b      	str	r3, [r7, #68]	; 0x44
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b4e:	61bb      	str	r3, [r7, #24]
 8006b50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b52:	6979      	ldr	r1, [r7, #20]
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	e841 2300 	strex	r3, r2, [r1]
 8006b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1e6      	bne.n	8006b30 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006b76:	bf00      	nop
 8006b78:	3754      	adds	r7, #84	; 0x54
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <atoi>:
 8006b82:	220a      	movs	r2, #10
 8006b84:	2100      	movs	r1, #0
 8006b86:	f000 b8f7 	b.w	8006d78 <strtol>
	...

08006b8c <__errno>:
 8006b8c:	4b01      	ldr	r3, [pc, #4]	; (8006b94 <__errno+0x8>)
 8006b8e:	6818      	ldr	r0, [r3, #0]
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	2000043c 	.word	0x2000043c

08006b98 <__libc_init_array>:
 8006b98:	b570      	push	{r4, r5, r6, lr}
 8006b9a:	4d0d      	ldr	r5, [pc, #52]	; (8006bd0 <__libc_init_array+0x38>)
 8006b9c:	4c0d      	ldr	r4, [pc, #52]	; (8006bd4 <__libc_init_array+0x3c>)
 8006b9e:	1b64      	subs	r4, r4, r5
 8006ba0:	10a4      	asrs	r4, r4, #2
 8006ba2:	2600      	movs	r6, #0
 8006ba4:	42a6      	cmp	r6, r4
 8006ba6:	d109      	bne.n	8006bbc <__libc_init_array+0x24>
 8006ba8:	4d0b      	ldr	r5, [pc, #44]	; (8006bd8 <__libc_init_array+0x40>)
 8006baa:	4c0c      	ldr	r4, [pc, #48]	; (8006bdc <__libc_init_array+0x44>)
 8006bac:	f000 fd2e 	bl	800760c <_init>
 8006bb0:	1b64      	subs	r4, r4, r5
 8006bb2:	10a4      	asrs	r4, r4, #2
 8006bb4:	2600      	movs	r6, #0
 8006bb6:	42a6      	cmp	r6, r4
 8006bb8:	d105      	bne.n	8006bc6 <__libc_init_array+0x2e>
 8006bba:	bd70      	pop	{r4, r5, r6, pc}
 8006bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bc0:	4798      	blx	r3
 8006bc2:	3601      	adds	r6, #1
 8006bc4:	e7ee      	b.n	8006ba4 <__libc_init_array+0xc>
 8006bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bca:	4798      	blx	r3
 8006bcc:	3601      	adds	r6, #1
 8006bce:	e7f2      	b.n	8006bb6 <__libc_init_array+0x1e>
 8006bd0:	08007910 	.word	0x08007910
 8006bd4:	08007910 	.word	0x08007910
 8006bd8:	08007910 	.word	0x08007910
 8006bdc:	08007914 	.word	0x08007914

08006be0 <memcpy>:
 8006be0:	440a      	add	r2, r1
 8006be2:	4291      	cmp	r1, r2
 8006be4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006be8:	d100      	bne.n	8006bec <memcpy+0xc>
 8006bea:	4770      	bx	lr
 8006bec:	b510      	push	{r4, lr}
 8006bee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bf6:	4291      	cmp	r1, r2
 8006bf8:	d1f9      	bne.n	8006bee <memcpy+0xe>
 8006bfa:	bd10      	pop	{r4, pc}

08006bfc <memset>:
 8006bfc:	4402      	add	r2, r0
 8006bfe:	4603      	mov	r3, r0
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d100      	bne.n	8006c06 <memset+0xa>
 8006c04:	4770      	bx	lr
 8006c06:	f803 1b01 	strb.w	r1, [r3], #1
 8006c0a:	e7f9      	b.n	8006c00 <memset+0x4>

08006c0c <sniprintf>:
 8006c0c:	b40c      	push	{r2, r3}
 8006c0e:	b530      	push	{r4, r5, lr}
 8006c10:	4b17      	ldr	r3, [pc, #92]	; (8006c70 <sniprintf+0x64>)
 8006c12:	1e0c      	subs	r4, r1, #0
 8006c14:	681d      	ldr	r5, [r3, #0]
 8006c16:	b09d      	sub	sp, #116	; 0x74
 8006c18:	da08      	bge.n	8006c2c <sniprintf+0x20>
 8006c1a:	238b      	movs	r3, #139	; 0x8b
 8006c1c:	602b      	str	r3, [r5, #0]
 8006c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c22:	b01d      	add	sp, #116	; 0x74
 8006c24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c28:	b002      	add	sp, #8
 8006c2a:	4770      	bx	lr
 8006c2c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006c30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006c34:	bf14      	ite	ne
 8006c36:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006c3a:	4623      	moveq	r3, r4
 8006c3c:	9304      	str	r3, [sp, #16]
 8006c3e:	9307      	str	r3, [sp, #28]
 8006c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c44:	9002      	str	r0, [sp, #8]
 8006c46:	9006      	str	r0, [sp, #24]
 8006c48:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006c4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006c4e:	ab21      	add	r3, sp, #132	; 0x84
 8006c50:	a902      	add	r1, sp, #8
 8006c52:	4628      	mov	r0, r5
 8006c54:	9301      	str	r3, [sp, #4]
 8006c56:	f000 f8f5 	bl	8006e44 <_svfiprintf_r>
 8006c5a:	1c43      	adds	r3, r0, #1
 8006c5c:	bfbc      	itt	lt
 8006c5e:	238b      	movlt	r3, #139	; 0x8b
 8006c60:	602b      	strlt	r3, [r5, #0]
 8006c62:	2c00      	cmp	r4, #0
 8006c64:	d0dd      	beq.n	8006c22 <sniprintf+0x16>
 8006c66:	9b02      	ldr	r3, [sp, #8]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	701a      	strb	r2, [r3, #0]
 8006c6c:	e7d9      	b.n	8006c22 <sniprintf+0x16>
 8006c6e:	bf00      	nop
 8006c70:	2000043c 	.word	0x2000043c

08006c74 <_strtol_l.constprop.0>:
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c7a:	d001      	beq.n	8006c80 <_strtol_l.constprop.0+0xc>
 8006c7c:	2b24      	cmp	r3, #36	; 0x24
 8006c7e:	d906      	bls.n	8006c8e <_strtol_l.constprop.0+0x1a>
 8006c80:	f7ff ff84 	bl	8006b8c <__errno>
 8006c84:	2316      	movs	r3, #22
 8006c86:	6003      	str	r3, [r0, #0]
 8006c88:	2000      	movs	r0, #0
 8006c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c8e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006d74 <_strtol_l.constprop.0+0x100>
 8006c92:	460d      	mov	r5, r1
 8006c94:	462e      	mov	r6, r5
 8006c96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c9a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006c9e:	f017 0708 	ands.w	r7, r7, #8
 8006ca2:	d1f7      	bne.n	8006c94 <_strtol_l.constprop.0+0x20>
 8006ca4:	2c2d      	cmp	r4, #45	; 0x2d
 8006ca6:	d132      	bne.n	8006d0e <_strtol_l.constprop.0+0x9a>
 8006ca8:	782c      	ldrb	r4, [r5, #0]
 8006caa:	2701      	movs	r7, #1
 8006cac:	1cb5      	adds	r5, r6, #2
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d05b      	beq.n	8006d6a <_strtol_l.constprop.0+0xf6>
 8006cb2:	2b10      	cmp	r3, #16
 8006cb4:	d109      	bne.n	8006cca <_strtol_l.constprop.0+0x56>
 8006cb6:	2c30      	cmp	r4, #48	; 0x30
 8006cb8:	d107      	bne.n	8006cca <_strtol_l.constprop.0+0x56>
 8006cba:	782c      	ldrb	r4, [r5, #0]
 8006cbc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006cc0:	2c58      	cmp	r4, #88	; 0x58
 8006cc2:	d14d      	bne.n	8006d60 <_strtol_l.constprop.0+0xec>
 8006cc4:	786c      	ldrb	r4, [r5, #1]
 8006cc6:	2310      	movs	r3, #16
 8006cc8:	3502      	adds	r5, #2
 8006cca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006cce:	f108 38ff 	add.w	r8, r8, #4294967295
 8006cd2:	f04f 0c00 	mov.w	ip, #0
 8006cd6:	fbb8 f9f3 	udiv	r9, r8, r3
 8006cda:	4666      	mov	r6, ip
 8006cdc:	fb03 8a19 	mls	sl, r3, r9, r8
 8006ce0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006ce4:	f1be 0f09 	cmp.w	lr, #9
 8006ce8:	d816      	bhi.n	8006d18 <_strtol_l.constprop.0+0xa4>
 8006cea:	4674      	mov	r4, lr
 8006cec:	42a3      	cmp	r3, r4
 8006cee:	dd24      	ble.n	8006d3a <_strtol_l.constprop.0+0xc6>
 8006cf0:	f1bc 0f00 	cmp.w	ip, #0
 8006cf4:	db1e      	blt.n	8006d34 <_strtol_l.constprop.0+0xc0>
 8006cf6:	45b1      	cmp	r9, r6
 8006cf8:	d31c      	bcc.n	8006d34 <_strtol_l.constprop.0+0xc0>
 8006cfa:	d101      	bne.n	8006d00 <_strtol_l.constprop.0+0x8c>
 8006cfc:	45a2      	cmp	sl, r4
 8006cfe:	db19      	blt.n	8006d34 <_strtol_l.constprop.0+0xc0>
 8006d00:	fb06 4603 	mla	r6, r6, r3, r4
 8006d04:	f04f 0c01 	mov.w	ip, #1
 8006d08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d0c:	e7e8      	b.n	8006ce0 <_strtol_l.constprop.0+0x6c>
 8006d0e:	2c2b      	cmp	r4, #43	; 0x2b
 8006d10:	bf04      	itt	eq
 8006d12:	782c      	ldrbeq	r4, [r5, #0]
 8006d14:	1cb5      	addeq	r5, r6, #2
 8006d16:	e7ca      	b.n	8006cae <_strtol_l.constprop.0+0x3a>
 8006d18:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006d1c:	f1be 0f19 	cmp.w	lr, #25
 8006d20:	d801      	bhi.n	8006d26 <_strtol_l.constprop.0+0xb2>
 8006d22:	3c37      	subs	r4, #55	; 0x37
 8006d24:	e7e2      	b.n	8006cec <_strtol_l.constprop.0+0x78>
 8006d26:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006d2a:	f1be 0f19 	cmp.w	lr, #25
 8006d2e:	d804      	bhi.n	8006d3a <_strtol_l.constprop.0+0xc6>
 8006d30:	3c57      	subs	r4, #87	; 0x57
 8006d32:	e7db      	b.n	8006cec <_strtol_l.constprop.0+0x78>
 8006d34:	f04f 3cff 	mov.w	ip, #4294967295
 8006d38:	e7e6      	b.n	8006d08 <_strtol_l.constprop.0+0x94>
 8006d3a:	f1bc 0f00 	cmp.w	ip, #0
 8006d3e:	da05      	bge.n	8006d4c <_strtol_l.constprop.0+0xd8>
 8006d40:	2322      	movs	r3, #34	; 0x22
 8006d42:	6003      	str	r3, [r0, #0]
 8006d44:	4646      	mov	r6, r8
 8006d46:	b942      	cbnz	r2, 8006d5a <_strtol_l.constprop.0+0xe6>
 8006d48:	4630      	mov	r0, r6
 8006d4a:	e79e      	b.n	8006c8a <_strtol_l.constprop.0+0x16>
 8006d4c:	b107      	cbz	r7, 8006d50 <_strtol_l.constprop.0+0xdc>
 8006d4e:	4276      	negs	r6, r6
 8006d50:	2a00      	cmp	r2, #0
 8006d52:	d0f9      	beq.n	8006d48 <_strtol_l.constprop.0+0xd4>
 8006d54:	f1bc 0f00 	cmp.w	ip, #0
 8006d58:	d000      	beq.n	8006d5c <_strtol_l.constprop.0+0xe8>
 8006d5a:	1e69      	subs	r1, r5, #1
 8006d5c:	6011      	str	r1, [r2, #0]
 8006d5e:	e7f3      	b.n	8006d48 <_strtol_l.constprop.0+0xd4>
 8006d60:	2430      	movs	r4, #48	; 0x30
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1b1      	bne.n	8006cca <_strtol_l.constprop.0+0x56>
 8006d66:	2308      	movs	r3, #8
 8006d68:	e7af      	b.n	8006cca <_strtol_l.constprop.0+0x56>
 8006d6a:	2c30      	cmp	r4, #48	; 0x30
 8006d6c:	d0a5      	beq.n	8006cba <_strtol_l.constprop.0+0x46>
 8006d6e:	230a      	movs	r3, #10
 8006d70:	e7ab      	b.n	8006cca <_strtol_l.constprop.0+0x56>
 8006d72:	bf00      	nop
 8006d74:	080077dd 	.word	0x080077dd

08006d78 <strtol>:
 8006d78:	4613      	mov	r3, r2
 8006d7a:	460a      	mov	r2, r1
 8006d7c:	4601      	mov	r1, r0
 8006d7e:	4802      	ldr	r0, [pc, #8]	; (8006d88 <strtol+0x10>)
 8006d80:	6800      	ldr	r0, [r0, #0]
 8006d82:	f7ff bf77 	b.w	8006c74 <_strtol_l.constprop.0>
 8006d86:	bf00      	nop
 8006d88:	2000043c 	.word	0x2000043c

08006d8c <__ssputs_r>:
 8006d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d90:	688e      	ldr	r6, [r1, #8]
 8006d92:	429e      	cmp	r6, r3
 8006d94:	4682      	mov	sl, r0
 8006d96:	460c      	mov	r4, r1
 8006d98:	4690      	mov	r8, r2
 8006d9a:	461f      	mov	r7, r3
 8006d9c:	d838      	bhi.n	8006e10 <__ssputs_r+0x84>
 8006d9e:	898a      	ldrh	r2, [r1, #12]
 8006da0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006da4:	d032      	beq.n	8006e0c <__ssputs_r+0x80>
 8006da6:	6825      	ldr	r5, [r4, #0]
 8006da8:	6909      	ldr	r1, [r1, #16]
 8006daa:	eba5 0901 	sub.w	r9, r5, r1
 8006dae:	6965      	ldr	r5, [r4, #20]
 8006db0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006db4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006db8:	3301      	adds	r3, #1
 8006dba:	444b      	add	r3, r9
 8006dbc:	106d      	asrs	r5, r5, #1
 8006dbe:	429d      	cmp	r5, r3
 8006dc0:	bf38      	it	cc
 8006dc2:	461d      	movcc	r5, r3
 8006dc4:	0553      	lsls	r3, r2, #21
 8006dc6:	d531      	bpl.n	8006e2c <__ssputs_r+0xa0>
 8006dc8:	4629      	mov	r1, r5
 8006dca:	f000 fb55 	bl	8007478 <_malloc_r>
 8006dce:	4606      	mov	r6, r0
 8006dd0:	b950      	cbnz	r0, 8006de8 <__ssputs_r+0x5c>
 8006dd2:	230c      	movs	r3, #12
 8006dd4:	f8ca 3000 	str.w	r3, [sl]
 8006dd8:	89a3      	ldrh	r3, [r4, #12]
 8006dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dde:	81a3      	strh	r3, [r4, #12]
 8006de0:	f04f 30ff 	mov.w	r0, #4294967295
 8006de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de8:	6921      	ldr	r1, [r4, #16]
 8006dea:	464a      	mov	r2, r9
 8006dec:	f7ff fef8 	bl	8006be0 <memcpy>
 8006df0:	89a3      	ldrh	r3, [r4, #12]
 8006df2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dfa:	81a3      	strh	r3, [r4, #12]
 8006dfc:	6126      	str	r6, [r4, #16]
 8006dfe:	6165      	str	r5, [r4, #20]
 8006e00:	444e      	add	r6, r9
 8006e02:	eba5 0509 	sub.w	r5, r5, r9
 8006e06:	6026      	str	r6, [r4, #0]
 8006e08:	60a5      	str	r5, [r4, #8]
 8006e0a:	463e      	mov	r6, r7
 8006e0c:	42be      	cmp	r6, r7
 8006e0e:	d900      	bls.n	8006e12 <__ssputs_r+0x86>
 8006e10:	463e      	mov	r6, r7
 8006e12:	6820      	ldr	r0, [r4, #0]
 8006e14:	4632      	mov	r2, r6
 8006e16:	4641      	mov	r1, r8
 8006e18:	f000 faa8 	bl	800736c <memmove>
 8006e1c:	68a3      	ldr	r3, [r4, #8]
 8006e1e:	1b9b      	subs	r3, r3, r6
 8006e20:	60a3      	str	r3, [r4, #8]
 8006e22:	6823      	ldr	r3, [r4, #0]
 8006e24:	4433      	add	r3, r6
 8006e26:	6023      	str	r3, [r4, #0]
 8006e28:	2000      	movs	r0, #0
 8006e2a:	e7db      	b.n	8006de4 <__ssputs_r+0x58>
 8006e2c:	462a      	mov	r2, r5
 8006e2e:	f000 fb97 	bl	8007560 <_realloc_r>
 8006e32:	4606      	mov	r6, r0
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d1e1      	bne.n	8006dfc <__ssputs_r+0x70>
 8006e38:	6921      	ldr	r1, [r4, #16]
 8006e3a:	4650      	mov	r0, sl
 8006e3c:	f000 fab0 	bl	80073a0 <_free_r>
 8006e40:	e7c7      	b.n	8006dd2 <__ssputs_r+0x46>
	...

08006e44 <_svfiprintf_r>:
 8006e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e48:	4698      	mov	r8, r3
 8006e4a:	898b      	ldrh	r3, [r1, #12]
 8006e4c:	061b      	lsls	r3, r3, #24
 8006e4e:	b09d      	sub	sp, #116	; 0x74
 8006e50:	4607      	mov	r7, r0
 8006e52:	460d      	mov	r5, r1
 8006e54:	4614      	mov	r4, r2
 8006e56:	d50e      	bpl.n	8006e76 <_svfiprintf_r+0x32>
 8006e58:	690b      	ldr	r3, [r1, #16]
 8006e5a:	b963      	cbnz	r3, 8006e76 <_svfiprintf_r+0x32>
 8006e5c:	2140      	movs	r1, #64	; 0x40
 8006e5e:	f000 fb0b 	bl	8007478 <_malloc_r>
 8006e62:	6028      	str	r0, [r5, #0]
 8006e64:	6128      	str	r0, [r5, #16]
 8006e66:	b920      	cbnz	r0, 8006e72 <_svfiprintf_r+0x2e>
 8006e68:	230c      	movs	r3, #12
 8006e6a:	603b      	str	r3, [r7, #0]
 8006e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e70:	e0d1      	b.n	8007016 <_svfiprintf_r+0x1d2>
 8006e72:	2340      	movs	r3, #64	; 0x40
 8006e74:	616b      	str	r3, [r5, #20]
 8006e76:	2300      	movs	r3, #0
 8006e78:	9309      	str	r3, [sp, #36]	; 0x24
 8006e7a:	2320      	movs	r3, #32
 8006e7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e80:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e84:	2330      	movs	r3, #48	; 0x30
 8006e86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007030 <_svfiprintf_r+0x1ec>
 8006e8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e8e:	f04f 0901 	mov.w	r9, #1
 8006e92:	4623      	mov	r3, r4
 8006e94:	469a      	mov	sl, r3
 8006e96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e9a:	b10a      	cbz	r2, 8006ea0 <_svfiprintf_r+0x5c>
 8006e9c:	2a25      	cmp	r2, #37	; 0x25
 8006e9e:	d1f9      	bne.n	8006e94 <_svfiprintf_r+0x50>
 8006ea0:	ebba 0b04 	subs.w	fp, sl, r4
 8006ea4:	d00b      	beq.n	8006ebe <_svfiprintf_r+0x7a>
 8006ea6:	465b      	mov	r3, fp
 8006ea8:	4622      	mov	r2, r4
 8006eaa:	4629      	mov	r1, r5
 8006eac:	4638      	mov	r0, r7
 8006eae:	f7ff ff6d 	bl	8006d8c <__ssputs_r>
 8006eb2:	3001      	adds	r0, #1
 8006eb4:	f000 80aa 	beq.w	800700c <_svfiprintf_r+0x1c8>
 8006eb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eba:	445a      	add	r2, fp
 8006ebc:	9209      	str	r2, [sp, #36]	; 0x24
 8006ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f000 80a2 	beq.w	800700c <_svfiprintf_r+0x1c8>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	f04f 32ff 	mov.w	r2, #4294967295
 8006ece:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ed2:	f10a 0a01 	add.w	sl, sl, #1
 8006ed6:	9304      	str	r3, [sp, #16]
 8006ed8:	9307      	str	r3, [sp, #28]
 8006eda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ede:	931a      	str	r3, [sp, #104]	; 0x68
 8006ee0:	4654      	mov	r4, sl
 8006ee2:	2205      	movs	r2, #5
 8006ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ee8:	4851      	ldr	r0, [pc, #324]	; (8007030 <_svfiprintf_r+0x1ec>)
 8006eea:	f7f9 f971 	bl	80001d0 <memchr>
 8006eee:	9a04      	ldr	r2, [sp, #16]
 8006ef0:	b9d8      	cbnz	r0, 8006f2a <_svfiprintf_r+0xe6>
 8006ef2:	06d0      	lsls	r0, r2, #27
 8006ef4:	bf44      	itt	mi
 8006ef6:	2320      	movmi	r3, #32
 8006ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006efc:	0711      	lsls	r1, r2, #28
 8006efe:	bf44      	itt	mi
 8006f00:	232b      	movmi	r3, #43	; 0x2b
 8006f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f06:	f89a 3000 	ldrb.w	r3, [sl]
 8006f0a:	2b2a      	cmp	r3, #42	; 0x2a
 8006f0c:	d015      	beq.n	8006f3a <_svfiprintf_r+0xf6>
 8006f0e:	9a07      	ldr	r2, [sp, #28]
 8006f10:	4654      	mov	r4, sl
 8006f12:	2000      	movs	r0, #0
 8006f14:	f04f 0c0a 	mov.w	ip, #10
 8006f18:	4621      	mov	r1, r4
 8006f1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f1e:	3b30      	subs	r3, #48	; 0x30
 8006f20:	2b09      	cmp	r3, #9
 8006f22:	d94e      	bls.n	8006fc2 <_svfiprintf_r+0x17e>
 8006f24:	b1b0      	cbz	r0, 8006f54 <_svfiprintf_r+0x110>
 8006f26:	9207      	str	r2, [sp, #28]
 8006f28:	e014      	b.n	8006f54 <_svfiprintf_r+0x110>
 8006f2a:	eba0 0308 	sub.w	r3, r0, r8
 8006f2e:	fa09 f303 	lsl.w	r3, r9, r3
 8006f32:	4313      	orrs	r3, r2
 8006f34:	9304      	str	r3, [sp, #16]
 8006f36:	46a2      	mov	sl, r4
 8006f38:	e7d2      	b.n	8006ee0 <_svfiprintf_r+0x9c>
 8006f3a:	9b03      	ldr	r3, [sp, #12]
 8006f3c:	1d19      	adds	r1, r3, #4
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	9103      	str	r1, [sp, #12]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	bfbb      	ittet	lt
 8006f46:	425b      	neglt	r3, r3
 8006f48:	f042 0202 	orrlt.w	r2, r2, #2
 8006f4c:	9307      	strge	r3, [sp, #28]
 8006f4e:	9307      	strlt	r3, [sp, #28]
 8006f50:	bfb8      	it	lt
 8006f52:	9204      	strlt	r2, [sp, #16]
 8006f54:	7823      	ldrb	r3, [r4, #0]
 8006f56:	2b2e      	cmp	r3, #46	; 0x2e
 8006f58:	d10c      	bne.n	8006f74 <_svfiprintf_r+0x130>
 8006f5a:	7863      	ldrb	r3, [r4, #1]
 8006f5c:	2b2a      	cmp	r3, #42	; 0x2a
 8006f5e:	d135      	bne.n	8006fcc <_svfiprintf_r+0x188>
 8006f60:	9b03      	ldr	r3, [sp, #12]
 8006f62:	1d1a      	adds	r2, r3, #4
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	9203      	str	r2, [sp, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	bfb8      	it	lt
 8006f6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f70:	3402      	adds	r4, #2
 8006f72:	9305      	str	r3, [sp, #20]
 8006f74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007040 <_svfiprintf_r+0x1fc>
 8006f78:	7821      	ldrb	r1, [r4, #0]
 8006f7a:	2203      	movs	r2, #3
 8006f7c:	4650      	mov	r0, sl
 8006f7e:	f7f9 f927 	bl	80001d0 <memchr>
 8006f82:	b140      	cbz	r0, 8006f96 <_svfiprintf_r+0x152>
 8006f84:	2340      	movs	r3, #64	; 0x40
 8006f86:	eba0 000a 	sub.w	r0, r0, sl
 8006f8a:	fa03 f000 	lsl.w	r0, r3, r0
 8006f8e:	9b04      	ldr	r3, [sp, #16]
 8006f90:	4303      	orrs	r3, r0
 8006f92:	3401      	adds	r4, #1
 8006f94:	9304      	str	r3, [sp, #16]
 8006f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f9a:	4826      	ldr	r0, [pc, #152]	; (8007034 <_svfiprintf_r+0x1f0>)
 8006f9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fa0:	2206      	movs	r2, #6
 8006fa2:	f7f9 f915 	bl	80001d0 <memchr>
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	d038      	beq.n	800701c <_svfiprintf_r+0x1d8>
 8006faa:	4b23      	ldr	r3, [pc, #140]	; (8007038 <_svfiprintf_r+0x1f4>)
 8006fac:	bb1b      	cbnz	r3, 8006ff6 <_svfiprintf_r+0x1b2>
 8006fae:	9b03      	ldr	r3, [sp, #12]
 8006fb0:	3307      	adds	r3, #7
 8006fb2:	f023 0307 	bic.w	r3, r3, #7
 8006fb6:	3308      	adds	r3, #8
 8006fb8:	9303      	str	r3, [sp, #12]
 8006fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fbc:	4433      	add	r3, r6
 8006fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8006fc0:	e767      	b.n	8006e92 <_svfiprintf_r+0x4e>
 8006fc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fc6:	460c      	mov	r4, r1
 8006fc8:	2001      	movs	r0, #1
 8006fca:	e7a5      	b.n	8006f18 <_svfiprintf_r+0xd4>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	3401      	adds	r4, #1
 8006fd0:	9305      	str	r3, [sp, #20]
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	f04f 0c0a 	mov.w	ip, #10
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fde:	3a30      	subs	r2, #48	; 0x30
 8006fe0:	2a09      	cmp	r2, #9
 8006fe2:	d903      	bls.n	8006fec <_svfiprintf_r+0x1a8>
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d0c5      	beq.n	8006f74 <_svfiprintf_r+0x130>
 8006fe8:	9105      	str	r1, [sp, #20]
 8006fea:	e7c3      	b.n	8006f74 <_svfiprintf_r+0x130>
 8006fec:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e7f0      	b.n	8006fd8 <_svfiprintf_r+0x194>
 8006ff6:	ab03      	add	r3, sp, #12
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	462a      	mov	r2, r5
 8006ffc:	4b0f      	ldr	r3, [pc, #60]	; (800703c <_svfiprintf_r+0x1f8>)
 8006ffe:	a904      	add	r1, sp, #16
 8007000:	4638      	mov	r0, r7
 8007002:	f3af 8000 	nop.w
 8007006:	1c42      	adds	r2, r0, #1
 8007008:	4606      	mov	r6, r0
 800700a:	d1d6      	bne.n	8006fba <_svfiprintf_r+0x176>
 800700c:	89ab      	ldrh	r3, [r5, #12]
 800700e:	065b      	lsls	r3, r3, #25
 8007010:	f53f af2c 	bmi.w	8006e6c <_svfiprintf_r+0x28>
 8007014:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007016:	b01d      	add	sp, #116	; 0x74
 8007018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800701c:	ab03      	add	r3, sp, #12
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	462a      	mov	r2, r5
 8007022:	4b06      	ldr	r3, [pc, #24]	; (800703c <_svfiprintf_r+0x1f8>)
 8007024:	a904      	add	r1, sp, #16
 8007026:	4638      	mov	r0, r7
 8007028:	f000 f87a 	bl	8007120 <_printf_i>
 800702c:	e7eb      	b.n	8007006 <_svfiprintf_r+0x1c2>
 800702e:	bf00      	nop
 8007030:	080078dd 	.word	0x080078dd
 8007034:	080078e7 	.word	0x080078e7
 8007038:	00000000 	.word	0x00000000
 800703c:	08006d8d 	.word	0x08006d8d
 8007040:	080078e3 	.word	0x080078e3

08007044 <_printf_common>:
 8007044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007048:	4616      	mov	r6, r2
 800704a:	4699      	mov	r9, r3
 800704c:	688a      	ldr	r2, [r1, #8]
 800704e:	690b      	ldr	r3, [r1, #16]
 8007050:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007054:	4293      	cmp	r3, r2
 8007056:	bfb8      	it	lt
 8007058:	4613      	movlt	r3, r2
 800705a:	6033      	str	r3, [r6, #0]
 800705c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007060:	4607      	mov	r7, r0
 8007062:	460c      	mov	r4, r1
 8007064:	b10a      	cbz	r2, 800706a <_printf_common+0x26>
 8007066:	3301      	adds	r3, #1
 8007068:	6033      	str	r3, [r6, #0]
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	0699      	lsls	r1, r3, #26
 800706e:	bf42      	ittt	mi
 8007070:	6833      	ldrmi	r3, [r6, #0]
 8007072:	3302      	addmi	r3, #2
 8007074:	6033      	strmi	r3, [r6, #0]
 8007076:	6825      	ldr	r5, [r4, #0]
 8007078:	f015 0506 	ands.w	r5, r5, #6
 800707c:	d106      	bne.n	800708c <_printf_common+0x48>
 800707e:	f104 0a19 	add.w	sl, r4, #25
 8007082:	68e3      	ldr	r3, [r4, #12]
 8007084:	6832      	ldr	r2, [r6, #0]
 8007086:	1a9b      	subs	r3, r3, r2
 8007088:	42ab      	cmp	r3, r5
 800708a:	dc26      	bgt.n	80070da <_printf_common+0x96>
 800708c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007090:	1e13      	subs	r3, r2, #0
 8007092:	6822      	ldr	r2, [r4, #0]
 8007094:	bf18      	it	ne
 8007096:	2301      	movne	r3, #1
 8007098:	0692      	lsls	r2, r2, #26
 800709a:	d42b      	bmi.n	80070f4 <_printf_common+0xb0>
 800709c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070a0:	4649      	mov	r1, r9
 80070a2:	4638      	mov	r0, r7
 80070a4:	47c0      	blx	r8
 80070a6:	3001      	adds	r0, #1
 80070a8:	d01e      	beq.n	80070e8 <_printf_common+0xa4>
 80070aa:	6823      	ldr	r3, [r4, #0]
 80070ac:	68e5      	ldr	r5, [r4, #12]
 80070ae:	6832      	ldr	r2, [r6, #0]
 80070b0:	f003 0306 	and.w	r3, r3, #6
 80070b4:	2b04      	cmp	r3, #4
 80070b6:	bf08      	it	eq
 80070b8:	1aad      	subeq	r5, r5, r2
 80070ba:	68a3      	ldr	r3, [r4, #8]
 80070bc:	6922      	ldr	r2, [r4, #16]
 80070be:	bf0c      	ite	eq
 80070c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070c4:	2500      	movne	r5, #0
 80070c6:	4293      	cmp	r3, r2
 80070c8:	bfc4      	itt	gt
 80070ca:	1a9b      	subgt	r3, r3, r2
 80070cc:	18ed      	addgt	r5, r5, r3
 80070ce:	2600      	movs	r6, #0
 80070d0:	341a      	adds	r4, #26
 80070d2:	42b5      	cmp	r5, r6
 80070d4:	d11a      	bne.n	800710c <_printf_common+0xc8>
 80070d6:	2000      	movs	r0, #0
 80070d8:	e008      	b.n	80070ec <_printf_common+0xa8>
 80070da:	2301      	movs	r3, #1
 80070dc:	4652      	mov	r2, sl
 80070de:	4649      	mov	r1, r9
 80070e0:	4638      	mov	r0, r7
 80070e2:	47c0      	blx	r8
 80070e4:	3001      	adds	r0, #1
 80070e6:	d103      	bne.n	80070f0 <_printf_common+0xac>
 80070e8:	f04f 30ff 	mov.w	r0, #4294967295
 80070ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070f0:	3501      	adds	r5, #1
 80070f2:	e7c6      	b.n	8007082 <_printf_common+0x3e>
 80070f4:	18e1      	adds	r1, r4, r3
 80070f6:	1c5a      	adds	r2, r3, #1
 80070f8:	2030      	movs	r0, #48	; 0x30
 80070fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070fe:	4422      	add	r2, r4
 8007100:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007104:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007108:	3302      	adds	r3, #2
 800710a:	e7c7      	b.n	800709c <_printf_common+0x58>
 800710c:	2301      	movs	r3, #1
 800710e:	4622      	mov	r2, r4
 8007110:	4649      	mov	r1, r9
 8007112:	4638      	mov	r0, r7
 8007114:	47c0      	blx	r8
 8007116:	3001      	adds	r0, #1
 8007118:	d0e6      	beq.n	80070e8 <_printf_common+0xa4>
 800711a:	3601      	adds	r6, #1
 800711c:	e7d9      	b.n	80070d2 <_printf_common+0x8e>
	...

08007120 <_printf_i>:
 8007120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007124:	7e0f      	ldrb	r7, [r1, #24]
 8007126:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007128:	2f78      	cmp	r7, #120	; 0x78
 800712a:	4691      	mov	r9, r2
 800712c:	4680      	mov	r8, r0
 800712e:	460c      	mov	r4, r1
 8007130:	469a      	mov	sl, r3
 8007132:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007136:	d807      	bhi.n	8007148 <_printf_i+0x28>
 8007138:	2f62      	cmp	r7, #98	; 0x62
 800713a:	d80a      	bhi.n	8007152 <_printf_i+0x32>
 800713c:	2f00      	cmp	r7, #0
 800713e:	f000 80d8 	beq.w	80072f2 <_printf_i+0x1d2>
 8007142:	2f58      	cmp	r7, #88	; 0x58
 8007144:	f000 80a3 	beq.w	800728e <_printf_i+0x16e>
 8007148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800714c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007150:	e03a      	b.n	80071c8 <_printf_i+0xa8>
 8007152:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007156:	2b15      	cmp	r3, #21
 8007158:	d8f6      	bhi.n	8007148 <_printf_i+0x28>
 800715a:	a101      	add	r1, pc, #4	; (adr r1, 8007160 <_printf_i+0x40>)
 800715c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007160:	080071b9 	.word	0x080071b9
 8007164:	080071cd 	.word	0x080071cd
 8007168:	08007149 	.word	0x08007149
 800716c:	08007149 	.word	0x08007149
 8007170:	08007149 	.word	0x08007149
 8007174:	08007149 	.word	0x08007149
 8007178:	080071cd 	.word	0x080071cd
 800717c:	08007149 	.word	0x08007149
 8007180:	08007149 	.word	0x08007149
 8007184:	08007149 	.word	0x08007149
 8007188:	08007149 	.word	0x08007149
 800718c:	080072d9 	.word	0x080072d9
 8007190:	080071fd 	.word	0x080071fd
 8007194:	080072bb 	.word	0x080072bb
 8007198:	08007149 	.word	0x08007149
 800719c:	08007149 	.word	0x08007149
 80071a0:	080072fb 	.word	0x080072fb
 80071a4:	08007149 	.word	0x08007149
 80071a8:	080071fd 	.word	0x080071fd
 80071ac:	08007149 	.word	0x08007149
 80071b0:	08007149 	.word	0x08007149
 80071b4:	080072c3 	.word	0x080072c3
 80071b8:	682b      	ldr	r3, [r5, #0]
 80071ba:	1d1a      	adds	r2, r3, #4
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	602a      	str	r2, [r5, #0]
 80071c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071c8:	2301      	movs	r3, #1
 80071ca:	e0a3      	b.n	8007314 <_printf_i+0x1f4>
 80071cc:	6820      	ldr	r0, [r4, #0]
 80071ce:	6829      	ldr	r1, [r5, #0]
 80071d0:	0606      	lsls	r6, r0, #24
 80071d2:	f101 0304 	add.w	r3, r1, #4
 80071d6:	d50a      	bpl.n	80071ee <_printf_i+0xce>
 80071d8:	680e      	ldr	r6, [r1, #0]
 80071da:	602b      	str	r3, [r5, #0]
 80071dc:	2e00      	cmp	r6, #0
 80071de:	da03      	bge.n	80071e8 <_printf_i+0xc8>
 80071e0:	232d      	movs	r3, #45	; 0x2d
 80071e2:	4276      	negs	r6, r6
 80071e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071e8:	485e      	ldr	r0, [pc, #376]	; (8007364 <_printf_i+0x244>)
 80071ea:	230a      	movs	r3, #10
 80071ec:	e019      	b.n	8007222 <_printf_i+0x102>
 80071ee:	680e      	ldr	r6, [r1, #0]
 80071f0:	602b      	str	r3, [r5, #0]
 80071f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80071f6:	bf18      	it	ne
 80071f8:	b236      	sxthne	r6, r6
 80071fa:	e7ef      	b.n	80071dc <_printf_i+0xbc>
 80071fc:	682b      	ldr	r3, [r5, #0]
 80071fe:	6820      	ldr	r0, [r4, #0]
 8007200:	1d19      	adds	r1, r3, #4
 8007202:	6029      	str	r1, [r5, #0]
 8007204:	0601      	lsls	r1, r0, #24
 8007206:	d501      	bpl.n	800720c <_printf_i+0xec>
 8007208:	681e      	ldr	r6, [r3, #0]
 800720a:	e002      	b.n	8007212 <_printf_i+0xf2>
 800720c:	0646      	lsls	r6, r0, #25
 800720e:	d5fb      	bpl.n	8007208 <_printf_i+0xe8>
 8007210:	881e      	ldrh	r6, [r3, #0]
 8007212:	4854      	ldr	r0, [pc, #336]	; (8007364 <_printf_i+0x244>)
 8007214:	2f6f      	cmp	r7, #111	; 0x6f
 8007216:	bf0c      	ite	eq
 8007218:	2308      	moveq	r3, #8
 800721a:	230a      	movne	r3, #10
 800721c:	2100      	movs	r1, #0
 800721e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007222:	6865      	ldr	r5, [r4, #4]
 8007224:	60a5      	str	r5, [r4, #8]
 8007226:	2d00      	cmp	r5, #0
 8007228:	bfa2      	ittt	ge
 800722a:	6821      	ldrge	r1, [r4, #0]
 800722c:	f021 0104 	bicge.w	r1, r1, #4
 8007230:	6021      	strge	r1, [r4, #0]
 8007232:	b90e      	cbnz	r6, 8007238 <_printf_i+0x118>
 8007234:	2d00      	cmp	r5, #0
 8007236:	d04d      	beq.n	80072d4 <_printf_i+0x1b4>
 8007238:	4615      	mov	r5, r2
 800723a:	fbb6 f1f3 	udiv	r1, r6, r3
 800723e:	fb03 6711 	mls	r7, r3, r1, r6
 8007242:	5dc7      	ldrb	r7, [r0, r7]
 8007244:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007248:	4637      	mov	r7, r6
 800724a:	42bb      	cmp	r3, r7
 800724c:	460e      	mov	r6, r1
 800724e:	d9f4      	bls.n	800723a <_printf_i+0x11a>
 8007250:	2b08      	cmp	r3, #8
 8007252:	d10b      	bne.n	800726c <_printf_i+0x14c>
 8007254:	6823      	ldr	r3, [r4, #0]
 8007256:	07de      	lsls	r6, r3, #31
 8007258:	d508      	bpl.n	800726c <_printf_i+0x14c>
 800725a:	6923      	ldr	r3, [r4, #16]
 800725c:	6861      	ldr	r1, [r4, #4]
 800725e:	4299      	cmp	r1, r3
 8007260:	bfde      	ittt	le
 8007262:	2330      	movle	r3, #48	; 0x30
 8007264:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007268:	f105 35ff 	addle.w	r5, r5, #4294967295
 800726c:	1b52      	subs	r2, r2, r5
 800726e:	6122      	str	r2, [r4, #16]
 8007270:	f8cd a000 	str.w	sl, [sp]
 8007274:	464b      	mov	r3, r9
 8007276:	aa03      	add	r2, sp, #12
 8007278:	4621      	mov	r1, r4
 800727a:	4640      	mov	r0, r8
 800727c:	f7ff fee2 	bl	8007044 <_printf_common>
 8007280:	3001      	adds	r0, #1
 8007282:	d14c      	bne.n	800731e <_printf_i+0x1fe>
 8007284:	f04f 30ff 	mov.w	r0, #4294967295
 8007288:	b004      	add	sp, #16
 800728a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800728e:	4835      	ldr	r0, [pc, #212]	; (8007364 <_printf_i+0x244>)
 8007290:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007294:	6829      	ldr	r1, [r5, #0]
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	f851 6b04 	ldr.w	r6, [r1], #4
 800729c:	6029      	str	r1, [r5, #0]
 800729e:	061d      	lsls	r5, r3, #24
 80072a0:	d514      	bpl.n	80072cc <_printf_i+0x1ac>
 80072a2:	07df      	lsls	r7, r3, #31
 80072a4:	bf44      	itt	mi
 80072a6:	f043 0320 	orrmi.w	r3, r3, #32
 80072aa:	6023      	strmi	r3, [r4, #0]
 80072ac:	b91e      	cbnz	r6, 80072b6 <_printf_i+0x196>
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	f023 0320 	bic.w	r3, r3, #32
 80072b4:	6023      	str	r3, [r4, #0]
 80072b6:	2310      	movs	r3, #16
 80072b8:	e7b0      	b.n	800721c <_printf_i+0xfc>
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	f043 0320 	orr.w	r3, r3, #32
 80072c0:	6023      	str	r3, [r4, #0]
 80072c2:	2378      	movs	r3, #120	; 0x78
 80072c4:	4828      	ldr	r0, [pc, #160]	; (8007368 <_printf_i+0x248>)
 80072c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072ca:	e7e3      	b.n	8007294 <_printf_i+0x174>
 80072cc:	0659      	lsls	r1, r3, #25
 80072ce:	bf48      	it	mi
 80072d0:	b2b6      	uxthmi	r6, r6
 80072d2:	e7e6      	b.n	80072a2 <_printf_i+0x182>
 80072d4:	4615      	mov	r5, r2
 80072d6:	e7bb      	b.n	8007250 <_printf_i+0x130>
 80072d8:	682b      	ldr	r3, [r5, #0]
 80072da:	6826      	ldr	r6, [r4, #0]
 80072dc:	6961      	ldr	r1, [r4, #20]
 80072de:	1d18      	adds	r0, r3, #4
 80072e0:	6028      	str	r0, [r5, #0]
 80072e2:	0635      	lsls	r5, r6, #24
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	d501      	bpl.n	80072ec <_printf_i+0x1cc>
 80072e8:	6019      	str	r1, [r3, #0]
 80072ea:	e002      	b.n	80072f2 <_printf_i+0x1d2>
 80072ec:	0670      	lsls	r0, r6, #25
 80072ee:	d5fb      	bpl.n	80072e8 <_printf_i+0x1c8>
 80072f0:	8019      	strh	r1, [r3, #0]
 80072f2:	2300      	movs	r3, #0
 80072f4:	6123      	str	r3, [r4, #16]
 80072f6:	4615      	mov	r5, r2
 80072f8:	e7ba      	b.n	8007270 <_printf_i+0x150>
 80072fa:	682b      	ldr	r3, [r5, #0]
 80072fc:	1d1a      	adds	r2, r3, #4
 80072fe:	602a      	str	r2, [r5, #0]
 8007300:	681d      	ldr	r5, [r3, #0]
 8007302:	6862      	ldr	r2, [r4, #4]
 8007304:	2100      	movs	r1, #0
 8007306:	4628      	mov	r0, r5
 8007308:	f7f8 ff62 	bl	80001d0 <memchr>
 800730c:	b108      	cbz	r0, 8007312 <_printf_i+0x1f2>
 800730e:	1b40      	subs	r0, r0, r5
 8007310:	6060      	str	r0, [r4, #4]
 8007312:	6863      	ldr	r3, [r4, #4]
 8007314:	6123      	str	r3, [r4, #16]
 8007316:	2300      	movs	r3, #0
 8007318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800731c:	e7a8      	b.n	8007270 <_printf_i+0x150>
 800731e:	6923      	ldr	r3, [r4, #16]
 8007320:	462a      	mov	r2, r5
 8007322:	4649      	mov	r1, r9
 8007324:	4640      	mov	r0, r8
 8007326:	47d0      	blx	sl
 8007328:	3001      	adds	r0, #1
 800732a:	d0ab      	beq.n	8007284 <_printf_i+0x164>
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	079b      	lsls	r3, r3, #30
 8007330:	d413      	bmi.n	800735a <_printf_i+0x23a>
 8007332:	68e0      	ldr	r0, [r4, #12]
 8007334:	9b03      	ldr	r3, [sp, #12]
 8007336:	4298      	cmp	r0, r3
 8007338:	bfb8      	it	lt
 800733a:	4618      	movlt	r0, r3
 800733c:	e7a4      	b.n	8007288 <_printf_i+0x168>
 800733e:	2301      	movs	r3, #1
 8007340:	4632      	mov	r2, r6
 8007342:	4649      	mov	r1, r9
 8007344:	4640      	mov	r0, r8
 8007346:	47d0      	blx	sl
 8007348:	3001      	adds	r0, #1
 800734a:	d09b      	beq.n	8007284 <_printf_i+0x164>
 800734c:	3501      	adds	r5, #1
 800734e:	68e3      	ldr	r3, [r4, #12]
 8007350:	9903      	ldr	r1, [sp, #12]
 8007352:	1a5b      	subs	r3, r3, r1
 8007354:	42ab      	cmp	r3, r5
 8007356:	dcf2      	bgt.n	800733e <_printf_i+0x21e>
 8007358:	e7eb      	b.n	8007332 <_printf_i+0x212>
 800735a:	2500      	movs	r5, #0
 800735c:	f104 0619 	add.w	r6, r4, #25
 8007360:	e7f5      	b.n	800734e <_printf_i+0x22e>
 8007362:	bf00      	nop
 8007364:	080078ee 	.word	0x080078ee
 8007368:	080078ff 	.word	0x080078ff

0800736c <memmove>:
 800736c:	4288      	cmp	r0, r1
 800736e:	b510      	push	{r4, lr}
 8007370:	eb01 0402 	add.w	r4, r1, r2
 8007374:	d902      	bls.n	800737c <memmove+0x10>
 8007376:	4284      	cmp	r4, r0
 8007378:	4623      	mov	r3, r4
 800737a:	d807      	bhi.n	800738c <memmove+0x20>
 800737c:	1e43      	subs	r3, r0, #1
 800737e:	42a1      	cmp	r1, r4
 8007380:	d008      	beq.n	8007394 <memmove+0x28>
 8007382:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007386:	f803 2f01 	strb.w	r2, [r3, #1]!
 800738a:	e7f8      	b.n	800737e <memmove+0x12>
 800738c:	4402      	add	r2, r0
 800738e:	4601      	mov	r1, r0
 8007390:	428a      	cmp	r2, r1
 8007392:	d100      	bne.n	8007396 <memmove+0x2a>
 8007394:	bd10      	pop	{r4, pc}
 8007396:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800739a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800739e:	e7f7      	b.n	8007390 <memmove+0x24>

080073a0 <_free_r>:
 80073a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073a2:	2900      	cmp	r1, #0
 80073a4:	d044      	beq.n	8007430 <_free_r+0x90>
 80073a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073aa:	9001      	str	r0, [sp, #4]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f1a1 0404 	sub.w	r4, r1, #4
 80073b2:	bfb8      	it	lt
 80073b4:	18e4      	addlt	r4, r4, r3
 80073b6:	f000 f913 	bl	80075e0 <__malloc_lock>
 80073ba:	4a1e      	ldr	r2, [pc, #120]	; (8007434 <_free_r+0x94>)
 80073bc:	9801      	ldr	r0, [sp, #4]
 80073be:	6813      	ldr	r3, [r2, #0]
 80073c0:	b933      	cbnz	r3, 80073d0 <_free_r+0x30>
 80073c2:	6063      	str	r3, [r4, #4]
 80073c4:	6014      	str	r4, [r2, #0]
 80073c6:	b003      	add	sp, #12
 80073c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073cc:	f000 b90e 	b.w	80075ec <__malloc_unlock>
 80073d0:	42a3      	cmp	r3, r4
 80073d2:	d908      	bls.n	80073e6 <_free_r+0x46>
 80073d4:	6825      	ldr	r5, [r4, #0]
 80073d6:	1961      	adds	r1, r4, r5
 80073d8:	428b      	cmp	r3, r1
 80073da:	bf01      	itttt	eq
 80073dc:	6819      	ldreq	r1, [r3, #0]
 80073de:	685b      	ldreq	r3, [r3, #4]
 80073e0:	1949      	addeq	r1, r1, r5
 80073e2:	6021      	streq	r1, [r4, #0]
 80073e4:	e7ed      	b.n	80073c2 <_free_r+0x22>
 80073e6:	461a      	mov	r2, r3
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	b10b      	cbz	r3, 80073f0 <_free_r+0x50>
 80073ec:	42a3      	cmp	r3, r4
 80073ee:	d9fa      	bls.n	80073e6 <_free_r+0x46>
 80073f0:	6811      	ldr	r1, [r2, #0]
 80073f2:	1855      	adds	r5, r2, r1
 80073f4:	42a5      	cmp	r5, r4
 80073f6:	d10b      	bne.n	8007410 <_free_r+0x70>
 80073f8:	6824      	ldr	r4, [r4, #0]
 80073fa:	4421      	add	r1, r4
 80073fc:	1854      	adds	r4, r2, r1
 80073fe:	42a3      	cmp	r3, r4
 8007400:	6011      	str	r1, [r2, #0]
 8007402:	d1e0      	bne.n	80073c6 <_free_r+0x26>
 8007404:	681c      	ldr	r4, [r3, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	6053      	str	r3, [r2, #4]
 800740a:	4421      	add	r1, r4
 800740c:	6011      	str	r1, [r2, #0]
 800740e:	e7da      	b.n	80073c6 <_free_r+0x26>
 8007410:	d902      	bls.n	8007418 <_free_r+0x78>
 8007412:	230c      	movs	r3, #12
 8007414:	6003      	str	r3, [r0, #0]
 8007416:	e7d6      	b.n	80073c6 <_free_r+0x26>
 8007418:	6825      	ldr	r5, [r4, #0]
 800741a:	1961      	adds	r1, r4, r5
 800741c:	428b      	cmp	r3, r1
 800741e:	bf04      	itt	eq
 8007420:	6819      	ldreq	r1, [r3, #0]
 8007422:	685b      	ldreq	r3, [r3, #4]
 8007424:	6063      	str	r3, [r4, #4]
 8007426:	bf04      	itt	eq
 8007428:	1949      	addeq	r1, r1, r5
 800742a:	6021      	streq	r1, [r4, #0]
 800742c:	6054      	str	r4, [r2, #4]
 800742e:	e7ca      	b.n	80073c6 <_free_r+0x26>
 8007430:	b003      	add	sp, #12
 8007432:	bd30      	pop	{r4, r5, pc}
 8007434:	20000748 	.word	0x20000748

08007438 <sbrk_aligned>:
 8007438:	b570      	push	{r4, r5, r6, lr}
 800743a:	4e0e      	ldr	r6, [pc, #56]	; (8007474 <sbrk_aligned+0x3c>)
 800743c:	460c      	mov	r4, r1
 800743e:	6831      	ldr	r1, [r6, #0]
 8007440:	4605      	mov	r5, r0
 8007442:	b911      	cbnz	r1, 800744a <sbrk_aligned+0x12>
 8007444:	f000 f8bc 	bl	80075c0 <_sbrk_r>
 8007448:	6030      	str	r0, [r6, #0]
 800744a:	4621      	mov	r1, r4
 800744c:	4628      	mov	r0, r5
 800744e:	f000 f8b7 	bl	80075c0 <_sbrk_r>
 8007452:	1c43      	adds	r3, r0, #1
 8007454:	d00a      	beq.n	800746c <sbrk_aligned+0x34>
 8007456:	1cc4      	adds	r4, r0, #3
 8007458:	f024 0403 	bic.w	r4, r4, #3
 800745c:	42a0      	cmp	r0, r4
 800745e:	d007      	beq.n	8007470 <sbrk_aligned+0x38>
 8007460:	1a21      	subs	r1, r4, r0
 8007462:	4628      	mov	r0, r5
 8007464:	f000 f8ac 	bl	80075c0 <_sbrk_r>
 8007468:	3001      	adds	r0, #1
 800746a:	d101      	bne.n	8007470 <sbrk_aligned+0x38>
 800746c:	f04f 34ff 	mov.w	r4, #4294967295
 8007470:	4620      	mov	r0, r4
 8007472:	bd70      	pop	{r4, r5, r6, pc}
 8007474:	2000074c 	.word	0x2000074c

08007478 <_malloc_r>:
 8007478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800747c:	1ccd      	adds	r5, r1, #3
 800747e:	f025 0503 	bic.w	r5, r5, #3
 8007482:	3508      	adds	r5, #8
 8007484:	2d0c      	cmp	r5, #12
 8007486:	bf38      	it	cc
 8007488:	250c      	movcc	r5, #12
 800748a:	2d00      	cmp	r5, #0
 800748c:	4607      	mov	r7, r0
 800748e:	db01      	blt.n	8007494 <_malloc_r+0x1c>
 8007490:	42a9      	cmp	r1, r5
 8007492:	d905      	bls.n	80074a0 <_malloc_r+0x28>
 8007494:	230c      	movs	r3, #12
 8007496:	603b      	str	r3, [r7, #0]
 8007498:	2600      	movs	r6, #0
 800749a:	4630      	mov	r0, r6
 800749c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074a0:	4e2e      	ldr	r6, [pc, #184]	; (800755c <_malloc_r+0xe4>)
 80074a2:	f000 f89d 	bl	80075e0 <__malloc_lock>
 80074a6:	6833      	ldr	r3, [r6, #0]
 80074a8:	461c      	mov	r4, r3
 80074aa:	bb34      	cbnz	r4, 80074fa <_malloc_r+0x82>
 80074ac:	4629      	mov	r1, r5
 80074ae:	4638      	mov	r0, r7
 80074b0:	f7ff ffc2 	bl	8007438 <sbrk_aligned>
 80074b4:	1c43      	adds	r3, r0, #1
 80074b6:	4604      	mov	r4, r0
 80074b8:	d14d      	bne.n	8007556 <_malloc_r+0xde>
 80074ba:	6834      	ldr	r4, [r6, #0]
 80074bc:	4626      	mov	r6, r4
 80074be:	2e00      	cmp	r6, #0
 80074c0:	d140      	bne.n	8007544 <_malloc_r+0xcc>
 80074c2:	6823      	ldr	r3, [r4, #0]
 80074c4:	4631      	mov	r1, r6
 80074c6:	4638      	mov	r0, r7
 80074c8:	eb04 0803 	add.w	r8, r4, r3
 80074cc:	f000 f878 	bl	80075c0 <_sbrk_r>
 80074d0:	4580      	cmp	r8, r0
 80074d2:	d13a      	bne.n	800754a <_malloc_r+0xd2>
 80074d4:	6821      	ldr	r1, [r4, #0]
 80074d6:	3503      	adds	r5, #3
 80074d8:	1a6d      	subs	r5, r5, r1
 80074da:	f025 0503 	bic.w	r5, r5, #3
 80074de:	3508      	adds	r5, #8
 80074e0:	2d0c      	cmp	r5, #12
 80074e2:	bf38      	it	cc
 80074e4:	250c      	movcc	r5, #12
 80074e6:	4629      	mov	r1, r5
 80074e8:	4638      	mov	r0, r7
 80074ea:	f7ff ffa5 	bl	8007438 <sbrk_aligned>
 80074ee:	3001      	adds	r0, #1
 80074f0:	d02b      	beq.n	800754a <_malloc_r+0xd2>
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	442b      	add	r3, r5
 80074f6:	6023      	str	r3, [r4, #0]
 80074f8:	e00e      	b.n	8007518 <_malloc_r+0xa0>
 80074fa:	6822      	ldr	r2, [r4, #0]
 80074fc:	1b52      	subs	r2, r2, r5
 80074fe:	d41e      	bmi.n	800753e <_malloc_r+0xc6>
 8007500:	2a0b      	cmp	r2, #11
 8007502:	d916      	bls.n	8007532 <_malloc_r+0xba>
 8007504:	1961      	adds	r1, r4, r5
 8007506:	42a3      	cmp	r3, r4
 8007508:	6025      	str	r5, [r4, #0]
 800750a:	bf18      	it	ne
 800750c:	6059      	strne	r1, [r3, #4]
 800750e:	6863      	ldr	r3, [r4, #4]
 8007510:	bf08      	it	eq
 8007512:	6031      	streq	r1, [r6, #0]
 8007514:	5162      	str	r2, [r4, r5]
 8007516:	604b      	str	r3, [r1, #4]
 8007518:	4638      	mov	r0, r7
 800751a:	f104 060b 	add.w	r6, r4, #11
 800751e:	f000 f865 	bl	80075ec <__malloc_unlock>
 8007522:	f026 0607 	bic.w	r6, r6, #7
 8007526:	1d23      	adds	r3, r4, #4
 8007528:	1af2      	subs	r2, r6, r3
 800752a:	d0b6      	beq.n	800749a <_malloc_r+0x22>
 800752c:	1b9b      	subs	r3, r3, r6
 800752e:	50a3      	str	r3, [r4, r2]
 8007530:	e7b3      	b.n	800749a <_malloc_r+0x22>
 8007532:	6862      	ldr	r2, [r4, #4]
 8007534:	42a3      	cmp	r3, r4
 8007536:	bf0c      	ite	eq
 8007538:	6032      	streq	r2, [r6, #0]
 800753a:	605a      	strne	r2, [r3, #4]
 800753c:	e7ec      	b.n	8007518 <_malloc_r+0xa0>
 800753e:	4623      	mov	r3, r4
 8007540:	6864      	ldr	r4, [r4, #4]
 8007542:	e7b2      	b.n	80074aa <_malloc_r+0x32>
 8007544:	4634      	mov	r4, r6
 8007546:	6876      	ldr	r6, [r6, #4]
 8007548:	e7b9      	b.n	80074be <_malloc_r+0x46>
 800754a:	230c      	movs	r3, #12
 800754c:	603b      	str	r3, [r7, #0]
 800754e:	4638      	mov	r0, r7
 8007550:	f000 f84c 	bl	80075ec <__malloc_unlock>
 8007554:	e7a1      	b.n	800749a <_malloc_r+0x22>
 8007556:	6025      	str	r5, [r4, #0]
 8007558:	e7de      	b.n	8007518 <_malloc_r+0xa0>
 800755a:	bf00      	nop
 800755c:	20000748 	.word	0x20000748

08007560 <_realloc_r>:
 8007560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007564:	4680      	mov	r8, r0
 8007566:	4614      	mov	r4, r2
 8007568:	460e      	mov	r6, r1
 800756a:	b921      	cbnz	r1, 8007576 <_realloc_r+0x16>
 800756c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007570:	4611      	mov	r1, r2
 8007572:	f7ff bf81 	b.w	8007478 <_malloc_r>
 8007576:	b92a      	cbnz	r2, 8007584 <_realloc_r+0x24>
 8007578:	f7ff ff12 	bl	80073a0 <_free_r>
 800757c:	4625      	mov	r5, r4
 800757e:	4628      	mov	r0, r5
 8007580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007584:	f000 f838 	bl	80075f8 <_malloc_usable_size_r>
 8007588:	4284      	cmp	r4, r0
 800758a:	4607      	mov	r7, r0
 800758c:	d802      	bhi.n	8007594 <_realloc_r+0x34>
 800758e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007592:	d812      	bhi.n	80075ba <_realloc_r+0x5a>
 8007594:	4621      	mov	r1, r4
 8007596:	4640      	mov	r0, r8
 8007598:	f7ff ff6e 	bl	8007478 <_malloc_r>
 800759c:	4605      	mov	r5, r0
 800759e:	2800      	cmp	r0, #0
 80075a0:	d0ed      	beq.n	800757e <_realloc_r+0x1e>
 80075a2:	42bc      	cmp	r4, r7
 80075a4:	4622      	mov	r2, r4
 80075a6:	4631      	mov	r1, r6
 80075a8:	bf28      	it	cs
 80075aa:	463a      	movcs	r2, r7
 80075ac:	f7ff fb18 	bl	8006be0 <memcpy>
 80075b0:	4631      	mov	r1, r6
 80075b2:	4640      	mov	r0, r8
 80075b4:	f7ff fef4 	bl	80073a0 <_free_r>
 80075b8:	e7e1      	b.n	800757e <_realloc_r+0x1e>
 80075ba:	4635      	mov	r5, r6
 80075bc:	e7df      	b.n	800757e <_realloc_r+0x1e>
	...

080075c0 <_sbrk_r>:
 80075c0:	b538      	push	{r3, r4, r5, lr}
 80075c2:	4d06      	ldr	r5, [pc, #24]	; (80075dc <_sbrk_r+0x1c>)
 80075c4:	2300      	movs	r3, #0
 80075c6:	4604      	mov	r4, r0
 80075c8:	4608      	mov	r0, r1
 80075ca:	602b      	str	r3, [r5, #0]
 80075cc:	f7fb f9d2 	bl	8002974 <_sbrk>
 80075d0:	1c43      	adds	r3, r0, #1
 80075d2:	d102      	bne.n	80075da <_sbrk_r+0x1a>
 80075d4:	682b      	ldr	r3, [r5, #0]
 80075d6:	b103      	cbz	r3, 80075da <_sbrk_r+0x1a>
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	bd38      	pop	{r3, r4, r5, pc}
 80075dc:	20000750 	.word	0x20000750

080075e0 <__malloc_lock>:
 80075e0:	4801      	ldr	r0, [pc, #4]	; (80075e8 <__malloc_lock+0x8>)
 80075e2:	f000 b811 	b.w	8007608 <__retarget_lock_acquire_recursive>
 80075e6:	bf00      	nop
 80075e8:	20000754 	.word	0x20000754

080075ec <__malloc_unlock>:
 80075ec:	4801      	ldr	r0, [pc, #4]	; (80075f4 <__malloc_unlock+0x8>)
 80075ee:	f000 b80c 	b.w	800760a <__retarget_lock_release_recursive>
 80075f2:	bf00      	nop
 80075f4:	20000754 	.word	0x20000754

080075f8 <_malloc_usable_size_r>:
 80075f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075fc:	1f18      	subs	r0, r3, #4
 80075fe:	2b00      	cmp	r3, #0
 8007600:	bfbc      	itt	lt
 8007602:	580b      	ldrlt	r3, [r1, r0]
 8007604:	18c0      	addlt	r0, r0, r3
 8007606:	4770      	bx	lr

08007608 <__retarget_lock_acquire_recursive>:
 8007608:	4770      	bx	lr

0800760a <__retarget_lock_release_recursive>:
 800760a:	4770      	bx	lr

0800760c <_init>:
 800760c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760e:	bf00      	nop
 8007610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007612:	bc08      	pop	{r3}
 8007614:	469e      	mov	lr, r3
 8007616:	4770      	bx	lr

08007618 <_fini>:
 8007618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761a:	bf00      	nop
 800761c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800761e:	bc08      	pop	{r3}
 8007620:	469e      	mov	lr, r3
 8007622:	4770      	bx	lr
