
Proyecto0.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac4  08005ff8  08005ff8  00015ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006abc  08006abc  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006abc  08006abc  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006abc  08006abc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006abc  08006abc  00016abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ac0  08006ac0  00016ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b08  20000078  08006b3c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b80  08006b3c  00020b80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011227  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a3  00000000  00000000  000312cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  00033878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  00034650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000023fe  00000000  00000000  00035370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e4c  00000000  00000000  0003776e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6ae5  00000000  00000000  000495ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f009f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003de0  00000000  00000000  000f00f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005fe0 	.word	0x08005fe0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005fe0 	.word	0x08005fe0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <ESP_Init>:

char *Terminate = "</body></html>";

/*****************************************************************************************************************************************/

void ESP_Init(char *SSID, char *PASSWD) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b098      	sub	sp, #96	; 0x60
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 80002aa:	f000 fbf9 	bl	8000aa0 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n", wif_uart);
 80002ae:	495d      	ldr	r1, [pc, #372]	; (8000424 <ESP_Init+0x184>)
 80002b0:	485d      	ldr	r0, [pc, #372]	; (8000428 <ESP_Init+0x188>)
 80002b2:	f000 fe34 	bl	8000f1e <Uart_sendstring>
	Uart_sendstring("RESETTING.", pcc_uart);
 80002b6:	495d      	ldr	r1, [pc, #372]	; (800042c <ESP_Init+0x18c>)
 80002b8:	485d      	ldr	r0, [pc, #372]	; (8000430 <ESP_Init+0x190>)
 80002ba:	f000 fe30 	bl	8000f1e <Uart_sendstring>
	for (int i = 0; i < 5; i++) {
 80002be:	2300      	movs	r3, #0
 80002c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80002c2:	e00a      	b.n	80002da <ESP_Init+0x3a>
		Uart_sendstring(".", pcc_uart);
 80002c4:	4959      	ldr	r1, [pc, #356]	; (800042c <ESP_Init+0x18c>)
 80002c6:	485b      	ldr	r0, [pc, #364]	; (8000434 <ESP_Init+0x194>)
 80002c8:	f000 fe29 	bl	8000f1e <Uart_sendstring>
		HAL_Delay(1000);
 80002cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d0:	f001 fcf6 	bl	8001cc0 <HAL_Delay>
	for (int i = 0; i < 5; i++) {
 80002d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80002d6:	3301      	adds	r3, #1
 80002d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80002da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80002dc:	2b04      	cmp	r3, #4
 80002de:	ddf1      	ble.n	80002c4 <ESP_Init+0x24>
	}

	/********* AT **********/
	Uart_sendstring("AT\r\n", wif_uart);
 80002e0:	4950      	ldr	r1, [pc, #320]	; (8000424 <ESP_Init+0x184>)
 80002e2:	4855      	ldr	r0, [pc, #340]	; (8000438 <ESP_Init+0x198>)
 80002e4:	f000 fe1b 	bl	8000f1e <Uart_sendstring>
	while (!(Wait_for("AT\r\r\n\r\nOK\r\n", wif_uart)))
 80002e8:	bf00      	nop
 80002ea:	494e      	ldr	r1, [pc, #312]	; (8000424 <ESP_Init+0x184>)
 80002ec:	4853      	ldr	r0, [pc, #332]	; (800043c <ESP_Init+0x19c>)
 80002ee:	f000 feab 	bl	8001048 <Wait_for>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d0f8      	beq.n	80002ea <ESP_Init+0x4a>
		;
	Uart_sendstring("AT---->OK\n\n", pcc_uart);
 80002f8:	494c      	ldr	r1, [pc, #304]	; (800042c <ESP_Init+0x18c>)
 80002fa:	4851      	ldr	r0, [pc, #324]	; (8000440 <ESP_Init+0x1a0>)
 80002fc:	f000 fe0f 	bl	8000f1e <Uart_sendstring>

	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n", wif_uart);
 8000300:	4948      	ldr	r1, [pc, #288]	; (8000424 <ESP_Init+0x184>)
 8000302:	4850      	ldr	r0, [pc, #320]	; (8000444 <ESP_Init+0x1a4>)
 8000304:	f000 fe0b 	bl	8000f1e <Uart_sendstring>
	while (!(Wait_for("AT+CWMODE=1\r\r\n\r\nOK\r\n", wif_uart)))
 8000308:	bf00      	nop
 800030a:	4946      	ldr	r1, [pc, #280]	; (8000424 <ESP_Init+0x184>)
 800030c:	484e      	ldr	r0, [pc, #312]	; (8000448 <ESP_Init+0x1a8>)
 800030e:	f000 fe9b 	bl	8001048 <Wait_for>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d0f8      	beq.n	800030a <ESP_Init+0x6a>
		;
	Uart_sendstring("CW MODE---->1\n\n", pcc_uart);
 8000318:	4944      	ldr	r1, [pc, #272]	; (800042c <ESP_Init+0x18c>)
 800031a:	484c      	ldr	r0, [pc, #304]	; (800044c <ESP_Init+0x1ac>)
 800031c:	f000 fdff 	bl	8000f1e <Uart_sendstring>

	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_sendstring("connecting... to the provided AP\n", pcc_uart);
 8000320:	4942      	ldr	r1, [pc, #264]	; (800042c <ESP_Init+0x18c>)
 8000322:	484b      	ldr	r0, [pc, #300]	; (8000450 <ESP_Init+0x1b0>)
 8000324:	f000 fdfb 	bl	8000f1e <Uart_sendstring>
	sprintf(data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8000328:	f107 0008 	add.w	r0, r7, #8
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	687a      	ldr	r2, [r7, #4]
 8000330:	4948      	ldr	r1, [pc, #288]	; (8000454 <ESP_Init+0x1b4>)
 8000332:	f005 fad5 	bl	80058e0 <siprintf>
	Uart_sendstring(data, wif_uart);
 8000336:	f107 0308 	add.w	r3, r7, #8
 800033a:	493a      	ldr	r1, [pc, #232]	; (8000424 <ESP_Init+0x184>)
 800033c:	4618      	mov	r0, r3
 800033e:	f000 fdee 	bl	8000f1e <Uart_sendstring>
	while (!(Wait_for("WIFI GOT IP\r\n\r\nOK\r\n", wif_uart)))
 8000342:	bf00      	nop
 8000344:	4937      	ldr	r1, [pc, #220]	; (8000424 <ESP_Init+0x184>)
 8000346:	4844      	ldr	r0, [pc, #272]	; (8000458 <ESP_Init+0x1b8>)
 8000348:	f000 fe7e 	bl	8001048 <Wait_for>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d0f8      	beq.n	8000344 <ESP_Init+0xa4>
		;
	sprintf(data, "Connected to,\"%s\"\n\n", SSID);
 8000352:	f107 0308 	add.w	r3, r7, #8
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	4940      	ldr	r1, [pc, #256]	; (800045c <ESP_Init+0x1bc>)
 800035a:	4618      	mov	r0, r3
 800035c:	f005 fac0 	bl	80058e0 <siprintf>
	Uart_sendstring(data, pcc_uart);
 8000360:	f107 0308 	add.w	r3, r7, #8
 8000364:	4931      	ldr	r1, [pc, #196]	; (800042c <ESP_Init+0x18c>)
 8000366:	4618      	mov	r0, r3
 8000368:	f000 fdd9 	bl	8000f1e <Uart_sendstring>

	/********* AT+CIFSR **********/
	Uart_sendstring("AT+CIFSR\r\n", wif_uart);
 800036c:	492d      	ldr	r1, [pc, #180]	; (8000424 <ESP_Init+0x184>)
 800036e:	483c      	ldr	r0, [pc, #240]	; (8000460 <ESP_Init+0x1c0>)
 8000370:	f000 fdd5 	bl	8000f1e <Uart_sendstring>
	while (!(Wait_for("CIFSR:STAIP,\"", wif_uart)))
 8000374:	bf00      	nop
 8000376:	492b      	ldr	r1, [pc, #172]	; (8000424 <ESP_Init+0x184>)
 8000378:	483a      	ldr	r0, [pc, #232]	; (8000464 <ESP_Init+0x1c4>)
 800037a:	f000 fe65 	bl	8001048 <Wait_for>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d0f8      	beq.n	8000376 <ESP_Init+0xd6>
		;
	while (!(Copy_upto("\"", buffer, wif_uart)))
 8000384:	bf00      	nop
 8000386:	4a27      	ldr	r2, [pc, #156]	; (8000424 <ESP_Init+0x184>)
 8000388:	4937      	ldr	r1, [pc, #220]	; (8000468 <ESP_Init+0x1c8>)
 800038a:	4838      	ldr	r0, [pc, #224]	; (800046c <ESP_Init+0x1cc>)
 800038c:	f000 fdde 	bl	8000f4c <Copy_upto>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d0f7      	beq.n	8000386 <ESP_Init+0xe6>
		;
	while (!(Wait_for("OK\r\n", wif_uart)))
 8000396:	bf00      	nop
 8000398:	4922      	ldr	r1, [pc, #136]	; (8000424 <ESP_Init+0x184>)
 800039a:	4835      	ldr	r0, [pc, #212]	; (8000470 <ESP_Init+0x1d0>)
 800039c:	f000 fe54 	bl	8001048 <Wait_for>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d0f8      	beq.n	8000398 <ESP_Init+0xf8>
		;
	int len = strlen(buffer);
 80003a6:	4830      	ldr	r0, [pc, #192]	; (8000468 <ESP_Init+0x1c8>)
 80003a8:	f7ff ff1c 	bl	80001e4 <strlen>
 80003ac:	4603      	mov	r3, r0
 80003ae:	65bb      	str	r3, [r7, #88]	; 0x58
	buffer[len - 1] = '\0';
 80003b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80003b2:	3b01      	subs	r3, #1
 80003b4:	4a2c      	ldr	r2, [pc, #176]	; (8000468 <ESP_Init+0x1c8>)
 80003b6:	2100      	movs	r1, #0
 80003b8:	54d1      	strb	r1, [r2, r3]
	sprintf(data, "IP ADDR: %s\n\n", buffer);
 80003ba:	f107 0308 	add.w	r3, r7, #8
 80003be:	4a2a      	ldr	r2, [pc, #168]	; (8000468 <ESP_Init+0x1c8>)
 80003c0:	492c      	ldr	r1, [pc, #176]	; (8000474 <ESP_Init+0x1d4>)
 80003c2:	4618      	mov	r0, r3
 80003c4:	f005 fa8c 	bl	80058e0 <siprintf>
	Uart_sendstring(data, pcc_uart);
 80003c8:	f107 0308 	add.w	r3, r7, #8
 80003cc:	4917      	ldr	r1, [pc, #92]	; (800042c <ESP_Init+0x18c>)
 80003ce:	4618      	mov	r0, r3
 80003d0:	f000 fda5 	bl	8000f1e <Uart_sendstring>

	Uart_sendstring("AT+CIPMUX=1\r\n", wif_uart);
 80003d4:	4913      	ldr	r1, [pc, #76]	; (8000424 <ESP_Init+0x184>)
 80003d6:	4828      	ldr	r0, [pc, #160]	; (8000478 <ESP_Init+0x1d8>)
 80003d8:	f000 fda1 	bl	8000f1e <Uart_sendstring>
	while (!(Wait_for("AT+CIPMUX=1\r\r\n\r\nOK\r\n", wif_uart)))
 80003dc:	bf00      	nop
 80003de:	4911      	ldr	r1, [pc, #68]	; (8000424 <ESP_Init+0x184>)
 80003e0:	4826      	ldr	r0, [pc, #152]	; (800047c <ESP_Init+0x1dc>)
 80003e2:	f000 fe31 	bl	8001048 <Wait_for>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d0f8      	beq.n	80003de <ESP_Init+0x13e>
		;
	Uart_sendstring("CIPMUX---->OK\n\n", pcc_uart);
 80003ec:	490f      	ldr	r1, [pc, #60]	; (800042c <ESP_Init+0x18c>)
 80003ee:	4824      	ldr	r0, [pc, #144]	; (8000480 <ESP_Init+0x1e0>)
 80003f0:	f000 fd95 	bl	8000f1e <Uart_sendstring>

	Uart_sendstring("AT+CIPSERVER=1,80\r\n", wif_uart);
 80003f4:	490b      	ldr	r1, [pc, #44]	; (8000424 <ESP_Init+0x184>)
 80003f6:	4823      	ldr	r0, [pc, #140]	; (8000484 <ESP_Init+0x1e4>)
 80003f8:	f000 fd91 	bl	8000f1e <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wif_uart)))
 80003fc:	bf00      	nop
 80003fe:	4909      	ldr	r1, [pc, #36]	; (8000424 <ESP_Init+0x184>)
 8000400:	481b      	ldr	r0, [pc, #108]	; (8000470 <ESP_Init+0x1d0>)
 8000402:	f000 fe21 	bl	8001048 <Wait_for>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d0f8      	beq.n	80003fe <ESP_Init+0x15e>
		;
	Uart_sendstring("CIPSERVER---->OK\n\n", pcc_uart);
 800040c:	4907      	ldr	r1, [pc, #28]	; (800042c <ESP_Init+0x18c>)
 800040e:	481e      	ldr	r0, [pc, #120]	; (8000488 <ESP_Init+0x1e8>)
 8000410:	f000 fd85 	bl	8000f1e <Uart_sendstring>

	Uart_sendstring("Now Connect to the IP ADRESS\n\n", pcc_uart);
 8000414:	4905      	ldr	r1, [pc, #20]	; (800042c <ESP_Init+0x18c>)
 8000416:	481d      	ldr	r0, [pc, #116]	; (800048c <ESP_Init+0x1ec>)
 8000418:	f000 fd81 	bl	8000f1e <Uart_sendstring>

}
 800041c:	bf00      	nop
 800041e:	3760      	adds	r7, #96	; 0x60
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	200009d0 	.word	0x200009d0
 8000428:	08006538 	.word	0x08006538
 800042c:	20000a58 	.word	0x20000a58
 8000430:	08006544 	.word	0x08006544
 8000434:	08006550 	.word	0x08006550
 8000438:	08006554 	.word	0x08006554
 800043c:	0800655c 	.word	0x0800655c
 8000440:	08006568 	.word	0x08006568
 8000444:	08006574 	.word	0x08006574
 8000448:	08006584 	.word	0x08006584
 800044c:	0800659c 	.word	0x0800659c
 8000450:	080065ac 	.word	0x080065ac
 8000454:	080065d0 	.word	0x080065d0
 8000458:	080065e8 	.word	0x080065e8
 800045c:	080065fc 	.word	0x080065fc
 8000460:	08006610 	.word	0x08006610
 8000464:	0800661c 	.word	0x0800661c
 8000468:	200000a8 	.word	0x200000a8
 800046c:	0800662c 	.word	0x0800662c
 8000470:	08006630 	.word	0x08006630
 8000474:	08006638 	.word	0x08006638
 8000478:	08006648 	.word	0x08006648
 800047c:	08006658 	.word	0x08006658
 8000480:	08006670 	.word	0x08006670
 8000484:	08006680 	.word	0x08006680
 8000488:	08006694 	.word	0x08006694
 800048c:	080066a8 	.word	0x080066a8

08000490 <Server_Send>:

int Server_Send(char *str, int Link_ID) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b098      	sub	sp, #96	; 0x60
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	6039      	str	r1, [r7, #0]
	int len = strlen(str);
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	f7ff fea2 	bl	80001e4 <strlen>
 80004a0:	4603      	mov	r3, r0
 80004a2:	65fb      	str	r3, [r7, #92]	; 0x5c
	char data[80];
	sprintf(data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 80004a4:	f107 000c 	add.w	r0, r7, #12
 80004a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80004aa:	683a      	ldr	r2, [r7, #0]
 80004ac:	491a      	ldr	r1, [pc, #104]	; (8000518 <Server_Send+0x88>)
 80004ae:	f005 fa17 	bl	80058e0 <siprintf>
	Uart_sendstring(data, wif_uart);
 80004b2:	f107 030c 	add.w	r3, r7, #12
 80004b6:	4919      	ldr	r1, [pc, #100]	; (800051c <Server_Send+0x8c>)
 80004b8:	4618      	mov	r0, r3
 80004ba:	f000 fd30 	bl	8000f1e <Uart_sendstring>
	while (!(Wait_for(">", wif_uart)))
 80004be:	bf00      	nop
 80004c0:	4916      	ldr	r1, [pc, #88]	; (800051c <Server_Send+0x8c>)
 80004c2:	4817      	ldr	r0, [pc, #92]	; (8000520 <Server_Send+0x90>)
 80004c4:	f000 fdc0 	bl	8001048 <Wait_for>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d0f8      	beq.n	80004c0 <Server_Send+0x30>
		;

	Uart_sendstring(str, wif_uart);
 80004ce:	4913      	ldr	r1, [pc, #76]	; (800051c <Server_Send+0x8c>)
 80004d0:	6878      	ldr	r0, [r7, #4]
 80004d2:	f000 fd24 	bl	8000f1e <Uart_sendstring>
	while (!(Wait_for("SEND OK", wif_uart)))
 80004d6:	bf00      	nop
 80004d8:	4910      	ldr	r1, [pc, #64]	; (800051c <Server_Send+0x8c>)
 80004da:	4812      	ldr	r0, [pc, #72]	; (8000524 <Server_Send+0x94>)
 80004dc:	f000 fdb4 	bl	8001048 <Wait_for>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d0f8      	beq.n	80004d8 <Server_Send+0x48>
		;
	sprintf(data, "AT+CIPCLOSE=5\r\n");
 80004e6:	f107 030c 	add.w	r3, r7, #12
 80004ea:	490f      	ldr	r1, [pc, #60]	; (8000528 <Server_Send+0x98>)
 80004ec:	4618      	mov	r0, r3
 80004ee:	f005 f9f7 	bl	80058e0 <siprintf>
	Uart_sendstring(data, wif_uart);
 80004f2:	f107 030c 	add.w	r3, r7, #12
 80004f6:	4909      	ldr	r1, [pc, #36]	; (800051c <Server_Send+0x8c>)
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 fd10 	bl	8000f1e <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wif_uart)))
 80004fe:	bf00      	nop
 8000500:	4906      	ldr	r1, [pc, #24]	; (800051c <Server_Send+0x8c>)
 8000502:	480a      	ldr	r0, [pc, #40]	; (800052c <Server_Send+0x9c>)
 8000504:	f000 fda0 	bl	8001048 <Wait_for>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d0f8      	beq.n	8000500 <Server_Send+0x70>
		;
	return 1;
 800050e:	2301      	movs	r3, #1
}
 8000510:	4618      	mov	r0, r3
 8000512:	3760      	adds	r7, #96	; 0x60
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	080066c8 	.word	0x080066c8
 800051c:	200009d0 	.word	0x200009d0
 8000520:	080066dc 	.word	0x080066dc
 8000524:	080066e0 	.word	0x080066e0
 8000528:	080066e8 	.word	0x080066e8
 800052c:	08006630 	.word	0x08006630

08000530 <generateResponse>:
void delay_ms(uint32_t milliseconds) {
    uint32_t tickstart = HAL_GetTick();
    while ((HAL_GetTick() - tickstart) < milliseconds) {}
}
// Función para generar la respuesta HTML para el estado de los LED
char* generateResponse() {
 8000530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
	char *response = (char*) malloc(1024); // Ajusta el tamaño del búfer según tus necesidades
 8000536:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800053a:	f005 f8bb 	bl	80056b4 <malloc>
 800053e:	4603      	mov	r3, r0
 8000540:	607b      	str	r3, [r7, #4]

	// Construir la respuesta HTML según el estado actual de los LED
	sprintf(response, "%s", Basic_inclusion);
 8000542:	4b60      	ldr	r3, [pc, #384]	; (80006c4 <generateResponse+0x194>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	461a      	mov	r2, r3
 8000548:	495f      	ldr	r1, [pc, #380]	; (80006c8 <generateResponse+0x198>)
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f005 f9c8 	bl	80058e0 <siprintf>

	if (led1_state == LED1_ON) {
 8000550:	4b5e      	ldr	r3, [pc, #376]	; (80006cc <generateResponse+0x19c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d10e      	bne.n	8000576 <generateResponse+0x46>

		strcat(response,
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f7ff fe43 	bl	80001e4 <strlen>
 800055e:	4603      	mov	r3, r0
 8000560:	461a      	mov	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4413      	add	r3, r2
 8000566:	4a5a      	ldr	r2, [pc, #360]	; (80006d0 <generateResponse+0x1a0>)
 8000568:	4618      	mov	r0, r3
 800056a:	4611      	mov	r1, r2
 800056c:	2342      	movs	r3, #66	; 0x42
 800056e:	461a      	mov	r2, r3
 8000570:	f005 f8b0 	bl	80056d4 <memcpy>
 8000574:	e017      	b.n	80005a6 <generateResponse+0x76>
				"<p>NIVEL 1</p><a class=\"button button-off\" href=\"/ledoff\">-1-</a>");

	} else {
		//delay_ms(2000);
		strcat(response,
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f7ff fe34 	bl	80001e4 <strlen>
 800057c:	4603      	mov	r3, r0
 800057e:	461a      	mov	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4413      	add	r3, r2
 8000584:	4a53      	ldr	r2, [pc, #332]	; (80006d4 <generateResponse+0x1a4>)
 8000586:	4614      	mov	r4, r2
 8000588:	469c      	mov	ip, r3
 800058a:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 800058e:	4665      	mov	r5, ip
 8000590:	4626      	mov	r6, r4
 8000592:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000594:	6028      	str	r0, [r5, #0]
 8000596:	6069      	str	r1, [r5, #4]
 8000598:	60aa      	str	r2, [r5, #8]
 800059a:	60eb      	str	r3, [r5, #12]
 800059c:	3410      	adds	r4, #16
 800059e:	f10c 0c10 	add.w	ip, ip, #16
 80005a2:	4574      	cmp	r4, lr
 80005a4:	d1f3      	bne.n	800058e <generateResponse+0x5e>
				"<p>NIVEL 1</p><a class=\"button button-on\" href=\"/ledon\">-1-</a>");

	}

	if (led2_state == LED2_ON) {
 80005a6:	4b4c      	ldr	r3, [pc, #304]	; (80006d8 <generateResponse+0x1a8>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d10e      	bne.n	80005cc <generateResponse+0x9c>
		strcat(response,
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f7ff fe18 	bl	80001e4 <strlen>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4413      	add	r3, r2
 80005bc:	4a47      	ldr	r2, [pc, #284]	; (80006dc <generateResponse+0x1ac>)
 80005be:	4618      	mov	r0, r3
 80005c0:	4611      	mov	r1, r2
 80005c2:	2343      	movs	r3, #67	; 0x43
 80005c4:	461a      	mov	r2, r3
 80005c6:	f005 f885 	bl	80056d4 <memcpy>
 80005ca:	e00d      	b.n	80005e8 <generateResponse+0xb8>
				"<p>NIVEL 2</p><a class=\"button button-off\" href=\"/led2off\">-2-</a>");
	} else {
		strcat(response,
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f7ff fe09 	bl	80001e4 <strlen>
 80005d2:	4603      	mov	r3, r0
 80005d4:	461a      	mov	r2, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	4a41      	ldr	r2, [pc, #260]	; (80006e0 <generateResponse+0x1b0>)
 80005dc:	4618      	mov	r0, r3
 80005de:	4611      	mov	r1, r2
 80005e0:	2341      	movs	r3, #65	; 0x41
 80005e2:	461a      	mov	r2, r3
 80005e4:	f005 f876 	bl	80056d4 <memcpy>
				"<p>NIVEL 2</p><a class=\"button button-on\" href=\"/led2on\">-2-</a>");
	}
	if (led3_state == LED3_ON) {
 80005e8:	4b3e      	ldr	r3, [pc, #248]	; (80006e4 <generateResponse+0x1b4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d10e      	bne.n	800060e <generateResponse+0xde>
		strcat(response,
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f7ff fdf7 	bl	80001e4 <strlen>
 80005f6:	4603      	mov	r3, r0
 80005f8:	461a      	mov	r2, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	4a3a      	ldr	r2, [pc, #232]	; (80006e8 <generateResponse+0x1b8>)
 8000600:	4618      	mov	r0, r3
 8000602:	4611      	mov	r1, r2
 8000604:	2343      	movs	r3, #67	; 0x43
 8000606:	461a      	mov	r2, r3
 8000608:	f005 f864 	bl	80056d4 <memcpy>
 800060c:	e00d      	b.n	800062a <generateResponse+0xfa>
				"<p>NIVEL 3</p><a class=\"button button-off\" href=\"/led3off\">-3-</a>");
	} else {
		strcat(response,
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f7ff fde8 	bl	80001e4 <strlen>
 8000614:	4603      	mov	r3, r0
 8000616:	461a      	mov	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4413      	add	r3, r2
 800061c:	4a33      	ldr	r2, [pc, #204]	; (80006ec <generateResponse+0x1bc>)
 800061e:	4618      	mov	r0, r3
 8000620:	4611      	mov	r1, r2
 8000622:	2341      	movs	r3, #65	; 0x41
 8000624:	461a      	mov	r2, r3
 8000626:	f005 f855 	bl	80056d4 <memcpy>
				"<p>NIVEL 3</p><a class=\"button button-on\" href=\"/led3on\">-3-</a>");
	}
	if (led4_state == LED4_ON) {
 800062a:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <generateResponse+0x1c0>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d10e      	bne.n	8000650 <generateResponse+0x120>
		strcat(response,
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f7ff fdd6 	bl	80001e4 <strlen>
 8000638:	4603      	mov	r3, r0
 800063a:	461a      	mov	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4413      	add	r3, r2
 8000640:	4a2c      	ldr	r2, [pc, #176]	; (80006f4 <generateResponse+0x1c4>)
 8000642:	4618      	mov	r0, r3
 8000644:	4611      	mov	r1, r2
 8000646:	234b      	movs	r3, #75	; 0x4b
 8000648:	461a      	mov	r2, r3
 800064a:	f005 f843 	bl	80056d4 <memcpy>
 800064e:	e00d      	b.n	800066c <generateResponse+0x13c>
				"<p>ABRIR PUERTAS</p><a class=\"button button-brown\" href=\"/led4off\"><|></a>");
	} else {
		strcat(response,
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f7ff fdc7 	bl	80001e4 <strlen>
 8000656:	4603      	mov	r3, r0
 8000658:	461a      	mov	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	4a26      	ldr	r2, [pc, #152]	; (80006f8 <generateResponse+0x1c8>)
 8000660:	4618      	mov	r0, r3
 8000662:	4611      	mov	r1, r2
 8000664:	234a      	movs	r3, #74	; 0x4a
 8000666:	461a      	mov	r2, r3
 8000668:	f005 f834 	bl	80056d4 <memcpy>
				"<p>ABRIR PUERTAS</p><a class=\"button button-brown\" href=\"/led4on\"><|></a>");
	}
	if (led5_state == LED5_ON) {
 800066c:	4b23      	ldr	r3, [pc, #140]	; (80006fc <generateResponse+0x1cc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d10e      	bne.n	8000692 <generateResponse+0x162>
		strcat(response,
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f7ff fdb5 	bl	80001e4 <strlen>
 800067a:	4603      	mov	r3, r0
 800067c:	461a      	mov	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4413      	add	r3, r2
 8000682:	4a1f      	ldr	r2, [pc, #124]	; (8000700 <generateResponse+0x1d0>)
 8000684:	4618      	mov	r0, r3
 8000686:	4611      	mov	r1, r2
 8000688:	2345      	movs	r3, #69	; 0x45
 800068a:	461a      	mov	r2, r3
 800068c:	f005 f822 	bl	80056d4 <memcpy>
 8000690:	e00d      	b.n	80006ae <generateResponse+0x17e>
				"<p>ALARMA</p><a class=\"button button-red\" href=\"/led5off\">EMERG.</a>");
	} else {
		strcat(response,
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f7ff fda6 	bl	80001e4 <strlen>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4413      	add	r3, r2
 80006a0:	4a18      	ldr	r2, [pc, #96]	; (8000704 <generateResponse+0x1d4>)
 80006a2:	4618      	mov	r0, r3
 80006a4:	4611      	mov	r1, r2
 80006a6:	2344      	movs	r3, #68	; 0x44
 80006a8:	461a      	mov	r2, r3
 80006aa:	f005 f813 	bl	80056d4 <memcpy>
				"<p>ALARMA</p><a class=\"button button-red\" href=\"/led5on\">EMERG.</a>");
	}
	strcat(response, Terminate);
 80006ae:	4b16      	ldr	r3, [pc, #88]	; (8000708 <generateResponse+0x1d8>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4619      	mov	r1, r3
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f005 f933 	bl	8005920 <strcat>
	return response;
 80006ba:	687b      	ldr	r3, [r7, #4]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	20000000 	.word	0x20000000
 80006c8:	080066f8 	.word	0x080066f8
 80006cc:	20000094 	.word	0x20000094
 80006d0:	080066fc 	.word	0x080066fc
 80006d4:	08006740 	.word	0x08006740
 80006d8:	20000098 	.word	0x20000098
 80006dc:	08006780 	.word	0x08006780
 80006e0:	080067c4 	.word	0x080067c4
 80006e4:	2000009c 	.word	0x2000009c
 80006e8:	08006808 	.word	0x08006808
 80006ec:	0800684c 	.word	0x0800684c
 80006f0:	200000a0 	.word	0x200000a0
 80006f4:	08006890 	.word	0x08006890
 80006f8:	080068dc 	.word	0x080068dc
 80006fc:	200000a4 	.word	0x200000a4
 8000700:	08006928 	.word	0x08006928
 8000704:	08006970 	.word	0x08006970
 8000708:	20000004 	.word	0x20000004

0800070c <Server_Handle>:

void Server_Handle(char *str, int Link_ID) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	char *datatosend = NULL;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]

	if (strcmp(str, "/ledon") == 0) {
 800071a:	493d      	ldr	r1, [pc, #244]	; (8000810 <Server_Handle+0x104>)
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff fd57 	bl	80001d0 <strcmp>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d103      	bne.n	8000730 <Server_Handle+0x24>
		led1_state = LED1_ON;
 8000728:	4b3a      	ldr	r3, [pc, #232]	; (8000814 <Server_Handle+0x108>)
 800072a:	2201      	movs	r2, #1
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	e061      	b.n	80007f4 <Server_Handle+0xe8>
	} else if (strcmp(str, "/ledoff") == 0) {
 8000730:	4939      	ldr	r1, [pc, #228]	; (8000818 <Server_Handle+0x10c>)
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f7ff fd4c 	bl	80001d0 <strcmp>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d103      	bne.n	8000746 <Server_Handle+0x3a>
		led1_state = LED1_OFF;
 800073e:	4b35      	ldr	r3, [pc, #212]	; (8000814 <Server_Handle+0x108>)
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	e056      	b.n	80007f4 <Server_Handle+0xe8>
	} else if (strcmp(str, "/led2on") == 0) {
 8000746:	4935      	ldr	r1, [pc, #212]	; (800081c <Server_Handle+0x110>)
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff fd41 	bl	80001d0 <strcmp>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d103      	bne.n	800075c <Server_Handle+0x50>
		led2_state = LED2_ON;
 8000754:	4b32      	ldr	r3, [pc, #200]	; (8000820 <Server_Handle+0x114>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	e04b      	b.n	80007f4 <Server_Handle+0xe8>
	} else if (strcmp(str, "/led2off") == 0) {
 800075c:	4931      	ldr	r1, [pc, #196]	; (8000824 <Server_Handle+0x118>)
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f7ff fd36 	bl	80001d0 <strcmp>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d103      	bne.n	8000772 <Server_Handle+0x66>
		led2_state = LED2_OFF;
 800076a:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <Server_Handle+0x114>)
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	e040      	b.n	80007f4 <Server_Handle+0xe8>
	} else if (strcmp(str, "/led3on") == 0) {
 8000772:	492d      	ldr	r1, [pc, #180]	; (8000828 <Server_Handle+0x11c>)
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff fd2b 	bl	80001d0 <strcmp>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d103      	bne.n	8000788 <Server_Handle+0x7c>
		led3_state = LED3_ON;
 8000780:	4b2a      	ldr	r3, [pc, #168]	; (800082c <Server_Handle+0x120>)
 8000782:	2201      	movs	r2, #1
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	e035      	b.n	80007f4 <Server_Handle+0xe8>
	} else if (strcmp(str, "/led3off") == 0) {
 8000788:	4929      	ldr	r1, [pc, #164]	; (8000830 <Server_Handle+0x124>)
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f7ff fd20 	bl	80001d0 <strcmp>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d103      	bne.n	800079e <Server_Handle+0x92>
		led3_state = LED3_OFF;
 8000796:	4b25      	ldr	r3, [pc, #148]	; (800082c <Server_Handle+0x120>)
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	e02a      	b.n	80007f4 <Server_Handle+0xe8>
	} else if (strcmp(str, "/led4on") == 0) {
 800079e:	4925      	ldr	r1, [pc, #148]	; (8000834 <Server_Handle+0x128>)
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff fd15 	bl	80001d0 <strcmp>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d103      	bne.n	80007b4 <Server_Handle+0xa8>
		led4_state = LED4_ON;
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <Server_Handle+0x12c>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	e01f      	b.n	80007f4 <Server_Handle+0xe8>
	} else if (strcmp(str, "/led4off") == 0) {
 80007b4:	4921      	ldr	r1, [pc, #132]	; (800083c <Server_Handle+0x130>)
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff fd0a 	bl	80001d0 <strcmp>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d103      	bne.n	80007ca <Server_Handle+0xbe>
		led4_state = LED4_OFF;
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <Server_Handle+0x12c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	e014      	b.n	80007f4 <Server_Handle+0xe8>
	} else if (strcmp(str, "/led5on") == 0) {
 80007ca:	491d      	ldr	r1, [pc, #116]	; (8000840 <Server_Handle+0x134>)
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff fcff 	bl	80001d0 <strcmp>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d103      	bne.n	80007e0 <Server_Handle+0xd4>
		led5_state = LED5_ON;
 80007d8:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <Server_Handle+0x138>)
 80007da:	2201      	movs	r2, #1
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	e009      	b.n	80007f4 <Server_Handle+0xe8>
	} else if (strcmp(str, "/led5off") == 0) {
 80007e0:	4919      	ldr	r1, [pc, #100]	; (8000848 <Server_Handle+0x13c>)
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f7ff fcf4 	bl	80001d0 <strcmp>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d102      	bne.n	80007f4 <Server_Handle+0xe8>
		led5_state = LED5_OFF;
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <Server_Handle+0x138>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
	}

	    datatosend = generateResponse();
 80007f4:	f7ff fe9c 	bl	8000530 <generateResponse>
 80007f8:	60f8      	str	r0, [r7, #12]
	    Server_Send(datatosend, Link_ID);
 80007fa:	6839      	ldr	r1, [r7, #0]
 80007fc:	68f8      	ldr	r0, [r7, #12]
 80007fe:	f7ff fe47 	bl	8000490 <Server_Send>

	    // Libera la memoria asignada para la respuesta
	    free(datatosend);
 8000802:	68f8      	ldr	r0, [r7, #12]
 8000804:	f004 ff5e 	bl	80056c4 <free>
}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	080069b4 	.word	0x080069b4
 8000814:	20000094 	.word	0x20000094
 8000818:	080069bc 	.word	0x080069bc
 800081c:	080069c4 	.word	0x080069c4
 8000820:	20000098 	.word	0x20000098
 8000824:	080069cc 	.word	0x080069cc
 8000828:	080069d8 	.word	0x080069d8
 800082c:	2000009c 	.word	0x2000009c
 8000830:	080069e0 	.word	0x080069e0
 8000834:	080069ec 	.word	0x080069ec
 8000838:	200000a0 	.word	0x200000a0
 800083c:	080069f4 	.word	0x080069f4
 8000840:	08006a00 	.word	0x08006a00
 8000844:	200000a4 	.word	0x200000a4
 8000848:	08006a08 	.word	0x08006a08

0800084c <Server_Start>:

void Server_Start(void) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b092      	sub	sp, #72	; 0x48
 8000850:	af00      	add	r7, sp, #0

	char buftocopyinto[64] = { 0 };
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	223c      	movs	r2, #60	; 0x3c
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f004 ff46 	bl	80056f0 <memset>
	char Link_ID;
	while (!(Get_after("+IPD,", 1, &Link_ID, wif_uart)))
 8000864:	bf00      	nop
 8000866:	1dfa      	adds	r2, r7, #7
 8000868:	4b7c      	ldr	r3, [pc, #496]	; (8000a5c <Server_Start+0x210>)
 800086a:	2101      	movs	r1, #1
 800086c:	487c      	ldr	r0, [pc, #496]	; (8000a60 <Server_Start+0x214>)
 800086e:	f000 fb27 	bl	8000ec0 <Get_after>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d0f6      	beq.n	8000866 <Server_Start+0x1a>
		;
	Link_ID -= 48;
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	3b30      	subs	r3, #48	; 0x30
 800087c:	b2db      	uxtb	r3, r3
 800087e:	71fb      	strb	r3, [r7, #7]
	while (!(Copy_upto(" HTTP/1.1", buftocopyinto, wif_uart)))
 8000880:	bf00      	nop
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	4a75      	ldr	r2, [pc, #468]	; (8000a5c <Server_Start+0x210>)
 8000888:	4619      	mov	r1, r3
 800088a:	4876      	ldr	r0, [pc, #472]	; (8000a64 <Server_Start+0x218>)
 800088c:	f000 fb5e 	bl	8000f4c <Copy_upto>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d0f5      	beq.n	8000882 <Server_Start+0x36>
		;
	if (Look_for("/ledon", buftocopyinto) == 1) {
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	4619      	mov	r1, r3
 800089c:	4872      	ldr	r0, [pc, #456]	; (8000a68 <Server_Start+0x21c>)
 800089e:	f000 f96a 	bl	8000b76 <Look_for>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d10b      	bne.n	80008c0 <Server_Start+0x74>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ae:	486f      	ldr	r0, [pc, #444]	; (8000a6c <Server_Start+0x220>)
 80008b0:	f001 fd24 	bl	80022fc <HAL_GPIO_WritePin>
		Server_Handle("/ledon", Link_ID);
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	4619      	mov	r1, r3
 80008b8:	486b      	ldr	r0, [pc, #428]	; (8000a68 <Server_Start+0x21c>)
 80008ba:	f7ff ff27 	bl	800070c <Server_Handle>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
        Server_Handle("/ ", Link_ID);

	}

}
 80008be:	e0c8      	b.n	8000a52 <Server_Start+0x206>
	} else if (Look_for("/ledoff", buftocopyinto) == 1) {
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	4619      	mov	r1, r3
 80008c6:	486a      	ldr	r0, [pc, #424]	; (8000a70 <Server_Start+0x224>)
 80008c8:	f000 f955 	bl	8000b76 <Look_for>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d10b      	bne.n	80008ea <Server_Start+0x9e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 80008d2:	2201      	movs	r2, #1
 80008d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d8:	4864      	ldr	r0, [pc, #400]	; (8000a6c <Server_Start+0x220>)
 80008da:	f001 fd0f 	bl	80022fc <HAL_GPIO_WritePin>
		Server_Handle("/ledoff", Link_ID);
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	4619      	mov	r1, r3
 80008e2:	4863      	ldr	r0, [pc, #396]	; (8000a70 <Server_Start+0x224>)
 80008e4:	f7ff ff12 	bl	800070c <Server_Handle>
}
 80008e8:	e0b3      	b.n	8000a52 <Server_Start+0x206>
	} else if (Look_for("/led2on", buftocopyinto) == 1) {
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	4619      	mov	r1, r3
 80008f0:	4860      	ldr	r0, [pc, #384]	; (8000a74 <Server_Start+0x228>)
 80008f2:	f000 f940 	bl	8000b76 <Look_for>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d10a      	bne.n	8000912 <Server_Start+0xc6>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80008fc:	2201      	movs	r2, #1
 80008fe:	2120      	movs	r1, #32
 8000900:	485a      	ldr	r0, [pc, #360]	; (8000a6c <Server_Start+0x220>)
 8000902:	f001 fcfb 	bl	80022fc <HAL_GPIO_WritePin>
		Server_Handle("/led2on", Link_ID);
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4619      	mov	r1, r3
 800090a:	485a      	ldr	r0, [pc, #360]	; (8000a74 <Server_Start+0x228>)
 800090c:	f7ff fefe 	bl	800070c <Server_Handle>
}
 8000910:	e09f      	b.n	8000a52 <Server_Start+0x206>
	} else if (Look_for("/led2off", buftocopyinto) == 1) {
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	4619      	mov	r1, r3
 8000918:	4857      	ldr	r0, [pc, #348]	; (8000a78 <Server_Start+0x22c>)
 800091a:	f000 f92c 	bl	8000b76 <Look_for>
 800091e:	4603      	mov	r3, r0
 8000920:	2b01      	cmp	r3, #1
 8000922:	d10a      	bne.n	800093a <Server_Start+0xee>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000924:	2201      	movs	r2, #1
 8000926:	2120      	movs	r1, #32
 8000928:	4850      	ldr	r0, [pc, #320]	; (8000a6c <Server_Start+0x220>)
 800092a:	f001 fce7 	bl	80022fc <HAL_GPIO_WritePin>
		Server_Handle("/led2off", Link_ID);
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	4619      	mov	r1, r3
 8000932:	4851      	ldr	r0, [pc, #324]	; (8000a78 <Server_Start+0x22c>)
 8000934:	f7ff feea 	bl	800070c <Server_Handle>
}
 8000938:	e08b      	b.n	8000a52 <Server_Start+0x206>
	} else if (Look_for("/led3on", buftocopyinto) == 1) {
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	4619      	mov	r1, r3
 8000940:	484e      	ldr	r0, [pc, #312]	; (8000a7c <Server_Start+0x230>)
 8000942:	f000 f918 	bl	8000b76 <Look_for>
 8000946:	4603      	mov	r3, r0
 8000948:	2b01      	cmp	r3, #1
 800094a:	d10a      	bne.n	8000962 <Server_Start+0x116>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 800094c:	2201      	movs	r2, #1
 800094e:	2110      	movs	r1, #16
 8000950:	4846      	ldr	r0, [pc, #280]	; (8000a6c <Server_Start+0x220>)
 8000952:	f001 fcd3 	bl	80022fc <HAL_GPIO_WritePin>
		Server_Handle("/led3on", Link_ID);
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	4619      	mov	r1, r3
 800095a:	4848      	ldr	r0, [pc, #288]	; (8000a7c <Server_Start+0x230>)
 800095c:	f7ff fed6 	bl	800070c <Server_Handle>
}
 8000960:	e077      	b.n	8000a52 <Server_Start+0x206>
	} else if (Look_for("/led3off", buftocopyinto) == 1) {
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	4619      	mov	r1, r3
 8000968:	4845      	ldr	r0, [pc, #276]	; (8000a80 <Server_Start+0x234>)
 800096a:	f000 f904 	bl	8000b76 <Look_for>
 800096e:	4603      	mov	r3, r0
 8000970:	2b01      	cmp	r3, #1
 8000972:	d10a      	bne.n	800098a <Server_Start+0x13e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000974:	2201      	movs	r2, #1
 8000976:	2110      	movs	r1, #16
 8000978:	483c      	ldr	r0, [pc, #240]	; (8000a6c <Server_Start+0x220>)
 800097a:	f001 fcbf 	bl	80022fc <HAL_GPIO_WritePin>
		Server_Handle("/led3off", Link_ID);
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	4619      	mov	r1, r3
 8000982:	483f      	ldr	r0, [pc, #252]	; (8000a80 <Server_Start+0x234>)
 8000984:	f7ff fec2 	bl	800070c <Server_Handle>
}
 8000988:	e063      	b.n	8000a52 <Server_Start+0x206>
	} else if (Look_for("/led4on", buftocopyinto) == 1) {
 800098a:	f107 0308 	add.w	r3, r7, #8
 800098e:	4619      	mov	r1, r3
 8000990:	483c      	ldr	r0, [pc, #240]	; (8000a84 <Server_Start+0x238>)
 8000992:	f000 f8f0 	bl	8000b76 <Look_for>
 8000996:	4603      	mov	r3, r0
 8000998:	2b01      	cmp	r3, #1
 800099a:	d10a      	bne.n	80009b2 <Server_Start+0x166>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 800099c:	2201      	movs	r2, #1
 800099e:	2108      	movs	r1, #8
 80009a0:	4832      	ldr	r0, [pc, #200]	; (8000a6c <Server_Start+0x220>)
 80009a2:	f001 fcab 	bl	80022fc <HAL_GPIO_WritePin>
		Server_Handle("/led4on", Link_ID);
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4619      	mov	r1, r3
 80009aa:	4836      	ldr	r0, [pc, #216]	; (8000a84 <Server_Start+0x238>)
 80009ac:	f7ff feae 	bl	800070c <Server_Handle>
}
 80009b0:	e04f      	b.n	8000a52 <Server_Start+0x206>
	} else if (Look_for("/led4off", buftocopyinto) == 1) {
 80009b2:	f107 0308 	add.w	r3, r7, #8
 80009b6:	4619      	mov	r1, r3
 80009b8:	4833      	ldr	r0, [pc, #204]	; (8000a88 <Server_Start+0x23c>)
 80009ba:	f000 f8dc 	bl	8000b76 <Look_for>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d10a      	bne.n	80009da <Server_Start+0x18e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2108      	movs	r1, #8
 80009c8:	4828      	ldr	r0, [pc, #160]	; (8000a6c <Server_Start+0x220>)
 80009ca:	f001 fc97 	bl	80022fc <HAL_GPIO_WritePin>
		Server_Handle("/led4off", Link_ID);
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	4619      	mov	r1, r3
 80009d2:	482d      	ldr	r0, [pc, #180]	; (8000a88 <Server_Start+0x23c>)
 80009d4:	f7ff fe9a 	bl	800070c <Server_Handle>
}
 80009d8:	e03b      	b.n	8000a52 <Server_Start+0x206>
	} else if (Look_for("/led5on", buftocopyinto) == 1) {
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	4619      	mov	r1, r3
 80009e0:	482a      	ldr	r0, [pc, #168]	; (8000a8c <Server_Start+0x240>)
 80009e2:	f000 f8c8 	bl	8000b76 <Look_for>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d10a      	bne.n	8000a02 <Server_Start+0x1b6>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2180      	movs	r1, #128	; 0x80
 80009f0:	4827      	ldr	r0, [pc, #156]	; (8000a90 <Server_Start+0x244>)
 80009f2:	f001 fc83 	bl	80022fc <HAL_GPIO_WritePin>
		Server_Handle("/led5on", Link_ID);
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	4619      	mov	r1, r3
 80009fa:	4824      	ldr	r0, [pc, #144]	; (8000a8c <Server_Start+0x240>)
 80009fc:	f7ff fe86 	bl	800070c <Server_Handle>
}
 8000a00:	e027      	b.n	8000a52 <Server_Start+0x206>
	} else if (Look_for("/led5off", buftocopyinto) == 1) {
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	4619      	mov	r1, r3
 8000a08:	4822      	ldr	r0, [pc, #136]	; (8000a94 <Server_Start+0x248>)
 8000a0a:	f000 f8b4 	bl	8000b76 <Look_for>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d10a      	bne.n	8000a2a <Server_Start+0x1de>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8000a14:	2201      	movs	r2, #1
 8000a16:	2180      	movs	r1, #128	; 0x80
 8000a18:	481d      	ldr	r0, [pc, #116]	; (8000a90 <Server_Start+0x244>)
 8000a1a:	f001 fc6f 	bl	80022fc <HAL_GPIO_WritePin>
		Server_Handle("/led5off", Link_ID);
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	4619      	mov	r1, r3
 8000a22:	481c      	ldr	r0, [pc, #112]	; (8000a94 <Server_Start+0x248>)
 8000a24:	f7ff fe72 	bl	800070c <Server_Handle>
}
 8000a28:	e013      	b.n	8000a52 <Server_Start+0x206>
	else if (Look_for("/favicon.ico", buftocopyinto) == 1)
 8000a2a:	f107 0308 	add.w	r3, r7, #8
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4819      	ldr	r0, [pc, #100]	; (8000a98 <Server_Start+0x24c>)
 8000a32:	f000 f8a0 	bl	8000b76 <Look_for>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d00a      	beq.n	8000a52 <Server_Start+0x206>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a42:	480a      	ldr	r0, [pc, #40]	; (8000a6c <Server_Start+0x220>)
 8000a44:	f001 fc5a 	bl	80022fc <HAL_GPIO_WritePin>
        Server_Handle("/ ", Link_ID);
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4813      	ldr	r0, [pc, #76]	; (8000a9c <Server_Start+0x250>)
 8000a4e:	f7ff fe5d 	bl	800070c <Server_Handle>
}
 8000a52:	bf00      	nop
 8000a54:	3748      	adds	r7, #72	; 0x48
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200009d0 	.word	0x200009d0
 8000a60:	08006a14 	.word	0x08006a14
 8000a64:	08006a1c 	.word	0x08006a1c
 8000a68:	080069b4 	.word	0x080069b4
 8000a6c:	48000400 	.word	0x48000400
 8000a70:	080069bc 	.word	0x080069bc
 8000a74:	080069c4 	.word	0x080069c4
 8000a78:	080069cc 	.word	0x080069cc
 8000a7c:	080069d8 	.word	0x080069d8
 8000a80:	080069e0 	.word	0x080069e0
 8000a84:	080069ec 	.word	0x080069ec
 8000a88:	080069f4 	.word	0x080069f4
 8000a8c:	08006a00 	.word	0x08006a00
 8000a90:	48000800 	.word	0x48000800
 8000a94:	08006a08 	.word	0x08006a08
 8000a98:	08006a28 	.word	0x08006a28
 8000a9c:	08006a38 	.word	0x08006a38

08000aa0 <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <Ringbuf_init+0x68>)
 8000aa6:	4a19      	ldr	r2, [pc, #100]	; (8000b0c <Ringbuf_init+0x6c>)
 8000aa8:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <Ringbuf_init+0x70>)
 8000aac:	4a19      	ldr	r2, [pc, #100]	; (8000b14 <Ringbuf_init+0x74>)
 8000aae:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8000ab0:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <Ringbuf_init+0x78>)
 8000ab2:	4a1a      	ldr	r2, [pc, #104]	; (8000b1c <Ringbuf_init+0x7c>)
 8000ab4:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <Ringbuf_init+0x80>)
 8000ab8:	4a1a      	ldr	r2, [pc, #104]	; (8000b24 <Ringbuf_init+0x84>)
 8000aba:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart1, UART_IT_ERR);
 8000abc:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <Ringbuf_init+0x88>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	689a      	ldr	r2, [r3, #8]
 8000ac2:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <Ringbuf_init+0x88>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f042 0201 	orr.w	r2, r2, #1
 8000aca:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE_IT(uart2, UART_IT_ERR);
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <Ringbuf_init+0x8c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	689a      	ldr	r2, [r3, #8]
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <Ringbuf_init+0x8c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f042 0201 	orr.w	r2, r2, #1
 8000ada:	609a      	str	r2, [r3, #8]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart1, UART_IT_RXNE);
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <Ringbuf_init+0x88>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <Ringbuf_init+0x88>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f042 0220 	orr.w	r2, r2, #32
 8000aea:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(uart2, UART_IT_RXNE);
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <Ringbuf_init+0x8c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <Ringbuf_init+0x8c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f042 0220 	orr.w	r2, r2, #32
 8000afa:	601a      	str	r2, [r3, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	200008dc 	.word	0x200008dc
 8000b0c:	200000bc 	.word	0x200000bc
 8000b10:	200008e0 	.word	0x200008e0
 8000b14:	200002c4 	.word	0x200002c4
 8000b18:	200008e4 	.word	0x200008e4
 8000b1c:	200004cc 	.word	0x200004cc
 8000b20:	200008e8 	.word	0x200008e8
 8000b24:	200006d4 	.word	0x200006d4
 8000b28:	200009d0 	.word	0x200009d0
 8000b2c:	20000a58 	.word	0x20000a58

08000b30 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	6039      	str	r1, [r7, #0]
 8000b3a:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b42:	3301      	adds	r3, #1
 8000b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b48:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d009      	beq.n	8000b6a <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b5c:	683a      	ldr	r2, [r7, #0]
 8000b5e:	79f9      	ldrb	r1, [r7, #7]
 8000b60:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <Look_for>:


int Look_for (char *str, char *buffertolookinto)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b086      	sub	sp, #24
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff fb2f 	bl	80001e4 <strlen>
 8000b86:	4603      	mov	r3, r0
 8000b88:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 8000b8a:	6838      	ldr	r0, [r7, #0]
 8000b8c:	f7ff fb2a 	bl	80001e4 <strlen>
 8000b90:	4603      	mov	r3, r0
 8000b92:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 8000b9c:	e002      	b.n	8000ba4 <Look_for+0x2e>
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	781a      	ldrb	r2, [r3, #0]
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	6839      	ldr	r1, [r7, #0]
 8000bb0:	440b      	add	r3, r1
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d1f2      	bne.n	8000b9e <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx]){
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	781a      	ldrb	r2, [r3, #0]
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	6839      	ldr	r1, [r7, #0]
 8000bc4:	440b      	add	r3, r1
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d111      	bne.n	8000bf0 <Look_for+0x7a>
	while (str[so_far] == buffertolookinto[indx])
 8000bcc:	e005      	b.n	8000bda <Look_for+0x64>
	{
		so_far++;
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
		indx++;
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	613b      	str	r3, [r7, #16]
	while (str[so_far] == buffertolookinto[indx])
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	4413      	add	r3, r2
 8000be0:	781a      	ldrb	r2, [r3, #0]
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	6839      	ldr	r1, [r7, #0]
 8000be6:	440b      	add	r3, r1
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d0ef      	beq.n	8000bce <Look_for+0x58>
 8000bee:	e008      	b.n	8000c02 <Look_for+0x8c>
	}
	}

	else
		{
			so_far =0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
			if (indx >= bufferlength) return -1;
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	dbcf      	blt.n	8000b9c <Look_for+0x26>
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	e007      	b.n	8000c12 <Look_for+0x9c>
			goto repeat;
		}

	if (so_far == stringlength) return 1;
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d101      	bne.n	8000c0e <Look_for+0x98>
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e001      	b.n	8000c12 <Look_for+0x9c>
	else return -1;
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <Uart_peek>:
	}
}


int Uart_peek(UART_HandleTypeDef *uart)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	if (uart == uart1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a1c      	ldr	r2, [pc, #112]	; (8000c98 <Uart_peek+0x7c>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d114      	bne.n	8000c56 <Uart_peek+0x3a>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <Uart_peek+0x80>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <Uart_peek+0x80>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d102      	bne.n	8000c46 <Uart_peek+0x2a>
		  {
		    return -1;
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295
 8000c44:	e022      	b.n	8000c8c <Uart_peek+0x70>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <Uart_peek+0x80>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <Uart_peek+0x80>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000c52:	5cd3      	ldrb	r3, [r2, r3]
 8000c54:	e01a      	b.n	8000c8c <Uart_peek+0x70>
		  }
	}

	else if (uart == uart2)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a11      	ldr	r2, [pc, #68]	; (8000ca0 <Uart_peek+0x84>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d114      	bne.n	8000c88 <Uart_peek+0x6c>
	{
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <Uart_peek+0x88>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <Uart_peek+0x88>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d102      	bne.n	8000c78 <Uart_peek+0x5c>
		  {
		    return -1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	e009      	b.n	8000c8c <Uart_peek+0x70>
		  }
		  else
		  {
		    return _rx_buffer2->buffer[_rx_buffer2->tail];
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <Uart_peek+0x88>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <Uart_peek+0x88>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000c84:	5cd3      	ldrb	r3, [r2, r3]
 8000c86:	e001      	b.n	8000c8c <Uart_peek+0x70>
		  }
	}

	return -1;
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	200009d0 	.word	0x200009d0
 8000c9c:	200008dc 	.word	0x200008dc
 8000ca0:	20000a58 	.word	0x20000a58
 8000ca4:	200008e4 	.word	0x200008e4

08000ca8 <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	if (uart == uart1)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a29      	ldr	r2, [pc, #164]	; (8000d58 <Uart_read+0xb0>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d121      	bne.n	8000cfc <Uart_read+0x54>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8000cb8:	4b28      	ldr	r3, [pc, #160]	; (8000d5c <Uart_read+0xb4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000cc0:	4b26      	ldr	r3, [pc, #152]	; (8000d5c <Uart_read+0xb4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d102      	bne.n	8000cd2 <Uart_read+0x2a>
		  {
		    return -1;
 8000ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd0:	e03c      	b.n	8000d4c <Uart_read+0xa4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8000cd2:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <Uart_read+0xb4>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <Uart_read+0xb4>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000cde:	5cd3      	ldrb	r3, [r2, r3]
 8000ce0:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <Uart_read+0xb4>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <Uart_read+0xb4>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000cf4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8000cf8:	7bbb      	ldrb	r3, [r7, #14]
 8000cfa:	e027      	b.n	8000d4c <Uart_read+0xa4>
		  }
	}

	else if (uart == uart2)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a18      	ldr	r2, [pc, #96]	; (8000d60 <Uart_read+0xb8>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d121      	bne.n	8000d48 <Uart_read+0xa0>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <Uart_read+0xbc>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <Uart_read+0xbc>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d102      	bne.n	8000d1e <Uart_read+0x76>
		  {
		    return -1;
 8000d18:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1c:	e016      	b.n	8000d4c <Uart_read+0xa4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <Uart_read+0xbc>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <Uart_read+0xbc>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000d2a:	5cd3      	ldrb	r3, [r2, r3]
 8000d2c:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <Uart_read+0xbc>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000d36:	1c5a      	adds	r2, r3, #1
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <Uart_read+0xbc>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	e001      	b.n	8000d4c <Uart_read+0xa4>
		  }
	}

	else return -1;
 8000d48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	200009d0 	.word	0x200009d0
 8000d5c:	200008dc 	.word	0x200008dc
 8000d60:	20000a58 	.word	0x20000a58
 8000d64:	200008e4 	.word	0x200008e4

08000d68 <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	db54      	blt.n	8000e22 <Uart_write+0xba>
	{
		if (uart == uart1){
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	4a2d      	ldr	r2, [pc, #180]	; (8000e30 <Uart_write+0xc8>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d126      	bne.n	8000dce <Uart_write+0x66>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8000d80:	4b2c      	ldr	r3, [pc, #176]	; (8000e34 <Uart_write+0xcc>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d88:	3301      	adds	r3, #1
 8000d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d8e:	60bb      	str	r3, [r7, #8]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 8000d90:	bf00      	nop
 8000d92:	4b28      	ldr	r3, [pc, #160]	; (8000e34 <Uart_write+0xcc>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d0f8      	beq.n	8000d92 <Uart_write+0x2a>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8000da0:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <Uart_write+0xcc>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <Uart_write+0xcc>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000dac:	6879      	ldr	r1, [r7, #4]
 8000dae:	b2c9      	uxtb	r1, r1
 8000db0:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 8000db2:	4b20      	ldr	r3, [pc, #128]	; (8000e34 <Uart_write+0xcc>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		__HAL_UART_ENABLE_IT(uart1, UART_IT_TXE); // Enable UART transmission interrupt
 8000dbc:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <Uart_write+0xc8>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <Uart_write+0xc8>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000dca:	601a      	str	r2, [r3, #0]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(uart2, UART_IT_TXE); // Enable UART transmission interrupt
			}
	}
}
 8000dcc:	e029      	b.n	8000e22 <Uart_write+0xba>
		else if (uart == uart2){
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	4a19      	ldr	r2, [pc, #100]	; (8000e38 <Uart_write+0xd0>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d125      	bne.n	8000e22 <Uart_write+0xba>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8000dd6:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <Uart_write+0xd4>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000dde:	3301      	adds	r3, #1
 8000de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000de4:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 8000de6:	bf00      	nop
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <Uart_write+0xd4>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d0f8      	beq.n	8000de8 <Uart_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <Uart_write+0xd4>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <Uart_write+0xd4>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e02:	6879      	ldr	r1, [r7, #4]
 8000e04:	b2c9      	uxtb	r1, r1
 8000e06:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <Uart_write+0xd4>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(uart2, UART_IT_TXE); // Enable UART transmission interrupt
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <Uart_write+0xd0>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <Uart_write+0xd0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e20:	601a      	str	r2, [r3, #0]
}
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	200009d0 	.word	0x200009d0
 8000e34:	200008e0 	.word	0x200008e0
 8000e38:	20000a58 	.word	0x20000a58
 8000e3c:	200008e8 	.word	0x200008e8

08000e40 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	if (uart == uart1) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a19      	ldr	r2, [pc, #100]	; (8000eb0 <IsDataAvailable+0x70>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d111      	bne.n	8000e74 <IsDataAvailable+0x34>
 8000e50:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <IsDataAvailable+0x74>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <IsDataAvailable+0x74>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e72:	e017      	b.n	8000ea4 <IsDataAvailable+0x64>
	else if (uart == uart2) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a10      	ldr	r2, [pc, #64]	; (8000eb8 <IsDataAvailable+0x78>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d111      	bne.n	8000ea0 <IsDataAvailable+0x60>
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <IsDataAvailable+0x7c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <IsDataAvailable+0x7c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e9e:	e001      	b.n	8000ea4 <IsDataAvailable+0x64>
	return -1;
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	200009d0 	.word	0x200009d0
 8000eb4:	200008dc 	.word	0x200008dc
 8000eb8:	20000a58 	.word	0x20000a58
 8000ebc:	200008e4 	.word	0x200008e4

08000ec0 <Get_after>:



int Get_after (char *string, uint8_t numberofchars, char *buffertosave, UART_HandleTypeDef *uart)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string, uart) != 1);
 8000ed0:	bf00      	nop
 8000ed2:	6839      	ldr	r1, [r7, #0]
 8000ed4:	68f8      	ldr	r0, [r7, #12]
 8000ed6:	f000 f8b7 	bl	8001048 <Wait_for>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d1f8      	bne.n	8000ed2 <Get_after+0x12>
	for (int indx=0; indx<numberofchars; indx++)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	e012      	b.n	8000f0c <Get_after+0x4c>
	{
		while (!(IsDataAvailable(uart)));
 8000ee6:	bf00      	nop
 8000ee8:	6838      	ldr	r0, [r7, #0]
 8000eea:	f7ff ffa9 	bl	8000e40 <IsDataAvailable>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d0f9      	beq.n	8000ee8 <Get_after+0x28>
		buffertosave[indx] = Uart_read(uart);
 8000ef4:	6838      	ldr	r0, [r7, #0]
 8000ef6:	f7ff fed7 	bl	8000ca8 <Uart_read>
 8000efa:	4601      	mov	r1, r0
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	b2ca      	uxtb	r2, r1
 8000f04:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	7afb      	ldrb	r3, [r7, #11]
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	dbe8      	blt.n	8000ee6 <Get_after+0x26>
	}
	return 1;
 8000f14:	2301      	movs	r3, #1
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <Uart_sendstring>:

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 8000f28:	e007      	b.n	8000f3a <Uart_sendstring+0x1c>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	1c5a      	adds	r2, r3, #1
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	6839      	ldr	r1, [r7, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff17 	bl	8000d68 <Uart_write>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1f3      	bne.n	8000f2a <Uart_sendstring+0xc>
}
 8000f42:	bf00      	nop
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <Copy_upto>:
  while(*s) Uart_write(*s++, uart);
}


int Copy_upto (char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
	int so_far =0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 8000f5c:	68f8      	ldr	r0, [r7, #12]
 8000f5e:	f7ff f941 	bl	80001e4 <strlen>
 8000f62:	4603      	mov	r3, r0
 8000f64:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]

again:
	while (!IsDataAvailable(uart));
 8000f6a:	bf00      	nop
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff67 	bl	8000e40 <IsDataAvailable>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f9      	beq.n	8000f6c <Copy_upto+0x20>
	while (Uart_peek(uart) != string[so_far])
 8000f78:	e01f      	b.n	8000fba <Copy_upto+0x6e>
		{
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8000f7a:	4b32      	ldr	r3, [pc, #200]	; (8001044 <Copy_upto+0xf8>)
 8000f7c:	6819      	ldr	r1, [r3, #0]
 8000f7e:	4b31      	ldr	r3, [pc, #196]	; (8001044 <Copy_upto+0xf8>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	68b8      	ldr	r0, [r7, #8]
 8000f8a:	4403      	add	r3, r0
 8000f8c:	5c8a      	ldrb	r2, [r1, r2]
 8000f8e:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8000f90:	4b2c      	ldr	r3, [pc, #176]	; (8001044 <Copy_upto+0xf8>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000f98:	1c5a      	adds	r2, r3, #1
 8000f9a:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <Copy_upto+0xf8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000fa2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(uart));
 8000fac:	bf00      	nop
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ff46 	bl	8000e40 <IsDataAvailable>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0f9      	beq.n	8000fae <Copy_upto+0x62>
	while (Uart_peek(uart) != string[so_far])
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff fe2e 	bl	8000c1c <Uart_peek>
 8000fc0:	4601      	mov	r1, r0
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	4299      	cmp	r1, r3
 8000fcc:	d1d5      	bne.n	8000f7a <Copy_upto+0x2e>

		}
	while (Uart_peek(uart) == string [so_far])
 8000fce:	e01b      	b.n	8001008 <Copy_upto+0xbc>
	{
		so_far++;
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff fe66 	bl	8000ca8 <Uart_read>
 8000fdc:	4601      	mov	r1, r0
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	1c5a      	adds	r2, r3, #1
 8000fe2:	61ba      	str	r2, [r7, #24]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	4413      	add	r3, r2
 8000fea:	b2ca      	uxtb	r2, r1
 8000fec:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8000fee:	69fa      	ldr	r2, [r7, #28]
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d101      	bne.n	8000ffa <Copy_upto+0xae>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e01f      	b.n	800103a <Copy_upto+0xee>
		while (!IsDataAvailable(uart));
 8000ffa:	bf00      	nop
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ff1f 	bl	8000e40 <IsDataAvailable>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0f9      	beq.n	8000ffc <Copy_upto+0xb0>
	while (Uart_peek(uart) == string [so_far])
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff fe07 	bl	8000c1c <Uart_peek>
 800100e:	4601      	mov	r1, r0
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	4413      	add	r3, r2
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4299      	cmp	r1, r3
 800101a:	d0d9      	beq.n	8000fd0 <Copy_upto+0x84>
	}

	if (so_far != len)
 800101c:	69fa      	ldr	r2, [r7, #28]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	429a      	cmp	r2, r3
 8001022:	d002      	beq.n	800102a <Copy_upto+0xde>
	{
		so_far = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
		goto again;
 8001028:	e79f      	b.n	8000f6a <Copy_upto+0x1e>
	}

	if (so_far == len) return 1;
 800102a:	69fa      	ldr	r2, [r7, #28]
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	429a      	cmp	r2, r3
 8001030:	d101      	bne.n	8001036 <Copy_upto+0xea>
 8001032:	2301      	movs	r3, #1
 8001034:	e001      	b.n	800103a <Copy_upto+0xee>
	else return -1;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295

}
 800103a:	4618      	mov	r0, r3
 800103c:	3720      	adds	r7, #32
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200008dc 	.word	0x200008dc

08001048 <Wait_for>:


int Wait_for (char *string,UART_HandleTypeDef *uart)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff f8c4 	bl	80001e4 <strlen>
 800105c:	4603      	mov	r3, r0
 800105e:	60bb      	str	r3, [r7, #8]

again_device:
	while (!IsDataAvailable(uart));
 8001060:	bf00      	nop
 8001062:	6838      	ldr	r0, [r7, #0]
 8001064:	f7ff feec 	bl	8000e40 <IsDataAvailable>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0f9      	beq.n	8001062 <Wait_for+0x1a>
	if (Uart_peek(uart) != string[so_far])
 800106e:	6838      	ldr	r0, [r7, #0]
 8001070:	f7ff fdd4 	bl	8000c1c <Uart_peek>
 8001074:	4601      	mov	r1, r0
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	4299      	cmp	r1, r3
 8001080:	d01e      	beq.n	80010c0 <Wait_for+0x78>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 8001082:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <Wait_for+0xb4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <Wait_for+0xb4>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001094:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 8001098:	e7e2      	b.n	8001060 <Wait_for+0x18>

	}
	while (Uart_peek(uart) == string [so_far])
	{
		so_far++;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	3301      	adds	r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 80010a0:	6838      	ldr	r0, [r7, #0]
 80010a2:	f7ff fe01 	bl	8000ca8 <Uart_read>
		if (so_far == len) return 1;
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d101      	bne.n	80010b2 <Wait_for+0x6a>
 80010ae:	2301      	movs	r3, #1
 80010b0:	e01f      	b.n	80010f2 <Wait_for+0xaa>
		while (!IsDataAvailable(uart));
 80010b2:	bf00      	nop
 80010b4:	6838      	ldr	r0, [r7, #0]
 80010b6:	f7ff fec3 	bl	8000e40 <IsDataAvailable>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d0f9      	beq.n	80010b4 <Wait_for+0x6c>
	while (Uart_peek(uart) == string [so_far])
 80010c0:	6838      	ldr	r0, [r7, #0]
 80010c2:	f7ff fdab 	bl	8000c1c <Uart_peek>
 80010c6:	4601      	mov	r1, r0
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4299      	cmp	r1, r3
 80010d2:	d0e2      	beq.n	800109a <Wait_for+0x52>
	}

	if (so_far != len)
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d002      	beq.n	80010e2 <Wait_for+0x9a>
	{
		so_far = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
		goto again_device;
 80010e0:	e7be      	b.n	8001060 <Wait_for+0x18>
	}

	if (so_far == len) return 1;
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d101      	bne.n	80010ee <Wait_for+0xa6>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e001      	b.n	80010f2 <Wait_for+0xaa>
	else return -1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200008dc 	.word	0x200008dc

08001100 <Uart_isr>:

void Uart_isr (UART_HandleTypeDef *huart)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f003 0320 	and.w	r3, r3, #32
 800111e:	2b00      	cmp	r3, #0
 8001120:	d024      	beq.n	800116c <Uart_isr+0x6c>
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	f003 0320 	and.w	r3, r3, #32
 8001128:	2b00      	cmp	r3, #0
 800112a:	d01f      	beq.n	800116c <Uart_isr+0x6c>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->ISR;                       /* Read status register */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	69db      	ldr	r3, [r3, #28]
        unsigned char c = huart->Instance->RDR;     /* Read data register */
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001138:	b29b      	uxth	r3, r3
 800113a:	73fb      	strb	r3, [r7, #15]
        if (huart == uart1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a40      	ldr	r2, [pc, #256]	; (8001240 <Uart_isr+0x140>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d107      	bne.n	8001154 <Uart_isr+0x54>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 8001144:	4b3f      	ldr	r3, [pc, #252]	; (8001244 <Uart_isr+0x144>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fcef 	bl	8000b30 <store_char>
        else if (huart == uart2)
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
        }

        return;
 8001152:	e06f      	b.n	8001234 <Uart_isr+0x134>
        else if (huart == uart2)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a3c      	ldr	r2, [pc, #240]	; (8001248 <Uart_isr+0x148>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d16b      	bne.n	8001234 <Uart_isr+0x134>
           	store_char (c, _rx_buffer2);  // store data in buffer
 800115c:	4b3b      	ldr	r3, [pc, #236]	; (800124c <Uart_isr+0x14c>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	4611      	mov	r1, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fce3 	bl	8000b30 <store_char>
        return;
 800116a:	e063      	b.n	8001234 <Uart_isr+0x134>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001172:	2b00      	cmp	r3, #0
 8001174:	d061      	beq.n	800123a <Uart_isr+0x13a>
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800117c:	2b00      	cmp	r3, #0
 800117e:	d05c      	beq.n	800123a <Uart_isr+0x13a>
    {
    	if (huart == uart1){
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a2f      	ldr	r2, [pc, #188]	; (8001240 <Uart_isr+0x140>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d128      	bne.n	80011da <Uart_isr+0xda>
    	if(tx_buffer1.head == tx_buffer1.tail)
 8001188:	4b31      	ldr	r3, [pc, #196]	; (8001250 <Uart_isr+0x150>)
 800118a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800118e:	4b30      	ldr	r3, [pc, #192]	; (8001250 <Uart_isr+0x150>)
 8001190:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001194:	429a      	cmp	r2, r3
 8001196:	d108      	bne.n	80011aa <Uart_isr+0xaa>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011a6:	601a      	str	r2, [r3, #0]
        	      huart->Instance->ISR;
        	      huart->Instance->TDR = c;

        	    }
        	}
    	return;
 80011a8:	e046      	b.n	8001238 <Uart_isr+0x138>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 80011aa:	4b29      	ldr	r3, [pc, #164]	; (8001250 <Uart_isr+0x150>)
 80011ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011b0:	4a27      	ldr	r2, [pc, #156]	; (8001250 <Uart_isr+0x150>)
 80011b2:	5cd3      	ldrb	r3, [r2, r3]
 80011b4:	737b      	strb	r3, [r7, #13]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 80011b6:	4b26      	ldr	r3, [pc, #152]	; (8001250 <Uart_isr+0x150>)
 80011b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011bc:	3301      	adds	r3, #1
 80011be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011c2:	4a23      	ldr	r2, [pc, #140]	; (8001250 <Uart_isr+0x150>)
 80011c4:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->ISR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	69db      	ldr	r3, [r3, #28]
    	      huart->Instance->TDR = c;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	7b7a      	ldrb	r2, [r7, #13]
 80011d4:	b292      	uxth	r2, r2
 80011d6:	851a      	strh	r2, [r3, #40]	; 0x28
    	return;
 80011d8:	e02e      	b.n	8001238 <Uart_isr+0x138>
    	else if (huart == uart2){
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a1a      	ldr	r2, [pc, #104]	; (8001248 <Uart_isr+0x148>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d12a      	bne.n	8001238 <Uart_isr+0x138>
        	if(tx_buffer2.head == tx_buffer2.tail)
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <Uart_isr+0x154>)
 80011e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <Uart_isr+0x154>)
 80011ea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d108      	bne.n	8001204 <Uart_isr+0x104>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001200:	601a      	str	r2, [r3, #0]
    	return;
 8001202:	e019      	b.n	8001238 <Uart_isr+0x138>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <Uart_isr+0x154>)
 8001206:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800120a:	4a12      	ldr	r2, [pc, #72]	; (8001254 <Uart_isr+0x154>)
 800120c:	5cd3      	ldrb	r3, [r2, r3]
 800120e:	73bb      	strb	r3, [r7, #14]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8001210:	4b10      	ldr	r3, [pc, #64]	; (8001254 <Uart_isr+0x154>)
 8001212:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001216:	3301      	adds	r3, #1
 8001218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800121c:	4a0d      	ldr	r2, [pc, #52]	; (8001254 <Uart_isr+0x154>)
 800121e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	      huart->Instance->ISR;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	69db      	ldr	r3, [r3, #28]
        	      huart->Instance->TDR = c;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	7bba      	ldrb	r2, [r7, #14]
 800122e:	b292      	uxth	r2, r2
 8001230:	851a      	strh	r2, [r3, #40]	; 0x28
    	return;
 8001232:	e001      	b.n	8001238 <Uart_isr+0x138>
        return;
 8001234:	bf00      	nop
 8001236:	e000      	b.n	800123a <Uart_isr+0x13a>
    	return;
 8001238:	bf00      	nop
    }
}
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200009d0 	.word	0x200009d0
 8001244:	200008dc 	.word	0x200008dc
 8001248:	20000a58 	.word	0x20000a58
 800124c:	200008e4 	.word	0x200008e4
 8001250:	200002c4 	.word	0x200002c4
 8001254:	200006d4 	.word	0x200006d4

08001258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125c:	f000 fcca 	bl	8001bf4 <HAL_Init>
  /* USER CODE BEGIN Init */
	//Servo servo;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001260:	f000 f81a 	bl	8001298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001264:	f000 fa26 	bl	80016b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001268:	f000 f9c4 	bl	80015f4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800126c:	f000 f992 	bl	8001594 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001270:	f000 f9f0 	bl	8001654 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001274:	f000 f8c4 	bl	8001400 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001278:	f000 f86e 	bl	8001358 <MX_TIM1_Init>
  MX_TIM15_Init();
 800127c:	f000 f938 	bl	80014f0 <MX_TIM15_Init>

	//HAL_TIM_Base_Start(&htim1);
	//Servo_Init(&servo, &htim2, TIM_CHANNEL_1);
	//max_init(0x02);
	//Ringbuf_init();
	ESP_Init("122222","1234567890"); //"CLAROKN9QT","485754435EBED19C"//"iPhone de jorge luis","jorge829"//el mio
 8001280:	4903      	ldr	r1, [pc, #12]	; (8001290 <main+0x38>)
 8001282:	4804      	ldr	r0, [pc, #16]	; (8001294 <main+0x3c>)
 8001284:	f7ff f80c 	bl	80002a0 <ESP_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Server_Start();
 8001288:	f7ff fae0 	bl	800084c <Server_Start>
 800128c:	e7fc      	b.n	8001288 <main+0x30>
 800128e:	bf00      	nop
 8001290:	08006a3c 	.word	0x08006a3c
 8001294:	08006a48 	.word	0x08006a48

08001298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b09c      	sub	sp, #112	; 0x70
 800129c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012a2:	2228      	movs	r2, #40	; 0x28
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f004 fa22 	bl	80056f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012bc:	463b      	mov	r3, r7
 80012be:	2234      	movs	r2, #52	; 0x34
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 fa14 	bl	80056f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012c8:	2301      	movs	r3, #1
 80012ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d6:	2301      	movs	r3, #1
 80012d8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012da:	2302      	movs	r3, #2
 80012dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012ee:	4618      	mov	r0, r3
 80012f0:	f001 f81c 	bl	800232c <HAL_RCC_OscConfig>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80012fa:	f000 fa6b 	bl	80017d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fe:	230f      	movs	r3, #15
 8001300:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001302:	2302      	movs	r3, #2
 8001304:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001306:	2300      	movs	r3, #0
 8001308:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800130a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800130e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001314:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001318:	2102      	movs	r1, #2
 800131a:	4618      	mov	r0, r3
 800131c:	f002 f844 	bl	80033a8 <HAL_RCC_ClockConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001326:	f000 fa55 	bl	80017d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <SystemClock_Config+0xbc>)
 800132c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM15;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800133a:	463b      	mov	r3, r7
 800133c:	4618      	mov	r0, r3
 800133e:	f002 fa69 	bl	8003814 <HAL_RCCEx_PeriphCLKConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001348:	f000 fa44 	bl	80017d4 <Error_Handler>
  }
}
 800134c:	bf00      	nop
 800134e:	3770      	adds	r7, #112	; 0x70
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	00041001 	.word	0x00041001

08001358 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135e:	f107 0310 	add.w	r3, r7, #16
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001376:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <MX_TIM1_Init+0xa0>)
 8001378:	4a20      	ldr	r2, [pc, #128]	; (80013fc <MX_TIM1_Init+0xa4>)
 800137a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800137c:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <MX_TIM1_Init+0xa0>)
 800137e:	2247      	movs	r2, #71	; 0x47
 8001380:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001382:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <MX_TIM1_Init+0xa0>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001388:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <MX_TIM1_Init+0xa0>)
 800138a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800138e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001390:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <MX_TIM1_Init+0xa0>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001396:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <MX_TIM1_Init+0xa0>)
 8001398:	2200      	movs	r2, #0
 800139a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139c:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <MX_TIM1_Init+0xa0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013a2:	4815      	ldr	r0, [pc, #84]	; (80013f8 <MX_TIM1_Init+0xa0>)
 80013a4:	f002 fbc8 	bl	8003b38 <HAL_TIM_Base_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80013ae:	f000 fa11 	bl	80017d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	4619      	mov	r1, r3
 80013be:	480e      	ldr	r0, [pc, #56]	; (80013f8 <MX_TIM1_Init+0xa0>)
 80013c0:	f002 fd86 	bl	8003ed0 <HAL_TIM_ConfigClockSource>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80013ca:	f000 fa03 	bl	80017d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	4619      	mov	r1, r3
 80013de:	4806      	ldr	r0, [pc, #24]	; (80013f8 <MX_TIM1_Init+0xa0>)
 80013e0:	f003 f9ee 	bl	80047c0 <HAL_TIMEx_MasterConfigSynchronization>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013ea:	f000 f9f3 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	3720      	adds	r7, #32
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200008ec 	.word	0x200008ec
 80013fc:	40012c00 	.word	0x40012c00

08001400 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08e      	sub	sp, #56	; 0x38
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	611a      	str	r2, [r3, #16]
 800142e:	615a      	str	r2, [r3, #20]
 8001430:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001432:	4b2e      	ldr	r3, [pc, #184]	; (80014ec <MX_TIM2_Init+0xec>)
 8001434:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001438:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800143a:	4b2c      	ldr	r3, [pc, #176]	; (80014ec <MX_TIM2_Init+0xec>)
 800143c:	2247      	movs	r2, #71	; 0x47
 800143e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001440:	4b2a      	ldr	r3, [pc, #168]	; (80014ec <MX_TIM2_Init+0xec>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8001446:	4b29      	ldr	r3, [pc, #164]	; (80014ec <MX_TIM2_Init+0xec>)
 8001448:	f644 6220 	movw	r2, #20000	; 0x4e20
 800144c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144e:	4b27      	ldr	r3, [pc, #156]	; (80014ec <MX_TIM2_Init+0xec>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001454:	4b25      	ldr	r3, [pc, #148]	; (80014ec <MX_TIM2_Init+0xec>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800145a:	4824      	ldr	r0, [pc, #144]	; (80014ec <MX_TIM2_Init+0xec>)
 800145c:	f002 fb6c 	bl	8003b38 <HAL_TIM_Base_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001466:	f000 f9b5 	bl	80017d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001470:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001474:	4619      	mov	r1, r3
 8001476:	481d      	ldr	r0, [pc, #116]	; (80014ec <MX_TIM2_Init+0xec>)
 8001478:	f002 fd2a 	bl	8003ed0 <HAL_TIM_ConfigClockSource>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001482:	f000 f9a7 	bl	80017d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001486:	4819      	ldr	r0, [pc, #100]	; (80014ec <MX_TIM2_Init+0xec>)
 8001488:	f002 fbad 	bl	8003be6 <HAL_TIM_PWM_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001492:	f000 f99f 	bl	80017d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	4811      	ldr	r0, [pc, #68]	; (80014ec <MX_TIM2_Init+0xec>)
 80014a6:	f003 f98b 	bl	80047c0 <HAL_TIMEx_MasterConfigSynchronization>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80014b0:	f000 f990 	bl	80017d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014b4:	2360      	movs	r3, #96	; 0x60
 80014b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80014b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014c6:	463b      	mov	r3, r7
 80014c8:	2200      	movs	r2, #0
 80014ca:	4619      	mov	r1, r3
 80014cc:	4807      	ldr	r0, [pc, #28]	; (80014ec <MX_TIM2_Init+0xec>)
 80014ce:	f002 fbeb 	bl	8003ca8 <HAL_TIM_PWM_ConfigChannel>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80014d8:	f000 f97c 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014dc:	4803      	ldr	r0, [pc, #12]	; (80014ec <MX_TIM2_Init+0xec>)
 80014de:	f000 f9e9 	bl	80018b4 <HAL_TIM_MspPostInit>

}
 80014e2:	bf00      	nop
 80014e4:	3738      	adds	r7, #56	; 0x38
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000938 	.word	0x20000938

080014f0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800150e:	4b1f      	ldr	r3, [pc, #124]	; (800158c <MX_TIM15_Init+0x9c>)
 8001510:	4a1f      	ldr	r2, [pc, #124]	; (8001590 <MX_TIM15_Init+0xa0>)
 8001512:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 72-1;
 8001514:	4b1d      	ldr	r3, [pc, #116]	; (800158c <MX_TIM15_Init+0x9c>)
 8001516:	2247      	movs	r2, #71	; 0x47
 8001518:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151a:	4b1c      	ldr	r3, [pc, #112]	; (800158c <MX_TIM15_Init+0x9c>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000;
 8001520:	4b1a      	ldr	r3, [pc, #104]	; (800158c <MX_TIM15_Init+0x9c>)
 8001522:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001526:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001528:	4b18      	ldr	r3, [pc, #96]	; (800158c <MX_TIM15_Init+0x9c>)
 800152a:	2200      	movs	r2, #0
 800152c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800152e:	4b17      	ldr	r3, [pc, #92]	; (800158c <MX_TIM15_Init+0x9c>)
 8001530:	2200      	movs	r2, #0
 8001532:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001534:	4b15      	ldr	r3, [pc, #84]	; (800158c <MX_TIM15_Init+0x9c>)
 8001536:	2200      	movs	r2, #0
 8001538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800153a:	4814      	ldr	r0, [pc, #80]	; (800158c <MX_TIM15_Init+0x9c>)
 800153c:	f002 fafc 	bl	8003b38 <HAL_TIM_Base_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001546:	f000 f945 	bl	80017d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800154a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	4619      	mov	r1, r3
 8001556:	480d      	ldr	r0, [pc, #52]	; (800158c <MX_TIM15_Init+0x9c>)
 8001558:	f002 fcba 	bl	8003ed0 <HAL_TIM_ConfigClockSource>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001562:	f000 f937 	bl	80017d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	4619      	mov	r1, r3
 8001572:	4806      	ldr	r0, [pc, #24]	; (800158c <MX_TIM15_Init+0x9c>)
 8001574:	f003 f924 	bl	80047c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800157e:	f000 f929 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	3720      	adds	r7, #32
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000984 	.word	0x20000984
 8001590:	40014000 	.word	0x40014000

08001594 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001598:	4b14      	ldr	r3, [pc, #80]	; (80015ec <MX_USART1_UART_Init+0x58>)
 800159a:	4a15      	ldr	r2, [pc, #84]	; (80015f0 <MX_USART1_UART_Init+0x5c>)
 800159c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800159e:	4b13      	ldr	r3, [pc, #76]	; (80015ec <MX_USART1_UART_Init+0x58>)
 80015a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <MX_USART1_UART_Init+0x58>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <MX_USART1_UART_Init+0x58>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <MX_USART1_UART_Init+0x58>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <MX_USART1_UART_Init+0x58>)
 80015ba:	220c      	movs	r2, #12
 80015bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <MX_USART1_UART_Init+0x58>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <MX_USART1_UART_Init+0x58>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <MX_USART1_UART_Init+0x58>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <MX_USART1_UART_Init+0x58>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_USART1_UART_Init+0x58>)
 80015d8:	f003 f958 	bl	800488c <HAL_UART_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015e2:	f000 f8f7 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200009d0 	.word	0x200009d0
 80015f0:	40013800 	.word	0x40013800

080015f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <MX_USART2_UART_Init+0x58>)
 80015fa:	4a15      	ldr	r2, [pc, #84]	; (8001650 <MX_USART2_UART_Init+0x5c>)
 80015fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <MX_USART2_UART_Init+0x58>)
 8001600:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001604:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <MX_USART2_UART_Init+0x58>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <MX_USART2_UART_Init+0x58>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <MX_USART2_UART_Init+0x58>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <MX_USART2_UART_Init+0x58>)
 800161a:	220c      	movs	r2, #12
 800161c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <MX_USART2_UART_Init+0x58>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_USART2_UART_Init+0x58>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <MX_USART2_UART_Init+0x58>)
 800162c:	2200      	movs	r2, #0
 800162e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <MX_USART2_UART_Init+0x58>)
 8001632:	2200      	movs	r2, #0
 8001634:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_USART2_UART_Init+0x58>)
 8001638:	f003 f928 	bl	800488c <HAL_UART_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001642:	f000 f8c7 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000a58 	.word	0x20000a58
 8001650:	40004400 	.word	0x40004400

08001654 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <MX_USART3_UART_Init+0x58>)
 800165a:	4a15      	ldr	r2, [pc, #84]	; (80016b0 <MX_USART3_UART_Init+0x5c>)
 800165c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <MX_USART3_UART_Init+0x58>)
 8001660:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001664:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_USART3_UART_Init+0x58>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <MX_USART3_UART_Init+0x58>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_USART3_UART_Init+0x58>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_USART3_UART_Init+0x58>)
 800167a:	220c      	movs	r2, #12
 800167c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <MX_USART3_UART_Init+0x58>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_USART3_UART_Init+0x58>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <MX_USART3_UART_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_USART3_UART_Init+0x58>)
 8001692:	2200      	movs	r2, #0
 8001694:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_USART3_UART_Init+0x58>)
 8001698:	f003 f8f8 	bl	800488c <HAL_UART_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80016a2:	f000 f897 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000ae0 	.word	0x20000ae0
 80016b0:	40004800 	.word	0x40004800

080016b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
 80016c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ca:	4b3f      	ldr	r3, [pc, #252]	; (80017c8 <MX_GPIO_Init+0x114>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	4a3e      	ldr	r2, [pc, #248]	; (80017c8 <MX_GPIO_Init+0x114>)
 80016d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016d4:	6153      	str	r3, [r2, #20]
 80016d6:	4b3c      	ldr	r3, [pc, #240]	; (80017c8 <MX_GPIO_Init+0x114>)
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016e2:	4b39      	ldr	r3, [pc, #228]	; (80017c8 <MX_GPIO_Init+0x114>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	4a38      	ldr	r2, [pc, #224]	; (80017c8 <MX_GPIO_Init+0x114>)
 80016e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016ec:	6153      	str	r3, [r2, #20]
 80016ee:	4b36      	ldr	r3, [pc, #216]	; (80017c8 <MX_GPIO_Init+0x114>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <MX_GPIO_Init+0x114>)
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	4a32      	ldr	r2, [pc, #200]	; (80017c8 <MX_GPIO_Init+0x114>)
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001704:	6153      	str	r3, [r2, #20]
 8001706:	4b30      	ldr	r3, [pc, #192]	; (80017c8 <MX_GPIO_Init+0x114>)
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <MX_GPIO_Init+0x114>)
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	4a2c      	ldr	r2, [pc, #176]	; (80017c8 <MX_GPIO_Init+0x114>)
 8001718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800171c:	6153      	str	r3, [r2, #20]
 800171e:	4b2a      	ldr	r3, [pc, #168]	; (80017c8 <MX_GPIO_Init+0x114>)
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN2_Pin|IN4_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	2122      	movs	r1, #34	; 0x22
 800172e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001732:	f000 fde3 	bl	80022fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN3_Pin|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001736:	2200      	movs	r2, #0
 8001738:	f24e 01f9 	movw	r1, #57593	; 0xe0f9
 800173c:	4823      	ldr	r0, [pc, #140]	; (80017cc <MX_GPIO_Init+0x118>)
 800173e:	f000 fddd 	bl	80022fc <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	2180      	movs	r1, #128	; 0x80
 8001746:	4822      	ldr	r0, [pc, #136]	; (80017d0 <MX_GPIO_Init+0x11c>)
 8001748:	f000 fdd8 	bl	80022fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12;
 800174c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001756:	2301      	movs	r3, #1
 8001758:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	481b      	ldr	r0, [pc, #108]	; (80017d0 <MX_GPIO_Init+0x11c>)
 8001762:	f000 fc59 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_Pin IN4_Pin */
  GPIO_InitStruct.Pin = IN2_Pin|IN4_Pin;
 8001766:	2322      	movs	r3, #34	; 0x22
 8001768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176a:	2301      	movs	r3, #1
 800176c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4619      	mov	r1, r3
 800177c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001780:	f000 fc4a 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN3_Pin PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           IN1_Pin */
  GPIO_InitStruct.Pin = IN3_Pin|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001784:	f24e 03f9 	movw	r3, #57593	; 0xe0f9
 8001788:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178a:	2301      	movs	r3, #1
 800178c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	4619      	mov	r1, r3
 800179c:	480b      	ldr	r0, [pc, #44]	; (80017cc <MX_GPIO_Init+0x118>)
 800179e:	f000 fc3b 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	4805      	ldr	r0, [pc, #20]	; (80017d0 <MX_GPIO_Init+0x11c>)
 80017ba:	f000 fc2d 	bl	8002018 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017be:	bf00      	nop
 80017c0:	3728      	adds	r7, #40	; 0x28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000
 80017cc:	48000400 	.word	0x48000400
 80017d0:	48000800 	.word	0x48000800

080017d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d8:	b672      	cpsid	i
}
 80017da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017dc:	e7fe      	b.n	80017dc <Error_Handler+0x8>
	...

080017e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <HAL_MspInit+0x44>)
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	4a0e      	ldr	r2, [pc, #56]	; (8001824 <HAL_MspInit+0x44>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6193      	str	r3, [r2, #24]
 80017f2:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <HAL_MspInit+0x44>)
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <HAL_MspInit+0x44>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	4a08      	ldr	r2, [pc, #32]	; (8001824 <HAL_MspInit+0x44>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001808:	61d3      	str	r3, [r2, #28]
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_MspInit+0x44>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000

08001828 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a1c      	ldr	r2, [pc, #112]	; (80018a8 <HAL_TIM_Base_MspInit+0x80>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d10c      	bne.n	8001854 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800183a:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <HAL_TIM_Base_MspInit+0x84>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	4a1b      	ldr	r2, [pc, #108]	; (80018ac <HAL_TIM_Base_MspInit+0x84>)
 8001840:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001844:	6193      	str	r3, [r2, #24]
 8001846:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_TIM_Base_MspInit+0x84>)
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001852:	e022      	b.n	800189a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800185c:	d10c      	bne.n	8001878 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800185e:	4b13      	ldr	r3, [pc, #76]	; (80018ac <HAL_TIM_Base_MspInit+0x84>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4a12      	ldr	r2, [pc, #72]	; (80018ac <HAL_TIM_Base_MspInit+0x84>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	61d3      	str	r3, [r2, #28]
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_TIM_Base_MspInit+0x84>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]
}
 8001876:	e010      	b.n	800189a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM15)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0c      	ldr	r2, [pc, #48]	; (80018b0 <HAL_TIM_Base_MspInit+0x88>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d10b      	bne.n	800189a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <HAL_TIM_Base_MspInit+0x84>)
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	4a09      	ldr	r2, [pc, #36]	; (80018ac <HAL_TIM_Base_MspInit+0x84>)
 8001888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188c:	6193      	str	r3, [r2, #24]
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <HAL_TIM_Base_MspInit+0x84>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
}
 800189a:	bf00      	nop
 800189c:	371c      	adds	r7, #28
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40012c00 	.word	0x40012c00
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40014000 	.word	0x40014000

080018b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d4:	d11c      	bne.n	8001910 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_TIM_MspPostInit+0x64>)
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	4a0f      	ldr	r2, [pc, #60]	; (8001918 <HAL_TIM_MspPostInit+0x64>)
 80018dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e0:	6153      	str	r3, [r2, #20]
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <HAL_TIM_MspPostInit+0x64>)
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018ee:	2301      	movs	r3, #1
 80018f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018fe:	2301      	movs	r3, #1
 8001900:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001902:	f107 030c 	add.w	r3, r7, #12
 8001906:	4619      	mov	r1, r3
 8001908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800190c:	f000 fb84 	bl	8002018 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001910:	bf00      	nop
 8001912:	3720      	adds	r7, #32
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40021000 	.word	0x40021000

0800191c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08e      	sub	sp, #56	; 0x38
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a4f      	ldr	r2, [pc, #316]	; (8001a78 <HAL_UART_MspInit+0x15c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d132      	bne.n	80019a4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800193e:	4b4f      	ldr	r3, [pc, #316]	; (8001a7c <HAL_UART_MspInit+0x160>)
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	4a4e      	ldr	r2, [pc, #312]	; (8001a7c <HAL_UART_MspInit+0x160>)
 8001944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001948:	6193      	str	r3, [r2, #24]
 800194a:	4b4c      	ldr	r3, [pc, #304]	; (8001a7c <HAL_UART_MspInit+0x160>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001952:	623b      	str	r3, [r7, #32]
 8001954:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	4b49      	ldr	r3, [pc, #292]	; (8001a7c <HAL_UART_MspInit+0x160>)
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	4a48      	ldr	r2, [pc, #288]	; (8001a7c <HAL_UART_MspInit+0x160>)
 800195c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001960:	6153      	str	r3, [r2, #20]
 8001962:	4b46      	ldr	r3, [pc, #280]	; (8001a7c <HAL_UART_MspInit+0x160>)
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	61fb      	str	r3, [r7, #28]
 800196c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800196e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800197c:	2303      	movs	r3, #3
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001980:	2307      	movs	r3, #7
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001988:	4619      	mov	r1, r3
 800198a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198e:	f000 fb43 	bl	8002018 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	2025      	movs	r0, #37	; 0x25
 8001998:	f000 fa91 	bl	8001ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800199c:	2025      	movs	r0, #37	; 0x25
 800199e:	f000 faaa 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019a2:	e064      	b.n	8001a6e <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART2)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a35      	ldr	r2, [pc, #212]	; (8001a80 <HAL_UART_MspInit+0x164>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d131      	bne.n	8001a12 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ae:	4b33      	ldr	r3, [pc, #204]	; (8001a7c <HAL_UART_MspInit+0x160>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	4a32      	ldr	r2, [pc, #200]	; (8001a7c <HAL_UART_MspInit+0x160>)
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b8:	61d3      	str	r3, [r2, #28]
 80019ba:	4b30      	ldr	r3, [pc, #192]	; (8001a7c <HAL_UART_MspInit+0x160>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	61bb      	str	r3, [r7, #24]
 80019c4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <HAL_UART_MspInit+0x160>)
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	4a2c      	ldr	r2, [pc, #176]	; (8001a7c <HAL_UART_MspInit+0x160>)
 80019cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d0:	6153      	str	r3, [r2, #20]
 80019d2:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <HAL_UART_MspInit+0x160>)
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019de:	230c      	movs	r3, #12
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ea:	2303      	movs	r3, #3
 80019ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019ee:	2307      	movs	r3, #7
 80019f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f6:	4619      	mov	r1, r3
 80019f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019fc:	f000 fb0c 	bl	8002018 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2100      	movs	r1, #0
 8001a04:	2026      	movs	r0, #38	; 0x26
 8001a06:	f000 fa5a 	bl	8001ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a0a:	2026      	movs	r0, #38	; 0x26
 8001a0c:	f000 fa73 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
}
 8001a10:	e02d      	b.n	8001a6e <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART3)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a1b      	ldr	r2, [pc, #108]	; (8001a84 <HAL_UART_MspInit+0x168>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d128      	bne.n	8001a6e <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a1c:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <HAL_UART_MspInit+0x160>)
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	4a16      	ldr	r2, [pc, #88]	; (8001a7c <HAL_UART_MspInit+0x160>)
 8001a22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a26:	61d3      	str	r3, [r2, #28]
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <HAL_UART_MspInit+0x160>)
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <HAL_UART_MspInit+0x160>)
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	4a10      	ldr	r2, [pc, #64]	; (8001a7c <HAL_UART_MspInit+0x160>)
 8001a3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a3e:	6153      	str	r3, [r2, #20]
 8001a40:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <HAL_UART_MspInit+0x160>)
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a4c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a5e:	2307      	movs	r3, #7
 8001a60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a66:	4619      	mov	r1, r3
 8001a68:	4807      	ldr	r0, [pc, #28]	; (8001a88 <HAL_UART_MspInit+0x16c>)
 8001a6a:	f000 fad5 	bl	8002018 <HAL_GPIO_Init>
}
 8001a6e:	bf00      	nop
 8001a70:	3738      	adds	r7, #56	; 0x38
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40013800 	.word	0x40013800
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40004400 	.word	0x40004400
 8001a84:	40004800 	.word	0x40004800
 8001a88:	48000400 	.word	0x48000400

08001a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <NMI_Handler+0x4>

08001a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a96:	e7fe      	b.n	8001a96 <HardFault_Handler+0x4>

08001a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <MemManage_Handler+0x4>

08001a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa2:	e7fe      	b.n	8001aa2 <BusFault_Handler+0x4>

08001aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <UsageFault_Handler+0x4>

08001aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad8:	f000 f8d2 	bl	8001c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	Uart_isr (&huart1);
 8001ae4:	4803      	ldr	r0, [pc, #12]	; (8001af4 <USART1_IRQHandler+0x14>)
 8001ae6:	f7ff fb0b 	bl	8001100 <Uart_isr>

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001aea:	4802      	ldr	r0, [pc, #8]	; (8001af4 <USART1_IRQHandler+0x14>)
 8001aec:	f002 ff1c 	bl	8004928 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	200009d0 	.word	0x200009d0

08001af8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	Uart_isr (&huart2);
 8001afc:	4803      	ldr	r0, [pc, #12]	; (8001b0c <USART2_IRQHandler+0x14>)
 8001afe:	f7ff faff 	bl	8001100 <Uart_isr>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b02:	4802      	ldr	r0, [pc, #8]	; (8001b0c <USART2_IRQHandler+0x14>)
 8001b04:	f002 ff10 	bl	8004928 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000a58 	.word	0x20000a58

08001b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b18:	4a14      	ldr	r2, [pc, #80]	; (8001b6c <_sbrk+0x5c>)
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <_sbrk+0x60>)
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b24:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <_sbrk+0x64>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d102      	bne.n	8001b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <_sbrk+0x64>)
 8001b2e:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <_sbrk+0x68>)
 8001b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <_sbrk+0x64>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d207      	bcs.n	8001b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b40:	f003 fd8e 	bl	8005660 <__errno>
 8001b44:	4603      	mov	r3, r0
 8001b46:	220c      	movs	r2, #12
 8001b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4e:	e009      	b.n	8001b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <_sbrk+0x64>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <_sbrk+0x64>)
 8001b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b62:	68fb      	ldr	r3, [r7, #12]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20004000 	.word	0x20004000
 8001b70:	00000400 	.word	0x00000400
 8001b74:	20000b68 	.word	0x20000b68
 8001b78:	20000b80 	.word	0x20000b80

08001b7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <SystemInit+0x20>)
 8001b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b86:	4a05      	ldr	r2, [pc, #20]	; (8001b9c <SystemInit+0x20>)
 8001b88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bd8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ba4:	f7ff ffea 	bl	8001b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba8:	480c      	ldr	r0, [pc, #48]	; (8001bdc <LoopForever+0x6>)
  ldr r1, =_edata
 8001baa:	490d      	ldr	r1, [pc, #52]	; (8001be0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bac:	4a0d      	ldr	r2, [pc, #52]	; (8001be4 <LoopForever+0xe>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb0:	e002      	b.n	8001bb8 <LoopCopyDataInit>

08001bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb6:	3304      	adds	r3, #4

08001bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bbc:	d3f9      	bcc.n	8001bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bc0:	4c0a      	ldr	r4, [pc, #40]	; (8001bec <LoopForever+0x16>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc4:	e001      	b.n	8001bca <LoopFillZerobss>

08001bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc8:	3204      	adds	r2, #4

08001bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bcc:	d3fb      	bcc.n	8001bc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bce:	f003 fd4d 	bl	800566c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bd2:	f7ff fb41 	bl	8001258 <main>

08001bd6 <LoopForever>:

LoopForever:
    b LoopForever
 8001bd6:	e7fe      	b.n	8001bd6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bd8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001be4:	08006ac4 	.word	0x08006ac4
  ldr r2, =_sbss
 8001be8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001bec:	20000b80 	.word	0x20000b80

08001bf0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC1_IRQHandler>
	...

08001bf4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <HAL_Init+0x28>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <HAL_Init+0x28>)
 8001bfe:	f043 0310 	orr.w	r3, r3, #16
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c04:	2003      	movs	r0, #3
 8001c06:	f000 f94f 	bl	8001ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f000 f808 	bl	8001c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c10:	f7ff fde6 	bl	80017e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40022000 	.word	0x40022000

08001c20 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_InitTick+0x54>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_InitTick+0x58>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f967 	bl	8001f12 <HAL_SYSTICK_Config>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00e      	b.n	8001c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b0f      	cmp	r3, #15
 8001c52:	d80a      	bhi.n	8001c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c54:	2200      	movs	r2, #0
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	f000 f92f 	bl	8001ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c60:	4a06      	ldr	r2, [pc, #24]	; (8001c7c <HAL_InitTick+0x5c>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e000      	b.n	8001c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000008 	.word	0x20000008
 8001c78:	20000010 	.word	0x20000010
 8001c7c:	2000000c 	.word	0x2000000c

08001c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_IncTick+0x20>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_IncTick+0x24>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <HAL_IncTick+0x24>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000010 	.word	0x20000010
 8001ca4:	20000b6c 	.word	0x20000b6c

08001ca8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return uwTick;  
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <HAL_GetTick+0x14>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20000b6c 	.word	0x20000b6c

08001cc0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc8:	f7ff ffee 	bl	8001ca8 <HAL_GetTick>
 8001ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd8:	d005      	beq.n	8001ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <HAL_Delay+0x44>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ce6:	bf00      	nop
 8001ce8:	f7ff ffde 	bl	8001ca8 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d8f7      	bhi.n	8001ce8 <HAL_Delay+0x28>
  {
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000010 	.word	0x20000010

08001d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d24:	4013      	ands	r3, r2
 8001d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3a:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	60d3      	str	r3, [r2, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <__NVIC_GetPriorityGrouping+0x18>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	f003 0307 	and.w	r3, r3, #7
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	db0b      	blt.n	8001d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	f003 021f 	and.w	r2, r3, #31
 8001d84:	4907      	ldr	r1, [pc, #28]	; (8001da4 <__NVIC_EnableIRQ+0x38>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000e100 	.word	0xe000e100

08001da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	db0a      	blt.n	8001dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	490c      	ldr	r1, [pc, #48]	; (8001df4 <__NVIC_SetPriority+0x4c>)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	0112      	lsls	r2, r2, #4
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	440b      	add	r3, r1
 8001dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd0:	e00a      	b.n	8001de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4908      	ldr	r1, [pc, #32]	; (8001df8 <__NVIC_SetPriority+0x50>)
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	3b04      	subs	r3, #4
 8001de0:	0112      	lsls	r2, r2, #4
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	440b      	add	r3, r1
 8001de6:	761a      	strb	r2, [r3, #24]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000e100 	.word	0xe000e100
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f1c3 0307 	rsb	r3, r3, #7
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	bf28      	it	cs
 8001e1a:	2304      	movcs	r3, #4
 8001e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3304      	adds	r3, #4
 8001e22:	2b06      	cmp	r3, #6
 8001e24:	d902      	bls.n	8001e2c <NVIC_EncodePriority+0x30>
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3b03      	subs	r3, #3
 8001e2a:	e000      	b.n	8001e2e <NVIC_EncodePriority+0x32>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	f04f 32ff 	mov.w	r2, #4294967295
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	401a      	ands	r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e44:	f04f 31ff 	mov.w	r1, #4294967295
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4e:	43d9      	mvns	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	4313      	orrs	r3, r2
         );
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3724      	adds	r7, #36	; 0x24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e74:	d301      	bcc.n	8001e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00f      	b.n	8001e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <SysTick_Config+0x40>)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e82:	210f      	movs	r1, #15
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295
 8001e88:	f7ff ff8e 	bl	8001da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <SysTick_Config+0x40>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e92:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <SysTick_Config+0x40>)
 8001e94:	2207      	movs	r2, #7
 8001e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	e000e010 	.word	0xe000e010

08001ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff ff29 	bl	8001d08 <__NVIC_SetPriorityGrouping>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed0:	f7ff ff3e 	bl	8001d50 <__NVIC_GetPriorityGrouping>
 8001ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	6978      	ldr	r0, [r7, #20]
 8001edc:	f7ff ff8e 	bl	8001dfc <NVIC_EncodePriority>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff5d 	bl	8001da8 <__NVIC_SetPriority>
}
 8001eee:	bf00      	nop
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff31 	bl	8001d6c <__NVIC_EnableIRQ>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff ffa2 	bl	8001e64 <SysTick_Config>
 8001f20:	4603      	mov	r3, r0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d008      	beq.n	8001f4e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2204      	movs	r2, #4
 8001f40:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e020      	b.n	8001f90 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 020e 	bic.w	r2, r2, #14
 8001f5c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0201 	bic.w	r2, r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f76:	2101      	movs	r1, #1
 8001f78:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d005      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2204      	movs	r2, #4
 8001fb6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	73fb      	strb	r3, [r7, #15]
 8001fbc:	e027      	b.n	800200e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 020e 	bic.w	r2, r2, #14
 8001fcc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0201 	bic.w	r2, r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fec:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	4798      	blx	r3
    } 
  }
  return status;
 800200e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002026:	e14e      	b.n	80022c6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	2101      	movs	r1, #1
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	fa01 f303 	lsl.w	r3, r1, r3
 8002034:	4013      	ands	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 8140 	beq.w	80022c0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	2b01      	cmp	r3, #1
 800204a:	d005      	beq.n	8002058 <HAL_GPIO_Init+0x40>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d130      	bne.n	80020ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	2203      	movs	r2, #3
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800208e:	2201      	movs	r2, #1
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4013      	ands	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	091b      	lsrs	r3, r3, #4
 80020a4:	f003 0201 	and.w	r2, r3, #1
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d017      	beq.n	80020f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	2203      	movs	r2, #3
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4013      	ands	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d123      	bne.n	800214a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	08da      	lsrs	r2, r3, #3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3208      	adds	r2, #8
 800210a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800210e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	220f      	movs	r2, #15
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4013      	ands	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	691a      	ldr	r2, [r3, #16]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	08da      	lsrs	r2, r3, #3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3208      	adds	r2, #8
 8002144:	6939      	ldr	r1, [r7, #16]
 8002146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	2203      	movs	r2, #3
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	4013      	ands	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 0203 	and.w	r2, r3, #3
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 809a 	beq.w	80022c0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218c:	4b55      	ldr	r3, [pc, #340]	; (80022e4 <HAL_GPIO_Init+0x2cc>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	4a54      	ldr	r2, [pc, #336]	; (80022e4 <HAL_GPIO_Init+0x2cc>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6193      	str	r3, [r2, #24]
 8002198:	4b52      	ldr	r3, [pc, #328]	; (80022e4 <HAL_GPIO_Init+0x2cc>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021a4:	4a50      	ldr	r2, [pc, #320]	; (80022e8 <HAL_GPIO_Init+0x2d0>)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	089b      	lsrs	r3, r3, #2
 80021aa:	3302      	adds	r3, #2
 80021ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	220f      	movs	r2, #15
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4013      	ands	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021ce:	d013      	beq.n	80021f8 <HAL_GPIO_Init+0x1e0>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a46      	ldr	r2, [pc, #280]	; (80022ec <HAL_GPIO_Init+0x2d4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d00d      	beq.n	80021f4 <HAL_GPIO_Init+0x1dc>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a45      	ldr	r2, [pc, #276]	; (80022f0 <HAL_GPIO_Init+0x2d8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d007      	beq.n	80021f0 <HAL_GPIO_Init+0x1d8>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a44      	ldr	r2, [pc, #272]	; (80022f4 <HAL_GPIO_Init+0x2dc>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d101      	bne.n	80021ec <HAL_GPIO_Init+0x1d4>
 80021e8:	2303      	movs	r3, #3
 80021ea:	e006      	b.n	80021fa <HAL_GPIO_Init+0x1e2>
 80021ec:	2305      	movs	r3, #5
 80021ee:	e004      	b.n	80021fa <HAL_GPIO_Init+0x1e2>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e002      	b.n	80021fa <HAL_GPIO_Init+0x1e2>
 80021f4:	2301      	movs	r3, #1
 80021f6:	e000      	b.n	80021fa <HAL_GPIO_Init+0x1e2>
 80021f8:	2300      	movs	r3, #0
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	f002 0203 	and.w	r2, r2, #3
 8002200:	0092      	lsls	r2, r2, #2
 8002202:	4093      	lsls	r3, r2
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800220a:	4937      	ldr	r1, [pc, #220]	; (80022e8 <HAL_GPIO_Init+0x2d0>)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	089b      	lsrs	r3, r3, #2
 8002210:	3302      	adds	r3, #2
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002218:	4b37      	ldr	r3, [pc, #220]	; (80022f8 <HAL_GPIO_Init+0x2e0>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	43db      	mvns	r3, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4313      	orrs	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800223c:	4a2e      	ldr	r2, [pc, #184]	; (80022f8 <HAL_GPIO_Init+0x2e0>)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002242:	4b2d      	ldr	r3, [pc, #180]	; (80022f8 <HAL_GPIO_Init+0x2e0>)
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	43db      	mvns	r3, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002266:	4a24      	ldr	r2, [pc, #144]	; (80022f8 <HAL_GPIO_Init+0x2e0>)
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800226c:	4b22      	ldr	r3, [pc, #136]	; (80022f8 <HAL_GPIO_Init+0x2e0>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	43db      	mvns	r3, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002290:	4a19      	ldr	r2, [pc, #100]	; (80022f8 <HAL_GPIO_Init+0x2e0>)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002296:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <HAL_GPIO_Init+0x2e0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	43db      	mvns	r3, r3
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4013      	ands	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022ba:	4a0f      	ldr	r2, [pc, #60]	; (80022f8 <HAL_GPIO_Init+0x2e0>)
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	3301      	adds	r3, #1
 80022c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	fa22 f303 	lsr.w	r3, r2, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f47f aea9 	bne.w	8002028 <HAL_GPIO_Init+0x10>
  }
}
 80022d6:	bf00      	nop
 80022d8:	bf00      	nop
 80022da:	371c      	adds	r7, #28
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40010000 	.word	0x40010000
 80022ec:	48000400 	.word	0x48000400
 80022f0:	48000800 	.word	0x48000800
 80022f4:	48000c00 	.word	0x48000c00
 80022f8:	40010400 	.word	0x40010400

080022fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	807b      	strh	r3, [r7, #2]
 8002308:	4613      	mov	r3, r2
 800230a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800230c:	787b      	ldrb	r3, [r7, #1]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002312:	887a      	ldrh	r2, [r7, #2]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002318:	e002      	b.n	8002320 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002332:	af00      	add	r7, sp, #0
 8002334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002338:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800233c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800233e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002342:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d102      	bne.n	8002352 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	f001 b823 	b.w	8003398 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002356:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 817d 	beq.w	8002662 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002368:	4bbc      	ldr	r3, [pc, #752]	; (800265c <HAL_RCC_OscConfig+0x330>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 030c 	and.w	r3, r3, #12
 8002370:	2b04      	cmp	r3, #4
 8002372:	d00c      	beq.n	800238e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002374:	4bb9      	ldr	r3, [pc, #740]	; (800265c <HAL_RCC_OscConfig+0x330>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 030c 	and.w	r3, r3, #12
 800237c:	2b08      	cmp	r3, #8
 800237e:	d15c      	bne.n	800243a <HAL_RCC_OscConfig+0x10e>
 8002380:	4bb6      	ldr	r3, [pc, #728]	; (800265c <HAL_RCC_OscConfig+0x330>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238c:	d155      	bne.n	800243a <HAL_RCC_OscConfig+0x10e>
 800238e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002392:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800239a:	fa93 f3a3 	rbit	r3, r3
 800239e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023a2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	095b      	lsrs	r3, r3, #5
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d102      	bne.n	80023c0 <HAL_RCC_OscConfig+0x94>
 80023ba:	4ba8      	ldr	r3, [pc, #672]	; (800265c <HAL_RCC_OscConfig+0x330>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	e015      	b.n	80023ec <HAL_RCC_OscConfig+0xc0>
 80023c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023c4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80023d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023d8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80023dc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80023e0:	fa93 f3a3 	rbit	r3, r3
 80023e4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80023e8:	4b9c      	ldr	r3, [pc, #624]	; (800265c <HAL_RCC_OscConfig+0x330>)
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023f0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80023f4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80023f8:	fa92 f2a2 	rbit	r2, r2
 80023fc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002400:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002404:	fab2 f282 	clz	r2, r2
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	f042 0220 	orr.w	r2, r2, #32
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	f002 021f 	and.w	r2, r2, #31
 8002414:	2101      	movs	r1, #1
 8002416:	fa01 f202 	lsl.w	r2, r1, r2
 800241a:	4013      	ands	r3, r2
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 811f 	beq.w	8002660 <HAL_RCC_OscConfig+0x334>
 8002422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002426:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	f040 8116 	bne.w	8002660 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	f000 bfaf 	b.w	8003398 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800243a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800244a:	d106      	bne.n	800245a <HAL_RCC_OscConfig+0x12e>
 800244c:	4b83      	ldr	r3, [pc, #524]	; (800265c <HAL_RCC_OscConfig+0x330>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a82      	ldr	r2, [pc, #520]	; (800265c <HAL_RCC_OscConfig+0x330>)
 8002452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	e036      	b.n	80024c8 <HAL_RCC_OscConfig+0x19c>
 800245a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10c      	bne.n	8002484 <HAL_RCC_OscConfig+0x158>
 800246a:	4b7c      	ldr	r3, [pc, #496]	; (800265c <HAL_RCC_OscConfig+0x330>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a7b      	ldr	r2, [pc, #492]	; (800265c <HAL_RCC_OscConfig+0x330>)
 8002470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4b79      	ldr	r3, [pc, #484]	; (800265c <HAL_RCC_OscConfig+0x330>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a78      	ldr	r2, [pc, #480]	; (800265c <HAL_RCC_OscConfig+0x330>)
 800247c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e021      	b.n	80024c8 <HAL_RCC_OscConfig+0x19c>
 8002484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002488:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0x184>
 8002496:	4b71      	ldr	r3, [pc, #452]	; (800265c <HAL_RCC_OscConfig+0x330>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a70      	ldr	r2, [pc, #448]	; (800265c <HAL_RCC_OscConfig+0x330>)
 800249c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b6e      	ldr	r3, [pc, #440]	; (800265c <HAL_RCC_OscConfig+0x330>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a6d      	ldr	r2, [pc, #436]	; (800265c <HAL_RCC_OscConfig+0x330>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e00b      	b.n	80024c8 <HAL_RCC_OscConfig+0x19c>
 80024b0:	4b6a      	ldr	r3, [pc, #424]	; (800265c <HAL_RCC_OscConfig+0x330>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a69      	ldr	r2, [pc, #420]	; (800265c <HAL_RCC_OscConfig+0x330>)
 80024b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b67      	ldr	r3, [pc, #412]	; (800265c <HAL_RCC_OscConfig+0x330>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a66      	ldr	r2, [pc, #408]	; (800265c <HAL_RCC_OscConfig+0x330>)
 80024c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024c8:	4b64      	ldr	r3, [pc, #400]	; (800265c <HAL_RCC_OscConfig+0x330>)
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	f023 020f 	bic.w	r2, r3, #15
 80024d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	495f      	ldr	r1, [pc, #380]	; (800265c <HAL_RCC_OscConfig+0x330>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d059      	beq.n	80025a6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f2:	f7ff fbd9 	bl	8001ca8 <HAL_GetTick>
 80024f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fa:	e00a      	b.n	8002512 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024fc:	f7ff fbd4 	bl	8001ca8 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b64      	cmp	r3, #100	; 0x64
 800250a:	d902      	bls.n	8002512 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	f000 bf43 	b.w	8003398 <HAL_RCC_OscConfig+0x106c>
 8002512:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002516:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800251e:	fa93 f3a3 	rbit	r3, r3
 8002522:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002526:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252a:	fab3 f383 	clz	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	095b      	lsrs	r3, r3, #5
 8002532:	b2db      	uxtb	r3, r3
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b01      	cmp	r3, #1
 800253c:	d102      	bne.n	8002544 <HAL_RCC_OscConfig+0x218>
 800253e:	4b47      	ldr	r3, [pc, #284]	; (800265c <HAL_RCC_OscConfig+0x330>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	e015      	b.n	8002570 <HAL_RCC_OscConfig+0x244>
 8002544:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002548:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002550:	fa93 f3a3 	rbit	r3, r3
 8002554:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002558:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800255c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002560:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800256c:	4b3b      	ldr	r3, [pc, #236]	; (800265c <HAL_RCC_OscConfig+0x330>)
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002574:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002578:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800257c:	fa92 f2a2 	rbit	r2, r2
 8002580:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002584:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002588:	fab2 f282 	clz	r2, r2
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	f042 0220 	orr.w	r2, r2, #32
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	f002 021f 	and.w	r2, r2, #31
 8002598:	2101      	movs	r1, #1
 800259a:	fa01 f202 	lsl.w	r2, r1, r2
 800259e:	4013      	ands	r3, r2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0ab      	beq.n	80024fc <HAL_RCC_OscConfig+0x1d0>
 80025a4:	e05d      	b.n	8002662 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a6:	f7ff fb7f 	bl	8001ca8 <HAL_GetTick>
 80025aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ae:	e00a      	b.n	80025c6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b0:	f7ff fb7a 	bl	8001ca8 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b64      	cmp	r3, #100	; 0x64
 80025be:	d902      	bls.n	80025c6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	f000 bee9 	b.w	8003398 <HAL_RCC_OscConfig+0x106c>
 80025c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ca:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ce:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80025da:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025de:	fab3 f383 	clz	r3, r3
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	095b      	lsrs	r3, r3, #5
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d102      	bne.n	80025f8 <HAL_RCC_OscConfig+0x2cc>
 80025f2:	4b1a      	ldr	r3, [pc, #104]	; (800265c <HAL_RCC_OscConfig+0x330>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	e015      	b.n	8002624 <HAL_RCC_OscConfig+0x2f8>
 80025f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025fc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800260c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002610:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002614:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002618:	fa93 f3a3 	rbit	r3, r3
 800261c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002620:	4b0e      	ldr	r3, [pc, #56]	; (800265c <HAL_RCC_OscConfig+0x330>)
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002628:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800262c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002630:	fa92 f2a2 	rbit	r2, r2
 8002634:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002638:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800263c:	fab2 f282 	clz	r2, r2
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	f042 0220 	orr.w	r2, r2, #32
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	f002 021f 	and.w	r2, r2, #31
 800264c:	2101      	movs	r1, #1
 800264e:	fa01 f202 	lsl.w	r2, r1, r2
 8002652:	4013      	ands	r3, r2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1ab      	bne.n	80025b0 <HAL_RCC_OscConfig+0x284>
 8002658:	e003      	b.n	8002662 <HAL_RCC_OscConfig+0x336>
 800265a:	bf00      	nop
 800265c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002666:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 817d 	beq.w	8002972 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002678:	4ba6      	ldr	r3, [pc, #664]	; (8002914 <HAL_RCC_OscConfig+0x5e8>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00b      	beq.n	800269c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002684:	4ba3      	ldr	r3, [pc, #652]	; (8002914 <HAL_RCC_OscConfig+0x5e8>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 030c 	and.w	r3, r3, #12
 800268c:	2b08      	cmp	r3, #8
 800268e:	d172      	bne.n	8002776 <HAL_RCC_OscConfig+0x44a>
 8002690:	4ba0      	ldr	r3, [pc, #640]	; (8002914 <HAL_RCC_OscConfig+0x5e8>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d16c      	bne.n	8002776 <HAL_RCC_OscConfig+0x44a>
 800269c:	2302      	movs	r3, #2
 800269e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80026a6:	fa93 f3a3 	rbit	r3, r3
 80026aa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80026ae:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	095b      	lsrs	r3, r3, #5
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d102      	bne.n	80026cc <HAL_RCC_OscConfig+0x3a0>
 80026c6:	4b93      	ldr	r3, [pc, #588]	; (8002914 <HAL_RCC_OscConfig+0x5e8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	e013      	b.n	80026f4 <HAL_RCC_OscConfig+0x3c8>
 80026cc:	2302      	movs	r3, #2
 80026ce:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80026de:	2302      	movs	r3, #2
 80026e0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80026e4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80026f0:	4b88      	ldr	r3, [pc, #544]	; (8002914 <HAL_RCC_OscConfig+0x5e8>)
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	2202      	movs	r2, #2
 80026f6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80026fa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80026fe:	fa92 f2a2 	rbit	r2, r2
 8002702:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002706:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800270a:	fab2 f282 	clz	r2, r2
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	f042 0220 	orr.w	r2, r2, #32
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	f002 021f 	and.w	r2, r2, #31
 800271a:	2101      	movs	r1, #1
 800271c:	fa01 f202 	lsl.w	r2, r1, r2
 8002720:	4013      	ands	r3, r2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <HAL_RCC_OscConfig+0x410>
 8002726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d002      	beq.n	800273c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	f000 be2e 	b.w	8003398 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273c:	4b75      	ldr	r3, [pc, #468]	; (8002914 <HAL_RCC_OscConfig+0x5e8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002748:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	21f8      	movs	r1, #248	; 0xf8
 8002752:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800275a:	fa91 f1a1 	rbit	r1, r1
 800275e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002762:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002766:	fab1 f181 	clz	r1, r1
 800276a:	b2c9      	uxtb	r1, r1
 800276c:	408b      	lsls	r3, r1
 800276e:	4969      	ldr	r1, [pc, #420]	; (8002914 <HAL_RCC_OscConfig+0x5e8>)
 8002770:	4313      	orrs	r3, r2
 8002772:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002774:	e0fd      	b.n	8002972 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 8088 	beq.w	8002898 <HAL_RCC_OscConfig+0x56c>
 8002788:	2301      	movs	r3, #1
 800278a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800279a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800279e:	fab3 f383 	clz	r3, r3
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	461a      	mov	r2, r3
 80027b0:	2301      	movs	r3, #1
 80027b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7ff fa78 	bl	8001ca8 <HAL_GetTick>
 80027b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027bc:	e00a      	b.n	80027d4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027be:	f7ff fa73 	bl	8001ca8 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d902      	bls.n	80027d4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	f000 bde2 	b.w	8003398 <HAL_RCC_OscConfig+0x106c>
 80027d4:	2302      	movs	r3, #2
 80027d6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80027e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ea:	fab3 f383 	clz	r3, r3
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	095b      	lsrs	r3, r3, #5
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d102      	bne.n	8002804 <HAL_RCC_OscConfig+0x4d8>
 80027fe:	4b45      	ldr	r3, [pc, #276]	; (8002914 <HAL_RCC_OscConfig+0x5e8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	e013      	b.n	800282c <HAL_RCC_OscConfig+0x500>
 8002804:	2302      	movs	r3, #2
 8002806:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800280e:	fa93 f3a3 	rbit	r3, r3
 8002812:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002816:	2302      	movs	r3, #2
 8002818:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800281c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002820:	fa93 f3a3 	rbit	r3, r3
 8002824:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002828:	4b3a      	ldr	r3, [pc, #232]	; (8002914 <HAL_RCC_OscConfig+0x5e8>)
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	2202      	movs	r2, #2
 800282e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002832:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002836:	fa92 f2a2 	rbit	r2, r2
 800283a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800283e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002842:	fab2 f282 	clz	r2, r2
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	f042 0220 	orr.w	r2, r2, #32
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	f002 021f 	and.w	r2, r2, #31
 8002852:	2101      	movs	r1, #1
 8002854:	fa01 f202 	lsl.w	r2, r1, r2
 8002858:	4013      	ands	r3, r2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0af      	beq.n	80027be <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285e:	4b2d      	ldr	r3, [pc, #180]	; (8002914 <HAL_RCC_OscConfig+0x5e8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	21f8      	movs	r1, #248	; 0xf8
 8002874:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800287c:	fa91 f1a1 	rbit	r1, r1
 8002880:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002884:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002888:	fab1 f181 	clz	r1, r1
 800288c:	b2c9      	uxtb	r1, r1
 800288e:	408b      	lsls	r3, r1
 8002890:	4920      	ldr	r1, [pc, #128]	; (8002914 <HAL_RCC_OscConfig+0x5e8>)
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]
 8002896:	e06c      	b.n	8002972 <HAL_RCC_OscConfig+0x646>
 8002898:	2301      	movs	r3, #1
 800289a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80028aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ae:	fab3 f383 	clz	r3, r3
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	461a      	mov	r2, r3
 80028c0:	2300      	movs	r3, #0
 80028c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7ff f9f0 	bl	8001ca8 <HAL_GetTick>
 80028c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028cc:	e00a      	b.n	80028e4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ce:	f7ff f9eb 	bl	8001ca8 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d902      	bls.n	80028e4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	f000 bd5a 	b.w	8003398 <HAL_RCC_OscConfig+0x106c>
 80028e4:	2302      	movs	r3, #2
 80028e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80028ee:	fa93 f3a3 	rbit	r3, r3
 80028f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80028f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	095b      	lsrs	r3, r3, #5
 8002902:	b2db      	uxtb	r3, r3
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b01      	cmp	r3, #1
 800290c:	d104      	bne.n	8002918 <HAL_RCC_OscConfig+0x5ec>
 800290e:	4b01      	ldr	r3, [pc, #4]	; (8002914 <HAL_RCC_OscConfig+0x5e8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	e015      	b.n	8002940 <HAL_RCC_OscConfig+0x614>
 8002914:	40021000 	.word	0x40021000
 8002918:	2302      	movs	r3, #2
 800291a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002922:	fa93 f3a3 	rbit	r3, r3
 8002926:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800292a:	2302      	movs	r3, #2
 800292c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002930:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002934:	fa93 f3a3 	rbit	r3, r3
 8002938:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800293c:	4bc8      	ldr	r3, [pc, #800]	; (8002c60 <HAL_RCC_OscConfig+0x934>)
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	2202      	movs	r2, #2
 8002942:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002946:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800294a:	fa92 f2a2 	rbit	r2, r2
 800294e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002952:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002956:	fab2 f282 	clz	r2, r2
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	f042 0220 	orr.w	r2, r2, #32
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	f002 021f 	and.w	r2, r2, #31
 8002966:	2101      	movs	r1, #1
 8002968:	fa01 f202 	lsl.w	r2, r1, r2
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1ad      	bne.n	80028ce <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002976:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8110 	beq.w	8002ba8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d079      	beq.n	8002a8c <HAL_RCC_OscConfig+0x760>
 8002998:	2301      	movs	r3, #1
 800299a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80029a2:	fa93 f3a3 	rbit	r3, r3
 80029a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80029aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ae:	fab3 f383 	clz	r3, r3
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	4bab      	ldr	r3, [pc, #684]	; (8002c64 <HAL_RCC_OscConfig+0x938>)
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	461a      	mov	r2, r3
 80029be:	2301      	movs	r3, #1
 80029c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c2:	f7ff f971 	bl	8001ca8 <HAL_GetTick>
 80029c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029cc:	f7ff f96c 	bl	8001ca8 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d902      	bls.n	80029e2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	f000 bcdb 	b.w	8003398 <HAL_RCC_OscConfig+0x106c>
 80029e2:	2302      	movs	r3, #2
 80029e4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80029ec:	fa93 f3a3 	rbit	r3, r3
 80029f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80029f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80029fc:	2202      	movs	r2, #2
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a04:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	fa93 f2a3 	rbit	r2, r3
 8002a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a20:	2202      	movs	r2, #2
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	fa93 f2a3 	rbit	r2, r3
 8002a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a3a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3c:	4b88      	ldr	r3, [pc, #544]	; (8002c60 <HAL_RCC_OscConfig+0x934>)
 8002a3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a44:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a48:	2102      	movs	r1, #2
 8002a4a:	6019      	str	r1, [r3, #0]
 8002a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	fa93 f1a3 	rbit	r1, r3
 8002a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a62:	6019      	str	r1, [r3, #0]
  return result;
 8002a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a68:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	fab3 f383 	clz	r3, r3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	2101      	movs	r1, #1
 8002a80:	fa01 f303 	lsl.w	r3, r1, r3
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0a0      	beq.n	80029cc <HAL_RCC_OscConfig+0x6a0>
 8002a8a:	e08d      	b.n	8002ba8 <HAL_RCC_OscConfig+0x87c>
 8002a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a90:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a94:	2201      	movs	r2, #1
 8002a96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	fa93 f2a3 	rbit	r2, r3
 8002aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aaa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002aae:	601a      	str	r2, [r3, #0]
  return result;
 8002ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ab8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aba:	fab3 f383 	clz	r3, r3
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4b68      	ldr	r3, [pc, #416]	; (8002c64 <HAL_RCC_OscConfig+0x938>)
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	461a      	mov	r2, r3
 8002aca:	2300      	movs	r3, #0
 8002acc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ace:	f7ff f8eb 	bl	8001ca8 <HAL_GetTick>
 8002ad2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad6:	e00a      	b.n	8002aee <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad8:	f7ff f8e6 	bl	8001ca8 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d902      	bls.n	8002aee <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	f000 bc55 	b.w	8003398 <HAL_RCC_OscConfig+0x106c>
 8002aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002af6:	2202      	movs	r2, #2
 8002af8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	fa93 f2a3 	rbit	r2, r3
 8002b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b16:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b22:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	fa93 f2a3 	rbit	r2, r3
 8002b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b3e:	2202      	movs	r2, #2
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	fa93 f2a3 	rbit	r2, r3
 8002b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b54:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b58:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b5a:	4b41      	ldr	r3, [pc, #260]	; (8002c60 <HAL_RCC_OscConfig+0x934>)
 8002b5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b62:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002b66:	2102      	movs	r1, #2
 8002b68:	6019      	str	r1, [r3, #0]
 8002b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	fa93 f1a3 	rbit	r1, r3
 8002b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002b80:	6019      	str	r1, [r3, #0]
  return result;
 8002b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b86:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	fab3 f383 	clz	r3, r3
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	f003 031f 	and.w	r3, r3, #31
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d197      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 81a1 	beq.w	8002f00 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc4:	4b26      	ldr	r3, [pc, #152]	; (8002c60 <HAL_RCC_OscConfig+0x934>)
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d116      	bne.n	8002bfe <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd0:	4b23      	ldr	r3, [pc, #140]	; (8002c60 <HAL_RCC_OscConfig+0x934>)
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	4a22      	ldr	r2, [pc, #136]	; (8002c60 <HAL_RCC_OscConfig+0x934>)
 8002bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bda:	61d3      	str	r3, [r2, #28]
 8002bdc:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <HAL_RCC_OscConfig+0x934>)
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002bf6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfe:	4b1a      	ldr	r3, [pc, #104]	; (8002c68 <HAL_RCC_OscConfig+0x93c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d11a      	bne.n	8002c40 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c0a:	4b17      	ldr	r3, [pc, #92]	; (8002c68 <HAL_RCC_OscConfig+0x93c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a16      	ldr	r2, [pc, #88]	; (8002c68 <HAL_RCC_OscConfig+0x93c>)
 8002c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c14:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c16:	f7ff f847 	bl	8001ca8 <HAL_GetTick>
 8002c1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1e:	e009      	b.n	8002c34 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c20:	f7ff f842 	bl	8001ca8 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b64      	cmp	r3, #100	; 0x64
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e3b1      	b.n	8003398 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <HAL_RCC_OscConfig+0x93c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0ef      	beq.n	8002c20 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d10d      	bne.n	8002c6c <HAL_RCC_OscConfig+0x940>
 8002c50:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <HAL_RCC_OscConfig+0x934>)
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	4a02      	ldr	r2, [pc, #8]	; (8002c60 <HAL_RCC_OscConfig+0x934>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6213      	str	r3, [r2, #32]
 8002c5c:	e03c      	b.n	8002cd8 <HAL_RCC_OscConfig+0x9ac>
 8002c5e:	bf00      	nop
 8002c60:	40021000 	.word	0x40021000
 8002c64:	10908120 	.word	0x10908120
 8002c68:	40007000 	.word	0x40007000
 8002c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10c      	bne.n	8002c96 <HAL_RCC_OscConfig+0x96a>
 8002c7c:	4bc1      	ldr	r3, [pc, #772]	; (8002f84 <HAL_RCC_OscConfig+0xc58>)
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	4ac0      	ldr	r2, [pc, #768]	; (8002f84 <HAL_RCC_OscConfig+0xc58>)
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	6213      	str	r3, [r2, #32]
 8002c88:	4bbe      	ldr	r3, [pc, #760]	; (8002f84 <HAL_RCC_OscConfig+0xc58>)
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	4abd      	ldr	r2, [pc, #756]	; (8002f84 <HAL_RCC_OscConfig+0xc58>)
 8002c8e:	f023 0304 	bic.w	r3, r3, #4
 8002c92:	6213      	str	r3, [r2, #32]
 8002c94:	e020      	b.n	8002cd8 <HAL_RCC_OscConfig+0x9ac>
 8002c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	2b05      	cmp	r3, #5
 8002ca4:	d10c      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x994>
 8002ca6:	4bb7      	ldr	r3, [pc, #732]	; (8002f84 <HAL_RCC_OscConfig+0xc58>)
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	4ab6      	ldr	r2, [pc, #728]	; (8002f84 <HAL_RCC_OscConfig+0xc58>)
 8002cac:	f043 0304 	orr.w	r3, r3, #4
 8002cb0:	6213      	str	r3, [r2, #32]
 8002cb2:	4bb4      	ldr	r3, [pc, #720]	; (8002f84 <HAL_RCC_OscConfig+0xc58>)
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	4ab3      	ldr	r2, [pc, #716]	; (8002f84 <HAL_RCC_OscConfig+0xc58>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	6213      	str	r3, [r2, #32]
 8002cbe:	e00b      	b.n	8002cd8 <HAL_RCC_OscConfig+0x9ac>
 8002cc0:	4bb0      	ldr	r3, [pc, #704]	; (8002f84 <HAL_RCC_OscConfig+0xc58>)
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	4aaf      	ldr	r2, [pc, #700]	; (8002f84 <HAL_RCC_OscConfig+0xc58>)
 8002cc6:	f023 0301 	bic.w	r3, r3, #1
 8002cca:	6213      	str	r3, [r2, #32]
 8002ccc:	4bad      	ldr	r3, [pc, #692]	; (8002f84 <HAL_RCC_OscConfig+0xc58>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	4aac      	ldr	r2, [pc, #688]	; (8002f84 <HAL_RCC_OscConfig+0xc58>)
 8002cd2:	f023 0304 	bic.w	r3, r3, #4
 8002cd6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cdc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 8081 	beq.w	8002dec <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cea:	f7fe ffdd 	bl	8001ca8 <HAL_GetTick>
 8002cee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf2:	e00b      	b.n	8002d0c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf4:	f7fe ffd8 	bl	8001ca8 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e345      	b.n	8003398 <HAL_RCC_OscConfig+0x106c>
 8002d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d10:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d14:	2202      	movs	r2, #2
 8002d16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	fa93 f2a3 	rbit	r2, r3
 8002d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d34:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d38:	2202      	movs	r2, #2
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d40:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	fa93 f2a3 	rbit	r2, r3
 8002d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d52:	601a      	str	r2, [r3, #0]
  return result;
 8002d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d58:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d5c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	095b      	lsrs	r3, r3, #5
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	f043 0302 	orr.w	r3, r3, #2
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d102      	bne.n	8002d78 <HAL_RCC_OscConfig+0xa4c>
 8002d72:	4b84      	ldr	r3, [pc, #528]	; (8002f84 <HAL_RCC_OscConfig+0xc58>)
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	e013      	b.n	8002da0 <HAL_RCC_OscConfig+0xa74>
 8002d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d80:	2202      	movs	r2, #2
 8002d82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d88:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	fa93 f2a3 	rbit	r2, r3
 8002d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d96:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	4b79      	ldr	r3, [pc, #484]	; (8002f84 <HAL_RCC_OscConfig+0xc58>)
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002da4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002da8:	2102      	movs	r1, #2
 8002daa:	6011      	str	r1, [r2, #0]
 8002dac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002db0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	fa92 f1a2 	rbit	r1, r2
 8002dba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dbe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002dc2:	6011      	str	r1, [r2, #0]
  return result;
 8002dc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dc8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	fab2 f282 	clz	r2, r2
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	f002 021f 	and.w	r2, r2, #31
 8002dde:	2101      	movs	r1, #1
 8002de0:	fa01 f202 	lsl.w	r2, r1, r2
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d084      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x9c8>
 8002dea:	e07f      	b.n	8002eec <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dec:	f7fe ff5c 	bl	8001ca8 <HAL_GetTick>
 8002df0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df4:	e00b      	b.n	8002e0e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df6:	f7fe ff57 	bl	8001ca8 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e2c4      	b.n	8003398 <HAL_RCC_OscConfig+0x106c>
 8002e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e12:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e16:	2202      	movs	r2, #2
 8002e18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	fa93 f2a3 	rbit	r2, r3
 8002e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e36:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e42:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	fa93 f2a3 	rbit	r2, r3
 8002e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e50:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e54:	601a      	str	r2, [r3, #0]
  return result;
 8002e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e5e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e60:	fab3 f383 	clz	r3, r3
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	f043 0302 	orr.w	r3, r3, #2
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d102      	bne.n	8002e7a <HAL_RCC_OscConfig+0xb4e>
 8002e74:	4b43      	ldr	r3, [pc, #268]	; (8002f84 <HAL_RCC_OscConfig+0xc58>)
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	e013      	b.n	8002ea2 <HAL_RCC_OscConfig+0xb76>
 8002e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e82:	2202      	movs	r2, #2
 8002e84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	fa93 f2a3 	rbit	r2, r3
 8002e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e98:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	4b39      	ldr	r3, [pc, #228]	; (8002f84 <HAL_RCC_OscConfig+0xc58>)
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ea6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002eaa:	2102      	movs	r1, #2
 8002eac:	6011      	str	r1, [r2, #0]
 8002eae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eb2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	fa92 f1a2 	rbit	r1, r2
 8002ebc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ec0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ec4:	6011      	str	r1, [r2, #0]
  return result;
 8002ec6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eca:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	fab2 f282 	clz	r2, r2
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	f002 021f 	and.w	r2, r2, #31
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d184      	bne.n	8002df6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002eec:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d105      	bne.n	8002f00 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef4:	4b23      	ldr	r3, [pc, #140]	; (8002f84 <HAL_RCC_OscConfig+0xc58>)
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	4a22      	ldr	r2, [pc, #136]	; (8002f84 <HAL_RCC_OscConfig+0xc58>)
 8002efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002efe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 8242 	beq.w	8003396 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f12:	4b1c      	ldr	r3, [pc, #112]	; (8002f84 <HAL_RCC_OscConfig+0xc58>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 030c 	and.w	r3, r3, #12
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	f000 8213 	beq.w	8003346 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	f040 8162 	bne.w	80031f6 <HAL_RCC_OscConfig+0xeca>
 8002f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f36:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002f3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f44:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	fa93 f2a3 	rbit	r2, r3
 8002f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f52:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f56:	601a      	str	r2, [r3, #0]
  return result;
 8002f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f60:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f62:	fab3 f383 	clz	r3, r3
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	461a      	mov	r2, r3
 8002f74:	2300      	movs	r3, #0
 8002f76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f78:	f7fe fe96 	bl	8001ca8 <HAL_GetTick>
 8002f7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f80:	e00c      	b.n	8002f9c <HAL_RCC_OscConfig+0xc70>
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f88:	f7fe fe8e 	bl	8001ca8 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e1fd      	b.n	8003398 <HAL_RCC_OscConfig+0x106c>
 8002f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002fa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fae:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	fa93 f2a3 	rbit	r2, r3
 8002fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fbc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002fc0:	601a      	str	r2, [r3, #0]
  return result;
 8002fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002fca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fcc:	fab3 f383 	clz	r3, r3
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d102      	bne.n	8002fe6 <HAL_RCC_OscConfig+0xcba>
 8002fe0:	4bb0      	ldr	r3, [pc, #704]	; (80032a4 <HAL_RCC_OscConfig+0xf78>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	e027      	b.n	8003036 <HAL_RCC_OscConfig+0xd0a>
 8002fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fea:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002fee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ff2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	fa93 f2a3 	rbit	r2, r3
 8003002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003006:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003010:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003014:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	fa93 f2a3 	rbit	r2, r3
 8003028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	4b9c      	ldr	r3, [pc, #624]	; (80032a4 <HAL_RCC_OscConfig+0xf78>)
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800303a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800303e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003042:	6011      	str	r1, [r2, #0]
 8003044:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003048:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	fa92 f1a2 	rbit	r1, r2
 8003052:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003056:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800305a:	6011      	str	r1, [r2, #0]
  return result;
 800305c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003060:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003064:	6812      	ldr	r2, [r2, #0]
 8003066:	fab2 f282 	clz	r2, r2
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	f042 0220 	orr.w	r2, r2, #32
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	f002 021f 	and.w	r2, r2, #31
 8003076:	2101      	movs	r1, #1
 8003078:	fa01 f202 	lsl.w	r2, r1, r2
 800307c:	4013      	ands	r3, r2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d182      	bne.n	8002f88 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003082:	4b88      	ldr	r3, [pc, #544]	; (80032a4 <HAL_RCC_OscConfig+0xf78>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800308a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	430b      	orrs	r3, r1
 80030a4:	497f      	ldr	r1, [pc, #508]	; (80032a4 <HAL_RCC_OscConfig+0xf78>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	604b      	str	r3, [r1, #4]
 80030aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ae:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80030b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030bc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	fa93 f2a3 	rbit	r2, r3
 80030c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ca:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80030ce:	601a      	str	r2, [r3, #0]
  return result;
 80030d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80030d8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030da:	fab3 f383 	clz	r3, r3
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	461a      	mov	r2, r3
 80030ec:	2301      	movs	r3, #1
 80030ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7fe fdda 	bl	8001ca8 <HAL_GetTick>
 80030f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030f8:	e009      	b.n	800310e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030fa:	f7fe fdd5 	bl	8001ca8 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e144      	b.n	8003398 <HAL_RCC_OscConfig+0x106c>
 800310e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003112:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003116:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800311a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003120:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	fa93 f2a3 	rbit	r2, r3
 800312a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003132:	601a      	str	r2, [r3, #0]
  return result;
 8003134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003138:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800313c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800313e:	fab3 f383 	clz	r3, r3
 8003142:	b2db      	uxtb	r3, r3
 8003144:	095b      	lsrs	r3, r3, #5
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b01      	cmp	r3, #1
 8003150:	d102      	bne.n	8003158 <HAL_RCC_OscConfig+0xe2c>
 8003152:	4b54      	ldr	r3, [pc, #336]	; (80032a4 <HAL_RCC_OscConfig+0xf78>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	e027      	b.n	80031a8 <HAL_RCC_OscConfig+0xe7c>
 8003158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003160:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003164:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	fa93 f2a3 	rbit	r2, r3
 8003174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003178:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003182:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003186:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003190:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	fa93 f2a3 	rbit	r2, r3
 800319a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	4b3f      	ldr	r3, [pc, #252]	; (80032a4 <HAL_RCC_OscConfig+0xf78>)
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031ac:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80031b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031b4:	6011      	str	r1, [r2, #0]
 80031b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031ba:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	fa92 f1a2 	rbit	r1, r2
 80031c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031c8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80031cc:	6011      	str	r1, [r2, #0]
  return result;
 80031ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031d2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80031d6:	6812      	ldr	r2, [r2, #0]
 80031d8:	fab2 f282 	clz	r2, r2
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	f042 0220 	orr.w	r2, r2, #32
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	f002 021f 	and.w	r2, r2, #31
 80031e8:	2101      	movs	r1, #1
 80031ea:	fa01 f202 	lsl.w	r2, r1, r2
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d082      	beq.n	80030fa <HAL_RCC_OscConfig+0xdce>
 80031f4:	e0cf      	b.n	8003396 <HAL_RCC_OscConfig+0x106a>
 80031f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80031fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003202:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003208:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	fa93 f2a3 	rbit	r2, r3
 8003212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003216:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800321a:	601a      	str	r2, [r3, #0]
  return result;
 800321c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003220:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003224:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003226:	fab3 f383 	clz	r3, r3
 800322a:	b2db      	uxtb	r3, r3
 800322c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003230:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	461a      	mov	r2, r3
 8003238:	2300      	movs	r3, #0
 800323a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323c:	f7fe fd34 	bl	8001ca8 <HAL_GetTick>
 8003240:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003244:	e009      	b.n	800325a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003246:	f7fe fd2f 	bl	8001ca8 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e09e      	b.n	8003398 <HAL_RCC_OscConfig+0x106c>
 800325a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003262:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003266:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	fa93 f2a3 	rbit	r2, r3
 8003276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800327e:	601a      	str	r2, [r3, #0]
  return result;
 8003280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003284:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003288:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800328a:	fab3 f383 	clz	r3, r3
 800328e:	b2db      	uxtb	r3, r3
 8003290:	095b      	lsrs	r3, r3, #5
 8003292:	b2db      	uxtb	r3, r3
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b01      	cmp	r3, #1
 800329c:	d104      	bne.n	80032a8 <HAL_RCC_OscConfig+0xf7c>
 800329e:	4b01      	ldr	r3, [pc, #4]	; (80032a4 <HAL_RCC_OscConfig+0xf78>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	e029      	b.n	80032f8 <HAL_RCC_OscConfig+0xfcc>
 80032a4:	40021000 	.word	0x40021000
 80032a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ac:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80032b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ba:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	fa93 f2a3 	rbit	r2, r3
 80032c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80032d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	fa93 f2a3 	rbit	r2, r3
 80032ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ee:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	4b2b      	ldr	r3, [pc, #172]	; (80033a4 <HAL_RCC_OscConfig+0x1078>)
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032fc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003300:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003304:	6011      	str	r1, [r2, #0]
 8003306:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800330a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	fa92 f1a2 	rbit	r1, r2
 8003314:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003318:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800331c:	6011      	str	r1, [r2, #0]
  return result;
 800331e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003322:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	fab2 f282 	clz	r2, r2
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	f042 0220 	orr.w	r2, r2, #32
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	f002 021f 	and.w	r2, r2, #31
 8003338:	2101      	movs	r1, #1
 800333a:	fa01 f202 	lsl.w	r2, r1, r2
 800333e:	4013      	ands	r3, r2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d180      	bne.n	8003246 <HAL_RCC_OscConfig+0xf1a>
 8003344:	e027      	b.n	8003396 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e01e      	b.n	8003398 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800335a:	4b12      	ldr	r3, [pc, #72]	; (80033a4 <HAL_RCC_OscConfig+0x1078>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003362:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003366:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800336a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	429a      	cmp	r2, r3
 8003378:	d10b      	bne.n	8003392 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800337a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800337e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003386:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800338e:	429a      	cmp	r2, r3
 8003390:	d001      	beq.n	8003396 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40021000 	.word	0x40021000

080033a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b09e      	sub	sp, #120	; 0x78
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e162      	b.n	8003686 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033c0:	4b90      	ldr	r3, [pc, #576]	; (8003604 <HAL_RCC_ClockConfig+0x25c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d910      	bls.n	80033f0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ce:	4b8d      	ldr	r3, [pc, #564]	; (8003604 <HAL_RCC_ClockConfig+0x25c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 0207 	bic.w	r2, r3, #7
 80033d6:	498b      	ldr	r1, [pc, #556]	; (8003604 <HAL_RCC_ClockConfig+0x25c>)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	4313      	orrs	r3, r2
 80033dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033de:	4b89      	ldr	r3, [pc, #548]	; (8003604 <HAL_RCC_ClockConfig+0x25c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d001      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e14a      	b.n	8003686 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d008      	beq.n	800340e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033fc:	4b82      	ldr	r3, [pc, #520]	; (8003608 <HAL_RCC_ClockConfig+0x260>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	497f      	ldr	r1, [pc, #508]	; (8003608 <HAL_RCC_ClockConfig+0x260>)
 800340a:	4313      	orrs	r3, r2
 800340c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 80dc 	beq.w	80035d4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d13c      	bne.n	800349e <HAL_RCC_ClockConfig+0xf6>
 8003424:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003428:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800342c:	fa93 f3a3 	rbit	r3, r3
 8003430:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003434:	fab3 f383 	clz	r3, r3
 8003438:	b2db      	uxtb	r3, r3
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	b2db      	uxtb	r3, r3
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b01      	cmp	r3, #1
 8003446:	d102      	bne.n	800344e <HAL_RCC_ClockConfig+0xa6>
 8003448:	4b6f      	ldr	r3, [pc, #444]	; (8003608 <HAL_RCC_ClockConfig+0x260>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	e00f      	b.n	800346e <HAL_RCC_ClockConfig+0xc6>
 800344e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003452:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003456:	fa93 f3a3 	rbit	r3, r3
 800345a:	667b      	str	r3, [r7, #100]	; 0x64
 800345c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003460:	663b      	str	r3, [r7, #96]	; 0x60
 8003462:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003464:	fa93 f3a3 	rbit	r3, r3
 8003468:	65fb      	str	r3, [r7, #92]	; 0x5c
 800346a:	4b67      	ldr	r3, [pc, #412]	; (8003608 <HAL_RCC_ClockConfig+0x260>)
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003472:	65ba      	str	r2, [r7, #88]	; 0x58
 8003474:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003476:	fa92 f2a2 	rbit	r2, r2
 800347a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800347c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800347e:	fab2 f282 	clz	r2, r2
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	f042 0220 	orr.w	r2, r2, #32
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	f002 021f 	and.w	r2, r2, #31
 800348e:	2101      	movs	r1, #1
 8003490:	fa01 f202 	lsl.w	r2, r1, r2
 8003494:	4013      	ands	r3, r2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d17b      	bne.n	8003592 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e0f3      	b.n	8003686 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d13c      	bne.n	8003520 <HAL_RCC_ClockConfig+0x178>
 80034a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ae:	fa93 f3a3 	rbit	r3, r3
 80034b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b6:	fab3 f383 	clz	r3, r3
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d102      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x128>
 80034ca:	4b4f      	ldr	r3, [pc, #316]	; (8003608 <HAL_RCC_ClockConfig+0x260>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	e00f      	b.n	80034f0 <HAL_RCC_ClockConfig+0x148>
 80034d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034d8:	fa93 f3a3 	rbit	r3, r3
 80034dc:	647b      	str	r3, [r7, #68]	; 0x44
 80034de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034e2:	643b      	str	r3, [r7, #64]	; 0x40
 80034e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034e6:	fa93 f3a3 	rbit	r3, r3
 80034ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034ec:	4b46      	ldr	r3, [pc, #280]	; (8003608 <HAL_RCC_ClockConfig+0x260>)
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034f4:	63ba      	str	r2, [r7, #56]	; 0x38
 80034f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034f8:	fa92 f2a2 	rbit	r2, r2
 80034fc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80034fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003500:	fab2 f282 	clz	r2, r2
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	f042 0220 	orr.w	r2, r2, #32
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	f002 021f 	and.w	r2, r2, #31
 8003510:	2101      	movs	r1, #1
 8003512:	fa01 f202 	lsl.w	r2, r1, r2
 8003516:	4013      	ands	r3, r2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d13a      	bne.n	8003592 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0b2      	b.n	8003686 <HAL_RCC_ClockConfig+0x2de>
 8003520:	2302      	movs	r3, #2
 8003522:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003526:	fa93 f3a3 	rbit	r3, r3
 800352a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800352c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352e:	fab3 f383 	clz	r3, r3
 8003532:	b2db      	uxtb	r3, r3
 8003534:	095b      	lsrs	r3, r3, #5
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b01      	cmp	r3, #1
 8003540:	d102      	bne.n	8003548 <HAL_RCC_ClockConfig+0x1a0>
 8003542:	4b31      	ldr	r3, [pc, #196]	; (8003608 <HAL_RCC_ClockConfig+0x260>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	e00d      	b.n	8003564 <HAL_RCC_ClockConfig+0x1bc>
 8003548:	2302      	movs	r3, #2
 800354a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354e:	fa93 f3a3 	rbit	r3, r3
 8003552:	627b      	str	r3, [r7, #36]	; 0x24
 8003554:	2302      	movs	r3, #2
 8003556:	623b      	str	r3, [r7, #32]
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	fa93 f3a3 	rbit	r3, r3
 800355e:	61fb      	str	r3, [r7, #28]
 8003560:	4b29      	ldr	r3, [pc, #164]	; (8003608 <HAL_RCC_ClockConfig+0x260>)
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	2202      	movs	r2, #2
 8003566:	61ba      	str	r2, [r7, #24]
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	fa92 f2a2 	rbit	r2, r2
 800356e:	617a      	str	r2, [r7, #20]
  return result;
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	fab2 f282 	clz	r2, r2
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	f042 0220 	orr.w	r2, r2, #32
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	f002 021f 	and.w	r2, r2, #31
 8003582:	2101      	movs	r1, #1
 8003584:	fa01 f202 	lsl.w	r2, r1, r2
 8003588:	4013      	ands	r3, r2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e079      	b.n	8003686 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003592:	4b1d      	ldr	r3, [pc, #116]	; (8003608 <HAL_RCC_ClockConfig+0x260>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f023 0203 	bic.w	r2, r3, #3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	491a      	ldr	r1, [pc, #104]	; (8003608 <HAL_RCC_ClockConfig+0x260>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035a4:	f7fe fb80 	bl	8001ca8 <HAL_GetTick>
 80035a8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035aa:	e00a      	b.n	80035c2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ac:	f7fe fb7c 	bl	8001ca8 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e061      	b.n	8003686 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c2:	4b11      	ldr	r3, [pc, #68]	; (8003608 <HAL_RCC_ClockConfig+0x260>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f003 020c 	and.w	r2, r3, #12
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d1eb      	bne.n	80035ac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035d4:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <HAL_RCC_ClockConfig+0x25c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d214      	bcs.n	800360c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e2:	4b08      	ldr	r3, [pc, #32]	; (8003604 <HAL_RCC_ClockConfig+0x25c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f023 0207 	bic.w	r2, r3, #7
 80035ea:	4906      	ldr	r1, [pc, #24]	; (8003604 <HAL_RCC_ClockConfig+0x25c>)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f2:	4b04      	ldr	r3, [pc, #16]	; (8003604 <HAL_RCC_ClockConfig+0x25c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d005      	beq.n	800360c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e040      	b.n	8003686 <HAL_RCC_ClockConfig+0x2de>
 8003604:	40022000 	.word	0x40022000
 8003608:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003618:	4b1d      	ldr	r3, [pc, #116]	; (8003690 <HAL_RCC_ClockConfig+0x2e8>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	491a      	ldr	r1, [pc, #104]	; (8003690 <HAL_RCC_ClockConfig+0x2e8>)
 8003626:	4313      	orrs	r3, r2
 8003628:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003636:	4b16      	ldr	r3, [pc, #88]	; (8003690 <HAL_RCC_ClockConfig+0x2e8>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4912      	ldr	r1, [pc, #72]	; (8003690 <HAL_RCC_ClockConfig+0x2e8>)
 8003646:	4313      	orrs	r3, r2
 8003648:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800364a:	f000 f829 	bl	80036a0 <HAL_RCC_GetSysClockFreq>
 800364e:	4601      	mov	r1, r0
 8003650:	4b0f      	ldr	r3, [pc, #60]	; (8003690 <HAL_RCC_ClockConfig+0x2e8>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003658:	22f0      	movs	r2, #240	; 0xf0
 800365a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	fa92 f2a2 	rbit	r2, r2
 8003662:	60fa      	str	r2, [r7, #12]
  return result;
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	fab2 f282 	clz	r2, r2
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	40d3      	lsrs	r3, r2
 800366e:	4a09      	ldr	r2, [pc, #36]	; (8003694 <HAL_RCC_ClockConfig+0x2ec>)
 8003670:	5cd3      	ldrb	r3, [r2, r3]
 8003672:	fa21 f303 	lsr.w	r3, r1, r3
 8003676:	4a08      	ldr	r2, [pc, #32]	; (8003698 <HAL_RCC_ClockConfig+0x2f0>)
 8003678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800367a:	4b08      	ldr	r3, [pc, #32]	; (800369c <HAL_RCC_ClockConfig+0x2f4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7fe face 	bl	8001c20 <HAL_InitTick>
  
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3778      	adds	r7, #120	; 0x78
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40021000 	.word	0x40021000
 8003694:	08006a50 	.word	0x08006a50
 8003698:	20000008 	.word	0x20000008
 800369c:	2000000c 	.word	0x2000000c

080036a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b08b      	sub	sp, #44	; 0x2c
 80036a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
 80036aa:	2300      	movs	r3, #0
 80036ac:	61bb      	str	r3, [r7, #24]
 80036ae:	2300      	movs	r3, #0
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80036ba:	4b29      	ldr	r3, [pc, #164]	; (8003760 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f003 030c 	and.w	r3, r3, #12
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d002      	beq.n	80036d0 <HAL_RCC_GetSysClockFreq+0x30>
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d003      	beq.n	80036d6 <HAL_RCC_GetSysClockFreq+0x36>
 80036ce:	e03c      	b.n	800374a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036d0:	4b24      	ldr	r3, [pc, #144]	; (8003764 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036d2:	623b      	str	r3, [r7, #32]
      break;
 80036d4:	e03c      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80036dc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80036e0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	fa92 f2a2 	rbit	r2, r2
 80036e8:	607a      	str	r2, [r7, #4]
  return result;
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	fab2 f282 	clz	r2, r2
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	40d3      	lsrs	r3, r2
 80036f4:	4a1c      	ldr	r2, [pc, #112]	; (8003768 <HAL_RCC_GetSysClockFreq+0xc8>)
 80036f6:	5cd3      	ldrb	r3, [r2, r3]
 80036f8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80036fa:	4b19      	ldr	r3, [pc, #100]	; (8003760 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	220f      	movs	r2, #15
 8003704:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	fa92 f2a2 	rbit	r2, r2
 800370c:	60fa      	str	r2, [r7, #12]
  return result;
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	fab2 f282 	clz	r2, r2
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	40d3      	lsrs	r3, r2
 8003718:	4a14      	ldr	r2, [pc, #80]	; (800376c <HAL_RCC_GetSysClockFreq+0xcc>)
 800371a:	5cd3      	ldrb	r3, [r2, r3]
 800371c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d008      	beq.n	800373a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003728:	4a0e      	ldr	r2, [pc, #56]	; (8003764 <HAL_RCC_GetSysClockFreq+0xc4>)
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	fb02 f303 	mul.w	r3, r2, r3
 8003736:	627b      	str	r3, [r7, #36]	; 0x24
 8003738:	e004      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	4a0c      	ldr	r2, [pc, #48]	; (8003770 <HAL_RCC_GetSysClockFreq+0xd0>)
 800373e:	fb02 f303 	mul.w	r3, r2, r3
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	623b      	str	r3, [r7, #32]
      break;
 8003748:	e002      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800374a:	4b06      	ldr	r3, [pc, #24]	; (8003764 <HAL_RCC_GetSysClockFreq+0xc4>)
 800374c:	623b      	str	r3, [r7, #32]
      break;
 800374e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003750:	6a3b      	ldr	r3, [r7, #32]
}
 8003752:	4618      	mov	r0, r3
 8003754:	372c      	adds	r7, #44	; 0x2c
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40021000 	.word	0x40021000
 8003764:	007a1200 	.word	0x007a1200
 8003768:	08006a68 	.word	0x08006a68
 800376c:	08006a78 	.word	0x08006a78
 8003770:	003d0900 	.word	0x003d0900

08003774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003778:	4b03      	ldr	r3, [pc, #12]	; (8003788 <HAL_RCC_GetHCLKFreq+0x14>)
 800377a:	681b      	ldr	r3, [r3, #0]
}
 800377c:	4618      	mov	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	20000008 	.word	0x20000008

0800378c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003792:	f7ff ffef 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 8003796:	4601      	mov	r1, r0
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037a0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80037a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	fa92 f2a2 	rbit	r2, r2
 80037ac:	603a      	str	r2, [r7, #0]
  return result;
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	fab2 f282 	clz	r2, r2
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	40d3      	lsrs	r3, r2
 80037b8:	4a04      	ldr	r2, [pc, #16]	; (80037cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80037ba:	5cd3      	ldrb	r3, [r2, r3]
 80037bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40021000 	.word	0x40021000
 80037cc:	08006a60 	.word	0x08006a60

080037d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80037d6:	f7ff ffcd 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 80037da:	4601      	mov	r1, r0
 80037dc:	4b0b      	ldr	r3, [pc, #44]	; (800380c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80037e4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80037e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	fa92 f2a2 	rbit	r2, r2
 80037f0:	603a      	str	r2, [r7, #0]
  return result;
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	fab2 f282 	clz	r2, r2
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	40d3      	lsrs	r3, r2
 80037fc:	4a04      	ldr	r2, [pc, #16]	; (8003810 <HAL_RCC_GetPCLK2Freq+0x40>)
 80037fe:	5cd3      	ldrb	r3, [r2, r3]
 8003800:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40021000 	.word	0x40021000
 8003810:	08006a60 	.word	0x08006a60

08003814 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b092      	sub	sp, #72	; 0x48
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003824:	2300      	movs	r3, #0
 8003826:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 80d4 	beq.w	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003838:	4b4e      	ldr	r3, [pc, #312]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10e      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003844:	4b4b      	ldr	r3, [pc, #300]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	4a4a      	ldr	r2, [pc, #296]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800384a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800384e:	61d3      	str	r3, [r2, #28]
 8003850:	4b48      	ldr	r3, [pc, #288]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003858:	60bb      	str	r3, [r7, #8]
 800385a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800385c:	2301      	movs	r3, #1
 800385e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003862:	4b45      	ldr	r3, [pc, #276]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d118      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800386e:	4b42      	ldr	r3, [pc, #264]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a41      	ldr	r2, [pc, #260]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003878:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800387a:	f7fe fa15 	bl	8001ca8 <HAL_GetTick>
 800387e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003880:	e008      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003882:	f7fe fa11 	bl	8001ca8 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b64      	cmp	r3, #100	; 0x64
 800388e:	d901      	bls.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e14b      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003894:	4b38      	ldr	r3, [pc, #224]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f0      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038a0:	4b34      	ldr	r3, [pc, #208]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 8084 	beq.w	80039ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038bc:	429a      	cmp	r2, r3
 80038be:	d07c      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038c0:	4b2c      	ldr	r3, [pc, #176]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	fa93 f3a3 	rbit	r3, r3
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038da:	fab3 f383 	clz	r3, r3
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	4b26      	ldr	r3, [pc, #152]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038e4:	4413      	add	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	461a      	mov	r2, r3
 80038ea:	2301      	movs	r3, #1
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f6:	fa93 f3a3 	rbit	r3, r3
 80038fa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80038fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038fe:	fab3 f383 	clz	r3, r3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	461a      	mov	r2, r3
 8003906:	4b1d      	ldr	r3, [pc, #116]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	461a      	mov	r2, r3
 800390e:	2300      	movs	r3, #0
 8003910:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003912:	4a18      	ldr	r2, [pc, #96]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003916:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d04b      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003922:	f7fe f9c1 	bl	8001ca8 <HAL_GetTick>
 8003926:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003928:	e00a      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800392a:	f7fe f9bd 	bl	8001ca8 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	f241 3288 	movw	r2, #5000	; 0x1388
 8003938:	4293      	cmp	r3, r2
 800393a:	d901      	bls.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e0f5      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003940:	2302      	movs	r3, #2
 8003942:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003946:	fa93 f3a3 	rbit	r3, r3
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
 800394c:	2302      	movs	r3, #2
 800394e:	623b      	str	r3, [r7, #32]
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	fa93 f3a3 	rbit	r3, r3
 8003956:	61fb      	str	r3, [r7, #28]
  return result;
 8003958:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800395a:	fab3 f383 	clz	r3, r3
 800395e:	b2db      	uxtb	r3, r3
 8003960:	095b      	lsrs	r3, r3, #5
 8003962:	b2db      	uxtb	r3, r3
 8003964:	f043 0302 	orr.w	r3, r3, #2
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d108      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800396e:	4b01      	ldr	r3, [pc, #4]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	e00d      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003974:	40021000 	.word	0x40021000
 8003978:	40007000 	.word	0x40007000
 800397c:	10908100 	.word	0x10908100
 8003980:	2302      	movs	r3, #2
 8003982:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	fa93 f3a3 	rbit	r3, r3
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	4b69      	ldr	r3, [pc, #420]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	2202      	movs	r2, #2
 8003992:	613a      	str	r2, [r7, #16]
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	fa92 f2a2 	rbit	r2, r2
 800399a:	60fa      	str	r2, [r7, #12]
  return result;
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	fab2 f282 	clz	r2, r2
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	f002 021f 	and.w	r2, r2, #31
 80039ae:	2101      	movs	r1, #1
 80039b0:	fa01 f202 	lsl.w	r2, r1, r2
 80039b4:	4013      	ands	r3, r2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0b7      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80039ba:	4b5e      	ldr	r3, [pc, #376]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	495b      	ldr	r1, [pc, #364]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d105      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d4:	4b57      	ldr	r3, [pc, #348]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	4a56      	ldr	r2, [pc, #344]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039ec:	4b51      	ldr	r3, [pc, #324]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	f023 0203 	bic.w	r2, r3, #3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	494e      	ldr	r1, [pc, #312]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d008      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a0a:	4b4a      	ldr	r3, [pc, #296]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	f023 0210 	bic.w	r2, r3, #16
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	4947      	ldr	r1, [pc, #284]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d008      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003a28:	4b42      	ldr	r3, [pc, #264]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	493f      	ldr	r1, [pc, #252]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d008      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a46:	4b3b      	ldr	r3, [pc, #236]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	f023 0220 	bic.w	r2, r3, #32
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	4938      	ldr	r1, [pc, #224]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a64:	4b33      	ldr	r3, [pc, #204]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	4930      	ldr	r1, [pc, #192]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d008      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a82:	4b2c      	ldr	r3, [pc, #176]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	4929      	ldr	r1, [pc, #164]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003aa0:	4b24      	ldr	r3, [pc, #144]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	4921      	ldr	r1, [pc, #132]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d008      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003abe:	4b1d      	ldr	r3, [pc, #116]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	491a      	ldr	r1, [pc, #104]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003adc:	4b15      	ldr	r3, [pc, #84]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	4912      	ldr	r1, [pc, #72]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d008      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003afa:	4b0e      	ldr	r3, [pc, #56]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b06:	490b      	ldr	r1, [pc, #44]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003b18:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	4903      	ldr	r1, [pc, #12]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3748      	adds	r7, #72	; 0x48
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40021000 	.word	0x40021000

08003b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e049      	b.n	8003bde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fd fe62 	bl	8001828 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3304      	adds	r3, #4
 8003b74:	4619      	mov	r1, r3
 8003b76:	4610      	mov	r0, r2
 8003b78:	f000 fa74 	bl	8004064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b082      	sub	sp, #8
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e049      	b.n	8003c8c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d106      	bne.n	8003c12 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f841 	bl	8003c94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2202      	movs	r2, #2
 8003c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3304      	adds	r3, #4
 8003c22:	4619      	mov	r1, r3
 8003c24:	4610      	mov	r0, r2
 8003c26:	f000 fa1d 	bl	8004064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e0ff      	b.n	8003ec6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b14      	cmp	r3, #20
 8003cd2:	f200 80f0 	bhi.w	8003eb6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003cd6:	a201      	add	r2, pc, #4	; (adr r2, 8003cdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cdc:	08003d31 	.word	0x08003d31
 8003ce0:	08003eb7 	.word	0x08003eb7
 8003ce4:	08003eb7 	.word	0x08003eb7
 8003ce8:	08003eb7 	.word	0x08003eb7
 8003cec:	08003d71 	.word	0x08003d71
 8003cf0:	08003eb7 	.word	0x08003eb7
 8003cf4:	08003eb7 	.word	0x08003eb7
 8003cf8:	08003eb7 	.word	0x08003eb7
 8003cfc:	08003db3 	.word	0x08003db3
 8003d00:	08003eb7 	.word	0x08003eb7
 8003d04:	08003eb7 	.word	0x08003eb7
 8003d08:	08003eb7 	.word	0x08003eb7
 8003d0c:	08003df3 	.word	0x08003df3
 8003d10:	08003eb7 	.word	0x08003eb7
 8003d14:	08003eb7 	.word	0x08003eb7
 8003d18:	08003eb7 	.word	0x08003eb7
 8003d1c:	08003e35 	.word	0x08003e35
 8003d20:	08003eb7 	.word	0x08003eb7
 8003d24:	08003eb7 	.word	0x08003eb7
 8003d28:	08003eb7 	.word	0x08003eb7
 8003d2c:	08003e75 	.word	0x08003e75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fa02 	bl	8004140 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0208 	orr.w	r2, r2, #8
 8003d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0204 	bic.w	r2, r2, #4
 8003d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6999      	ldr	r1, [r3, #24]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	619a      	str	r2, [r3, #24]
      break;
 8003d6e:	e0a5      	b.n	8003ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68b9      	ldr	r1, [r7, #8]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fa68 	bl	800424c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699a      	ldr	r2, [r3, #24]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6999      	ldr	r1, [r3, #24]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	021a      	lsls	r2, r3, #8
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	619a      	str	r2, [r3, #24]
      break;
 8003db0:	e084      	b.n	8003ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fac7 	bl	800434c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0208 	orr.w	r2, r2, #8
 8003dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0204 	bic.w	r2, r2, #4
 8003ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69d9      	ldr	r1, [r3, #28]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	61da      	str	r2, [r3, #28]
      break;
 8003df0:	e064      	b.n	8003ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68b9      	ldr	r1, [r7, #8]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 fb25 	bl	8004448 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69da      	ldr	r2, [r3, #28]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	69da      	ldr	r2, [r3, #28]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69d9      	ldr	r1, [r3, #28]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	021a      	lsls	r2, r3, #8
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	61da      	str	r2, [r3, #28]
      break;
 8003e32:	e043      	b.n	8003ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fb68 	bl	8004510 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0208 	orr.w	r2, r2, #8
 8003e4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0204 	bic.w	r2, r2, #4
 8003e5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	691a      	ldr	r2, [r3, #16]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e72:	e023      	b.n	8003ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68b9      	ldr	r1, [r7, #8]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fba6 	bl	80045cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	021a      	lsls	r2, r3, #8
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003eb4:	e002      	b.n	8003ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	75fb      	strb	r3, [r7, #23]
      break;
 8003eba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop

08003ed0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <HAL_TIM_ConfigClockSource+0x1c>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e0b6      	b.n	800405a <HAL_TIM_ConfigClockSource+0x18a>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f28:	d03e      	beq.n	8003fa8 <HAL_TIM_ConfigClockSource+0xd8>
 8003f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f2e:	f200 8087 	bhi.w	8004040 <HAL_TIM_ConfigClockSource+0x170>
 8003f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f36:	f000 8086 	beq.w	8004046 <HAL_TIM_ConfigClockSource+0x176>
 8003f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f3e:	d87f      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x170>
 8003f40:	2b70      	cmp	r3, #112	; 0x70
 8003f42:	d01a      	beq.n	8003f7a <HAL_TIM_ConfigClockSource+0xaa>
 8003f44:	2b70      	cmp	r3, #112	; 0x70
 8003f46:	d87b      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x170>
 8003f48:	2b60      	cmp	r3, #96	; 0x60
 8003f4a:	d050      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0x11e>
 8003f4c:	2b60      	cmp	r3, #96	; 0x60
 8003f4e:	d877      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x170>
 8003f50:	2b50      	cmp	r3, #80	; 0x50
 8003f52:	d03c      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0xfe>
 8003f54:	2b50      	cmp	r3, #80	; 0x50
 8003f56:	d873      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x170>
 8003f58:	2b40      	cmp	r3, #64	; 0x40
 8003f5a:	d058      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x13e>
 8003f5c:	2b40      	cmp	r3, #64	; 0x40
 8003f5e:	d86f      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x170>
 8003f60:	2b30      	cmp	r3, #48	; 0x30
 8003f62:	d064      	beq.n	800402e <HAL_TIM_ConfigClockSource+0x15e>
 8003f64:	2b30      	cmp	r3, #48	; 0x30
 8003f66:	d86b      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x170>
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	d060      	beq.n	800402e <HAL_TIM_ConfigClockSource+0x15e>
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	d867      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x170>
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d05c      	beq.n	800402e <HAL_TIM_ConfigClockSource+0x15e>
 8003f74:	2b10      	cmp	r3, #16
 8003f76:	d05a      	beq.n	800402e <HAL_TIM_ConfigClockSource+0x15e>
 8003f78:	e062      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6818      	ldr	r0, [r3, #0]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	6899      	ldr	r1, [r3, #8]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f000 fbf9 	bl	8004780 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	609a      	str	r2, [r3, #8]
      break;
 8003fa6:	e04f      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6818      	ldr	r0, [r3, #0]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	6899      	ldr	r1, [r3, #8]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f000 fbe2 	bl	8004780 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fca:	609a      	str	r2, [r3, #8]
      break;
 8003fcc:	e03c      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6818      	ldr	r0, [r3, #0]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	6859      	ldr	r1, [r3, #4]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f000 fb56 	bl	800468c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2150      	movs	r1, #80	; 0x50
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 fbaf 	bl	800474a <TIM_ITRx_SetConfig>
      break;
 8003fec:	e02c      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	6859      	ldr	r1, [r3, #4]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f000 fb75 	bl	80046ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2160      	movs	r1, #96	; 0x60
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fb9f 	bl	800474a <TIM_ITRx_SetConfig>
      break;
 800400c:	e01c      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	6859      	ldr	r1, [r3, #4]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	461a      	mov	r2, r3
 800401c:	f000 fb36 	bl	800468c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2140      	movs	r1, #64	; 0x40
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fb8f 	bl	800474a <TIM_ITRx_SetConfig>
      break;
 800402c:	e00c      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4619      	mov	r1, r3
 8004038:	4610      	mov	r0, r2
 800403a:	f000 fb86 	bl	800474a <TIM_ITRx_SetConfig>
      break;
 800403e:	e003      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	73fb      	strb	r3, [r7, #15]
      break;
 8004044:	e000      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004046:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004058:	7bfb      	ldrb	r3, [r7, #15]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a2e      	ldr	r2, [pc, #184]	; (8004130 <TIM_Base_SetConfig+0xcc>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d003      	beq.n	8004084 <TIM_Base_SetConfig+0x20>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004082:	d108      	bne.n	8004096 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800408a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a25      	ldr	r2, [pc, #148]	; (8004130 <TIM_Base_SetConfig+0xcc>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00f      	beq.n	80040be <TIM_Base_SetConfig+0x5a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a4:	d00b      	beq.n	80040be <TIM_Base_SetConfig+0x5a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a22      	ldr	r2, [pc, #136]	; (8004134 <TIM_Base_SetConfig+0xd0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d007      	beq.n	80040be <TIM_Base_SetConfig+0x5a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a21      	ldr	r2, [pc, #132]	; (8004138 <TIM_Base_SetConfig+0xd4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_Base_SetConfig+0x5a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a20      	ldr	r2, [pc, #128]	; (800413c <TIM_Base_SetConfig+0xd8>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d108      	bne.n	80040d0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a0e      	ldr	r2, [pc, #56]	; (8004130 <TIM_Base_SetConfig+0xcc>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00b      	beq.n	8004114 <TIM_Base_SetConfig+0xb0>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a0d      	ldr	r2, [pc, #52]	; (8004134 <TIM_Base_SetConfig+0xd0>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d007      	beq.n	8004114 <TIM_Base_SetConfig+0xb0>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a0c      	ldr	r2, [pc, #48]	; (8004138 <TIM_Base_SetConfig+0xd4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d003      	beq.n	8004114 <TIM_Base_SetConfig+0xb0>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a0b      	ldr	r2, [pc, #44]	; (800413c <TIM_Base_SetConfig+0xd8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d103      	bne.n	800411c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	615a      	str	r2, [r3, #20]
}
 8004122:	bf00      	nop
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40014000 	.word	0x40014000
 8004138:	40014400 	.word	0x40014400
 800413c:	40014800 	.word	0x40014800

08004140 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	f023 0201 	bic.w	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800416e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0303 	bic.w	r3, r3, #3
 800417a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f023 0302 	bic.w	r3, r3, #2
 800418c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	4313      	orrs	r3, r2
 8004196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a28      	ldr	r2, [pc, #160]	; (800423c <TIM_OC1_SetConfig+0xfc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d00b      	beq.n	80041b8 <TIM_OC1_SetConfig+0x78>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a27      	ldr	r2, [pc, #156]	; (8004240 <TIM_OC1_SetConfig+0x100>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d007      	beq.n	80041b8 <TIM_OC1_SetConfig+0x78>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a26      	ldr	r2, [pc, #152]	; (8004244 <TIM_OC1_SetConfig+0x104>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d003      	beq.n	80041b8 <TIM_OC1_SetConfig+0x78>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a25      	ldr	r2, [pc, #148]	; (8004248 <TIM_OC1_SetConfig+0x108>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d10c      	bne.n	80041d2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f023 0308 	bic.w	r3, r3, #8
 80041be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f023 0304 	bic.w	r3, r3, #4
 80041d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a19      	ldr	r2, [pc, #100]	; (800423c <TIM_OC1_SetConfig+0xfc>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00b      	beq.n	80041f2 <TIM_OC1_SetConfig+0xb2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a18      	ldr	r2, [pc, #96]	; (8004240 <TIM_OC1_SetConfig+0x100>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d007      	beq.n	80041f2 <TIM_OC1_SetConfig+0xb2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a17      	ldr	r2, [pc, #92]	; (8004244 <TIM_OC1_SetConfig+0x104>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d003      	beq.n	80041f2 <TIM_OC1_SetConfig+0xb2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a16      	ldr	r2, [pc, #88]	; (8004248 <TIM_OC1_SetConfig+0x108>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d111      	bne.n	8004216 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	4313      	orrs	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	621a      	str	r2, [r3, #32]
}
 8004230:	bf00      	nop
 8004232:	371c      	adds	r7, #28
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	40012c00 	.word	0x40012c00
 8004240:	40014000 	.word	0x40014000
 8004244:	40014400 	.word	0x40014400
 8004248:	40014800 	.word	0x40014800

0800424c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	f023 0210 	bic.w	r2, r3, #16
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800427a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800427e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f023 0320 	bic.w	r3, r3, #32
 800429a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a24      	ldr	r2, [pc, #144]	; (800433c <TIM_OC2_SetConfig+0xf0>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d10d      	bne.n	80042cc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a1b      	ldr	r2, [pc, #108]	; (800433c <TIM_OC2_SetConfig+0xf0>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00b      	beq.n	80042ec <TIM_OC2_SetConfig+0xa0>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a1a      	ldr	r2, [pc, #104]	; (8004340 <TIM_OC2_SetConfig+0xf4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d007      	beq.n	80042ec <TIM_OC2_SetConfig+0xa0>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a19      	ldr	r2, [pc, #100]	; (8004344 <TIM_OC2_SetConfig+0xf8>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d003      	beq.n	80042ec <TIM_OC2_SetConfig+0xa0>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a18      	ldr	r2, [pc, #96]	; (8004348 <TIM_OC2_SetConfig+0xfc>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d113      	bne.n	8004314 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042f2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042fa:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	621a      	str	r2, [r3, #32]
}
 800432e:	bf00      	nop
 8004330:	371c      	adds	r7, #28
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	40012c00 	.word	0x40012c00
 8004340:	40014000 	.word	0x40014000
 8004344:	40014400 	.word	0x40014400
 8004348:	40014800 	.word	0x40014800

0800434c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800437a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 0303 	bic.w	r3, r3, #3
 8004386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	021b      	lsls	r3, r3, #8
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a23      	ldr	r2, [pc, #140]	; (8004438 <TIM_OC3_SetConfig+0xec>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d10d      	bne.n	80043ca <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	021b      	lsls	r3, r3, #8
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043c8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a1a      	ldr	r2, [pc, #104]	; (8004438 <TIM_OC3_SetConfig+0xec>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00b      	beq.n	80043ea <TIM_OC3_SetConfig+0x9e>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a19      	ldr	r2, [pc, #100]	; (800443c <TIM_OC3_SetConfig+0xf0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d007      	beq.n	80043ea <TIM_OC3_SetConfig+0x9e>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a18      	ldr	r2, [pc, #96]	; (8004440 <TIM_OC3_SetConfig+0xf4>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d003      	beq.n	80043ea <TIM_OC3_SetConfig+0x9e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a17      	ldr	r2, [pc, #92]	; (8004444 <TIM_OC3_SetConfig+0xf8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d113      	bne.n	8004412 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	4313      	orrs	r3, r2
 8004404:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	4313      	orrs	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	621a      	str	r2, [r3, #32]
}
 800442c:	bf00      	nop
 800442e:	371c      	adds	r7, #28
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	40012c00 	.word	0x40012c00
 800443c:	40014000 	.word	0x40014000
 8004440:	40014400 	.word	0x40014400
 8004444:	40014800 	.word	0x40014800

08004448 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800447a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	021b      	lsls	r3, r3, #8
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	4313      	orrs	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	031b      	lsls	r3, r3, #12
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a16      	ldr	r2, [pc, #88]	; (8004500 <TIM_OC4_SetConfig+0xb8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d00b      	beq.n	80044c4 <TIM_OC4_SetConfig+0x7c>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a15      	ldr	r2, [pc, #84]	; (8004504 <TIM_OC4_SetConfig+0xbc>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d007      	beq.n	80044c4 <TIM_OC4_SetConfig+0x7c>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a14      	ldr	r2, [pc, #80]	; (8004508 <TIM_OC4_SetConfig+0xc0>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d003      	beq.n	80044c4 <TIM_OC4_SetConfig+0x7c>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a13      	ldr	r2, [pc, #76]	; (800450c <TIM_OC4_SetConfig+0xc4>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d109      	bne.n	80044d8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	019b      	lsls	r3, r3, #6
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	621a      	str	r2, [r3, #32]
}
 80044f2:	bf00      	nop
 80044f4:	371c      	adds	r7, #28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	40012c00 	.word	0x40012c00
 8004504:	40014000 	.word	0x40014000
 8004508:	40014400 	.word	0x40014400
 800450c:	40014800 	.word	0x40014800

08004510 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800453e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004554:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	041b      	lsls	r3, r3, #16
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a15      	ldr	r2, [pc, #84]	; (80045bc <TIM_OC5_SetConfig+0xac>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00b      	beq.n	8004582 <TIM_OC5_SetConfig+0x72>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a14      	ldr	r2, [pc, #80]	; (80045c0 <TIM_OC5_SetConfig+0xb0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d007      	beq.n	8004582 <TIM_OC5_SetConfig+0x72>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a13      	ldr	r2, [pc, #76]	; (80045c4 <TIM_OC5_SetConfig+0xb4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d003      	beq.n	8004582 <TIM_OC5_SetConfig+0x72>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a12      	ldr	r2, [pc, #72]	; (80045c8 <TIM_OC5_SetConfig+0xb8>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d109      	bne.n	8004596 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004588:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	021b      	lsls	r3, r3, #8
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	621a      	str	r2, [r3, #32]
}
 80045b0:	bf00      	nop
 80045b2:	371c      	adds	r7, #28
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	40012c00 	.word	0x40012c00
 80045c0:	40014000 	.word	0x40014000
 80045c4:	40014400 	.word	0x40014400
 80045c8:	40014800 	.word	0x40014800

080045cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	021b      	lsls	r3, r3, #8
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004612:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	051b      	lsls	r3, r3, #20
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a16      	ldr	r2, [pc, #88]	; (800467c <TIM_OC6_SetConfig+0xb0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d00b      	beq.n	8004640 <TIM_OC6_SetConfig+0x74>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a15      	ldr	r2, [pc, #84]	; (8004680 <TIM_OC6_SetConfig+0xb4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d007      	beq.n	8004640 <TIM_OC6_SetConfig+0x74>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a14      	ldr	r2, [pc, #80]	; (8004684 <TIM_OC6_SetConfig+0xb8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d003      	beq.n	8004640 <TIM_OC6_SetConfig+0x74>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a13      	ldr	r2, [pc, #76]	; (8004688 <TIM_OC6_SetConfig+0xbc>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d109      	bne.n	8004654 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004646:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	029b      	lsls	r3, r3, #10
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	621a      	str	r2, [r3, #32]
}
 800466e:	bf00      	nop
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40012c00 	.word	0x40012c00
 8004680:	40014000 	.word	0x40014000
 8004684:	40014400 	.word	0x40014400
 8004688:	40014800 	.word	0x40014800

0800468c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	f023 0201 	bic.w	r2, r3, #1
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f023 030a 	bic.w	r3, r3, #10
 80046c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	621a      	str	r2, [r3, #32]
}
 80046de:	bf00      	nop
 80046e0:	371c      	adds	r7, #28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b087      	sub	sp, #28
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	60f8      	str	r0, [r7, #12]
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	f023 0210 	bic.w	r2, r3, #16
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004714:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	031b      	lsls	r3, r3, #12
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	4313      	orrs	r3, r2
 800471e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004726:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	011b      	lsls	r3, r3, #4
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	4313      	orrs	r3, r2
 8004730:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	621a      	str	r2, [r3, #32]
}
 800473e:	bf00      	nop
 8004740:	371c      	adds	r7, #28
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800474a:	b480      	push	{r7}
 800474c:	b085      	sub	sp, #20
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004760:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4313      	orrs	r3, r2
 8004768:	f043 0307 	orr.w	r3, r3, #7
 800476c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	609a      	str	r2, [r3, #8]
}
 8004774:	bf00      	nop
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
 800478c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800479a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	021a      	lsls	r2, r3, #8
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	431a      	orrs	r2, r3
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	609a      	str	r2, [r3, #8]
}
 80047b4:	bf00      	nop
 80047b6:	371c      	adds	r7, #28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e04f      	b.n	8004878 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a21      	ldr	r2, [pc, #132]	; (8004884 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d108      	bne.n	8004814 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004808:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800481a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	4313      	orrs	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a14      	ldr	r2, [pc, #80]	; (8004884 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d009      	beq.n	800484c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004840:	d004      	beq.n	800484c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a10      	ldr	r2, [pc, #64]	; (8004888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d10c      	bne.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004852:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	4313      	orrs	r3, r2
 800485c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	40012c00 	.word	0x40012c00
 8004888:	40014000 	.word	0x40014000

0800488c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e040      	b.n	8004920 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fd f834 	bl	800191c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2224      	movs	r2, #36	; 0x24
 80048b8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0201 	bic.w	r2, r2, #1
 80048c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fb32 	bl	8004f34 <UART_SetConfig>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d101      	bne.n	80048da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e022      	b.n	8004920 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fc5c 	bl	80051a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004906:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fce3 	bl	80052e4 <UART_CheckIdleState>
 800491e:	4603      	mov	r3, r0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b0ba      	sub	sp, #232	; 0xe8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800494e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004952:	f640 030f 	movw	r3, #2063	; 0x80f
 8004956:	4013      	ands	r3, r2
 8004958:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800495c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004960:	2b00      	cmp	r3, #0
 8004962:	d115      	bne.n	8004990 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00f      	beq.n	8004990 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004974:	f003 0320 	and.w	r3, r3, #32
 8004978:	2b00      	cmp	r3, #0
 800497a:	d009      	beq.n	8004990 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 82ab 	beq.w	8004edc <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	4798      	blx	r3
      }
      return;
 800498e:	e2a5      	b.n	8004edc <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004990:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 8117 	beq.w	8004bc8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800499a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d106      	bne.n	80049b4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80049a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80049aa:	4b85      	ldr	r3, [pc, #532]	; (8004bc0 <HAL_UART_IRQHandler+0x298>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f000 810a 	beq.w	8004bc8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d011      	beq.n	80049e4 <HAL_UART_IRQHandler+0xbc>
 80049c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00b      	beq.n	80049e4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2201      	movs	r2, #1
 80049d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049da:	f043 0201 	orr.w	r2, r3, #1
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d011      	beq.n	8004a14 <HAL_UART_IRQHandler+0xec>
 80049f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00b      	beq.n	8004a14 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2202      	movs	r2, #2
 8004a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a0a:	f043 0204 	orr.w	r2, r3, #4
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d011      	beq.n	8004a44 <HAL_UART_IRQHandler+0x11c>
 8004a20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00b      	beq.n	8004a44 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2204      	movs	r2, #4
 8004a32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a3a:	f043 0202 	orr.w	r2, r3, #2
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a48:	f003 0308 	and.w	r3, r3, #8
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d017      	beq.n	8004a80 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a54:	f003 0320 	and.w	r3, r3, #32
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d105      	bne.n	8004a68 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004a5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a60:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00b      	beq.n	8004a80 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2208      	movs	r2, #8
 8004a6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a76:	f043 0208 	orr.w	r2, r3, #8
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d012      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x18a>
 8004a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00c      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004aa0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aa8:	f043 0220 	orr.w	r2, r3, #32
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 8211 	beq.w	8004ee0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ac2:	f003 0320 	and.w	r3, r3, #32
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00d      	beq.n	8004ae6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afa:	2b40      	cmp	r3, #64	; 0x40
 8004afc:	d005      	beq.n	8004b0a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004afe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b02:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d04f      	beq.n	8004baa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fcf9 	bl	8005502 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1a:	2b40      	cmp	r3, #64	; 0x40
 8004b1c:	d141      	bne.n	8004ba2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3308      	adds	r3, #8
 8004b24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b2c:	e853 3f00 	ldrex	r3, [r3]
 8004b30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3308      	adds	r3, #8
 8004b46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b5a:	e841 2300 	strex	r3, r2, [r1]
 8004b5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1d9      	bne.n	8004b1e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d013      	beq.n	8004b9a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b76:	4a13      	ldr	r2, [pc, #76]	; (8004bc4 <HAL_UART_IRQHandler+0x29c>)
 8004b78:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fd fa0c 	bl	8001f9c <HAL_DMA_Abort_IT>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d017      	beq.n	8004bba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004b94:	4610      	mov	r0, r2
 8004b96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b98:	e00f      	b.n	8004bba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f9b4 	bl	8004f08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba0:	e00b      	b.n	8004bba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f9b0 	bl	8004f08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba8:	e007      	b.n	8004bba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f9ac 	bl	8004f08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004bb8:	e192      	b.n	8004ee0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bba:	bf00      	nop
    return;
 8004bbc:	e190      	b.n	8004ee0 <HAL_UART_IRQHandler+0x5b8>
 8004bbe:	bf00      	nop
 8004bc0:	04000120 	.word	0x04000120
 8004bc4:	080055cb 	.word	0x080055cb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	f040 814b 	bne.w	8004e68 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd6:	f003 0310 	and.w	r3, r3, #16
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 8144 	beq.w	8004e68 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004be4:	f003 0310 	and.w	r3, r3, #16
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 813d 	beq.w	8004e68 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2210      	movs	r2, #16
 8004bf4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c00:	2b40      	cmp	r3, #64	; 0x40
 8004c02:	f040 80b5 	bne.w	8004d70 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c12:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 8164 	beq.w	8004ee4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c26:	429a      	cmp	r2, r3
 8004c28:	f080 815c 	bcs.w	8004ee4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	f000 8086 	beq.w	8004d4e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c4e:	e853 3f00 	ldrex	r3, [r3]
 8004c52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c70:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c74:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c78:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c7c:	e841 2300 	strex	r3, r2, [r1]
 8004c80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1da      	bne.n	8004c42 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3308      	adds	r3, #8
 8004c92:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c96:	e853 3f00 	ldrex	r3, [r3]
 8004c9a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c9e:	f023 0301 	bic.w	r3, r3, #1
 8004ca2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	3308      	adds	r3, #8
 8004cac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004cb0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004cb4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004cb8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004cbc:	e841 2300 	strex	r3, r2, [r1]
 8004cc0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004cc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1e1      	bne.n	8004c8c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3308      	adds	r3, #8
 8004cce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cd2:	e853 3f00 	ldrex	r3, [r3]
 8004cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3308      	adds	r3, #8
 8004ce8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004cec:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004cee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004cf2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004cf4:	e841 2300 	strex	r3, r2, [r1]
 8004cf8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004cfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1e3      	bne.n	8004cc8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d16:	e853 3f00 	ldrex	r3, [r3]
 8004d1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d1e:	f023 0310 	bic.w	r3, r3, #16
 8004d22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d30:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d32:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d38:	e841 2300 	strex	r3, r2, [r1]
 8004d3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1e4      	bne.n	8004d0e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fd f8ee 	bl	8001f2a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2202      	movs	r2, #2
 8004d52:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	4619      	mov	r1, r3
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f8d7 	bl	8004f1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d6e:	e0b9      	b.n	8004ee4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 80ab 	beq.w	8004ee8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004d92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 80a6 	beq.w	8004ee8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da4:	e853 3f00 	ldrex	r3, [r3]
 8004da8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004db0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	461a      	mov	r2, r3
 8004dba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004dbe:	647b      	str	r3, [r7, #68]	; 0x44
 8004dc0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dc6:	e841 2300 	strex	r3, r2, [r1]
 8004dca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1e4      	bne.n	8004d9c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3308      	adds	r3, #8
 8004dd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	e853 3f00 	ldrex	r3, [r3]
 8004de0:	623b      	str	r3, [r7, #32]
   return(result);
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	f023 0301 	bic.w	r3, r3, #1
 8004de8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3308      	adds	r3, #8
 8004df2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004df6:	633a      	str	r2, [r7, #48]	; 0x30
 8004df8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dfe:	e841 2300 	strex	r3, r2, [r1]
 8004e02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1e3      	bne.n	8004dd2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	e853 3f00 	ldrex	r3, [r3]
 8004e2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0310 	bic.w	r3, r3, #16
 8004e32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e40:	61fb      	str	r3, [r7, #28]
 8004e42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e44:	69b9      	ldr	r1, [r7, #24]
 8004e46:	69fa      	ldr	r2, [r7, #28]
 8004e48:	e841 2300 	strex	r3, r2, [r1]
 8004e4c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1e4      	bne.n	8004e1e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e5e:	4619      	mov	r1, r3
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f85b 	bl	8004f1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e66:	e03f      	b.n	8004ee8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00e      	beq.n	8004e92 <HAL_UART_IRQHandler+0x56a>
 8004e74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d008      	beq.n	8004e92 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 fbdd 	bl	800564a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e90:	e02d      	b.n	8004eee <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00e      	beq.n	8004ebc <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d008      	beq.n	8004ebc <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d01c      	beq.n	8004eec <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	4798      	blx	r3
    }
    return;
 8004eba:	e017      	b.n	8004eec <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d012      	beq.n	8004eee <HAL_UART_IRQHandler+0x5c6>
 8004ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00c      	beq.n	8004eee <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 fb8e 	bl	80055f6 <UART_EndTransmit_IT>
    return;
 8004eda:	e008      	b.n	8004eee <HAL_UART_IRQHandler+0x5c6>
      return;
 8004edc:	bf00      	nop
 8004ede:	e006      	b.n	8004eee <HAL_UART_IRQHandler+0x5c6>
    return;
 8004ee0:	bf00      	nop
 8004ee2:	e004      	b.n	8004eee <HAL_UART_IRQHandler+0x5c6>
      return;
 8004ee4:	bf00      	nop
 8004ee6:	e002      	b.n	8004eee <HAL_UART_IRQHandler+0x5c6>
      return;
 8004ee8:	bf00      	nop
 8004eea:	e000      	b.n	8004eee <HAL_UART_IRQHandler+0x5c6>
    return;
 8004eec:	bf00      	nop
  }

}
 8004eee:	37e8      	adds	r7, #232	; 0xe8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b088      	sub	sp, #32
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	4b8a      	ldr	r3, [pc, #552]	; (8005188 <UART_SetConfig+0x254>)
 8004f60:	4013      	ands	r3, r2
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	6812      	ldr	r2, [r2, #0]
 8004f66:	6979      	ldr	r1, [r7, #20]
 8004f68:	430b      	orrs	r3, r1
 8004f6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a78      	ldr	r2, [pc, #480]	; (800518c <UART_SetConfig+0x258>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d120      	bne.n	8004ff2 <UART_SetConfig+0xbe>
 8004fb0:	4b77      	ldr	r3, [pc, #476]	; (8005190 <UART_SetConfig+0x25c>)
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb4:	f003 0303 	and.w	r3, r3, #3
 8004fb8:	2b03      	cmp	r3, #3
 8004fba:	d817      	bhi.n	8004fec <UART_SetConfig+0xb8>
 8004fbc:	a201      	add	r2, pc, #4	; (adr r2, 8004fc4 <UART_SetConfig+0x90>)
 8004fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc2:	bf00      	nop
 8004fc4:	08004fd5 	.word	0x08004fd5
 8004fc8:	08004fe1 	.word	0x08004fe1
 8004fcc:	08004fe7 	.word	0x08004fe7
 8004fd0:	08004fdb 	.word	0x08004fdb
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e01d      	b.n	8005016 <UART_SetConfig+0xe2>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	77fb      	strb	r3, [r7, #31]
 8004fde:	e01a      	b.n	8005016 <UART_SetConfig+0xe2>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	77fb      	strb	r3, [r7, #31]
 8004fe4:	e017      	b.n	8005016 <UART_SetConfig+0xe2>
 8004fe6:	2308      	movs	r3, #8
 8004fe8:	77fb      	strb	r3, [r7, #31]
 8004fea:	e014      	b.n	8005016 <UART_SetConfig+0xe2>
 8004fec:	2310      	movs	r3, #16
 8004fee:	77fb      	strb	r3, [r7, #31]
 8004ff0:	e011      	b.n	8005016 <UART_SetConfig+0xe2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a67      	ldr	r2, [pc, #412]	; (8005194 <UART_SetConfig+0x260>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d102      	bne.n	8005002 <UART_SetConfig+0xce>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	77fb      	strb	r3, [r7, #31]
 8005000:	e009      	b.n	8005016 <UART_SetConfig+0xe2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a64      	ldr	r2, [pc, #400]	; (8005198 <UART_SetConfig+0x264>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d102      	bne.n	8005012 <UART_SetConfig+0xde>
 800500c:	2300      	movs	r3, #0
 800500e:	77fb      	strb	r3, [r7, #31]
 8005010:	e001      	b.n	8005016 <UART_SetConfig+0xe2>
 8005012:	2310      	movs	r3, #16
 8005014:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800501e:	d15a      	bne.n	80050d6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005020:	7ffb      	ldrb	r3, [r7, #31]
 8005022:	2b08      	cmp	r3, #8
 8005024:	d827      	bhi.n	8005076 <UART_SetConfig+0x142>
 8005026:	a201      	add	r2, pc, #4	; (adr r2, 800502c <UART_SetConfig+0xf8>)
 8005028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502c:	08005051 	.word	0x08005051
 8005030:	08005059 	.word	0x08005059
 8005034:	08005061 	.word	0x08005061
 8005038:	08005077 	.word	0x08005077
 800503c:	08005067 	.word	0x08005067
 8005040:	08005077 	.word	0x08005077
 8005044:	08005077 	.word	0x08005077
 8005048:	08005077 	.word	0x08005077
 800504c:	0800506f 	.word	0x0800506f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005050:	f7fe fb9c 	bl	800378c <HAL_RCC_GetPCLK1Freq>
 8005054:	61b8      	str	r0, [r7, #24]
        break;
 8005056:	e013      	b.n	8005080 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005058:	f7fe fbba 	bl	80037d0 <HAL_RCC_GetPCLK2Freq>
 800505c:	61b8      	str	r0, [r7, #24]
        break;
 800505e:	e00f      	b.n	8005080 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005060:	4b4e      	ldr	r3, [pc, #312]	; (800519c <UART_SetConfig+0x268>)
 8005062:	61bb      	str	r3, [r7, #24]
        break;
 8005064:	e00c      	b.n	8005080 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005066:	f7fe fb1b 	bl	80036a0 <HAL_RCC_GetSysClockFreq>
 800506a:	61b8      	str	r0, [r7, #24]
        break;
 800506c:	e008      	b.n	8005080 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800506e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005072:	61bb      	str	r3, [r7, #24]
        break;
 8005074:	e004      	b.n	8005080 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	77bb      	strb	r3, [r7, #30]
        break;
 800507e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d074      	beq.n	8005170 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	005a      	lsls	r2, r3, #1
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	085b      	lsrs	r3, r3, #1
 8005090:	441a      	add	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	fbb2 f3f3 	udiv	r3, r2, r3
 800509a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	2b0f      	cmp	r3, #15
 80050a0:	d916      	bls.n	80050d0 <UART_SetConfig+0x19c>
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a8:	d212      	bcs.n	80050d0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	f023 030f 	bic.w	r3, r3, #15
 80050b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	085b      	lsrs	r3, r3, #1
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	b29a      	uxth	r2, r3
 80050c0:	89fb      	ldrh	r3, [r7, #14]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	89fa      	ldrh	r2, [r7, #14]
 80050cc:	60da      	str	r2, [r3, #12]
 80050ce:	e04f      	b.n	8005170 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	77bb      	strb	r3, [r7, #30]
 80050d4:	e04c      	b.n	8005170 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050d6:	7ffb      	ldrb	r3, [r7, #31]
 80050d8:	2b08      	cmp	r3, #8
 80050da:	d828      	bhi.n	800512e <UART_SetConfig+0x1fa>
 80050dc:	a201      	add	r2, pc, #4	; (adr r2, 80050e4 <UART_SetConfig+0x1b0>)
 80050de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e2:	bf00      	nop
 80050e4:	08005109 	.word	0x08005109
 80050e8:	08005111 	.word	0x08005111
 80050ec:	08005119 	.word	0x08005119
 80050f0:	0800512f 	.word	0x0800512f
 80050f4:	0800511f 	.word	0x0800511f
 80050f8:	0800512f 	.word	0x0800512f
 80050fc:	0800512f 	.word	0x0800512f
 8005100:	0800512f 	.word	0x0800512f
 8005104:	08005127 	.word	0x08005127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005108:	f7fe fb40 	bl	800378c <HAL_RCC_GetPCLK1Freq>
 800510c:	61b8      	str	r0, [r7, #24]
        break;
 800510e:	e013      	b.n	8005138 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005110:	f7fe fb5e 	bl	80037d0 <HAL_RCC_GetPCLK2Freq>
 8005114:	61b8      	str	r0, [r7, #24]
        break;
 8005116:	e00f      	b.n	8005138 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005118:	4b20      	ldr	r3, [pc, #128]	; (800519c <UART_SetConfig+0x268>)
 800511a:	61bb      	str	r3, [r7, #24]
        break;
 800511c:	e00c      	b.n	8005138 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800511e:	f7fe fabf 	bl	80036a0 <HAL_RCC_GetSysClockFreq>
 8005122:	61b8      	str	r0, [r7, #24]
        break;
 8005124:	e008      	b.n	8005138 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800512a:	61bb      	str	r3, [r7, #24]
        break;
 800512c:	e004      	b.n	8005138 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	77bb      	strb	r3, [r7, #30]
        break;
 8005136:	bf00      	nop
    }

    if (pclk != 0U)
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d018      	beq.n	8005170 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	085a      	lsrs	r2, r3, #1
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	441a      	add	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005150:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	2b0f      	cmp	r3, #15
 8005156:	d909      	bls.n	800516c <UART_SetConfig+0x238>
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800515e:	d205      	bcs.n	800516c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	b29a      	uxth	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	60da      	str	r2, [r3, #12]
 800516a:	e001      	b.n	8005170 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800517c:	7fbb      	ldrb	r3, [r7, #30]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3720      	adds	r7, #32
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	efff69f3 	.word	0xefff69f3
 800518c:	40013800 	.word	0x40013800
 8005190:	40021000 	.word	0x40021000
 8005194:	40004400 	.word	0x40004400
 8005198:	40004800 	.word	0x40004800
 800519c:	007a1200 	.word	0x007a1200

080051a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00a      	beq.n	800520e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	f003 0310 	and.w	r3, r3, #16
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00a      	beq.n	8005252 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	f003 0320 	and.w	r3, r3, #32
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527c:	2b00      	cmp	r3, #0
 800527e:	d01a      	beq.n	80052b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800529e:	d10a      	bne.n	80052b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	605a      	str	r2, [r3, #4]
  }
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b098      	sub	sp, #96	; 0x60
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052f4:	f7fc fcd8 	bl	8001ca8 <HAL_GetTick>
 80052f8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b08      	cmp	r3, #8
 8005306:	d12e      	bne.n	8005366 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005308:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005310:	2200      	movs	r2, #0
 8005312:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f88c 	bl	8005434 <UART_WaitOnFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d021      	beq.n	8005366 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532a:	e853 3f00 	ldrex	r3, [r3]
 800532e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005332:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005336:	653b      	str	r3, [r7, #80]	; 0x50
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	461a      	mov	r2, r3
 800533e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005340:	647b      	str	r3, [r7, #68]	; 0x44
 8005342:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005344:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005346:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005348:	e841 2300 	strex	r3, r2, [r1]
 800534c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800534e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1e6      	bne.n	8005322 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2220      	movs	r2, #32
 8005358:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e062      	b.n	800542c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b04      	cmp	r3, #4
 8005372:	d149      	bne.n	8005408 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005374:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800537c:	2200      	movs	r2, #0
 800537e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f856 	bl	8005434 <UART_WaitOnFlagUntilTimeout>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d03c      	beq.n	8005408 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	623b      	str	r3, [r7, #32]
   return(result);
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	461a      	mov	r2, r3
 80053aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ac:	633b      	str	r3, [r7, #48]	; 0x30
 80053ae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053b4:	e841 2300 	strex	r3, r2, [r1]
 80053b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1e6      	bne.n	800538e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3308      	adds	r3, #8
 80053c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	e853 3f00 	ldrex	r3, [r3]
 80053ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 0301 	bic.w	r3, r3, #1
 80053d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3308      	adds	r3, #8
 80053de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053e0:	61fa      	str	r2, [r7, #28]
 80053e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e4:	69b9      	ldr	r1, [r7, #24]
 80053e6:	69fa      	ldr	r2, [r7, #28]
 80053e8:	e841 2300 	strex	r3, r2, [r1]
 80053ec:	617b      	str	r3, [r7, #20]
   return(result);
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1e5      	bne.n	80053c0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e011      	b.n	800542c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2220      	movs	r2, #32
 800540c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2220      	movs	r2, #32
 8005412:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3758      	adds	r7, #88	; 0x58
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	4613      	mov	r3, r2
 8005442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005444:	e049      	b.n	80054da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544c:	d045      	beq.n	80054da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800544e:	f7fc fc2b 	bl	8001ca8 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	429a      	cmp	r2, r3
 800545c:	d302      	bcc.n	8005464 <UART_WaitOnFlagUntilTimeout+0x30>
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e048      	b.n	80054fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0304 	and.w	r3, r3, #4
 8005472:	2b00      	cmp	r3, #0
 8005474:	d031      	beq.n	80054da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	f003 0308 	and.w	r3, r3, #8
 8005480:	2b08      	cmp	r3, #8
 8005482:	d110      	bne.n	80054a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2208      	movs	r2, #8
 800548a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 f838 	bl	8005502 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2208      	movs	r2, #8
 8005496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e029      	b.n	80054fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054b4:	d111      	bne.n	80054da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 f81e 	bl	8005502 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2220      	movs	r2, #32
 80054ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e00f      	b.n	80054fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69da      	ldr	r2, [r3, #28]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	4013      	ands	r3, r2
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	bf0c      	ite	eq
 80054ea:	2301      	moveq	r3, #1
 80054ec:	2300      	movne	r3, #0
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	461a      	mov	r2, r3
 80054f2:	79fb      	ldrb	r3, [r7, #7]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d0a6      	beq.n	8005446 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005502:	b480      	push	{r7}
 8005504:	b095      	sub	sp, #84	; 0x54
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005512:	e853 3f00 	ldrex	r3, [r3]
 8005516:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800551e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	461a      	mov	r2, r3
 8005526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005528:	643b      	str	r3, [r7, #64]	; 0x40
 800552a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800552e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005530:	e841 2300 	strex	r3, r2, [r1]
 8005534:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e6      	bne.n	800550a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3308      	adds	r3, #8
 8005542:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	e853 3f00 	ldrex	r3, [r3]
 800554a:	61fb      	str	r3, [r7, #28]
   return(result);
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	f023 0301 	bic.w	r3, r3, #1
 8005552:	64bb      	str	r3, [r7, #72]	; 0x48
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3308      	adds	r3, #8
 800555a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800555c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800555e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005564:	e841 2300 	strex	r3, r2, [r1]
 8005568:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1e5      	bne.n	800553c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005574:	2b01      	cmp	r3, #1
 8005576:	d118      	bne.n	80055aa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	e853 3f00 	ldrex	r3, [r3]
 8005584:	60bb      	str	r3, [r7, #8]
   return(result);
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	f023 0310 	bic.w	r3, r3, #16
 800558c:	647b      	str	r3, [r7, #68]	; 0x44
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	461a      	mov	r2, r3
 8005594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005596:	61bb      	str	r3, [r7, #24]
 8005598:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559a:	6979      	ldr	r1, [r7, #20]
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	e841 2300 	strex	r3, r2, [r1]
 80055a2:	613b      	str	r3, [r7, #16]
   return(result);
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1e6      	bne.n	8005578 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80055be:	bf00      	nop
 80055c0:	3754      	adds	r7, #84	; 0x54
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b084      	sub	sp, #16
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f7ff fc8d 	bl	8004f08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ee:	bf00      	nop
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b088      	sub	sp, #32
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	e853 3f00 	ldrex	r3, [r3]
 800560a:	60bb      	str	r3, [r7, #8]
   return(result);
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005612:	61fb      	str	r3, [r7, #28]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	461a      	mov	r2, r3
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	61bb      	str	r3, [r7, #24]
 800561e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005620:	6979      	ldr	r1, [r7, #20]
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	e841 2300 	strex	r3, r2, [r1]
 8005628:	613b      	str	r3, [r7, #16]
   return(result);
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1e6      	bne.n	80055fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2220      	movs	r2, #32
 8005634:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7ff fc59 	bl	8004ef4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005642:	bf00      	nop
 8005644:	3720      	adds	r7, #32
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
	...

08005660 <__errno>:
 8005660:	4b01      	ldr	r3, [pc, #4]	; (8005668 <__errno+0x8>)
 8005662:	6818      	ldr	r0, [r3, #0]
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	20000014 	.word	0x20000014

0800566c <__libc_init_array>:
 800566c:	b570      	push	{r4, r5, r6, lr}
 800566e:	4d0d      	ldr	r5, [pc, #52]	; (80056a4 <__libc_init_array+0x38>)
 8005670:	4c0d      	ldr	r4, [pc, #52]	; (80056a8 <__libc_init_array+0x3c>)
 8005672:	1b64      	subs	r4, r4, r5
 8005674:	10a4      	asrs	r4, r4, #2
 8005676:	2600      	movs	r6, #0
 8005678:	42a6      	cmp	r6, r4
 800567a:	d109      	bne.n	8005690 <__libc_init_array+0x24>
 800567c:	4d0b      	ldr	r5, [pc, #44]	; (80056ac <__libc_init_array+0x40>)
 800567e:	4c0c      	ldr	r4, [pc, #48]	; (80056b0 <__libc_init_array+0x44>)
 8005680:	f000 fcae 	bl	8005fe0 <_init>
 8005684:	1b64      	subs	r4, r4, r5
 8005686:	10a4      	asrs	r4, r4, #2
 8005688:	2600      	movs	r6, #0
 800568a:	42a6      	cmp	r6, r4
 800568c:	d105      	bne.n	800569a <__libc_init_array+0x2e>
 800568e:	bd70      	pop	{r4, r5, r6, pc}
 8005690:	f855 3b04 	ldr.w	r3, [r5], #4
 8005694:	4798      	blx	r3
 8005696:	3601      	adds	r6, #1
 8005698:	e7ee      	b.n	8005678 <__libc_init_array+0xc>
 800569a:	f855 3b04 	ldr.w	r3, [r5], #4
 800569e:	4798      	blx	r3
 80056a0:	3601      	adds	r6, #1
 80056a2:	e7f2      	b.n	800568a <__libc_init_array+0x1e>
 80056a4:	08006abc 	.word	0x08006abc
 80056a8:	08006abc 	.word	0x08006abc
 80056ac:	08006abc 	.word	0x08006abc
 80056b0:	08006ac0 	.word	0x08006ac0

080056b4 <malloc>:
 80056b4:	4b02      	ldr	r3, [pc, #8]	; (80056c0 <malloc+0xc>)
 80056b6:	4601      	mov	r1, r0
 80056b8:	6818      	ldr	r0, [r3, #0]
 80056ba:	f000 b88d 	b.w	80057d8 <_malloc_r>
 80056be:	bf00      	nop
 80056c0:	20000014 	.word	0x20000014

080056c4 <free>:
 80056c4:	4b02      	ldr	r3, [pc, #8]	; (80056d0 <free+0xc>)
 80056c6:	4601      	mov	r1, r0
 80056c8:	6818      	ldr	r0, [r3, #0]
 80056ca:	f000 b819 	b.w	8005700 <_free_r>
 80056ce:	bf00      	nop
 80056d0:	20000014 	.word	0x20000014

080056d4 <memcpy>:
 80056d4:	440a      	add	r2, r1
 80056d6:	4291      	cmp	r1, r2
 80056d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80056dc:	d100      	bne.n	80056e0 <memcpy+0xc>
 80056de:	4770      	bx	lr
 80056e0:	b510      	push	{r4, lr}
 80056e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056ea:	4291      	cmp	r1, r2
 80056ec:	d1f9      	bne.n	80056e2 <memcpy+0xe>
 80056ee:	bd10      	pop	{r4, pc}

080056f0 <memset>:
 80056f0:	4402      	add	r2, r0
 80056f2:	4603      	mov	r3, r0
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d100      	bne.n	80056fa <memset+0xa>
 80056f8:	4770      	bx	lr
 80056fa:	f803 1b01 	strb.w	r1, [r3], #1
 80056fe:	e7f9      	b.n	80056f4 <memset+0x4>

08005700 <_free_r>:
 8005700:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005702:	2900      	cmp	r1, #0
 8005704:	d044      	beq.n	8005790 <_free_r+0x90>
 8005706:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800570a:	9001      	str	r0, [sp, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	f1a1 0404 	sub.w	r4, r1, #4
 8005712:	bfb8      	it	lt
 8005714:	18e4      	addlt	r4, r4, r3
 8005716:	f000 f913 	bl	8005940 <__malloc_lock>
 800571a:	4a1e      	ldr	r2, [pc, #120]	; (8005794 <_free_r+0x94>)
 800571c:	9801      	ldr	r0, [sp, #4]
 800571e:	6813      	ldr	r3, [r2, #0]
 8005720:	b933      	cbnz	r3, 8005730 <_free_r+0x30>
 8005722:	6063      	str	r3, [r4, #4]
 8005724:	6014      	str	r4, [r2, #0]
 8005726:	b003      	add	sp, #12
 8005728:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800572c:	f000 b90e 	b.w	800594c <__malloc_unlock>
 8005730:	42a3      	cmp	r3, r4
 8005732:	d908      	bls.n	8005746 <_free_r+0x46>
 8005734:	6825      	ldr	r5, [r4, #0]
 8005736:	1961      	adds	r1, r4, r5
 8005738:	428b      	cmp	r3, r1
 800573a:	bf01      	itttt	eq
 800573c:	6819      	ldreq	r1, [r3, #0]
 800573e:	685b      	ldreq	r3, [r3, #4]
 8005740:	1949      	addeq	r1, r1, r5
 8005742:	6021      	streq	r1, [r4, #0]
 8005744:	e7ed      	b.n	8005722 <_free_r+0x22>
 8005746:	461a      	mov	r2, r3
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	b10b      	cbz	r3, 8005750 <_free_r+0x50>
 800574c:	42a3      	cmp	r3, r4
 800574e:	d9fa      	bls.n	8005746 <_free_r+0x46>
 8005750:	6811      	ldr	r1, [r2, #0]
 8005752:	1855      	adds	r5, r2, r1
 8005754:	42a5      	cmp	r5, r4
 8005756:	d10b      	bne.n	8005770 <_free_r+0x70>
 8005758:	6824      	ldr	r4, [r4, #0]
 800575a:	4421      	add	r1, r4
 800575c:	1854      	adds	r4, r2, r1
 800575e:	42a3      	cmp	r3, r4
 8005760:	6011      	str	r1, [r2, #0]
 8005762:	d1e0      	bne.n	8005726 <_free_r+0x26>
 8005764:	681c      	ldr	r4, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	6053      	str	r3, [r2, #4]
 800576a:	4421      	add	r1, r4
 800576c:	6011      	str	r1, [r2, #0]
 800576e:	e7da      	b.n	8005726 <_free_r+0x26>
 8005770:	d902      	bls.n	8005778 <_free_r+0x78>
 8005772:	230c      	movs	r3, #12
 8005774:	6003      	str	r3, [r0, #0]
 8005776:	e7d6      	b.n	8005726 <_free_r+0x26>
 8005778:	6825      	ldr	r5, [r4, #0]
 800577a:	1961      	adds	r1, r4, r5
 800577c:	428b      	cmp	r3, r1
 800577e:	bf04      	itt	eq
 8005780:	6819      	ldreq	r1, [r3, #0]
 8005782:	685b      	ldreq	r3, [r3, #4]
 8005784:	6063      	str	r3, [r4, #4]
 8005786:	bf04      	itt	eq
 8005788:	1949      	addeq	r1, r1, r5
 800578a:	6021      	streq	r1, [r4, #0]
 800578c:	6054      	str	r4, [r2, #4]
 800578e:	e7ca      	b.n	8005726 <_free_r+0x26>
 8005790:	b003      	add	sp, #12
 8005792:	bd30      	pop	{r4, r5, pc}
 8005794:	20000b70 	.word	0x20000b70

08005798 <sbrk_aligned>:
 8005798:	b570      	push	{r4, r5, r6, lr}
 800579a:	4e0e      	ldr	r6, [pc, #56]	; (80057d4 <sbrk_aligned+0x3c>)
 800579c:	460c      	mov	r4, r1
 800579e:	6831      	ldr	r1, [r6, #0]
 80057a0:	4605      	mov	r5, r0
 80057a2:	b911      	cbnz	r1, 80057aa <sbrk_aligned+0x12>
 80057a4:	f000 f88c 	bl	80058c0 <_sbrk_r>
 80057a8:	6030      	str	r0, [r6, #0]
 80057aa:	4621      	mov	r1, r4
 80057ac:	4628      	mov	r0, r5
 80057ae:	f000 f887 	bl	80058c0 <_sbrk_r>
 80057b2:	1c43      	adds	r3, r0, #1
 80057b4:	d00a      	beq.n	80057cc <sbrk_aligned+0x34>
 80057b6:	1cc4      	adds	r4, r0, #3
 80057b8:	f024 0403 	bic.w	r4, r4, #3
 80057bc:	42a0      	cmp	r0, r4
 80057be:	d007      	beq.n	80057d0 <sbrk_aligned+0x38>
 80057c0:	1a21      	subs	r1, r4, r0
 80057c2:	4628      	mov	r0, r5
 80057c4:	f000 f87c 	bl	80058c0 <_sbrk_r>
 80057c8:	3001      	adds	r0, #1
 80057ca:	d101      	bne.n	80057d0 <sbrk_aligned+0x38>
 80057cc:	f04f 34ff 	mov.w	r4, #4294967295
 80057d0:	4620      	mov	r0, r4
 80057d2:	bd70      	pop	{r4, r5, r6, pc}
 80057d4:	20000b74 	.word	0x20000b74

080057d8 <_malloc_r>:
 80057d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057dc:	1ccd      	adds	r5, r1, #3
 80057de:	f025 0503 	bic.w	r5, r5, #3
 80057e2:	3508      	adds	r5, #8
 80057e4:	2d0c      	cmp	r5, #12
 80057e6:	bf38      	it	cc
 80057e8:	250c      	movcc	r5, #12
 80057ea:	2d00      	cmp	r5, #0
 80057ec:	4607      	mov	r7, r0
 80057ee:	db01      	blt.n	80057f4 <_malloc_r+0x1c>
 80057f0:	42a9      	cmp	r1, r5
 80057f2:	d905      	bls.n	8005800 <_malloc_r+0x28>
 80057f4:	230c      	movs	r3, #12
 80057f6:	603b      	str	r3, [r7, #0]
 80057f8:	2600      	movs	r6, #0
 80057fa:	4630      	mov	r0, r6
 80057fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005800:	4e2e      	ldr	r6, [pc, #184]	; (80058bc <_malloc_r+0xe4>)
 8005802:	f000 f89d 	bl	8005940 <__malloc_lock>
 8005806:	6833      	ldr	r3, [r6, #0]
 8005808:	461c      	mov	r4, r3
 800580a:	bb34      	cbnz	r4, 800585a <_malloc_r+0x82>
 800580c:	4629      	mov	r1, r5
 800580e:	4638      	mov	r0, r7
 8005810:	f7ff ffc2 	bl	8005798 <sbrk_aligned>
 8005814:	1c43      	adds	r3, r0, #1
 8005816:	4604      	mov	r4, r0
 8005818:	d14d      	bne.n	80058b6 <_malloc_r+0xde>
 800581a:	6834      	ldr	r4, [r6, #0]
 800581c:	4626      	mov	r6, r4
 800581e:	2e00      	cmp	r6, #0
 8005820:	d140      	bne.n	80058a4 <_malloc_r+0xcc>
 8005822:	6823      	ldr	r3, [r4, #0]
 8005824:	4631      	mov	r1, r6
 8005826:	4638      	mov	r0, r7
 8005828:	eb04 0803 	add.w	r8, r4, r3
 800582c:	f000 f848 	bl	80058c0 <_sbrk_r>
 8005830:	4580      	cmp	r8, r0
 8005832:	d13a      	bne.n	80058aa <_malloc_r+0xd2>
 8005834:	6821      	ldr	r1, [r4, #0]
 8005836:	3503      	adds	r5, #3
 8005838:	1a6d      	subs	r5, r5, r1
 800583a:	f025 0503 	bic.w	r5, r5, #3
 800583e:	3508      	adds	r5, #8
 8005840:	2d0c      	cmp	r5, #12
 8005842:	bf38      	it	cc
 8005844:	250c      	movcc	r5, #12
 8005846:	4629      	mov	r1, r5
 8005848:	4638      	mov	r0, r7
 800584a:	f7ff ffa5 	bl	8005798 <sbrk_aligned>
 800584e:	3001      	adds	r0, #1
 8005850:	d02b      	beq.n	80058aa <_malloc_r+0xd2>
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	442b      	add	r3, r5
 8005856:	6023      	str	r3, [r4, #0]
 8005858:	e00e      	b.n	8005878 <_malloc_r+0xa0>
 800585a:	6822      	ldr	r2, [r4, #0]
 800585c:	1b52      	subs	r2, r2, r5
 800585e:	d41e      	bmi.n	800589e <_malloc_r+0xc6>
 8005860:	2a0b      	cmp	r2, #11
 8005862:	d916      	bls.n	8005892 <_malloc_r+0xba>
 8005864:	1961      	adds	r1, r4, r5
 8005866:	42a3      	cmp	r3, r4
 8005868:	6025      	str	r5, [r4, #0]
 800586a:	bf18      	it	ne
 800586c:	6059      	strne	r1, [r3, #4]
 800586e:	6863      	ldr	r3, [r4, #4]
 8005870:	bf08      	it	eq
 8005872:	6031      	streq	r1, [r6, #0]
 8005874:	5162      	str	r2, [r4, r5]
 8005876:	604b      	str	r3, [r1, #4]
 8005878:	4638      	mov	r0, r7
 800587a:	f104 060b 	add.w	r6, r4, #11
 800587e:	f000 f865 	bl	800594c <__malloc_unlock>
 8005882:	f026 0607 	bic.w	r6, r6, #7
 8005886:	1d23      	adds	r3, r4, #4
 8005888:	1af2      	subs	r2, r6, r3
 800588a:	d0b6      	beq.n	80057fa <_malloc_r+0x22>
 800588c:	1b9b      	subs	r3, r3, r6
 800588e:	50a3      	str	r3, [r4, r2]
 8005890:	e7b3      	b.n	80057fa <_malloc_r+0x22>
 8005892:	6862      	ldr	r2, [r4, #4]
 8005894:	42a3      	cmp	r3, r4
 8005896:	bf0c      	ite	eq
 8005898:	6032      	streq	r2, [r6, #0]
 800589a:	605a      	strne	r2, [r3, #4]
 800589c:	e7ec      	b.n	8005878 <_malloc_r+0xa0>
 800589e:	4623      	mov	r3, r4
 80058a0:	6864      	ldr	r4, [r4, #4]
 80058a2:	e7b2      	b.n	800580a <_malloc_r+0x32>
 80058a4:	4634      	mov	r4, r6
 80058a6:	6876      	ldr	r6, [r6, #4]
 80058a8:	e7b9      	b.n	800581e <_malloc_r+0x46>
 80058aa:	230c      	movs	r3, #12
 80058ac:	603b      	str	r3, [r7, #0]
 80058ae:	4638      	mov	r0, r7
 80058b0:	f000 f84c 	bl	800594c <__malloc_unlock>
 80058b4:	e7a1      	b.n	80057fa <_malloc_r+0x22>
 80058b6:	6025      	str	r5, [r4, #0]
 80058b8:	e7de      	b.n	8005878 <_malloc_r+0xa0>
 80058ba:	bf00      	nop
 80058bc:	20000b70 	.word	0x20000b70

080058c0 <_sbrk_r>:
 80058c0:	b538      	push	{r3, r4, r5, lr}
 80058c2:	4d06      	ldr	r5, [pc, #24]	; (80058dc <_sbrk_r+0x1c>)
 80058c4:	2300      	movs	r3, #0
 80058c6:	4604      	mov	r4, r0
 80058c8:	4608      	mov	r0, r1
 80058ca:	602b      	str	r3, [r5, #0]
 80058cc:	f7fc f920 	bl	8001b10 <_sbrk>
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	d102      	bne.n	80058da <_sbrk_r+0x1a>
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	b103      	cbz	r3, 80058da <_sbrk_r+0x1a>
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	bd38      	pop	{r3, r4, r5, pc}
 80058dc:	20000b78 	.word	0x20000b78

080058e0 <siprintf>:
 80058e0:	b40e      	push	{r1, r2, r3}
 80058e2:	b500      	push	{lr}
 80058e4:	b09c      	sub	sp, #112	; 0x70
 80058e6:	ab1d      	add	r3, sp, #116	; 0x74
 80058e8:	9002      	str	r0, [sp, #8]
 80058ea:	9006      	str	r0, [sp, #24]
 80058ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058f0:	4809      	ldr	r0, [pc, #36]	; (8005918 <siprintf+0x38>)
 80058f2:	9107      	str	r1, [sp, #28]
 80058f4:	9104      	str	r1, [sp, #16]
 80058f6:	4909      	ldr	r1, [pc, #36]	; (800591c <siprintf+0x3c>)
 80058f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80058fc:	9105      	str	r1, [sp, #20]
 80058fe:	6800      	ldr	r0, [r0, #0]
 8005900:	9301      	str	r3, [sp, #4]
 8005902:	a902      	add	r1, sp, #8
 8005904:	f000 f884 	bl	8005a10 <_svfiprintf_r>
 8005908:	9b02      	ldr	r3, [sp, #8]
 800590a:	2200      	movs	r2, #0
 800590c:	701a      	strb	r2, [r3, #0]
 800590e:	b01c      	add	sp, #112	; 0x70
 8005910:	f85d eb04 	ldr.w	lr, [sp], #4
 8005914:	b003      	add	sp, #12
 8005916:	4770      	bx	lr
 8005918:	20000014 	.word	0x20000014
 800591c:	ffff0208 	.word	0xffff0208

08005920 <strcat>:
 8005920:	b510      	push	{r4, lr}
 8005922:	4602      	mov	r2, r0
 8005924:	7814      	ldrb	r4, [r2, #0]
 8005926:	4613      	mov	r3, r2
 8005928:	3201      	adds	r2, #1
 800592a:	2c00      	cmp	r4, #0
 800592c:	d1fa      	bne.n	8005924 <strcat+0x4>
 800592e:	3b01      	subs	r3, #1
 8005930:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005934:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005938:	2a00      	cmp	r2, #0
 800593a:	d1f9      	bne.n	8005930 <strcat+0x10>
 800593c:	bd10      	pop	{r4, pc}
	...

08005940 <__malloc_lock>:
 8005940:	4801      	ldr	r0, [pc, #4]	; (8005948 <__malloc_lock+0x8>)
 8005942:	f000 baf9 	b.w	8005f38 <__retarget_lock_acquire_recursive>
 8005946:	bf00      	nop
 8005948:	20000b7c 	.word	0x20000b7c

0800594c <__malloc_unlock>:
 800594c:	4801      	ldr	r0, [pc, #4]	; (8005954 <__malloc_unlock+0x8>)
 800594e:	f000 baf4 	b.w	8005f3a <__retarget_lock_release_recursive>
 8005952:	bf00      	nop
 8005954:	20000b7c 	.word	0x20000b7c

08005958 <__ssputs_r>:
 8005958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800595c:	688e      	ldr	r6, [r1, #8]
 800595e:	429e      	cmp	r6, r3
 8005960:	4682      	mov	sl, r0
 8005962:	460c      	mov	r4, r1
 8005964:	4690      	mov	r8, r2
 8005966:	461f      	mov	r7, r3
 8005968:	d838      	bhi.n	80059dc <__ssputs_r+0x84>
 800596a:	898a      	ldrh	r2, [r1, #12]
 800596c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005970:	d032      	beq.n	80059d8 <__ssputs_r+0x80>
 8005972:	6825      	ldr	r5, [r4, #0]
 8005974:	6909      	ldr	r1, [r1, #16]
 8005976:	eba5 0901 	sub.w	r9, r5, r1
 800597a:	6965      	ldr	r5, [r4, #20]
 800597c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005980:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005984:	3301      	adds	r3, #1
 8005986:	444b      	add	r3, r9
 8005988:	106d      	asrs	r5, r5, #1
 800598a:	429d      	cmp	r5, r3
 800598c:	bf38      	it	cc
 800598e:	461d      	movcc	r5, r3
 8005990:	0553      	lsls	r3, r2, #21
 8005992:	d531      	bpl.n	80059f8 <__ssputs_r+0xa0>
 8005994:	4629      	mov	r1, r5
 8005996:	f7ff ff1f 	bl	80057d8 <_malloc_r>
 800599a:	4606      	mov	r6, r0
 800599c:	b950      	cbnz	r0, 80059b4 <__ssputs_r+0x5c>
 800599e:	230c      	movs	r3, #12
 80059a0:	f8ca 3000 	str.w	r3, [sl]
 80059a4:	89a3      	ldrh	r3, [r4, #12]
 80059a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059aa:	81a3      	strh	r3, [r4, #12]
 80059ac:	f04f 30ff 	mov.w	r0, #4294967295
 80059b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059b4:	6921      	ldr	r1, [r4, #16]
 80059b6:	464a      	mov	r2, r9
 80059b8:	f7ff fe8c 	bl	80056d4 <memcpy>
 80059bc:	89a3      	ldrh	r3, [r4, #12]
 80059be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059c6:	81a3      	strh	r3, [r4, #12]
 80059c8:	6126      	str	r6, [r4, #16]
 80059ca:	6165      	str	r5, [r4, #20]
 80059cc:	444e      	add	r6, r9
 80059ce:	eba5 0509 	sub.w	r5, r5, r9
 80059d2:	6026      	str	r6, [r4, #0]
 80059d4:	60a5      	str	r5, [r4, #8]
 80059d6:	463e      	mov	r6, r7
 80059d8:	42be      	cmp	r6, r7
 80059da:	d900      	bls.n	80059de <__ssputs_r+0x86>
 80059dc:	463e      	mov	r6, r7
 80059de:	6820      	ldr	r0, [r4, #0]
 80059e0:	4632      	mov	r2, r6
 80059e2:	4641      	mov	r1, r8
 80059e4:	f000 faaa 	bl	8005f3c <memmove>
 80059e8:	68a3      	ldr	r3, [r4, #8]
 80059ea:	1b9b      	subs	r3, r3, r6
 80059ec:	60a3      	str	r3, [r4, #8]
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	4433      	add	r3, r6
 80059f2:	6023      	str	r3, [r4, #0]
 80059f4:	2000      	movs	r0, #0
 80059f6:	e7db      	b.n	80059b0 <__ssputs_r+0x58>
 80059f8:	462a      	mov	r2, r5
 80059fa:	f000 fab9 	bl	8005f70 <_realloc_r>
 80059fe:	4606      	mov	r6, r0
 8005a00:	2800      	cmp	r0, #0
 8005a02:	d1e1      	bne.n	80059c8 <__ssputs_r+0x70>
 8005a04:	6921      	ldr	r1, [r4, #16]
 8005a06:	4650      	mov	r0, sl
 8005a08:	f7ff fe7a 	bl	8005700 <_free_r>
 8005a0c:	e7c7      	b.n	800599e <__ssputs_r+0x46>
	...

08005a10 <_svfiprintf_r>:
 8005a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a14:	4698      	mov	r8, r3
 8005a16:	898b      	ldrh	r3, [r1, #12]
 8005a18:	061b      	lsls	r3, r3, #24
 8005a1a:	b09d      	sub	sp, #116	; 0x74
 8005a1c:	4607      	mov	r7, r0
 8005a1e:	460d      	mov	r5, r1
 8005a20:	4614      	mov	r4, r2
 8005a22:	d50e      	bpl.n	8005a42 <_svfiprintf_r+0x32>
 8005a24:	690b      	ldr	r3, [r1, #16]
 8005a26:	b963      	cbnz	r3, 8005a42 <_svfiprintf_r+0x32>
 8005a28:	2140      	movs	r1, #64	; 0x40
 8005a2a:	f7ff fed5 	bl	80057d8 <_malloc_r>
 8005a2e:	6028      	str	r0, [r5, #0]
 8005a30:	6128      	str	r0, [r5, #16]
 8005a32:	b920      	cbnz	r0, 8005a3e <_svfiprintf_r+0x2e>
 8005a34:	230c      	movs	r3, #12
 8005a36:	603b      	str	r3, [r7, #0]
 8005a38:	f04f 30ff 	mov.w	r0, #4294967295
 8005a3c:	e0d1      	b.n	8005be2 <_svfiprintf_r+0x1d2>
 8005a3e:	2340      	movs	r3, #64	; 0x40
 8005a40:	616b      	str	r3, [r5, #20]
 8005a42:	2300      	movs	r3, #0
 8005a44:	9309      	str	r3, [sp, #36]	; 0x24
 8005a46:	2320      	movs	r3, #32
 8005a48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a50:	2330      	movs	r3, #48	; 0x30
 8005a52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005bfc <_svfiprintf_r+0x1ec>
 8005a56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a5a:	f04f 0901 	mov.w	r9, #1
 8005a5e:	4623      	mov	r3, r4
 8005a60:	469a      	mov	sl, r3
 8005a62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a66:	b10a      	cbz	r2, 8005a6c <_svfiprintf_r+0x5c>
 8005a68:	2a25      	cmp	r2, #37	; 0x25
 8005a6a:	d1f9      	bne.n	8005a60 <_svfiprintf_r+0x50>
 8005a6c:	ebba 0b04 	subs.w	fp, sl, r4
 8005a70:	d00b      	beq.n	8005a8a <_svfiprintf_r+0x7a>
 8005a72:	465b      	mov	r3, fp
 8005a74:	4622      	mov	r2, r4
 8005a76:	4629      	mov	r1, r5
 8005a78:	4638      	mov	r0, r7
 8005a7a:	f7ff ff6d 	bl	8005958 <__ssputs_r>
 8005a7e:	3001      	adds	r0, #1
 8005a80:	f000 80aa 	beq.w	8005bd8 <_svfiprintf_r+0x1c8>
 8005a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a86:	445a      	add	r2, fp
 8005a88:	9209      	str	r2, [sp, #36]	; 0x24
 8005a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 80a2 	beq.w	8005bd8 <_svfiprintf_r+0x1c8>
 8005a94:	2300      	movs	r3, #0
 8005a96:	f04f 32ff 	mov.w	r2, #4294967295
 8005a9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a9e:	f10a 0a01 	add.w	sl, sl, #1
 8005aa2:	9304      	str	r3, [sp, #16]
 8005aa4:	9307      	str	r3, [sp, #28]
 8005aa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005aaa:	931a      	str	r3, [sp, #104]	; 0x68
 8005aac:	4654      	mov	r4, sl
 8005aae:	2205      	movs	r2, #5
 8005ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ab4:	4851      	ldr	r0, [pc, #324]	; (8005bfc <_svfiprintf_r+0x1ec>)
 8005ab6:	f7fa fba3 	bl	8000200 <memchr>
 8005aba:	9a04      	ldr	r2, [sp, #16]
 8005abc:	b9d8      	cbnz	r0, 8005af6 <_svfiprintf_r+0xe6>
 8005abe:	06d0      	lsls	r0, r2, #27
 8005ac0:	bf44      	itt	mi
 8005ac2:	2320      	movmi	r3, #32
 8005ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ac8:	0711      	lsls	r1, r2, #28
 8005aca:	bf44      	itt	mi
 8005acc:	232b      	movmi	r3, #43	; 0x2b
 8005ace:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ad6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ad8:	d015      	beq.n	8005b06 <_svfiprintf_r+0xf6>
 8005ada:	9a07      	ldr	r2, [sp, #28]
 8005adc:	4654      	mov	r4, sl
 8005ade:	2000      	movs	r0, #0
 8005ae0:	f04f 0c0a 	mov.w	ip, #10
 8005ae4:	4621      	mov	r1, r4
 8005ae6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005aea:	3b30      	subs	r3, #48	; 0x30
 8005aec:	2b09      	cmp	r3, #9
 8005aee:	d94e      	bls.n	8005b8e <_svfiprintf_r+0x17e>
 8005af0:	b1b0      	cbz	r0, 8005b20 <_svfiprintf_r+0x110>
 8005af2:	9207      	str	r2, [sp, #28]
 8005af4:	e014      	b.n	8005b20 <_svfiprintf_r+0x110>
 8005af6:	eba0 0308 	sub.w	r3, r0, r8
 8005afa:	fa09 f303 	lsl.w	r3, r9, r3
 8005afe:	4313      	orrs	r3, r2
 8005b00:	9304      	str	r3, [sp, #16]
 8005b02:	46a2      	mov	sl, r4
 8005b04:	e7d2      	b.n	8005aac <_svfiprintf_r+0x9c>
 8005b06:	9b03      	ldr	r3, [sp, #12]
 8005b08:	1d19      	adds	r1, r3, #4
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	9103      	str	r1, [sp, #12]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	bfbb      	ittet	lt
 8005b12:	425b      	neglt	r3, r3
 8005b14:	f042 0202 	orrlt.w	r2, r2, #2
 8005b18:	9307      	strge	r3, [sp, #28]
 8005b1a:	9307      	strlt	r3, [sp, #28]
 8005b1c:	bfb8      	it	lt
 8005b1e:	9204      	strlt	r2, [sp, #16]
 8005b20:	7823      	ldrb	r3, [r4, #0]
 8005b22:	2b2e      	cmp	r3, #46	; 0x2e
 8005b24:	d10c      	bne.n	8005b40 <_svfiprintf_r+0x130>
 8005b26:	7863      	ldrb	r3, [r4, #1]
 8005b28:	2b2a      	cmp	r3, #42	; 0x2a
 8005b2a:	d135      	bne.n	8005b98 <_svfiprintf_r+0x188>
 8005b2c:	9b03      	ldr	r3, [sp, #12]
 8005b2e:	1d1a      	adds	r2, r3, #4
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	9203      	str	r2, [sp, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	bfb8      	it	lt
 8005b38:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b3c:	3402      	adds	r4, #2
 8005b3e:	9305      	str	r3, [sp, #20]
 8005b40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005c0c <_svfiprintf_r+0x1fc>
 8005b44:	7821      	ldrb	r1, [r4, #0]
 8005b46:	2203      	movs	r2, #3
 8005b48:	4650      	mov	r0, sl
 8005b4a:	f7fa fb59 	bl	8000200 <memchr>
 8005b4e:	b140      	cbz	r0, 8005b62 <_svfiprintf_r+0x152>
 8005b50:	2340      	movs	r3, #64	; 0x40
 8005b52:	eba0 000a 	sub.w	r0, r0, sl
 8005b56:	fa03 f000 	lsl.w	r0, r3, r0
 8005b5a:	9b04      	ldr	r3, [sp, #16]
 8005b5c:	4303      	orrs	r3, r0
 8005b5e:	3401      	adds	r4, #1
 8005b60:	9304      	str	r3, [sp, #16]
 8005b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b66:	4826      	ldr	r0, [pc, #152]	; (8005c00 <_svfiprintf_r+0x1f0>)
 8005b68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b6c:	2206      	movs	r2, #6
 8005b6e:	f7fa fb47 	bl	8000200 <memchr>
 8005b72:	2800      	cmp	r0, #0
 8005b74:	d038      	beq.n	8005be8 <_svfiprintf_r+0x1d8>
 8005b76:	4b23      	ldr	r3, [pc, #140]	; (8005c04 <_svfiprintf_r+0x1f4>)
 8005b78:	bb1b      	cbnz	r3, 8005bc2 <_svfiprintf_r+0x1b2>
 8005b7a:	9b03      	ldr	r3, [sp, #12]
 8005b7c:	3307      	adds	r3, #7
 8005b7e:	f023 0307 	bic.w	r3, r3, #7
 8005b82:	3308      	adds	r3, #8
 8005b84:	9303      	str	r3, [sp, #12]
 8005b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b88:	4433      	add	r3, r6
 8005b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b8c:	e767      	b.n	8005a5e <_svfiprintf_r+0x4e>
 8005b8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b92:	460c      	mov	r4, r1
 8005b94:	2001      	movs	r0, #1
 8005b96:	e7a5      	b.n	8005ae4 <_svfiprintf_r+0xd4>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	3401      	adds	r4, #1
 8005b9c:	9305      	str	r3, [sp, #20]
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	f04f 0c0a 	mov.w	ip, #10
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005baa:	3a30      	subs	r2, #48	; 0x30
 8005bac:	2a09      	cmp	r2, #9
 8005bae:	d903      	bls.n	8005bb8 <_svfiprintf_r+0x1a8>
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0c5      	beq.n	8005b40 <_svfiprintf_r+0x130>
 8005bb4:	9105      	str	r1, [sp, #20]
 8005bb6:	e7c3      	b.n	8005b40 <_svfiprintf_r+0x130>
 8005bb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bbc:	4604      	mov	r4, r0
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e7f0      	b.n	8005ba4 <_svfiprintf_r+0x194>
 8005bc2:	ab03      	add	r3, sp, #12
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	462a      	mov	r2, r5
 8005bc8:	4b0f      	ldr	r3, [pc, #60]	; (8005c08 <_svfiprintf_r+0x1f8>)
 8005bca:	a904      	add	r1, sp, #16
 8005bcc:	4638      	mov	r0, r7
 8005bce:	f3af 8000 	nop.w
 8005bd2:	1c42      	adds	r2, r0, #1
 8005bd4:	4606      	mov	r6, r0
 8005bd6:	d1d6      	bne.n	8005b86 <_svfiprintf_r+0x176>
 8005bd8:	89ab      	ldrh	r3, [r5, #12]
 8005bda:	065b      	lsls	r3, r3, #25
 8005bdc:	f53f af2c 	bmi.w	8005a38 <_svfiprintf_r+0x28>
 8005be0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005be2:	b01d      	add	sp, #116	; 0x74
 8005be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be8:	ab03      	add	r3, sp, #12
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	462a      	mov	r2, r5
 8005bee:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <_svfiprintf_r+0x1f8>)
 8005bf0:	a904      	add	r1, sp, #16
 8005bf2:	4638      	mov	r0, r7
 8005bf4:	f000 f87a 	bl	8005cec <_printf_i>
 8005bf8:	e7eb      	b.n	8005bd2 <_svfiprintf_r+0x1c2>
 8005bfa:	bf00      	nop
 8005bfc:	08006a88 	.word	0x08006a88
 8005c00:	08006a92 	.word	0x08006a92
 8005c04:	00000000 	.word	0x00000000
 8005c08:	08005959 	.word	0x08005959
 8005c0c:	08006a8e 	.word	0x08006a8e

08005c10 <_printf_common>:
 8005c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c14:	4616      	mov	r6, r2
 8005c16:	4699      	mov	r9, r3
 8005c18:	688a      	ldr	r2, [r1, #8]
 8005c1a:	690b      	ldr	r3, [r1, #16]
 8005c1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c20:	4293      	cmp	r3, r2
 8005c22:	bfb8      	it	lt
 8005c24:	4613      	movlt	r3, r2
 8005c26:	6033      	str	r3, [r6, #0]
 8005c28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c2c:	4607      	mov	r7, r0
 8005c2e:	460c      	mov	r4, r1
 8005c30:	b10a      	cbz	r2, 8005c36 <_printf_common+0x26>
 8005c32:	3301      	adds	r3, #1
 8005c34:	6033      	str	r3, [r6, #0]
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	0699      	lsls	r1, r3, #26
 8005c3a:	bf42      	ittt	mi
 8005c3c:	6833      	ldrmi	r3, [r6, #0]
 8005c3e:	3302      	addmi	r3, #2
 8005c40:	6033      	strmi	r3, [r6, #0]
 8005c42:	6825      	ldr	r5, [r4, #0]
 8005c44:	f015 0506 	ands.w	r5, r5, #6
 8005c48:	d106      	bne.n	8005c58 <_printf_common+0x48>
 8005c4a:	f104 0a19 	add.w	sl, r4, #25
 8005c4e:	68e3      	ldr	r3, [r4, #12]
 8005c50:	6832      	ldr	r2, [r6, #0]
 8005c52:	1a9b      	subs	r3, r3, r2
 8005c54:	42ab      	cmp	r3, r5
 8005c56:	dc26      	bgt.n	8005ca6 <_printf_common+0x96>
 8005c58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c5c:	1e13      	subs	r3, r2, #0
 8005c5e:	6822      	ldr	r2, [r4, #0]
 8005c60:	bf18      	it	ne
 8005c62:	2301      	movne	r3, #1
 8005c64:	0692      	lsls	r2, r2, #26
 8005c66:	d42b      	bmi.n	8005cc0 <_printf_common+0xb0>
 8005c68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c6c:	4649      	mov	r1, r9
 8005c6e:	4638      	mov	r0, r7
 8005c70:	47c0      	blx	r8
 8005c72:	3001      	adds	r0, #1
 8005c74:	d01e      	beq.n	8005cb4 <_printf_common+0xa4>
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	68e5      	ldr	r5, [r4, #12]
 8005c7a:	6832      	ldr	r2, [r6, #0]
 8005c7c:	f003 0306 	and.w	r3, r3, #6
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	bf08      	it	eq
 8005c84:	1aad      	subeq	r5, r5, r2
 8005c86:	68a3      	ldr	r3, [r4, #8]
 8005c88:	6922      	ldr	r2, [r4, #16]
 8005c8a:	bf0c      	ite	eq
 8005c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c90:	2500      	movne	r5, #0
 8005c92:	4293      	cmp	r3, r2
 8005c94:	bfc4      	itt	gt
 8005c96:	1a9b      	subgt	r3, r3, r2
 8005c98:	18ed      	addgt	r5, r5, r3
 8005c9a:	2600      	movs	r6, #0
 8005c9c:	341a      	adds	r4, #26
 8005c9e:	42b5      	cmp	r5, r6
 8005ca0:	d11a      	bne.n	8005cd8 <_printf_common+0xc8>
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	e008      	b.n	8005cb8 <_printf_common+0xa8>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	4652      	mov	r2, sl
 8005caa:	4649      	mov	r1, r9
 8005cac:	4638      	mov	r0, r7
 8005cae:	47c0      	blx	r8
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d103      	bne.n	8005cbc <_printf_common+0xac>
 8005cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cbc:	3501      	adds	r5, #1
 8005cbe:	e7c6      	b.n	8005c4e <_printf_common+0x3e>
 8005cc0:	18e1      	adds	r1, r4, r3
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	2030      	movs	r0, #48	; 0x30
 8005cc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cca:	4422      	add	r2, r4
 8005ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cd4:	3302      	adds	r3, #2
 8005cd6:	e7c7      	b.n	8005c68 <_printf_common+0x58>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	4622      	mov	r2, r4
 8005cdc:	4649      	mov	r1, r9
 8005cde:	4638      	mov	r0, r7
 8005ce0:	47c0      	blx	r8
 8005ce2:	3001      	adds	r0, #1
 8005ce4:	d0e6      	beq.n	8005cb4 <_printf_common+0xa4>
 8005ce6:	3601      	adds	r6, #1
 8005ce8:	e7d9      	b.n	8005c9e <_printf_common+0x8e>
	...

08005cec <_printf_i>:
 8005cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cf0:	7e0f      	ldrb	r7, [r1, #24]
 8005cf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cf4:	2f78      	cmp	r7, #120	; 0x78
 8005cf6:	4691      	mov	r9, r2
 8005cf8:	4680      	mov	r8, r0
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	469a      	mov	sl, r3
 8005cfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d02:	d807      	bhi.n	8005d14 <_printf_i+0x28>
 8005d04:	2f62      	cmp	r7, #98	; 0x62
 8005d06:	d80a      	bhi.n	8005d1e <_printf_i+0x32>
 8005d08:	2f00      	cmp	r7, #0
 8005d0a:	f000 80d8 	beq.w	8005ebe <_printf_i+0x1d2>
 8005d0e:	2f58      	cmp	r7, #88	; 0x58
 8005d10:	f000 80a3 	beq.w	8005e5a <_printf_i+0x16e>
 8005d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d1c:	e03a      	b.n	8005d94 <_printf_i+0xa8>
 8005d1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d22:	2b15      	cmp	r3, #21
 8005d24:	d8f6      	bhi.n	8005d14 <_printf_i+0x28>
 8005d26:	a101      	add	r1, pc, #4	; (adr r1, 8005d2c <_printf_i+0x40>)
 8005d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d2c:	08005d85 	.word	0x08005d85
 8005d30:	08005d99 	.word	0x08005d99
 8005d34:	08005d15 	.word	0x08005d15
 8005d38:	08005d15 	.word	0x08005d15
 8005d3c:	08005d15 	.word	0x08005d15
 8005d40:	08005d15 	.word	0x08005d15
 8005d44:	08005d99 	.word	0x08005d99
 8005d48:	08005d15 	.word	0x08005d15
 8005d4c:	08005d15 	.word	0x08005d15
 8005d50:	08005d15 	.word	0x08005d15
 8005d54:	08005d15 	.word	0x08005d15
 8005d58:	08005ea5 	.word	0x08005ea5
 8005d5c:	08005dc9 	.word	0x08005dc9
 8005d60:	08005e87 	.word	0x08005e87
 8005d64:	08005d15 	.word	0x08005d15
 8005d68:	08005d15 	.word	0x08005d15
 8005d6c:	08005ec7 	.word	0x08005ec7
 8005d70:	08005d15 	.word	0x08005d15
 8005d74:	08005dc9 	.word	0x08005dc9
 8005d78:	08005d15 	.word	0x08005d15
 8005d7c:	08005d15 	.word	0x08005d15
 8005d80:	08005e8f 	.word	0x08005e8f
 8005d84:	682b      	ldr	r3, [r5, #0]
 8005d86:	1d1a      	adds	r2, r3, #4
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	602a      	str	r2, [r5, #0]
 8005d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d94:	2301      	movs	r3, #1
 8005d96:	e0a3      	b.n	8005ee0 <_printf_i+0x1f4>
 8005d98:	6820      	ldr	r0, [r4, #0]
 8005d9a:	6829      	ldr	r1, [r5, #0]
 8005d9c:	0606      	lsls	r6, r0, #24
 8005d9e:	f101 0304 	add.w	r3, r1, #4
 8005da2:	d50a      	bpl.n	8005dba <_printf_i+0xce>
 8005da4:	680e      	ldr	r6, [r1, #0]
 8005da6:	602b      	str	r3, [r5, #0]
 8005da8:	2e00      	cmp	r6, #0
 8005daa:	da03      	bge.n	8005db4 <_printf_i+0xc8>
 8005dac:	232d      	movs	r3, #45	; 0x2d
 8005dae:	4276      	negs	r6, r6
 8005db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005db4:	485e      	ldr	r0, [pc, #376]	; (8005f30 <_printf_i+0x244>)
 8005db6:	230a      	movs	r3, #10
 8005db8:	e019      	b.n	8005dee <_printf_i+0x102>
 8005dba:	680e      	ldr	r6, [r1, #0]
 8005dbc:	602b      	str	r3, [r5, #0]
 8005dbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005dc2:	bf18      	it	ne
 8005dc4:	b236      	sxthne	r6, r6
 8005dc6:	e7ef      	b.n	8005da8 <_printf_i+0xbc>
 8005dc8:	682b      	ldr	r3, [r5, #0]
 8005dca:	6820      	ldr	r0, [r4, #0]
 8005dcc:	1d19      	adds	r1, r3, #4
 8005dce:	6029      	str	r1, [r5, #0]
 8005dd0:	0601      	lsls	r1, r0, #24
 8005dd2:	d501      	bpl.n	8005dd8 <_printf_i+0xec>
 8005dd4:	681e      	ldr	r6, [r3, #0]
 8005dd6:	e002      	b.n	8005dde <_printf_i+0xf2>
 8005dd8:	0646      	lsls	r6, r0, #25
 8005dda:	d5fb      	bpl.n	8005dd4 <_printf_i+0xe8>
 8005ddc:	881e      	ldrh	r6, [r3, #0]
 8005dde:	4854      	ldr	r0, [pc, #336]	; (8005f30 <_printf_i+0x244>)
 8005de0:	2f6f      	cmp	r7, #111	; 0x6f
 8005de2:	bf0c      	ite	eq
 8005de4:	2308      	moveq	r3, #8
 8005de6:	230a      	movne	r3, #10
 8005de8:	2100      	movs	r1, #0
 8005dea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dee:	6865      	ldr	r5, [r4, #4]
 8005df0:	60a5      	str	r5, [r4, #8]
 8005df2:	2d00      	cmp	r5, #0
 8005df4:	bfa2      	ittt	ge
 8005df6:	6821      	ldrge	r1, [r4, #0]
 8005df8:	f021 0104 	bicge.w	r1, r1, #4
 8005dfc:	6021      	strge	r1, [r4, #0]
 8005dfe:	b90e      	cbnz	r6, 8005e04 <_printf_i+0x118>
 8005e00:	2d00      	cmp	r5, #0
 8005e02:	d04d      	beq.n	8005ea0 <_printf_i+0x1b4>
 8005e04:	4615      	mov	r5, r2
 8005e06:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e0a:	fb03 6711 	mls	r7, r3, r1, r6
 8005e0e:	5dc7      	ldrb	r7, [r0, r7]
 8005e10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e14:	4637      	mov	r7, r6
 8005e16:	42bb      	cmp	r3, r7
 8005e18:	460e      	mov	r6, r1
 8005e1a:	d9f4      	bls.n	8005e06 <_printf_i+0x11a>
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	d10b      	bne.n	8005e38 <_printf_i+0x14c>
 8005e20:	6823      	ldr	r3, [r4, #0]
 8005e22:	07de      	lsls	r6, r3, #31
 8005e24:	d508      	bpl.n	8005e38 <_printf_i+0x14c>
 8005e26:	6923      	ldr	r3, [r4, #16]
 8005e28:	6861      	ldr	r1, [r4, #4]
 8005e2a:	4299      	cmp	r1, r3
 8005e2c:	bfde      	ittt	le
 8005e2e:	2330      	movle	r3, #48	; 0x30
 8005e30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e38:	1b52      	subs	r2, r2, r5
 8005e3a:	6122      	str	r2, [r4, #16]
 8005e3c:	f8cd a000 	str.w	sl, [sp]
 8005e40:	464b      	mov	r3, r9
 8005e42:	aa03      	add	r2, sp, #12
 8005e44:	4621      	mov	r1, r4
 8005e46:	4640      	mov	r0, r8
 8005e48:	f7ff fee2 	bl	8005c10 <_printf_common>
 8005e4c:	3001      	adds	r0, #1
 8005e4e:	d14c      	bne.n	8005eea <_printf_i+0x1fe>
 8005e50:	f04f 30ff 	mov.w	r0, #4294967295
 8005e54:	b004      	add	sp, #16
 8005e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e5a:	4835      	ldr	r0, [pc, #212]	; (8005f30 <_printf_i+0x244>)
 8005e5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e60:	6829      	ldr	r1, [r5, #0]
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e68:	6029      	str	r1, [r5, #0]
 8005e6a:	061d      	lsls	r5, r3, #24
 8005e6c:	d514      	bpl.n	8005e98 <_printf_i+0x1ac>
 8005e6e:	07df      	lsls	r7, r3, #31
 8005e70:	bf44      	itt	mi
 8005e72:	f043 0320 	orrmi.w	r3, r3, #32
 8005e76:	6023      	strmi	r3, [r4, #0]
 8005e78:	b91e      	cbnz	r6, 8005e82 <_printf_i+0x196>
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	f023 0320 	bic.w	r3, r3, #32
 8005e80:	6023      	str	r3, [r4, #0]
 8005e82:	2310      	movs	r3, #16
 8005e84:	e7b0      	b.n	8005de8 <_printf_i+0xfc>
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	f043 0320 	orr.w	r3, r3, #32
 8005e8c:	6023      	str	r3, [r4, #0]
 8005e8e:	2378      	movs	r3, #120	; 0x78
 8005e90:	4828      	ldr	r0, [pc, #160]	; (8005f34 <_printf_i+0x248>)
 8005e92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e96:	e7e3      	b.n	8005e60 <_printf_i+0x174>
 8005e98:	0659      	lsls	r1, r3, #25
 8005e9a:	bf48      	it	mi
 8005e9c:	b2b6      	uxthmi	r6, r6
 8005e9e:	e7e6      	b.n	8005e6e <_printf_i+0x182>
 8005ea0:	4615      	mov	r5, r2
 8005ea2:	e7bb      	b.n	8005e1c <_printf_i+0x130>
 8005ea4:	682b      	ldr	r3, [r5, #0]
 8005ea6:	6826      	ldr	r6, [r4, #0]
 8005ea8:	6961      	ldr	r1, [r4, #20]
 8005eaa:	1d18      	adds	r0, r3, #4
 8005eac:	6028      	str	r0, [r5, #0]
 8005eae:	0635      	lsls	r5, r6, #24
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	d501      	bpl.n	8005eb8 <_printf_i+0x1cc>
 8005eb4:	6019      	str	r1, [r3, #0]
 8005eb6:	e002      	b.n	8005ebe <_printf_i+0x1d2>
 8005eb8:	0670      	lsls	r0, r6, #25
 8005eba:	d5fb      	bpl.n	8005eb4 <_printf_i+0x1c8>
 8005ebc:	8019      	strh	r1, [r3, #0]
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	6123      	str	r3, [r4, #16]
 8005ec2:	4615      	mov	r5, r2
 8005ec4:	e7ba      	b.n	8005e3c <_printf_i+0x150>
 8005ec6:	682b      	ldr	r3, [r5, #0]
 8005ec8:	1d1a      	adds	r2, r3, #4
 8005eca:	602a      	str	r2, [r5, #0]
 8005ecc:	681d      	ldr	r5, [r3, #0]
 8005ece:	6862      	ldr	r2, [r4, #4]
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f7fa f994 	bl	8000200 <memchr>
 8005ed8:	b108      	cbz	r0, 8005ede <_printf_i+0x1f2>
 8005eda:	1b40      	subs	r0, r0, r5
 8005edc:	6060      	str	r0, [r4, #4]
 8005ede:	6863      	ldr	r3, [r4, #4]
 8005ee0:	6123      	str	r3, [r4, #16]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ee8:	e7a8      	b.n	8005e3c <_printf_i+0x150>
 8005eea:	6923      	ldr	r3, [r4, #16]
 8005eec:	462a      	mov	r2, r5
 8005eee:	4649      	mov	r1, r9
 8005ef0:	4640      	mov	r0, r8
 8005ef2:	47d0      	blx	sl
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	d0ab      	beq.n	8005e50 <_printf_i+0x164>
 8005ef8:	6823      	ldr	r3, [r4, #0]
 8005efa:	079b      	lsls	r3, r3, #30
 8005efc:	d413      	bmi.n	8005f26 <_printf_i+0x23a>
 8005efe:	68e0      	ldr	r0, [r4, #12]
 8005f00:	9b03      	ldr	r3, [sp, #12]
 8005f02:	4298      	cmp	r0, r3
 8005f04:	bfb8      	it	lt
 8005f06:	4618      	movlt	r0, r3
 8005f08:	e7a4      	b.n	8005e54 <_printf_i+0x168>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	4632      	mov	r2, r6
 8005f0e:	4649      	mov	r1, r9
 8005f10:	4640      	mov	r0, r8
 8005f12:	47d0      	blx	sl
 8005f14:	3001      	adds	r0, #1
 8005f16:	d09b      	beq.n	8005e50 <_printf_i+0x164>
 8005f18:	3501      	adds	r5, #1
 8005f1a:	68e3      	ldr	r3, [r4, #12]
 8005f1c:	9903      	ldr	r1, [sp, #12]
 8005f1e:	1a5b      	subs	r3, r3, r1
 8005f20:	42ab      	cmp	r3, r5
 8005f22:	dcf2      	bgt.n	8005f0a <_printf_i+0x21e>
 8005f24:	e7eb      	b.n	8005efe <_printf_i+0x212>
 8005f26:	2500      	movs	r5, #0
 8005f28:	f104 0619 	add.w	r6, r4, #25
 8005f2c:	e7f5      	b.n	8005f1a <_printf_i+0x22e>
 8005f2e:	bf00      	nop
 8005f30:	08006a99 	.word	0x08006a99
 8005f34:	08006aaa 	.word	0x08006aaa

08005f38 <__retarget_lock_acquire_recursive>:
 8005f38:	4770      	bx	lr

08005f3a <__retarget_lock_release_recursive>:
 8005f3a:	4770      	bx	lr

08005f3c <memmove>:
 8005f3c:	4288      	cmp	r0, r1
 8005f3e:	b510      	push	{r4, lr}
 8005f40:	eb01 0402 	add.w	r4, r1, r2
 8005f44:	d902      	bls.n	8005f4c <memmove+0x10>
 8005f46:	4284      	cmp	r4, r0
 8005f48:	4623      	mov	r3, r4
 8005f4a:	d807      	bhi.n	8005f5c <memmove+0x20>
 8005f4c:	1e43      	subs	r3, r0, #1
 8005f4e:	42a1      	cmp	r1, r4
 8005f50:	d008      	beq.n	8005f64 <memmove+0x28>
 8005f52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f5a:	e7f8      	b.n	8005f4e <memmove+0x12>
 8005f5c:	4402      	add	r2, r0
 8005f5e:	4601      	mov	r1, r0
 8005f60:	428a      	cmp	r2, r1
 8005f62:	d100      	bne.n	8005f66 <memmove+0x2a>
 8005f64:	bd10      	pop	{r4, pc}
 8005f66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f6e:	e7f7      	b.n	8005f60 <memmove+0x24>

08005f70 <_realloc_r>:
 8005f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f74:	4680      	mov	r8, r0
 8005f76:	4614      	mov	r4, r2
 8005f78:	460e      	mov	r6, r1
 8005f7a:	b921      	cbnz	r1, 8005f86 <_realloc_r+0x16>
 8005f7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f80:	4611      	mov	r1, r2
 8005f82:	f7ff bc29 	b.w	80057d8 <_malloc_r>
 8005f86:	b92a      	cbnz	r2, 8005f94 <_realloc_r+0x24>
 8005f88:	f7ff fbba 	bl	8005700 <_free_r>
 8005f8c:	4625      	mov	r5, r4
 8005f8e:	4628      	mov	r0, r5
 8005f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f94:	f000 f81b 	bl	8005fce <_malloc_usable_size_r>
 8005f98:	4284      	cmp	r4, r0
 8005f9a:	4607      	mov	r7, r0
 8005f9c:	d802      	bhi.n	8005fa4 <_realloc_r+0x34>
 8005f9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005fa2:	d812      	bhi.n	8005fca <_realloc_r+0x5a>
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	f7ff fc16 	bl	80057d8 <_malloc_r>
 8005fac:	4605      	mov	r5, r0
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d0ed      	beq.n	8005f8e <_realloc_r+0x1e>
 8005fb2:	42bc      	cmp	r4, r7
 8005fb4:	4622      	mov	r2, r4
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	bf28      	it	cs
 8005fba:	463a      	movcs	r2, r7
 8005fbc:	f7ff fb8a 	bl	80056d4 <memcpy>
 8005fc0:	4631      	mov	r1, r6
 8005fc2:	4640      	mov	r0, r8
 8005fc4:	f7ff fb9c 	bl	8005700 <_free_r>
 8005fc8:	e7e1      	b.n	8005f8e <_realloc_r+0x1e>
 8005fca:	4635      	mov	r5, r6
 8005fcc:	e7df      	b.n	8005f8e <_realloc_r+0x1e>

08005fce <_malloc_usable_size_r>:
 8005fce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fd2:	1f18      	subs	r0, r3, #4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	bfbc      	itt	lt
 8005fd8:	580b      	ldrlt	r3, [r1, r0]
 8005fda:	18c0      	addlt	r0, r0, r3
 8005fdc:	4770      	bx	lr
	...

08005fe0 <_init>:
 8005fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe2:	bf00      	nop
 8005fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fe6:	bc08      	pop	{r3}
 8005fe8:	469e      	mov	lr, r3
 8005fea:	4770      	bx	lr

08005fec <_fini>:
 8005fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fee:	bf00      	nop
 8005ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff2:	bc08      	pop	{r3}
 8005ff4:	469e      	mov	lr, r3
 8005ff6:	4770      	bx	lr
