/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "i2c-lcd.h"
#include "max_matrix_stm32.h"
#include "keypad_4x4.h"
#include "stdio.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

/* USER CODE BEGIN PV */
char key;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void intToDecimalString(int numd, char *str) {
    if (numd == 0) {
        str[0] = '0';
        str[1] = '\0';
        return;
    }

    int i = 0;
    int isNegative = 0;

    if (numd < 0) {
        isNegative = 1;
        numd = -numd;
    }

    while (numd > 0) {
        str[i++] = numd % 10 + '0';
        numd /= 10;
    }

    if (isNegative) {
        str[i++] = '-';
    }

    str[i] = '\0';

    // Invertir el string
    int start = 0;
    int end = i - 1;
    while (start < end) {
        char temp = str[start];
        str[start] = str[end];
        str[end] = temp;
        start++;
        end--;
    }
}

int stringToInteger(const char *str) {
    int result = 0;
    int sign = 1;
    int i = 0;

    // Ignorar espacios iniciales
    while (str[i] == ' ')
        i++;

    // Verificar el signo
    if (str[i] == '-') {
        sign = -1;
        i++;
    } else if (str[i] == '+') {
        i++;
    }

    // Calcular el valor numérico
    int len = strlen(str);
    for (; i < len; i++) {
        result = result * 10 + (str[i] - '0');
    }

    return sign * result;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  lcd_init();
  max_init(0x02);
  /* lcd_put_cur(0, 1);
         	                    lcd_send_string("Tcl.A   SUMA(+) ");
         	                    lcd_put_cur(1, 4);
         	                    lcd_send_string("+");
         	                     lcd_put_cur(1, 5);
         	                    lcd_send_string("");
         	                    index2 = 0;
         	                    write_char(0b10000000, 1);*/
  scroll_string("Asignacion 1 -- Calculadora   ", 100, left);
           HAL_Delay(500);
           max_clear();

  lcd_put_cur(0, 0);
  lcd_send_string("Angel G. Segura ");
  lcd_put_cur(1, 0);
  lcd_send_string("   2021-0311    ");
HAL_Delay(3000);
while (1) {
        // Declarar variables y arreglos
        char num1[5];
            char num2[5];
            int index1 = 0;
            int index2 = 0;
            int result = 0;
            int input_stage = 1; // Etapa de entrada: 1 para num1, 2 para num2
            int resta = 0;
            int suma = 0;
            int multiplicacion = 0;
            int division = 0;


        // Mostrar mensaje en la pantalla
        lcd_clear();
        lcd_put_cur(0, 0);
        lcd_send_string("Introd. Digitos");
        lcd_put_cur(1, 0);
        lcd_send_string("");

        while (1) {
       	 // Esperar hasta que se presione una tecla en el teclado
       	        char keypad_key = Keypad_Get_Char();

       	        if (keypad_key >= '0' && keypad_key <= '9') {
       	                    if (input_stage == 1 && index1 < 4) {
       	                                        num1[index1++] = keypad_key;
       	                                            lcd_send_data(keypad_key);
       	                                                  } else if (input_stage == 2 && index2 < 4) {
       	                                                     num2[index2++] = keypad_key;
       	                                                       lcd_send_data(keypad_key);}


       	                 // Mostrar el dígito(s) y el signo en la pantalla LCD
       	                 lcd_clear();
       	                 lcd_put_cur(0, 0);
       	                 lcd_send_string("Introd. Digitos");
       	                 lcd_put_cur(1, 0);

       	                 // Concatenar num1, el signo y num2 en una cadena
       	                 char display_str[15];
       	                 if (input_stage == 1) {
       	                     // Mostrar solo el primer dígito de num1
       	                     sprintf(display_str, "%.1s", num1);
       	                 } else if (input_stage == 2) {
       	                     if (suma) {
       	                         // Mostrar el primer dígito de num1, el signo y el primer dígito de num2
       	                         sprintf(display_str, "%.1s + %.1s", num1, num2);
       	                     } else if (resta) {
       	                         // Mostrar el primer dígito de num1, el signo y el primer dígito de num2
       	                         sprintf(display_str, "%.1s - %.1s", num1, num2);
       	                     } else if (multiplicacion) {
       	                         // Mostrar el primer dígito de num1, el signo y el primer dígito de num2
       	                         sprintf(display_str, "%.1s * %.1s", num1, num2);
       	                     } else if (division) {
       	                         // Mostrar el primer dígito de num1, el signo y el primer dígito de num2
       	                         sprintf(display_str, "%.1s / %.1s", num1, num2);
       	                     }
       	                 }
       	             lcd_send_string(display_str);

} else if (keypad_key == 'A') {
       	                    input_stage = 2;
       	                          suma = 1;
       	                             resta = 0;
       	                                multiplicacion = 0;
       	                                   division = 0;

       	                    lcd_clear();
       	                    lcd_put_cur(0, 1);
       	                    lcd_send_string("Tcl.A   SUMA(+) ");
       	                    lcd_put_cur(1, 0);
       	                    lcd_send_string("num2:");
       	                    index2 = 0;
       	                    write_char(0b10000000, 1);


       	                         // Concatenar num1 y num2 en una cadena
       	                         char display_str[10];
       	                         sprintf(display_str, "%s %s", num1, num2);
       	                }else if (keypad_key == 'B') {
       	                	max_clear();
       	                         input_stage = 2;
       	                            suma = 0;
       	                               resta = 1;
       	                                    multiplicacion = 0;
       	                    division = 0;
       	                    lcd_clear();
       	                    lcd_put_cur(0, 1);
       	                    lcd_send_string("Tcl.B  RESTA(-) ");
       	                    lcd_put_cur(1, 0);
       	                    lcd_send_string("num2:");
       	                    index2 = 0;
       	                    write_char(0b10000001, 1);

       	                }else if (keypad_key == 'C') {
       	                	max_clear();
       	                        input_stage = 2;
       	                            suma = 0;
       	                                resta = 0;
       	                                    multiplicacion = 1;
       	                                         division = 0;
       	                    lcd_clear();
       	                    lcd_put_cur(0, 1);
       	                    lcd_send_string("Tcl.C   MULT(x) ");
       	                    lcd_put_cur(1, 0);
       	                    lcd_send_string("num2:");
       	                    index2 = 0;
       	                    write_char(0b10000010, 1);

       	                }else if (keypad_key == 'D') {
       	                	max_clear();
       	                         input_stage = 2;
       	                             suma = 0;
       	                                  resta = 0;
       	                                      multiplicacion = 0;
       	                                            division = 1;
       	                    lcd_clear();
       	                    lcd_put_cur(0, 1);
       	                    lcd_send_string("Tcl.D    DIV(/) ");
       	                    lcd_put_cur(1, 0);
       	                    lcd_send_string("num2:");
       	                    index2 = 0;
       	                    write_char(0b10000011, 1);

       	                } else if (keypad_key == '*') {

       	                  if (input_stage == 1 && index1 > 0) {
       	                      index1--;  // Decrementar el índice de num1 para eliminar el último dígito
       	                      lcd_send_cmd(0x10);  // Mover el cursor a la posición anterior en la pantalla LCD
       	                      lcd_send_data(' ');  // Borrar el dígito anterior en la pantalla LCD
       	                    lcd_send_cmd(0x10);  // Mover el cursor nuevamente a la posición anterior

       	                  } else if (input_stage == 2 && index2 > 0) {
       	                      index2--;  // Decrementar el índice de num2 para eliminar el último dígito
       	                      lcd_send_cmd(0x10);  // Mover el cursor a la posición anterior en la pantalla LCD
       	                      lcd_send_data(' ');  // Borrar el dígito anterior en la pantalla LCD
       	                      lcd_send_cmd(0x10);  // Mover el cursor nuevamente a la posición anterior
       	                  }

       	              }else if (keypad_key == '#') {
       	                	max_clear();
       	                    num1[index1] = '\0';
       	                    num2[index2] = '\0';

       	                    int num1_decimal = stringToInteger(num1);
       	                    int num2_decimal = stringToInteger(num2);
       	                    if(suma == 1)
       	                    {
       	                    	                             result = num1_decimal + num2_decimal;

       	                    } else if(resta == 1)
       	                    {
       	                    	                              result = num1_decimal - num2_decimal;
       	                    	max_clear();
       	                    } else if ( multiplicacion == 1 )
       	                    {
       	                    	                              result = num1_decimal * num2_decimal;


       	                    } else if ( division == 1 )
       	                    {
       	                    	                              result = num1_decimal / num2_decimal;

       	                    }
       	                    char result_str[20];
       	                    intToDecimalString(result, result_str);

       	                    lcd_clear();
       	                    lcd_put_cur(0, 0);
       	                    lcd_send_string("Resultado:");
       	                    lcd_put_cur(1, 0);
       	                    lcd_send_string(result_str);
       	                    HAL_Delay(5000);
       	                    lcd_clear();

       	                    index1 = 0;
       	                    index2 = 0;
       	                    input_stage = 1;

       	                 break;
       	                       }
       	                     }





    /* USER CODE END WHILE */
// scroll_string ((uint8_t *) "Calculadora -- Asignacion 1   "  , 80, left);
		 //max_clear();
    /* USER CODE BEGIN 3 */
	 /* key = Keypad_Get_Char();
	 	 if (key !=0){
	 		for (int i = 0; i < 1; i++) {
	 			 	   	  		}
	 		 lcd_enviar("key:  ", 1, 0);
	 		 lcd_send_string(&key);

	 		 if (key == 'D'){
	 			 lcd_clear();
	 			lcd_enviar("--CALCULADORA--", 0, 0);
	 		lcd_enviar("key:  ", 1, 0);
	 		 }
	 	 }*/
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R2_Pin|GPIO_PIN_14|GPIO_PIN_15|R3_Pin
                         |R4_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : R2_Pin PB14 PB15 R3_Pin
                           R4_Pin PB6 */
  GPIO_InitStruct.Pin = R2_Pin|GPIO_PIN_14|GPIO_PIN_15|R3_Pin
                          |R4_Pin|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : C4_Pin */
  GPIO_InitStruct.Pin = C4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(C4_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : R1_Pin */
  GPIO_InitStruct.Pin = R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(R1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : C3_Pin C2_Pin */
  GPIO_InitStruct.Pin = C3_Pin|C2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : C1_Pin */
  GPIO_InitStruct.Pin = C1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(C1_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
