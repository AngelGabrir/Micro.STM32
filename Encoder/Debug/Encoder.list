
Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005190  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005320  08005320  00015320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005390  08005390  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005390  08005390  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005390  08005390  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005390  08005390  00015390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005394  08005394  00015394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  20000070  08005408  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  08005408  000204a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e38  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023c6  00000000  00000000  00030ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  000332a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d78  00000000  00000000  00034100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c950  00000000  00000000  00034e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c47  00000000  00000000  000517c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a87cd  00000000  00000000  0006340f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010bbdc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fe8  00000000  00000000  0010bc2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005308 	.word	0x08005308

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005308 	.word	0x08005308

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <button>:
int16_t count = 0;
int16_t Position_time = 0;
int16_t Position_volt = 0;
uint8_t raw = 0;
uint8_t toggle_flag = 0; // Inicialmente en Position_volt
void button() {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0

	if (HAL_GPIO_ReadPin(Toggle_GPIO_Port, Toggle_Pin)) { // Comprobar si el bot칩n est치 pulsado
 8000284:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000288:	4807      	ldr	r0, [pc, #28]	; (80002a8 <button+0x28>)
 800028a:	f001 fd25 	bl	8001cd8 <HAL_GPIO_ReadPin>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d007      	beq.n	80002a4 <button+0x24>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000294:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000298:	4804      	ldr	r0, [pc, #16]	; (80002ac <button+0x2c>)
 800029a:	f001 fd4d 	bl	8001d38 <HAL_GPIO_TogglePin>
		HAL_Delay(10);
 800029e:	200a      	movs	r0, #10
 80002a0:	f000 ffaa 	bl	80011f8 <HAL_Delay>
	}
}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	48000800 	.word	0x48000800
 80002ac:	48000400 	.word	0x48000400

080002b0 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002be:	4a13      	ldr	r2, [pc, #76]	; (800030c <HAL_TIM_IC_CaptureCallback+0x5c>)
 80002c0:	6013      	str	r3, [r2, #0]

	count = (int16_t) counter;
 80002c2:	4b12      	ldr	r3, [pc, #72]	; (800030c <HAL_TIM_IC_CaptureCallback+0x5c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	b21a      	sxth	r2, r3
 80002c8:	4b11      	ldr	r3, [pc, #68]	; (8000310 <HAL_TIM_IC_CaptureCallback+0x60>)
 80002ca:	801a      	strh	r2, [r3, #0]
	if (toggle_flag == 0) {
 80002cc:	4b11      	ldr	r3, [pc, #68]	; (8000314 <HAL_TIM_IC_CaptureCallback+0x64>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d10a      	bne.n	80002ea <HAL_TIM_IC_CaptureCallback+0x3a>
		Position_volt = count / 4;
 80002d4:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <HAL_TIM_IC_CaptureCallback+0x60>)
 80002d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	da00      	bge.n	80002e0 <HAL_TIM_IC_CaptureCallback+0x30>
 80002de:	3303      	adds	r3, #3
 80002e0:	109b      	asrs	r3, r3, #2
 80002e2:	b21a      	sxth	r2, r3
 80002e4:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <HAL_TIM_IC_CaptureCallback+0x68>)
 80002e6:	801a      	strh	r2, [r3, #0]
 80002e8:	e009      	b.n	80002fe <HAL_TIM_IC_CaptureCallback+0x4e>
	} else {
		Position_time = count / 4;
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <HAL_TIM_IC_CaptureCallback+0x60>)
 80002ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	da00      	bge.n	80002f6 <HAL_TIM_IC_CaptureCallback+0x46>
 80002f4:	3303      	adds	r3, #3
 80002f6:	109b      	asrs	r3, r3, #2
 80002f8:	b21a      	sxth	r2, r3
 80002fa:	4b08      	ldr	r3, [pc, #32]	; (800031c <HAL_TIM_IC_CaptureCallback+0x6c>)
 80002fc:	801a      	strh	r2, [r3, #0]
	}

	button(); // Llamar a la funci칩n para manejar el bot칩n
 80002fe:	f7ff ffbf 	bl	8000280 <button>
}
 8000302:	bf00      	nop
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	200003e4 	.word	0x200003e4
 8000310:	200003e8 	.word	0x200003e8
 8000314:	200003ee 	.word	0x200003ee
 8000318:	200003ec 	.word	0x200003ec
 800031c:	200003ea 	.word	0x200003ea

08000320 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM15) {
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a0f      	ldr	r2, [pc, #60]	; (800036c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d115      	bne.n	800035e <HAL_TIM_PeriodElapsedCallback+0x3e>
		 contador = -9;
		 incremento = 1;
		 }*/

		// sine_val = contador;
		if (contador == 0) {
 8000332:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d103      	bne.n	8000344 <HAL_TIM_PeriodElapsedCallback+0x24>

			contador = 9;
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800033e:	2209      	movs	r2, #9
 8000340:	801a      	strh	r2, [r3, #0]
 8000342:	e007      	b.n	8000354 <HAL_TIM_PeriodElapsedCallback+0x34>

		} else if (contador == 9) {
 8000344:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800034a:	2b09      	cmp	r3, #9
 800034c:	d102      	bne.n	8000354 <HAL_TIM_PeriodElapsedCallback+0x34>

			contador = 0;
 800034e:	4b08      	ldr	r3, [pc, #32]	; (8000370 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000350:	2200      	movs	r2, #0
 8000352:	801a      	strh	r2, [r3, #0]

		}
		sine_val = contador;
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000356:	f9b3 2000 	ldrsh.w	r2, [r3]
 800035a:	4b06      	ldr	r3, [pc, #24]	; (8000374 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800035c:	801a      	strh	r2, [r3, #0]
	}
}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40014000 	.word	0x40014000
 8000370:	20000314 	.word	0x20000314
 8000374:	200003e0 	.word	0x200003e0

08000378 <calcsin>:

void calcsin() {
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
	 }

	 sine_val = contador;
	 }
	 */
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
	...

08000388 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800038e:	f000 fecd 	bl	800112c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000392:	f000 f96b 	bl	800066c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000396:	f000 fae1 	bl	800095c <MX_GPIO_Init>
	MX_DMA_Init();
 800039a:	f000 fac1 	bl	8000920 <MX_DMA_Init>
	MX_USART2_UART_Init();
 800039e:	f000 fa8f 	bl	80008c0 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 80003a2:	f000 f9e9 	bl	8000778 <MX_TIM2_Init>
	MX_DAC_Init();
 80003a6:	f000 f9bd 	bl	8000724 <MX_DAC_Init>
	MX_TIM15_Init();
 80003aa:	f000 fa39 	bl	8000820 <MX_TIM15_Init>
	/* USER CODE BEGIN 2 */
	max_init(0x02);
 80003ae:	2002      	movs	r0, #2
 80003b0:	f000 fc9c 	bl	8000cec <max_init>
	//HAL_TIM_Base_Start_IT(&htim1);
	HAL_TIM_Base_Start_IT(&htim15);
 80003b4:	48a3      	ldr	r0, [pc, #652]	; (8000644 <main+0x2bc>)
 80003b6:	f003 f983 	bl	80036c0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80003ba:	213c      	movs	r1, #60	; 0x3c
 80003bc:	48a2      	ldr	r0, [pc, #648]	; (8000648 <main+0x2c0>)
 80003be:	f003 fa79 	bl	80038b4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Base_Start(&htim15);
 80003c2:	48a0      	ldr	r0, [pc, #640]	; (8000644 <main+0x2bc>)
 80003c4:	f003 f930 	bl	8003628 <HAL_TIM_Base_Start>
	calcsin();
 80003c8:	f7ff ffd6 	bl	8000378 <calcsin>
	button();
 80003cc:	f7ff ff58 	bl	8000280 <button>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) sine_vall, 100,
 80003d0:	2300      	movs	r3, #0
 80003d2:	9300      	str	r3, [sp, #0]
 80003d4:	2364      	movs	r3, #100	; 0x64
 80003d6:	4a9d      	ldr	r2, [pc, #628]	; (800064c <main+0x2c4>)
 80003d8:	2100      	movs	r1, #0
 80003da:	489d      	ldr	r0, [pc, #628]	; (8000650 <main+0x2c8>)
 80003dc:	f001 f882 	bl	80014e4 <HAL_DAC_Start_DMA>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		button();
 80003e0:	f7ff ff4e 	bl	8000280 <button>
		{
			sprintf(val, "%u\n", count);
 80003e4:	4b9b      	ldr	r3, [pc, #620]	; (8000654 <main+0x2cc>)
 80003e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003ea:	461a      	mov	r2, r3
 80003ec:	499a      	ldr	r1, [pc, #616]	; (8000658 <main+0x2d0>)
 80003ee:	489b      	ldr	r0, [pc, #620]	; (800065c <main+0x2d4>)
 80003f0:	f004 fb1c 	bl	8004a2c <siprintf>
			uint8_t len = strlen(val);
 80003f4:	4899      	ldr	r0, [pc, #612]	; (800065c <main+0x2d4>)
 80003f6:	f7ff feeb 	bl	80001d0 <strlen>
 80003fa:	4603      	mov	r3, r0
 80003fc:	71fb      	strb	r3, [r7, #7]
			HAL_UART_Transmit(&huart2, (uint8_t*) val, len, 100);
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	b29a      	uxth	r2, r3
 8000402:	2364      	movs	r3, #100	; 0x64
 8000404:	4995      	ldr	r1, [pc, #596]	; (800065c <main+0x2d4>)
 8000406:	4896      	ldr	r0, [pc, #600]	; (8000660 <main+0x2d8>)
 8000408:	f003 ff08 	bl	800421c <HAL_UART_Transmit>

			if (count >= 250 && count <= 720) {
 800040c:	4b91      	ldr	r3, [pc, #580]	; (8000654 <main+0x2cc>)
 800040e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000412:	2bf9      	cmp	r3, #249	; 0xf9
 8000414:	dd0c      	ble.n	8000430 <main+0xa8>
 8000416:	4b8f      	ldr	r3, [pc, #572]	; (8000654 <main+0x2cc>)
 8000418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800041c:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8000420:	dc06      	bgt.n	8000430 <main+0xa8>

				matris_on[0][wave] = 1;
 8000422:	4b90      	ldr	r3, [pc, #576]	; (8000664 <main+0x2dc>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a90      	ldr	r2, [pc, #576]	; (8000668 <main+0x2e0>)
 8000428:	2101      	movs	r1, #1
 800042a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800042e:	e005      	b.n	800043c <main+0xb4>
			}

			else {

				matris_on[0][wave] = 0;
 8000430:	4b8c      	ldr	r3, [pc, #560]	; (8000664 <main+0x2dc>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a8c      	ldr	r2, [pc, #560]	; (8000668 <main+0x2e0>)
 8000436:	2100      	movs	r1, #0
 8000438:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			if (count >= 720 && count <= 1260) {
 800043c:	4b85      	ldr	r3, [pc, #532]	; (8000654 <main+0x2cc>)
 800043e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000442:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8000446:	db0e      	blt.n	8000466 <main+0xde>
 8000448:	4b82      	ldr	r3, [pc, #520]	; (8000654 <main+0x2cc>)
 800044a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800044e:	f240 42ec 	movw	r2, #1260	; 0x4ec
 8000452:	4293      	cmp	r3, r2
 8000454:	dc07      	bgt.n	8000466 <main+0xde>

				matris_on[1][wave] = 1;
 8000456:	4b83      	ldr	r3, [pc, #524]	; (8000664 <main+0x2dc>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a83      	ldr	r2, [pc, #524]	; (8000668 <main+0x2e0>)
 800045c:	3308      	adds	r3, #8
 800045e:	2101      	movs	r1, #1
 8000460:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000464:	e006      	b.n	8000474 <main+0xec>
			}

			else {

				matris_on[1][wave] = 0;
 8000466:	4b7f      	ldr	r3, [pc, #508]	; (8000664 <main+0x2dc>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a7f      	ldr	r2, [pc, #508]	; (8000668 <main+0x2e0>)
 800046c:	3308      	adds	r3, #8
 800046e:	2100      	movs	r1, #0
 8000470:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			if (count >= 1260 && count <= 1780) {
 8000474:	4b77      	ldr	r3, [pc, #476]	; (8000654 <main+0x2cc>)
 8000476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800047a:	f240 42eb 	movw	r2, #1259	; 0x4eb
 800047e:	4293      	cmp	r3, r2
 8000480:	dd0e      	ble.n	80004a0 <main+0x118>
 8000482:	4b74      	ldr	r3, [pc, #464]	; (8000654 <main+0x2cc>)
 8000484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000488:	f240 62f4 	movw	r2, #1780	; 0x6f4
 800048c:	4293      	cmp	r3, r2
 800048e:	dc07      	bgt.n	80004a0 <main+0x118>

				matris_on[2][wave] = 1;
 8000490:	4b74      	ldr	r3, [pc, #464]	; (8000664 <main+0x2dc>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a74      	ldr	r2, [pc, #464]	; (8000668 <main+0x2e0>)
 8000496:	3310      	adds	r3, #16
 8000498:	2101      	movs	r1, #1
 800049a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800049e:	e006      	b.n	80004ae <main+0x126>
			}

			else {

				matris_on[2][wave] = 0;
 80004a0:	4b70      	ldr	r3, [pc, #448]	; (8000664 <main+0x2dc>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a70      	ldr	r2, [pc, #448]	; (8000668 <main+0x2e0>)
 80004a6:	3310      	adds	r3, #16
 80004a8:	2100      	movs	r1, #0
 80004aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			if (count >= 1780 && count <= 2280) {
 80004ae:	4b69      	ldr	r3, [pc, #420]	; (8000654 <main+0x2cc>)
 80004b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004b4:	f240 62f3 	movw	r2, #1779	; 0x6f3
 80004b8:	4293      	cmp	r3, r2
 80004ba:	dd0e      	ble.n	80004da <main+0x152>
 80004bc:	4b65      	ldr	r3, [pc, #404]	; (8000654 <main+0x2cc>)
 80004be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004c2:	f640 02e8 	movw	r2, #2280	; 0x8e8
 80004c6:	4293      	cmp	r3, r2
 80004c8:	dc07      	bgt.n	80004da <main+0x152>

				matris_on[3][wave] = 1;
 80004ca:	4b66      	ldr	r3, [pc, #408]	; (8000664 <main+0x2dc>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a66      	ldr	r2, [pc, #408]	; (8000668 <main+0x2e0>)
 80004d0:	3318      	adds	r3, #24
 80004d2:	2101      	movs	r1, #1
 80004d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80004d8:	e006      	b.n	80004e8 <main+0x160>
			}

			else {

				matris_on[3][wave] = 0;
 80004da:	4b62      	ldr	r3, [pc, #392]	; (8000664 <main+0x2dc>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a62      	ldr	r2, [pc, #392]	; (8000668 <main+0x2e0>)
 80004e0:	3318      	adds	r3, #24
 80004e2:	2100      	movs	r1, #0
 80004e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			if (count >= 2280 && count <= 2780) {
 80004e8:	4b5a      	ldr	r3, [pc, #360]	; (8000654 <main+0x2cc>)
 80004ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004ee:	f640 02e7 	movw	r2, #2279	; 0x8e7
 80004f2:	4293      	cmp	r3, r2
 80004f4:	dd0e      	ble.n	8000514 <main+0x18c>
 80004f6:	4b57      	ldr	r3, [pc, #348]	; (8000654 <main+0x2cc>)
 80004f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004fc:	f640 22dc 	movw	r2, #2780	; 0xadc
 8000500:	4293      	cmp	r3, r2
 8000502:	dc07      	bgt.n	8000514 <main+0x18c>

				matris_on[4][wave] = 1;
 8000504:	4b57      	ldr	r3, [pc, #348]	; (8000664 <main+0x2dc>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a57      	ldr	r2, [pc, #348]	; (8000668 <main+0x2e0>)
 800050a:	3320      	adds	r3, #32
 800050c:	2101      	movs	r1, #1
 800050e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000512:	e006      	b.n	8000522 <main+0x19a>
			}

			else {

				matris_on[4][wave] = 0;
 8000514:	4b53      	ldr	r3, [pc, #332]	; (8000664 <main+0x2dc>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a53      	ldr	r2, [pc, #332]	; (8000668 <main+0x2e0>)
 800051a:	3320      	adds	r3, #32
 800051c:	2100      	movs	r1, #0
 800051e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			if (count >= 2780 && count <= 3280) {
 8000522:	4b4c      	ldr	r3, [pc, #304]	; (8000654 <main+0x2cc>)
 8000524:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000528:	f640 22db 	movw	r2, #2779	; 0xadb
 800052c:	4293      	cmp	r3, r2
 800052e:	dd0d      	ble.n	800054c <main+0x1c4>
 8000530:	4b48      	ldr	r3, [pc, #288]	; (8000654 <main+0x2cc>)
 8000532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000536:	f5b3 6f4d 	cmp.w	r3, #3280	; 0xcd0
 800053a:	dc07      	bgt.n	800054c <main+0x1c4>

				matris_on[5][wave] = 1;
 800053c:	4b49      	ldr	r3, [pc, #292]	; (8000664 <main+0x2dc>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a49      	ldr	r2, [pc, #292]	; (8000668 <main+0x2e0>)
 8000542:	3328      	adds	r3, #40	; 0x28
 8000544:	2101      	movs	r1, #1
 8000546:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800054a:	e006      	b.n	800055a <main+0x1d2>
			}

			else {

				matris_on[5][wave] = 0;
 800054c:	4b45      	ldr	r3, [pc, #276]	; (8000664 <main+0x2dc>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a45      	ldr	r2, [pc, #276]	; (8000668 <main+0x2e0>)
 8000552:	3328      	adds	r3, #40	; 0x28
 8000554:	2100      	movs	r1, #0
 8000556:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			if (count >= 3280 && count <= 3780) {
 800055a:	4b3e      	ldr	r3, [pc, #248]	; (8000654 <main+0x2cc>)
 800055c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000560:	f5b3 6f4d 	cmp.w	r3, #3280	; 0xcd0
 8000564:	db0e      	blt.n	8000584 <main+0x1fc>
 8000566:	4b3b      	ldr	r3, [pc, #236]	; (8000654 <main+0x2cc>)
 8000568:	f9b3 3000 	ldrsh.w	r3, [r3]
 800056c:	f640 62c4 	movw	r2, #3780	; 0xec4
 8000570:	4293      	cmp	r3, r2
 8000572:	dc07      	bgt.n	8000584 <main+0x1fc>

				matris_on[6][wave] = 1;
 8000574:	4b3b      	ldr	r3, [pc, #236]	; (8000664 <main+0x2dc>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a3b      	ldr	r2, [pc, #236]	; (8000668 <main+0x2e0>)
 800057a:	3330      	adds	r3, #48	; 0x30
 800057c:	2101      	movs	r1, #1
 800057e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000582:	e006      	b.n	8000592 <main+0x20a>
			}

			else {

				matris_on[6][wave] = 0;
 8000584:	4b37      	ldr	r3, [pc, #220]	; (8000664 <main+0x2dc>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a37      	ldr	r2, [pc, #220]	; (8000668 <main+0x2e0>)
 800058a:	3330      	adds	r3, #48	; 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			if (count >= 3780 && count <= 4000) {
 8000592:	4b30      	ldr	r3, [pc, #192]	; (8000654 <main+0x2cc>)
 8000594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000598:	f640 62c3 	movw	r2, #3779	; 0xec3
 800059c:	4293      	cmp	r3, r2
 800059e:	dd0d      	ble.n	80005bc <main+0x234>
 80005a0:	4b2c      	ldr	r3, [pc, #176]	; (8000654 <main+0x2cc>)
 80005a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005a6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80005aa:	dc07      	bgt.n	80005bc <main+0x234>

				matris_on[7][wave] = 1;
 80005ac:	4b2d      	ldr	r3, [pc, #180]	; (8000664 <main+0x2dc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a2d      	ldr	r2, [pc, #180]	; (8000668 <main+0x2e0>)
 80005b2:	3338      	adds	r3, #56	; 0x38
 80005b4:	2101      	movs	r1, #1
 80005b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80005ba:	e006      	b.n	80005ca <main+0x242>
			}

			else {

				matris_on[7][wave] = 0;
 80005bc:	4b29      	ldr	r3, [pc, #164]	; (8000664 <main+0x2dc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a29      	ldr	r2, [pc, #164]	; (8000668 <main+0x2e0>)
 80005c2:	3338      	adds	r3, #56	; 0x38
 80005c4:	2100      	movs	r1, #0
 80005c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}

			for (int z = 0; z < 8; z++) {
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	e025      	b.n	800061c <main+0x294>

				for (int i = 0; i < 8; i++) {
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	e01c      	b.n	8000610 <main+0x288>

					if (matris_on[i][z] == 1) {
 80005d6:	4924      	ldr	r1, [pc, #144]	; (8000668 <main+0x2e0>)
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	00da      	lsls	r2, r3, #3
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d108      	bne.n	80005fa <main+0x272>

						setled(i, z, 1);
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	68fa      	ldr	r2, [r7, #12]
 80005ee:	b2d1      	uxtb	r1, r2
 80005f0:	2201      	movs	r2, #1
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fa8e 	bl	8000b14 <setled>
 80005f8:	e007      	b.n	800060a <main+0x282>

					} else {
						setled(i, z, 0);
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	b2d1      	uxtb	r1, r2
 8000602:	2200      	movs	r2, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fa85 	bl	8000b14 <setled>
				for (int i = 0; i < 8; i++) {
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	3301      	adds	r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	2b07      	cmp	r3, #7
 8000614:	dddf      	ble.n	80005d6 <main+0x24e>
			for (int z = 0; z < 8; z++) {
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	3301      	adds	r3, #1
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	2b07      	cmp	r3, #7
 8000620:	ddd6      	ble.n	80005d0 <main+0x248>
					}

				}
			}

			wave++;
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <main+0x2dc>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	3301      	adds	r3, #1
 8000628:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <main+0x2dc>)
 800062a:	6013      	str	r3, [r2, #0]
			HAL_Delay(30);
 800062c:	201e      	movs	r0, #30
 800062e:	f000 fde3 	bl	80011f8 <HAL_Delay>
			if (wave > 7) {
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <main+0x2dc>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2b07      	cmp	r3, #7
 8000638:	f77f aed2 	ble.w	80003e0 <main+0x58>

				wave = 0;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <main+0x2dc>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
		button();
 8000642:	e6cd      	b.n	80003e0 <main+0x58>
 8000644:	20000130 	.word	0x20000130
 8000648:	200000e4 	.word	0x200000e4
 800064c:	20000318 	.word	0x20000318
 8000650:	2000008c 	.word	0x2000008c
 8000654:	200003e8 	.word	0x200003e8
 8000658:	08005320 	.word	0x08005320
 800065c:	20000204 	.word	0x20000204
 8000660:	2000017c 	.word	0x2000017c
 8000664:	20000310 	.word	0x20000310
 8000668:	20000210 	.word	0x20000210

0800066c <SystemClock_Config>:

	/**
	 * @brief System Clock Configuration
	 * @retval None
	 */
	void SystemClock_Config(void) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b09c      	sub	sp, #112	; 0x70
 8000670:	af00      	add	r7, sp, #0
		RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000672:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000676:	2228      	movs	r2, #40	; 0x28
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f004 f9ce 	bl	8004a1c <memset>
		RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000680:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
		RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000690:	463b      	mov	r3, r7
 8000692:	2234      	movs	r2, #52	; 0x34
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f004 f9c0 	bl	8004a1c <memset>

		/** Initializes the RCC Oscillators according to the specified parameters
		 * in the RCC_OscInitTypeDef structure.
		 */
		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069c:	2301      	movs	r3, #1
 800069e:	64bb      	str	r3, [r7, #72]	; 0x48
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a4:	64fb      	str	r3, [r7, #76]	; 0x4c
		RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	653b      	str	r3, [r7, #80]	; 0x50
		RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006aa:	2301      	movs	r3, #1
 80006ac:	65bb      	str	r3, [r7, #88]	; 0x58
		RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	667b      	str	r3, [r7, #100]	; 0x64
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b6:	66bb      	str	r3, [r7, #104]	; 0x68
		RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006bc:	66fb      	str	r3, [r7, #108]	; 0x6c
		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 fb52 	bl	8001d6c <HAL_RCC_OscConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x66>
			Error_Handler();
 80006ce:	f000 f9bb 	bl	8000a48 <Error_Handler>
		}

		/** Initializes the CPU, AHB and APB buses clocks
		 */
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006d2:	230f      	movs	r3, #15
 80006d4:	637b      	str	r3, [r7, #52]	; 0x34
				| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d6:	2302      	movs	r3, #2
 80006d8:	63bb      	str	r3, [r7, #56]	; 0x38
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e2:	643b      	str	r3, [r7, #64]	; 0x40
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	647b      	str	r3, [r7, #68]	; 0x44

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)
 80006e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006ec:	2102      	movs	r1, #2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 fb7a 	bl	8002de8 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x92>
				!= HAL_OK) {
			Error_Handler();
 80006fa:	f000 f9a5 	bl	8000a48 <Error_Handler>
		}
		PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15;
 80006fe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000702:	603b      	str	r3, [r7, #0]
		PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8000704:	2300      	movs	r3, #0
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000708:	463b      	mov	r3, r7
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fda2 	bl	8003254 <HAL_RCCEx_PeriphCLKConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xae>
			Error_Handler();
 8000716:	f000 f997 	bl	8000a48 <Error_Handler>
		}
	}
 800071a:	bf00      	nop
 800071c:	3770      	adds	r7, #112	; 0x70
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <MX_DAC_Init>:
	/**
	 * @brief DAC Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_DAC_Init(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN DAC_Init 0 */

		/* USER CODE END DAC_Init 0 */

		DAC_ChannelConfTypeDef sConfig = { 0 };
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]

		/* USER CODE END DAC_Init 1 */

		/** DAC Initialization
		 */
		hdac.Instance = DAC;
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_DAC_Init+0x4c>)
 8000736:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <MX_DAC_Init+0x50>)
 8000738:	601a      	str	r2, [r3, #0]
		if (HAL_DAC_Init(&hdac) != HAL_OK) {
 800073a:	480d      	ldr	r0, [pc, #52]	; (8000770 <MX_DAC_Init+0x4c>)
 800073c:	f000 fe91 	bl	8001462 <HAL_DAC_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_DAC_Init+0x26>
			Error_Handler();
 8000746:	f000 f97f 	bl	8000a48 <Error_Handler>
		}

		/** DAC channel OUT1 config
		 */
		sConfig.DAC_Trigger = DAC_TRIGGER_T15_TRGO;
 800074a:	231c      	movs	r3, #28
 800074c:	607b      	str	r3, [r7, #4]
		sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
		if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	4619      	mov	r1, r3
 8000758:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_DAC_Init+0x4c>)
 800075a:	f000 ff31 	bl	80015c0 <HAL_DAC_ConfigChannel>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_DAC_Init+0x44>
			Error_Handler();
 8000764:	f000 f970 	bl	8000a48 <Error_Handler>
		}
		/* USER CODE BEGIN DAC_Init 2 */

		/* USER CODE END DAC_Init 2 */

	}
 8000768:	bf00      	nop
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	2000008c 	.word	0x2000008c
 8000774:	40007400 	.word	0x40007400

08000778 <MX_TIM2_Init>:
	/**
	 * @brief TIM2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM2_Init(void) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b08c      	sub	sp, #48	; 0x30
 800077c:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM2_Init 0 */

		/* USER CODE END TIM2_Init 0 */

		TIM_Encoder_InitTypeDef sConfig = { 0 };
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2224      	movs	r2, #36	; 0x24
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f004 f948 	bl	8004a1c <memset>
		TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800078c:	463b      	mov	r3, r7
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]

		/* USER CODE BEGIN TIM2_Init 1 */

		/* USER CODE END TIM2_Init 1 */
		htim2.Instance = TIM2;
 8000796:	4b21      	ldr	r3, [pc, #132]	; (800081c <MX_TIM2_Init+0xa4>)
 8000798:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800079c:	601a      	str	r2, [r3, #0]
		htim2.Init.Prescaler = 0;
 800079e:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_TIM2_Init+0xa4>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
		htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <MX_TIM2_Init+0xa4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
		htim2.Init.Period = 65535;
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <MX_TIM2_Init+0xa4>)
 80007ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007b0:	60da      	str	r2, [r3, #12]
		htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_TIM2_Init+0xa4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
		htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_TIM2_Init+0xa4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
		sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80007be:	2303      	movs	r3, #3
 80007c0:	60fb      	str	r3, [r7, #12]
		sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80007c2:	2302      	movs	r3, #2
 80007c4:	613b      	str	r3, [r7, #16]
		sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007c6:	2301      	movs	r3, #1
 80007c8:	617b      	str	r3, [r7, #20]
		sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
		sConfig.IC1Filter = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
		sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80007d2:	2302      	movs	r3, #2
 80007d4:	623b      	str	r3, [r7, #32]
		sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007d6:	2301      	movs	r3, #1
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
		sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
		sConfig.IC2Filter = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	4619      	mov	r1, r3
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <MX_TIM2_Init+0xa4>)
 80007ea:	f002 ffbd 	bl	8003768 <HAL_TIM_Encoder_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM2_Init+0x80>
			Error_Handler();
 80007f4:	f000 f928 	bl	8000a48 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f8:	2300      	movs	r3, #0
 80007fa:	603b      	str	r3, [r7, #0]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000800:	463b      	mov	r3, r7
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_TIM2_Init+0xa4>)
 8000806:	f003 fc37 	bl	8004078 <HAL_TIMEx_MasterConfigSynchronization>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM2_Init+0x9c>
				!= HAL_OK) {
			Error_Handler();
 8000810:	f000 f91a 	bl	8000a48 <Error_Handler>
		}
		/* USER CODE BEGIN TIM2_Init 2 */

		/* USER CODE END TIM2_Init 2 */

	}
 8000814:	bf00      	nop
 8000816:	3730      	adds	r7, #48	; 0x30
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200000e4 	.word	0x200000e4

08000820 <MX_TIM15_Init>:
	/**
	 * @brief TIM15 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM15_Init(void) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b088      	sub	sp, #32
 8000824:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM15_Init 0 */

		/* USER CODE END TIM15_Init 0 */

		TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000826:	f107 0310 	add.w	r3, r7, #16
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]

		/* USER CODE BEGIN TIM15_Init 1 */

		/* USER CODE END TIM15_Init 1 */
		htim15.Instance = TIM15;
 800083e:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <MX_TIM15_Init+0x98>)
 8000840:	4a1e      	ldr	r2, [pc, #120]	; (80008bc <MX_TIM15_Init+0x9c>)
 8000842:	601a      	str	r2, [r3, #0]
		htim15.Init.Prescaler = 72 - 1;
 8000844:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <MX_TIM15_Init+0x98>)
 8000846:	2247      	movs	r2, #71	; 0x47
 8000848:	605a      	str	r2, [r3, #4]
		htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084a:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <MX_TIM15_Init+0x98>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
		htim15.Init.Period = 100;
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <MX_TIM15_Init+0x98>)
 8000852:	2264      	movs	r2, #100	; 0x64
 8000854:	60da      	str	r2, [r3, #12]
		htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <MX_TIM15_Init+0x98>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
		htim15.Init.RepetitionCounter = 0;
 800085c:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <MX_TIM15_Init+0x98>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
		htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_TIM15_Init+0x98>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim15) != HAL_OK) {
 8000868:	4813      	ldr	r0, [pc, #76]	; (80008b8 <MX_TIM15_Init+0x98>)
 800086a:	f002 fe85 	bl	8003578 <HAL_TIM_Base_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM15_Init+0x58>
			Error_Handler();
 8000874:	f000 f8e8 	bl	8000a48 <Error_Handler>
		}
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087c:	613b      	str	r3, [r7, #16]
		if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK) {
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	4619      	mov	r1, r3
 8000884:	480c      	ldr	r0, [pc, #48]	; (80008b8 <MX_TIM15_Init+0x98>)
 8000886:	f003 f9e2 	bl	8003c4e <HAL_TIM_ConfigClockSource>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM15_Init+0x74>
			Error_Handler();
 8000890:	f000 f8da 	bl	8000a48 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000894:	2320      	movs	r3, #32
 8000896:	607b      	str	r3, [r7, #4]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	4619      	mov	r1, r3
 80008a0:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_TIM15_Init+0x98>)
 80008a2:	f003 fbe9 	bl	8004078 <HAL_TIMEx_MasterConfigSynchronization>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM15_Init+0x90>
				!= HAL_OK) {
			Error_Handler();
 80008ac:	f000 f8cc 	bl	8000a48 <Error_Handler>
		}
		/* USER CODE BEGIN TIM15_Init 2 */

		/* USER CODE END TIM15_Init 2 */

	}
 80008b0:	bf00      	nop
 80008b2:	3720      	adds	r7, #32
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000130 	.word	0x20000130
 80008bc:	40014000 	.word	0x40014000

080008c0 <MX_USART2_UART_Init>:
	/**
	 * @brief USART2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_USART2_UART_Init(void) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
		/* USER CODE END USART2_Init 0 */

		/* USER CODE BEGIN USART2_Init 1 */

		/* USER CODE END USART2_Init 1 */
		huart2.Instance = USART2;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008c6:	4a15      	ldr	r2, [pc, #84]	; (800091c <MX_USART2_UART_Init+0x5c>)
 80008c8:	601a      	str	r2, [r3, #0]
		huart2.Init.BaudRate = 38400;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008cc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80008d0:	605a      	str	r2, [r3, #4]
		huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
		huart2.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
		huart2.Init.Parity = UART_PARITY_NONE;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
		huart2.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
		huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
		huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
		huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_USART2_UART_Init+0x58>)
 8000904:	f003 fc3c 	bl	8004180 <HAL_UART_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART2_UART_Init+0x52>
			Error_Handler();
 800090e:	f000 f89b 	bl	8000a48 <Error_Handler>
		}
		/* USER CODE BEGIN USART2_Init 2 */

		/* USER CODE END USART2_Init 2 */

	}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	2000017c 	.word	0x2000017c
 800091c:	40004400 	.word	0x40004400

08000920 <MX_DMA_Init>:

	/**
	 * Enable DMA controller clock
	 */
	static void MX_DMA_Init(void) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0

		/* DMA controller clock enable */
		__HAL_RCC_DMA1_CLK_ENABLE();
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_DMA_Init+0x38>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <MX_DMA_Init+0x38>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6153      	str	r3, [r2, #20]
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_DMA_Init+0x38>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

		/* DMA interrupt init */
		/* DMA1_Channel3_IRQn interrupt configuration */
		HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	200d      	movs	r0, #13
 8000944:	f000 fd57 	bl	80013f6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000948:	200d      	movs	r0, #13
 800094a:	f000 fd70 	bl	800142e <HAL_NVIC_EnableIRQ>

	}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40021000 	.word	0x40021000

0800095c <MX_GPIO_Init>:
	/**
	 * @brief GPIO Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_GPIO_Init(void) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]
		/* USER CODE BEGIN MX_GPIO_Init_1 */
		/* USER CODE END MX_GPIO_Init_1 */

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	4b32      	ldr	r3, [pc, #200]	; (8000a3c <MX_GPIO_Init+0xe0>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	4a31      	ldr	r2, [pc, #196]	; (8000a3c <MX_GPIO_Init+0xe0>)
 8000978:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800097c:	6153      	str	r3, [r2, #20]
 800097e:	4b2f      	ldr	r3, [pc, #188]	; (8000a3c <MX_GPIO_Init+0xe0>)
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOF_CLK_ENABLE();
 800098a:	4b2c      	ldr	r3, [pc, #176]	; (8000a3c <MX_GPIO_Init+0xe0>)
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	4a2b      	ldr	r2, [pc, #172]	; (8000a3c <MX_GPIO_Init+0xe0>)
 8000990:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000994:	6153      	str	r3, [r2, #20]
 8000996:	4b29      	ldr	r3, [pc, #164]	; (8000a3c <MX_GPIO_Init+0xe0>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <MX_GPIO_Init+0xe0>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	4a25      	ldr	r2, [pc, #148]	; (8000a3c <MX_GPIO_Init+0xe0>)
 80009a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ac:	6153      	str	r3, [r2, #20]
 80009ae:	4b23      	ldr	r3, [pc, #140]	; (8000a3c <MX_GPIO_Init+0xe0>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <MX_GPIO_Init+0xe0>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	4a1f      	ldr	r2, [pc, #124]	; (8000a3c <MX_GPIO_Init+0xe0>)
 80009c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009c4:	6153      	str	r3, [r2, #20]
 80009c6:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <MX_GPIO_Init+0xe0>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOB,
 80009d2:	2200      	movs	r2, #0
 80009d4:	f24e 0140 	movw	r1, #57408	; 0xe040
 80009d8:	4819      	ldr	r0, [pc, #100]	; (8000a40 <MX_GPIO_Init+0xe4>)
 80009da:	f001 f995 	bl	8001d08 <HAL_GPIO_WritePin>
				LD2_Pin | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_6,
				GPIO_PIN_RESET);

		/*Configure GPIO pin : Toggle_Pin */
		GPIO_InitStruct.Pin = Toggle_Pin;
 80009de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e2:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(Toggle_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	4814      	ldr	r0, [pc, #80]	; (8000a44 <MX_GPIO_Init+0xe8>)
 80009f4:	f000 fffe 	bl	80019f4 <HAL_GPIO_Init>

		/*Configure GPIO pins : LD2_Pin PB14 PB15 PB6 */
		GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_6;
 80009f8:	f24e 0340 	movw	r3, #57408	; 0xe040
 80009fc:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	480b      	ldr	r0, [pc, #44]	; (8000a40 <MX_GPIO_Init+0xe4>)
 8000a12:	f000 ffef 	bl	80019f4 <HAL_GPIO_Init>

		/*Configure GPIO pin : PA10 */
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a1a:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2e:	f000 ffe1 	bl	80019f4 <HAL_GPIO_Init>

		/* USER CODE BEGIN MX_GPIO_Init_2 */
		/* USER CODE END MX_GPIO_Init_2 */
	}
 8000a32:	bf00      	nop
 8000a34:	3728      	adds	r7, #40	; 0x28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	48000400 	.word	0x48000400
 8000a44:	48000800 	.word	0x48000800

08000a48 <Error_Handler>:

	/**
	 * @brief  This function is executed in case of error occurrence.
	 * @retval None
	 */
	void Error_Handler(void) {
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
		/* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1) {
 8000a50:	e7fe      	b.n	8000a50 <Error_Handler+0x8>
	...

08000a54 <write_byte>:
9, 0x10,0x00,0x08,0x08,0x00,0x10,0x00,0x20,0x20, 0x00,
5, 0x10,0x08,0x08,0x10,0x20,0x20,

*/
void write_byte (uint8_t byte)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	e01a      	b.n	8000a9a <write_byte+0x46>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a6a:	4810      	ldr	r0, [pc, #64]	; (8000aac <write_byte+0x58>)
 8000a6c:	f001 f94c 	bl	8001d08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	461a      	mov	r2, r3
 8000a7a:	2140      	movs	r1, #64	; 0x40
 8000a7c:	480b      	ldr	r0, [pc, #44]	; (8000aac <write_byte+0x58>)
 8000a7e:	f001 f943 	bl	8001d08 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a8e:	4807      	ldr	r0, [pc, #28]	; (8000aac <write_byte+0x58>)
 8000a90:	f001 f93a 	bl	8001d08 <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	3301      	adds	r3, #1
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	2b07      	cmp	r3, #7
 8000a9e:	dde1      	ble.n	8000a64 <write_byte+0x10>
	}
}
 8000aa0:	bf00      	nop
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	48000400 	.word	0x48000400

08000ab0 <write_max_cmd>:


void write_max_cmd (uint8_t address, uint8_t cmd)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	460a      	mov	r2, r1
 8000aba:	71fb      	strb	r3, [r7, #7]
 8000abc:	4613      	mov	r3, r2
 8000abe:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac6:	4812      	ldr	r0, [pc, #72]	; (8000b10 <write_max_cmd+0x60>)
 8000ac8:	f001 f91e 	bl	8001d08 <HAL_GPIO_WritePin>
	for (int i=0;i<num; i++)
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	e00a      	b.n	8000ae8 <write_max_cmd+0x38>
	{
		write_byte (address);
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ffbd 	bl	8000a54 <write_byte>
		write_byte (cmd); 
 8000ada:	79bb      	ldrb	r3, [r7, #6]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ffb9 	bl	8000a54 <write_byte>
	for (int i=0;i<num; i++)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	ddf1      	ble.n	8000ad2 <write_max_cmd+0x22>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af4:	4806      	ldr	r0, [pc, #24]	; (8000b10 <write_max_cmd+0x60>)
 8000af6:	f001 f907 	bl	8001d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 8000afa:	2201      	movs	r2, #1
 8000afc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b00:	4803      	ldr	r0, [pc, #12]	; (8000b10 <write_max_cmd+0x60>)
 8000b02:	f001 f901 	bl	8001d08 <HAL_GPIO_WritePin>
}
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	48000400 	.word	0x48000400

08000b14 <setled>:


void setled(uint8_t row, uint8_t col, uint8_t value)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	71bb      	strb	r3, [r7, #6]
 8000b22:	4613      	mov	r3, r2
 8000b24:	717b      	strb	r3, [r7, #5]
  bitWrite(buffer[col], row, value);
 8000b26:	797b      	ldrb	r3, [r7, #5]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d00d      	beq.n	8000b48 <setled+0x34>
 8000b2c:	79bb      	ldrb	r3, [r7, #6]
 8000b2e:	4a2e      	ldr	r2, [pc, #184]	; (8000be8 <setled+0xd4>)
 8000b30:	5cd1      	ldrb	r1, [r2, r3]
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	2201      	movs	r2, #1
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	79bb      	ldrb	r3, [r7, #6]
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	b2d1      	uxtb	r1, r2
 8000b42:	4a29      	ldr	r2, [pc, #164]	; (8000be8 <setled+0xd4>)
 8000b44:	54d1      	strb	r1, [r2, r3]
 8000b46:	e00e      	b.n	8000b66 <setled+0x52>
 8000b48:	79bb      	ldrb	r3, [r7, #6]
 8000b4a:	4a27      	ldr	r2, [pc, #156]	; (8000be8 <setled+0xd4>)
 8000b4c:	5cd1      	ldrb	r1, [r2, r3]
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	2201      	movs	r2, #1
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	79bb      	ldrb	r3, [r7, #6]
 8000b5e:	400a      	ands	r2, r1
 8000b60:	b2d1      	uxtb	r1, r2
 8000b62:	4a21      	ldr	r2, [pc, #132]	; (8000be8 <setled+0xd4>)
 8000b64:	54d1      	strb	r1, [r2, r3]

	int n = col / 8;
 8000b66:	79bb      	ldrb	r3, [r7, #6]
 8000b68:	08db      	lsrs	r3, r3, #3
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	613b      	str	r3, [r7, #16]
	int c = col % 8;
 8000b6e:	79bb      	ldrb	r3, [r7, #6]
 8000b70:	f003 0307 	and.w	r3, r3, #7
 8000b74:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW    
 8000b76:	2200      	movs	r2, #0
 8000b78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b7c:	481b      	ldr	r0, [pc, #108]	; (8000bec <setled+0xd8>)
 8000b7e:	f001 f8c3 	bl	8001d08 <HAL_GPIO_WritePin>
	for (int i=0; i<num; i++) 
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	e01b      	b.n	8000bc0 <setled+0xac>
	{
		if (i == (num-(n+1)))
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	425b      	negs	r3, r3
 8000b8c:	697a      	ldr	r2, [r7, #20]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d10d      	bne.n	8000bae <setled+0x9a>
		{
			write_byte (((c+1)));
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	3301      	adds	r3, #1
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ff5a 	bl	8000a54 <write_byte>
			write_byte (buffer[col]);
 8000ba0:	79bb      	ldrb	r3, [r7, #6]
 8000ba2:	4a11      	ldr	r2, [pc, #68]	; (8000be8 <setled+0xd4>)
 8000ba4:	5cd3      	ldrb	r3, [r2, r3]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff ff54 	bl	8000a54 <write_byte>
 8000bac:	e005      	b.n	8000bba <setled+0xa6>
		}
		else
		{
			write_byte (0);
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f7ff ff50 	bl	8000a54 <write_byte>
			write_byte (0);
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f7ff ff4d 	bl	8000a54 <write_byte>
	for (int i=0; i<num; i++) 
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	dde0      	ble.n	8000b88 <setled+0x74>
		}
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW 
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bcc:	4807      	ldr	r0, [pc, #28]	; (8000bec <setled+0xd8>)
 8000bce:	f001 f89b 	bl	8001d08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH 
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bd8:	4804      	ldr	r0, [pc, #16]	; (8000bec <setled+0xd8>)
 8000bda:	f001 f895 	bl	8001d08 <HAL_GPIO_WritePin>
}
 8000bde:	bf00      	nop
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200003f0 	.word	0x200003f0
 8000bec:	48000400 	.word	0x48000400

08000bf0 <setrow>:


void setrow(uint8_t row, uint8_t value)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	460a      	mov	r2, r1
 8000bfa:	71fb      	strb	r3, [r7, #7]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	71bb      	strb	r3, [r7, #6]
	int n = row / 8;
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	08db      	lsrs	r3, r3, #3
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	617b      	str	r3, [r7, #20]
	int r = row % 8;
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	613b      	str	r3, [r7, #16]
	
	uint8_t store = value;
 8000c10:	79bb      	ldrb	r3, [r7, #6]
 8000c12:	73fb      	strb	r3, [r7, #15]
	for (int i=0; i<num; i++) 
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
 8000c18:	e02d      	b.n	8000c76 <setrow+0x86>
	{
		if (i == ((n)))
 8000c1a:	69fa      	ldr	r2, [r7, #28]
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d120      	bne.n	8000c64 <setrow+0x74>
		{
//			for (int col=0+(8*n); col<8+(8*n); col++)  // uncomment this if the character looks inverted about X axis
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	3307      	adds	r3, #7
 8000c28:	61bb      	str	r3, [r7, #24]
 8000c2a:	e015      	b.n	8000c58 <setrow+0x68>
			{
				bool b = value&0x80;
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	bf14      	ite	ne
 8000c36:	2301      	movne	r3, #1
 8000c38:	2300      	moveq	r3, #0
 8000c3a:	73bb      	strb	r3, [r7, #14]
				setled (r, col, b);
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	b2d1      	uxtb	r1, r2
 8000c44:	7bba      	ldrb	r2, [r7, #14]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ff64 	bl	8000b14 <setled>
				value<<=1;
 8000c4c:	79bb      	ldrb	r3, [r7, #6]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	71bb      	strb	r3, [r7, #6]
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	3b01      	subs	r3, #1
 8000c56:	61bb      	str	r3, [r7, #24]
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	dae4      	bge.n	8000c2c <setrow+0x3c>
 8000c62:	e005      	b.n	8000c70 <setrow+0x80>
			}
		}
		else
		{
			write_byte (0);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f7ff fef5 	bl	8000a54 <write_byte>
			write_byte (0);
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f7ff fef2 	bl	8000a54 <write_byte>
	for (int i=0; i<num; i++) 
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	3301      	adds	r3, #1
 8000c74:	61fb      	str	r3, [r7, #28]
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	ddce      	ble.n	8000c1a <setrow+0x2a>
		}
	}
	buffer_row[row] = store;
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	4903      	ldr	r1, [pc, #12]	; (8000c8c <setrow+0x9c>)
 8000c80:	7bfa      	ldrb	r2, [r7, #15]
 8000c82:	54ca      	strb	r2, [r1, r3]
}
 8000c84:	bf00      	nop
 8000c86:	3720      	adds	r7, #32
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000440 	.word	0x20000440

08000c90 <max_clear>:
}



void max_clear(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
	for (int i=0; i<num*8; i++) 
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	e008      	b.n	8000cae <max_clear+0x1e>
		setrow(i,0);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ffa4 	bl	8000bf0 <setrow>
	for (int i=0; i<num*8; i++) 
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3301      	adds	r3, #1
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b07      	cmp	r3, #7
 8000cb2:	ddf3      	ble.n	8000c9c <max_clear+0xc>
		
	for (int i=0; i<80; i++)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	e00c      	b.n	8000cd4 <max_clear+0x44>
	{
		buffer[i] = 0;
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <max_clear+0x54>)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]
	  buffer_row[i] = 0;
 8000cc4:	4a08      	ldr	r2, [pc, #32]	; (8000ce8 <max_clear+0x58>)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	4413      	add	r3, r2
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	2b4f      	cmp	r3, #79	; 0x4f
 8000cd8:	ddef      	ble.n	8000cba <max_clear+0x2a>
	}
}
 8000cda:	bf00      	nop
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	200003f0 	.word	0x200003f0
 8000ce8:	20000440 	.word	0x20000440

08000cec <max_init>:
}



void max_init (uint8_t brightness)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
	write_max_cmd(0x09, 0x00);       //  no decoding
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2009      	movs	r0, #9
 8000cfa:	f7ff fed9 	bl	8000ab0 <write_max_cmd>
	write_max_cmd(0x0b, 0x07);       //  scan limit = 8 LEDs
 8000cfe:	2107      	movs	r1, #7
 8000d00:	200b      	movs	r0, #11
 8000d02:	f7ff fed5 	bl	8000ab0 <write_max_cmd>
	write_max_cmd(0x0c, 0x01);       //  power down =0,normal mode = 1
 8000d06:	2101      	movs	r1, #1
 8000d08:	200c      	movs	r0, #12
 8000d0a:	f7ff fed1 	bl	8000ab0 <write_max_cmd>
	write_max_cmd(0x0f, 0x00);       //  no test display
 8000d0e:	2100      	movs	r1, #0
 8000d10:	200f      	movs	r0, #15
 8000d12:	f7ff fecd 	bl	8000ab0 <write_max_cmd>
	
	max_clear ();
 8000d16:	f7ff ffbb 	bl	8000c90 <max_clear>
	
	write_max_cmd(0x0a, brightness);       //  brightness intensity
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	200a      	movs	r0, #10
 8000d20:	f7ff fec6 	bl	8000ab0 <write_max_cmd>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_MspInit+0x44>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <HAL_MspInit+0x44>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6193      	str	r3, [r2, #24]
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <HAL_MspInit+0x44>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <HAL_MspInit+0x44>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	4a08      	ldr	r2, [pc, #32]	; (8000d70 <HAL_MspInit+0x44>)
 8000d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d54:	61d3      	str	r3, [r2, #28]
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_MspInit+0x44>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d62:	2007      	movs	r0, #7
 8000d64:	f000 fb3c 	bl	80013e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40021000 	.word	0x40021000

08000d74 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a2c      	ldr	r2, [pc, #176]	; (8000e44 <HAL_DAC_MspInit+0xd0>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d152      	bne.n	8000e3c <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000d96:	4b2c      	ldr	r3, [pc, #176]	; (8000e48 <HAL_DAC_MspInit+0xd4>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	4a2b      	ldr	r2, [pc, #172]	; (8000e48 <HAL_DAC_MspInit+0xd4>)
 8000d9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000da0:	61d3      	str	r3, [r2, #28]
 8000da2:	4b29      	ldr	r3, [pc, #164]	; (8000e48 <HAL_DAC_MspInit+0xd4>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <HAL_DAC_MspInit+0xd4>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	4a25      	ldr	r2, [pc, #148]	; (8000e48 <HAL_DAC_MspInit+0xd4>)
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	6153      	str	r3, [r2, #20]
 8000dba:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <HAL_DAC_MspInit+0xd4>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dc6:	2310      	movs	r3, #16
 8000dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ddc:	f000 fe0a 	bl	80019f4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000de0:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <HAL_DAC_MspInit+0xd8>)
 8000de2:	4a1b      	ldr	r2, [pc, #108]	; (8000e50 <HAL_DAC_MspInit+0xdc>)
 8000de4:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000de6:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <HAL_DAC_MspInit+0xd8>)
 8000de8:	2210      	movs	r2, #16
 8000dea:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dec:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <HAL_DAC_MspInit+0xd8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000df2:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <HAL_DAC_MspInit+0xd8>)
 8000df4:	2280      	movs	r2, #128	; 0x80
 8000df6:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <HAL_DAC_MspInit+0xd8>)
 8000dfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dfe:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_DAC_MspInit+0xd8>)
 8000e02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e06:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000e08:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <HAL_DAC_MspInit+0xd8>)
 8000e0a:	2220      	movs	r2, #32
 8000e0c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <HAL_DAC_MspInit+0xd8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000e14:	480d      	ldr	r0, [pc, #52]	; (8000e4c <HAL_DAC_MspInit+0xd8>)
 8000e16:	f000 fc56 	bl	80016c6 <HAL_DMA_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8000e20:	f7ff fe12 	bl	8000a48 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_DAC_MspInit+0xe0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <HAL_DAC_MspInit+0xe0>)
 8000e2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e2e:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a06      	ldr	r2, [pc, #24]	; (8000e4c <HAL_DAC_MspInit+0xd8>)
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <HAL_DAC_MspInit+0xd8>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000e3c:	bf00      	nop
 8000e3e:	3728      	adds	r7, #40	; 0x28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40007400 	.word	0x40007400
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	200000a0 	.word	0x200000a0
 8000e50:	40020030 	.word	0x40020030
 8000e54:	40010000 	.word	0x40010000

08000e58 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e78:	d130      	bne.n	8000edc <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	4a19      	ldr	r2, [pc, #100]	; (8000ee4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	61d3      	str	r3, [r2, #28]
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	4a13      	ldr	r2, [pc, #76]	; (8000ee4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9c:	6153      	str	r3, [r2, #20]
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec8:	f000 fd94 	bl	80019f4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	201c      	movs	r0, #28
 8000ed2:	f000 fa90 	bl	80013f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ed6:	201c      	movs	r0, #28
 8000ed8:	f000 faa9 	bl	800142e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000edc:	bf00      	nop
 8000ede:	3728      	adds	r7, #40	; 0x28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <HAL_TIM_Base_MspInit+0x44>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d113      	bne.n	8000f22 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <HAL_TIM_Base_MspInit+0x48>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	4a0c      	ldr	r2, [pc, #48]	; (8000f30 <HAL_TIM_Base_MspInit+0x48>)
 8000f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f04:	6193      	str	r3, [r2, #24]
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_TIM_Base_MspInit+0x48>)
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	2018      	movs	r0, #24
 8000f18:	f000 fa6d 	bl	80013f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000f1c:	2018      	movs	r0, #24
 8000f1e:	f000 fa86 	bl	800142e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40014000 	.word	0x40014000
 8000f30:	40021000 	.word	0x40021000

08000f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a17      	ldr	r2, [pc, #92]	; (8000fb0 <HAL_UART_MspInit+0x7c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d128      	bne.n	8000fa8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <HAL_UART_MspInit+0x80>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	4a16      	ldr	r2, [pc, #88]	; (8000fb4 <HAL_UART_MspInit+0x80>)
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f60:	61d3      	str	r3, [r2, #28]
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <HAL_UART_MspInit+0x80>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <HAL_UART_MspInit+0x80>)
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	4a10      	ldr	r2, [pc, #64]	; (8000fb4 <HAL_UART_MspInit+0x80>)
 8000f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f78:	6153      	str	r3, [r2, #20]
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_UART_MspInit+0x80>)
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f86:	230c      	movs	r3, #12
 8000f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f96:	2307      	movs	r3, #7
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa4:	f000 fd26 	bl	80019f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fa8:	bf00      	nop
 8000faa:	3728      	adds	r7, #40	; 0x28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40004400 	.word	0x40004400
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <NMI_Handler+0x4>

08000fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001004:	f000 f8d8 	bl	80011b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <DMA1_Channel3_IRQHandler+0x10>)
 8001012:	f000 fbfe 	bl	8001812 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200000a0 	.word	0x200000a0

08001020 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001026:	f002 fcf3 	bl	8003a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000130 	.word	0x20000130

08001034 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <TIM2_IRQHandler+0x10>)
 800103a:	f002 fce9 	bl	8003a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200000e4 	.word	0x200000e4

08001048 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001050:	4a14      	ldr	r2, [pc, #80]	; (80010a4 <_sbrk+0x5c>)
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <_sbrk+0x60>)
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <_sbrk+0x64>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d102      	bne.n	800106a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <_sbrk+0x64>)
 8001066:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <_sbrk+0x68>)
 8001068:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <_sbrk+0x64>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	429a      	cmp	r2, r3
 8001076:	d207      	bcs.n	8001088 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001078:	f003 fca6 	bl	80049c8 <__errno>
 800107c:	4603      	mov	r3, r0
 800107e:	220c      	movs	r2, #12
 8001080:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	e009      	b.n	800109c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <_sbrk+0x64>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <_sbrk+0x64>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	4a05      	ldr	r2, [pc, #20]	; (80010ac <_sbrk+0x64>)
 8001098:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800109a:	68fb      	ldr	r3, [r7, #12]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20004000 	.word	0x20004000
 80010a8:	00000400 	.word	0x00000400
 80010ac:	20000490 	.word	0x20000490
 80010b0:	200004a8 	.word	0x200004a8

080010b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <SystemInit+0x20>)
 80010ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <SystemInit+0x20>)
 80010c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001110 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80010dc:	f7ff ffea 	bl	80010b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e0:	480c      	ldr	r0, [pc, #48]	; (8001114 <LoopForever+0x6>)
  ldr r1, =_edata
 80010e2:	490d      	ldr	r1, [pc, #52]	; (8001118 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e4:	4a0d      	ldr	r2, [pc, #52]	; (800111c <LoopForever+0xe>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e8:	e002      	b.n	80010f0 <LoopCopyDataInit>

080010ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ee:	3304      	adds	r3, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f4:	d3f9      	bcc.n	80010ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010f8:	4c0a      	ldr	r4, [pc, #40]	; (8001124 <LoopForever+0x16>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010fc:	e001      	b.n	8001102 <LoopFillZerobss>

080010fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001100:	3204      	adds	r2, #4

08001102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001104:	d3fb      	bcc.n	80010fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001106:	f003 fc65 	bl	80049d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800110a:	f7ff f93d 	bl	8000388 <main>

0800110e <LoopForever>:

LoopForever:
    b LoopForever
 800110e:	e7fe      	b.n	800110e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001110:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001118:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800111c:	08005398 	.word	0x08005398
  ldr r2, =_sbss
 8001120:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001124:	200004a8 	.word	0x200004a8

08001128 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC1_IRQHandler>
	...

0800112c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <HAL_Init+0x28>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a07      	ldr	r2, [pc, #28]	; (8001154 <HAL_Init+0x28>)
 8001136:	f043 0310 	orr.w	r3, r3, #16
 800113a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113c:	2003      	movs	r0, #3
 800113e:	f000 f94f 	bl	80013e0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001142:	2000      	movs	r0, #0
 8001144:	f000 f808 	bl	8001158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001148:	f7ff fdf0 	bl	8000d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40022000 	.word	0x40022000

08001158 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_InitTick+0x54>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_InitTick+0x58>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001172:	fbb2 f3f3 	udiv	r3, r2, r3
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f967 	bl	800144a <HAL_SYSTICK_Config>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e00e      	b.n	80011a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b0f      	cmp	r3, #15
 800118a:	d80a      	bhi.n	80011a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800118c:	2200      	movs	r2, #0
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	f04f 30ff 	mov.w	r0, #4294967295
 8001194:	f000 f92f 	bl	80013f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001198:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <HAL_InitTick+0x5c>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	e000      	b.n	80011a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000000 	.word	0x20000000
 80011b0:	20000008 	.word	0x20000008
 80011b4:	20000004 	.word	0x20000004

080011b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_IncTick+0x20>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_IncTick+0x24>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <HAL_IncTick+0x24>)
 80011ca:	6013      	str	r3, [r2, #0]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000008 	.word	0x20000008
 80011dc:	20000494 	.word	0x20000494

080011e0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return uwTick;  
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <HAL_GetTick+0x14>)
 80011e6:	681b      	ldr	r3, [r3, #0]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000494 	.word	0x20000494

080011f8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001200:	f7ff ffee 	bl	80011e0 <HAL_GetTick>
 8001204:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001210:	d005      	beq.n	800121e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <HAL_Delay+0x44>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4413      	add	r3, r2
 800121c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800121e:	bf00      	nop
 8001220:	f7ff ffde 	bl	80011e0 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	429a      	cmp	r2, r3
 800122e:	d8f7      	bhi.n	8001220 <HAL_Delay+0x28>
  {
  }
}
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000008 	.word	0x20000008

08001240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <__NVIC_SetPriorityGrouping+0x44>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800125c:	4013      	ands	r3, r2
 800125e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001268:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800126c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001272:	4a04      	ldr	r2, [pc, #16]	; (8001284 <__NVIC_SetPriorityGrouping+0x44>)
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	60d3      	str	r3, [r2, #12]
}
 8001278:	bf00      	nop
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <__NVIC_GetPriorityGrouping+0x18>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	0a1b      	lsrs	r3, r3, #8
 8001292:	f003 0307 	and.w	r3, r3, #7
}
 8001296:	4618      	mov	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	db0b      	blt.n	80012ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	f003 021f 	and.w	r2, r3, #31
 80012bc:	4907      	ldr	r1, [pc, #28]	; (80012dc <__NVIC_EnableIRQ+0x38>)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	095b      	lsrs	r3, r3, #5
 80012c4:	2001      	movs	r0, #1
 80012c6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000e100 	.word	0xe000e100

080012e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	db0a      	blt.n	800130a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	490c      	ldr	r1, [pc, #48]	; (800132c <__NVIC_SetPriority+0x4c>)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	0112      	lsls	r2, r2, #4
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	440b      	add	r3, r1
 8001304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001308:	e00a      	b.n	8001320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4908      	ldr	r1, [pc, #32]	; (8001330 <__NVIC_SetPriority+0x50>)
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	3b04      	subs	r3, #4
 8001318:	0112      	lsls	r2, r2, #4
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	440b      	add	r3, r1
 800131e:	761a      	strb	r2, [r3, #24]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000e100 	.word	0xe000e100
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001334:	b480      	push	{r7}
 8001336:	b089      	sub	sp, #36	; 0x24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f1c3 0307 	rsb	r3, r3, #7
 800134e:	2b04      	cmp	r3, #4
 8001350:	bf28      	it	cs
 8001352:	2304      	movcs	r3, #4
 8001354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3304      	adds	r3, #4
 800135a:	2b06      	cmp	r3, #6
 800135c:	d902      	bls.n	8001364 <NVIC_EncodePriority+0x30>
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3b03      	subs	r3, #3
 8001362:	e000      	b.n	8001366 <NVIC_EncodePriority+0x32>
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	f04f 32ff 	mov.w	r2, #4294967295
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43da      	mvns	r2, r3
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	401a      	ands	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800137c:	f04f 31ff 	mov.w	r1, #4294967295
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	fa01 f303 	lsl.w	r3, r1, r3
 8001386:	43d9      	mvns	r1, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	4313      	orrs	r3, r2
         );
}
 800138e:	4618      	mov	r0, r3
 8001390:	3724      	adds	r7, #36	; 0x24
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013ac:	d301      	bcc.n	80013b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00f      	b.n	80013d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b2:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <SysTick_Config+0x40>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ba:	210f      	movs	r1, #15
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295
 80013c0:	f7ff ff8e 	bl	80012e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <SysTick_Config+0x40>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ca:	4b04      	ldr	r3, [pc, #16]	; (80013dc <SysTick_Config+0x40>)
 80013cc:	2207      	movs	r2, #7
 80013ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	e000e010 	.word	0xe000e010

080013e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ff29 	bl	8001240 <__NVIC_SetPriorityGrouping>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001408:	f7ff ff3e 	bl	8001288 <__NVIC_GetPriorityGrouping>
 800140c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	68b9      	ldr	r1, [r7, #8]
 8001412:	6978      	ldr	r0, [r7, #20]
 8001414:	f7ff ff8e 	bl	8001334 <NVIC_EncodePriority>
 8001418:	4602      	mov	r2, r0
 800141a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141e:	4611      	mov	r1, r2
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff5d 	bl	80012e0 <__NVIC_SetPriority>
}
 8001426:	bf00      	nop
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff31 	bl	80012a4 <__NVIC_EnableIRQ>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ffa2 	bl	800139c <SysTick_Config>
 8001458:	4603      	mov	r3, r0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e014      	b.n	800149e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	791b      	ldrb	r3, [r3, #4]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d105      	bne.n	800148a <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff fc75 	bl	8000d74 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2202      	movs	r2, #2
 800148e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2201      	movs	r2, #1
 800149a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
 80014f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	795b      	ldrb	r3, [r3, #5]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d101      	bne.n	8001502 <HAL_DAC_Start_DMA+0x1e>
 80014fe:	2302      	movs	r3, #2
 8001500:	e053      	b.n	80015aa <HAL_DAC_Start_DMA+0xc6>
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2201      	movs	r2, #1
 8001506:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2202      	movs	r2, #2
 800150c:	711a      	strb	r2, [r3, #4]
    
  /* Set the DMA transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	4a28      	ldr	r2, [pc, #160]	; (80015b4 <HAL_DAC_Start_DMA+0xd0>)
 8001514:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set the DMA half transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	4a27      	ldr	r2, [pc, #156]	; (80015b8 <HAL_DAC_Start_DMA+0xd4>)
 800151c:	62da      	str	r2, [r3, #44]	; 0x2c
    
  /* Set the DMA error callback for channel1 */
  hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	4a26      	ldr	r2, [pc, #152]	; (80015bc <HAL_DAC_Start_DMA+0xd8>)
 8001524:	631a      	str	r2, [r3, #48]	; 0x30

  /* Enable the selected DAC channel1 DMA request */
  SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001534:	601a      	str	r2, [r3, #0]
    
  /* Case of use of channel 1U */
  switch(Alignment)
 8001536:	6a3b      	ldr	r3, [r7, #32]
 8001538:	2b08      	cmp	r3, #8
 800153a:	d013      	beq.n	8001564 <HAL_DAC_Start_DMA+0x80>
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	2b08      	cmp	r3, #8
 8001540:	d815      	bhi.n	800156e <HAL_DAC_Start_DMA+0x8a>
 8001542:	6a3b      	ldr	r3, [r7, #32]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_DAC_Start_DMA+0x6c>
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	2b04      	cmp	r3, #4
 800154c:	d005      	beq.n	800155a <HAL_DAC_Start_DMA+0x76>
    case DAC_ALIGN_8B_R:
      /* Get DHR8R1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
      break;
    default:
      break;
 800154e:	e00e      	b.n	800156e <HAL_DAC_Start_DMA+0x8a>
      tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	3308      	adds	r3, #8
 8001556:	617b      	str	r3, [r7, #20]
      break;
 8001558:	e00a      	b.n	8001570 <HAL_DAC_Start_DMA+0x8c>
      tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	330c      	adds	r3, #12
 8001560:	617b      	str	r3, [r7, #20]
      break;
 8001562:	e005      	b.n	8001570 <HAL_DAC_Start_DMA+0x8c>
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	3310      	adds	r3, #16
 800156a:	617b      	str	r3, [r7, #20]
      break;
 800156c:	e000      	b.n	8001570 <HAL_DAC_Start_DMA+0x8c>
      break;
 800156e:	bf00      	nop
  }
  
  /* Enable the DMA Channel */
  /* Enable the DAC DMA underrun interrupt */
  __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800157e:	601a      	str	r2, [r3, #0]

  /* Enable the DMA Channel */
  HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6898      	ldr	r0, [r3, #8]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	f000 f8e3 	bl	8001754 <HAL_DMA_Start_IT>
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2200      	movs	r2, #0
 8001592:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel); 
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6819      	ldr	r1, [r3, #0]
 800159a:	2201      	movs	r2, #1
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	409a      	lsls	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]
 
  /* Return function status */
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	0800165b 	.word	0x0800165b
 80015b8:	0800167d 	.word	0x0800167d
 80015bc:	08001699 	.word	0x08001699

080015c0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b087      	sub	sp, #28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	2300      	movs	r3, #0
 80015d2:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	795b      	ldrb	r3, [r3, #5]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d101      	bne.n	80015e0 <HAL_DAC_ConfigChannel+0x20>
 80015dc:	2302      	movs	r3, #2
 80015de:	e036      	b.n	800164e <HAL_DAC_ConfigChannel+0x8e>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2201      	movs	r2, #1
 80015e4:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2202      	movs	r2, #2
 80015ea:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80015f4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	4013      	ands	r3, r2
 8001604:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	4313      	orrs	r3, r2
 800161e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6819      	ldr	r1, [r3, #0]
 800162e:	22c0      	movs	r2, #192	; 0xc0
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43da      	mvns	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	400a      	ands	r2, r1
 800163e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2201      	movs	r2, #1
 8001644:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	371c      	adds	r7, #28
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f7ff ff1c 	bl	80014a6 <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2201      	movs	r2, #1
 8001672:	711a      	strb	r2, [r3, #4]
}
 8001674:	bf00      	nop
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001688:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f7ff ff15 	bl	80014ba <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	f043 0204 	orr.w	r2, r3, #4
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f7ff ff0b 	bl	80014ce <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2201      	movs	r2, #1
 80016bc:	711a      	strb	r2, [r3, #4]
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b084      	sub	sp, #16
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e037      	b.n	800174c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2202      	movs	r2, #2
 80016e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016f2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80016f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001700:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800170c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001718:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	4313      	orrs	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f940 	bl	80019b4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
}  
 800174c:	4618      	mov	r0, r3
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d101      	bne.n	8001774 <HAL_DMA_Start_IT+0x20>
 8001770:	2302      	movs	r3, #2
 8001772:	e04a      	b.n	800180a <HAL_DMA_Start_IT+0xb6>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001782:	2b01      	cmp	r3, #1
 8001784:	d13a      	bne.n	80017fc <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2202      	movs	r2, #2
 800178a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2200      	movs	r2, #0
 8001792:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0201 	bic.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	68b9      	ldr	r1, [r7, #8]
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 f8d4 	bl	8001958 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 020e 	orr.w	r2, r2, #14
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	e00f      	b.n	80017ea <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f042 020a 	orr.w	r2, r2, #10
 80017d8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 0204 	bic.w	r2, r2, #4
 80017e8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f042 0201 	orr.w	r2, r2, #1
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	e005      	b.n	8001808 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001804:	2302      	movs	r3, #2
 8001806:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001808:	7dfb      	ldrb	r3, [r7, #23]
} 
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b084      	sub	sp, #16
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	2204      	movs	r2, #4
 8001830:	409a      	lsls	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4013      	ands	r3, r2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d024      	beq.n	8001884 <HAL_DMA_IRQHandler+0x72>
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d01f      	beq.n	8001884 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0320 	and.w	r3, r3, #32
 800184e:	2b00      	cmp	r3, #0
 8001850:	d107      	bne.n	8001862 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 0204 	bic.w	r2, r2, #4
 8001860:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186a:	2104      	movs	r1, #4
 800186c:	fa01 f202 	lsl.w	r2, r1, r2
 8001870:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001876:	2b00      	cmp	r3, #0
 8001878:	d06a      	beq.n	8001950 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001882:	e065      	b.n	8001950 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	2202      	movs	r2, #2
 800188a:	409a      	lsls	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4013      	ands	r3, r2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d02c      	beq.n	80018ee <HAL_DMA_IRQHandler+0xdc>
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d027      	beq.n	80018ee <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0320 	and.w	r3, r3, #32
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d10b      	bne.n	80018c4 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 020a 	bic.w	r2, r2, #10
 80018ba:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018cc:	2102      	movs	r1, #2
 80018ce:	fa01 f202 	lsl.w	r2, r1, r2
 80018d2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d035      	beq.n	8001950 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80018ec:	e030      	b.n	8001950 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	2208      	movs	r2, #8
 80018f4:	409a      	lsls	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d028      	beq.n	8001950 <HAL_DMA_IRQHandler+0x13e>
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	2b00      	cmp	r3, #0
 8001906:	d023      	beq.n	8001950 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 020e 	bic.w	r2, r2, #14
 8001916:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001920:	2101      	movs	r1, #1
 8001922:	fa01 f202 	lsl.w	r2, r1, r2
 8001926:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	2b00      	cmp	r3, #0
 8001944:	d004      	beq.n	8001950 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	4798      	blx	r3
    }
  }
}  
 800194e:	e7ff      	b.n	8001950 <HAL_DMA_IRQHandler+0x13e>
 8001950:	bf00      	nop
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196e:	2101      	movs	r1, #1
 8001970:	fa01 f202 	lsl.w	r2, r1, r2
 8001974:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b10      	cmp	r3, #16
 8001984:	d108      	bne.n	8001998 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001996:	e007      	b.n	80019a8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	60da      	str	r2, [r3, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <DMA_CalcBaseAndBitshift+0x34>)
 80019c4:	4413      	add	r3, r2
 80019c6:	4a09      	ldr	r2, [pc, #36]	; (80019ec <DMA_CalcBaseAndBitshift+0x38>)
 80019c8:	fba2 2303 	umull	r2, r3, r2, r3
 80019cc:	091b      	lsrs	r3, r3, #4
 80019ce:	009a      	lsls	r2, r3, #2
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a06      	ldr	r2, [pc, #24]	; (80019f0 <DMA_CalcBaseAndBitshift+0x3c>)
 80019d8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	bffdfff8 	.word	0xbffdfff8
 80019ec:	cccccccd 	.word	0xcccccccd
 80019f0:	40020000 	.word	0x40020000

080019f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a02:	e14e      	b.n	8001ca2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	2101      	movs	r1, #1
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a10:	4013      	ands	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 8140 	beq.w	8001c9c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d005      	beq.n	8001a34 <HAL_GPIO_Init+0x40>
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d130      	bne.n	8001a96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	2203      	movs	r2, #3
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	091b      	lsrs	r3, r3, #4
 8001a80:	f003 0201 	and.w	r2, r3, #1
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	d017      	beq.n	8001ad2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	2203      	movs	r2, #3
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d123      	bne.n	8001b26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	08da      	lsrs	r2, r3, #3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3208      	adds	r2, #8
 8001ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	220f      	movs	r2, #15
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	691a      	ldr	r2, [r3, #16]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	08da      	lsrs	r2, r3, #3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3208      	adds	r2, #8
 8001b20:	6939      	ldr	r1, [r7, #16]
 8001b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	2203      	movs	r2, #3
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 0203 	and.w	r2, r3, #3
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 809a 	beq.w	8001c9c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b68:	4b55      	ldr	r3, [pc, #340]	; (8001cc0 <HAL_GPIO_Init+0x2cc>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	4a54      	ldr	r2, [pc, #336]	; (8001cc0 <HAL_GPIO_Init+0x2cc>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6193      	str	r3, [r2, #24]
 8001b74:	4b52      	ldr	r3, [pc, #328]	; (8001cc0 <HAL_GPIO_Init+0x2cc>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b80:	4a50      	ldr	r2, [pc, #320]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	089b      	lsrs	r3, r3, #2
 8001b86:	3302      	adds	r3, #2
 8001b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	220f      	movs	r2, #15
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001baa:	d013      	beq.n	8001bd4 <HAL_GPIO_Init+0x1e0>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a46      	ldr	r2, [pc, #280]	; (8001cc8 <HAL_GPIO_Init+0x2d4>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d00d      	beq.n	8001bd0 <HAL_GPIO_Init+0x1dc>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a45      	ldr	r2, [pc, #276]	; (8001ccc <HAL_GPIO_Init+0x2d8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d007      	beq.n	8001bcc <HAL_GPIO_Init+0x1d8>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a44      	ldr	r2, [pc, #272]	; (8001cd0 <HAL_GPIO_Init+0x2dc>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d101      	bne.n	8001bc8 <HAL_GPIO_Init+0x1d4>
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e006      	b.n	8001bd6 <HAL_GPIO_Init+0x1e2>
 8001bc8:	2305      	movs	r3, #5
 8001bca:	e004      	b.n	8001bd6 <HAL_GPIO_Init+0x1e2>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e002      	b.n	8001bd6 <HAL_GPIO_Init+0x1e2>
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e000      	b.n	8001bd6 <HAL_GPIO_Init+0x1e2>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	f002 0203 	and.w	r2, r2, #3
 8001bdc:	0092      	lsls	r2, r2, #2
 8001bde:	4093      	lsls	r3, r2
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001be6:	4937      	ldr	r1, [pc, #220]	; (8001cc4 <HAL_GPIO_Init+0x2d0>)
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	089b      	lsrs	r3, r3, #2
 8001bec:	3302      	adds	r3, #2
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bf4:	4b37      	ldr	r3, [pc, #220]	; (8001cd4 <HAL_GPIO_Init+0x2e0>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c18:	4a2e      	ldr	r2, [pc, #184]	; (8001cd4 <HAL_GPIO_Init+0x2e0>)
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c1e:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <HAL_GPIO_Init+0x2e0>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	43db      	mvns	r3, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c42:	4a24      	ldr	r2, [pc, #144]	; (8001cd4 <HAL_GPIO_Init+0x2e0>)
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c48:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <HAL_GPIO_Init+0x2e0>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c6c:	4a19      	ldr	r2, [pc, #100]	; (8001cd4 <HAL_GPIO_Init+0x2e0>)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c72:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <HAL_GPIO_Init+0x2e0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c96:	4a0f      	ldr	r2, [pc, #60]	; (8001cd4 <HAL_GPIO_Init+0x2e0>)
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f47f aea9 	bne.w	8001a04 <HAL_GPIO_Init+0x10>
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	bf00      	nop
 8001cb6:	371c      	adds	r7, #28
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40010000 	.word	0x40010000
 8001cc8:	48000400 	.word	0x48000400
 8001ccc:	48000800 	.word	0x48000800
 8001cd0:	48000c00 	.word	0x48000c00
 8001cd4:	40010400 	.word	0x40010400

08001cd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	887b      	ldrh	r3, [r7, #2]
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
 8001cf4:	e001      	b.n	8001cfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	807b      	strh	r3, [r7, #2]
 8001d14:	4613      	mov	r3, r2
 8001d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d18:	787b      	ldrb	r3, [r7, #1]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d1e:	887a      	ldrh	r2, [r7, #2]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d24:	e002      	b.n	8001d2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d26:	887a      	ldrh	r2, [r7, #2]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d4a:	887a      	ldrh	r2, [r7, #2]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	041a      	lsls	r2, r3, #16
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	43d9      	mvns	r1, r3
 8001d56:	887b      	ldrh	r3, [r7, #2]
 8001d58:	400b      	ands	r3, r1
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	619a      	str	r2, [r3, #24]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d7c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d102      	bne.n	8001d92 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f001 b823 	b.w	8002dd8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 817d 	beq.w	80020a2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001da8:	4bbc      	ldr	r3, [pc, #752]	; (800209c <HAL_RCC_OscConfig+0x330>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d00c      	beq.n	8001dce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001db4:	4bb9      	ldr	r3, [pc, #740]	; (800209c <HAL_RCC_OscConfig+0x330>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 030c 	and.w	r3, r3, #12
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d15c      	bne.n	8001e7a <HAL_RCC_OscConfig+0x10e>
 8001dc0:	4bb6      	ldr	r3, [pc, #728]	; (800209c <HAL_RCC_OscConfig+0x330>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dcc:	d155      	bne.n	8001e7a <HAL_RCC_OscConfig+0x10e>
 8001dce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001de2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de6:	fab3 f383 	clz	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	095b      	lsrs	r3, r3, #5
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d102      	bne.n	8001e00 <HAL_RCC_OscConfig+0x94>
 8001dfa:	4ba8      	ldr	r3, [pc, #672]	; (800209c <HAL_RCC_OscConfig+0x330>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	e015      	b.n	8001e2c <HAL_RCC_OscConfig+0xc0>
 8001e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e04:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e08:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e18:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001e1c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e20:	fa93 f3a3 	rbit	r3, r3
 8001e24:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001e28:	4b9c      	ldr	r3, [pc, #624]	; (800209c <HAL_RCC_OscConfig+0x330>)
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e30:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001e34:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001e38:	fa92 f2a2 	rbit	r2, r2
 8001e3c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001e40:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001e44:	fab2 f282 	clz	r2, r2
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	f042 0220 	orr.w	r2, r2, #32
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	f002 021f 	and.w	r2, r2, #31
 8001e54:	2101      	movs	r1, #1
 8001e56:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 811f 	beq.w	80020a0 <HAL_RCC_OscConfig+0x334>
 8001e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f040 8116 	bne.w	80020a0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	f000 bfaf 	b.w	8002dd8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8a:	d106      	bne.n	8001e9a <HAL_RCC_OscConfig+0x12e>
 8001e8c:	4b83      	ldr	r3, [pc, #524]	; (800209c <HAL_RCC_OscConfig+0x330>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a82      	ldr	r2, [pc, #520]	; (800209c <HAL_RCC_OscConfig+0x330>)
 8001e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	e036      	b.n	8001f08 <HAL_RCC_OscConfig+0x19c>
 8001e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x158>
 8001eaa:	4b7c      	ldr	r3, [pc, #496]	; (800209c <HAL_RCC_OscConfig+0x330>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a7b      	ldr	r2, [pc, #492]	; (800209c <HAL_RCC_OscConfig+0x330>)
 8001eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	4b79      	ldr	r3, [pc, #484]	; (800209c <HAL_RCC_OscConfig+0x330>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a78      	ldr	r2, [pc, #480]	; (800209c <HAL_RCC_OscConfig+0x330>)
 8001ebc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e021      	b.n	8001f08 <HAL_RCC_OscConfig+0x19c>
 8001ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x184>
 8001ed6:	4b71      	ldr	r3, [pc, #452]	; (800209c <HAL_RCC_OscConfig+0x330>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a70      	ldr	r2, [pc, #448]	; (800209c <HAL_RCC_OscConfig+0x330>)
 8001edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b6e      	ldr	r3, [pc, #440]	; (800209c <HAL_RCC_OscConfig+0x330>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a6d      	ldr	r2, [pc, #436]	; (800209c <HAL_RCC_OscConfig+0x330>)
 8001ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e00b      	b.n	8001f08 <HAL_RCC_OscConfig+0x19c>
 8001ef0:	4b6a      	ldr	r3, [pc, #424]	; (800209c <HAL_RCC_OscConfig+0x330>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a69      	ldr	r2, [pc, #420]	; (800209c <HAL_RCC_OscConfig+0x330>)
 8001ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	4b67      	ldr	r3, [pc, #412]	; (800209c <HAL_RCC_OscConfig+0x330>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a66      	ldr	r2, [pc, #408]	; (800209c <HAL_RCC_OscConfig+0x330>)
 8001f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f06:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f08:	4b64      	ldr	r3, [pc, #400]	; (800209c <HAL_RCC_OscConfig+0x330>)
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	f023 020f 	bic.w	r2, r3, #15
 8001f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	495f      	ldr	r1, [pc, #380]	; (800209c <HAL_RCC_OscConfig+0x330>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d059      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f32:	f7ff f955 	bl	80011e0 <HAL_GetTick>
 8001f36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3a:	e00a      	b.n	8001f52 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f3c:	f7ff f950 	bl	80011e0 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b64      	cmp	r3, #100	; 0x64
 8001f4a:	d902      	bls.n	8001f52 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	f000 bf43 	b.w	8002dd8 <HAL_RCC_OscConfig+0x106c>
 8001f52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f56:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001f66:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	095b      	lsrs	r3, r3, #5
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d102      	bne.n	8001f84 <HAL_RCC_OscConfig+0x218>
 8001f7e:	4b47      	ldr	r3, [pc, #284]	; (800209c <HAL_RCC_OscConfig+0x330>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	e015      	b.n	8001fb0 <HAL_RCC_OscConfig+0x244>
 8001f84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f88:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f9c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001fa0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001fa4:	fa93 f3a3 	rbit	r3, r3
 8001fa8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001fac:	4b3b      	ldr	r3, [pc, #236]	; (800209c <HAL_RCC_OscConfig+0x330>)
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fb4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001fb8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001fbc:	fa92 f2a2 	rbit	r2, r2
 8001fc0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001fc4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001fc8:	fab2 f282 	clz	r2, r2
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	f042 0220 	orr.w	r2, r2, #32
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	f002 021f 	and.w	r2, r2, #31
 8001fd8:	2101      	movs	r1, #1
 8001fda:	fa01 f202 	lsl.w	r2, r1, r2
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0ab      	beq.n	8001f3c <HAL_RCC_OscConfig+0x1d0>
 8001fe4:	e05d      	b.n	80020a2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe6:	f7ff f8fb 	bl	80011e0 <HAL_GetTick>
 8001fea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7ff f8f6 	bl	80011e0 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b64      	cmp	r3, #100	; 0x64
 8001ffe:	d902      	bls.n	8002006 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	f000 bee9 	b.w	8002dd8 <HAL_RCC_OscConfig+0x106c>
 8002006:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800200a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002012:	fa93 f3a3 	rbit	r3, r3
 8002016:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800201a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800201e:	fab3 f383 	clz	r3, r3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	095b      	lsrs	r3, r3, #5
 8002026:	b2db      	uxtb	r3, r3
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d102      	bne.n	8002038 <HAL_RCC_OscConfig+0x2cc>
 8002032:	4b1a      	ldr	r3, [pc, #104]	; (800209c <HAL_RCC_OscConfig+0x330>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	e015      	b.n	8002064 <HAL_RCC_OscConfig+0x2f8>
 8002038:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800203c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002044:	fa93 f3a3 	rbit	r3, r3
 8002048:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800204c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002050:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002054:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002058:	fa93 f3a3 	rbit	r3, r3
 800205c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002060:	4b0e      	ldr	r3, [pc, #56]	; (800209c <HAL_RCC_OscConfig+0x330>)
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002068:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800206c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002070:	fa92 f2a2 	rbit	r2, r2
 8002074:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002078:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800207c:	fab2 f282 	clz	r2, r2
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	f042 0220 	orr.w	r2, r2, #32
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	f002 021f 	and.w	r2, r2, #31
 800208c:	2101      	movs	r1, #1
 800208e:	fa01 f202 	lsl.w	r2, r1, r2
 8002092:	4013      	ands	r3, r2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1ab      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x284>
 8002098:	e003      	b.n	80020a2 <HAL_RCC_OscConfig+0x336>
 800209a:	bf00      	nop
 800209c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 817d 	beq.w	80023b2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020b8:	4ba6      	ldr	r3, [pc, #664]	; (8002354 <HAL_RCC_OscConfig+0x5e8>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 030c 	and.w	r3, r3, #12
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00b      	beq.n	80020dc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020c4:	4ba3      	ldr	r3, [pc, #652]	; (8002354 <HAL_RCC_OscConfig+0x5e8>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 030c 	and.w	r3, r3, #12
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d172      	bne.n	80021b6 <HAL_RCC_OscConfig+0x44a>
 80020d0:	4ba0      	ldr	r3, [pc, #640]	; (8002354 <HAL_RCC_OscConfig+0x5e8>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d16c      	bne.n	80021b6 <HAL_RCC_OscConfig+0x44a>
 80020dc:	2302      	movs	r3, #2
 80020de:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80020e6:	fa93 f3a3 	rbit	r3, r3
 80020ea:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80020ee:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f2:	fab3 f383 	clz	r3, r3
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	095b      	lsrs	r3, r3, #5
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b01      	cmp	r3, #1
 8002104:	d102      	bne.n	800210c <HAL_RCC_OscConfig+0x3a0>
 8002106:	4b93      	ldr	r3, [pc, #588]	; (8002354 <HAL_RCC_OscConfig+0x5e8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	e013      	b.n	8002134 <HAL_RCC_OscConfig+0x3c8>
 800210c:	2302      	movs	r3, #2
 800210e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002116:	fa93 f3a3 	rbit	r3, r3
 800211a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800211e:	2302      	movs	r3, #2
 8002120:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002124:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002128:	fa93 f3a3 	rbit	r3, r3
 800212c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002130:	4b88      	ldr	r3, [pc, #544]	; (8002354 <HAL_RCC_OscConfig+0x5e8>)
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	2202      	movs	r2, #2
 8002136:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800213a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800213e:	fa92 f2a2 	rbit	r2, r2
 8002142:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002146:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800214a:	fab2 f282 	clz	r2, r2
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	f042 0220 	orr.w	r2, r2, #32
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	f002 021f 	and.w	r2, r2, #31
 800215a:	2101      	movs	r1, #1
 800215c:	fa01 f202 	lsl.w	r2, r1, r2
 8002160:	4013      	ands	r3, r2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HAL_RCC_OscConfig+0x410>
 8002166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d002      	beq.n	800217c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	f000 be2e 	b.w	8002dd8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217c:	4b75      	ldr	r3, [pc, #468]	; (8002354 <HAL_RCC_OscConfig+0x5e8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002188:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	21f8      	movs	r1, #248	; 0xf8
 8002192:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800219a:	fa91 f1a1 	rbit	r1, r1
 800219e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80021a2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80021a6:	fab1 f181 	clz	r1, r1
 80021aa:	b2c9      	uxtb	r1, r1
 80021ac:	408b      	lsls	r3, r1
 80021ae:	4969      	ldr	r1, [pc, #420]	; (8002354 <HAL_RCC_OscConfig+0x5e8>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b4:	e0fd      	b.n	80023b2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 8088 	beq.w	80022d8 <HAL_RCC_OscConfig+0x56c>
 80021c8:	2301      	movs	r3, #1
 80021ca:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80021da:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021de:	fab3 f383 	clz	r3, r3
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	461a      	mov	r2, r3
 80021f0:	2301      	movs	r3, #1
 80021f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7fe fff4 	bl	80011e0 <HAL_GetTick>
 80021f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fc:	e00a      	b.n	8002214 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021fe:	f7fe ffef 	bl	80011e0 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d902      	bls.n	8002214 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	f000 bde2 	b.w	8002dd8 <HAL_RCC_OscConfig+0x106c>
 8002214:	2302      	movs	r3, #2
 8002216:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800221e:	fa93 f3a3 	rbit	r3, r3
 8002222:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002226:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	095b      	lsrs	r3, r3, #5
 8002232:	b2db      	uxtb	r3, r3
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d102      	bne.n	8002244 <HAL_RCC_OscConfig+0x4d8>
 800223e:	4b45      	ldr	r3, [pc, #276]	; (8002354 <HAL_RCC_OscConfig+0x5e8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	e013      	b.n	800226c <HAL_RCC_OscConfig+0x500>
 8002244:	2302      	movs	r3, #2
 8002246:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002256:	2302      	movs	r3, #2
 8002258:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800225c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002268:	4b3a      	ldr	r3, [pc, #232]	; (8002354 <HAL_RCC_OscConfig+0x5e8>)
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	2202      	movs	r2, #2
 800226e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002272:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002276:	fa92 f2a2 	rbit	r2, r2
 800227a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800227e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002282:	fab2 f282 	clz	r2, r2
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	f042 0220 	orr.w	r2, r2, #32
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	f002 021f 	and.w	r2, r2, #31
 8002292:	2101      	movs	r1, #1
 8002294:	fa01 f202 	lsl.w	r2, r1, r2
 8002298:	4013      	ands	r3, r2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0af      	beq.n	80021fe <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229e:	4b2d      	ldr	r3, [pc, #180]	; (8002354 <HAL_RCC_OscConfig+0x5e8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	21f8      	movs	r1, #248	; 0xf8
 80022b4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80022bc:	fa91 f1a1 	rbit	r1, r1
 80022c0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80022c4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80022c8:	fab1 f181 	clz	r1, r1
 80022cc:	b2c9      	uxtb	r1, r1
 80022ce:	408b      	lsls	r3, r1
 80022d0:	4920      	ldr	r1, [pc, #128]	; (8002354 <HAL_RCC_OscConfig+0x5e8>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	600b      	str	r3, [r1, #0]
 80022d6:	e06c      	b.n	80023b2 <HAL_RCC_OscConfig+0x646>
 80022d8:	2301      	movs	r3, #1
 80022da:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80022ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	461a      	mov	r2, r3
 8002300:	2300      	movs	r3, #0
 8002302:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7fe ff6c 	bl	80011e0 <HAL_GetTick>
 8002308:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230c:	e00a      	b.n	8002324 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800230e:	f7fe ff67 	bl	80011e0 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d902      	bls.n	8002324 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	f000 bd5a 	b.w	8002dd8 <HAL_RCC_OscConfig+0x106c>
 8002324:	2302      	movs	r3, #2
 8002326:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002336:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233a:	fab3 f383 	clz	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	095b      	lsrs	r3, r3, #5
 8002342:	b2db      	uxtb	r3, r3
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b01      	cmp	r3, #1
 800234c:	d104      	bne.n	8002358 <HAL_RCC_OscConfig+0x5ec>
 800234e:	4b01      	ldr	r3, [pc, #4]	; (8002354 <HAL_RCC_OscConfig+0x5e8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	e015      	b.n	8002380 <HAL_RCC_OscConfig+0x614>
 8002354:	40021000 	.word	0x40021000
 8002358:	2302      	movs	r3, #2
 800235a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002362:	fa93 f3a3 	rbit	r3, r3
 8002366:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800236a:	2302      	movs	r3, #2
 800236c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002370:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002374:	fa93 f3a3 	rbit	r3, r3
 8002378:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800237c:	4bc8      	ldr	r3, [pc, #800]	; (80026a0 <HAL_RCC_OscConfig+0x934>)
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	2202      	movs	r2, #2
 8002382:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002386:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800238a:	fa92 f2a2 	rbit	r2, r2
 800238e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002392:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002396:	fab2 f282 	clz	r2, r2
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	f042 0220 	orr.w	r2, r2, #32
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	f002 021f 	and.w	r2, r2, #31
 80023a6:	2101      	movs	r1, #1
 80023a8:	fa01 f202 	lsl.w	r2, r1, r2
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1ad      	bne.n	800230e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 8110 	beq.w	80025e8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d079      	beq.n	80024cc <HAL_RCC_OscConfig+0x760>
 80023d8:	2301      	movs	r3, #1
 80023da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80023e2:	fa93 f3a3 	rbit	r3, r3
 80023e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80023ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ee:	fab3 f383 	clz	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	461a      	mov	r2, r3
 80023f6:	4bab      	ldr	r3, [pc, #684]	; (80026a4 <HAL_RCC_OscConfig+0x938>)
 80023f8:	4413      	add	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	461a      	mov	r2, r3
 80023fe:	2301      	movs	r3, #1
 8002400:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002402:	f7fe feed 	bl	80011e0 <HAL_GetTick>
 8002406:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240a:	e00a      	b.n	8002422 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800240c:	f7fe fee8 	bl	80011e0 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d902      	bls.n	8002422 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	f000 bcdb 	b.w	8002dd8 <HAL_RCC_OscConfig+0x106c>
 8002422:	2302      	movs	r3, #2
 8002424:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002428:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002438:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800243c:	2202      	movs	r2, #2
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002444:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	fa93 f2a3 	rbit	r2, r3
 800244e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002452:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002460:	2202      	movs	r2, #2
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	fa93 f2a3 	rbit	r2, r3
 8002472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002476:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800247a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247c:	4b88      	ldr	r3, [pc, #544]	; (80026a0 <HAL_RCC_OscConfig+0x934>)
 800247e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002484:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002488:	2102      	movs	r1, #2
 800248a:	6019      	str	r1, [r3, #0]
 800248c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002490:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	fa93 f1a3 	rbit	r1, r3
 800249a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80024a2:	6019      	str	r1, [r3, #0]
  return result;
 80024a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	f003 031f 	and.w	r3, r3, #31
 80024be:	2101      	movs	r1, #1
 80024c0:	fa01 f303 	lsl.w	r3, r1, r3
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0a0      	beq.n	800240c <HAL_RCC_OscConfig+0x6a0>
 80024ca:	e08d      	b.n	80025e8 <HAL_RCC_OscConfig+0x87c>
 80024cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024d4:	2201      	movs	r2, #1
 80024d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	fa93 f2a3 	rbit	r2, r3
 80024e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024ee:	601a      	str	r2, [r3, #0]
  return result;
 80024f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024f8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	461a      	mov	r2, r3
 8002502:	4b68      	ldr	r3, [pc, #416]	; (80026a4 <HAL_RCC_OscConfig+0x938>)
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	461a      	mov	r2, r3
 800250a:	2300      	movs	r3, #0
 800250c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250e:	f7fe fe67 	bl	80011e0 <HAL_GetTick>
 8002512:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002516:	e00a      	b.n	800252e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002518:	f7fe fe62 	bl	80011e0 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d902      	bls.n	800252e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	f000 bc55 	b.w	8002dd8 <HAL_RCC_OscConfig+0x106c>
 800252e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002532:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002536:	2202      	movs	r2, #2
 8002538:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	fa93 f2a3 	rbit	r2, r3
 8002548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002556:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800255a:	2202      	movs	r2, #2
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002562:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	fa93 f2a3 	rbit	r2, r3
 800256c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002570:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800257e:	2202      	movs	r2, #2
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002586:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	fa93 f2a3 	rbit	r2, r3
 8002590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002594:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002598:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800259a:	4b41      	ldr	r3, [pc, #260]	; (80026a0 <HAL_RCC_OscConfig+0x934>)
 800259c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800259e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80025a6:	2102      	movs	r1, #2
 80025a8:	6019      	str	r1, [r3, #0]
 80025aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	fa93 f1a3 	rbit	r1, r3
 80025b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025bc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80025c0:	6019      	str	r1, [r3, #0]
  return result;
 80025c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	fab3 f383 	clz	r3, r3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	f003 031f 	and.w	r3, r3, #31
 80025dc:	2101      	movs	r1, #1
 80025de:	fa01 f303 	lsl.w	r3, r1, r3
 80025e2:	4013      	ands	r3, r2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d197      	bne.n	8002518 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 81a1 	beq.w	8002940 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fe:	2300      	movs	r3, #0
 8002600:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002604:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <HAL_RCC_OscConfig+0x934>)
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d116      	bne.n	800263e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002610:	4b23      	ldr	r3, [pc, #140]	; (80026a0 <HAL_RCC_OscConfig+0x934>)
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	4a22      	ldr	r2, [pc, #136]	; (80026a0 <HAL_RCC_OscConfig+0x934>)
 8002616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800261a:	61d3      	str	r3, [r2, #28]
 800261c:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <HAL_RCC_OscConfig+0x934>)
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002628:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002632:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002636:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002638:	2301      	movs	r3, #1
 800263a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263e:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <HAL_RCC_OscConfig+0x93c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	d11a      	bne.n	8002680 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800264a:	4b17      	ldr	r3, [pc, #92]	; (80026a8 <HAL_RCC_OscConfig+0x93c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a16      	ldr	r2, [pc, #88]	; (80026a8 <HAL_RCC_OscConfig+0x93c>)
 8002650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002654:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002656:	f7fe fdc3 	bl	80011e0 <HAL_GetTick>
 800265a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265e:	e009      	b.n	8002674 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002660:	f7fe fdbe 	bl	80011e0 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b64      	cmp	r3, #100	; 0x64
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e3b1      	b.n	8002dd8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <HAL_RCC_OscConfig+0x93c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0ef      	beq.n	8002660 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002684:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d10d      	bne.n	80026ac <HAL_RCC_OscConfig+0x940>
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <HAL_RCC_OscConfig+0x934>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	4a02      	ldr	r2, [pc, #8]	; (80026a0 <HAL_RCC_OscConfig+0x934>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6213      	str	r3, [r2, #32]
 800269c:	e03c      	b.n	8002718 <HAL_RCC_OscConfig+0x9ac>
 800269e:	bf00      	nop
 80026a0:	40021000 	.word	0x40021000
 80026a4:	10908120 	.word	0x10908120
 80026a8:	40007000 	.word	0x40007000
 80026ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10c      	bne.n	80026d6 <HAL_RCC_OscConfig+0x96a>
 80026bc:	4bc1      	ldr	r3, [pc, #772]	; (80029c4 <HAL_RCC_OscConfig+0xc58>)
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	4ac0      	ldr	r2, [pc, #768]	; (80029c4 <HAL_RCC_OscConfig+0xc58>)
 80026c2:	f023 0301 	bic.w	r3, r3, #1
 80026c6:	6213      	str	r3, [r2, #32]
 80026c8:	4bbe      	ldr	r3, [pc, #760]	; (80029c4 <HAL_RCC_OscConfig+0xc58>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	4abd      	ldr	r2, [pc, #756]	; (80029c4 <HAL_RCC_OscConfig+0xc58>)
 80026ce:	f023 0304 	bic.w	r3, r3, #4
 80026d2:	6213      	str	r3, [r2, #32]
 80026d4:	e020      	b.n	8002718 <HAL_RCC_OscConfig+0x9ac>
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	2b05      	cmp	r3, #5
 80026e4:	d10c      	bne.n	8002700 <HAL_RCC_OscConfig+0x994>
 80026e6:	4bb7      	ldr	r3, [pc, #732]	; (80029c4 <HAL_RCC_OscConfig+0xc58>)
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	4ab6      	ldr	r2, [pc, #728]	; (80029c4 <HAL_RCC_OscConfig+0xc58>)
 80026ec:	f043 0304 	orr.w	r3, r3, #4
 80026f0:	6213      	str	r3, [r2, #32]
 80026f2:	4bb4      	ldr	r3, [pc, #720]	; (80029c4 <HAL_RCC_OscConfig+0xc58>)
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	4ab3      	ldr	r2, [pc, #716]	; (80029c4 <HAL_RCC_OscConfig+0xc58>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	6213      	str	r3, [r2, #32]
 80026fe:	e00b      	b.n	8002718 <HAL_RCC_OscConfig+0x9ac>
 8002700:	4bb0      	ldr	r3, [pc, #704]	; (80029c4 <HAL_RCC_OscConfig+0xc58>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	4aaf      	ldr	r2, [pc, #700]	; (80029c4 <HAL_RCC_OscConfig+0xc58>)
 8002706:	f023 0301 	bic.w	r3, r3, #1
 800270a:	6213      	str	r3, [r2, #32]
 800270c:	4bad      	ldr	r3, [pc, #692]	; (80029c4 <HAL_RCC_OscConfig+0xc58>)
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	4aac      	ldr	r2, [pc, #688]	; (80029c4 <HAL_RCC_OscConfig+0xc58>)
 8002712:	f023 0304 	bic.w	r3, r3, #4
 8002716:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 8081 	beq.w	800282c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272a:	f7fe fd59 	bl	80011e0 <HAL_GetTick>
 800272e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002732:	e00b      	b.n	800274c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002734:	f7fe fd54 	bl	80011e0 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f241 3288 	movw	r2, #5000	; 0x1388
 8002744:	4293      	cmp	r3, r2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e345      	b.n	8002dd8 <HAL_RCC_OscConfig+0x106c>
 800274c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002750:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002754:	2202      	movs	r2, #2
 8002756:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	fa93 f2a3 	rbit	r2, r3
 8002766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002774:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002778:	2202      	movs	r2, #2
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002780:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	fa93 f2a3 	rbit	r2, r3
 800278a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002792:	601a      	str	r2, [r3, #0]
  return result;
 8002794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002798:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800279c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279e:	fab3 f383 	clz	r3, r3
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	095b      	lsrs	r3, r3, #5
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	f043 0302 	orr.w	r3, r3, #2
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d102      	bne.n	80027b8 <HAL_RCC_OscConfig+0xa4c>
 80027b2:	4b84      	ldr	r3, [pc, #528]	; (80029c4 <HAL_RCC_OscConfig+0xc58>)
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	e013      	b.n	80027e0 <HAL_RCC_OscConfig+0xa74>
 80027b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027bc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80027c0:	2202      	movs	r2, #2
 80027c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	fa93 f2a3 	rbit	r2, r3
 80027d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	4b79      	ldr	r3, [pc, #484]	; (80029c4 <HAL_RCC_OscConfig+0xc58>)
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027e4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80027e8:	2102      	movs	r1, #2
 80027ea:	6011      	str	r1, [r2, #0]
 80027ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027f0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80027f4:	6812      	ldr	r2, [r2, #0]
 80027f6:	fa92 f1a2 	rbit	r1, r2
 80027fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027fe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002802:	6011      	str	r1, [r2, #0]
  return result;
 8002804:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002808:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	fab2 f282 	clz	r2, r2
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	f002 021f 	and.w	r2, r2, #31
 800281e:	2101      	movs	r1, #1
 8002820:	fa01 f202 	lsl.w	r2, r1, r2
 8002824:	4013      	ands	r3, r2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d084      	beq.n	8002734 <HAL_RCC_OscConfig+0x9c8>
 800282a:	e07f      	b.n	800292c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282c:	f7fe fcd8 	bl	80011e0 <HAL_GetTick>
 8002830:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002834:	e00b      	b.n	800284e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002836:	f7fe fcd3 	bl	80011e0 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	f241 3288 	movw	r2, #5000	; 0x1388
 8002846:	4293      	cmp	r3, r2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e2c4      	b.n	8002dd8 <HAL_RCC_OscConfig+0x106c>
 800284e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002852:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002856:	2202      	movs	r2, #2
 8002858:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	fa93 f2a3 	rbit	r2, r3
 8002868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002876:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800287a:	2202      	movs	r2, #2
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002882:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	fa93 f2a3 	rbit	r2, r3
 800288c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002890:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002894:	601a      	str	r2, [r3, #0]
  return result;
 8002896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800289e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a0:	fab3 f383 	clz	r3, r3
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	f043 0302 	orr.w	r3, r3, #2
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d102      	bne.n	80028ba <HAL_RCC_OscConfig+0xb4e>
 80028b4:	4b43      	ldr	r3, [pc, #268]	; (80029c4 <HAL_RCC_OscConfig+0xc58>)
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	e013      	b.n	80028e2 <HAL_RCC_OscConfig+0xb76>
 80028ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028be:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80028c2:	2202      	movs	r2, #2
 80028c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	fa93 f2a3 	rbit	r2, r3
 80028d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	4b39      	ldr	r3, [pc, #228]	; (80029c4 <HAL_RCC_OscConfig+0xc58>)
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028e6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80028ea:	2102      	movs	r1, #2
 80028ec:	6011      	str	r1, [r2, #0]
 80028ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028f2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	fa92 f1a2 	rbit	r1, r2
 80028fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002900:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002904:	6011      	str	r1, [r2, #0]
  return result;
 8002906:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800290a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	fab2 f282 	clz	r2, r2
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	f002 021f 	and.w	r2, r2, #31
 8002920:	2101      	movs	r1, #1
 8002922:	fa01 f202 	lsl.w	r2, r1, r2
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d184      	bne.n	8002836 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800292c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002930:	2b01      	cmp	r3, #1
 8002932:	d105      	bne.n	8002940 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002934:	4b23      	ldr	r3, [pc, #140]	; (80029c4 <HAL_RCC_OscConfig+0xc58>)
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	4a22      	ldr	r2, [pc, #136]	; (80029c4 <HAL_RCC_OscConfig+0xc58>)
 800293a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800293e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002944:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 8242 	beq.w	8002dd6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002952:	4b1c      	ldr	r3, [pc, #112]	; (80029c4 <HAL_RCC_OscConfig+0xc58>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b08      	cmp	r3, #8
 800295c:	f000 8213 	beq.w	8002d86 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002964:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	2b02      	cmp	r3, #2
 800296e:	f040 8162 	bne.w	8002c36 <HAL_RCC_OscConfig+0xeca>
 8002972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002976:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800297a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800297e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002984:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	fa93 f2a3 	rbit	r2, r3
 800298e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002992:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002996:	601a      	str	r2, [r3, #0]
  return result;
 8002998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80029a0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a2:	fab3 f383 	clz	r3, r3
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	461a      	mov	r2, r3
 80029b4:	2300      	movs	r3, #0
 80029b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b8:	f7fe fc12 	bl	80011e0 <HAL_GetTick>
 80029bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c0:	e00c      	b.n	80029dc <HAL_RCC_OscConfig+0xc70>
 80029c2:	bf00      	nop
 80029c4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c8:	f7fe fc0a 	bl	80011e0 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e1fd      	b.n	8002dd8 <HAL_RCC_OscConfig+0x106c>
 80029dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80029e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ee:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	fa93 f2a3 	rbit	r2, r3
 80029f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a00:	601a      	str	r2, [r3, #0]
  return result;
 8002a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a06:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a0a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a0c:	fab3 f383 	clz	r3, r3
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d102      	bne.n	8002a26 <HAL_RCC_OscConfig+0xcba>
 8002a20:	4bb0      	ldr	r3, [pc, #704]	; (8002ce4 <HAL_RCC_OscConfig+0xf78>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	e027      	b.n	8002a76 <HAL_RCC_OscConfig+0xd0a>
 8002a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a38:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	fa93 f2a3 	rbit	r2, r3
 8002a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a46:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a50:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	fa93 f2a3 	rbit	r2, r3
 8002a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	4b9c      	ldr	r3, [pc, #624]	; (8002ce4 <HAL_RCC_OscConfig+0xf78>)
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a7a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a7e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a82:	6011      	str	r1, [r2, #0]
 8002a84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a88:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a8c:	6812      	ldr	r2, [r2, #0]
 8002a8e:	fa92 f1a2 	rbit	r1, r2
 8002a92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a96:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a9a:	6011      	str	r1, [r2, #0]
  return result;
 8002a9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aa0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002aa4:	6812      	ldr	r2, [r2, #0]
 8002aa6:	fab2 f282 	clz	r2, r2
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	f042 0220 	orr.w	r2, r2, #32
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	f002 021f 	and.w	r2, r2, #31
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d182      	bne.n	80029c8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ac2:	4b88      	ldr	r3, [pc, #544]	; (8002ce4 <HAL_RCC_OscConfig+0xf78>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ace:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ada:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	430b      	orrs	r3, r1
 8002ae4:	497f      	ldr	r1, [pc, #508]	; (8002ce4 <HAL_RCC_OscConfig+0xf78>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	604b      	str	r3, [r1, #4]
 8002aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aee:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002af2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002af6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	fa93 f2a3 	rbit	r2, r3
 8002b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b0e:	601a      	str	r2, [r3, #0]
  return result;
 8002b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b14:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b18:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7fe fb56 	bl	80011e0 <HAL_GetTick>
 8002b34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b38:	e009      	b.n	8002b4e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b3a:	f7fe fb51 	bl	80011e0 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e144      	b.n	8002dd8 <HAL_RCC_OscConfig+0x106c>
 8002b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b52:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b60:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	fa93 f2a3 	rbit	r2, r3
 8002b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b72:	601a      	str	r2, [r3, #0]
  return result;
 8002b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b78:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b7e:	fab3 f383 	clz	r3, r3
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	095b      	lsrs	r3, r3, #5
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d102      	bne.n	8002b98 <HAL_RCC_OscConfig+0xe2c>
 8002b92:	4b54      	ldr	r3, [pc, #336]	; (8002ce4 <HAL_RCC_OscConfig+0xf78>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	e027      	b.n	8002be8 <HAL_RCC_OscConfig+0xe7c>
 8002b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002ba0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ba4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002baa:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	fa93 f2a3 	rbit	r2, r3
 8002bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002bc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	fa93 f2a3 	rbit	r2, r3
 8002bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bde:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	4b3f      	ldr	r3, [pc, #252]	; (8002ce4 <HAL_RCC_OscConfig+0xf78>)
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bec:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002bf0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bf4:	6011      	str	r1, [r2, #0]
 8002bf6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bfa:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	fa92 f1a2 	rbit	r1, r2
 8002c04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c08:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c0c:	6011      	str	r1, [r2, #0]
  return result;
 8002c0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c12:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	fab2 f282 	clz	r2, r2
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	f042 0220 	orr.w	r2, r2, #32
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	f002 021f 	and.w	r2, r2, #31
 8002c28:	2101      	movs	r1, #1
 8002c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d082      	beq.n	8002b3a <HAL_RCC_OscConfig+0xdce>
 8002c34:	e0cf      	b.n	8002dd6 <HAL_RCC_OscConfig+0x106a>
 8002c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c48:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	fa93 f2a3 	rbit	r2, r3
 8002c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c56:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c5a:	601a      	str	r2, [r3, #0]
  return result;
 8002c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c60:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c64:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	461a      	mov	r2, r3
 8002c78:	2300      	movs	r3, #0
 8002c7a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fab0 	bl	80011e0 <HAL_GetTick>
 8002c80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c84:	e009      	b.n	8002c9a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c86:	f7fe faab 	bl	80011e0 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e09e      	b.n	8002dd8 <HAL_RCC_OscConfig+0x106c>
 8002c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002ca2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ca6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cac:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	fa93 f2a3 	rbit	r2, r3
 8002cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cba:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002cbe:	601a      	str	r2, [r3, #0]
  return result;
 8002cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002cc8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cca:	fab3 f383 	clz	r3, r3
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d104      	bne.n	8002ce8 <HAL_RCC_OscConfig+0xf7c>
 8002cde:	4b01      	ldr	r3, [pc, #4]	; (8002ce4 <HAL_RCC_OscConfig+0xf78>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	e029      	b.n	8002d38 <HAL_RCC_OscConfig+0xfcc>
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cec:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002cf0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	fa93 f2a3 	rbit	r2, r3
 8002d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d08:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d12:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d20:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	fa93 f2a3 	rbit	r2, r3
 8002d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	4b2b      	ldr	r3, [pc, #172]	; (8002de4 <HAL_RCC_OscConfig+0x1078>)
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d3c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d40:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d44:	6011      	str	r1, [r2, #0]
 8002d46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d4a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d4e:	6812      	ldr	r2, [r2, #0]
 8002d50:	fa92 f1a2 	rbit	r1, r2
 8002d54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d58:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d5c:	6011      	str	r1, [r2, #0]
  return result;
 8002d5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d62:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	fab2 f282 	clz	r2, r2
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	f042 0220 	orr.w	r2, r2, #32
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	f002 021f 	and.w	r2, r2, #31
 8002d78:	2101      	movs	r1, #1
 8002d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d180      	bne.n	8002c86 <HAL_RCC_OscConfig+0xf1a>
 8002d84:	e027      	b.n	8002dd6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e01e      	b.n	8002dd8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d9a:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <HAL_RCC_OscConfig+0x1078>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002da2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002da6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d10b      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002dba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002dbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d001      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000

08002de8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b09e      	sub	sp, #120	; 0x78
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e162      	b.n	80030c6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e00:	4b90      	ldr	r3, [pc, #576]	; (8003044 <HAL_RCC_ClockConfig+0x25c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d910      	bls.n	8002e30 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0e:	4b8d      	ldr	r3, [pc, #564]	; (8003044 <HAL_RCC_ClockConfig+0x25c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 0207 	bic.w	r2, r3, #7
 8002e16:	498b      	ldr	r1, [pc, #556]	; (8003044 <HAL_RCC_ClockConfig+0x25c>)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1e:	4b89      	ldr	r3, [pc, #548]	; (8003044 <HAL_RCC_ClockConfig+0x25c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d001      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e14a      	b.n	80030c6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e3c:	4b82      	ldr	r3, [pc, #520]	; (8003048 <HAL_RCC_ClockConfig+0x260>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	497f      	ldr	r1, [pc, #508]	; (8003048 <HAL_RCC_ClockConfig+0x260>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 80dc 	beq.w	8003014 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d13c      	bne.n	8002ede <HAL_RCC_ClockConfig+0xf6>
 8002e64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e68:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e6c:	fa93 f3a3 	rbit	r3, r3
 8002e70:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e74:	fab3 f383 	clz	r3, r3
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d102      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xa6>
 8002e88:	4b6f      	ldr	r3, [pc, #444]	; (8003048 <HAL_RCC_ClockConfig+0x260>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	e00f      	b.n	8002eae <HAL_RCC_ClockConfig+0xc6>
 8002e8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	667b      	str	r3, [r7, #100]	; 0x64
 8002e9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ea0:	663b      	str	r3, [r7, #96]	; 0x60
 8002ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ea4:	fa93 f3a3 	rbit	r3, r3
 8002ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002eaa:	4b67      	ldr	r3, [pc, #412]	; (8003048 <HAL_RCC_ClockConfig+0x260>)
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002eb2:	65ba      	str	r2, [r7, #88]	; 0x58
 8002eb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002eb6:	fa92 f2a2 	rbit	r2, r2
 8002eba:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002ebc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ebe:	fab2 f282 	clz	r2, r2
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	f042 0220 	orr.w	r2, r2, #32
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	f002 021f 	and.w	r2, r2, #31
 8002ece:	2101      	movs	r1, #1
 8002ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d17b      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e0f3      	b.n	80030c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d13c      	bne.n	8002f60 <HAL_RCC_ClockConfig+0x178>
 8002ee6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d102      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x128>
 8002f0a:	4b4f      	ldr	r3, [pc, #316]	; (8003048 <HAL_RCC_ClockConfig+0x260>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	e00f      	b.n	8002f30 <HAL_RCC_ClockConfig+0x148>
 8002f10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f18:	fa93 f3a3 	rbit	r3, r3
 8002f1c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f22:	643b      	str	r3, [r7, #64]	; 0x40
 8002f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f26:	fa93 f3a3 	rbit	r3, r3
 8002f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f2c:	4b46      	ldr	r3, [pc, #280]	; (8003048 <HAL_RCC_ClockConfig+0x260>)
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f34:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f38:	fa92 f2a2 	rbit	r2, r2
 8002f3c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f40:	fab2 f282 	clz	r2, r2
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	f042 0220 	orr.w	r2, r2, #32
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	f002 021f 	and.w	r2, r2, #31
 8002f50:	2101      	movs	r1, #1
 8002f52:	fa01 f202 	lsl.w	r2, r1, r2
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d13a      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0b2      	b.n	80030c6 <HAL_RCC_ClockConfig+0x2de>
 8002f60:	2302      	movs	r3, #2
 8002f62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f66:	fa93 f3a3 	rbit	r3, r3
 8002f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f6e:	fab3 f383 	clz	r3, r3
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	095b      	lsrs	r3, r3, #5
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d102      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x1a0>
 8002f82:	4b31      	ldr	r3, [pc, #196]	; (8003048 <HAL_RCC_ClockConfig+0x260>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	e00d      	b.n	8002fa4 <HAL_RCC_ClockConfig+0x1bc>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8e:	fa93 f3a3 	rbit	r3, r3
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
 8002f94:	2302      	movs	r3, #2
 8002f96:	623b      	str	r3, [r7, #32]
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	fa93 f3a3 	rbit	r3, r3
 8002f9e:	61fb      	str	r3, [r7, #28]
 8002fa0:	4b29      	ldr	r3, [pc, #164]	; (8003048 <HAL_RCC_ClockConfig+0x260>)
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	61ba      	str	r2, [r7, #24]
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	fa92 f2a2 	rbit	r2, r2
 8002fae:	617a      	str	r2, [r7, #20]
  return result;
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	fab2 f282 	clz	r2, r2
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	f042 0220 	orr.w	r2, r2, #32
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	f002 021f 	and.w	r2, r2, #31
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e079      	b.n	80030c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd2:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <HAL_RCC_ClockConfig+0x260>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f023 0203 	bic.w	r2, r3, #3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	491a      	ldr	r1, [pc, #104]	; (8003048 <HAL_RCC_ClockConfig+0x260>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe4:	f7fe f8fc 	bl	80011e0 <HAL_GetTick>
 8002fe8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fec:	f7fe f8f8 	bl	80011e0 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e061      	b.n	80030c6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	4b11      	ldr	r3, [pc, #68]	; (8003048 <HAL_RCC_ClockConfig+0x260>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f003 020c 	and.w	r2, r3, #12
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	429a      	cmp	r2, r3
 8003012:	d1eb      	bne.n	8002fec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_RCC_ClockConfig+0x25c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d214      	bcs.n	800304c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b08      	ldr	r3, [pc, #32]	; (8003044 <HAL_RCC_ClockConfig+0x25c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 0207 	bic.w	r2, r3, #7
 800302a:	4906      	ldr	r1, [pc, #24]	; (8003044 <HAL_RCC_ClockConfig+0x25c>)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	4b04      	ldr	r3, [pc, #16]	; (8003044 <HAL_RCC_ClockConfig+0x25c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d005      	beq.n	800304c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e040      	b.n	80030c6 <HAL_RCC_ClockConfig+0x2de>
 8003044:	40022000 	.word	0x40022000
 8003048:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003058:	4b1d      	ldr	r3, [pc, #116]	; (80030d0 <HAL_RCC_ClockConfig+0x2e8>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	491a      	ldr	r1, [pc, #104]	; (80030d0 <HAL_RCC_ClockConfig+0x2e8>)
 8003066:	4313      	orrs	r3, r2
 8003068:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d009      	beq.n	800308a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003076:	4b16      	ldr	r3, [pc, #88]	; (80030d0 <HAL_RCC_ClockConfig+0x2e8>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4912      	ldr	r1, [pc, #72]	; (80030d0 <HAL_RCC_ClockConfig+0x2e8>)
 8003086:	4313      	orrs	r3, r2
 8003088:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800308a:	f000 f829 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 800308e:	4601      	mov	r1, r0
 8003090:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <HAL_RCC_ClockConfig+0x2e8>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003098:	22f0      	movs	r2, #240	; 0xf0
 800309a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	fa92 f2a2 	rbit	r2, r2
 80030a2:	60fa      	str	r2, [r7, #12]
  return result;
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	fab2 f282 	clz	r2, r2
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	40d3      	lsrs	r3, r2
 80030ae:	4a09      	ldr	r2, [pc, #36]	; (80030d4 <HAL_RCC_ClockConfig+0x2ec>)
 80030b0:	5cd3      	ldrb	r3, [r2, r3]
 80030b2:	fa21 f303 	lsr.w	r3, r1, r3
 80030b6:	4a08      	ldr	r2, [pc, #32]	; (80030d8 <HAL_RCC_ClockConfig+0x2f0>)
 80030b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80030ba:	4b08      	ldr	r3, [pc, #32]	; (80030dc <HAL_RCC_ClockConfig+0x2f4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fe f84a 	bl	8001158 <HAL_InitTick>
  
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3778      	adds	r7, #120	; 0x78
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40021000 	.word	0x40021000
 80030d4:	08005324 	.word	0x08005324
 80030d8:	20000000 	.word	0x20000000
 80030dc:	20000004 	.word	0x20000004

080030e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b08b      	sub	sp, #44	; 0x2c
 80030e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	61fb      	str	r3, [r7, #28]
 80030ea:	2300      	movs	r3, #0
 80030ec:	61bb      	str	r3, [r7, #24]
 80030ee:	2300      	movs	r3, #0
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80030fa:	4b29      	ldr	r3, [pc, #164]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b04      	cmp	r3, #4
 8003108:	d002      	beq.n	8003110 <HAL_RCC_GetSysClockFreq+0x30>
 800310a:	2b08      	cmp	r3, #8
 800310c:	d003      	beq.n	8003116 <HAL_RCC_GetSysClockFreq+0x36>
 800310e:	e03c      	b.n	800318a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003110:	4b24      	ldr	r3, [pc, #144]	; (80031a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003112:	623b      	str	r3, [r7, #32]
      break;
 8003114:	e03c      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800311c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003120:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	fa92 f2a2 	rbit	r2, r2
 8003128:	607a      	str	r2, [r7, #4]
  return result;
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	fab2 f282 	clz	r2, r2
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	40d3      	lsrs	r3, r2
 8003134:	4a1c      	ldr	r2, [pc, #112]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003136:	5cd3      	ldrb	r3, [r2, r3]
 8003138:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800313a:	4b19      	ldr	r3, [pc, #100]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	220f      	movs	r2, #15
 8003144:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	fa92 f2a2 	rbit	r2, r2
 800314c:	60fa      	str	r2, [r7, #12]
  return result;
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	fab2 f282 	clz	r2, r2
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	40d3      	lsrs	r3, r2
 8003158:	4a14      	ldr	r2, [pc, #80]	; (80031ac <HAL_RCC_GetSysClockFreq+0xcc>)
 800315a:	5cd3      	ldrb	r3, [r2, r3]
 800315c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d008      	beq.n	800317a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003168:	4a0e      	ldr	r2, [pc, #56]	; (80031a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	fb02 f303 	mul.w	r3, r2, r3
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
 8003178:	e004      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	4a0c      	ldr	r2, [pc, #48]	; (80031b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800317e:	fb02 f303 	mul.w	r3, r2, r3
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	623b      	str	r3, [r7, #32]
      break;
 8003188:	e002      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800318a:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800318c:	623b      	str	r3, [r7, #32]
      break;
 800318e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003190:	6a3b      	ldr	r3, [r7, #32]
}
 8003192:	4618      	mov	r0, r3
 8003194:	372c      	adds	r7, #44	; 0x2c
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40021000 	.word	0x40021000
 80031a4:	007a1200 	.word	0x007a1200
 80031a8:	0800533c 	.word	0x0800533c
 80031ac:	0800534c 	.word	0x0800534c
 80031b0:	003d0900 	.word	0x003d0900

080031b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031b8:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031ba:	681b      	ldr	r3, [r3, #0]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20000000 	.word	0x20000000

080031cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80031d2:	f7ff ffef 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 80031d6:	4601      	mov	r1, r0
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031e0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80031e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	fa92 f2a2 	rbit	r2, r2
 80031ec:	603a      	str	r2, [r7, #0]
  return result;
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	fab2 f282 	clz	r2, r2
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	40d3      	lsrs	r3, r2
 80031f8:	4a04      	ldr	r2, [pc, #16]	; (800320c <HAL_RCC_GetPCLK1Freq+0x40>)
 80031fa:	5cd3      	ldrb	r3, [r2, r3]
 80031fc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003200:	4618      	mov	r0, r3
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40021000 	.word	0x40021000
 800320c:	08005334 	.word	0x08005334

08003210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003216:	f7ff ffcd 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 800321a:	4601      	mov	r1, r0
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003224:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003228:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	fa92 f2a2 	rbit	r2, r2
 8003230:	603a      	str	r2, [r7, #0]
  return result;
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	fab2 f282 	clz	r2, r2
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	40d3      	lsrs	r3, r2
 800323c:	4a04      	ldr	r2, [pc, #16]	; (8003250 <HAL_RCC_GetPCLK2Freq+0x40>)
 800323e:	5cd3      	ldrb	r3, [r2, r3]
 8003240:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40021000 	.word	0x40021000
 8003250:	08005334 	.word	0x08005334

08003254 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b092      	sub	sp, #72	; 0x48
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003264:	2300      	movs	r3, #0
 8003266:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 80d4 	beq.w	8003420 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003278:	4b4e      	ldr	r3, [pc, #312]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10e      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003284:	4b4b      	ldr	r3, [pc, #300]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	4a4a      	ldr	r2, [pc, #296]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800328e:	61d3      	str	r3, [r2, #28]
 8003290:	4b48      	ldr	r3, [pc, #288]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329c:	2301      	movs	r3, #1
 800329e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a2:	4b45      	ldr	r3, [pc, #276]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d118      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ae:	4b42      	ldr	r3, [pc, #264]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a41      	ldr	r2, [pc, #260]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ba:	f7fd ff91 	bl	80011e0 <HAL_GetTick>
 80032be:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c0:	e008      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c2:	f7fd ff8d 	bl	80011e0 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b64      	cmp	r3, #100	; 0x64
 80032ce:	d901      	bls.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e14b      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d4:	4b38      	ldr	r3, [pc, #224]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032e0:	4b34      	ldr	r3, [pc, #208]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 8084 	beq.w	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d07c      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003300:	4b2c      	ldr	r3, [pc, #176]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003308:	63fb      	str	r3, [r7, #60]	; 0x3c
 800330a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800330e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800331a:	fab3 f383 	clz	r3, r3
 800331e:	b2db      	uxtb	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	4b26      	ldr	r3, [pc, #152]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	461a      	mov	r2, r3
 800332a:	2301      	movs	r3, #1
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003332:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003336:	fa93 f3a3 	rbit	r3, r3
 800333a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800333c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	b2db      	uxtb	r3, r3
 8003344:	461a      	mov	r2, r3
 8003346:	4b1d      	ldr	r3, [pc, #116]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	461a      	mov	r2, r3
 800334e:	2300      	movs	r3, #0
 8003350:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003352:	4a18      	ldr	r2, [pc, #96]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003356:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d04b      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003362:	f7fd ff3d 	bl	80011e0 <HAL_GetTick>
 8003366:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003368:	e00a      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336a:	f7fd ff39 	bl	80011e0 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	f241 3288 	movw	r2, #5000	; 0x1388
 8003378:	4293      	cmp	r3, r2
 800337a:	d901      	bls.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e0f5      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003380:	2302      	movs	r3, #2
 8003382:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003386:	fa93 f3a3 	rbit	r3, r3
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
 800338c:	2302      	movs	r3, #2
 800338e:	623b      	str	r3, [r7, #32]
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	fa93 f3a3 	rbit	r3, r3
 8003396:	61fb      	str	r3, [r7, #28]
  return result;
 8003398:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339a:	fab3 f383 	clz	r3, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	095b      	lsrs	r3, r3, #5
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f043 0302 	orr.w	r3, r3, #2
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d108      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80033ae:	4b01      	ldr	r3, [pc, #4]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	e00d      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80033b4:	40021000 	.word	0x40021000
 80033b8:	40007000 	.word	0x40007000
 80033bc:	10908100 	.word	0x10908100
 80033c0:	2302      	movs	r3, #2
 80033c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	fa93 f3a3 	rbit	r3, r3
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	4b69      	ldr	r3, [pc, #420]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	2202      	movs	r2, #2
 80033d2:	613a      	str	r2, [r7, #16]
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	fa92 f2a2 	rbit	r2, r2
 80033da:	60fa      	str	r2, [r7, #12]
  return result;
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	fab2 f282 	clz	r2, r2
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	f002 021f 	and.w	r2, r2, #31
 80033ee:	2101      	movs	r1, #1
 80033f0:	fa01 f202 	lsl.w	r2, r1, r2
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0b7      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80033fa:	4b5e      	ldr	r3, [pc, #376]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	495b      	ldr	r1, [pc, #364]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003408:	4313      	orrs	r3, r2
 800340a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800340c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003410:	2b01      	cmp	r3, #1
 8003412:	d105      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003414:	4b57      	ldr	r3, [pc, #348]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	4a56      	ldr	r2, [pc, #344]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800341a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800342c:	4b51      	ldr	r3, [pc, #324]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800342e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003430:	f023 0203 	bic.w	r2, r3, #3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	494e      	ldr	r1, [pc, #312]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800343a:	4313      	orrs	r3, r2
 800343c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b00      	cmp	r3, #0
 8003448:	d008      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800344a:	4b4a      	ldr	r3, [pc, #296]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	f023 0210 	bic.w	r2, r3, #16
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	4947      	ldr	r1, [pc, #284]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003458:	4313      	orrs	r3, r2
 800345a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003468:	4b42      	ldr	r3, [pc, #264]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003474:	493f      	ldr	r1, [pc, #252]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003476:	4313      	orrs	r3, r2
 8003478:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d008      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003486:	4b3b      	ldr	r3, [pc, #236]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	f023 0220 	bic.w	r2, r3, #32
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	4938      	ldr	r1, [pc, #224]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003494:	4313      	orrs	r3, r2
 8003496:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d008      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034a4:	4b33      	ldr	r3, [pc, #204]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	4930      	ldr	r1, [pc, #192]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d008      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034c2:	4b2c      	ldr	r3, [pc, #176]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	4929      	ldr	r1, [pc, #164]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80034e0:	4b24      	ldr	r3, [pc, #144]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	4921      	ldr	r1, [pc, #132]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d008      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80034fe:	4b1d      	ldr	r3, [pc, #116]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	491a      	ldr	r1, [pc, #104]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800350c:	4313      	orrs	r3, r2
 800350e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800351c:	4b15      	ldr	r3, [pc, #84]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	4912      	ldr	r1, [pc, #72]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800352a:	4313      	orrs	r3, r2
 800352c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d008      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800353a:	4b0e      	ldr	r3, [pc, #56]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003546:	490b      	ldr	r1, [pc, #44]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003548:	4313      	orrs	r3, r2
 800354a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003558:	4b06      	ldr	r3, [pc, #24]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003564:	4903      	ldr	r1, [pc, #12]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003566:	4313      	orrs	r3, r2
 8003568:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3748      	adds	r7, #72	; 0x48
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40021000 	.word	0x40021000

08003578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e049      	b.n	800361e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d106      	bne.n	80035a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fd fca2 	bl	8000ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3304      	adds	r3, #4
 80035b4:	4619      	mov	r1, r3
 80035b6:	4610      	mov	r0, r2
 80035b8:	f000 fc30 	bl	8003e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	d001      	beq.n	8003640 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e033      	b.n	80036a8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a19      	ldr	r2, [pc, #100]	; (80036b4 <HAL_TIM_Base_Start+0x8c>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d009      	beq.n	8003666 <HAL_TIM_Base_Start+0x3e>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365a:	d004      	beq.n	8003666 <HAL_TIM_Base_Start+0x3e>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a15      	ldr	r2, [pc, #84]	; (80036b8 <HAL_TIM_Base_Start+0x90>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d115      	bne.n	8003692 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	4b13      	ldr	r3, [pc, #76]	; (80036bc <HAL_TIM_Base_Start+0x94>)
 800366e:	4013      	ands	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2b06      	cmp	r3, #6
 8003676:	d015      	beq.n	80036a4 <HAL_TIM_Base_Start+0x7c>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800367e:	d011      	beq.n	80036a4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0201 	orr.w	r2, r2, #1
 800368e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003690:	e008      	b.n	80036a4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 0201 	orr.w	r2, r2, #1
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	e000      	b.n	80036a6 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	40012c00 	.word	0x40012c00
 80036b8:	40014000 	.word	0x40014000
 80036bc:	00010007 	.word	0x00010007

080036c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d001      	beq.n	80036d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e03b      	b.n	8003750 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a19      	ldr	r2, [pc, #100]	; (800375c <HAL_TIM_Base_Start_IT+0x9c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d009      	beq.n	800370e <HAL_TIM_Base_Start_IT+0x4e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003702:	d004      	beq.n	800370e <HAL_TIM_Base_Start_IT+0x4e>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a15      	ldr	r2, [pc, #84]	; (8003760 <HAL_TIM_Base_Start_IT+0xa0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d115      	bne.n	800373a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	4b13      	ldr	r3, [pc, #76]	; (8003764 <HAL_TIM_Base_Start_IT+0xa4>)
 8003716:	4013      	ands	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2b06      	cmp	r3, #6
 800371e:	d015      	beq.n	800374c <HAL_TIM_Base_Start_IT+0x8c>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003726:	d011      	beq.n	800374c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003738:	e008      	b.n	800374c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0201 	orr.w	r2, r2, #1
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e000      	b.n	800374e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	40012c00 	.word	0x40012c00
 8003760:	40014000 	.word	0x40014000
 8003764:	00010007 	.word	0x00010007

08003768 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e097      	b.n	80038ac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d106      	bne.n	8003796 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7fd fb61 	bl	8000e58 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2202      	movs	r2, #2
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6812      	ldr	r2, [r2, #0]
 80037a8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80037ac:	f023 0307 	bic.w	r3, r3, #7
 80037b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3304      	adds	r3, #4
 80037ba:	4619      	mov	r1, r3
 80037bc:	4610      	mov	r0, r2
 80037be:	f000 fb2d 	bl	8003e1c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ea:	f023 0303 	bic.w	r3, r3, #3
 80037ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	021b      	lsls	r3, r3, #8
 80037fa:	4313      	orrs	r3, r2
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4313      	orrs	r3, r2
 8003800:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003808:	f023 030c 	bic.w	r3, r3, #12
 800380c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003814:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003818:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	021b      	lsls	r3, r3, #8
 8003824:	4313      	orrs	r3, r2
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	011a      	lsls	r2, r3, #4
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	031b      	lsls	r3, r3, #12
 8003838:	4313      	orrs	r3, r2
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	4313      	orrs	r3, r2
 800383e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003846:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800384e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	4313      	orrs	r3, r2
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038dc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d110      	bne.n	8003906 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d102      	bne.n	80038f0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80038ea:	7b7b      	ldrb	r3, [r7, #13]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d001      	beq.n	80038f4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e089      	b.n	8003a08 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003904:	e031      	b.n	800396a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b04      	cmp	r3, #4
 800390a:	d110      	bne.n	800392e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800390c:	7bbb      	ldrb	r3, [r7, #14]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d102      	bne.n	8003918 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003912:	7b3b      	ldrb	r3, [r7, #12]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d001      	beq.n	800391c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e075      	b.n	8003a08 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800392c:	e01d      	b.n	800396a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800392e:	7bfb      	ldrb	r3, [r7, #15]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d108      	bne.n	8003946 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003934:	7bbb      	ldrb	r3, [r7, #14]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d105      	bne.n	8003946 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800393a:	7b7b      	ldrb	r3, [r7, #13]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d102      	bne.n	8003946 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003940:	7b3b      	ldrb	r3, [r7, #12]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d001      	beq.n	800394a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e05e      	b.n	8003a08 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2202      	movs	r2, #2
 800394e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2202      	movs	r2, #2
 8003956:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2202      	movs	r2, #2
 800395e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2202      	movs	r2, #2
 8003966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b04      	cmp	r3, #4
 8003974:	d010      	beq.n	8003998 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003976:	e01f      	b.n	80039b8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2201      	movs	r2, #1
 800397e:	2100      	movs	r1, #0
 8003980:	4618      	mov	r0, r3
 8003982:	f000 fb53 	bl	800402c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0202 	orr.w	r2, r2, #2
 8003994:	60da      	str	r2, [r3, #12]
      break;
 8003996:	e02e      	b.n	80039f6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2201      	movs	r2, #1
 800399e:	2104      	movs	r1, #4
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fb43 	bl	800402c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0204 	orr.w	r2, r2, #4
 80039b4:	60da      	str	r2, [r3, #12]
      break;
 80039b6:	e01e      	b.n	80039f6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2201      	movs	r2, #1
 80039be:	2100      	movs	r1, #0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fb33 	bl	800402c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2201      	movs	r2, #1
 80039cc:	2104      	movs	r1, #4
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fb2c 	bl	800402c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0202 	orr.w	r2, r2, #2
 80039e2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0204 	orr.w	r2, r2, #4
 80039f2:	60da      	str	r2, [r3, #12]
      break;
 80039f4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f042 0201 	orr.w	r2, r2, #1
 8003a04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d122      	bne.n	8003a6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d11b      	bne.n	8003a6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f06f 0202 	mvn.w	r2, #2
 8003a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fc fc2c 	bl	80002b0 <HAL_TIM_IC_CaptureCallback>
 8003a58:	e005      	b.n	8003a66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f9c0 	bl	8003de0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f9c7 	bl	8003df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f003 0304 	and.w	r3, r3, #4
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d122      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d11b      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0204 	mvn.w	r2, #4
 8003a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2202      	movs	r2, #2
 8003a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7fc fc02 	bl	80002b0 <HAL_TIM_IC_CaptureCallback>
 8003aac:	e005      	b.n	8003aba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f996 	bl	8003de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f99d 	bl	8003df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d122      	bne.n	8003b14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d11b      	bne.n	8003b14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f06f 0208 	mvn.w	r2, #8
 8003ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2204      	movs	r2, #4
 8003aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7fc fbd8 	bl	80002b0 <HAL_TIM_IC_CaptureCallback>
 8003b00:	e005      	b.n	8003b0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f96c 	bl	8003de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f973 	bl	8003df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	f003 0310 	and.w	r3, r3, #16
 8003b1e:	2b10      	cmp	r3, #16
 8003b20:	d122      	bne.n	8003b68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f003 0310 	and.w	r3, r3, #16
 8003b2c:	2b10      	cmp	r3, #16
 8003b2e:	d11b      	bne.n	8003b68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0210 	mvn.w	r2, #16
 8003b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7fc fbae 	bl	80002b0 <HAL_TIM_IC_CaptureCallback>
 8003b54:	e005      	b.n	8003b62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f942 	bl	8003de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f949 	bl	8003df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d10e      	bne.n	8003b94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d107      	bne.n	8003b94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f06f 0201 	mvn.w	r2, #1
 8003b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7fc fbc6 	bl	8000320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9e:	2b80      	cmp	r3, #128	; 0x80
 8003ba0:	d10e      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bac:	2b80      	cmp	r3, #128	; 0x80
 8003bae:	d107      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 facc 	bl	8004158 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bce:	d10e      	bne.n	8003bee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bda:	2b80      	cmp	r3, #128	; 0x80
 8003bdc:	d107      	bne.n	8003bee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 fabf 	bl	800416c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf8:	2b40      	cmp	r3, #64	; 0x40
 8003bfa:	d10e      	bne.n	8003c1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c06:	2b40      	cmp	r3, #64	; 0x40
 8003c08:	d107      	bne.n	8003c1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f8f7 	bl	8003e08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	f003 0320 	and.w	r3, r3, #32
 8003c24:	2b20      	cmp	r3, #32
 8003c26:	d10e      	bne.n	8003c46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f003 0320 	and.w	r3, r3, #32
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	d107      	bne.n	8003c46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f06f 0220 	mvn.w	r2, #32
 8003c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 fa7f 	bl	8004144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_TIM_ConfigClockSource+0x1c>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e0b6      	b.n	8003dd8 <HAL_TIM_ConfigClockSource+0x18a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2202      	movs	r2, #2
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c88:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c8c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c94:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca6:	d03e      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0xd8>
 8003ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cac:	f200 8087 	bhi.w	8003dbe <HAL_TIM_ConfigClockSource+0x170>
 8003cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb4:	f000 8086 	beq.w	8003dc4 <HAL_TIM_ConfigClockSource+0x176>
 8003cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cbc:	d87f      	bhi.n	8003dbe <HAL_TIM_ConfigClockSource+0x170>
 8003cbe:	2b70      	cmp	r3, #112	; 0x70
 8003cc0:	d01a      	beq.n	8003cf8 <HAL_TIM_ConfigClockSource+0xaa>
 8003cc2:	2b70      	cmp	r3, #112	; 0x70
 8003cc4:	d87b      	bhi.n	8003dbe <HAL_TIM_ConfigClockSource+0x170>
 8003cc6:	2b60      	cmp	r3, #96	; 0x60
 8003cc8:	d050      	beq.n	8003d6c <HAL_TIM_ConfigClockSource+0x11e>
 8003cca:	2b60      	cmp	r3, #96	; 0x60
 8003ccc:	d877      	bhi.n	8003dbe <HAL_TIM_ConfigClockSource+0x170>
 8003cce:	2b50      	cmp	r3, #80	; 0x50
 8003cd0:	d03c      	beq.n	8003d4c <HAL_TIM_ConfigClockSource+0xfe>
 8003cd2:	2b50      	cmp	r3, #80	; 0x50
 8003cd4:	d873      	bhi.n	8003dbe <HAL_TIM_ConfigClockSource+0x170>
 8003cd6:	2b40      	cmp	r3, #64	; 0x40
 8003cd8:	d058      	beq.n	8003d8c <HAL_TIM_ConfigClockSource+0x13e>
 8003cda:	2b40      	cmp	r3, #64	; 0x40
 8003cdc:	d86f      	bhi.n	8003dbe <HAL_TIM_ConfigClockSource+0x170>
 8003cde:	2b30      	cmp	r3, #48	; 0x30
 8003ce0:	d064      	beq.n	8003dac <HAL_TIM_ConfigClockSource+0x15e>
 8003ce2:	2b30      	cmp	r3, #48	; 0x30
 8003ce4:	d86b      	bhi.n	8003dbe <HAL_TIM_ConfigClockSource+0x170>
 8003ce6:	2b20      	cmp	r3, #32
 8003ce8:	d060      	beq.n	8003dac <HAL_TIM_ConfigClockSource+0x15e>
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	d867      	bhi.n	8003dbe <HAL_TIM_ConfigClockSource+0x170>
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d05c      	beq.n	8003dac <HAL_TIM_ConfigClockSource+0x15e>
 8003cf2:	2b10      	cmp	r3, #16
 8003cf4:	d05a      	beq.n	8003dac <HAL_TIM_ConfigClockSource+0x15e>
 8003cf6:	e062      	b.n	8003dbe <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	6899      	ldr	r1, [r3, #8]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f000 f970 	bl	8003fec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d1a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	609a      	str	r2, [r3, #8]
      break;
 8003d24:	e04f      	b.n	8003dc6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6899      	ldr	r1, [r3, #8]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f000 f959 	bl	8003fec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d48:	609a      	str	r2, [r3, #8]
      break;
 8003d4a:	e03c      	b.n	8003dc6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	6859      	ldr	r1, [r3, #4]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	f000 f8cd 	bl	8003ef8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2150      	movs	r1, #80	; 0x50
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 f926 	bl	8003fb6 <TIM_ITRx_SetConfig>
      break;
 8003d6a:	e02c      	b.n	8003dc6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6818      	ldr	r0, [r3, #0]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	6859      	ldr	r1, [r3, #4]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	f000 f8ec 	bl	8003f56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2160      	movs	r1, #96	; 0x60
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 f916 	bl	8003fb6 <TIM_ITRx_SetConfig>
      break;
 8003d8a:	e01c      	b.n	8003dc6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	6859      	ldr	r1, [r3, #4]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	f000 f8ad 	bl	8003ef8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2140      	movs	r1, #64	; 0x40
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 f906 	bl	8003fb6 <TIM_ITRx_SetConfig>
      break;
 8003daa:	e00c      	b.n	8003dc6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4619      	mov	r1, r3
 8003db6:	4610      	mov	r0, r2
 8003db8:	f000 f8fd 	bl	8003fb6 <TIM_ITRx_SetConfig>
      break;
 8003dbc:	e003      	b.n	8003dc6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc2:	e000      	b.n	8003dc6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003dc4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a2e      	ldr	r2, [pc, #184]	; (8003ee8 <TIM_Base_SetConfig+0xcc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d003      	beq.n	8003e3c <TIM_Base_SetConfig+0x20>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3a:	d108      	bne.n	8003e4e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a25      	ldr	r2, [pc, #148]	; (8003ee8 <TIM_Base_SetConfig+0xcc>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d00f      	beq.n	8003e76 <TIM_Base_SetConfig+0x5a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5c:	d00b      	beq.n	8003e76 <TIM_Base_SetConfig+0x5a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a22      	ldr	r2, [pc, #136]	; (8003eec <TIM_Base_SetConfig+0xd0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d007      	beq.n	8003e76 <TIM_Base_SetConfig+0x5a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a21      	ldr	r2, [pc, #132]	; (8003ef0 <TIM_Base_SetConfig+0xd4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d003      	beq.n	8003e76 <TIM_Base_SetConfig+0x5a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a20      	ldr	r2, [pc, #128]	; (8003ef4 <TIM_Base_SetConfig+0xd8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d108      	bne.n	8003e88 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a0e      	ldr	r2, [pc, #56]	; (8003ee8 <TIM_Base_SetConfig+0xcc>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00b      	beq.n	8003ecc <TIM_Base_SetConfig+0xb0>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a0d      	ldr	r2, [pc, #52]	; (8003eec <TIM_Base_SetConfig+0xd0>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d007      	beq.n	8003ecc <TIM_Base_SetConfig+0xb0>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a0c      	ldr	r2, [pc, #48]	; (8003ef0 <TIM_Base_SetConfig+0xd4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d003      	beq.n	8003ecc <TIM_Base_SetConfig+0xb0>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a0b      	ldr	r2, [pc, #44]	; (8003ef4 <TIM_Base_SetConfig+0xd8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d103      	bne.n	8003ed4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	615a      	str	r2, [r3, #20]
}
 8003eda:	bf00      	nop
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40012c00 	.word	0x40012c00
 8003eec:	40014000 	.word	0x40014000
 8003ef0:	40014400 	.word	0x40014400
 8003ef4:	40014800 	.word	0x40014800

08003ef8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	f023 0201 	bic.w	r2, r3, #1
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f023 030a 	bic.w	r3, r3, #10
 8003f34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	621a      	str	r2, [r3, #32]
}
 8003f4a:	bf00      	nop
 8003f4c:	371c      	adds	r7, #28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b087      	sub	sp, #28
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	60f8      	str	r0, [r7, #12]
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f023 0210 	bic.w	r2, r3, #16
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	031b      	lsls	r3, r3, #12
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	621a      	str	r2, [r3, #32]
}
 8003faa:	bf00      	nop
 8003fac:	371c      	adds	r7, #28
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b085      	sub	sp, #20
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
 8003fbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f043 0307 	orr.w	r3, r3, #7
 8003fd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	609a      	str	r2, [r3, #8]
}
 8003fe0:	bf00      	nop
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
 8003ff8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004006:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	021a      	lsls	r2, r3, #8
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	431a      	orrs	r2, r3
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	4313      	orrs	r3, r2
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	609a      	str	r2, [r3, #8]
}
 8004020:	bf00      	nop
 8004022:	371c      	adds	r7, #28
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f003 031f 	and.w	r3, r3, #31
 800403e:	2201      	movs	r2, #1
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a1a      	ldr	r2, [r3, #32]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	43db      	mvns	r3, r3
 800404e:	401a      	ands	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a1a      	ldr	r2, [r3, #32]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f003 031f 	and.w	r3, r3, #31
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	fa01 f303 	lsl.w	r3, r1, r3
 8004064:	431a      	orrs	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	621a      	str	r2, [r3, #32]
}
 800406a:	bf00      	nop
 800406c:	371c      	adds	r7, #28
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
	...

08004078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800408c:	2302      	movs	r3, #2
 800408e:	e04f      	b.n	8004130 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a21      	ldr	r2, [pc, #132]	; (800413c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d108      	bne.n	80040cc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80040c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a14      	ldr	r2, [pc, #80]	; (800413c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d009      	beq.n	8004104 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f8:	d004      	beq.n	8004104 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a10      	ldr	r2, [pc, #64]	; (8004140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d10c      	bne.n	800411e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800410a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	4313      	orrs	r3, r2
 8004114:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	40012c00 	.word	0x40012c00
 8004140:	40014000 	.word	0x40014000

08004144 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e040      	b.n	8004214 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004196:	2b00      	cmp	r3, #0
 8004198:	d106      	bne.n	80041a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7fc fec6 	bl	8000f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2224      	movs	r2, #36	; 0x24
 80041ac:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0201 	bic.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f8b6 	bl	8004330 <UART_SetConfig>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d101      	bne.n	80041ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e022      	b.n	8004214 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f9e0 	bl	800459c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fa67 	bl	80046e0 <UART_CheckIdleState>
 8004212:	4603      	mov	r3, r0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08a      	sub	sp, #40	; 0x28
 8004220:	af02      	add	r7, sp, #8
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	4613      	mov	r3, r2
 800422a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004230:	2b20      	cmp	r3, #32
 8004232:	d178      	bne.n	8004326 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <HAL_UART_Transmit+0x24>
 800423a:	88fb      	ldrh	r3, [r7, #6]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e071      	b.n	8004328 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2221      	movs	r2, #33	; 0x21
 8004250:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004252:	f7fc ffc5 	bl	80011e0 <HAL_GetTick>
 8004256:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	88fa      	ldrh	r2, [r7, #6]
 800425c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	88fa      	ldrh	r2, [r7, #6]
 8004264:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004270:	d108      	bne.n	8004284 <HAL_UART_Transmit+0x68>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d104      	bne.n	8004284 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	61bb      	str	r3, [r7, #24]
 8004282:	e003      	b.n	800428c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004288:	2300      	movs	r3, #0
 800428a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800428c:	e030      	b.n	80042f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2200      	movs	r2, #0
 8004296:	2180      	movs	r1, #128	; 0x80
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 fac9 	bl	8004830 <UART_WaitOnFlagUntilTimeout>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d004      	beq.n	80042ae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2220      	movs	r2, #32
 80042a8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e03c      	b.n	8004328 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10b      	bne.n	80042cc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	881a      	ldrh	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042c0:	b292      	uxth	r2, r2
 80042c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	3302      	adds	r3, #2
 80042c8:	61bb      	str	r3, [r7, #24]
 80042ca:	e008      	b.n	80042de <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	781a      	ldrb	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	b292      	uxth	r2, r2
 80042d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	3301      	adds	r3, #1
 80042dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1c8      	bne.n	800428e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	2200      	movs	r2, #0
 8004304:	2140      	movs	r1, #64	; 0x40
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 fa92 	bl	8004830 <UART_WaitOnFlagUntilTimeout>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d004      	beq.n	800431c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2220      	movs	r2, #32
 8004316:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e005      	b.n	8004328 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2220      	movs	r2, #32
 8004320:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	e000      	b.n	8004328 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004326:	2302      	movs	r3, #2
  }
}
 8004328:	4618      	mov	r0, r3
 800432a:	3720      	adds	r7, #32
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b088      	sub	sp, #32
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004338:	2300      	movs	r3, #0
 800433a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	4313      	orrs	r3, r2
 8004352:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	4b8a      	ldr	r3, [pc, #552]	; (8004584 <UART_SetConfig+0x254>)
 800435c:	4013      	ands	r3, r2
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6812      	ldr	r2, [r2, #0]
 8004362:	6979      	ldr	r1, [r7, #20]
 8004364:	430b      	orrs	r3, r1
 8004366:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	4313      	orrs	r3, r2
 800438c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	430a      	orrs	r2, r1
 80043a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a78      	ldr	r2, [pc, #480]	; (8004588 <UART_SetConfig+0x258>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d120      	bne.n	80043ee <UART_SetConfig+0xbe>
 80043ac:	4b77      	ldr	r3, [pc, #476]	; (800458c <UART_SetConfig+0x25c>)
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	f003 0303 	and.w	r3, r3, #3
 80043b4:	2b03      	cmp	r3, #3
 80043b6:	d817      	bhi.n	80043e8 <UART_SetConfig+0xb8>
 80043b8:	a201      	add	r2, pc, #4	; (adr r2, 80043c0 <UART_SetConfig+0x90>)
 80043ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043be:	bf00      	nop
 80043c0:	080043d1 	.word	0x080043d1
 80043c4:	080043dd 	.word	0x080043dd
 80043c8:	080043e3 	.word	0x080043e3
 80043cc:	080043d7 	.word	0x080043d7
 80043d0:	2300      	movs	r3, #0
 80043d2:	77fb      	strb	r3, [r7, #31]
 80043d4:	e01d      	b.n	8004412 <UART_SetConfig+0xe2>
 80043d6:	2302      	movs	r3, #2
 80043d8:	77fb      	strb	r3, [r7, #31]
 80043da:	e01a      	b.n	8004412 <UART_SetConfig+0xe2>
 80043dc:	2304      	movs	r3, #4
 80043de:	77fb      	strb	r3, [r7, #31]
 80043e0:	e017      	b.n	8004412 <UART_SetConfig+0xe2>
 80043e2:	2308      	movs	r3, #8
 80043e4:	77fb      	strb	r3, [r7, #31]
 80043e6:	e014      	b.n	8004412 <UART_SetConfig+0xe2>
 80043e8:	2310      	movs	r3, #16
 80043ea:	77fb      	strb	r3, [r7, #31]
 80043ec:	e011      	b.n	8004412 <UART_SetConfig+0xe2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a67      	ldr	r2, [pc, #412]	; (8004590 <UART_SetConfig+0x260>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d102      	bne.n	80043fe <UART_SetConfig+0xce>
 80043f8:	2300      	movs	r3, #0
 80043fa:	77fb      	strb	r3, [r7, #31]
 80043fc:	e009      	b.n	8004412 <UART_SetConfig+0xe2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a64      	ldr	r2, [pc, #400]	; (8004594 <UART_SetConfig+0x264>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d102      	bne.n	800440e <UART_SetConfig+0xde>
 8004408:	2300      	movs	r3, #0
 800440a:	77fb      	strb	r3, [r7, #31]
 800440c:	e001      	b.n	8004412 <UART_SetConfig+0xe2>
 800440e:	2310      	movs	r3, #16
 8004410:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800441a:	d15a      	bne.n	80044d2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800441c:	7ffb      	ldrb	r3, [r7, #31]
 800441e:	2b08      	cmp	r3, #8
 8004420:	d827      	bhi.n	8004472 <UART_SetConfig+0x142>
 8004422:	a201      	add	r2, pc, #4	; (adr r2, 8004428 <UART_SetConfig+0xf8>)
 8004424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004428:	0800444d 	.word	0x0800444d
 800442c:	08004455 	.word	0x08004455
 8004430:	0800445d 	.word	0x0800445d
 8004434:	08004473 	.word	0x08004473
 8004438:	08004463 	.word	0x08004463
 800443c:	08004473 	.word	0x08004473
 8004440:	08004473 	.word	0x08004473
 8004444:	08004473 	.word	0x08004473
 8004448:	0800446b 	.word	0x0800446b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800444c:	f7fe febe 	bl	80031cc <HAL_RCC_GetPCLK1Freq>
 8004450:	61b8      	str	r0, [r7, #24]
        break;
 8004452:	e013      	b.n	800447c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004454:	f7fe fedc 	bl	8003210 <HAL_RCC_GetPCLK2Freq>
 8004458:	61b8      	str	r0, [r7, #24]
        break;
 800445a:	e00f      	b.n	800447c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800445c:	4b4e      	ldr	r3, [pc, #312]	; (8004598 <UART_SetConfig+0x268>)
 800445e:	61bb      	str	r3, [r7, #24]
        break;
 8004460:	e00c      	b.n	800447c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004462:	f7fe fe3d 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 8004466:	61b8      	str	r0, [r7, #24]
        break;
 8004468:	e008      	b.n	800447c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800446a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800446e:	61bb      	str	r3, [r7, #24]
        break;
 8004470:	e004      	b.n	800447c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004472:	2300      	movs	r3, #0
 8004474:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	77bb      	strb	r3, [r7, #30]
        break;
 800447a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d074      	beq.n	800456c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	005a      	lsls	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	085b      	lsrs	r3, r3, #1
 800448c:	441a      	add	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	fbb2 f3f3 	udiv	r3, r2, r3
 8004496:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	2b0f      	cmp	r3, #15
 800449c:	d916      	bls.n	80044cc <UART_SetConfig+0x19c>
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a4:	d212      	bcs.n	80044cc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	f023 030f 	bic.w	r3, r3, #15
 80044ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	085b      	lsrs	r3, r3, #1
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	89fb      	ldrh	r3, [r7, #14]
 80044be:	4313      	orrs	r3, r2
 80044c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	89fa      	ldrh	r2, [r7, #14]
 80044c8:	60da      	str	r2, [r3, #12]
 80044ca:	e04f      	b.n	800456c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	77bb      	strb	r3, [r7, #30]
 80044d0:	e04c      	b.n	800456c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044d2:	7ffb      	ldrb	r3, [r7, #31]
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d828      	bhi.n	800452a <UART_SetConfig+0x1fa>
 80044d8:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <UART_SetConfig+0x1b0>)
 80044da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044de:	bf00      	nop
 80044e0:	08004505 	.word	0x08004505
 80044e4:	0800450d 	.word	0x0800450d
 80044e8:	08004515 	.word	0x08004515
 80044ec:	0800452b 	.word	0x0800452b
 80044f0:	0800451b 	.word	0x0800451b
 80044f4:	0800452b 	.word	0x0800452b
 80044f8:	0800452b 	.word	0x0800452b
 80044fc:	0800452b 	.word	0x0800452b
 8004500:	08004523 	.word	0x08004523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004504:	f7fe fe62 	bl	80031cc <HAL_RCC_GetPCLK1Freq>
 8004508:	61b8      	str	r0, [r7, #24]
        break;
 800450a:	e013      	b.n	8004534 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800450c:	f7fe fe80 	bl	8003210 <HAL_RCC_GetPCLK2Freq>
 8004510:	61b8      	str	r0, [r7, #24]
        break;
 8004512:	e00f      	b.n	8004534 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004514:	4b20      	ldr	r3, [pc, #128]	; (8004598 <UART_SetConfig+0x268>)
 8004516:	61bb      	str	r3, [r7, #24]
        break;
 8004518:	e00c      	b.n	8004534 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800451a:	f7fe fde1 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 800451e:	61b8      	str	r0, [r7, #24]
        break;
 8004520:	e008      	b.n	8004534 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004526:	61bb      	str	r3, [r7, #24]
        break;
 8004528:	e004      	b.n	8004534 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	77bb      	strb	r3, [r7, #30]
        break;
 8004532:	bf00      	nop
    }

    if (pclk != 0U)
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d018      	beq.n	800456c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	085a      	lsrs	r2, r3, #1
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	441a      	add	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	fbb2 f3f3 	udiv	r3, r2, r3
 800454c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	2b0f      	cmp	r3, #15
 8004552:	d909      	bls.n	8004568 <UART_SetConfig+0x238>
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800455a:	d205      	bcs.n	8004568 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	b29a      	uxth	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	60da      	str	r2, [r3, #12]
 8004566:	e001      	b.n	800456c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004578:	7fbb      	ldrb	r3, [r7, #30]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3720      	adds	r7, #32
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	efff69f3 	.word	0xefff69f3
 8004588:	40013800 	.word	0x40013800
 800458c:	40021000 	.word	0x40021000
 8004590:	40004400 	.word	0x40004400
 8004594:	40004800 	.word	0x40004800
 8004598:	007a1200 	.word	0x007a1200

0800459c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	f003 0310 	and.w	r3, r3, #16
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	f003 0320 	and.w	r3, r3, #32
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01a      	beq.n	80046b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800469a:	d10a      	bne.n	80046b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	605a      	str	r2, [r3, #4]
  }
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b098      	sub	sp, #96	; 0x60
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046f0:	f7fc fd76 	bl	80011e0 <HAL_GetTick>
 80046f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0308 	and.w	r3, r3, #8
 8004700:	2b08      	cmp	r3, #8
 8004702:	d12e      	bne.n	8004762 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004704:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800470c:	2200      	movs	r2, #0
 800470e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f88c 	bl	8004830 <UART_WaitOnFlagUntilTimeout>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d021      	beq.n	8004762 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004726:	e853 3f00 	ldrex	r3, [r3]
 800472a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800472c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800472e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004732:	653b      	str	r3, [r7, #80]	; 0x50
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800473c:	647b      	str	r3, [r7, #68]	; 0x44
 800473e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004740:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004744:	e841 2300 	strex	r3, r2, [r1]
 8004748:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800474a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1e6      	bne.n	800471e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2220      	movs	r2, #32
 8004754:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e062      	b.n	8004828 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b04      	cmp	r3, #4
 800476e:	d149      	bne.n	8004804 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004770:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004778:	2200      	movs	r2, #0
 800477a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f856 	bl	8004830 <UART_WaitOnFlagUntilTimeout>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d03c      	beq.n	8004804 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	e853 3f00 	ldrex	r3, [r3]
 8004796:	623b      	str	r3, [r7, #32]
   return(result);
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800479e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	461a      	mov	r2, r3
 80047a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047a8:	633b      	str	r3, [r7, #48]	; 0x30
 80047aa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047b0:	e841 2300 	strex	r3, r2, [r1]
 80047b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1e6      	bne.n	800478a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3308      	adds	r3, #8
 80047c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	e853 3f00 	ldrex	r3, [r3]
 80047ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f023 0301 	bic.w	r3, r3, #1
 80047d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3308      	adds	r3, #8
 80047da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047dc:	61fa      	str	r2, [r7, #28]
 80047de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e0:	69b9      	ldr	r1, [r7, #24]
 80047e2:	69fa      	ldr	r2, [r7, #28]
 80047e4:	e841 2300 	strex	r3, r2, [r1]
 80047e8:	617b      	str	r3, [r7, #20]
   return(result);
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1e5      	bne.n	80047bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e011      	b.n	8004828 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2220      	movs	r2, #32
 8004808:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2220      	movs	r2, #32
 800480e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3758      	adds	r7, #88	; 0x58
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	4613      	mov	r3, r2
 800483e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004840:	e049      	b.n	80048d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004848:	d045      	beq.n	80048d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800484a:	f7fc fcc9 	bl	80011e0 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	429a      	cmp	r2, r3
 8004858:	d302      	bcc.n	8004860 <UART_WaitOnFlagUntilTimeout+0x30>
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e048      	b.n	80048f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	d031      	beq.n	80048d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	f003 0308 	and.w	r3, r3, #8
 800487c:	2b08      	cmp	r3, #8
 800487e:	d110      	bne.n	80048a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2208      	movs	r2, #8
 8004886:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 f838 	bl	80048fe <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2208      	movs	r2, #8
 8004892:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e029      	b.n	80048f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048b0:	d111      	bne.n	80048d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f81e 	bl	80048fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2220      	movs	r2, #32
 80048c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e00f      	b.n	80048f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69da      	ldr	r2, [r3, #28]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4013      	ands	r3, r2
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	bf0c      	ite	eq
 80048e6:	2301      	moveq	r3, #1
 80048e8:	2300      	movne	r3, #0
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d0a6      	beq.n	8004842 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048fe:	b480      	push	{r7}
 8004900:	b095      	sub	sp, #84	; 0x54
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490e:	e853 3f00 	ldrex	r3, [r3]
 8004912:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004916:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800491a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	461a      	mov	r2, r3
 8004922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004924:	643b      	str	r3, [r7, #64]	; 0x40
 8004926:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004928:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800492a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800492c:	e841 2300 	strex	r3, r2, [r1]
 8004930:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1e6      	bne.n	8004906 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3308      	adds	r3, #8
 800493e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	e853 3f00 	ldrex	r3, [r3]
 8004946:	61fb      	str	r3, [r7, #28]
   return(result);
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f023 0301 	bic.w	r3, r3, #1
 800494e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3308      	adds	r3, #8
 8004956:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004958:	62fa      	str	r2, [r7, #44]	; 0x2c
 800495a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800495e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004960:	e841 2300 	strex	r3, r2, [r1]
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1e5      	bne.n	8004938 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004970:	2b01      	cmp	r3, #1
 8004972:	d118      	bne.n	80049a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	e853 3f00 	ldrex	r3, [r3]
 8004980:	60bb      	str	r3, [r7, #8]
   return(result);
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	f023 0310 	bic.w	r3, r3, #16
 8004988:	647b      	str	r3, [r7, #68]	; 0x44
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	461a      	mov	r2, r3
 8004990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004992:	61bb      	str	r3, [r7, #24]
 8004994:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004996:	6979      	ldr	r1, [r7, #20]
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	e841 2300 	strex	r3, r2, [r1]
 800499e:	613b      	str	r3, [r7, #16]
   return(result);
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1e6      	bne.n	8004974 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80049ba:	bf00      	nop
 80049bc:	3754      	adds	r7, #84	; 0x54
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
	...

080049c8 <__errno>:
 80049c8:	4b01      	ldr	r3, [pc, #4]	; (80049d0 <__errno+0x8>)
 80049ca:	6818      	ldr	r0, [r3, #0]
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	2000000c 	.word	0x2000000c

080049d4 <__libc_init_array>:
 80049d4:	b570      	push	{r4, r5, r6, lr}
 80049d6:	4d0d      	ldr	r5, [pc, #52]	; (8004a0c <__libc_init_array+0x38>)
 80049d8:	4c0d      	ldr	r4, [pc, #52]	; (8004a10 <__libc_init_array+0x3c>)
 80049da:	1b64      	subs	r4, r4, r5
 80049dc:	10a4      	asrs	r4, r4, #2
 80049de:	2600      	movs	r6, #0
 80049e0:	42a6      	cmp	r6, r4
 80049e2:	d109      	bne.n	80049f8 <__libc_init_array+0x24>
 80049e4:	4d0b      	ldr	r5, [pc, #44]	; (8004a14 <__libc_init_array+0x40>)
 80049e6:	4c0c      	ldr	r4, [pc, #48]	; (8004a18 <__libc_init_array+0x44>)
 80049e8:	f000 fc8e 	bl	8005308 <_init>
 80049ec:	1b64      	subs	r4, r4, r5
 80049ee:	10a4      	asrs	r4, r4, #2
 80049f0:	2600      	movs	r6, #0
 80049f2:	42a6      	cmp	r6, r4
 80049f4:	d105      	bne.n	8004a02 <__libc_init_array+0x2e>
 80049f6:	bd70      	pop	{r4, r5, r6, pc}
 80049f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049fc:	4798      	blx	r3
 80049fe:	3601      	adds	r6, #1
 8004a00:	e7ee      	b.n	80049e0 <__libc_init_array+0xc>
 8004a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a06:	4798      	blx	r3
 8004a08:	3601      	adds	r6, #1
 8004a0a:	e7f2      	b.n	80049f2 <__libc_init_array+0x1e>
 8004a0c:	08005390 	.word	0x08005390
 8004a10:	08005390 	.word	0x08005390
 8004a14:	08005390 	.word	0x08005390
 8004a18:	08005394 	.word	0x08005394

08004a1c <memset>:
 8004a1c:	4402      	add	r2, r0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d100      	bne.n	8004a26 <memset+0xa>
 8004a24:	4770      	bx	lr
 8004a26:	f803 1b01 	strb.w	r1, [r3], #1
 8004a2a:	e7f9      	b.n	8004a20 <memset+0x4>

08004a2c <siprintf>:
 8004a2c:	b40e      	push	{r1, r2, r3}
 8004a2e:	b500      	push	{lr}
 8004a30:	b09c      	sub	sp, #112	; 0x70
 8004a32:	ab1d      	add	r3, sp, #116	; 0x74
 8004a34:	9002      	str	r0, [sp, #8]
 8004a36:	9006      	str	r0, [sp, #24]
 8004a38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a3c:	4809      	ldr	r0, [pc, #36]	; (8004a64 <siprintf+0x38>)
 8004a3e:	9107      	str	r1, [sp, #28]
 8004a40:	9104      	str	r1, [sp, #16]
 8004a42:	4909      	ldr	r1, [pc, #36]	; (8004a68 <siprintf+0x3c>)
 8004a44:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a48:	9105      	str	r1, [sp, #20]
 8004a4a:	6800      	ldr	r0, [r0, #0]
 8004a4c:	9301      	str	r3, [sp, #4]
 8004a4e:	a902      	add	r1, sp, #8
 8004a50:	f000 f868 	bl	8004b24 <_svfiprintf_r>
 8004a54:	9b02      	ldr	r3, [sp, #8]
 8004a56:	2200      	movs	r2, #0
 8004a58:	701a      	strb	r2, [r3, #0]
 8004a5a:	b01c      	add	sp, #112	; 0x70
 8004a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a60:	b003      	add	sp, #12
 8004a62:	4770      	bx	lr
 8004a64:	2000000c 	.word	0x2000000c
 8004a68:	ffff0208 	.word	0xffff0208

08004a6c <__ssputs_r>:
 8004a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a70:	688e      	ldr	r6, [r1, #8]
 8004a72:	429e      	cmp	r6, r3
 8004a74:	4682      	mov	sl, r0
 8004a76:	460c      	mov	r4, r1
 8004a78:	4690      	mov	r8, r2
 8004a7a:	461f      	mov	r7, r3
 8004a7c:	d838      	bhi.n	8004af0 <__ssputs_r+0x84>
 8004a7e:	898a      	ldrh	r2, [r1, #12]
 8004a80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a84:	d032      	beq.n	8004aec <__ssputs_r+0x80>
 8004a86:	6825      	ldr	r5, [r4, #0]
 8004a88:	6909      	ldr	r1, [r1, #16]
 8004a8a:	eba5 0901 	sub.w	r9, r5, r1
 8004a8e:	6965      	ldr	r5, [r4, #20]
 8004a90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a98:	3301      	adds	r3, #1
 8004a9a:	444b      	add	r3, r9
 8004a9c:	106d      	asrs	r5, r5, #1
 8004a9e:	429d      	cmp	r5, r3
 8004aa0:	bf38      	it	cc
 8004aa2:	461d      	movcc	r5, r3
 8004aa4:	0553      	lsls	r3, r2, #21
 8004aa6:	d531      	bpl.n	8004b0c <__ssputs_r+0xa0>
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	f000 fb63 	bl	8005174 <_malloc_r>
 8004aae:	4606      	mov	r6, r0
 8004ab0:	b950      	cbnz	r0, 8004ac8 <__ssputs_r+0x5c>
 8004ab2:	230c      	movs	r3, #12
 8004ab4:	f8ca 3000 	str.w	r3, [sl]
 8004ab8:	89a3      	ldrh	r3, [r4, #12]
 8004aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004abe:	81a3      	strh	r3, [r4, #12]
 8004ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac8:	6921      	ldr	r1, [r4, #16]
 8004aca:	464a      	mov	r2, r9
 8004acc:	f000 fabe 	bl	800504c <memcpy>
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ada:	81a3      	strh	r3, [r4, #12]
 8004adc:	6126      	str	r6, [r4, #16]
 8004ade:	6165      	str	r5, [r4, #20]
 8004ae0:	444e      	add	r6, r9
 8004ae2:	eba5 0509 	sub.w	r5, r5, r9
 8004ae6:	6026      	str	r6, [r4, #0]
 8004ae8:	60a5      	str	r5, [r4, #8]
 8004aea:	463e      	mov	r6, r7
 8004aec:	42be      	cmp	r6, r7
 8004aee:	d900      	bls.n	8004af2 <__ssputs_r+0x86>
 8004af0:	463e      	mov	r6, r7
 8004af2:	6820      	ldr	r0, [r4, #0]
 8004af4:	4632      	mov	r2, r6
 8004af6:	4641      	mov	r1, r8
 8004af8:	f000 fab6 	bl	8005068 <memmove>
 8004afc:	68a3      	ldr	r3, [r4, #8]
 8004afe:	1b9b      	subs	r3, r3, r6
 8004b00:	60a3      	str	r3, [r4, #8]
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	4433      	add	r3, r6
 8004b06:	6023      	str	r3, [r4, #0]
 8004b08:	2000      	movs	r0, #0
 8004b0a:	e7db      	b.n	8004ac4 <__ssputs_r+0x58>
 8004b0c:	462a      	mov	r2, r5
 8004b0e:	f000 fba5 	bl	800525c <_realloc_r>
 8004b12:	4606      	mov	r6, r0
 8004b14:	2800      	cmp	r0, #0
 8004b16:	d1e1      	bne.n	8004adc <__ssputs_r+0x70>
 8004b18:	6921      	ldr	r1, [r4, #16]
 8004b1a:	4650      	mov	r0, sl
 8004b1c:	f000 fabe 	bl	800509c <_free_r>
 8004b20:	e7c7      	b.n	8004ab2 <__ssputs_r+0x46>
	...

08004b24 <_svfiprintf_r>:
 8004b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b28:	4698      	mov	r8, r3
 8004b2a:	898b      	ldrh	r3, [r1, #12]
 8004b2c:	061b      	lsls	r3, r3, #24
 8004b2e:	b09d      	sub	sp, #116	; 0x74
 8004b30:	4607      	mov	r7, r0
 8004b32:	460d      	mov	r5, r1
 8004b34:	4614      	mov	r4, r2
 8004b36:	d50e      	bpl.n	8004b56 <_svfiprintf_r+0x32>
 8004b38:	690b      	ldr	r3, [r1, #16]
 8004b3a:	b963      	cbnz	r3, 8004b56 <_svfiprintf_r+0x32>
 8004b3c:	2140      	movs	r1, #64	; 0x40
 8004b3e:	f000 fb19 	bl	8005174 <_malloc_r>
 8004b42:	6028      	str	r0, [r5, #0]
 8004b44:	6128      	str	r0, [r5, #16]
 8004b46:	b920      	cbnz	r0, 8004b52 <_svfiprintf_r+0x2e>
 8004b48:	230c      	movs	r3, #12
 8004b4a:	603b      	str	r3, [r7, #0]
 8004b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b50:	e0d1      	b.n	8004cf6 <_svfiprintf_r+0x1d2>
 8004b52:	2340      	movs	r3, #64	; 0x40
 8004b54:	616b      	str	r3, [r5, #20]
 8004b56:	2300      	movs	r3, #0
 8004b58:	9309      	str	r3, [sp, #36]	; 0x24
 8004b5a:	2320      	movs	r3, #32
 8004b5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b60:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b64:	2330      	movs	r3, #48	; 0x30
 8004b66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004d10 <_svfiprintf_r+0x1ec>
 8004b6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b6e:	f04f 0901 	mov.w	r9, #1
 8004b72:	4623      	mov	r3, r4
 8004b74:	469a      	mov	sl, r3
 8004b76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b7a:	b10a      	cbz	r2, 8004b80 <_svfiprintf_r+0x5c>
 8004b7c:	2a25      	cmp	r2, #37	; 0x25
 8004b7e:	d1f9      	bne.n	8004b74 <_svfiprintf_r+0x50>
 8004b80:	ebba 0b04 	subs.w	fp, sl, r4
 8004b84:	d00b      	beq.n	8004b9e <_svfiprintf_r+0x7a>
 8004b86:	465b      	mov	r3, fp
 8004b88:	4622      	mov	r2, r4
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	4638      	mov	r0, r7
 8004b8e:	f7ff ff6d 	bl	8004a6c <__ssputs_r>
 8004b92:	3001      	adds	r0, #1
 8004b94:	f000 80aa 	beq.w	8004cec <_svfiprintf_r+0x1c8>
 8004b98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b9a:	445a      	add	r2, fp
 8004b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8004b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 80a2 	beq.w	8004cec <_svfiprintf_r+0x1c8>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f04f 32ff 	mov.w	r2, #4294967295
 8004bae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bb2:	f10a 0a01 	add.w	sl, sl, #1
 8004bb6:	9304      	str	r3, [sp, #16]
 8004bb8:	9307      	str	r3, [sp, #28]
 8004bba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bbe:	931a      	str	r3, [sp, #104]	; 0x68
 8004bc0:	4654      	mov	r4, sl
 8004bc2:	2205      	movs	r2, #5
 8004bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bc8:	4851      	ldr	r0, [pc, #324]	; (8004d10 <_svfiprintf_r+0x1ec>)
 8004bca:	f7fb fb09 	bl	80001e0 <memchr>
 8004bce:	9a04      	ldr	r2, [sp, #16]
 8004bd0:	b9d8      	cbnz	r0, 8004c0a <_svfiprintf_r+0xe6>
 8004bd2:	06d0      	lsls	r0, r2, #27
 8004bd4:	bf44      	itt	mi
 8004bd6:	2320      	movmi	r3, #32
 8004bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bdc:	0711      	lsls	r1, r2, #28
 8004bde:	bf44      	itt	mi
 8004be0:	232b      	movmi	r3, #43	; 0x2b
 8004be2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004be6:	f89a 3000 	ldrb.w	r3, [sl]
 8004bea:	2b2a      	cmp	r3, #42	; 0x2a
 8004bec:	d015      	beq.n	8004c1a <_svfiprintf_r+0xf6>
 8004bee:	9a07      	ldr	r2, [sp, #28]
 8004bf0:	4654      	mov	r4, sl
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	f04f 0c0a 	mov.w	ip, #10
 8004bf8:	4621      	mov	r1, r4
 8004bfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bfe:	3b30      	subs	r3, #48	; 0x30
 8004c00:	2b09      	cmp	r3, #9
 8004c02:	d94e      	bls.n	8004ca2 <_svfiprintf_r+0x17e>
 8004c04:	b1b0      	cbz	r0, 8004c34 <_svfiprintf_r+0x110>
 8004c06:	9207      	str	r2, [sp, #28]
 8004c08:	e014      	b.n	8004c34 <_svfiprintf_r+0x110>
 8004c0a:	eba0 0308 	sub.w	r3, r0, r8
 8004c0e:	fa09 f303 	lsl.w	r3, r9, r3
 8004c12:	4313      	orrs	r3, r2
 8004c14:	9304      	str	r3, [sp, #16]
 8004c16:	46a2      	mov	sl, r4
 8004c18:	e7d2      	b.n	8004bc0 <_svfiprintf_r+0x9c>
 8004c1a:	9b03      	ldr	r3, [sp, #12]
 8004c1c:	1d19      	adds	r1, r3, #4
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	9103      	str	r1, [sp, #12]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	bfbb      	ittet	lt
 8004c26:	425b      	neglt	r3, r3
 8004c28:	f042 0202 	orrlt.w	r2, r2, #2
 8004c2c:	9307      	strge	r3, [sp, #28]
 8004c2e:	9307      	strlt	r3, [sp, #28]
 8004c30:	bfb8      	it	lt
 8004c32:	9204      	strlt	r2, [sp, #16]
 8004c34:	7823      	ldrb	r3, [r4, #0]
 8004c36:	2b2e      	cmp	r3, #46	; 0x2e
 8004c38:	d10c      	bne.n	8004c54 <_svfiprintf_r+0x130>
 8004c3a:	7863      	ldrb	r3, [r4, #1]
 8004c3c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c3e:	d135      	bne.n	8004cac <_svfiprintf_r+0x188>
 8004c40:	9b03      	ldr	r3, [sp, #12]
 8004c42:	1d1a      	adds	r2, r3, #4
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	9203      	str	r2, [sp, #12]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	bfb8      	it	lt
 8004c4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c50:	3402      	adds	r4, #2
 8004c52:	9305      	str	r3, [sp, #20]
 8004c54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d20 <_svfiprintf_r+0x1fc>
 8004c58:	7821      	ldrb	r1, [r4, #0]
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	4650      	mov	r0, sl
 8004c5e:	f7fb fabf 	bl	80001e0 <memchr>
 8004c62:	b140      	cbz	r0, 8004c76 <_svfiprintf_r+0x152>
 8004c64:	2340      	movs	r3, #64	; 0x40
 8004c66:	eba0 000a 	sub.w	r0, r0, sl
 8004c6a:	fa03 f000 	lsl.w	r0, r3, r0
 8004c6e:	9b04      	ldr	r3, [sp, #16]
 8004c70:	4303      	orrs	r3, r0
 8004c72:	3401      	adds	r4, #1
 8004c74:	9304      	str	r3, [sp, #16]
 8004c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c7a:	4826      	ldr	r0, [pc, #152]	; (8004d14 <_svfiprintf_r+0x1f0>)
 8004c7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c80:	2206      	movs	r2, #6
 8004c82:	f7fb faad 	bl	80001e0 <memchr>
 8004c86:	2800      	cmp	r0, #0
 8004c88:	d038      	beq.n	8004cfc <_svfiprintf_r+0x1d8>
 8004c8a:	4b23      	ldr	r3, [pc, #140]	; (8004d18 <_svfiprintf_r+0x1f4>)
 8004c8c:	bb1b      	cbnz	r3, 8004cd6 <_svfiprintf_r+0x1b2>
 8004c8e:	9b03      	ldr	r3, [sp, #12]
 8004c90:	3307      	adds	r3, #7
 8004c92:	f023 0307 	bic.w	r3, r3, #7
 8004c96:	3308      	adds	r3, #8
 8004c98:	9303      	str	r3, [sp, #12]
 8004c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c9c:	4433      	add	r3, r6
 8004c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8004ca0:	e767      	b.n	8004b72 <_svfiprintf_r+0x4e>
 8004ca2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ca6:	460c      	mov	r4, r1
 8004ca8:	2001      	movs	r0, #1
 8004caa:	e7a5      	b.n	8004bf8 <_svfiprintf_r+0xd4>
 8004cac:	2300      	movs	r3, #0
 8004cae:	3401      	adds	r4, #1
 8004cb0:	9305      	str	r3, [sp, #20]
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	f04f 0c0a 	mov.w	ip, #10
 8004cb8:	4620      	mov	r0, r4
 8004cba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cbe:	3a30      	subs	r2, #48	; 0x30
 8004cc0:	2a09      	cmp	r2, #9
 8004cc2:	d903      	bls.n	8004ccc <_svfiprintf_r+0x1a8>
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0c5      	beq.n	8004c54 <_svfiprintf_r+0x130>
 8004cc8:	9105      	str	r1, [sp, #20]
 8004cca:	e7c3      	b.n	8004c54 <_svfiprintf_r+0x130>
 8004ccc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e7f0      	b.n	8004cb8 <_svfiprintf_r+0x194>
 8004cd6:	ab03      	add	r3, sp, #12
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	462a      	mov	r2, r5
 8004cdc:	4b0f      	ldr	r3, [pc, #60]	; (8004d1c <_svfiprintf_r+0x1f8>)
 8004cde:	a904      	add	r1, sp, #16
 8004ce0:	4638      	mov	r0, r7
 8004ce2:	f3af 8000 	nop.w
 8004ce6:	1c42      	adds	r2, r0, #1
 8004ce8:	4606      	mov	r6, r0
 8004cea:	d1d6      	bne.n	8004c9a <_svfiprintf_r+0x176>
 8004cec:	89ab      	ldrh	r3, [r5, #12]
 8004cee:	065b      	lsls	r3, r3, #25
 8004cf0:	f53f af2c 	bmi.w	8004b4c <_svfiprintf_r+0x28>
 8004cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cf6:	b01d      	add	sp, #116	; 0x74
 8004cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cfc:	ab03      	add	r3, sp, #12
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	462a      	mov	r2, r5
 8004d02:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <_svfiprintf_r+0x1f8>)
 8004d04:	a904      	add	r1, sp, #16
 8004d06:	4638      	mov	r0, r7
 8004d08:	f000 f87a 	bl	8004e00 <_printf_i>
 8004d0c:	e7eb      	b.n	8004ce6 <_svfiprintf_r+0x1c2>
 8004d0e:	bf00      	nop
 8004d10:	0800535c 	.word	0x0800535c
 8004d14:	08005366 	.word	0x08005366
 8004d18:	00000000 	.word	0x00000000
 8004d1c:	08004a6d 	.word	0x08004a6d
 8004d20:	08005362 	.word	0x08005362

08004d24 <_printf_common>:
 8004d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d28:	4616      	mov	r6, r2
 8004d2a:	4699      	mov	r9, r3
 8004d2c:	688a      	ldr	r2, [r1, #8]
 8004d2e:	690b      	ldr	r3, [r1, #16]
 8004d30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d34:	4293      	cmp	r3, r2
 8004d36:	bfb8      	it	lt
 8004d38:	4613      	movlt	r3, r2
 8004d3a:	6033      	str	r3, [r6, #0]
 8004d3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d40:	4607      	mov	r7, r0
 8004d42:	460c      	mov	r4, r1
 8004d44:	b10a      	cbz	r2, 8004d4a <_printf_common+0x26>
 8004d46:	3301      	adds	r3, #1
 8004d48:	6033      	str	r3, [r6, #0]
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	0699      	lsls	r1, r3, #26
 8004d4e:	bf42      	ittt	mi
 8004d50:	6833      	ldrmi	r3, [r6, #0]
 8004d52:	3302      	addmi	r3, #2
 8004d54:	6033      	strmi	r3, [r6, #0]
 8004d56:	6825      	ldr	r5, [r4, #0]
 8004d58:	f015 0506 	ands.w	r5, r5, #6
 8004d5c:	d106      	bne.n	8004d6c <_printf_common+0x48>
 8004d5e:	f104 0a19 	add.w	sl, r4, #25
 8004d62:	68e3      	ldr	r3, [r4, #12]
 8004d64:	6832      	ldr	r2, [r6, #0]
 8004d66:	1a9b      	subs	r3, r3, r2
 8004d68:	42ab      	cmp	r3, r5
 8004d6a:	dc26      	bgt.n	8004dba <_printf_common+0x96>
 8004d6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d70:	1e13      	subs	r3, r2, #0
 8004d72:	6822      	ldr	r2, [r4, #0]
 8004d74:	bf18      	it	ne
 8004d76:	2301      	movne	r3, #1
 8004d78:	0692      	lsls	r2, r2, #26
 8004d7a:	d42b      	bmi.n	8004dd4 <_printf_common+0xb0>
 8004d7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d80:	4649      	mov	r1, r9
 8004d82:	4638      	mov	r0, r7
 8004d84:	47c0      	blx	r8
 8004d86:	3001      	adds	r0, #1
 8004d88:	d01e      	beq.n	8004dc8 <_printf_common+0xa4>
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	68e5      	ldr	r5, [r4, #12]
 8004d8e:	6832      	ldr	r2, [r6, #0]
 8004d90:	f003 0306 	and.w	r3, r3, #6
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	bf08      	it	eq
 8004d98:	1aad      	subeq	r5, r5, r2
 8004d9a:	68a3      	ldr	r3, [r4, #8]
 8004d9c:	6922      	ldr	r2, [r4, #16]
 8004d9e:	bf0c      	ite	eq
 8004da0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004da4:	2500      	movne	r5, #0
 8004da6:	4293      	cmp	r3, r2
 8004da8:	bfc4      	itt	gt
 8004daa:	1a9b      	subgt	r3, r3, r2
 8004dac:	18ed      	addgt	r5, r5, r3
 8004dae:	2600      	movs	r6, #0
 8004db0:	341a      	adds	r4, #26
 8004db2:	42b5      	cmp	r5, r6
 8004db4:	d11a      	bne.n	8004dec <_printf_common+0xc8>
 8004db6:	2000      	movs	r0, #0
 8004db8:	e008      	b.n	8004dcc <_printf_common+0xa8>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	4652      	mov	r2, sl
 8004dbe:	4649      	mov	r1, r9
 8004dc0:	4638      	mov	r0, r7
 8004dc2:	47c0      	blx	r8
 8004dc4:	3001      	adds	r0, #1
 8004dc6:	d103      	bne.n	8004dd0 <_printf_common+0xac>
 8004dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd0:	3501      	adds	r5, #1
 8004dd2:	e7c6      	b.n	8004d62 <_printf_common+0x3e>
 8004dd4:	18e1      	adds	r1, r4, r3
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	2030      	movs	r0, #48	; 0x30
 8004dda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dde:	4422      	add	r2, r4
 8004de0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004de4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004de8:	3302      	adds	r3, #2
 8004dea:	e7c7      	b.n	8004d7c <_printf_common+0x58>
 8004dec:	2301      	movs	r3, #1
 8004dee:	4622      	mov	r2, r4
 8004df0:	4649      	mov	r1, r9
 8004df2:	4638      	mov	r0, r7
 8004df4:	47c0      	blx	r8
 8004df6:	3001      	adds	r0, #1
 8004df8:	d0e6      	beq.n	8004dc8 <_printf_common+0xa4>
 8004dfa:	3601      	adds	r6, #1
 8004dfc:	e7d9      	b.n	8004db2 <_printf_common+0x8e>
	...

08004e00 <_printf_i>:
 8004e00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e04:	7e0f      	ldrb	r7, [r1, #24]
 8004e06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e08:	2f78      	cmp	r7, #120	; 0x78
 8004e0a:	4691      	mov	r9, r2
 8004e0c:	4680      	mov	r8, r0
 8004e0e:	460c      	mov	r4, r1
 8004e10:	469a      	mov	sl, r3
 8004e12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e16:	d807      	bhi.n	8004e28 <_printf_i+0x28>
 8004e18:	2f62      	cmp	r7, #98	; 0x62
 8004e1a:	d80a      	bhi.n	8004e32 <_printf_i+0x32>
 8004e1c:	2f00      	cmp	r7, #0
 8004e1e:	f000 80d8 	beq.w	8004fd2 <_printf_i+0x1d2>
 8004e22:	2f58      	cmp	r7, #88	; 0x58
 8004e24:	f000 80a3 	beq.w	8004f6e <_printf_i+0x16e>
 8004e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e30:	e03a      	b.n	8004ea8 <_printf_i+0xa8>
 8004e32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e36:	2b15      	cmp	r3, #21
 8004e38:	d8f6      	bhi.n	8004e28 <_printf_i+0x28>
 8004e3a:	a101      	add	r1, pc, #4	; (adr r1, 8004e40 <_printf_i+0x40>)
 8004e3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e40:	08004e99 	.word	0x08004e99
 8004e44:	08004ead 	.word	0x08004ead
 8004e48:	08004e29 	.word	0x08004e29
 8004e4c:	08004e29 	.word	0x08004e29
 8004e50:	08004e29 	.word	0x08004e29
 8004e54:	08004e29 	.word	0x08004e29
 8004e58:	08004ead 	.word	0x08004ead
 8004e5c:	08004e29 	.word	0x08004e29
 8004e60:	08004e29 	.word	0x08004e29
 8004e64:	08004e29 	.word	0x08004e29
 8004e68:	08004e29 	.word	0x08004e29
 8004e6c:	08004fb9 	.word	0x08004fb9
 8004e70:	08004edd 	.word	0x08004edd
 8004e74:	08004f9b 	.word	0x08004f9b
 8004e78:	08004e29 	.word	0x08004e29
 8004e7c:	08004e29 	.word	0x08004e29
 8004e80:	08004fdb 	.word	0x08004fdb
 8004e84:	08004e29 	.word	0x08004e29
 8004e88:	08004edd 	.word	0x08004edd
 8004e8c:	08004e29 	.word	0x08004e29
 8004e90:	08004e29 	.word	0x08004e29
 8004e94:	08004fa3 	.word	0x08004fa3
 8004e98:	682b      	ldr	r3, [r5, #0]
 8004e9a:	1d1a      	adds	r2, r3, #4
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	602a      	str	r2, [r5, #0]
 8004ea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e0a3      	b.n	8004ff4 <_printf_i+0x1f4>
 8004eac:	6820      	ldr	r0, [r4, #0]
 8004eae:	6829      	ldr	r1, [r5, #0]
 8004eb0:	0606      	lsls	r6, r0, #24
 8004eb2:	f101 0304 	add.w	r3, r1, #4
 8004eb6:	d50a      	bpl.n	8004ece <_printf_i+0xce>
 8004eb8:	680e      	ldr	r6, [r1, #0]
 8004eba:	602b      	str	r3, [r5, #0]
 8004ebc:	2e00      	cmp	r6, #0
 8004ebe:	da03      	bge.n	8004ec8 <_printf_i+0xc8>
 8004ec0:	232d      	movs	r3, #45	; 0x2d
 8004ec2:	4276      	negs	r6, r6
 8004ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ec8:	485e      	ldr	r0, [pc, #376]	; (8005044 <_printf_i+0x244>)
 8004eca:	230a      	movs	r3, #10
 8004ecc:	e019      	b.n	8004f02 <_printf_i+0x102>
 8004ece:	680e      	ldr	r6, [r1, #0]
 8004ed0:	602b      	str	r3, [r5, #0]
 8004ed2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ed6:	bf18      	it	ne
 8004ed8:	b236      	sxthne	r6, r6
 8004eda:	e7ef      	b.n	8004ebc <_printf_i+0xbc>
 8004edc:	682b      	ldr	r3, [r5, #0]
 8004ede:	6820      	ldr	r0, [r4, #0]
 8004ee0:	1d19      	adds	r1, r3, #4
 8004ee2:	6029      	str	r1, [r5, #0]
 8004ee4:	0601      	lsls	r1, r0, #24
 8004ee6:	d501      	bpl.n	8004eec <_printf_i+0xec>
 8004ee8:	681e      	ldr	r6, [r3, #0]
 8004eea:	e002      	b.n	8004ef2 <_printf_i+0xf2>
 8004eec:	0646      	lsls	r6, r0, #25
 8004eee:	d5fb      	bpl.n	8004ee8 <_printf_i+0xe8>
 8004ef0:	881e      	ldrh	r6, [r3, #0]
 8004ef2:	4854      	ldr	r0, [pc, #336]	; (8005044 <_printf_i+0x244>)
 8004ef4:	2f6f      	cmp	r7, #111	; 0x6f
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2308      	moveq	r3, #8
 8004efa:	230a      	movne	r3, #10
 8004efc:	2100      	movs	r1, #0
 8004efe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f02:	6865      	ldr	r5, [r4, #4]
 8004f04:	60a5      	str	r5, [r4, #8]
 8004f06:	2d00      	cmp	r5, #0
 8004f08:	bfa2      	ittt	ge
 8004f0a:	6821      	ldrge	r1, [r4, #0]
 8004f0c:	f021 0104 	bicge.w	r1, r1, #4
 8004f10:	6021      	strge	r1, [r4, #0]
 8004f12:	b90e      	cbnz	r6, 8004f18 <_printf_i+0x118>
 8004f14:	2d00      	cmp	r5, #0
 8004f16:	d04d      	beq.n	8004fb4 <_printf_i+0x1b4>
 8004f18:	4615      	mov	r5, r2
 8004f1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f1e:	fb03 6711 	mls	r7, r3, r1, r6
 8004f22:	5dc7      	ldrb	r7, [r0, r7]
 8004f24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f28:	4637      	mov	r7, r6
 8004f2a:	42bb      	cmp	r3, r7
 8004f2c:	460e      	mov	r6, r1
 8004f2e:	d9f4      	bls.n	8004f1a <_printf_i+0x11a>
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d10b      	bne.n	8004f4c <_printf_i+0x14c>
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	07de      	lsls	r6, r3, #31
 8004f38:	d508      	bpl.n	8004f4c <_printf_i+0x14c>
 8004f3a:	6923      	ldr	r3, [r4, #16]
 8004f3c:	6861      	ldr	r1, [r4, #4]
 8004f3e:	4299      	cmp	r1, r3
 8004f40:	bfde      	ittt	le
 8004f42:	2330      	movle	r3, #48	; 0x30
 8004f44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f4c:	1b52      	subs	r2, r2, r5
 8004f4e:	6122      	str	r2, [r4, #16]
 8004f50:	f8cd a000 	str.w	sl, [sp]
 8004f54:	464b      	mov	r3, r9
 8004f56:	aa03      	add	r2, sp, #12
 8004f58:	4621      	mov	r1, r4
 8004f5a:	4640      	mov	r0, r8
 8004f5c:	f7ff fee2 	bl	8004d24 <_printf_common>
 8004f60:	3001      	adds	r0, #1
 8004f62:	d14c      	bne.n	8004ffe <_printf_i+0x1fe>
 8004f64:	f04f 30ff 	mov.w	r0, #4294967295
 8004f68:	b004      	add	sp, #16
 8004f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f6e:	4835      	ldr	r0, [pc, #212]	; (8005044 <_printf_i+0x244>)
 8004f70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f74:	6829      	ldr	r1, [r5, #0]
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f7c:	6029      	str	r1, [r5, #0]
 8004f7e:	061d      	lsls	r5, r3, #24
 8004f80:	d514      	bpl.n	8004fac <_printf_i+0x1ac>
 8004f82:	07df      	lsls	r7, r3, #31
 8004f84:	bf44      	itt	mi
 8004f86:	f043 0320 	orrmi.w	r3, r3, #32
 8004f8a:	6023      	strmi	r3, [r4, #0]
 8004f8c:	b91e      	cbnz	r6, 8004f96 <_printf_i+0x196>
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	f023 0320 	bic.w	r3, r3, #32
 8004f94:	6023      	str	r3, [r4, #0]
 8004f96:	2310      	movs	r3, #16
 8004f98:	e7b0      	b.n	8004efc <_printf_i+0xfc>
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	f043 0320 	orr.w	r3, r3, #32
 8004fa0:	6023      	str	r3, [r4, #0]
 8004fa2:	2378      	movs	r3, #120	; 0x78
 8004fa4:	4828      	ldr	r0, [pc, #160]	; (8005048 <_printf_i+0x248>)
 8004fa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004faa:	e7e3      	b.n	8004f74 <_printf_i+0x174>
 8004fac:	0659      	lsls	r1, r3, #25
 8004fae:	bf48      	it	mi
 8004fb0:	b2b6      	uxthmi	r6, r6
 8004fb2:	e7e6      	b.n	8004f82 <_printf_i+0x182>
 8004fb4:	4615      	mov	r5, r2
 8004fb6:	e7bb      	b.n	8004f30 <_printf_i+0x130>
 8004fb8:	682b      	ldr	r3, [r5, #0]
 8004fba:	6826      	ldr	r6, [r4, #0]
 8004fbc:	6961      	ldr	r1, [r4, #20]
 8004fbe:	1d18      	adds	r0, r3, #4
 8004fc0:	6028      	str	r0, [r5, #0]
 8004fc2:	0635      	lsls	r5, r6, #24
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	d501      	bpl.n	8004fcc <_printf_i+0x1cc>
 8004fc8:	6019      	str	r1, [r3, #0]
 8004fca:	e002      	b.n	8004fd2 <_printf_i+0x1d2>
 8004fcc:	0670      	lsls	r0, r6, #25
 8004fce:	d5fb      	bpl.n	8004fc8 <_printf_i+0x1c8>
 8004fd0:	8019      	strh	r1, [r3, #0]
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	6123      	str	r3, [r4, #16]
 8004fd6:	4615      	mov	r5, r2
 8004fd8:	e7ba      	b.n	8004f50 <_printf_i+0x150>
 8004fda:	682b      	ldr	r3, [r5, #0]
 8004fdc:	1d1a      	adds	r2, r3, #4
 8004fde:	602a      	str	r2, [r5, #0]
 8004fe0:	681d      	ldr	r5, [r3, #0]
 8004fe2:	6862      	ldr	r2, [r4, #4]
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	f7fb f8fa 	bl	80001e0 <memchr>
 8004fec:	b108      	cbz	r0, 8004ff2 <_printf_i+0x1f2>
 8004fee:	1b40      	subs	r0, r0, r5
 8004ff0:	6060      	str	r0, [r4, #4]
 8004ff2:	6863      	ldr	r3, [r4, #4]
 8004ff4:	6123      	str	r3, [r4, #16]
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ffc:	e7a8      	b.n	8004f50 <_printf_i+0x150>
 8004ffe:	6923      	ldr	r3, [r4, #16]
 8005000:	462a      	mov	r2, r5
 8005002:	4649      	mov	r1, r9
 8005004:	4640      	mov	r0, r8
 8005006:	47d0      	blx	sl
 8005008:	3001      	adds	r0, #1
 800500a:	d0ab      	beq.n	8004f64 <_printf_i+0x164>
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	079b      	lsls	r3, r3, #30
 8005010:	d413      	bmi.n	800503a <_printf_i+0x23a>
 8005012:	68e0      	ldr	r0, [r4, #12]
 8005014:	9b03      	ldr	r3, [sp, #12]
 8005016:	4298      	cmp	r0, r3
 8005018:	bfb8      	it	lt
 800501a:	4618      	movlt	r0, r3
 800501c:	e7a4      	b.n	8004f68 <_printf_i+0x168>
 800501e:	2301      	movs	r3, #1
 8005020:	4632      	mov	r2, r6
 8005022:	4649      	mov	r1, r9
 8005024:	4640      	mov	r0, r8
 8005026:	47d0      	blx	sl
 8005028:	3001      	adds	r0, #1
 800502a:	d09b      	beq.n	8004f64 <_printf_i+0x164>
 800502c:	3501      	adds	r5, #1
 800502e:	68e3      	ldr	r3, [r4, #12]
 8005030:	9903      	ldr	r1, [sp, #12]
 8005032:	1a5b      	subs	r3, r3, r1
 8005034:	42ab      	cmp	r3, r5
 8005036:	dcf2      	bgt.n	800501e <_printf_i+0x21e>
 8005038:	e7eb      	b.n	8005012 <_printf_i+0x212>
 800503a:	2500      	movs	r5, #0
 800503c:	f104 0619 	add.w	r6, r4, #25
 8005040:	e7f5      	b.n	800502e <_printf_i+0x22e>
 8005042:	bf00      	nop
 8005044:	0800536d 	.word	0x0800536d
 8005048:	0800537e 	.word	0x0800537e

0800504c <memcpy>:
 800504c:	440a      	add	r2, r1
 800504e:	4291      	cmp	r1, r2
 8005050:	f100 33ff 	add.w	r3, r0, #4294967295
 8005054:	d100      	bne.n	8005058 <memcpy+0xc>
 8005056:	4770      	bx	lr
 8005058:	b510      	push	{r4, lr}
 800505a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800505e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005062:	4291      	cmp	r1, r2
 8005064:	d1f9      	bne.n	800505a <memcpy+0xe>
 8005066:	bd10      	pop	{r4, pc}

08005068 <memmove>:
 8005068:	4288      	cmp	r0, r1
 800506a:	b510      	push	{r4, lr}
 800506c:	eb01 0402 	add.w	r4, r1, r2
 8005070:	d902      	bls.n	8005078 <memmove+0x10>
 8005072:	4284      	cmp	r4, r0
 8005074:	4623      	mov	r3, r4
 8005076:	d807      	bhi.n	8005088 <memmove+0x20>
 8005078:	1e43      	subs	r3, r0, #1
 800507a:	42a1      	cmp	r1, r4
 800507c:	d008      	beq.n	8005090 <memmove+0x28>
 800507e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005082:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005086:	e7f8      	b.n	800507a <memmove+0x12>
 8005088:	4402      	add	r2, r0
 800508a:	4601      	mov	r1, r0
 800508c:	428a      	cmp	r2, r1
 800508e:	d100      	bne.n	8005092 <memmove+0x2a>
 8005090:	bd10      	pop	{r4, pc}
 8005092:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005096:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800509a:	e7f7      	b.n	800508c <memmove+0x24>

0800509c <_free_r>:
 800509c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800509e:	2900      	cmp	r1, #0
 80050a0:	d044      	beq.n	800512c <_free_r+0x90>
 80050a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050a6:	9001      	str	r0, [sp, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f1a1 0404 	sub.w	r4, r1, #4
 80050ae:	bfb8      	it	lt
 80050b0:	18e4      	addlt	r4, r4, r3
 80050b2:	f000 f913 	bl	80052dc <__malloc_lock>
 80050b6:	4a1e      	ldr	r2, [pc, #120]	; (8005130 <_free_r+0x94>)
 80050b8:	9801      	ldr	r0, [sp, #4]
 80050ba:	6813      	ldr	r3, [r2, #0]
 80050bc:	b933      	cbnz	r3, 80050cc <_free_r+0x30>
 80050be:	6063      	str	r3, [r4, #4]
 80050c0:	6014      	str	r4, [r2, #0]
 80050c2:	b003      	add	sp, #12
 80050c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050c8:	f000 b90e 	b.w	80052e8 <__malloc_unlock>
 80050cc:	42a3      	cmp	r3, r4
 80050ce:	d908      	bls.n	80050e2 <_free_r+0x46>
 80050d0:	6825      	ldr	r5, [r4, #0]
 80050d2:	1961      	adds	r1, r4, r5
 80050d4:	428b      	cmp	r3, r1
 80050d6:	bf01      	itttt	eq
 80050d8:	6819      	ldreq	r1, [r3, #0]
 80050da:	685b      	ldreq	r3, [r3, #4]
 80050dc:	1949      	addeq	r1, r1, r5
 80050de:	6021      	streq	r1, [r4, #0]
 80050e0:	e7ed      	b.n	80050be <_free_r+0x22>
 80050e2:	461a      	mov	r2, r3
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	b10b      	cbz	r3, 80050ec <_free_r+0x50>
 80050e8:	42a3      	cmp	r3, r4
 80050ea:	d9fa      	bls.n	80050e2 <_free_r+0x46>
 80050ec:	6811      	ldr	r1, [r2, #0]
 80050ee:	1855      	adds	r5, r2, r1
 80050f0:	42a5      	cmp	r5, r4
 80050f2:	d10b      	bne.n	800510c <_free_r+0x70>
 80050f4:	6824      	ldr	r4, [r4, #0]
 80050f6:	4421      	add	r1, r4
 80050f8:	1854      	adds	r4, r2, r1
 80050fa:	42a3      	cmp	r3, r4
 80050fc:	6011      	str	r1, [r2, #0]
 80050fe:	d1e0      	bne.n	80050c2 <_free_r+0x26>
 8005100:	681c      	ldr	r4, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	6053      	str	r3, [r2, #4]
 8005106:	4421      	add	r1, r4
 8005108:	6011      	str	r1, [r2, #0]
 800510a:	e7da      	b.n	80050c2 <_free_r+0x26>
 800510c:	d902      	bls.n	8005114 <_free_r+0x78>
 800510e:	230c      	movs	r3, #12
 8005110:	6003      	str	r3, [r0, #0]
 8005112:	e7d6      	b.n	80050c2 <_free_r+0x26>
 8005114:	6825      	ldr	r5, [r4, #0]
 8005116:	1961      	adds	r1, r4, r5
 8005118:	428b      	cmp	r3, r1
 800511a:	bf04      	itt	eq
 800511c:	6819      	ldreq	r1, [r3, #0]
 800511e:	685b      	ldreq	r3, [r3, #4]
 8005120:	6063      	str	r3, [r4, #4]
 8005122:	bf04      	itt	eq
 8005124:	1949      	addeq	r1, r1, r5
 8005126:	6021      	streq	r1, [r4, #0]
 8005128:	6054      	str	r4, [r2, #4]
 800512a:	e7ca      	b.n	80050c2 <_free_r+0x26>
 800512c:	b003      	add	sp, #12
 800512e:	bd30      	pop	{r4, r5, pc}
 8005130:	20000498 	.word	0x20000498

08005134 <sbrk_aligned>:
 8005134:	b570      	push	{r4, r5, r6, lr}
 8005136:	4e0e      	ldr	r6, [pc, #56]	; (8005170 <sbrk_aligned+0x3c>)
 8005138:	460c      	mov	r4, r1
 800513a:	6831      	ldr	r1, [r6, #0]
 800513c:	4605      	mov	r5, r0
 800513e:	b911      	cbnz	r1, 8005146 <sbrk_aligned+0x12>
 8005140:	f000 f8bc 	bl	80052bc <_sbrk_r>
 8005144:	6030      	str	r0, [r6, #0]
 8005146:	4621      	mov	r1, r4
 8005148:	4628      	mov	r0, r5
 800514a:	f000 f8b7 	bl	80052bc <_sbrk_r>
 800514e:	1c43      	adds	r3, r0, #1
 8005150:	d00a      	beq.n	8005168 <sbrk_aligned+0x34>
 8005152:	1cc4      	adds	r4, r0, #3
 8005154:	f024 0403 	bic.w	r4, r4, #3
 8005158:	42a0      	cmp	r0, r4
 800515a:	d007      	beq.n	800516c <sbrk_aligned+0x38>
 800515c:	1a21      	subs	r1, r4, r0
 800515e:	4628      	mov	r0, r5
 8005160:	f000 f8ac 	bl	80052bc <_sbrk_r>
 8005164:	3001      	adds	r0, #1
 8005166:	d101      	bne.n	800516c <sbrk_aligned+0x38>
 8005168:	f04f 34ff 	mov.w	r4, #4294967295
 800516c:	4620      	mov	r0, r4
 800516e:	bd70      	pop	{r4, r5, r6, pc}
 8005170:	2000049c 	.word	0x2000049c

08005174 <_malloc_r>:
 8005174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005178:	1ccd      	adds	r5, r1, #3
 800517a:	f025 0503 	bic.w	r5, r5, #3
 800517e:	3508      	adds	r5, #8
 8005180:	2d0c      	cmp	r5, #12
 8005182:	bf38      	it	cc
 8005184:	250c      	movcc	r5, #12
 8005186:	2d00      	cmp	r5, #0
 8005188:	4607      	mov	r7, r0
 800518a:	db01      	blt.n	8005190 <_malloc_r+0x1c>
 800518c:	42a9      	cmp	r1, r5
 800518e:	d905      	bls.n	800519c <_malloc_r+0x28>
 8005190:	230c      	movs	r3, #12
 8005192:	603b      	str	r3, [r7, #0]
 8005194:	2600      	movs	r6, #0
 8005196:	4630      	mov	r0, r6
 8005198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800519c:	4e2e      	ldr	r6, [pc, #184]	; (8005258 <_malloc_r+0xe4>)
 800519e:	f000 f89d 	bl	80052dc <__malloc_lock>
 80051a2:	6833      	ldr	r3, [r6, #0]
 80051a4:	461c      	mov	r4, r3
 80051a6:	bb34      	cbnz	r4, 80051f6 <_malloc_r+0x82>
 80051a8:	4629      	mov	r1, r5
 80051aa:	4638      	mov	r0, r7
 80051ac:	f7ff ffc2 	bl	8005134 <sbrk_aligned>
 80051b0:	1c43      	adds	r3, r0, #1
 80051b2:	4604      	mov	r4, r0
 80051b4:	d14d      	bne.n	8005252 <_malloc_r+0xde>
 80051b6:	6834      	ldr	r4, [r6, #0]
 80051b8:	4626      	mov	r6, r4
 80051ba:	2e00      	cmp	r6, #0
 80051bc:	d140      	bne.n	8005240 <_malloc_r+0xcc>
 80051be:	6823      	ldr	r3, [r4, #0]
 80051c0:	4631      	mov	r1, r6
 80051c2:	4638      	mov	r0, r7
 80051c4:	eb04 0803 	add.w	r8, r4, r3
 80051c8:	f000 f878 	bl	80052bc <_sbrk_r>
 80051cc:	4580      	cmp	r8, r0
 80051ce:	d13a      	bne.n	8005246 <_malloc_r+0xd2>
 80051d0:	6821      	ldr	r1, [r4, #0]
 80051d2:	3503      	adds	r5, #3
 80051d4:	1a6d      	subs	r5, r5, r1
 80051d6:	f025 0503 	bic.w	r5, r5, #3
 80051da:	3508      	adds	r5, #8
 80051dc:	2d0c      	cmp	r5, #12
 80051de:	bf38      	it	cc
 80051e0:	250c      	movcc	r5, #12
 80051e2:	4629      	mov	r1, r5
 80051e4:	4638      	mov	r0, r7
 80051e6:	f7ff ffa5 	bl	8005134 <sbrk_aligned>
 80051ea:	3001      	adds	r0, #1
 80051ec:	d02b      	beq.n	8005246 <_malloc_r+0xd2>
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	442b      	add	r3, r5
 80051f2:	6023      	str	r3, [r4, #0]
 80051f4:	e00e      	b.n	8005214 <_malloc_r+0xa0>
 80051f6:	6822      	ldr	r2, [r4, #0]
 80051f8:	1b52      	subs	r2, r2, r5
 80051fa:	d41e      	bmi.n	800523a <_malloc_r+0xc6>
 80051fc:	2a0b      	cmp	r2, #11
 80051fe:	d916      	bls.n	800522e <_malloc_r+0xba>
 8005200:	1961      	adds	r1, r4, r5
 8005202:	42a3      	cmp	r3, r4
 8005204:	6025      	str	r5, [r4, #0]
 8005206:	bf18      	it	ne
 8005208:	6059      	strne	r1, [r3, #4]
 800520a:	6863      	ldr	r3, [r4, #4]
 800520c:	bf08      	it	eq
 800520e:	6031      	streq	r1, [r6, #0]
 8005210:	5162      	str	r2, [r4, r5]
 8005212:	604b      	str	r3, [r1, #4]
 8005214:	4638      	mov	r0, r7
 8005216:	f104 060b 	add.w	r6, r4, #11
 800521a:	f000 f865 	bl	80052e8 <__malloc_unlock>
 800521e:	f026 0607 	bic.w	r6, r6, #7
 8005222:	1d23      	adds	r3, r4, #4
 8005224:	1af2      	subs	r2, r6, r3
 8005226:	d0b6      	beq.n	8005196 <_malloc_r+0x22>
 8005228:	1b9b      	subs	r3, r3, r6
 800522a:	50a3      	str	r3, [r4, r2]
 800522c:	e7b3      	b.n	8005196 <_malloc_r+0x22>
 800522e:	6862      	ldr	r2, [r4, #4]
 8005230:	42a3      	cmp	r3, r4
 8005232:	bf0c      	ite	eq
 8005234:	6032      	streq	r2, [r6, #0]
 8005236:	605a      	strne	r2, [r3, #4]
 8005238:	e7ec      	b.n	8005214 <_malloc_r+0xa0>
 800523a:	4623      	mov	r3, r4
 800523c:	6864      	ldr	r4, [r4, #4]
 800523e:	e7b2      	b.n	80051a6 <_malloc_r+0x32>
 8005240:	4634      	mov	r4, r6
 8005242:	6876      	ldr	r6, [r6, #4]
 8005244:	e7b9      	b.n	80051ba <_malloc_r+0x46>
 8005246:	230c      	movs	r3, #12
 8005248:	603b      	str	r3, [r7, #0]
 800524a:	4638      	mov	r0, r7
 800524c:	f000 f84c 	bl	80052e8 <__malloc_unlock>
 8005250:	e7a1      	b.n	8005196 <_malloc_r+0x22>
 8005252:	6025      	str	r5, [r4, #0]
 8005254:	e7de      	b.n	8005214 <_malloc_r+0xa0>
 8005256:	bf00      	nop
 8005258:	20000498 	.word	0x20000498

0800525c <_realloc_r>:
 800525c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005260:	4680      	mov	r8, r0
 8005262:	4614      	mov	r4, r2
 8005264:	460e      	mov	r6, r1
 8005266:	b921      	cbnz	r1, 8005272 <_realloc_r+0x16>
 8005268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800526c:	4611      	mov	r1, r2
 800526e:	f7ff bf81 	b.w	8005174 <_malloc_r>
 8005272:	b92a      	cbnz	r2, 8005280 <_realloc_r+0x24>
 8005274:	f7ff ff12 	bl	800509c <_free_r>
 8005278:	4625      	mov	r5, r4
 800527a:	4628      	mov	r0, r5
 800527c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005280:	f000 f838 	bl	80052f4 <_malloc_usable_size_r>
 8005284:	4284      	cmp	r4, r0
 8005286:	4607      	mov	r7, r0
 8005288:	d802      	bhi.n	8005290 <_realloc_r+0x34>
 800528a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800528e:	d812      	bhi.n	80052b6 <_realloc_r+0x5a>
 8005290:	4621      	mov	r1, r4
 8005292:	4640      	mov	r0, r8
 8005294:	f7ff ff6e 	bl	8005174 <_malloc_r>
 8005298:	4605      	mov	r5, r0
 800529a:	2800      	cmp	r0, #0
 800529c:	d0ed      	beq.n	800527a <_realloc_r+0x1e>
 800529e:	42bc      	cmp	r4, r7
 80052a0:	4622      	mov	r2, r4
 80052a2:	4631      	mov	r1, r6
 80052a4:	bf28      	it	cs
 80052a6:	463a      	movcs	r2, r7
 80052a8:	f7ff fed0 	bl	800504c <memcpy>
 80052ac:	4631      	mov	r1, r6
 80052ae:	4640      	mov	r0, r8
 80052b0:	f7ff fef4 	bl	800509c <_free_r>
 80052b4:	e7e1      	b.n	800527a <_realloc_r+0x1e>
 80052b6:	4635      	mov	r5, r6
 80052b8:	e7df      	b.n	800527a <_realloc_r+0x1e>
	...

080052bc <_sbrk_r>:
 80052bc:	b538      	push	{r3, r4, r5, lr}
 80052be:	4d06      	ldr	r5, [pc, #24]	; (80052d8 <_sbrk_r+0x1c>)
 80052c0:	2300      	movs	r3, #0
 80052c2:	4604      	mov	r4, r0
 80052c4:	4608      	mov	r0, r1
 80052c6:	602b      	str	r3, [r5, #0]
 80052c8:	f7fb febe 	bl	8001048 <_sbrk>
 80052cc:	1c43      	adds	r3, r0, #1
 80052ce:	d102      	bne.n	80052d6 <_sbrk_r+0x1a>
 80052d0:	682b      	ldr	r3, [r5, #0]
 80052d2:	b103      	cbz	r3, 80052d6 <_sbrk_r+0x1a>
 80052d4:	6023      	str	r3, [r4, #0]
 80052d6:	bd38      	pop	{r3, r4, r5, pc}
 80052d8:	200004a0 	.word	0x200004a0

080052dc <__malloc_lock>:
 80052dc:	4801      	ldr	r0, [pc, #4]	; (80052e4 <__malloc_lock+0x8>)
 80052de:	f000 b811 	b.w	8005304 <__retarget_lock_acquire_recursive>
 80052e2:	bf00      	nop
 80052e4:	200004a4 	.word	0x200004a4

080052e8 <__malloc_unlock>:
 80052e8:	4801      	ldr	r0, [pc, #4]	; (80052f0 <__malloc_unlock+0x8>)
 80052ea:	f000 b80c 	b.w	8005306 <__retarget_lock_release_recursive>
 80052ee:	bf00      	nop
 80052f0:	200004a4 	.word	0x200004a4

080052f4 <_malloc_usable_size_r>:
 80052f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052f8:	1f18      	subs	r0, r3, #4
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	bfbc      	itt	lt
 80052fe:	580b      	ldrlt	r3, [r1, r0]
 8005300:	18c0      	addlt	r0, r0, r3
 8005302:	4770      	bx	lr

08005304 <__retarget_lock_acquire_recursive>:
 8005304:	4770      	bx	lr

08005306 <__retarget_lock_release_recursive>:
 8005306:	4770      	bx	lr

08005308 <_init>:
 8005308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530a:	bf00      	nop
 800530c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530e:	bc08      	pop	{r3}
 8005310:	469e      	mov	lr, r3
 8005312:	4770      	bx	lr

08005314 <_fini>:
 8005314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005316:	bf00      	nop
 8005318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800531a:	bc08      	pop	{r3}
 800531c:	469e      	mov	lr, r3
 800531e:	4770      	bx	lr
