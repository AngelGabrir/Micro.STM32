
Tocayo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08005014  08005014  00015014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800512c  0800512c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800512c  0800512c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800512c  0800512c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800512c  0800512c  0001512c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005130  08005130  00015130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001120  20000074  080051a8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001194  080051a8  00021194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128fc  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad3  00000000  00000000  000329a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  00035478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e70  00000000  00000000  00036420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d106  00000000  00000000  00037290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000125a4  00000000  00000000  00054396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af62c  00000000  00000000  0006693a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00115f66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004350  00000000  00000000  00115fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ffc 	.word	0x08004ffc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004ffc 	.word	0x08004ffc

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000090 	.word	0x20000090
 8000200:	20000144 	.word	0x20000144

08000204 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000204:	b5b0      	push	{r4, r5, r7, lr}
 8000206:	b096      	sub	sp, #88	; 0x58
 8000208:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800020a:	f000 fb13 	bl	8000834 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800020e:	f000 f851 	bl	80002b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000212:	f000 f955 	bl	80004c0 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000216:	f000 f8a9 	bl	800036c <MX_ADC1_Init>
	MX_TIM2_Init();
 800021a:	f000 f903 	bl	8000424 <MX_TIM2_Init>
	HAL_ADC_Start(&hadc1);
 800021e:	481e      	ldr	r0, [pc, #120]	; (8000298 <main+0x94>)
 8000220:	f000 fcc4 	bl	8000bac <HAL_ADC_Start>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000224:	4b1d      	ldr	r3, [pc, #116]	; (800029c <main+0x98>)
 8000226:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800022a:	461d      	mov	r5, r3
 800022c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800022e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000230:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000234:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000238:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f003 fba1 	bl	8003986 <osThreadCreate>
 8000244:	4603      	mov	r3, r0
 8000246:	4a16      	ldr	r2, [pc, #88]	; (80002a0 <main+0x9c>)
 8000248:	6013      	str	r3, [r2, #0]

	/* definition and creation of myTask02 */
	osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 800024a:	4b16      	ldr	r3, [pc, #88]	; (80002a4 <main+0xa0>)
 800024c:	f107 0420 	add.w	r4, r7, #32
 8000250:	461d      	mov	r5, r3
 8000252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000256:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800025a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800025e:	f107 0320 	add.w	r3, r7, #32
 8000262:	2100      	movs	r1, #0
 8000264:	4618      	mov	r0, r3
 8000266:	f003 fb8e 	bl	8003986 <osThreadCreate>
 800026a:	4603      	mov	r3, r0
 800026c:	4a0e      	ldr	r2, [pc, #56]	; (80002a8 <main+0xa4>)
 800026e:	6013      	str	r3, [r2, #0]

	/* definition and creation of myTask03 */
	osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 8000270:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <main+0xa8>)
 8000272:	1d3c      	adds	r4, r7, #4
 8000274:	461d      	mov	r5, r3
 8000276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000278:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800027a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800027e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f003 fb7d 	bl	8003986 <osThreadCreate>
 800028c:	4603      	mov	r3, r0
 800028e:	4a08      	ldr	r2, [pc, #32]	; (80002b0 <main+0xac>)
 8000290:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000292:	f003 fb71 	bl	8003978 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000296:	e7fe      	b.n	8000296 <main+0x92>
 8000298:	20000344 	.word	0x20000344
 800029c:	08005038 	.word	0x08005038
 80002a0:	200003e0 	.word	0x200003e0
 80002a4:	08005054 	.word	0x08005054
 80002a8:	200003e4 	.word	0x200003e4
 80002ac:	08005070 	.word	0x08005070
 80002b0:	200003e8 	.word	0x200003e8

080002b4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b09c      	sub	sp, #112	; 0x70
 80002b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002be:	2228      	movs	r2, #40	; 0x28
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f004 fdd0 	bl	8004e68 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
 80002d6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80002d8:	463b      	mov	r3, r7
 80002da:	2234      	movs	r2, #52	; 0x34
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f004 fdc2 	bl	8004e68 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002e4:	2301      	movs	r3, #1
 80002e6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ec:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f2:	2301      	movs	r3, #1
 80002f4:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f6:	2302      	movs	r3, #2
 80002f8:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002fe:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000300:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000304:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000306:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800030a:	4618      	mov	r0, r3
 800030c:	f001 fab4 	bl	8001878 <HAL_RCC_OscConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x66>
		Error_Handler();
 8000316:	f000 f955 	bl	80005c4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800031a:	230f      	movs	r3, #15
 800031c:	637b      	str	r3, [r7, #52]	; 0x34
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800031e:	2302      	movs	r3, #2
 8000320:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800032a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	647b      	str	r3, [r7, #68]	; 0x44

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000330:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000334:	2102      	movs	r1, #2
 8000336:	4618      	mov	r0, r3
 8000338:	f002 fadc 	bl	80028f4 <HAL_RCC_ClockConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x92>
		Error_Handler();
 8000342:	f000 f93f 	bl	80005c4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC1;
 8000346:	2380      	movs	r3, #128	; 0x80
 8000348:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 800034a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800034e:	61bb      	str	r3, [r7, #24]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000350:	463b      	mov	r3, r7
 8000352:	4618      	mov	r0, r3
 8000354:	f002 fd14 	bl	8002d80 <HAL_RCCEx_PeriphCLKConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0xae>
		Error_Handler();
 800035e:	f000 f931 	bl	80005c4 <Error_Handler>
	}
}
 8000362:	bf00      	nop
 8000364:	3770      	adds	r7, #112	; 0x70
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
	...

0800036c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b086      	sub	sp, #24
 8000370:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000372:	463b      	mov	r3, r7
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
 800037c:	60da      	str	r2, [r3, #12]
 800037e:	611a      	str	r2, [r3, #16]
 8000380:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000382:	4b27      	ldr	r3, [pc, #156]	; (8000420 <MX_ADC1_Init+0xb4>)
 8000384:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000388:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800038a:	4b25      	ldr	r3, [pc, #148]	; (8000420 <MX_ADC1_Init+0xb4>)
 800038c:	2200      	movs	r2, #0
 800038e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000390:	4b23      	ldr	r3, [pc, #140]	; (8000420 <MX_ADC1_Init+0xb4>)
 8000392:	2200      	movs	r2, #0
 8000394:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000396:	4b22      	ldr	r3, [pc, #136]	; (8000420 <MX_ADC1_Init+0xb4>)
 8000398:	2200      	movs	r2, #0
 800039a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800039c:	4b20      	ldr	r3, [pc, #128]	; (8000420 <MX_ADC1_Init+0xb4>)
 800039e:	2201      	movs	r2, #1
 80003a0:	765a      	strb	r2, [r3, #25]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003a2:	4b1f      	ldr	r3, [pc, #124]	; (8000420 <MX_ADC1_Init+0xb4>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003aa:	4b1d      	ldr	r3, [pc, #116]	; (8000420 <MX_ADC1_Init+0xb4>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003b0:	4b1b      	ldr	r3, [pc, #108]	; (8000420 <MX_ADC1_Init+0xb4>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003b6:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <MX_ADC1_Init+0xb4>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80003bc:	4b18      	ldr	r3, [pc, #96]	; (8000420 <MX_ADC1_Init+0xb4>)
 80003be:	2201      	movs	r2, #1
 80003c0:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80003c2:	4b17      	ldr	r3, [pc, #92]	; (8000420 <MX_ADC1_Init+0xb4>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003ca:	4b15      	ldr	r3, [pc, #84]	; (8000420 <MX_ADC1_Init+0xb4>)
 80003cc:	2204      	movs	r2, #4
 80003ce:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80003d0:	4b13      	ldr	r3, [pc, #76]	; (8000420 <MX_ADC1_Init+0xb4>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	761a      	strb	r2, [r3, #24]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003d6:	4b12      	ldr	r3, [pc, #72]	; (8000420 <MX_ADC1_Init+0xb4>)
 80003d8:	2200      	movs	r2, #0
 80003da:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80003dc:	4810      	ldr	r0, [pc, #64]	; (8000420 <MX_ADC1_Init+0xb4>)
 80003de:	f000 fa5f 	bl	80008a0 <HAL_ADC_Init>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_ADC1_Init+0x80>
		Error_Handler();
 80003e8:	f000 f8ec 	bl	80005c4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 80003ec:	2309      	movs	r3, #9
 80003ee:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80003f0:	2301      	movs	r3, #1
 80003f2:	607b      	str	r3, [r7, #4]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003f4:	2300      	movs	r3, #0
 80003f6:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003f8:	2300      	movs	r3, #0
 80003fa:	60bb      	str	r3, [r7, #8]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003fc:	2300      	movs	r3, #0
 80003fe:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000400:	2300      	movs	r3, #0
 8000402:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000404:	463b      	mov	r3, r7
 8000406:	4619      	mov	r1, r3
 8000408:	4805      	ldr	r0, [pc, #20]	; (8000420 <MX_ADC1_Init+0xb4>)
 800040a:	f000 fc49 	bl	8000ca0 <HAL_ADC_ConfigChannel>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_ADC1_Init+0xac>
		Error_Handler();
 8000414:	f000 f8d6 	bl	80005c4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000418:	bf00      	nop
 800041a:	3718      	adds	r7, #24
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20000344 	.word	0x20000344

08000424 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000424:	b580      	push	{r7, lr}
 8000426:	b088      	sub	sp, #32
 8000428:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800042a:	f107 0310 	add.w	r3, r7, #16
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000442:	4b1e      	ldr	r3, [pc, #120]	; (80004bc <MX_TIM2_Init+0x98>)
 8000444:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000448:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800044a:	4b1c      	ldr	r3, [pc, #112]	; (80004bc <MX_TIM2_Init+0x98>)
 800044c:	2200      	movs	r2, #0
 800044e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000450:	4b1a      	ldr	r3, [pc, #104]	; (80004bc <MX_TIM2_Init+0x98>)
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8000456:	4b19      	ldr	r3, [pc, #100]	; (80004bc <MX_TIM2_Init+0x98>)
 8000458:	f04f 32ff 	mov.w	r2, #4294967295
 800045c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800045e:	4b17      	ldr	r3, [pc, #92]	; (80004bc <MX_TIM2_Init+0x98>)
 8000460:	2200      	movs	r2, #0
 8000462:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000464:	4b15      	ldr	r3, [pc, #84]	; (80004bc <MX_TIM2_Init+0x98>)
 8000466:	2200      	movs	r2, #0
 8000468:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800046a:	4814      	ldr	r0, [pc, #80]	; (80004bc <MX_TIM2_Init+0x98>)
 800046c:	f002 fe1a 	bl	80030a4 <HAL_TIM_Base_Init>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_TIM2_Init+0x56>
		Error_Handler();
 8000476:	f000 f8a5 	bl	80005c4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800047a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800047e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000480:	f107 0310 	add.w	r3, r7, #16
 8000484:	4619      	mov	r1, r3
 8000486:	480d      	ldr	r0, [pc, #52]	; (80004bc <MX_TIM2_Init+0x98>)
 8000488:	f002 ffe1 	bl	800344e <HAL_TIM_ConfigClockSource>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_TIM2_Init+0x72>
		Error_Handler();
 8000492:	f000 f897 	bl	80005c4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000496:	2300      	movs	r3, #0
 8000498:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800049a:	2300      	movs	r3, #0
 800049c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	4619      	mov	r1, r3
 80004a2:	4806      	ldr	r0, [pc, #24]	; (80004bc <MX_TIM2_Init+0x98>)
 80004a4:	f003 f9cc 	bl	8003840 <HAL_TIMEx_MasterConfigSynchronization>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 80004ae:	f000 f889 	bl	80005c4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80004b2:	bf00      	nop
 80004b4:	3720      	adds	r7, #32
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	20000394 	.word	0x20000394

080004c0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80004c6:	f107 030c 	add.w	r3, r7, #12
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80004d6:	4b1f      	ldr	r3, [pc, #124]	; (8000554 <MX_GPIO_Init+0x94>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	4a1e      	ldr	r2, [pc, #120]	; (8000554 <MX_GPIO_Init+0x94>)
 80004dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004e0:	6153      	str	r3, [r2, #20]
 80004e2:	4b1c      	ldr	r3, [pc, #112]	; (8000554 <MX_GPIO_Init+0x94>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004ea:	60bb      	str	r3, [r7, #8]
 80004ec:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	4b19      	ldr	r3, [pc, #100]	; (8000554 <MX_GPIO_Init+0x94>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a18      	ldr	r2, [pc, #96]	; (8000554 <MX_GPIO_Init+0x94>)
 80004f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	4b16      	ldr	r3, [pc, #88]	; (8000554 <MX_GPIO_Init+0x94>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b13      	ldr	r3, [pc, #76]	; (8000554 <MX_GPIO_Init+0x94>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a12      	ldr	r2, [pc, #72]	; (8000554 <MX_GPIO_Init+0x94>)
 800050c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000510:	6153      	str	r3, [r2, #20]
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <MX_GPIO_Init+0x94>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800051a:	603b      	str	r3, [r7, #0]
 800051c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000528:	f001 f98e 	bl	8001848 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 800052c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000530:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000532:	2301      	movs	r3, #1
 8000534:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053e:	f107 030c 	add.w	r3, r7, #12
 8000542:	4619      	mov	r1, r3
 8000544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000548:	f001 f80c 	bl	8001564 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800054c:	bf00      	nop
 800054e:	3720      	adds	r7, #32
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40021000 	.word	0x40021000

08000558 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		//  HAL_ADC_PollForConversion(&hadc1,1000);
		readValue = HAL_ADC_GetValue(&hadc1);
 8000560:	4805      	ldr	r0, [pc, #20]	; (8000578 <StartDefaultTask+0x20>)
 8000562:	f000 fb90 	bl	8000c86 <HAL_ADC_GetValue>
 8000566:	4603      	mov	r3, r0
 8000568:	b29a      	uxth	r2, r3
 800056a:	4b04      	ldr	r3, [pc, #16]	; (800057c <StartDefaultTask+0x24>)
 800056c:	801a      	strh	r2, [r3, #0]
		osDelay(1);
 800056e:	2001      	movs	r0, #1
 8000570:	f003 fa55 	bl	8003a1e <osDelay>
		readValue = HAL_ADC_GetValue(&hadc1);
 8000574:	e7f4      	b.n	8000560 <StartDefaultTask+0x8>
 8000576:	bf00      	nop
 8000578:	20000344 	.word	0x20000344
 800057c:	200003ec 	.word	0x200003ec

08000580 <StartTask02>:
 * @brief Function implementing the myTask02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const *argument) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {

			osDelay(1);
 8000588:	2001      	movs	r0, #1
 800058a:	f003 fa48 	bl	8003a1e <osDelay>
 800058e:	e7fb      	b.n	8000588 <StartTask02+0x8>

08000590 <StartTask03>:
 * @brief Function implementing the myTask03 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void const *argument) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000598:	2001      	movs	r0, #1
 800059a:	f003 fa40 	bl	8003a1e <osDelay>
 800059e:	e7fb      	b.n	8000598 <StartTask03+0x8>

080005a0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM15) {
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d101      	bne.n	80005b6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80005b2:	f000 f955 	bl	8000860 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40014000 	.word	0x40014000

080005c4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c8:	b672      	cpsid	i
}
 80005ca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80005cc:	e7fe      	b.n	80005cc <Error_Handler+0x8>
	...

080005d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <HAL_MspInit+0x4c>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	4a10      	ldr	r2, [pc, #64]	; (800061c <HAL_MspInit+0x4c>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6193      	str	r3, [r2, #24]
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <HAL_MspInit+0x4c>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <HAL_MspInit+0x4c>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	4a0a      	ldr	r2, [pc, #40]	; (800061c <HAL_MspInit+0x4c>)
 80005f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f8:	61d3      	str	r3, [r2, #28]
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <HAL_MspInit+0x4c>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	210f      	movs	r1, #15
 800060a:	f06f 0001 	mvn.w	r0, #1
 800060e:	f000 ff7f 	bl	8001510 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40021000 	.word	0x40021000

08000620 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	; 0x28
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000640:	d123      	bne.n	800068a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <HAL_ADC_MspInit+0x74>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a13      	ldr	r2, [pc, #76]	; (8000694 <HAL_ADC_MspInit+0x74>)
 8000648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064c:	6153      	str	r3, [r2, #20]
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <HAL_ADC_MspInit+0x74>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <HAL_ADC_MspInit+0x74>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	4a0d      	ldr	r2, [pc, #52]	; (8000694 <HAL_ADC_MspInit+0x74>)
 8000660:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000664:	6153      	str	r3, [r2, #20]
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <HAL_ADC_MspInit+0x74>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000672:	2308      	movs	r3, #8
 8000674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000676:	2303      	movs	r3, #3
 8000678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	4619      	mov	r1, r3
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <HAL_ADC_MspInit+0x78>)
 8000686:	f000 ff6d 	bl	8001564 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800068a:	bf00      	nop
 800068c:	3728      	adds	r7, #40	; 0x28
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000
 8000698:	48000800 	.word	0x48000800

0800069c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08c      	sub	sp, #48	; 0x30
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80006a4:	2300      	movs	r3, #0
 80006a6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM15 clock */
  __HAL_RCC_TIM15_CLK_ENABLE();
 80006ac:	4b2e      	ldr	r3, [pc, #184]	; (8000768 <HAL_InitTick+0xcc>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a2d      	ldr	r2, [pc, #180]	; (8000768 <HAL_InitTick+0xcc>)
 80006b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <HAL_InitTick+0xcc>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006c4:	f107 020c 	add.w	r2, r7, #12
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	4611      	mov	r1, r2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fb24 	bl	8002d1c <HAL_RCC_GetClockConfig>

  /* Compute TIM15 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80006d4:	f002 fb00 	bl	8002cd8 <HAL_RCC_GetPCLK2Freq>
 80006d8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM15 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006dc:	4a23      	ldr	r2, [pc, #140]	; (800076c <HAL_InitTick+0xd0>)
 80006de:	fba2 2303 	umull	r2, r3, r2, r3
 80006e2:	0c9b      	lsrs	r3, r3, #18
 80006e4:	3b01      	subs	r3, #1
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM15 */
  htim15.Instance = TIM15;
 80006e8:	4b21      	ldr	r3, [pc, #132]	; (8000770 <HAL_InitTick+0xd4>)
 80006ea:	4a22      	ldr	r2, [pc, #136]	; (8000774 <HAL_InitTick+0xd8>)
 80006ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM15CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim15.Init.Period = (1000000U / 1000U) - 1U;
 80006ee:	4b20      	ldr	r3, [pc, #128]	; (8000770 <HAL_InitTick+0xd4>)
 80006f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006f4:	60da      	str	r2, [r3, #12]
  htim15.Init.Prescaler = uwPrescalerValue;
 80006f6:	4a1e      	ldr	r2, [pc, #120]	; (8000770 <HAL_InitTick+0xd4>)
 80006f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fa:	6053      	str	r3, [r2, #4]
  htim15.Init.ClockDivision = 0;
 80006fc:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <HAL_InitTick+0xd4>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000702:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <HAL_InitTick+0xd4>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000708:	4b19      	ldr	r3, [pc, #100]	; (8000770 <HAL_InitTick+0xd4>)
 800070a:	2200      	movs	r2, #0
 800070c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim15);
 800070e:	4818      	ldr	r0, [pc, #96]	; (8000770 <HAL_InitTick+0xd4>)
 8000710:	f002 fcc8 	bl	80030a4 <HAL_TIM_Base_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800071a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800071e:	2b00      	cmp	r3, #0
 8000720:	d11b      	bne.n	800075a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim15);
 8000722:	4813      	ldr	r0, [pc, #76]	; (8000770 <HAL_InitTick+0xd4>)
 8000724:	f002 fd20 	bl	8003168 <HAL_TIM_Base_Start_IT>
 8000728:	4603      	mov	r3, r0
 800072a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800072e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000732:	2b00      	cmp	r3, #0
 8000734:	d111      	bne.n	800075a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM15 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000736:	2018      	movs	r0, #24
 8000738:	f000 ff06 	bl	8001548 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2b0f      	cmp	r3, #15
 8000740:	d808      	bhi.n	8000754 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, TickPriority, 0U);
 8000742:	2200      	movs	r2, #0
 8000744:	6879      	ldr	r1, [r7, #4]
 8000746:	2018      	movs	r0, #24
 8000748:	f000 fee2 	bl	8001510 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800074c:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <HAL_InitTick+0xdc>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6013      	str	r3, [r2, #0]
 8000752:	e002      	b.n	800075a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000754:	2301      	movs	r3, #1
 8000756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800075a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800075e:	4618      	mov	r0, r3
 8000760:	3730      	adds	r7, #48	; 0x30
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000
 800076c:	431bde83 	.word	0x431bde83
 8000770:	200003f0 	.word	0x200003f0
 8000774:	40014000 	.word	0x40014000
 8000778:	20000004 	.word	0x20000004

0800077c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <NMI_Handler+0x4>

08000782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <HardFault_Handler+0x4>

08000788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <MemManage_Handler+0x4>

0800078e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000792:	e7fe      	b.n	8000792 <BusFault_Handler+0x4>

08000794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <UsageFault_Handler+0x4>

0800079a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80007ac:	4802      	ldr	r0, [pc, #8]	; (80007b8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80007ae:	f002 fd2f 	bl	8003210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200003f0 	.word	0x200003f0

080007bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <SystemInit+0x20>)
 80007c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007c6:	4a05      	ldr	r2, [pc, #20]	; (80007dc <SystemInit+0x20>)
 80007c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000818 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007e4:	f7ff ffea 	bl	80007bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <LoopForever+0x6>)
  ldr r1, =_edata
 80007ea:	490d      	ldr	r1, [pc, #52]	; (8000820 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007ec:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <LoopForever+0xe>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f0:	e002      	b.n	80007f8 <LoopCopyDataInit>

080007f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f6:	3304      	adds	r3, #4

080007f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007fc:	d3f9      	bcc.n	80007f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fe:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000800:	4c0a      	ldr	r4, [pc, #40]	; (800082c <LoopForever+0x16>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000804:	e001      	b.n	800080a <LoopFillZerobss>

08000806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000808:	3204      	adds	r2, #4

0800080a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800080c:	d3fb      	bcc.n	8000806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800080e:	f004 fb05 	bl	8004e1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000812:	f7ff fcf7 	bl	8000204 <main>

08000816 <LoopForever>:

LoopForever:
    b LoopForever
 8000816:	e7fe      	b.n	8000816 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000818:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800081c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000820:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000824:	08005134 	.word	0x08005134
  ldr r2, =_sbss
 8000828:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800082c:	20001194 	.word	0x20001194

08000830 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000830:	e7fe      	b.n	8000830 <ADC1_IRQHandler>
	...

08000834 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <HAL_Init+0x28>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a07      	ldr	r2, [pc, #28]	; (800085c <HAL_Init+0x28>)
 800083e:	f043 0310 	orr.w	r3, r3, #16
 8000842:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000844:	2003      	movs	r0, #3
 8000846:	f000 fe58 	bl	80014fa <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800084a:	2005      	movs	r0, #5
 800084c:	f7ff ff26 	bl	800069c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000850:	f7ff febe 	bl	80005d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40022000 	.word	0x40022000

08000860 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_IncTick+0x20>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	461a      	mov	r2, r3
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_IncTick+0x24>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4413      	add	r3, r2
 8000870:	4a04      	ldr	r2, [pc, #16]	; (8000884 <HAL_IncTick+0x24>)
 8000872:	6013      	str	r3, [r2, #0]
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	20000008 	.word	0x20000008
 8000884:	2000043c 	.word	0x2000043c

08000888 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  return uwTick;  
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <HAL_GetTick+0x14>)
 800088e:	681b      	ldr	r3, [r3, #0]
}
 8000890:	4618      	mov	r0, r3
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	2000043c 	.word	0x2000043c

080008a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b09a      	sub	sp, #104	; 0x68
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008a8:	2300      	movs	r3, #0
 80008aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80008ae:	2300      	movs	r3, #0
 80008b0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d101      	bne.n	80008c0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80008bc:	2301      	movs	r3, #1
 80008be:	e169      	b.n	8000b94 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	691b      	ldr	r3, [r3, #16]
 80008c4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	f003 0310 	and.w	r3, r3, #16
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d176      	bne.n	80009c0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d152      	bne.n	8000980 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2200      	movs	r2, #0
 80008de:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2200      	movs	r2, #0
 80008e4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2200      	movs	r2, #0
 80008ea:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff fe93 	bl	8000620 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000904:	2b00      	cmp	r3, #0
 8000906:	d13b      	bne.n	8000980 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 fce3 	bl	80012d4 <ADC_Disable>
 800090e:	4603      	mov	r3, r0
 8000910:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	f003 0310 	and.w	r3, r3, #16
 800091c:	2b00      	cmp	r3, #0
 800091e:	d12f      	bne.n	8000980 <HAL_ADC_Init+0xe0>
 8000920:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000924:	2b00      	cmp	r3, #0
 8000926:	d12b      	bne.n	8000980 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000930:	f023 0302 	bic.w	r3, r3, #2
 8000934:	f043 0202 	orr.w	r2, r3, #2
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	689a      	ldr	r2, [r3, #8]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800094a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	689a      	ldr	r2, [r3, #8]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800095a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800095c:	4b8f      	ldr	r3, [pc, #572]	; (8000b9c <HAL_ADC_Init+0x2fc>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a8f      	ldr	r2, [pc, #572]	; (8000ba0 <HAL_ADC_Init+0x300>)
 8000962:	fba2 2303 	umull	r2, r3, r2, r3
 8000966:	0c9a      	lsrs	r2, r3, #18
 8000968:	4613      	mov	r3, r2
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	4413      	add	r3, r2
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000972:	e002      	b.n	800097a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	3b01      	subs	r3, #1
 8000978:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d1f9      	bne.n	8000974 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098a:	2b00      	cmp	r3, #0
 800098c:	d007      	beq.n	800099e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000998:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800099c:	d110      	bne.n	80009c0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	f023 0312 	bic.w	r3, r3, #18
 80009a6:	f043 0210 	orr.w	r2, r3, #16
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f043 0201 	orr.w	r2, r3, #1
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	f003 0310 	and.w	r3, r3, #16
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	f040 80d6 	bne.w	8000b7a <HAL_ADC_Init+0x2da>
 80009ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f040 80d1 	bne.w	8000b7a <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	f040 80c9 	bne.w	8000b7a <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80009f0:	f043 0202 	orr.w	r2, r3, #2
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80009f8:	4b6a      	ldr	r3, [pc, #424]	; (8000ba4 <HAL_ADC_Init+0x304>)
 80009fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	f003 0303 	and.w	r3, r3, #3
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d108      	bne.n	8000a20 <HAL_ADC_Init+0x180>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d101      	bne.n	8000a20 <HAL_ADC_Init+0x180>
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e000      	b.n	8000a22 <HAL_ADC_Init+0x182>
 8000a20:	2300      	movs	r3, #0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d11c      	bne.n	8000a60 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000a26:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d010      	beq.n	8000a4e <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	f003 0303 	and.w	r3, r3, #3
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d107      	bne.n	8000a48 <HAL_ADC_Init+0x1a8>
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d101      	bne.n	8000a48 <HAL_ADC_Init+0x1a8>
 8000a44:	2301      	movs	r3, #1
 8000a46:	e000      	b.n	8000a4a <HAL_ADC_Init+0x1aa>
 8000a48:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d108      	bne.n	8000a60 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000a4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	431a      	orrs	r2, r3
 8000a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a5e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	7e5b      	ldrb	r3, [r3, #25]
 8000a64:	035b      	lsls	r3, r3, #13
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000a6a:	2a01      	cmp	r2, #1
 8000a6c:	d002      	beq.n	8000a74 <HAL_ADC_Init+0x1d4>
 8000a6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a72:	e000      	b.n	8000a76 <HAL_ADC_Init+0x1d6>
 8000a74:	2200      	movs	r2, #0
 8000a76:	431a      	orrs	r2, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	431a      	orrs	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a86:	4313      	orrs	r3, r2
 8000a88:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d11b      	bne.n	8000acc <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	7e5b      	ldrb	r3, [r3, #25]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d109      	bne.n	8000ab0 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	045a      	lsls	r2, r3, #17
 8000aa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aac:	663b      	str	r3, [r7, #96]	; 0x60
 8000aae:	e00d      	b.n	8000acc <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000ab8:	f043 0220 	orr.w	r2, r3, #32
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac4:	f043 0201 	orr.w	r2, r3, #1
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d007      	beq.n	8000ae4 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000adc:	4313      	orrs	r3, r2
 8000ade:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	f003 030c 	and.w	r3, r3, #12
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d114      	bne.n	8000b1c <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	6812      	ldr	r2, [r2, #0]
 8000afc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b00:	f023 0302 	bic.w	r3, r3, #2
 8000b04:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	7e1b      	ldrb	r3, [r3, #24]
 8000b0a:	039a      	lsls	r2, r3, #14
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	4313      	orrs	r3, r2
 8000b16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	68da      	ldr	r2, [r3, #12]
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <HAL_ADC_Init+0x308>)
 8000b24:	4013      	ands	r3, r2
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	6812      	ldr	r2, [r2, #0]
 8000b2a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000b2c:	430b      	orrs	r3, r1
 8000b2e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	691b      	ldr	r3, [r3, #16]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d10c      	bne.n	8000b52 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f023 010f 	bic.w	r1, r3, #15
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	1e5a      	subs	r2, r3, #1
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	631a      	str	r2, [r3, #48]	; 0x30
 8000b50:	e007      	b.n	8000b62 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f022 020f 	bic.w	r2, r2, #15
 8000b60:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2200      	movs	r2, #0
 8000b66:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	f023 0303 	bic.w	r3, r3, #3
 8000b70:	f043 0201 	orr.w	r2, r3, #1
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	641a      	str	r2, [r3, #64]	; 0x40
 8000b78:	e00a      	b.n	8000b90 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	f023 0312 	bic.w	r3, r3, #18
 8000b82:	f043 0210 	orr.w	r2, r3, #16
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000b90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3768      	adds	r7, #104	; 0x68
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	431bde83 	.word	0x431bde83
 8000ba4:	50000300 	.word	0x50000300
 8000ba8:	fff0c007 	.word	0xfff0c007

08000bac <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d158      	bne.n	8000c78 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d101      	bne.n	8000bd4 <HAL_ADC_Start+0x28>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	e054      	b.n	8000c7e <HAL_ADC_Start+0xd2>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 fb15 	bl	800120c <ADC_Enable>
 8000be2:	4603      	mov	r3, r0
 8000be4:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d140      	bne.n	8000c6e <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000bf4:	f023 0301 	bic.w	r3, r3, #1
 8000bf8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d007      	beq.n	8000c2a <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c36:	d106      	bne.n	8000c46 <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3c:	f023 0206 	bic.w	r2, r3, #6
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	645a      	str	r2, [r3, #68]	; 0x44
 8000c44:	e002      	b.n	8000c4c <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	221c      	movs	r2, #28
 8000c5a:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f042 0204 	orr.w	r2, r2, #4
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	e006      	b.n	8000c7c <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000c76:	e001      	b.n	8000c7c <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b09b      	sub	sp, #108	; 0x6c
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000caa:	2300      	movs	r3, #0
 8000cac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d101      	bne.n	8000cc2 <HAL_ADC_ConfigChannel+0x22>
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	e299      	b.n	80011f6 <HAL_ADC_ConfigChannel+0x556>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	f003 0304 	and.w	r3, r3, #4
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	f040 827d 	bne.w	80011d4 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	d81c      	bhi.n	8000d1c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	4613      	mov	r3, r2
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	4413      	add	r3, r2
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	231f      	movs	r3, #31
 8000cf8:	4093      	lsls	r3, r2
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	4019      	ands	r1, r3
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	6818      	ldr	r0, [r3, #0]
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	4613      	mov	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4413      	add	r3, r2
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	fa00 f203 	lsl.w	r2, r0, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	430a      	orrs	r2, r1
 8000d18:	631a      	str	r2, [r3, #48]	; 0x30
 8000d1a:	e063      	b.n	8000de4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b09      	cmp	r3, #9
 8000d22:	d81e      	bhi.n	8000d62 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685a      	ldr	r2, [r3, #4]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	4413      	add	r3, r2
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	3b1e      	subs	r3, #30
 8000d38:	221f      	movs	r2, #31
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	4019      	ands	r1, r3
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	6818      	ldr	r0, [r3, #0]
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	4413      	add	r3, r2
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	3b1e      	subs	r3, #30
 8000d54:	fa00 f203 	lsl.w	r2, r0, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	635a      	str	r2, [r3, #52]	; 0x34
 8000d60:	e040      	b.n	8000de4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2b0e      	cmp	r3, #14
 8000d68:	d81e      	bhi.n	8000da8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685a      	ldr	r2, [r3, #4]
 8000d74:	4613      	mov	r3, r2
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	4413      	add	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	3b3c      	subs	r3, #60	; 0x3c
 8000d7e:	221f      	movs	r2, #31
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	4019      	ands	r1, r3
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	6818      	ldr	r0, [r3, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	4613      	mov	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	4413      	add	r3, r2
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	3b3c      	subs	r3, #60	; 0x3c
 8000d9a:	fa00 f203 	lsl.w	r2, r0, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	430a      	orrs	r2, r1
 8000da4:	639a      	str	r2, [r3, #56]	; 0x38
 8000da6:	e01d      	b.n	8000de4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	4613      	mov	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	4413      	add	r3, r2
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	3b5a      	subs	r3, #90	; 0x5a
 8000dbc:	221f      	movs	r2, #31
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	4019      	ands	r1, r3
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	6818      	ldr	r0, [r3, #0]
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	3b5a      	subs	r3, #90	; 0x5a
 8000dd8:	fa00 f203 	lsl.w	r2, r0, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	430a      	orrs	r2, r1
 8000de2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f003 030c 	and.w	r3, r3, #12
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f040 80e5 	bne.w	8000fbe <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b09      	cmp	r3, #9
 8000dfa:	d91c      	bls.n	8000e36 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	6999      	ldr	r1, [r3, #24]
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4613      	mov	r3, r2
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	4413      	add	r3, r2
 8000e0c:	3b1e      	subs	r3, #30
 8000e0e:	2207      	movs	r2, #7
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	4019      	ands	r1, r3
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	6898      	ldr	r0, [r3, #8]
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4613      	mov	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4413      	add	r3, r2
 8000e26:	3b1e      	subs	r3, #30
 8000e28:	fa00 f203 	lsl.w	r2, r0, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	430a      	orrs	r2, r1
 8000e32:	619a      	str	r2, [r3, #24]
 8000e34:	e019      	b.n	8000e6a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6959      	ldr	r1, [r3, #20]
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4613      	mov	r3, r2
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	4413      	add	r3, r2
 8000e46:	2207      	movs	r2, #7
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	4019      	ands	r1, r3
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	6898      	ldr	r0, [r3, #8]
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	4413      	add	r3, r2
 8000e5e:	fa00 f203 	lsl.w	r2, r0, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	430a      	orrs	r2, r1
 8000e68:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	695a      	ldr	r2, [r3, #20]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	08db      	lsrs	r3, r3, #3
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	691b      	ldr	r3, [r3, #16]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	d84f      	bhi.n	8000f2c <HAL_ADC_ConfigChannel+0x28c>
 8000e8c:	a201      	add	r2, pc, #4	; (adr r2, 8000e94 <HAL_ADC_ConfigChannel+0x1f4>)
 8000e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e92:	bf00      	nop
 8000e94:	08000ea5 	.word	0x08000ea5
 8000e98:	08000ec7 	.word	0x08000ec7
 8000e9c:	08000ee9 	.word	0x08000ee9
 8000ea0:	08000f0b 	.word	0x08000f0b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eaa:	4b99      	ldr	r3, [pc, #612]	; (8001110 <HAL_ADC_ConfigChannel+0x470>)
 8000eac:	4013      	ands	r3, r2
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	6812      	ldr	r2, [r2, #0]
 8000eb2:	0691      	lsls	r1, r2, #26
 8000eb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	431a      	orrs	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000ec2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000ec4:	e07e      	b.n	8000fc4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000ecc:	4b90      	ldr	r3, [pc, #576]	; (8001110 <HAL_ADC_ConfigChannel+0x470>)
 8000ece:	4013      	ands	r3, r2
 8000ed0:	683a      	ldr	r2, [r7, #0]
 8000ed2:	6812      	ldr	r2, [r2, #0]
 8000ed4:	0691      	lsls	r1, r2, #26
 8000ed6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	431a      	orrs	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000ee4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000ee6:	e06d      	b.n	8000fc4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000eee:	4b88      	ldr	r3, [pc, #544]	; (8001110 <HAL_ADC_ConfigChannel+0x470>)
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	683a      	ldr	r2, [r7, #0]
 8000ef4:	6812      	ldr	r2, [r2, #0]
 8000ef6:	0691      	lsls	r1, r2, #26
 8000ef8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000efa:	430a      	orrs	r2, r1
 8000efc:	431a      	orrs	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000f06:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000f08:	e05c      	b.n	8000fc4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000f10:	4b7f      	ldr	r3, [pc, #508]	; (8001110 <HAL_ADC_ConfigChannel+0x470>)
 8000f12:	4013      	ands	r3, r2
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	6812      	ldr	r2, [r2, #0]
 8000f18:	0691      	lsls	r1, r2, #26
 8000f1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000f28:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000f2a:	e04b      	b.n	8000fc4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	069b      	lsls	r3, r3, #26
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d107      	bne.n	8000f50 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000f4e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000f56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	069b      	lsls	r3, r3, #26
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d107      	bne.n	8000f74 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000f72:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000f7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	069b      	lsls	r3, r3, #26
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d107      	bne.n	8000f98 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000f96:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000f9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	069b      	lsls	r3, r3, #26
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d10a      	bne.n	8000fc2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000fba:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8000fbc:	e001      	b.n	8000fc2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8000fbe:	bf00      	nop
 8000fc0:	e000      	b.n	8000fc4 <HAL_ADC_ConfigChannel+0x324>
      break;
 8000fc2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d108      	bne.n	8000fe4 <HAL_ADC_ConfigChannel+0x344>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d101      	bne.n	8000fe4 <HAL_ADC_ConfigChannel+0x344>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e000      	b.n	8000fe6 <HAL_ADC_ConfigChannel+0x346>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f040 80ff 	bne.w	80011ea <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d00f      	beq.n	8001014 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2201      	movs	r2, #1
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	400a      	ands	r2, r1
 800100e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001012:	e049      	b.n	80010a8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2201      	movs	r2, #1
 8001022:	409a      	lsls	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	430a      	orrs	r2, r1
 800102a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b09      	cmp	r3, #9
 8001034:	d91c      	bls.n	8001070 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6999      	ldr	r1, [r3, #24]
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	3b1b      	subs	r3, #27
 8001048:	2207      	movs	r2, #7
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	4019      	ands	r1, r3
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	6898      	ldr	r0, [r3, #8]
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	4613      	mov	r3, r2
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	4413      	add	r3, r2
 8001060:	3b1b      	subs	r3, #27
 8001062:	fa00 f203 	lsl.w	r2, r0, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	430a      	orrs	r2, r1
 800106c:	619a      	str	r2, [r3, #24]
 800106e:	e01b      	b.n	80010a8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6959      	ldr	r1, [r3, #20]
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	1c5a      	adds	r2, r3, #1
 800107c:	4613      	mov	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	2207      	movs	r2, #7
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	4019      	ands	r1, r3
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	6898      	ldr	r0, [r3, #8]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	1c5a      	adds	r2, r3, #1
 8001096:	4613      	mov	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	4413      	add	r3, r2
 800109c:	fa00 f203 	lsl.w	r2, r0, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	430a      	orrs	r2, r1
 80010a6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <HAL_ADC_ConfigChannel+0x474>)
 80010aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b10      	cmp	r3, #16
 80010b2:	d105      	bne.n	80010c0 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80010b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d014      	beq.n	80010ea <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80010c4:	2b11      	cmp	r3, #17
 80010c6:	d105      	bne.n	80010d4 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80010c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00a      	beq.n	80010ea <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80010d8:	2b12      	cmp	r3, #18
 80010da:	f040 8086 	bne.w	80011ea <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80010de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d17f      	bne.n	80011ea <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d10d      	bne.n	8001118 <HAL_ADC_ConfigChannel+0x478>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	2b01      	cmp	r3, #1
 8001108:	d106      	bne.n	8001118 <HAL_ADC_ConfigChannel+0x478>
 800110a:	2301      	movs	r3, #1
 800110c:	e005      	b.n	800111a <HAL_ADC_ConfigChannel+0x47a>
 800110e:	bf00      	nop
 8001110:	83fff000 	.word	0x83fff000
 8001114:	50000300 	.word	0x50000300
 8001118:	2300      	movs	r3, #0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d150      	bne.n	80011c0 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800111e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001120:	2b00      	cmp	r3, #0
 8001122:	d010      	beq.n	8001146 <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	2b01      	cmp	r3, #1
 800112e:	d107      	bne.n	8001140 <HAL_ADC_ConfigChannel+0x4a0>
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	2b01      	cmp	r3, #1
 800113a:	d101      	bne.n	8001140 <HAL_ADC_ConfigChannel+0x4a0>
 800113c:	2301      	movs	r3, #1
 800113e:	e000      	b.n	8001142 <HAL_ADC_ConfigChannel+0x4a2>
 8001140:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001142:	2b00      	cmp	r3, #0
 8001144:	d13c      	bne.n	80011c0 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b10      	cmp	r3, #16
 800114c:	d11d      	bne.n	800118a <HAL_ADC_ConfigChannel+0x4ea>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001156:	d118      	bne.n	800118a <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001160:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001162:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001164:	4b27      	ldr	r3, [pc, #156]	; (8001204 <HAL_ADC_ConfigChannel+0x564>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a27      	ldr	r2, [pc, #156]	; (8001208 <HAL_ADC_ConfigChannel+0x568>)
 800116a:	fba2 2303 	umull	r2, r3, r2, r3
 800116e:	0c9a      	lsrs	r2, r3, #18
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800117a:	e002      	b.n	8001182 <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	3b01      	subs	r3, #1
 8001180:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1f9      	bne.n	800117c <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001188:	e02e      	b.n	80011e8 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b11      	cmp	r3, #17
 8001190:	d10b      	bne.n	80011aa <HAL_ADC_ConfigChannel+0x50a>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800119a:	d106      	bne.n	80011aa <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800119c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80011a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011a6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80011a8:	e01e      	b.n	80011e8 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b12      	cmp	r3, #18
 80011b0:	d11a      	bne.n	80011e8 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80011b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80011ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011bc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80011be:	e013      	b.n	80011e8 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	f043 0220 	orr.w	r2, r3, #32
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80011d2:	e00a      	b.n	80011ea <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	f043 0220 	orr.w	r2, r3, #32
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80011e6:	e000      	b.n	80011ea <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80011e8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80011f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	376c      	adds	r7, #108	; 0x6c
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000000 	.word	0x20000000
 8001208:	431bde83 	.word	0x431bde83

0800120c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	2b01      	cmp	r3, #1
 8001224:	d108      	bne.n	8001238 <ADC_Enable+0x2c>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	2b01      	cmp	r3, #1
 8001232:	d101      	bne.n	8001238 <ADC_Enable+0x2c>
 8001234:	2301      	movs	r3, #1
 8001236:	e000      	b.n	800123a <ADC_Enable+0x2e>
 8001238:	2300      	movs	r3, #0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d143      	bne.n	80012c6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <ADC_Enable+0xc4>)
 8001246:	4013      	ands	r3, r2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d00d      	beq.n	8001268 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	f043 0210 	orr.w	r2, r3, #16
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125c:	f043 0201 	orr.w	r2, r3, #1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e02f      	b.n	80012c8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0201 	orr.w	r2, r2, #1
 8001276:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001278:	f7ff fb06 	bl	8000888 <HAL_GetTick>
 800127c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800127e:	e01b      	b.n	80012b8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001280:	f7ff fb02 	bl	8000888 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d914      	bls.n	80012b8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b01      	cmp	r3, #1
 800129a:	d00d      	beq.n	80012b8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	f043 0210 	orr.w	r2, r3, #16
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ac:	f043 0201 	orr.w	r2, r3, #1
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e007      	b.n	80012c8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d1dc      	bne.n	8001280 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	8000003f 	.word	0x8000003f

080012d4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d108      	bne.n	8001300 <ADC_Disable+0x2c>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d101      	bne.n	8001300 <ADC_Disable+0x2c>
 80012fc:	2301      	movs	r3, #1
 80012fe:	e000      	b.n	8001302 <ADC_Disable+0x2e>
 8001300:	2300      	movs	r3, #0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d047      	beq.n	8001396 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 030d 	and.w	r3, r3, #13
 8001310:	2b01      	cmp	r3, #1
 8001312:	d10f      	bne.n	8001334 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0202 	orr.w	r2, r2, #2
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2203      	movs	r2, #3
 800132a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800132c:	f7ff faac 	bl	8000888 <HAL_GetTick>
 8001330:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001332:	e029      	b.n	8001388 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	f043 0210 	orr.w	r2, r3, #16
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001344:	f043 0201 	orr.w	r2, r3, #1
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e023      	b.n	8001398 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001350:	f7ff fa9a 	bl	8000888 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d914      	bls.n	8001388 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b01      	cmp	r3, #1
 800136a:	d10d      	bne.n	8001388 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	f043 0210 	orr.w	r2, r3, #16
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137c:	f043 0201 	orr.w	r2, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e007      	b.n	8001398 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	2b01      	cmp	r3, #1
 8001394:	d0dc      	beq.n	8001350 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <__NVIC_SetPriorityGrouping+0x44>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013bc:	4013      	ands	r3, r2
 80013be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d2:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <__NVIC_SetPriorityGrouping+0x44>)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	60d3      	str	r3, [r2, #12]
}
 80013d8:	bf00      	nop
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <__NVIC_GetPriorityGrouping+0x18>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	0a1b      	lsrs	r3, r3, #8
 80013f2:	f003 0307 	and.w	r3, r3, #7
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	2b00      	cmp	r3, #0
 8001414:	db0b      	blt.n	800142e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	f003 021f 	and.w	r2, r3, #31
 800141c:	4907      	ldr	r1, [pc, #28]	; (800143c <__NVIC_EnableIRQ+0x38>)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	095b      	lsrs	r3, r3, #5
 8001424:	2001      	movs	r0, #1
 8001426:	fa00 f202 	lsl.w	r2, r0, r2
 800142a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000e100 	.word	0xe000e100

08001440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	db0a      	blt.n	800146a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	b2da      	uxtb	r2, r3
 8001458:	490c      	ldr	r1, [pc, #48]	; (800148c <__NVIC_SetPriority+0x4c>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	0112      	lsls	r2, r2, #4
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	440b      	add	r3, r1
 8001464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001468:	e00a      	b.n	8001480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4908      	ldr	r1, [pc, #32]	; (8001490 <__NVIC_SetPriority+0x50>)
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	3b04      	subs	r3, #4
 8001478:	0112      	lsls	r2, r2, #4
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	440b      	add	r3, r1
 800147e:	761a      	strb	r2, [r3, #24]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000e100 	.word	0xe000e100
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001494:	b480      	push	{r7}
 8001496:	b089      	sub	sp, #36	; 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f1c3 0307 	rsb	r3, r3, #7
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	bf28      	it	cs
 80014b2:	2304      	movcs	r3, #4
 80014b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3304      	adds	r3, #4
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d902      	bls.n	80014c4 <NVIC_EncodePriority+0x30>
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3b03      	subs	r3, #3
 80014c2:	e000      	b.n	80014c6 <NVIC_EncodePriority+0x32>
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	f04f 32ff 	mov.w	r2, #4294967295
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	401a      	ands	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	43d9      	mvns	r1, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	4313      	orrs	r3, r2
         );
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3724      	adds	r7, #36	; 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ff4c 	bl	80013a0 <__NVIC_SetPriorityGrouping>
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001522:	f7ff ff61 	bl	80013e8 <__NVIC_GetPriorityGrouping>
 8001526:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	68b9      	ldr	r1, [r7, #8]
 800152c:	6978      	ldr	r0, [r7, #20]
 800152e:	f7ff ffb1 	bl	8001494 <NVIC_EncodePriority>
 8001532:	4602      	mov	r2, r0
 8001534:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001538:	4611      	mov	r1, r2
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff ff80 	bl	8001440 <__NVIC_SetPriority>
}
 8001540:	bf00      	nop
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff ff54 	bl	8001404 <__NVIC_EnableIRQ>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001564:	b480      	push	{r7}
 8001566:	b087      	sub	sp, #28
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001572:	e14e      	b.n	8001812 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	2101      	movs	r1, #1
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	fa01 f303 	lsl.w	r3, r1, r3
 8001580:	4013      	ands	r3, r2
 8001582:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 8140 	beq.w	800180c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	2b01      	cmp	r3, #1
 8001596:	d005      	beq.n	80015a4 <HAL_GPIO_Init+0x40>
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d130      	bne.n	8001606 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	2203      	movs	r2, #3
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	68da      	ldr	r2, [r3, #12]
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015da:	2201      	movs	r2, #1
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	091b      	lsrs	r3, r3, #4
 80015f0:	f003 0201 	and.w	r2, r3, #1
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	2b03      	cmp	r3, #3
 8001610:	d017      	beq.n	8001642 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2203      	movs	r2, #3
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d123      	bne.n	8001696 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	08da      	lsrs	r2, r3, #3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3208      	adds	r2, #8
 8001656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800165a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	220f      	movs	r2, #15
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4013      	ands	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	691a      	ldr	r2, [r3, #16]
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	08da      	lsrs	r2, r3, #3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3208      	adds	r2, #8
 8001690:	6939      	ldr	r1, [r7, #16]
 8001692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	2203      	movs	r2, #3
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 0203 	and.w	r2, r3, #3
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 809a 	beq.w	800180c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d8:	4b55      	ldr	r3, [pc, #340]	; (8001830 <HAL_GPIO_Init+0x2cc>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a54      	ldr	r2, [pc, #336]	; (8001830 <HAL_GPIO_Init+0x2cc>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b52      	ldr	r3, [pc, #328]	; (8001830 <HAL_GPIO_Init+0x2cc>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016f0:	4a50      	ldr	r2, [pc, #320]	; (8001834 <HAL_GPIO_Init+0x2d0>)
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	089b      	lsrs	r3, r3, #2
 80016f6:	3302      	adds	r3, #2
 80016f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	220f      	movs	r2, #15
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800171a:	d013      	beq.n	8001744 <HAL_GPIO_Init+0x1e0>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a46      	ldr	r2, [pc, #280]	; (8001838 <HAL_GPIO_Init+0x2d4>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d00d      	beq.n	8001740 <HAL_GPIO_Init+0x1dc>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a45      	ldr	r2, [pc, #276]	; (800183c <HAL_GPIO_Init+0x2d8>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d007      	beq.n	800173c <HAL_GPIO_Init+0x1d8>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a44      	ldr	r2, [pc, #272]	; (8001840 <HAL_GPIO_Init+0x2dc>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d101      	bne.n	8001738 <HAL_GPIO_Init+0x1d4>
 8001734:	2303      	movs	r3, #3
 8001736:	e006      	b.n	8001746 <HAL_GPIO_Init+0x1e2>
 8001738:	2305      	movs	r3, #5
 800173a:	e004      	b.n	8001746 <HAL_GPIO_Init+0x1e2>
 800173c:	2302      	movs	r3, #2
 800173e:	e002      	b.n	8001746 <HAL_GPIO_Init+0x1e2>
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <HAL_GPIO_Init+0x1e2>
 8001744:	2300      	movs	r3, #0
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	f002 0203 	and.w	r2, r2, #3
 800174c:	0092      	lsls	r2, r2, #2
 800174e:	4093      	lsls	r3, r2
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001756:	4937      	ldr	r1, [pc, #220]	; (8001834 <HAL_GPIO_Init+0x2d0>)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	089b      	lsrs	r3, r3, #2
 800175c:	3302      	adds	r3, #2
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001764:	4b37      	ldr	r3, [pc, #220]	; (8001844 <HAL_GPIO_Init+0x2e0>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	43db      	mvns	r3, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001788:	4a2e      	ldr	r2, [pc, #184]	; (8001844 <HAL_GPIO_Init+0x2e0>)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800178e:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <HAL_GPIO_Init+0x2e0>)
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	43db      	mvns	r3, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017b2:	4a24      	ldr	r2, [pc, #144]	; (8001844 <HAL_GPIO_Init+0x2e0>)
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017b8:	4b22      	ldr	r3, [pc, #136]	; (8001844 <HAL_GPIO_Init+0x2e0>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017dc:	4a19      	ldr	r2, [pc, #100]	; (8001844 <HAL_GPIO_Init+0x2e0>)
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <HAL_GPIO_Init+0x2e0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4313      	orrs	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001806:	4a0f      	ldr	r2, [pc, #60]	; (8001844 <HAL_GPIO_Init+0x2e0>)
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	3301      	adds	r3, #1
 8001810:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	fa22 f303 	lsr.w	r3, r2, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	f47f aea9 	bne.w	8001574 <HAL_GPIO_Init+0x10>
  }
}
 8001822:	bf00      	nop
 8001824:	bf00      	nop
 8001826:	371c      	adds	r7, #28
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	40021000 	.word	0x40021000
 8001834:	40010000 	.word	0x40010000
 8001838:	48000400 	.word	0x48000400
 800183c:	48000800 	.word	0x48000800
 8001840:	48000c00 	.word	0x48000c00
 8001844:	40010400 	.word	0x40010400

08001848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	807b      	strh	r3, [r7, #2]
 8001854:	4613      	mov	r3, r2
 8001856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001858:	787b      	ldrb	r3, [r7, #1]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800185e:	887a      	ldrh	r2, [r7, #2]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001864:	e002      	b.n	800186c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001866:	887a      	ldrh	r2, [r7, #2]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800187e:	af00      	add	r7, sp, #0
 8001880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001884:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001888:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800188a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d102      	bne.n	800189e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	f001 b823 	b.w	80028e4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800189e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 817d 	beq.w	8001bae <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018b4:	4bbc      	ldr	r3, [pc, #752]	; (8001ba8 <HAL_RCC_OscConfig+0x330>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d00c      	beq.n	80018da <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018c0:	4bb9      	ldr	r3, [pc, #740]	; (8001ba8 <HAL_RCC_OscConfig+0x330>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 030c 	and.w	r3, r3, #12
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d15c      	bne.n	8001986 <HAL_RCC_OscConfig+0x10e>
 80018cc:	4bb6      	ldr	r3, [pc, #728]	; (8001ba8 <HAL_RCC_OscConfig+0x330>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d8:	d155      	bne.n	8001986 <HAL_RCC_OscConfig+0x10e>
 80018da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018de:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80018e6:	fa93 f3a3 	rbit	r3, r3
 80018ea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018ee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f2:	fab3 f383 	clz	r3, r3
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	095b      	lsrs	r3, r3, #5
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b01      	cmp	r3, #1
 8001904:	d102      	bne.n	800190c <HAL_RCC_OscConfig+0x94>
 8001906:	4ba8      	ldr	r3, [pc, #672]	; (8001ba8 <HAL_RCC_OscConfig+0x330>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	e015      	b.n	8001938 <HAL_RCC_OscConfig+0xc0>
 800190c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001910:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001914:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001918:	fa93 f3a3 	rbit	r3, r3
 800191c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001920:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001924:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001928:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800192c:	fa93 f3a3 	rbit	r3, r3
 8001930:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001934:	4b9c      	ldr	r3, [pc, #624]	; (8001ba8 <HAL_RCC_OscConfig+0x330>)
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800193c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001940:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001944:	fa92 f2a2 	rbit	r2, r2
 8001948:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800194c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001950:	fab2 f282 	clz	r2, r2
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	f042 0220 	orr.w	r2, r2, #32
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	f002 021f 	and.w	r2, r2, #31
 8001960:	2101      	movs	r1, #1
 8001962:	fa01 f202 	lsl.w	r2, r1, r2
 8001966:	4013      	ands	r3, r2
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 811f 	beq.w	8001bac <HAL_RCC_OscConfig+0x334>
 800196e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001972:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	f040 8116 	bne.w	8001bac <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	f000 bfaf 	b.w	80028e4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001996:	d106      	bne.n	80019a6 <HAL_RCC_OscConfig+0x12e>
 8001998:	4b83      	ldr	r3, [pc, #524]	; (8001ba8 <HAL_RCC_OscConfig+0x330>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a82      	ldr	r2, [pc, #520]	; (8001ba8 <HAL_RCC_OscConfig+0x330>)
 800199e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	e036      	b.n	8001a14 <HAL_RCC_OscConfig+0x19c>
 80019a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x158>
 80019b6:	4b7c      	ldr	r3, [pc, #496]	; (8001ba8 <HAL_RCC_OscConfig+0x330>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a7b      	ldr	r2, [pc, #492]	; (8001ba8 <HAL_RCC_OscConfig+0x330>)
 80019bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	4b79      	ldr	r3, [pc, #484]	; (8001ba8 <HAL_RCC_OscConfig+0x330>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a78      	ldr	r2, [pc, #480]	; (8001ba8 <HAL_RCC_OscConfig+0x330>)
 80019c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e021      	b.n	8001a14 <HAL_RCC_OscConfig+0x19c>
 80019d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019e0:	d10c      	bne.n	80019fc <HAL_RCC_OscConfig+0x184>
 80019e2:	4b71      	ldr	r3, [pc, #452]	; (8001ba8 <HAL_RCC_OscConfig+0x330>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a70      	ldr	r2, [pc, #448]	; (8001ba8 <HAL_RCC_OscConfig+0x330>)
 80019e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	4b6e      	ldr	r3, [pc, #440]	; (8001ba8 <HAL_RCC_OscConfig+0x330>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a6d      	ldr	r2, [pc, #436]	; (8001ba8 <HAL_RCC_OscConfig+0x330>)
 80019f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e00b      	b.n	8001a14 <HAL_RCC_OscConfig+0x19c>
 80019fc:	4b6a      	ldr	r3, [pc, #424]	; (8001ba8 <HAL_RCC_OscConfig+0x330>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a69      	ldr	r2, [pc, #420]	; (8001ba8 <HAL_RCC_OscConfig+0x330>)
 8001a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	4b67      	ldr	r3, [pc, #412]	; (8001ba8 <HAL_RCC_OscConfig+0x330>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a66      	ldr	r2, [pc, #408]	; (8001ba8 <HAL_RCC_OscConfig+0x330>)
 8001a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a12:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a14:	4b64      	ldr	r3, [pc, #400]	; (8001ba8 <HAL_RCC_OscConfig+0x330>)
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	f023 020f 	bic.w	r2, r3, #15
 8001a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	495f      	ldr	r1, [pc, #380]	; (8001ba8 <HAL_RCC_OscConfig+0x330>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d059      	beq.n	8001af2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3e:	f7fe ff23 	bl	8000888 <HAL_GetTick>
 8001a42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	e00a      	b.n	8001a5e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a48:	f7fe ff1e 	bl	8000888 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b64      	cmp	r3, #100	; 0x64
 8001a56:	d902      	bls.n	8001a5e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	f000 bf43 	b.w	80028e4 <HAL_RCC_OscConfig+0x106c>
 8001a5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a62:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001a6a:	fa93 f3a3 	rbit	r3, r3
 8001a6e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001a72:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a76:	fab3 f383 	clz	r3, r3
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	095b      	lsrs	r3, r3, #5
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d102      	bne.n	8001a90 <HAL_RCC_OscConfig+0x218>
 8001a8a:	4b47      	ldr	r3, [pc, #284]	; (8001ba8 <HAL_RCC_OscConfig+0x330>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	e015      	b.n	8001abc <HAL_RCC_OscConfig+0x244>
 8001a90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a94:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a98:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001a9c:	fa93 f3a3 	rbit	r3, r3
 8001aa0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001aa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aa8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001aac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001ab0:	fa93 f3a3 	rbit	r3, r3
 8001ab4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001ab8:	4b3b      	ldr	r3, [pc, #236]	; (8001ba8 <HAL_RCC_OscConfig+0x330>)
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ac0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001ac4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001ac8:	fa92 f2a2 	rbit	r2, r2
 8001acc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001ad0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001ad4:	fab2 f282 	clz	r2, r2
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	f042 0220 	orr.w	r2, r2, #32
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	f002 021f 	and.w	r2, r2, #31
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aea:	4013      	ands	r3, r2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0ab      	beq.n	8001a48 <HAL_RCC_OscConfig+0x1d0>
 8001af0:	e05d      	b.n	8001bae <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af2:	f7fe fec9 	bl	8000888 <HAL_GetTick>
 8001af6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afa:	e00a      	b.n	8001b12 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001afc:	f7fe fec4 	bl	8000888 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b64      	cmp	r3, #100	; 0x64
 8001b0a:	d902      	bls.n	8001b12 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	f000 bee9 	b.w	80028e4 <HAL_RCC_OscConfig+0x106c>
 8001b12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b16:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001b1e:	fa93 f3a3 	rbit	r3, r3
 8001b22:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001b26:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2a:	fab3 f383 	clz	r3, r3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	095b      	lsrs	r3, r3, #5
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d102      	bne.n	8001b44 <HAL_RCC_OscConfig+0x2cc>
 8001b3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <HAL_RCC_OscConfig+0x330>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	e015      	b.n	8001b70 <HAL_RCC_OscConfig+0x2f8>
 8001b44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b48:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001b50:	fa93 f3a3 	rbit	r3, r3
 8001b54:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b5c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b60:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001b64:	fa93 f3a3 	rbit	r3, r3
 8001b68:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001b6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_RCC_OscConfig+0x330>)
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b74:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001b78:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b7c:	fa92 f2a2 	rbit	r2, r2
 8001b80:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001b84:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001b88:	fab2 f282 	clz	r2, r2
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	f042 0220 	orr.w	r2, r2, #32
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	f002 021f 	and.w	r2, r2, #31
 8001b98:	2101      	movs	r1, #1
 8001b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1ab      	bne.n	8001afc <HAL_RCC_OscConfig+0x284>
 8001ba4:	e003      	b.n	8001bae <HAL_RCC_OscConfig+0x336>
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 817d 	beq.w	8001ebe <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bc4:	4ba6      	ldr	r3, [pc, #664]	; (8001e60 <HAL_RCC_OscConfig+0x5e8>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00b      	beq.n	8001be8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bd0:	4ba3      	ldr	r3, [pc, #652]	; (8001e60 <HAL_RCC_OscConfig+0x5e8>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 030c 	and.w	r3, r3, #12
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d172      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x44a>
 8001bdc:	4ba0      	ldr	r3, [pc, #640]	; (8001e60 <HAL_RCC_OscConfig+0x5e8>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d16c      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x44a>
 8001be8:	2302      	movs	r3, #2
 8001bea:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001bf2:	fa93 f3a3 	rbit	r3, r3
 8001bf6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001bfa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfe:	fab3 f383 	clz	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	095b      	lsrs	r3, r3, #5
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d102      	bne.n	8001c18 <HAL_RCC_OscConfig+0x3a0>
 8001c12:	4b93      	ldr	r3, [pc, #588]	; (8001e60 <HAL_RCC_OscConfig+0x5e8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	e013      	b.n	8001c40 <HAL_RCC_OscConfig+0x3c8>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001c22:	fa93 f3a3 	rbit	r3, r3
 8001c26:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c30:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001c34:	fa93 f3a3 	rbit	r3, r3
 8001c38:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001c3c:	4b88      	ldr	r3, [pc, #544]	; (8001e60 <HAL_RCC_OscConfig+0x5e8>)
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	2202      	movs	r2, #2
 8001c42:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001c46:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c4a:	fa92 f2a2 	rbit	r2, r2
 8001c4e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001c52:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001c56:	fab2 f282 	clz	r2, r2
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	f042 0220 	orr.w	r2, r2, #32
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	f002 021f 	and.w	r2, r2, #31
 8001c66:	2101      	movs	r1, #1
 8001c68:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00a      	beq.n	8001c88 <HAL_RCC_OscConfig+0x410>
 8001c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d002      	beq.n	8001c88 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	f000 be2e 	b.w	80028e4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c88:	4b75      	ldr	r3, [pc, #468]	; (8001e60 <HAL_RCC_OscConfig+0x5e8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	21f8      	movs	r1, #248	; 0xf8
 8001c9e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001ca6:	fa91 f1a1 	rbit	r1, r1
 8001caa:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001cae:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001cb2:	fab1 f181 	clz	r1, r1
 8001cb6:	b2c9      	uxtb	r1, r1
 8001cb8:	408b      	lsls	r3, r1
 8001cba:	4969      	ldr	r1, [pc, #420]	; (8001e60 <HAL_RCC_OscConfig+0x5e8>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc0:	e0fd      	b.n	8001ebe <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 8088 	beq.w	8001de4 <HAL_RCC_OscConfig+0x56c>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001cde:	fa93 f3a3 	rbit	r3, r3
 8001ce2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001ce6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cea:	fab3 f383 	clz	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cf4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7fe fdc2 	bl	8000888 <HAL_GetTick>
 8001d04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d08:	e00a      	b.n	8001d20 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d0a:	f7fe fdbd 	bl	8000888 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d902      	bls.n	8001d20 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	f000 bde2 	b.w	80028e4 <HAL_RCC_OscConfig+0x106c>
 8001d20:	2302      	movs	r3, #2
 8001d22:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001d2a:	fa93 f3a3 	rbit	r3, r3
 8001d2e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001d32:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d36:	fab3 f383 	clz	r3, r3
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	095b      	lsrs	r3, r3, #5
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d102      	bne.n	8001d50 <HAL_RCC_OscConfig+0x4d8>
 8001d4a:	4b45      	ldr	r3, [pc, #276]	; (8001e60 <HAL_RCC_OscConfig+0x5e8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	e013      	b.n	8001d78 <HAL_RCC_OscConfig+0x500>
 8001d50:	2302      	movs	r3, #2
 8001d52:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001d5a:	fa93 f3a3 	rbit	r3, r3
 8001d5e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d62:	2302      	movs	r3, #2
 8001d64:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d68:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001d6c:	fa93 f3a3 	rbit	r3, r3
 8001d70:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001d74:	4b3a      	ldr	r3, [pc, #232]	; (8001e60 <HAL_RCC_OscConfig+0x5e8>)
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	2202      	movs	r2, #2
 8001d7a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001d7e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001d82:	fa92 f2a2 	rbit	r2, r2
 8001d86:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001d8a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001d8e:	fab2 f282 	clz	r2, r2
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	f042 0220 	orr.w	r2, r2, #32
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	f002 021f 	and.w	r2, r2, #31
 8001d9e:	2101      	movs	r1, #1
 8001da0:	fa01 f202 	lsl.w	r2, r1, r2
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0af      	beq.n	8001d0a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001daa:	4b2d      	ldr	r3, [pc, #180]	; (8001e60 <HAL_RCC_OscConfig+0x5e8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	21f8      	movs	r1, #248	; 0xf8
 8001dc0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001dc8:	fa91 f1a1 	rbit	r1, r1
 8001dcc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001dd0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001dd4:	fab1 f181 	clz	r1, r1
 8001dd8:	b2c9      	uxtb	r1, r1
 8001dda:	408b      	lsls	r3, r1
 8001ddc:	4920      	ldr	r1, [pc, #128]	; (8001e60 <HAL_RCC_OscConfig+0x5e8>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]
 8001de2:	e06c      	b.n	8001ebe <HAL_RCC_OscConfig+0x646>
 8001de4:	2301      	movs	r3, #1
 8001de6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001df6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7fe fd3a 	bl	8000888 <HAL_GetTick>
 8001e14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e18:	e00a      	b.n	8001e30 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e1a:	f7fe fd35 	bl	8000888 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d902      	bls.n	8001e30 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	f000 bd5a 	b.w	80028e4 <HAL_RCC_OscConfig+0x106c>
 8001e30:	2302      	movs	r3, #2
 8001e32:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001e3a:	fa93 f3a3 	rbit	r3, r3
 8001e3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001e42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	095b      	lsrs	r3, r3, #5
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d104      	bne.n	8001e64 <HAL_RCC_OscConfig+0x5ec>
 8001e5a:	4b01      	ldr	r3, [pc, #4]	; (8001e60 <HAL_RCC_OscConfig+0x5e8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	e015      	b.n	8001e8c <HAL_RCC_OscConfig+0x614>
 8001e60:	40021000 	.word	0x40021000
 8001e64:	2302      	movs	r3, #2
 8001e66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e6e:	fa93 f3a3 	rbit	r3, r3
 8001e72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e76:	2302      	movs	r3, #2
 8001e78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e80:	fa93 f3a3 	rbit	r3, r3
 8001e84:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001e88:	4bc8      	ldr	r3, [pc, #800]	; (80021ac <HAL_RCC_OscConfig+0x934>)
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001e92:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e96:	fa92 f2a2 	rbit	r2, r2
 8001e9a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001e9e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001ea2:	fab2 f282 	clz	r2, r2
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	f042 0220 	orr.w	r2, r2, #32
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	f002 021f 	and.w	r2, r2, #31
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb8:	4013      	ands	r3, r2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1ad      	bne.n	8001e1a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 8110 	beq.w	80020f4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d079      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x760>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001eee:	fa93 f3a3 	rbit	r3, r3
 8001ef2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001efa:	fab3 f383 	clz	r3, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	4bab      	ldr	r3, [pc, #684]	; (80021b0 <HAL_RCC_OscConfig+0x938>)
 8001f04:	4413      	add	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	461a      	mov	r2, r3
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0e:	f7fe fcbb 	bl	8000888 <HAL_GetTick>
 8001f12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f16:	e00a      	b.n	8001f2e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f18:	f7fe fcb6 	bl	8000888 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d902      	bls.n	8001f2e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	f000 bcdb 	b.w	80028e4 <HAL_RCC_OscConfig+0x106c>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f38:	fa93 f3a3 	rbit	r3, r3
 8001f3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f44:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f48:	2202      	movs	r2, #2
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f50:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	fa93 f2a3 	rbit	r2, r3
 8001f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	fa93 f2a3 	rbit	r2, r3
 8001f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f86:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f88:	4b88      	ldr	r3, [pc, #544]	; (80021ac <HAL_RCC_OscConfig+0x934>)
 8001f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f90:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f94:	2102      	movs	r1, #2
 8001f96:	6019      	str	r1, [r3, #0]
 8001f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	fa93 f1a3 	rbit	r1, r3
 8001fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001faa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001fae:	6019      	str	r1, [r3, #0]
  return result;
 8001fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	f003 031f 	and.w	r3, r3, #31
 8001fca:	2101      	movs	r1, #1
 8001fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0a0      	beq.n	8001f18 <HAL_RCC_OscConfig+0x6a0>
 8001fd6:	e08d      	b.n	80020f4 <HAL_RCC_OscConfig+0x87c>
 8001fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fdc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	fa93 f2a3 	rbit	r2, r3
 8001ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ffa:	601a      	str	r2, [r3, #0]
  return result;
 8001ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002000:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002004:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	4b68      	ldr	r3, [pc, #416]	; (80021b0 <HAL_RCC_OscConfig+0x938>)
 8002010:	4413      	add	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	461a      	mov	r2, r3
 8002016:	2300      	movs	r3, #0
 8002018:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201a:	f7fe fc35 	bl	8000888 <HAL_GetTick>
 800201e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002022:	e00a      	b.n	800203a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002024:	f7fe fc30 	bl	8000888 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d902      	bls.n	800203a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	f000 bc55 	b.w	80028e4 <HAL_RCC_OscConfig+0x106c>
 800203a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002042:	2202      	movs	r2, #2
 8002044:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	fa93 f2a3 	rbit	r2, r3
 8002054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002058:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002062:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002066:	2202      	movs	r2, #2
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	fa93 f2a3 	rbit	r2, r3
 8002078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800208a:	2202      	movs	r2, #2
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	fa93 f2a3 	rbit	r2, r3
 800209c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80020a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a6:	4b41      	ldr	r3, [pc, #260]	; (80021ac <HAL_RCC_OscConfig+0x934>)
 80020a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80020b2:	2102      	movs	r1, #2
 80020b4:	6019      	str	r1, [r3, #0]
 80020b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	fa93 f1a3 	rbit	r1, r3
 80020c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80020cc:	6019      	str	r1, [r3, #0]
  return result;
 80020ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	fab3 f383 	clz	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	2101      	movs	r1, #1
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d197      	bne.n	8002024 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 81a1 	beq.w	800244c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002110:	4b26      	ldr	r3, [pc, #152]	; (80021ac <HAL_RCC_OscConfig+0x934>)
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d116      	bne.n	800214a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211c:	4b23      	ldr	r3, [pc, #140]	; (80021ac <HAL_RCC_OscConfig+0x934>)
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	4a22      	ldr	r2, [pc, #136]	; (80021ac <HAL_RCC_OscConfig+0x934>)
 8002122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002126:	61d3      	str	r3, [r2, #28]
 8002128:	4b20      	ldr	r3, [pc, #128]	; (80021ac <HAL_RCC_OscConfig+0x934>)
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002134:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002142:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002144:	2301      	movs	r3, #1
 8002146:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214a:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <HAL_RCC_OscConfig+0x93c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002152:	2b00      	cmp	r3, #0
 8002154:	d11a      	bne.n	800218c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002156:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <HAL_RCC_OscConfig+0x93c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a16      	ldr	r2, [pc, #88]	; (80021b4 <HAL_RCC_OscConfig+0x93c>)
 800215c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002160:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002162:	f7fe fb91 	bl	8000888 <HAL_GetTick>
 8002166:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216a:	e009      	b.n	8002180 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800216c:	f7fe fb8c 	bl	8000888 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b64      	cmp	r3, #100	; 0x64
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e3b1      	b.n	80028e4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <HAL_RCC_OscConfig+0x93c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0ef      	beq.n	800216c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800218c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002190:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d10d      	bne.n	80021b8 <HAL_RCC_OscConfig+0x940>
 800219c:	4b03      	ldr	r3, [pc, #12]	; (80021ac <HAL_RCC_OscConfig+0x934>)
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	4a02      	ldr	r2, [pc, #8]	; (80021ac <HAL_RCC_OscConfig+0x934>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6213      	str	r3, [r2, #32]
 80021a8:	e03c      	b.n	8002224 <HAL_RCC_OscConfig+0x9ac>
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	10908120 	.word	0x10908120
 80021b4:	40007000 	.word	0x40007000
 80021b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10c      	bne.n	80021e2 <HAL_RCC_OscConfig+0x96a>
 80021c8:	4bc1      	ldr	r3, [pc, #772]	; (80024d0 <HAL_RCC_OscConfig+0xc58>)
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	4ac0      	ldr	r2, [pc, #768]	; (80024d0 <HAL_RCC_OscConfig+0xc58>)
 80021ce:	f023 0301 	bic.w	r3, r3, #1
 80021d2:	6213      	str	r3, [r2, #32]
 80021d4:	4bbe      	ldr	r3, [pc, #760]	; (80024d0 <HAL_RCC_OscConfig+0xc58>)
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	4abd      	ldr	r2, [pc, #756]	; (80024d0 <HAL_RCC_OscConfig+0xc58>)
 80021da:	f023 0304 	bic.w	r3, r3, #4
 80021de:	6213      	str	r3, [r2, #32]
 80021e0:	e020      	b.n	8002224 <HAL_RCC_OscConfig+0x9ac>
 80021e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	2b05      	cmp	r3, #5
 80021f0:	d10c      	bne.n	800220c <HAL_RCC_OscConfig+0x994>
 80021f2:	4bb7      	ldr	r3, [pc, #732]	; (80024d0 <HAL_RCC_OscConfig+0xc58>)
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	4ab6      	ldr	r2, [pc, #728]	; (80024d0 <HAL_RCC_OscConfig+0xc58>)
 80021f8:	f043 0304 	orr.w	r3, r3, #4
 80021fc:	6213      	str	r3, [r2, #32]
 80021fe:	4bb4      	ldr	r3, [pc, #720]	; (80024d0 <HAL_RCC_OscConfig+0xc58>)
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	4ab3      	ldr	r2, [pc, #716]	; (80024d0 <HAL_RCC_OscConfig+0xc58>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6213      	str	r3, [r2, #32]
 800220a:	e00b      	b.n	8002224 <HAL_RCC_OscConfig+0x9ac>
 800220c:	4bb0      	ldr	r3, [pc, #704]	; (80024d0 <HAL_RCC_OscConfig+0xc58>)
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	4aaf      	ldr	r2, [pc, #700]	; (80024d0 <HAL_RCC_OscConfig+0xc58>)
 8002212:	f023 0301 	bic.w	r3, r3, #1
 8002216:	6213      	str	r3, [r2, #32]
 8002218:	4bad      	ldr	r3, [pc, #692]	; (80024d0 <HAL_RCC_OscConfig+0xc58>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	4aac      	ldr	r2, [pc, #688]	; (80024d0 <HAL_RCC_OscConfig+0xc58>)
 800221e:	f023 0304 	bic.w	r3, r3, #4
 8002222:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002228:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 8081 	beq.w	8002338 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002236:	f7fe fb27 	bl	8000888 <HAL_GetTick>
 800223a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223e:	e00b      	b.n	8002258 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002240:	f7fe fb22 	bl	8000888 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002250:	4293      	cmp	r3, r2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e345      	b.n	80028e4 <HAL_RCC_OscConfig+0x106c>
 8002258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002260:	2202      	movs	r2, #2
 8002262:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002268:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	fa93 f2a3 	rbit	r2, r3
 8002272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002276:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002280:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002284:	2202      	movs	r2, #2
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	fa93 f2a3 	rbit	r2, r3
 8002296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800229e:	601a      	str	r2, [r3, #0]
  return result;
 80022a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80022a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022aa:	fab3 f383 	clz	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	095b      	lsrs	r3, r3, #5
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	f043 0302 	orr.w	r3, r3, #2
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d102      	bne.n	80022c4 <HAL_RCC_OscConfig+0xa4c>
 80022be:	4b84      	ldr	r3, [pc, #528]	; (80024d0 <HAL_RCC_OscConfig+0xc58>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	e013      	b.n	80022ec <HAL_RCC_OscConfig+0xa74>
 80022c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80022cc:	2202      	movs	r2, #2
 80022ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	fa93 f2a3 	rbit	r2, r3
 80022de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	4b79      	ldr	r3, [pc, #484]	; (80024d0 <HAL_RCC_OscConfig+0xc58>)
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022f0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80022f4:	2102      	movs	r1, #2
 80022f6:	6011      	str	r1, [r2, #0]
 80022f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022fc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	fa92 f1a2 	rbit	r1, r2
 8002306:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800230a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800230e:	6011      	str	r1, [r2, #0]
  return result;
 8002310:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002314:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002318:	6812      	ldr	r2, [r2, #0]
 800231a:	fab2 f282 	clz	r2, r2
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	f002 021f 	and.w	r2, r2, #31
 800232a:	2101      	movs	r1, #1
 800232c:	fa01 f202 	lsl.w	r2, r1, r2
 8002330:	4013      	ands	r3, r2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d084      	beq.n	8002240 <HAL_RCC_OscConfig+0x9c8>
 8002336:	e07f      	b.n	8002438 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002338:	f7fe faa6 	bl	8000888 <HAL_GetTick>
 800233c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002340:	e00b      	b.n	800235a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002342:	f7fe faa1 	bl	8000888 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e2c4      	b.n	80028e4 <HAL_RCC_OscConfig+0x106c>
 800235a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002362:	2202      	movs	r2, #2
 8002364:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	fa93 f2a3 	rbit	r2, r3
 8002374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002378:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002382:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002386:	2202      	movs	r2, #2
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	fa93 f2a3 	rbit	r2, r3
 8002398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80023a0:	601a      	str	r2, [r3, #0]
  return result;
 80023a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80023aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ac:	fab3 f383 	clz	r3, r3
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f043 0302 	orr.w	r3, r3, #2
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d102      	bne.n	80023c6 <HAL_RCC_OscConfig+0xb4e>
 80023c0:	4b43      	ldr	r3, [pc, #268]	; (80024d0 <HAL_RCC_OscConfig+0xc58>)
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	e013      	b.n	80023ee <HAL_RCC_OscConfig+0xb76>
 80023c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80023ce:	2202      	movs	r2, #2
 80023d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	fa93 f2a3 	rbit	r2, r3
 80023e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	4b39      	ldr	r3, [pc, #228]	; (80024d0 <HAL_RCC_OscConfig+0xc58>)
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023f2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80023f6:	2102      	movs	r1, #2
 80023f8:	6011      	str	r1, [r2, #0]
 80023fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023fe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	fa92 f1a2 	rbit	r1, r2
 8002408:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800240c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002410:	6011      	str	r1, [r2, #0]
  return result;
 8002412:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002416:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	fab2 f282 	clz	r2, r2
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	f002 021f 	and.w	r2, r2, #31
 800242c:	2101      	movs	r1, #1
 800242e:	fa01 f202 	lsl.w	r2, r1, r2
 8002432:	4013      	ands	r3, r2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d184      	bne.n	8002342 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002438:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800243c:	2b01      	cmp	r3, #1
 800243e:	d105      	bne.n	800244c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002440:	4b23      	ldr	r3, [pc, #140]	; (80024d0 <HAL_RCC_OscConfig+0xc58>)
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	4a22      	ldr	r2, [pc, #136]	; (80024d0 <HAL_RCC_OscConfig+0xc58>)
 8002446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800244a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800244c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002450:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 8242 	beq.w	80028e2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800245e:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <HAL_RCC_OscConfig+0xc58>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 030c 	and.w	r3, r3, #12
 8002466:	2b08      	cmp	r3, #8
 8002468:	f000 8213 	beq.w	8002892 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800246c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002470:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	2b02      	cmp	r3, #2
 800247a:	f040 8162 	bne.w	8002742 <HAL_RCC_OscConfig+0xeca>
 800247e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002482:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002486:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800248a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002490:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	fa93 f2a3 	rbit	r2, r3
 800249a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80024a2:	601a      	str	r2, [r3, #0]
  return result;
 80024a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80024ac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	461a      	mov	r2, r3
 80024c0:	2300      	movs	r3, #0
 80024c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7fe f9e0 	bl	8000888 <HAL_GetTick>
 80024c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024cc:	e00c      	b.n	80024e8 <HAL_RCC_OscConfig+0xc70>
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d4:	f7fe f9d8 	bl	8000888 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e1fd      	b.n	80028e4 <HAL_RCC_OscConfig+0x106c>
 80024e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80024f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	fa93 f2a3 	rbit	r2, r3
 8002504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002508:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800250c:	601a      	str	r2, [r3, #0]
  return result;
 800250e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002512:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002516:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	b2db      	uxtb	r3, r3
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b01      	cmp	r3, #1
 800252a:	d102      	bne.n	8002532 <HAL_RCC_OscConfig+0xcba>
 800252c:	4bb0      	ldr	r3, [pc, #704]	; (80027f0 <HAL_RCC_OscConfig+0xf78>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	e027      	b.n	8002582 <HAL_RCC_OscConfig+0xd0a>
 8002532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002536:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800253a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800253e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002544:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	fa93 f2a3 	rbit	r2, r3
 800254e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002552:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002560:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	fa93 f2a3 	rbit	r2, r3
 8002574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002578:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	4b9c      	ldr	r3, [pc, #624]	; (80027f0 <HAL_RCC_OscConfig+0xf78>)
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002586:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800258a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800258e:	6011      	str	r1, [r2, #0]
 8002590:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002594:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002598:	6812      	ldr	r2, [r2, #0]
 800259a:	fa92 f1a2 	rbit	r1, r2
 800259e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025a2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80025a6:	6011      	str	r1, [r2, #0]
  return result;
 80025a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025ac:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	fab2 f282 	clz	r2, r2
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	f042 0220 	orr.w	r2, r2, #32
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	f002 021f 	and.w	r2, r2, #31
 80025c2:	2101      	movs	r1, #1
 80025c4:	fa01 f202 	lsl.w	r2, r1, r2
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d182      	bne.n	80024d4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ce:	4b88      	ldr	r3, [pc, #544]	; (80027f0 <HAL_RCC_OscConfig+0xf78>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80025e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	430b      	orrs	r3, r1
 80025f0:	497f      	ldr	r1, [pc, #508]	; (80027f0 <HAL_RCC_OscConfig+0xf78>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	604b      	str	r3, [r1, #4]
 80025f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80025fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002608:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	fa93 f2a3 	rbit	r2, r3
 8002612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002616:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800261a:	601a      	str	r2, [r3, #0]
  return result;
 800261c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002620:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002624:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002626:	fab3 f383 	clz	r3, r3
 800262a:	b2db      	uxtb	r3, r3
 800262c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002630:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	461a      	mov	r2, r3
 8002638:	2301      	movs	r3, #1
 800263a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263c:	f7fe f924 	bl	8000888 <HAL_GetTick>
 8002640:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002644:	e009      	b.n	800265a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002646:	f7fe f91f 	bl	8000888 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e144      	b.n	80028e4 <HAL_RCC_OscConfig+0x106c>
 800265a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002662:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002666:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	fa93 f2a3 	rbit	r2, r3
 8002676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800267e:	601a      	str	r2, [r3, #0]
  return result;
 8002680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002684:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002688:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	095b      	lsrs	r3, r3, #5
 8002692:	b2db      	uxtb	r3, r3
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b01      	cmp	r3, #1
 800269c:	d102      	bne.n	80026a4 <HAL_RCC_OscConfig+0xe2c>
 800269e:	4b54      	ldr	r3, [pc, #336]	; (80027f0 <HAL_RCC_OscConfig+0xf78>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	e027      	b.n	80026f4 <HAL_RCC_OscConfig+0xe7c>
 80026a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80026ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	fa93 f2a3 	rbit	r2, r3
 80026c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ce:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80026d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026dc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	fa93 f2a3 	rbit	r2, r3
 80026e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	4b3f      	ldr	r3, [pc, #252]	; (80027f0 <HAL_RCC_OscConfig+0xf78>)
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026f8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80026fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002700:	6011      	str	r1, [r2, #0]
 8002702:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002706:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	fa92 f1a2 	rbit	r1, r2
 8002710:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002714:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002718:	6011      	str	r1, [r2, #0]
  return result;
 800271a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800271e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	fab2 f282 	clz	r2, r2
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	f042 0220 	orr.w	r2, r2, #32
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	f002 021f 	and.w	r2, r2, #31
 8002734:	2101      	movs	r1, #1
 8002736:	fa01 f202 	lsl.w	r2, r1, r2
 800273a:	4013      	ands	r3, r2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d082      	beq.n	8002646 <HAL_RCC_OscConfig+0xdce>
 8002740:	e0cf      	b.n	80028e2 <HAL_RCC_OscConfig+0x106a>
 8002742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002746:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800274a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800274e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002754:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	fa93 f2a3 	rbit	r2, r3
 800275e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002762:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002766:	601a      	str	r2, [r3, #0]
  return result;
 8002768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002770:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002772:	fab3 f383 	clz	r3, r3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800277c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	461a      	mov	r2, r3
 8002784:	2300      	movs	r3, #0
 8002786:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7fe f87e 	bl	8000888 <HAL_GetTick>
 800278c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002790:	e009      	b.n	80027a6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002792:	f7fe f879 	bl	8000888 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e09e      	b.n	80028e4 <HAL_RCC_OscConfig+0x106c>
 80027a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027aa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80027ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	fa93 f2a3 	rbit	r2, r3
 80027c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80027ca:	601a      	str	r2, [r3, #0]
  return result;
 80027cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80027d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	095b      	lsrs	r3, r3, #5
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d104      	bne.n	80027f4 <HAL_RCC_OscConfig+0xf7c>
 80027ea:	4b01      	ldr	r3, [pc, #4]	; (80027f0 <HAL_RCC_OscConfig+0xf78>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	e029      	b.n	8002844 <HAL_RCC_OscConfig+0xfcc>
 80027f0:	40021000 	.word	0x40021000
 80027f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80027fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002800:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002806:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	fa93 f2a3 	rbit	r2, r3
 8002810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002814:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002822:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	fa93 f2a3 	rbit	r2, r3
 8002836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <HAL_RCC_OscConfig+0x1078>)
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002848:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800284c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002850:	6011      	str	r1, [r2, #0]
 8002852:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002856:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	fa92 f1a2 	rbit	r1, r2
 8002860:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002864:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002868:	6011      	str	r1, [r2, #0]
  return result;
 800286a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800286e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	fab2 f282 	clz	r2, r2
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	f042 0220 	orr.w	r2, r2, #32
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	f002 021f 	and.w	r2, r2, #31
 8002884:	2101      	movs	r1, #1
 8002886:	fa01 f202 	lsl.w	r2, r1, r2
 800288a:	4013      	ands	r3, r2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d180      	bne.n	8002792 <HAL_RCC_OscConfig+0xf1a>
 8002890:	e027      	b.n	80028e2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002896:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e01e      	b.n	80028e4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_RCC_OscConfig+0x1078>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80028b2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d10b      	bne.n	80028de <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80028c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80028ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028da:	429a      	cmp	r2, r3
 80028dc:	d001      	beq.n	80028e2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000

080028f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b09e      	sub	sp, #120	; 0x78
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028fe:	2300      	movs	r3, #0
 8002900:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e162      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800290c:	4b90      	ldr	r3, [pc, #576]	; (8002b50 <HAL_RCC_ClockConfig+0x25c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d910      	bls.n	800293c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291a:	4b8d      	ldr	r3, [pc, #564]	; (8002b50 <HAL_RCC_ClockConfig+0x25c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 0207 	bic.w	r2, r3, #7
 8002922:	498b      	ldr	r1, [pc, #556]	; (8002b50 <HAL_RCC_ClockConfig+0x25c>)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	4313      	orrs	r3, r2
 8002928:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800292a:	4b89      	ldr	r3, [pc, #548]	; (8002b50 <HAL_RCC_ClockConfig+0x25c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d001      	beq.n	800293c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e14a      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002948:	4b82      	ldr	r3, [pc, #520]	; (8002b54 <HAL_RCC_ClockConfig+0x260>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	497f      	ldr	r1, [pc, #508]	; (8002b54 <HAL_RCC_ClockConfig+0x260>)
 8002956:	4313      	orrs	r3, r2
 8002958:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 80dc 	beq.w	8002b20 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d13c      	bne.n	80029ea <HAL_RCC_ClockConfig+0xf6>
 8002970:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002974:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002978:	fa93 f3a3 	rbit	r3, r3
 800297c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800297e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002980:	fab3 f383 	clz	r3, r3
 8002984:	b2db      	uxtb	r3, r3
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	b2db      	uxtb	r3, r3
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b01      	cmp	r3, #1
 8002992:	d102      	bne.n	800299a <HAL_RCC_ClockConfig+0xa6>
 8002994:	4b6f      	ldr	r3, [pc, #444]	; (8002b54 <HAL_RCC_ClockConfig+0x260>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	e00f      	b.n	80029ba <HAL_RCC_ClockConfig+0xc6>
 800299a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800299e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029a2:	fa93 f3a3 	rbit	r3, r3
 80029a6:	667b      	str	r3, [r7, #100]	; 0x64
 80029a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ac:	663b      	str	r3, [r7, #96]	; 0x60
 80029ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029b0:	fa93 f3a3 	rbit	r3, r3
 80029b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029b6:	4b67      	ldr	r3, [pc, #412]	; (8002b54 <HAL_RCC_ClockConfig+0x260>)
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029be:	65ba      	str	r2, [r7, #88]	; 0x58
 80029c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029c2:	fa92 f2a2 	rbit	r2, r2
 80029c6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80029c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029ca:	fab2 f282 	clz	r2, r2
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	f042 0220 	orr.w	r2, r2, #32
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	f002 021f 	and.w	r2, r2, #31
 80029da:	2101      	movs	r1, #1
 80029dc:	fa01 f202 	lsl.w	r2, r1, r2
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d17b      	bne.n	8002ade <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e0f3      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d13c      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x178>
 80029f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a02:	fab3 f383 	clz	r3, r3
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d102      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x128>
 8002a16:	4b4f      	ldr	r3, [pc, #316]	; (8002b54 <HAL_RCC_ClockConfig+0x260>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	e00f      	b.n	8002a3c <HAL_RCC_ClockConfig+0x148>
 8002a1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a20:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	647b      	str	r3, [r7, #68]	; 0x44
 8002a2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a2e:	643b      	str	r3, [r7, #64]	; 0x40
 8002a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a32:	fa93 f3a3 	rbit	r3, r3
 8002a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a38:	4b46      	ldr	r3, [pc, #280]	; (8002b54 <HAL_RCC_ClockConfig+0x260>)
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a40:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a44:	fa92 f2a2 	rbit	r2, r2
 8002a48:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002a4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a4c:	fab2 f282 	clz	r2, r2
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	f042 0220 	orr.w	r2, r2, #32
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	f002 021f 	and.w	r2, r2, #31
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d13a      	bne.n	8002ade <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0b2      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x2de>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	095b      	lsrs	r3, r3, #5
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d102      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x1a0>
 8002a8e:	4b31      	ldr	r3, [pc, #196]	; (8002b54 <HAL_RCC_ClockConfig+0x260>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	e00d      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x1bc>
 8002a94:	2302      	movs	r3, #2
 8002a96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	623b      	str	r3, [r7, #32]
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	61fb      	str	r3, [r7, #28]
 8002aac:	4b29      	ldr	r3, [pc, #164]	; (8002b54 <HAL_RCC_ClockConfig+0x260>)
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	61ba      	str	r2, [r7, #24]
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	fa92 f2a2 	rbit	r2, r2
 8002aba:	617a      	str	r2, [r7, #20]
  return result;
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	fab2 f282 	clz	r2, r2
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	f042 0220 	orr.w	r2, r2, #32
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	f002 021f 	and.w	r2, r2, #31
 8002ace:	2101      	movs	r1, #1
 8002ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e079      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ade:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <HAL_RCC_ClockConfig+0x260>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f023 0203 	bic.w	r2, r3, #3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	491a      	ldr	r1, [pc, #104]	; (8002b54 <HAL_RCC_ClockConfig+0x260>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002af0:	f7fd feca 	bl	8000888 <HAL_GetTick>
 8002af4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af6:	e00a      	b.n	8002b0e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af8:	f7fd fec6 	bl	8000888 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e061      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0e:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <HAL_RCC_ClockConfig+0x260>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 020c 	and.w	r2, r3, #12
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d1eb      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_RCC_ClockConfig+0x25c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d214      	bcs.n	8002b58 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2e:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <HAL_RCC_ClockConfig+0x25c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f023 0207 	bic.w	r2, r3, #7
 8002b36:	4906      	ldr	r1, [pc, #24]	; (8002b50 <HAL_RCC_ClockConfig+0x25c>)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3e:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <HAL_RCC_ClockConfig+0x25c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d005      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e040      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x2de>
 8002b50:	40022000 	.word	0x40022000
 8002b54:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b64:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <HAL_RCC_ClockConfig+0x2e8>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	491a      	ldr	r1, [pc, #104]	; (8002bdc <HAL_RCC_ClockConfig+0x2e8>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b82:	4b16      	ldr	r3, [pc, #88]	; (8002bdc <HAL_RCC_ClockConfig+0x2e8>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4912      	ldr	r1, [pc, #72]	; (8002bdc <HAL_RCC_ClockConfig+0x2e8>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b96:	f000 f829 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8002b9a:	4601      	mov	r1, r0
 8002b9c:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <HAL_RCC_ClockConfig+0x2e8>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ba4:	22f0      	movs	r2, #240	; 0xf0
 8002ba6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	fa92 f2a2 	rbit	r2, r2
 8002bae:	60fa      	str	r2, [r7, #12]
  return result;
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	fab2 f282 	clz	r2, r2
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	40d3      	lsrs	r3, r2
 8002bba:	4a09      	ldr	r2, [pc, #36]	; (8002be0 <HAL_RCC_ClockConfig+0x2ec>)
 8002bbc:	5cd3      	ldrb	r3, [r2, r3]
 8002bbe:	fa21 f303 	lsr.w	r3, r1, r3
 8002bc2:	4a08      	ldr	r2, [pc, #32]	; (8002be4 <HAL_RCC_ClockConfig+0x2f0>)
 8002bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002bc6:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <HAL_RCC_ClockConfig+0x2f4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fd fd66 	bl	800069c <HAL_InitTick>
  
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3778      	adds	r7, #120	; 0x78
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	08005094 	.word	0x08005094
 8002be4:	20000000 	.word	0x20000000
 8002be8:	20000004 	.word	0x20000004

08002bec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b08b      	sub	sp, #44	; 0x2c
 8002bf0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61fb      	str	r3, [r7, #28]
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61bb      	str	r3, [r7, #24]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002c06:	4b29      	ldr	r3, [pc, #164]	; (8002cac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d002      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0x30>
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d003      	beq.n	8002c22 <HAL_RCC_GetSysClockFreq+0x36>
 8002c1a:	e03c      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c1c:	4b24      	ldr	r3, [pc, #144]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c1e:	623b      	str	r3, [r7, #32]
      break;
 8002c20:	e03c      	b.n	8002c9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c28:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002c2c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	fa92 f2a2 	rbit	r2, r2
 8002c34:	607a      	str	r2, [r7, #4]
  return result;
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	fab2 f282 	clz	r2, r2
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	40d3      	lsrs	r3, r2
 8002c40:	4a1c      	ldr	r2, [pc, #112]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c42:	5cd3      	ldrb	r3, [r2, r3]
 8002c44:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c46:	4b19      	ldr	r3, [pc, #100]	; (8002cac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	220f      	movs	r2, #15
 8002c50:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	fa92 f2a2 	rbit	r2, r2
 8002c58:	60fa      	str	r2, [r7, #12]
  return result;
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	fab2 f282 	clz	r2, r2
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	40d3      	lsrs	r3, r2
 8002c64:	4a14      	ldr	r2, [pc, #80]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c66:	5cd3      	ldrb	r3, [r2, r3]
 8002c68:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d008      	beq.n	8002c86 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c74:	4a0e      	ldr	r2, [pc, #56]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	fb02 f303 	mul.w	r3, r2, r3
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
 8002c84:	e004      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	4a0c      	ldr	r2, [pc, #48]	; (8002cbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c8a:	fb02 f303 	mul.w	r3, r2, r3
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	623b      	str	r3, [r7, #32]
      break;
 8002c94:	e002      	b.n	8002c9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c96:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c98:	623b      	str	r3, [r7, #32]
      break;
 8002c9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	372c      	adds	r7, #44	; 0x2c
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	007a1200 	.word	0x007a1200
 8002cb4:	080050ac 	.word	0x080050ac
 8002cb8:	080050bc 	.word	0x080050bc
 8002cbc:	003d0900 	.word	0x003d0900

08002cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc4:	4b03      	ldr	r3, [pc, #12]	; (8002cd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	20000000 	.word	0x20000000

08002cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002cde:	f7ff ffef 	bl	8002cc0 <HAL_RCC_GetHCLKFreq>
 8002ce2:	4601      	mov	r1, r0
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002cec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002cf0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	fa92 f2a2 	rbit	r2, r2
 8002cf8:	603a      	str	r2, [r7, #0]
  return result;
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	fab2 f282 	clz	r2, r2
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	40d3      	lsrs	r3, r2
 8002d04:	4a04      	ldr	r2, [pc, #16]	; (8002d18 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d06:	5cd3      	ldrb	r3, [r2, r3]
 8002d08:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40021000 	.word	0x40021000
 8002d18:	080050a4 	.word	0x080050a4

08002d1c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	220f      	movs	r2, #15
 8002d2a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d2c:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <HAL_RCC_GetClockConfig+0x5c>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 0203 	and.w	r2, r3, #3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002d38:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <HAL_RCC_GetClockConfig+0x5c>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002d44:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <HAL_RCC_GetClockConfig+0x5c>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d50:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <HAL_RCC_GetClockConfig+0x5c>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	08db      	lsrs	r3, r3, #3
 8002d56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002d5e:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <HAL_RCC_GetClockConfig+0x60>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0207 	and.w	r2, r3, #7
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	601a      	str	r2, [r3, #0]
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40022000 	.word	0x40022000

08002d80 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b092      	sub	sp, #72	; 0x48
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d90:	2300      	movs	r3, #0
 8002d92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 80d4 	beq.w	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002da4:	4b4e      	ldr	r3, [pc, #312]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10e      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db0:	4b4b      	ldr	r3, [pc, #300]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4a4a      	ldr	r2, [pc, #296]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dba:	61d3      	str	r3, [r2, #28]
 8002dbc:	4b48      	ldr	r3, [pc, #288]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dce:	4b45      	ldr	r3, [pc, #276]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d118      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dda:	4b42      	ldr	r3, [pc, #264]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a41      	ldr	r2, [pc, #260]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002de6:	f7fd fd4f 	bl	8000888 <HAL_GetTick>
 8002dea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dec:	e008      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dee:	f7fd fd4b 	bl	8000888 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b64      	cmp	r3, #100	; 0x64
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e14b      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e00:	4b38      	ldr	r3, [pc, #224]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e0c:	4b34      	ldr	r3, [pc, #208]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e14:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 8084 	beq.w	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d07c      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e2c:	4b2c      	ldr	r3, [pc, #176]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3e:	fa93 f3a3 	rbit	r3, r3
 8002e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e46:	fab3 f383 	clz	r3, r3
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4b26      	ldr	r3, [pc, #152]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	461a      	mov	r2, r3
 8002e56:	2301      	movs	r3, #1
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	461a      	mov	r2, r3
 8002e72:	4b1d      	ldr	r3, [pc, #116]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e7e:	4a18      	ldr	r2, [pc, #96]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e82:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d04b      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8e:	f7fd fcfb 	bl	8000888 <HAL_GetTick>
 8002e92:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e94:	e00a      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e96:	f7fd fcf7 	bl	8000888 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e0f5      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002eac:	2302      	movs	r3, #2
 8002eae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb2:	fa93 f3a3 	rbit	r3, r3
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb8:	2302      	movs	r3, #2
 8002eba:	623b      	str	r3, [r7, #32]
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	61fb      	str	r3, [r7, #28]
  return result;
 8002ec4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec6:	fab3 f383 	clz	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	f043 0302 	orr.w	r3, r3, #2
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d108      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002eda:	4b01      	ldr	r3, [pc, #4]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	e00d      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40007000 	.word	0x40007000
 8002ee8:	10908100 	.word	0x10908100
 8002eec:	2302      	movs	r3, #2
 8002eee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	fa93 f3a3 	rbit	r3, r3
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	4b69      	ldr	r3, [pc, #420]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	2202      	movs	r2, #2
 8002efe:	613a      	str	r2, [r7, #16]
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	fa92 f2a2 	rbit	r2, r2
 8002f06:	60fa      	str	r2, [r7, #12]
  return result;
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	fab2 f282 	clz	r2, r2
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	f002 021f 	and.w	r2, r2, #31
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0b7      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f26:	4b5e      	ldr	r3, [pc, #376]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	495b      	ldr	r1, [pc, #364]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d105      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f40:	4b57      	ldr	r3, [pc, #348]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	4a56      	ldr	r2, [pc, #344]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f58:	4b51      	ldr	r3, [pc, #324]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	f023 0203 	bic.w	r2, r3, #3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	494e      	ldr	r1, [pc, #312]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0320 	and.w	r3, r3, #32
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d008      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f76:	4b4a      	ldr	r3, [pc, #296]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	f023 0210 	bic.w	r2, r3, #16
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	4947      	ldr	r1, [pc, #284]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002f94:	4b42      	ldr	r3, [pc, #264]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	493f      	ldr	r1, [pc, #252]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d008      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fb2:	4b3b      	ldr	r3, [pc, #236]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f023 0220 	bic.w	r2, r3, #32
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	4938      	ldr	r1, [pc, #224]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fd0:	4b33      	ldr	r3, [pc, #204]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	4930      	ldr	r1, [pc, #192]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fee:	4b2c      	ldr	r3, [pc, #176]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	4929      	ldr	r1, [pc, #164]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800300c:	4b24      	ldr	r3, [pc, #144]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	4921      	ldr	r1, [pc, #132]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800301a:	4313      	orrs	r3, r2
 800301c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800302a:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	491a      	ldr	r1, [pc, #104]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003038:	4313      	orrs	r3, r2
 800303a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003048:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	4912      	ldr	r1, [pc, #72]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003056:	4313      	orrs	r3, r2
 8003058:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d008      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003066:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	490b      	ldr	r1, [pc, #44]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003074:	4313      	orrs	r3, r2
 8003076:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003084:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	4903      	ldr	r1, [pc, #12]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003092:	4313      	orrs	r3, r2
 8003094:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3748      	adds	r7, #72	; 0x48
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40021000 	.word	0x40021000

080030a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e049      	b.n	800314a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d106      	bne.n	80030d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f841 	bl	8003152 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3304      	adds	r3, #4
 80030e0:	4619      	mov	r1, r3
 80030e2:	4610      	mov	r0, r2
 80030e4:	f000 faa4 	bl	8003630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
	...

08003168 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b01      	cmp	r3, #1
 800317a:	d001      	beq.n	8003180 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e03b      	b.n	80031f8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0201 	orr.w	r2, r2, #1
 8003196:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a19      	ldr	r2, [pc, #100]	; (8003204 <HAL_TIM_Base_Start_IT+0x9c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d009      	beq.n	80031b6 <HAL_TIM_Base_Start_IT+0x4e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031aa:	d004      	beq.n	80031b6 <HAL_TIM_Base_Start_IT+0x4e>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a15      	ldr	r2, [pc, #84]	; (8003208 <HAL_TIM_Base_Start_IT+0xa0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d115      	bne.n	80031e2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	4b13      	ldr	r3, [pc, #76]	; (800320c <HAL_TIM_Base_Start_IT+0xa4>)
 80031be:	4013      	ands	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b06      	cmp	r3, #6
 80031c6:	d015      	beq.n	80031f4 <HAL_TIM_Base_Start_IT+0x8c>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ce:	d011      	beq.n	80031f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e0:	e008      	b.n	80031f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0201 	orr.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	e000      	b.n	80031f6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	40012c00 	.word	0x40012c00
 8003208:	40014000 	.word	0x40014000
 800320c:	00010007 	.word	0x00010007

08003210 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b02      	cmp	r3, #2
 8003224:	d122      	bne.n	800326c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b02      	cmp	r3, #2
 8003232:	d11b      	bne.n	800326c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0202 	mvn.w	r2, #2
 800323c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f9ce 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
 8003258:	e005      	b.n	8003266 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f9c0 	bl	80035e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f9d1 	bl	8003608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b04      	cmp	r3, #4
 8003278:	d122      	bne.n	80032c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b04      	cmp	r3, #4
 8003286:	d11b      	bne.n	80032c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0204 	mvn.w	r2, #4
 8003290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2202      	movs	r2, #2
 8003296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f9a4 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
 80032ac:	e005      	b.n	80032ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f996 	bl	80035e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f9a7 	bl	8003608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d122      	bne.n	8003314 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d11b      	bne.n	8003314 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0208 	mvn.w	r2, #8
 80032e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2204      	movs	r2, #4
 80032ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f97a 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
 8003300:	e005      	b.n	800330e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f96c 	bl	80035e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f97d 	bl	8003608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f003 0310 	and.w	r3, r3, #16
 800331e:	2b10      	cmp	r3, #16
 8003320:	d122      	bne.n	8003368 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f003 0310 	and.w	r3, r3, #16
 800332c:	2b10      	cmp	r3, #16
 800332e:	d11b      	bne.n	8003368 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f06f 0210 	mvn.w	r2, #16
 8003338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2208      	movs	r2, #8
 800333e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f950 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
 8003354:	e005      	b.n	8003362 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f942 	bl	80035e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f953 	bl	8003608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b01      	cmp	r3, #1
 8003374:	d10e      	bne.n	8003394 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b01      	cmp	r3, #1
 8003382:	d107      	bne.n	8003394 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0201 	mvn.w	r2, #1
 800338c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fd f906 	bl	80005a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339e:	2b80      	cmp	r3, #128	; 0x80
 80033a0:	d10e      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ac:	2b80      	cmp	r3, #128	; 0x80
 80033ae:	d107      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 fab0 	bl	8003920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ce:	d10e      	bne.n	80033ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033da:	2b80      	cmp	r3, #128	; 0x80
 80033dc:	d107      	bne.n	80033ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 faa3 	bl	8003934 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f8:	2b40      	cmp	r3, #64	; 0x40
 80033fa:	d10e      	bne.n	800341a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003406:	2b40      	cmp	r3, #64	; 0x40
 8003408:	d107      	bne.n	800341a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f901 	bl	800361c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	f003 0320 	and.w	r3, r3, #32
 8003424:	2b20      	cmp	r3, #32
 8003426:	d10e      	bne.n	8003446 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f003 0320 	and.w	r3, r3, #32
 8003432:	2b20      	cmp	r3, #32
 8003434:	d107      	bne.n	8003446 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f06f 0220 	mvn.w	r2, #32
 800343e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 fa63 	bl	800390c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b084      	sub	sp, #16
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_TIM_ConfigClockSource+0x1c>
 8003466:	2302      	movs	r3, #2
 8003468:	e0b6      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x18a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2202      	movs	r2, #2
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003488:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800348c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003494:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034a6:	d03e      	beq.n	8003526 <HAL_TIM_ConfigClockSource+0xd8>
 80034a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ac:	f200 8087 	bhi.w	80035be <HAL_TIM_ConfigClockSource+0x170>
 80034b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b4:	f000 8086 	beq.w	80035c4 <HAL_TIM_ConfigClockSource+0x176>
 80034b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034bc:	d87f      	bhi.n	80035be <HAL_TIM_ConfigClockSource+0x170>
 80034be:	2b70      	cmp	r3, #112	; 0x70
 80034c0:	d01a      	beq.n	80034f8 <HAL_TIM_ConfigClockSource+0xaa>
 80034c2:	2b70      	cmp	r3, #112	; 0x70
 80034c4:	d87b      	bhi.n	80035be <HAL_TIM_ConfigClockSource+0x170>
 80034c6:	2b60      	cmp	r3, #96	; 0x60
 80034c8:	d050      	beq.n	800356c <HAL_TIM_ConfigClockSource+0x11e>
 80034ca:	2b60      	cmp	r3, #96	; 0x60
 80034cc:	d877      	bhi.n	80035be <HAL_TIM_ConfigClockSource+0x170>
 80034ce:	2b50      	cmp	r3, #80	; 0x50
 80034d0:	d03c      	beq.n	800354c <HAL_TIM_ConfigClockSource+0xfe>
 80034d2:	2b50      	cmp	r3, #80	; 0x50
 80034d4:	d873      	bhi.n	80035be <HAL_TIM_ConfigClockSource+0x170>
 80034d6:	2b40      	cmp	r3, #64	; 0x40
 80034d8:	d058      	beq.n	800358c <HAL_TIM_ConfigClockSource+0x13e>
 80034da:	2b40      	cmp	r3, #64	; 0x40
 80034dc:	d86f      	bhi.n	80035be <HAL_TIM_ConfigClockSource+0x170>
 80034de:	2b30      	cmp	r3, #48	; 0x30
 80034e0:	d064      	beq.n	80035ac <HAL_TIM_ConfigClockSource+0x15e>
 80034e2:	2b30      	cmp	r3, #48	; 0x30
 80034e4:	d86b      	bhi.n	80035be <HAL_TIM_ConfigClockSource+0x170>
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	d060      	beq.n	80035ac <HAL_TIM_ConfigClockSource+0x15e>
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	d867      	bhi.n	80035be <HAL_TIM_ConfigClockSource+0x170>
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d05c      	beq.n	80035ac <HAL_TIM_ConfigClockSource+0x15e>
 80034f2:	2b10      	cmp	r3, #16
 80034f4:	d05a      	beq.n	80035ac <HAL_TIM_ConfigClockSource+0x15e>
 80034f6:	e062      	b.n	80035be <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	6899      	ldr	r1, [r3, #8]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f000 f97a 	bl	8003800 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800351a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	609a      	str	r2, [r3, #8]
      break;
 8003524:	e04f      	b.n	80035c6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	6899      	ldr	r1, [r3, #8]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f000 f963 	bl	8003800 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003548:	609a      	str	r2, [r3, #8]
      break;
 800354a:	e03c      	b.n	80035c6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6818      	ldr	r0, [r3, #0]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	6859      	ldr	r1, [r3, #4]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	461a      	mov	r2, r3
 800355a:	f000 f8d7 	bl	800370c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2150      	movs	r1, #80	; 0x50
 8003564:	4618      	mov	r0, r3
 8003566:	f000 f930 	bl	80037ca <TIM_ITRx_SetConfig>
      break;
 800356a:	e02c      	b.n	80035c6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6818      	ldr	r0, [r3, #0]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	6859      	ldr	r1, [r3, #4]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	461a      	mov	r2, r3
 800357a:	f000 f8f6 	bl	800376a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2160      	movs	r1, #96	; 0x60
 8003584:	4618      	mov	r0, r3
 8003586:	f000 f920 	bl	80037ca <TIM_ITRx_SetConfig>
      break;
 800358a:	e01c      	b.n	80035c6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	6859      	ldr	r1, [r3, #4]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	461a      	mov	r2, r3
 800359a:	f000 f8b7 	bl	800370c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2140      	movs	r1, #64	; 0x40
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 f910 	bl	80037ca <TIM_ITRx_SetConfig>
      break;
 80035aa:	e00c      	b.n	80035c6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4619      	mov	r1, r3
 80035b6:	4610      	mov	r0, r2
 80035b8:	f000 f907 	bl	80037ca <TIM_ITRx_SetConfig>
      break;
 80035bc:	e003      	b.n	80035c6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	73fb      	strb	r3, [r7, #15]
      break;
 80035c2:	e000      	b.n	80035c6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80035c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a2e      	ldr	r2, [pc, #184]	; (80036fc <TIM_Base_SetConfig+0xcc>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d003      	beq.n	8003650 <TIM_Base_SetConfig+0x20>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364e:	d108      	bne.n	8003662 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	4313      	orrs	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a25      	ldr	r2, [pc, #148]	; (80036fc <TIM_Base_SetConfig+0xcc>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d00f      	beq.n	800368a <TIM_Base_SetConfig+0x5a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003670:	d00b      	beq.n	800368a <TIM_Base_SetConfig+0x5a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a22      	ldr	r2, [pc, #136]	; (8003700 <TIM_Base_SetConfig+0xd0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d007      	beq.n	800368a <TIM_Base_SetConfig+0x5a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a21      	ldr	r2, [pc, #132]	; (8003704 <TIM_Base_SetConfig+0xd4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d003      	beq.n	800368a <TIM_Base_SetConfig+0x5a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a20      	ldr	r2, [pc, #128]	; (8003708 <TIM_Base_SetConfig+0xd8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d108      	bne.n	800369c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	4313      	orrs	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a0e      	ldr	r2, [pc, #56]	; (80036fc <TIM_Base_SetConfig+0xcc>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00b      	beq.n	80036e0 <TIM_Base_SetConfig+0xb0>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a0d      	ldr	r2, [pc, #52]	; (8003700 <TIM_Base_SetConfig+0xd0>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d007      	beq.n	80036e0 <TIM_Base_SetConfig+0xb0>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a0c      	ldr	r2, [pc, #48]	; (8003704 <TIM_Base_SetConfig+0xd4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d003      	beq.n	80036e0 <TIM_Base_SetConfig+0xb0>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a0b      	ldr	r2, [pc, #44]	; (8003708 <TIM_Base_SetConfig+0xd8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d103      	bne.n	80036e8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	615a      	str	r2, [r3, #20]
}
 80036ee:	bf00      	nop
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	40012c00 	.word	0x40012c00
 8003700:	40014000 	.word	0x40014000
 8003704:	40014400 	.word	0x40014400
 8003708:	40014800 	.word	0x40014800

0800370c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	f023 0201 	bic.w	r2, r3, #1
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4313      	orrs	r3, r2
 8003740:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f023 030a 	bic.w	r3, r3, #10
 8003748:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	621a      	str	r2, [r3, #32]
}
 800375e:	bf00      	nop
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800376a:	b480      	push	{r7}
 800376c:	b087      	sub	sp, #28
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	f023 0210 	bic.w	r2, r3, #16
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003794:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	031b      	lsls	r3, r3, #12
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	4313      	orrs	r3, r2
 800379e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	621a      	str	r2, [r3, #32]
}
 80037be:	bf00      	nop
 80037c0:	371c      	adds	r7, #28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b085      	sub	sp, #20
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f043 0307 	orr.w	r3, r3, #7
 80037ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	609a      	str	r2, [r3, #8]
}
 80037f4:	bf00      	nop
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800381a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	021a      	lsls	r2, r3, #8
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	431a      	orrs	r2, r3
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4313      	orrs	r3, r2
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	609a      	str	r2, [r3, #8]
}
 8003834:	bf00      	nop
 8003836:	371c      	adds	r7, #28
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003854:	2302      	movs	r3, #2
 8003856:	e04f      	b.n	80038f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a21      	ldr	r2, [pc, #132]	; (8003904 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d108      	bne.n	8003894 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003888:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	4313      	orrs	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a14      	ldr	r2, [pc, #80]	; (8003904 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d009      	beq.n	80038cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c0:	d004      	beq.n	80038cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a10      	ldr	r2, [pc, #64]	; (8003908 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d10c      	bne.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	40012c00 	.word	0x40012c00
 8003908:	40014000 	.word	0x40014000

0800390c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003956:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800395a:	2b84      	cmp	r3, #132	; 0x84
 800395c:	d005      	beq.n	800396a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800395e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4413      	add	r3, r2
 8003966:	3303      	adds	r3, #3
 8003968:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800396a:	68fb      	ldr	r3, [r7, #12]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800397c:	f000 faec 	bl	8003f58 <vTaskStartScheduler>
  
  return osOK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	bd80      	pop	{r7, pc}

08003986 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003986:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003988:	b089      	sub	sp, #36	; 0x24
 800398a:	af04      	add	r7, sp, #16
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d020      	beq.n	80039da <osThreadCreate+0x54>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d01c      	beq.n	80039da <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685c      	ldr	r4, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681d      	ldr	r5, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691e      	ldr	r6, [r3, #16]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff ffc8 	bl	8003948 <makeFreeRtosPriority>
 80039b8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039c2:	9202      	str	r2, [sp, #8]
 80039c4:	9301      	str	r3, [sp, #4]
 80039c6:	9100      	str	r1, [sp, #0]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	4632      	mov	r2, r6
 80039cc:	4629      	mov	r1, r5
 80039ce:	4620      	mov	r0, r4
 80039d0:	f000 f8ed 	bl	8003bae <xTaskCreateStatic>
 80039d4:	4603      	mov	r3, r0
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	e01c      	b.n	8003a14 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685c      	ldr	r4, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039e6:	b29e      	uxth	r6, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff ffaa 	bl	8003948 <makeFreeRtosPriority>
 80039f4:	4602      	mov	r2, r0
 80039f6:	f107 030c 	add.w	r3, r7, #12
 80039fa:	9301      	str	r3, [sp, #4]
 80039fc:	9200      	str	r2, [sp, #0]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	4632      	mov	r2, r6
 8003a02:	4629      	mov	r1, r5
 8003a04:	4620      	mov	r0, r4
 8003a06:	f000 f92e 	bl	8003c66 <xTaskCreate>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d001      	beq.n	8003a14 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	e000      	b.n	8003a16 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003a14:	68fb      	ldr	r3, [r7, #12]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a1e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b084      	sub	sp, #16
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <osDelay+0x16>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	e000      	b.n	8003a36 <osDelay+0x18>
 8003a34:	2301      	movs	r3, #1
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fa5a 	bl	8003ef0 <vTaskDelay>
  
  return osOK;
 8003a3c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f103 0208 	add.w	r2, r3, #8
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a5e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f103 0208 	add.w	r2, r3, #8
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f103 0208 	add.w	r2, r3, #8
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	601a      	str	r2, [r3, #0]
}
 8003adc:	bf00      	nop
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afe:	d103      	bne.n	8003b08 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	e00c      	b.n	8003b22 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3308      	adds	r3, #8
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	e002      	b.n	8003b16 <vListInsert+0x2e>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d2f6      	bcs.n	8003b10 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	601a      	str	r2, [r3, #0]
}
 8003b4e:	bf00      	nop
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b085      	sub	sp, #20
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6892      	ldr	r2, [r2, #8]
 8003b70:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6852      	ldr	r2, [r2, #4]
 8003b7a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d103      	bne.n	8003b8e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	1e5a      	subs	r2, r3, #1
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b08e      	sub	sp, #56	; 0x38
 8003bb2:	af04      	add	r7, sp, #16
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	607a      	str	r2, [r7, #4]
 8003bba:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10a      	bne.n	8003bd8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003bd4:	bf00      	nop
 8003bd6:	e7fe      	b.n	8003bd6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10a      	bne.n	8003bf4 <xTaskCreateStatic+0x46>
	__asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	61fb      	str	r3, [r7, #28]
}
 8003bf0:	bf00      	nop
 8003bf2:	e7fe      	b.n	8003bf2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003bf4:	23b4      	movs	r3, #180	; 0xb4
 8003bf6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	2bb4      	cmp	r3, #180	; 0xb4
 8003bfc:	d00a      	beq.n	8003c14 <xTaskCreateStatic+0x66>
	__asm volatile
 8003bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c02:	f383 8811 	msr	BASEPRI, r3
 8003c06:	f3bf 8f6f 	isb	sy
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	61bb      	str	r3, [r7, #24]
}
 8003c10:	bf00      	nop
 8003c12:	e7fe      	b.n	8003c12 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d01e      	beq.n	8003c58 <xTaskCreateStatic+0xaa>
 8003c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01b      	beq.n	8003c58 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c28:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c32:	2300      	movs	r3, #0
 8003c34:	9303      	str	r3, [sp, #12]
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	9302      	str	r3, [sp, #8]
 8003c3a:	f107 0314 	add.w	r3, r7, #20
 8003c3e:	9301      	str	r3, [sp, #4]
 8003c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	68b9      	ldr	r1, [r7, #8]
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f850 	bl	8003cf0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c52:	f000 f8e3 	bl	8003e1c <prvAddNewTaskToReadyList>
 8003c56:	e001      	b.n	8003c5c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c5c:	697b      	ldr	r3, [r7, #20]
	}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3728      	adds	r7, #40	; 0x28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b08c      	sub	sp, #48	; 0x30
 8003c6a:	af04      	add	r7, sp, #16
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	603b      	str	r3, [r7, #0]
 8003c72:	4613      	mov	r3, r2
 8003c74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fef4 	bl	8004a68 <pvPortMalloc>
 8003c80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00e      	beq.n	8003ca6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003c88:	20b4      	movs	r0, #180	; 0xb4
 8003c8a:	f000 feed 	bl	8004a68 <pvPortMalloc>
 8003c8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	631a      	str	r2, [r3, #48]	; 0x30
 8003c9c:	e005      	b.n	8003caa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c9e:	6978      	ldr	r0, [r7, #20]
 8003ca0:	f000 ffa6 	bl	8004bf0 <vPortFree>
 8003ca4:	e001      	b.n	8003caa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d017      	beq.n	8003ce0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003cb8:	88fa      	ldrh	r2, [r7, #6]
 8003cba:	2300      	movs	r3, #0
 8003cbc:	9303      	str	r3, [sp, #12]
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	9302      	str	r3, [sp, #8]
 8003cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc4:	9301      	str	r3, [sp, #4]
 8003cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f80e 	bl	8003cf0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cd4:	69f8      	ldr	r0, [r7, #28]
 8003cd6:	f000 f8a1 	bl	8003e1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	e002      	b.n	8003ce6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ce6:	69bb      	ldr	r3, [r7, #24]
	}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3720      	adds	r7, #32
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
 8003cfc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	f023 0307 	bic.w	r3, r3, #7
 8003d16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d26:	f383 8811 	msr	BASEPRI, r3
 8003d2a:	f3bf 8f6f 	isb	sy
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	617b      	str	r3, [r7, #20]
}
 8003d34:	bf00      	nop
 8003d36:	e7fe      	b.n	8003d36 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61fb      	str	r3, [r7, #28]
 8003d3c:	e012      	b.n	8003d64 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	4413      	add	r3, r2
 8003d44:	7819      	ldrb	r1, [r3, #0]
 8003d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	3334      	adds	r3, #52	; 0x34
 8003d4e:	460a      	mov	r2, r1
 8003d50:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	4413      	add	r3, r2
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d006      	beq.n	8003d6c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	3301      	adds	r3, #1
 8003d62:	61fb      	str	r3, [r7, #28]
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	2b0f      	cmp	r3, #15
 8003d68:	d9e9      	bls.n	8003d3e <prvInitialiseNewTask+0x4e>
 8003d6a:	e000      	b.n	8003d6e <prvInitialiseNewTask+0x7e>
		{
			break;
 8003d6c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d78:	2b06      	cmp	r3, #6
 8003d7a:	d901      	bls.n	8003d80 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d7c:	2306      	movs	r3, #6
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d8a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8e:	2200      	movs	r2, #0
 8003d90:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d94:	3304      	adds	r3, #4
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff fe75 	bl	8003a86 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9e:	3318      	adds	r3, #24
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff fe70 	bl	8003a86 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003daa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dae:	f1c3 0207 	rsb	r2, r3, #7
 8003db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dce:	334c      	adds	r3, #76	; 0x4c
 8003dd0:	2260      	movs	r2, #96	; 0x60
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f001 f847 	bl	8004e68 <memset>
 8003dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ddc:	4a0c      	ldr	r2, [pc, #48]	; (8003e10 <prvInitialiseNewTask+0x120>)
 8003dde:	651a      	str	r2, [r3, #80]	; 0x50
 8003de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de2:	4a0c      	ldr	r2, [pc, #48]	; (8003e14 <prvInitialiseNewTask+0x124>)
 8003de4:	655a      	str	r2, [r3, #84]	; 0x54
 8003de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de8:	4a0b      	ldr	r2, [pc, #44]	; (8003e18 <prvInitialiseNewTask+0x128>)
 8003dea:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	68f9      	ldr	r1, [r7, #12]
 8003df0:	69b8      	ldr	r0, [r7, #24]
 8003df2:	f000 fc2b 	bl	800464c <pxPortInitialiseStack>
 8003df6:	4602      	mov	r2, r0
 8003df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e08:	bf00      	nop
 8003e0a:	3720      	adds	r7, #32
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	080050ec 	.word	0x080050ec
 8003e14:	0800510c 	.word	0x0800510c
 8003e18:	080050cc 	.word	0x080050cc

08003e1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e24:	f000 fd3e 	bl	80048a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e28:	4b2a      	ldr	r3, [pc, #168]	; (8003ed4 <prvAddNewTaskToReadyList+0xb8>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	4a29      	ldr	r2, [pc, #164]	; (8003ed4 <prvAddNewTaskToReadyList+0xb8>)
 8003e30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e32:	4b29      	ldr	r3, [pc, #164]	; (8003ed8 <prvAddNewTaskToReadyList+0xbc>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d109      	bne.n	8003e4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e3a:	4a27      	ldr	r2, [pc, #156]	; (8003ed8 <prvAddNewTaskToReadyList+0xbc>)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e40:	4b24      	ldr	r3, [pc, #144]	; (8003ed4 <prvAddNewTaskToReadyList+0xb8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d110      	bne.n	8003e6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e48:	f000 fad2 	bl	80043f0 <prvInitialiseTaskLists>
 8003e4c:	e00d      	b.n	8003e6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e4e:	4b23      	ldr	r3, [pc, #140]	; (8003edc <prvAddNewTaskToReadyList+0xc0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d109      	bne.n	8003e6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e56:	4b20      	ldr	r3, [pc, #128]	; (8003ed8 <prvAddNewTaskToReadyList+0xbc>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d802      	bhi.n	8003e6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e64:	4a1c      	ldr	r2, [pc, #112]	; (8003ed8 <prvAddNewTaskToReadyList+0xbc>)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ee0 <prvAddNewTaskToReadyList+0xc4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	4a1b      	ldr	r2, [pc, #108]	; (8003ee0 <prvAddNewTaskToReadyList+0xc4>)
 8003e72:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	2201      	movs	r2, #1
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <prvAddNewTaskToReadyList+0xc8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	4a18      	ldr	r2, [pc, #96]	; (8003ee4 <prvAddNewTaskToReadyList+0xc8>)
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4a15      	ldr	r2, [pc, #84]	; (8003ee8 <prvAddNewTaskToReadyList+0xcc>)
 8003e94:	441a      	add	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	f7ff fdff 	bl	8003aa0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ea2:	f000 fd2f 	bl	8004904 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ea6:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <prvAddNewTaskToReadyList+0xc0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00e      	beq.n	8003ecc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003eae:	4b0a      	ldr	r3, [pc, #40]	; (8003ed8 <prvAddNewTaskToReadyList+0xbc>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d207      	bcs.n	8003ecc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <prvAddNewTaskToReadyList+0xd0>)
 8003ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	20000540 	.word	0x20000540
 8003ed8:	20000440 	.word	0x20000440
 8003edc:	2000054c 	.word	0x2000054c
 8003ee0:	2000055c 	.word	0x2000055c
 8003ee4:	20000548 	.word	0x20000548
 8003ee8:	20000444 	.word	0x20000444
 8003eec:	e000ed04 	.word	0xe000ed04

08003ef0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d017      	beq.n	8003f32 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f02:	4b13      	ldr	r3, [pc, #76]	; (8003f50 <vTaskDelay+0x60>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <vTaskDelay+0x30>
	__asm volatile
 8003f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	60bb      	str	r3, [r7, #8]
}
 8003f1c:	bf00      	nop
 8003f1e:	e7fe      	b.n	8003f1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003f20:	f000 f884 	bl	800402c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f24:	2100      	movs	r1, #0
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 fb2a 	bl	8004580 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f2c:	f000 f88c 	bl	8004048 <xTaskResumeAll>
 8003f30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d107      	bne.n	8003f48 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <vTaskDelay+0x64>)
 8003f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f48:	bf00      	nop
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	20000568 	.word	0x20000568
 8003f54:	e000ed04 	.word	0xe000ed04

08003f58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08a      	sub	sp, #40	; 0x28
 8003f5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f66:	463a      	mov	r2, r7
 8003f68:	1d39      	adds	r1, r7, #4
 8003f6a:	f107 0308 	add.w	r3, r7, #8
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fc f92e 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f74:	6839      	ldr	r1, [r7, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	9202      	str	r2, [sp, #8]
 8003f7c:	9301      	str	r3, [sp, #4]
 8003f7e:	2300      	movs	r3, #0
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	2300      	movs	r3, #0
 8003f84:	460a      	mov	r2, r1
 8003f86:	4921      	ldr	r1, [pc, #132]	; (800400c <vTaskStartScheduler+0xb4>)
 8003f88:	4821      	ldr	r0, [pc, #132]	; (8004010 <vTaskStartScheduler+0xb8>)
 8003f8a:	f7ff fe10 	bl	8003bae <xTaskCreateStatic>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	4a20      	ldr	r2, [pc, #128]	; (8004014 <vTaskStartScheduler+0xbc>)
 8003f92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f94:	4b1f      	ldr	r3, [pc, #124]	; (8004014 <vTaskStartScheduler+0xbc>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	617b      	str	r3, [r7, #20]
 8003fa0:	e001      	b.n	8003fa6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d11b      	bne.n	8003fe4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	613b      	str	r3, [r7, #16]
}
 8003fbe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003fc0:	4b15      	ldr	r3, [pc, #84]	; (8004018 <vTaskStartScheduler+0xc0>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	334c      	adds	r3, #76	; 0x4c
 8003fc6:	4a15      	ldr	r2, [pc, #84]	; (800401c <vTaskStartScheduler+0xc4>)
 8003fc8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003fca:	4b15      	ldr	r3, [pc, #84]	; (8004020 <vTaskStartScheduler+0xc8>)
 8003fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003fd2:	4b14      	ldr	r3, [pc, #80]	; (8004024 <vTaskStartScheduler+0xcc>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003fd8:	4b13      	ldr	r3, [pc, #76]	; (8004028 <vTaskStartScheduler+0xd0>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003fde:	f000 fbbf 	bl	8004760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003fe2:	e00e      	b.n	8004002 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fea:	d10a      	bne.n	8004002 <vTaskStartScheduler+0xaa>
	__asm volatile
 8003fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	60fb      	str	r3, [r7, #12]
}
 8003ffe:	bf00      	nop
 8004000:	e7fe      	b.n	8004000 <vTaskStartScheduler+0xa8>
}
 8004002:	bf00      	nop
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	0800508c 	.word	0x0800508c
 8004010:	080043c1 	.word	0x080043c1
 8004014:	20000564 	.word	0x20000564
 8004018:	20000440 	.word	0x20000440
 800401c:	20000010 	.word	0x20000010
 8004020:	20000560 	.word	0x20000560
 8004024:	2000054c 	.word	0x2000054c
 8004028:	20000544 	.word	0x20000544

0800402c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004030:	4b04      	ldr	r3, [pc, #16]	; (8004044 <vTaskSuspendAll+0x18>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3301      	adds	r3, #1
 8004036:	4a03      	ldr	r2, [pc, #12]	; (8004044 <vTaskSuspendAll+0x18>)
 8004038:	6013      	str	r3, [r2, #0]
}
 800403a:	bf00      	nop
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	20000568 	.word	0x20000568

08004048 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004052:	2300      	movs	r3, #0
 8004054:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004056:	4b41      	ldr	r3, [pc, #260]	; (800415c <xTaskResumeAll+0x114>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10a      	bne.n	8004074 <xTaskResumeAll+0x2c>
	__asm volatile
 800405e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	603b      	str	r3, [r7, #0]
}
 8004070:	bf00      	nop
 8004072:	e7fe      	b.n	8004072 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004074:	f000 fc16 	bl	80048a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004078:	4b38      	ldr	r3, [pc, #224]	; (800415c <xTaskResumeAll+0x114>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3b01      	subs	r3, #1
 800407e:	4a37      	ldr	r2, [pc, #220]	; (800415c <xTaskResumeAll+0x114>)
 8004080:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004082:	4b36      	ldr	r3, [pc, #216]	; (800415c <xTaskResumeAll+0x114>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d161      	bne.n	800414e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800408a:	4b35      	ldr	r3, [pc, #212]	; (8004160 <xTaskResumeAll+0x118>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d05d      	beq.n	800414e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004092:	e02e      	b.n	80040f2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004094:	4b33      	ldr	r3, [pc, #204]	; (8004164 <xTaskResumeAll+0x11c>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3318      	adds	r3, #24
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff fd5a 	bl	8003b5a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3304      	adds	r3, #4
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff fd55 	bl	8003b5a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	2201      	movs	r2, #1
 80040b6:	409a      	lsls	r2, r3
 80040b8:	4b2b      	ldr	r3, [pc, #172]	; (8004168 <xTaskResumeAll+0x120>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4313      	orrs	r3, r2
 80040be:	4a2a      	ldr	r2, [pc, #168]	; (8004168 <xTaskResumeAll+0x120>)
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c6:	4613      	mov	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4a27      	ldr	r2, [pc, #156]	; (800416c <xTaskResumeAll+0x124>)
 80040d0:	441a      	add	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	3304      	adds	r3, #4
 80040d6:	4619      	mov	r1, r3
 80040d8:	4610      	mov	r0, r2
 80040da:	f7ff fce1 	bl	8003aa0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e2:	4b23      	ldr	r3, [pc, #140]	; (8004170 <xTaskResumeAll+0x128>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d302      	bcc.n	80040f2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80040ec:	4b21      	ldr	r3, [pc, #132]	; (8004174 <xTaskResumeAll+0x12c>)
 80040ee:	2201      	movs	r2, #1
 80040f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040f2:	4b1c      	ldr	r3, [pc, #112]	; (8004164 <xTaskResumeAll+0x11c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1cc      	bne.n	8004094 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004100:	f000 fa18 	bl	8004534 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004104:	4b1c      	ldr	r3, [pc, #112]	; (8004178 <xTaskResumeAll+0x130>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d010      	beq.n	8004132 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004110:	f000 f836 	bl	8004180 <xTaskIncrementTick>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800411a:	4b16      	ldr	r3, [pc, #88]	; (8004174 <xTaskResumeAll+0x12c>)
 800411c:	2201      	movs	r2, #1
 800411e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3b01      	subs	r3, #1
 8004124:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1f1      	bne.n	8004110 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800412c:	4b12      	ldr	r3, [pc, #72]	; (8004178 <xTaskResumeAll+0x130>)
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004132:	4b10      	ldr	r3, [pc, #64]	; (8004174 <xTaskResumeAll+0x12c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d009      	beq.n	800414e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800413a:	2301      	movs	r3, #1
 800413c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800413e:	4b0f      	ldr	r3, [pc, #60]	; (800417c <xTaskResumeAll+0x134>)
 8004140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	f3bf 8f4f 	dsb	sy
 800414a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800414e:	f000 fbd9 	bl	8004904 <vPortExitCritical>

	return xAlreadyYielded;
 8004152:	68bb      	ldr	r3, [r7, #8]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	20000568 	.word	0x20000568
 8004160:	20000540 	.word	0x20000540
 8004164:	20000500 	.word	0x20000500
 8004168:	20000548 	.word	0x20000548
 800416c:	20000444 	.word	0x20000444
 8004170:	20000440 	.word	0x20000440
 8004174:	20000554 	.word	0x20000554
 8004178:	20000550 	.word	0x20000550
 800417c:	e000ed04 	.word	0xe000ed04

08004180 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800418a:	4b51      	ldr	r3, [pc, #324]	; (80042d0 <xTaskIncrementTick+0x150>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	f040 808d 	bne.w	80042ae <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004194:	4b4f      	ldr	r3, [pc, #316]	; (80042d4 <xTaskIncrementTick+0x154>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3301      	adds	r3, #1
 800419a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800419c:	4a4d      	ldr	r2, [pc, #308]	; (80042d4 <xTaskIncrementTick+0x154>)
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d120      	bne.n	80041ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80041a8:	4b4b      	ldr	r3, [pc, #300]	; (80042d8 <xTaskIncrementTick+0x158>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80041b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	603b      	str	r3, [r7, #0]
}
 80041c4:	bf00      	nop
 80041c6:	e7fe      	b.n	80041c6 <xTaskIncrementTick+0x46>
 80041c8:	4b43      	ldr	r3, [pc, #268]	; (80042d8 <xTaskIncrementTick+0x158>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	4b43      	ldr	r3, [pc, #268]	; (80042dc <xTaskIncrementTick+0x15c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a41      	ldr	r2, [pc, #260]	; (80042d8 <xTaskIncrementTick+0x158>)
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	4a41      	ldr	r2, [pc, #260]	; (80042dc <xTaskIncrementTick+0x15c>)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	4b40      	ldr	r3, [pc, #256]	; (80042e0 <xTaskIncrementTick+0x160>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3301      	adds	r3, #1
 80041e2:	4a3f      	ldr	r2, [pc, #252]	; (80042e0 <xTaskIncrementTick+0x160>)
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	f000 f9a5 	bl	8004534 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80041ea:	4b3e      	ldr	r3, [pc, #248]	; (80042e4 <xTaskIncrementTick+0x164>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d34d      	bcc.n	8004290 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041f4:	4b38      	ldr	r3, [pc, #224]	; (80042d8 <xTaskIncrementTick+0x158>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <xTaskIncrementTick+0x82>
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <xTaskIncrementTick+0x84>
 8004202:	2300      	movs	r3, #0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d004      	beq.n	8004212 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004208:	4b36      	ldr	r3, [pc, #216]	; (80042e4 <xTaskIncrementTick+0x164>)
 800420a:	f04f 32ff 	mov.w	r2, #4294967295
 800420e:	601a      	str	r2, [r3, #0]
					break;
 8004210:	e03e      	b.n	8004290 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004212:	4b31      	ldr	r3, [pc, #196]	; (80042d8 <xTaskIncrementTick+0x158>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	429a      	cmp	r2, r3
 8004228:	d203      	bcs.n	8004232 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800422a:	4a2e      	ldr	r2, [pc, #184]	; (80042e4 <xTaskIncrementTick+0x164>)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6013      	str	r3, [r2, #0]
						break;
 8004230:	e02e      	b.n	8004290 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	3304      	adds	r3, #4
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff fc8f 	bl	8003b5a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004240:	2b00      	cmp	r3, #0
 8004242:	d004      	beq.n	800424e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	3318      	adds	r3, #24
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff fc86 	bl	8003b5a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004252:	2201      	movs	r2, #1
 8004254:	409a      	lsls	r2, r3
 8004256:	4b24      	ldr	r3, [pc, #144]	; (80042e8 <xTaskIncrementTick+0x168>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4313      	orrs	r3, r2
 800425c:	4a22      	ldr	r2, [pc, #136]	; (80042e8 <xTaskIncrementTick+0x168>)
 800425e:	6013      	str	r3, [r2, #0]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4a1f      	ldr	r2, [pc, #124]	; (80042ec <xTaskIncrementTick+0x16c>)
 800426e:	441a      	add	r2, r3
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	3304      	adds	r3, #4
 8004274:	4619      	mov	r1, r3
 8004276:	4610      	mov	r0, r2
 8004278:	f7ff fc12 	bl	8003aa0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004280:	4b1b      	ldr	r3, [pc, #108]	; (80042f0 <xTaskIncrementTick+0x170>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004286:	429a      	cmp	r2, r3
 8004288:	d3b4      	bcc.n	80041f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800428a:	2301      	movs	r3, #1
 800428c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800428e:	e7b1      	b.n	80041f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004290:	4b17      	ldr	r3, [pc, #92]	; (80042f0 <xTaskIncrementTick+0x170>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004296:	4915      	ldr	r1, [pc, #84]	; (80042ec <xTaskIncrementTick+0x16c>)
 8004298:	4613      	mov	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d907      	bls.n	80042b8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80042a8:	2301      	movs	r3, #1
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	e004      	b.n	80042b8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80042ae:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <xTaskIncrementTick+0x174>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3301      	adds	r3, #1
 80042b4:	4a0f      	ldr	r2, [pc, #60]	; (80042f4 <xTaskIncrementTick+0x174>)
 80042b6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80042b8:	4b0f      	ldr	r3, [pc, #60]	; (80042f8 <xTaskIncrementTick+0x178>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80042c0:	2301      	movs	r3, #1
 80042c2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80042c4:	697b      	ldr	r3, [r7, #20]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	20000568 	.word	0x20000568
 80042d4:	20000544 	.word	0x20000544
 80042d8:	200004f8 	.word	0x200004f8
 80042dc:	200004fc 	.word	0x200004fc
 80042e0:	20000558 	.word	0x20000558
 80042e4:	20000560 	.word	0x20000560
 80042e8:	20000548 	.word	0x20000548
 80042ec:	20000444 	.word	0x20000444
 80042f0:	20000440 	.word	0x20000440
 80042f4:	20000550 	.word	0x20000550
 80042f8:	20000554 	.word	0x20000554

080042fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004302:	4b29      	ldr	r3, [pc, #164]	; (80043a8 <vTaskSwitchContext+0xac>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800430a:	4b28      	ldr	r3, [pc, #160]	; (80043ac <vTaskSwitchContext+0xb0>)
 800430c:	2201      	movs	r2, #1
 800430e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004310:	e044      	b.n	800439c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004312:	4b26      	ldr	r3, [pc, #152]	; (80043ac <vTaskSwitchContext+0xb0>)
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004318:	4b25      	ldr	r3, [pc, #148]	; (80043b0 <vTaskSwitchContext+0xb4>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	fab3 f383 	clz	r3, r3
 8004324:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004326:	7afb      	ldrb	r3, [r7, #11]
 8004328:	f1c3 031f 	rsb	r3, r3, #31
 800432c:	617b      	str	r3, [r7, #20]
 800432e:	4921      	ldr	r1, [pc, #132]	; (80043b4 <vTaskSwitchContext+0xb8>)
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	4613      	mov	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	440b      	add	r3, r1
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10a      	bne.n	8004358 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	607b      	str	r3, [r7, #4]
}
 8004354:	bf00      	nop
 8004356:	e7fe      	b.n	8004356 <vTaskSwitchContext+0x5a>
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	4613      	mov	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4a14      	ldr	r2, [pc, #80]	; (80043b4 <vTaskSwitchContext+0xb8>)
 8004364:	4413      	add	r3, r2
 8004366:	613b      	str	r3, [r7, #16]
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	605a      	str	r2, [r3, #4]
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	3308      	adds	r3, #8
 800437a:	429a      	cmp	r2, r3
 800437c:	d104      	bne.n	8004388 <vTaskSwitchContext+0x8c>
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	605a      	str	r2, [r3, #4]
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	4a0a      	ldr	r2, [pc, #40]	; (80043b8 <vTaskSwitchContext+0xbc>)
 8004390:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004392:	4b09      	ldr	r3, [pc, #36]	; (80043b8 <vTaskSwitchContext+0xbc>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	334c      	adds	r3, #76	; 0x4c
 8004398:	4a08      	ldr	r2, [pc, #32]	; (80043bc <vTaskSwitchContext+0xc0>)
 800439a:	6013      	str	r3, [r2, #0]
}
 800439c:	bf00      	nop
 800439e:	371c      	adds	r7, #28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	20000568 	.word	0x20000568
 80043ac:	20000554 	.word	0x20000554
 80043b0:	20000548 	.word	0x20000548
 80043b4:	20000444 	.word	0x20000444
 80043b8:	20000440 	.word	0x20000440
 80043bc:	20000010 	.word	0x20000010

080043c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043c8:	f000 f852 	bl	8004470 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043cc:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <prvIdleTask+0x28>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d9f9      	bls.n	80043c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80043d4:	4b05      	ldr	r3, [pc, #20]	; (80043ec <prvIdleTask+0x2c>)
 80043d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043e4:	e7f0      	b.n	80043c8 <prvIdleTask+0x8>
 80043e6:	bf00      	nop
 80043e8:	20000444 	.word	0x20000444
 80043ec:	e000ed04 	.word	0xe000ed04

080043f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043f6:	2300      	movs	r3, #0
 80043f8:	607b      	str	r3, [r7, #4]
 80043fa:	e00c      	b.n	8004416 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4a12      	ldr	r2, [pc, #72]	; (8004450 <prvInitialiseTaskLists+0x60>)
 8004408:	4413      	add	r3, r2
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff fb1b 	bl	8003a46 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3301      	adds	r3, #1
 8004414:	607b      	str	r3, [r7, #4]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b06      	cmp	r3, #6
 800441a:	d9ef      	bls.n	80043fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800441c:	480d      	ldr	r0, [pc, #52]	; (8004454 <prvInitialiseTaskLists+0x64>)
 800441e:	f7ff fb12 	bl	8003a46 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004422:	480d      	ldr	r0, [pc, #52]	; (8004458 <prvInitialiseTaskLists+0x68>)
 8004424:	f7ff fb0f 	bl	8003a46 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004428:	480c      	ldr	r0, [pc, #48]	; (800445c <prvInitialiseTaskLists+0x6c>)
 800442a:	f7ff fb0c 	bl	8003a46 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800442e:	480c      	ldr	r0, [pc, #48]	; (8004460 <prvInitialiseTaskLists+0x70>)
 8004430:	f7ff fb09 	bl	8003a46 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004434:	480b      	ldr	r0, [pc, #44]	; (8004464 <prvInitialiseTaskLists+0x74>)
 8004436:	f7ff fb06 	bl	8003a46 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800443a:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <prvInitialiseTaskLists+0x78>)
 800443c:	4a05      	ldr	r2, [pc, #20]	; (8004454 <prvInitialiseTaskLists+0x64>)
 800443e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004440:	4b0a      	ldr	r3, [pc, #40]	; (800446c <prvInitialiseTaskLists+0x7c>)
 8004442:	4a05      	ldr	r2, [pc, #20]	; (8004458 <prvInitialiseTaskLists+0x68>)
 8004444:	601a      	str	r2, [r3, #0]
}
 8004446:	bf00      	nop
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	20000444 	.word	0x20000444
 8004454:	200004d0 	.word	0x200004d0
 8004458:	200004e4 	.word	0x200004e4
 800445c:	20000500 	.word	0x20000500
 8004460:	20000514 	.word	0x20000514
 8004464:	2000052c 	.word	0x2000052c
 8004468:	200004f8 	.word	0x200004f8
 800446c:	200004fc 	.word	0x200004fc

08004470 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004476:	e019      	b.n	80044ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004478:	f000 fa14 	bl	80048a4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800447c:	4b10      	ldr	r3, [pc, #64]	; (80044c0 <prvCheckTasksWaitingTermination+0x50>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3304      	adds	r3, #4
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff fb66 	bl	8003b5a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800448e:	4b0d      	ldr	r3, [pc, #52]	; (80044c4 <prvCheckTasksWaitingTermination+0x54>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3b01      	subs	r3, #1
 8004494:	4a0b      	ldr	r2, [pc, #44]	; (80044c4 <prvCheckTasksWaitingTermination+0x54>)
 8004496:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004498:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <prvCheckTasksWaitingTermination+0x58>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3b01      	subs	r3, #1
 800449e:	4a0a      	ldr	r2, [pc, #40]	; (80044c8 <prvCheckTasksWaitingTermination+0x58>)
 80044a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044a2:	f000 fa2f 	bl	8004904 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f810 	bl	80044cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044ac:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <prvCheckTasksWaitingTermination+0x58>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e1      	bne.n	8004478 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044b4:	bf00      	nop
 80044b6:	bf00      	nop
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20000514 	.word	0x20000514
 80044c4:	20000540 	.word	0x20000540
 80044c8:	20000528 	.word	0x20000528

080044cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	334c      	adds	r3, #76	; 0x4c
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fcdb 	bl	8004e94 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d108      	bne.n	80044fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 fb7f 	bl	8004bf0 <vPortFree>
				vPortFree( pxTCB );
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fb7c 	bl	8004bf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044f8:	e018      	b.n	800452c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004500:	2b01      	cmp	r3, #1
 8004502:	d103      	bne.n	800450c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 fb73 	bl	8004bf0 <vPortFree>
	}
 800450a:	e00f      	b.n	800452c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004512:	2b02      	cmp	r3, #2
 8004514:	d00a      	beq.n	800452c <prvDeleteTCB+0x60>
	__asm volatile
 8004516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451a:	f383 8811 	msr	BASEPRI, r3
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	60fb      	str	r3, [r7, #12]
}
 8004528:	bf00      	nop
 800452a:	e7fe      	b.n	800452a <prvDeleteTCB+0x5e>
	}
 800452c:	bf00      	nop
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800453a:	4b0f      	ldr	r3, [pc, #60]	; (8004578 <prvResetNextTaskUnblockTime+0x44>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <prvResetNextTaskUnblockTime+0x14>
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <prvResetNextTaskUnblockTime+0x16>
 8004548:	2300      	movs	r3, #0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d004      	beq.n	8004558 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800454e:	4b0b      	ldr	r3, [pc, #44]	; (800457c <prvResetNextTaskUnblockTime+0x48>)
 8004550:	f04f 32ff 	mov.w	r2, #4294967295
 8004554:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004556:	e008      	b.n	800456a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004558:	4b07      	ldr	r3, [pc, #28]	; (8004578 <prvResetNextTaskUnblockTime+0x44>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	4a05      	ldr	r2, [pc, #20]	; (800457c <prvResetNextTaskUnblockTime+0x48>)
 8004568:	6013      	str	r3, [r2, #0]
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	200004f8 	.word	0x200004f8
 800457c:	20000560 	.word	0x20000560

08004580 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800458a:	4b29      	ldr	r3, [pc, #164]	; (8004630 <prvAddCurrentTaskToDelayedList+0xb0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004590:	4b28      	ldr	r3, [pc, #160]	; (8004634 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	3304      	adds	r3, #4
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff fadf 	bl	8003b5a <uxListRemove>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10b      	bne.n	80045ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80045a2:	4b24      	ldr	r3, [pc, #144]	; (8004634 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	2201      	movs	r2, #1
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	43da      	mvns	r2, r3
 80045b0:	4b21      	ldr	r3, [pc, #132]	; (8004638 <prvAddCurrentTaskToDelayedList+0xb8>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4013      	ands	r3, r2
 80045b6:	4a20      	ldr	r2, [pc, #128]	; (8004638 <prvAddCurrentTaskToDelayedList+0xb8>)
 80045b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c0:	d10a      	bne.n	80045d8 <prvAddCurrentTaskToDelayedList+0x58>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d007      	beq.n	80045d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045c8:	4b1a      	ldr	r3, [pc, #104]	; (8004634 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3304      	adds	r3, #4
 80045ce:	4619      	mov	r1, r3
 80045d0:	481a      	ldr	r0, [pc, #104]	; (800463c <prvAddCurrentTaskToDelayedList+0xbc>)
 80045d2:	f7ff fa65 	bl	8003aa0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045d6:	e026      	b.n	8004626 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4413      	add	r3, r2
 80045de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045e0:	4b14      	ldr	r3, [pc, #80]	; (8004634 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d209      	bcs.n	8004604 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045f0:	4b13      	ldr	r3, [pc, #76]	; (8004640 <prvAddCurrentTaskToDelayedList+0xc0>)
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	4b0f      	ldr	r3, [pc, #60]	; (8004634 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3304      	adds	r3, #4
 80045fa:	4619      	mov	r1, r3
 80045fc:	4610      	mov	r0, r2
 80045fe:	f7ff fa73 	bl	8003ae8 <vListInsert>
}
 8004602:	e010      	b.n	8004626 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004604:	4b0f      	ldr	r3, [pc, #60]	; (8004644 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	4b0a      	ldr	r3, [pc, #40]	; (8004634 <prvAddCurrentTaskToDelayedList+0xb4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3304      	adds	r3, #4
 800460e:	4619      	mov	r1, r3
 8004610:	4610      	mov	r0, r2
 8004612:	f7ff fa69 	bl	8003ae8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004616:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	429a      	cmp	r2, r3
 800461e:	d202      	bcs.n	8004626 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004620:	4a09      	ldr	r2, [pc, #36]	; (8004648 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	6013      	str	r3, [r2, #0]
}
 8004626:	bf00      	nop
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	20000544 	.word	0x20000544
 8004634:	20000440 	.word	0x20000440
 8004638:	20000548 	.word	0x20000548
 800463c:	2000052c 	.word	0x2000052c
 8004640:	200004fc 	.word	0x200004fc
 8004644:	200004f8 	.word	0x200004f8
 8004648:	20000560 	.word	0x20000560

0800464c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	3b04      	subs	r3, #4
 800465c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004664:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	3b04      	subs	r3, #4
 800466a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f023 0201 	bic.w	r2, r3, #1
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	3b04      	subs	r3, #4
 800467a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800467c:	4a0c      	ldr	r2, [pc, #48]	; (80046b0 <pxPortInitialiseStack+0x64>)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	3b14      	subs	r3, #20
 8004686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	3b04      	subs	r3, #4
 8004692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f06f 0202 	mvn.w	r2, #2
 800469a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	3b20      	subs	r3, #32
 80046a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046a2:	68fb      	ldr	r3, [r7, #12]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	080046b5 	.word	0x080046b5

080046b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80046ba:	2300      	movs	r3, #0
 80046bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046be:	4b12      	ldr	r3, [pc, #72]	; (8004708 <prvTaskExitError+0x54>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c6:	d00a      	beq.n	80046de <prvTaskExitError+0x2a>
	__asm volatile
 80046c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046cc:	f383 8811 	msr	BASEPRI, r3
 80046d0:	f3bf 8f6f 	isb	sy
 80046d4:	f3bf 8f4f 	dsb	sy
 80046d8:	60fb      	str	r3, [r7, #12]
}
 80046da:	bf00      	nop
 80046dc:	e7fe      	b.n	80046dc <prvTaskExitError+0x28>
	__asm volatile
 80046de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	60bb      	str	r3, [r7, #8]
}
 80046f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80046f2:	bf00      	nop
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0fc      	beq.n	80046f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046fa:	bf00      	nop
 80046fc:	bf00      	nop
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	2000000c 	.word	0x2000000c
 800470c:	00000000 	.word	0x00000000

08004710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004710:	4b07      	ldr	r3, [pc, #28]	; (8004730 <pxCurrentTCBConst2>)
 8004712:	6819      	ldr	r1, [r3, #0]
 8004714:	6808      	ldr	r0, [r1, #0]
 8004716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800471a:	f380 8809 	msr	PSP, r0
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f04f 0000 	mov.w	r0, #0
 8004726:	f380 8811 	msr	BASEPRI, r0
 800472a:	4770      	bx	lr
 800472c:	f3af 8000 	nop.w

08004730 <pxCurrentTCBConst2>:
 8004730:	20000440 	.word	0x20000440
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop

08004738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004738:	4808      	ldr	r0, [pc, #32]	; (800475c <prvPortStartFirstTask+0x24>)
 800473a:	6800      	ldr	r0, [r0, #0]
 800473c:	6800      	ldr	r0, [r0, #0]
 800473e:	f380 8808 	msr	MSP, r0
 8004742:	f04f 0000 	mov.w	r0, #0
 8004746:	f380 8814 	msr	CONTROL, r0
 800474a:	b662      	cpsie	i
 800474c:	b661      	cpsie	f
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	df00      	svc	0
 8004758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800475a:	bf00      	nop
 800475c:	e000ed08 	.word	0xe000ed08

08004760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004766:	4b46      	ldr	r3, [pc, #280]	; (8004880 <xPortStartScheduler+0x120>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a46      	ldr	r2, [pc, #280]	; (8004884 <xPortStartScheduler+0x124>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d10a      	bne.n	8004786 <xPortStartScheduler+0x26>
	__asm volatile
 8004770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	613b      	str	r3, [r7, #16]
}
 8004782:	bf00      	nop
 8004784:	e7fe      	b.n	8004784 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004786:	4b3e      	ldr	r3, [pc, #248]	; (8004880 <xPortStartScheduler+0x120>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a3f      	ldr	r2, [pc, #252]	; (8004888 <xPortStartScheduler+0x128>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d10a      	bne.n	80047a6 <xPortStartScheduler+0x46>
	__asm volatile
 8004790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	60fb      	str	r3, [r7, #12]
}
 80047a2:	bf00      	nop
 80047a4:	e7fe      	b.n	80047a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047a6:	4b39      	ldr	r3, [pc, #228]	; (800488c <xPortStartScheduler+0x12c>)
 80047a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	22ff      	movs	r2, #255	; 0xff
 80047b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	4b31      	ldr	r3, [pc, #196]	; (8004890 <xPortStartScheduler+0x130>)
 80047cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047ce:	4b31      	ldr	r3, [pc, #196]	; (8004894 <xPortStartScheduler+0x134>)
 80047d0:	2207      	movs	r2, #7
 80047d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047d4:	e009      	b.n	80047ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80047d6:	4b2f      	ldr	r3, [pc, #188]	; (8004894 <xPortStartScheduler+0x134>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	3b01      	subs	r3, #1
 80047dc:	4a2d      	ldr	r2, [pc, #180]	; (8004894 <xPortStartScheduler+0x134>)
 80047de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047e0:	78fb      	ldrb	r3, [r7, #3]
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047ea:	78fb      	ldrb	r3, [r7, #3]
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f2:	2b80      	cmp	r3, #128	; 0x80
 80047f4:	d0ef      	beq.n	80047d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047f6:	4b27      	ldr	r3, [pc, #156]	; (8004894 <xPortStartScheduler+0x134>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f1c3 0307 	rsb	r3, r3, #7
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d00a      	beq.n	8004818 <xPortStartScheduler+0xb8>
	__asm volatile
 8004802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	60bb      	str	r3, [r7, #8]
}
 8004814:	bf00      	nop
 8004816:	e7fe      	b.n	8004816 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004818:	4b1e      	ldr	r3, [pc, #120]	; (8004894 <xPortStartScheduler+0x134>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	021b      	lsls	r3, r3, #8
 800481e:	4a1d      	ldr	r2, [pc, #116]	; (8004894 <xPortStartScheduler+0x134>)
 8004820:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004822:	4b1c      	ldr	r3, [pc, #112]	; (8004894 <xPortStartScheduler+0x134>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800482a:	4a1a      	ldr	r2, [pc, #104]	; (8004894 <xPortStartScheduler+0x134>)
 800482c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	b2da      	uxtb	r2, r3
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004836:	4b18      	ldr	r3, [pc, #96]	; (8004898 <xPortStartScheduler+0x138>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a17      	ldr	r2, [pc, #92]	; (8004898 <xPortStartScheduler+0x138>)
 800483c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004842:	4b15      	ldr	r3, [pc, #84]	; (8004898 <xPortStartScheduler+0x138>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a14      	ldr	r2, [pc, #80]	; (8004898 <xPortStartScheduler+0x138>)
 8004848:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800484c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800484e:	f000 f8dd 	bl	8004a0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004852:	4b12      	ldr	r3, [pc, #72]	; (800489c <xPortStartScheduler+0x13c>)
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004858:	f000 f8fc 	bl	8004a54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800485c:	4b10      	ldr	r3, [pc, #64]	; (80048a0 <xPortStartScheduler+0x140>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a0f      	ldr	r2, [pc, #60]	; (80048a0 <xPortStartScheduler+0x140>)
 8004862:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004866:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004868:	f7ff ff66 	bl	8004738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800486c:	f7ff fd46 	bl	80042fc <vTaskSwitchContext>
	prvTaskExitError();
 8004870:	f7ff ff20 	bl	80046b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	e000ed00 	.word	0xe000ed00
 8004884:	410fc271 	.word	0x410fc271
 8004888:	410fc270 	.word	0x410fc270
 800488c:	e000e400 	.word	0xe000e400
 8004890:	2000056c 	.word	0x2000056c
 8004894:	20000570 	.word	0x20000570
 8004898:	e000ed20 	.word	0xe000ed20
 800489c:	2000000c 	.word	0x2000000c
 80048a0:	e000ef34 	.word	0xe000ef34

080048a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
	__asm volatile
 80048aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ae:	f383 8811 	msr	BASEPRI, r3
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	f3bf 8f4f 	dsb	sy
 80048ba:	607b      	str	r3, [r7, #4]
}
 80048bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80048be:	4b0f      	ldr	r3, [pc, #60]	; (80048fc <vPortEnterCritical+0x58>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3301      	adds	r3, #1
 80048c4:	4a0d      	ldr	r2, [pc, #52]	; (80048fc <vPortEnterCritical+0x58>)
 80048c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048c8:	4b0c      	ldr	r3, [pc, #48]	; (80048fc <vPortEnterCritical+0x58>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d10f      	bne.n	80048f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <vPortEnterCritical+0x5c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	603b      	str	r3, [r7, #0]
}
 80048ec:	bf00      	nop
 80048ee:	e7fe      	b.n	80048ee <vPortEnterCritical+0x4a>
	}
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	2000000c 	.word	0x2000000c
 8004900:	e000ed04 	.word	0xe000ed04

08004904 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800490a:	4b12      	ldr	r3, [pc, #72]	; (8004954 <vPortExitCritical+0x50>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10a      	bne.n	8004928 <vPortExitCritical+0x24>
	__asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	607b      	str	r3, [r7, #4]
}
 8004924:	bf00      	nop
 8004926:	e7fe      	b.n	8004926 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004928:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <vPortExitCritical+0x50>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3b01      	subs	r3, #1
 800492e:	4a09      	ldr	r2, [pc, #36]	; (8004954 <vPortExitCritical+0x50>)
 8004930:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004932:	4b08      	ldr	r3, [pc, #32]	; (8004954 <vPortExitCritical+0x50>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d105      	bne.n	8004946 <vPortExitCritical+0x42>
 800493a:	2300      	movs	r3, #0
 800493c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004944:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	2000000c 	.word	0x2000000c
	...

08004960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004960:	f3ef 8009 	mrs	r0, PSP
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	4b15      	ldr	r3, [pc, #84]	; (80049c0 <pxCurrentTCBConst>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	f01e 0f10 	tst.w	lr, #16
 8004970:	bf08      	it	eq
 8004972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800497a:	6010      	str	r0, [r2, #0]
 800497c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004980:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004984:	f380 8811 	msr	BASEPRI, r0
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f7ff fcb4 	bl	80042fc <vTaskSwitchContext>
 8004994:	f04f 0000 	mov.w	r0, #0
 8004998:	f380 8811 	msr	BASEPRI, r0
 800499c:	bc09      	pop	{r0, r3}
 800499e:	6819      	ldr	r1, [r3, #0]
 80049a0:	6808      	ldr	r0, [r1, #0]
 80049a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a6:	f01e 0f10 	tst.w	lr, #16
 80049aa:	bf08      	it	eq
 80049ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80049b0:	f380 8809 	msr	PSP, r0
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	f3af 8000 	nop.w

080049c0 <pxCurrentTCBConst>:
 80049c0:	20000440 	.word	0x20000440
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049c4:	bf00      	nop
 80049c6:	bf00      	nop

080049c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	607b      	str	r3, [r7, #4]
}
 80049e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80049e2:	f7ff fbcd 	bl	8004180 <xTaskIncrementTick>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049ec:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <SysTick_Handler+0x40>)
 80049ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	2300      	movs	r3, #0
 80049f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	f383 8811 	msr	BASEPRI, r3
}
 80049fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a00:	bf00      	nop
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	e000ed04 	.word	0xe000ed04

08004a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a10:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <vPortSetupTimerInterrupt+0x34>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a16:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <vPortSetupTimerInterrupt+0x38>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a1c:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <vPortSetupTimerInterrupt+0x3c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a0a      	ldr	r2, [pc, #40]	; (8004a4c <vPortSetupTimerInterrupt+0x40>)
 8004a22:	fba2 2303 	umull	r2, r3, r2, r3
 8004a26:	099b      	lsrs	r3, r3, #6
 8004a28:	4a09      	ldr	r2, [pc, #36]	; (8004a50 <vPortSetupTimerInterrupt+0x44>)
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a2e:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <vPortSetupTimerInterrupt+0x34>)
 8004a30:	2207      	movs	r2, #7
 8004a32:	601a      	str	r2, [r3, #0]
}
 8004a34:	bf00      	nop
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	e000e010 	.word	0xe000e010
 8004a44:	e000e018 	.word	0xe000e018
 8004a48:	20000000 	.word	0x20000000
 8004a4c:	10624dd3 	.word	0x10624dd3
 8004a50:	e000e014 	.word	0xe000e014

08004a54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a64 <vPortEnableVFP+0x10>
 8004a58:	6801      	ldr	r1, [r0, #0]
 8004a5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a5e:	6001      	str	r1, [r0, #0]
 8004a60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a62:	bf00      	nop
 8004a64:	e000ed88 	.word	0xe000ed88

08004a68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08a      	sub	sp, #40	; 0x28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a70:	2300      	movs	r3, #0
 8004a72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a74:	f7ff fada 	bl	800402c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a78:	4b58      	ldr	r3, [pc, #352]	; (8004bdc <pvPortMalloc+0x174>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a80:	f000 f910 	bl	8004ca4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a84:	4b56      	ldr	r3, [pc, #344]	; (8004be0 <pvPortMalloc+0x178>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f040 808e 	bne.w	8004bae <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d01d      	beq.n	8004ad4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a98:	2208      	movs	r2, #8
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d014      	beq.n	8004ad4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f023 0307 	bic.w	r3, r3, #7
 8004ab0:	3308      	adds	r3, #8
 8004ab2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <pvPortMalloc+0x6c>
	__asm volatile
 8004abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	617b      	str	r3, [r7, #20]
}
 8004ad0:	bf00      	nop
 8004ad2:	e7fe      	b.n	8004ad2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d069      	beq.n	8004bae <pvPortMalloc+0x146>
 8004ada:	4b42      	ldr	r3, [pc, #264]	; (8004be4 <pvPortMalloc+0x17c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d864      	bhi.n	8004bae <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ae4:	4b40      	ldr	r3, [pc, #256]	; (8004be8 <pvPortMalloc+0x180>)
 8004ae6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ae8:	4b3f      	ldr	r3, [pc, #252]	; (8004be8 <pvPortMalloc+0x180>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004aee:	e004      	b.n	8004afa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d903      	bls.n	8004b0c <pvPortMalloc+0xa4>
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1f1      	bne.n	8004af0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b0c:	4b33      	ldr	r3, [pc, #204]	; (8004bdc <pvPortMalloc+0x174>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d04b      	beq.n	8004bae <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2208      	movs	r2, #8
 8004b1c:	4413      	add	r3, r2
 8004b1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	1ad2      	subs	r2, r2, r3
 8004b30:	2308      	movs	r3, #8
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d91f      	bls.n	8004b78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <pvPortMalloc+0xf8>
	__asm volatile
 8004b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	613b      	str	r3, [r7, #16]
}
 8004b5c:	bf00      	nop
 8004b5e:	e7fe      	b.n	8004b5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	1ad2      	subs	r2, r2, r3
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b72:	69b8      	ldr	r0, [r7, #24]
 8004b74:	f000 f8f8 	bl	8004d68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b78:	4b1a      	ldr	r3, [pc, #104]	; (8004be4 <pvPortMalloc+0x17c>)
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	4a18      	ldr	r2, [pc, #96]	; (8004be4 <pvPortMalloc+0x17c>)
 8004b84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b86:	4b17      	ldr	r3, [pc, #92]	; (8004be4 <pvPortMalloc+0x17c>)
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	4b18      	ldr	r3, [pc, #96]	; (8004bec <pvPortMalloc+0x184>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d203      	bcs.n	8004b9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b92:	4b14      	ldr	r3, [pc, #80]	; (8004be4 <pvPortMalloc+0x17c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a15      	ldr	r2, [pc, #84]	; (8004bec <pvPortMalloc+0x184>)
 8004b98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	4b10      	ldr	r3, [pc, #64]	; (8004be0 <pvPortMalloc+0x178>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004bae:	f7ff fa4b 	bl	8004048 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00a      	beq.n	8004bd2 <pvPortMalloc+0x16a>
	__asm volatile
 8004bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	60fb      	str	r3, [r7, #12]
}
 8004bce:	bf00      	nop
 8004bd0:	e7fe      	b.n	8004bd0 <pvPortMalloc+0x168>
	return pvReturn;
 8004bd2:	69fb      	ldr	r3, [r7, #28]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3728      	adds	r7, #40	; 0x28
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	2000117c 	.word	0x2000117c
 8004be0:	20001188 	.word	0x20001188
 8004be4:	20001180 	.word	0x20001180
 8004be8:	20001174 	.word	0x20001174
 8004bec:	20001184 	.word	0x20001184

08004bf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d048      	beq.n	8004c94 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c02:	2308      	movs	r3, #8
 8004c04:	425b      	negs	r3, r3
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4413      	add	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	4b21      	ldr	r3, [pc, #132]	; (8004c9c <vPortFree+0xac>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10a      	bne.n	8004c34 <vPortFree+0x44>
	__asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	60fb      	str	r3, [r7, #12]
}
 8004c30:	bf00      	nop
 8004c32:	e7fe      	b.n	8004c32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <vPortFree+0x62>
	__asm volatile
 8004c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	60bb      	str	r3, [r7, #8]
}
 8004c4e:	bf00      	nop
 8004c50:	e7fe      	b.n	8004c50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	4b11      	ldr	r3, [pc, #68]	; (8004c9c <vPortFree+0xac>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d019      	beq.n	8004c94 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d115      	bne.n	8004c94 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <vPortFree+0xac>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	43db      	mvns	r3, r3
 8004c72:	401a      	ands	r2, r3
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c78:	f7ff f9d8 	bl	800402c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	4b07      	ldr	r3, [pc, #28]	; (8004ca0 <vPortFree+0xb0>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4413      	add	r3, r2
 8004c86:	4a06      	ldr	r2, [pc, #24]	; (8004ca0 <vPortFree+0xb0>)
 8004c88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c8a:	6938      	ldr	r0, [r7, #16]
 8004c8c:	f000 f86c 	bl	8004d68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004c90:	f7ff f9da 	bl	8004048 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c94:	bf00      	nop
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	20001188 	.word	0x20001188
 8004ca0:	20001180 	.word	0x20001180

08004ca4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004caa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004cae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004cb0:	4b27      	ldr	r3, [pc, #156]	; (8004d50 <prvHeapInit+0xac>)
 8004cb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00c      	beq.n	8004cd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	3307      	adds	r3, #7
 8004cc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0307 	bic.w	r3, r3, #7
 8004cca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	4a1f      	ldr	r2, [pc, #124]	; (8004d50 <prvHeapInit+0xac>)
 8004cd4:	4413      	add	r3, r2
 8004cd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cdc:	4a1d      	ldr	r2, [pc, #116]	; (8004d54 <prvHeapInit+0xb0>)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ce2:	4b1c      	ldr	r3, [pc, #112]	; (8004d54 <prvHeapInit+0xb0>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	4413      	add	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1a9b      	subs	r3, r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 0307 	bic.w	r3, r3, #7
 8004cfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4a15      	ldr	r2, [pc, #84]	; (8004d58 <prvHeapInit+0xb4>)
 8004d04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d06:	4b14      	ldr	r3, [pc, #80]	; (8004d58 <prvHeapInit+0xb4>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d0e:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <prvHeapInit+0xb4>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	1ad2      	subs	r2, r2, r3
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d24:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <prvHeapInit+0xb4>)
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	4a0a      	ldr	r2, [pc, #40]	; (8004d5c <prvHeapInit+0xb8>)
 8004d32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	4a09      	ldr	r2, [pc, #36]	; (8004d60 <prvHeapInit+0xbc>)
 8004d3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d3c:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <prvHeapInit+0xc0>)
 8004d3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d42:	601a      	str	r2, [r3, #0]
}
 8004d44:	bf00      	nop
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	20000574 	.word	0x20000574
 8004d54:	20001174 	.word	0x20001174
 8004d58:	2000117c 	.word	0x2000117c
 8004d5c:	20001184 	.word	0x20001184
 8004d60:	20001180 	.word	0x20001180
 8004d64:	20001188 	.word	0x20001188

08004d68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d70:	4b28      	ldr	r3, [pc, #160]	; (8004e14 <prvInsertBlockIntoFreeList+0xac>)
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	e002      	b.n	8004d7c <prvInsertBlockIntoFreeList+0x14>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d8f7      	bhi.n	8004d76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	4413      	add	r3, r2
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d108      	bne.n	8004daa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	441a      	add	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	441a      	add	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d118      	bne.n	8004df0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	4b15      	ldr	r3, [pc, #84]	; (8004e18 <prvInsertBlockIntoFreeList+0xb0>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d00d      	beq.n	8004de6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	441a      	add	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	e008      	b.n	8004df8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004de6:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <prvInsertBlockIntoFreeList+0xb0>)
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	e003      	b.n	8004df8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d002      	beq.n	8004e06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e06:	bf00      	nop
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	20001174 	.word	0x20001174
 8004e18:	2000117c 	.word	0x2000117c

08004e1c <__libc_init_array>:
 8004e1c:	b570      	push	{r4, r5, r6, lr}
 8004e1e:	4d0d      	ldr	r5, [pc, #52]	; (8004e54 <__libc_init_array+0x38>)
 8004e20:	4c0d      	ldr	r4, [pc, #52]	; (8004e58 <__libc_init_array+0x3c>)
 8004e22:	1b64      	subs	r4, r4, r5
 8004e24:	10a4      	asrs	r4, r4, #2
 8004e26:	2600      	movs	r6, #0
 8004e28:	42a6      	cmp	r6, r4
 8004e2a:	d109      	bne.n	8004e40 <__libc_init_array+0x24>
 8004e2c:	4d0b      	ldr	r5, [pc, #44]	; (8004e5c <__libc_init_array+0x40>)
 8004e2e:	4c0c      	ldr	r4, [pc, #48]	; (8004e60 <__libc_init_array+0x44>)
 8004e30:	f000 f8e4 	bl	8004ffc <_init>
 8004e34:	1b64      	subs	r4, r4, r5
 8004e36:	10a4      	asrs	r4, r4, #2
 8004e38:	2600      	movs	r6, #0
 8004e3a:	42a6      	cmp	r6, r4
 8004e3c:	d105      	bne.n	8004e4a <__libc_init_array+0x2e>
 8004e3e:	bd70      	pop	{r4, r5, r6, pc}
 8004e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e44:	4798      	blx	r3
 8004e46:	3601      	adds	r6, #1
 8004e48:	e7ee      	b.n	8004e28 <__libc_init_array+0xc>
 8004e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e4e:	4798      	blx	r3
 8004e50:	3601      	adds	r6, #1
 8004e52:	e7f2      	b.n	8004e3a <__libc_init_array+0x1e>
 8004e54:	0800512c 	.word	0x0800512c
 8004e58:	0800512c 	.word	0x0800512c
 8004e5c:	0800512c 	.word	0x0800512c
 8004e60:	08005130 	.word	0x08005130

08004e64 <__retarget_lock_acquire_recursive>:
 8004e64:	4770      	bx	lr

08004e66 <__retarget_lock_release_recursive>:
 8004e66:	4770      	bx	lr

08004e68 <memset>:
 8004e68:	4402      	add	r2, r0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d100      	bne.n	8004e72 <memset+0xa>
 8004e70:	4770      	bx	lr
 8004e72:	f803 1b01 	strb.w	r1, [r3], #1
 8004e76:	e7f9      	b.n	8004e6c <memset+0x4>

08004e78 <cleanup_glue>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	460c      	mov	r4, r1
 8004e7c:	6809      	ldr	r1, [r1, #0]
 8004e7e:	4605      	mov	r5, r0
 8004e80:	b109      	cbz	r1, 8004e86 <cleanup_glue+0xe>
 8004e82:	f7ff fff9 	bl	8004e78 <cleanup_glue>
 8004e86:	4621      	mov	r1, r4
 8004e88:	4628      	mov	r0, r5
 8004e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e8e:	f000 b869 	b.w	8004f64 <_free_r>
	...

08004e94 <_reclaim_reent>:
 8004e94:	4b2c      	ldr	r3, [pc, #176]	; (8004f48 <_reclaim_reent+0xb4>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4283      	cmp	r3, r0
 8004e9a:	b570      	push	{r4, r5, r6, lr}
 8004e9c:	4604      	mov	r4, r0
 8004e9e:	d051      	beq.n	8004f44 <_reclaim_reent+0xb0>
 8004ea0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004ea2:	b143      	cbz	r3, 8004eb6 <_reclaim_reent+0x22>
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d14a      	bne.n	8004f40 <_reclaim_reent+0xac>
 8004eaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004eac:	6819      	ldr	r1, [r3, #0]
 8004eae:	b111      	cbz	r1, 8004eb6 <_reclaim_reent+0x22>
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	f000 f857 	bl	8004f64 <_free_r>
 8004eb6:	6961      	ldr	r1, [r4, #20]
 8004eb8:	b111      	cbz	r1, 8004ec0 <_reclaim_reent+0x2c>
 8004eba:	4620      	mov	r0, r4
 8004ebc:	f000 f852 	bl	8004f64 <_free_r>
 8004ec0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004ec2:	b111      	cbz	r1, 8004eca <_reclaim_reent+0x36>
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f000 f84d 	bl	8004f64 <_free_r>
 8004eca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004ecc:	b111      	cbz	r1, 8004ed4 <_reclaim_reent+0x40>
 8004ece:	4620      	mov	r0, r4
 8004ed0:	f000 f848 	bl	8004f64 <_free_r>
 8004ed4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004ed6:	b111      	cbz	r1, 8004ede <_reclaim_reent+0x4a>
 8004ed8:	4620      	mov	r0, r4
 8004eda:	f000 f843 	bl	8004f64 <_free_r>
 8004ede:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004ee0:	b111      	cbz	r1, 8004ee8 <_reclaim_reent+0x54>
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	f000 f83e 	bl	8004f64 <_free_r>
 8004ee8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004eea:	b111      	cbz	r1, 8004ef2 <_reclaim_reent+0x5e>
 8004eec:	4620      	mov	r0, r4
 8004eee:	f000 f839 	bl	8004f64 <_free_r>
 8004ef2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004ef4:	b111      	cbz	r1, 8004efc <_reclaim_reent+0x68>
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	f000 f834 	bl	8004f64 <_free_r>
 8004efc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004efe:	b111      	cbz	r1, 8004f06 <_reclaim_reent+0x72>
 8004f00:	4620      	mov	r0, r4
 8004f02:	f000 f82f 	bl	8004f64 <_free_r>
 8004f06:	69a3      	ldr	r3, [r4, #24]
 8004f08:	b1e3      	cbz	r3, 8004f44 <_reclaim_reent+0xb0>
 8004f0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	4798      	blx	r3
 8004f10:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004f12:	b1b9      	cbz	r1, 8004f44 <_reclaim_reent+0xb0>
 8004f14:	4620      	mov	r0, r4
 8004f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f1a:	f7ff bfad 	b.w	8004e78 <cleanup_glue>
 8004f1e:	5949      	ldr	r1, [r1, r5]
 8004f20:	b941      	cbnz	r1, 8004f34 <_reclaim_reent+0xa0>
 8004f22:	3504      	adds	r5, #4
 8004f24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f26:	2d80      	cmp	r5, #128	; 0x80
 8004f28:	68d9      	ldr	r1, [r3, #12]
 8004f2a:	d1f8      	bne.n	8004f1e <_reclaim_reent+0x8a>
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	f000 f819 	bl	8004f64 <_free_r>
 8004f32:	e7ba      	b.n	8004eaa <_reclaim_reent+0x16>
 8004f34:	680e      	ldr	r6, [r1, #0]
 8004f36:	4620      	mov	r0, r4
 8004f38:	f000 f814 	bl	8004f64 <_free_r>
 8004f3c:	4631      	mov	r1, r6
 8004f3e:	e7ef      	b.n	8004f20 <_reclaim_reent+0x8c>
 8004f40:	2500      	movs	r5, #0
 8004f42:	e7ef      	b.n	8004f24 <_reclaim_reent+0x90>
 8004f44:	bd70      	pop	{r4, r5, r6, pc}
 8004f46:	bf00      	nop
 8004f48:	20000010 	.word	0x20000010

08004f4c <__malloc_lock>:
 8004f4c:	4801      	ldr	r0, [pc, #4]	; (8004f54 <__malloc_lock+0x8>)
 8004f4e:	f7ff bf89 	b.w	8004e64 <__retarget_lock_acquire_recursive>
 8004f52:	bf00      	nop
 8004f54:	2000118c 	.word	0x2000118c

08004f58 <__malloc_unlock>:
 8004f58:	4801      	ldr	r0, [pc, #4]	; (8004f60 <__malloc_unlock+0x8>)
 8004f5a:	f7ff bf84 	b.w	8004e66 <__retarget_lock_release_recursive>
 8004f5e:	bf00      	nop
 8004f60:	2000118c 	.word	0x2000118c

08004f64 <_free_r>:
 8004f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f66:	2900      	cmp	r1, #0
 8004f68:	d044      	beq.n	8004ff4 <_free_r+0x90>
 8004f6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f6e:	9001      	str	r0, [sp, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f1a1 0404 	sub.w	r4, r1, #4
 8004f76:	bfb8      	it	lt
 8004f78:	18e4      	addlt	r4, r4, r3
 8004f7a:	f7ff ffe7 	bl	8004f4c <__malloc_lock>
 8004f7e:	4a1e      	ldr	r2, [pc, #120]	; (8004ff8 <_free_r+0x94>)
 8004f80:	9801      	ldr	r0, [sp, #4]
 8004f82:	6813      	ldr	r3, [r2, #0]
 8004f84:	b933      	cbnz	r3, 8004f94 <_free_r+0x30>
 8004f86:	6063      	str	r3, [r4, #4]
 8004f88:	6014      	str	r4, [r2, #0]
 8004f8a:	b003      	add	sp, #12
 8004f8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f90:	f7ff bfe2 	b.w	8004f58 <__malloc_unlock>
 8004f94:	42a3      	cmp	r3, r4
 8004f96:	d908      	bls.n	8004faa <_free_r+0x46>
 8004f98:	6825      	ldr	r5, [r4, #0]
 8004f9a:	1961      	adds	r1, r4, r5
 8004f9c:	428b      	cmp	r3, r1
 8004f9e:	bf01      	itttt	eq
 8004fa0:	6819      	ldreq	r1, [r3, #0]
 8004fa2:	685b      	ldreq	r3, [r3, #4]
 8004fa4:	1949      	addeq	r1, r1, r5
 8004fa6:	6021      	streq	r1, [r4, #0]
 8004fa8:	e7ed      	b.n	8004f86 <_free_r+0x22>
 8004faa:	461a      	mov	r2, r3
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	b10b      	cbz	r3, 8004fb4 <_free_r+0x50>
 8004fb0:	42a3      	cmp	r3, r4
 8004fb2:	d9fa      	bls.n	8004faa <_free_r+0x46>
 8004fb4:	6811      	ldr	r1, [r2, #0]
 8004fb6:	1855      	adds	r5, r2, r1
 8004fb8:	42a5      	cmp	r5, r4
 8004fba:	d10b      	bne.n	8004fd4 <_free_r+0x70>
 8004fbc:	6824      	ldr	r4, [r4, #0]
 8004fbe:	4421      	add	r1, r4
 8004fc0:	1854      	adds	r4, r2, r1
 8004fc2:	42a3      	cmp	r3, r4
 8004fc4:	6011      	str	r1, [r2, #0]
 8004fc6:	d1e0      	bne.n	8004f8a <_free_r+0x26>
 8004fc8:	681c      	ldr	r4, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	6053      	str	r3, [r2, #4]
 8004fce:	4421      	add	r1, r4
 8004fd0:	6011      	str	r1, [r2, #0]
 8004fd2:	e7da      	b.n	8004f8a <_free_r+0x26>
 8004fd4:	d902      	bls.n	8004fdc <_free_r+0x78>
 8004fd6:	230c      	movs	r3, #12
 8004fd8:	6003      	str	r3, [r0, #0]
 8004fda:	e7d6      	b.n	8004f8a <_free_r+0x26>
 8004fdc:	6825      	ldr	r5, [r4, #0]
 8004fde:	1961      	adds	r1, r4, r5
 8004fe0:	428b      	cmp	r3, r1
 8004fe2:	bf04      	itt	eq
 8004fe4:	6819      	ldreq	r1, [r3, #0]
 8004fe6:	685b      	ldreq	r3, [r3, #4]
 8004fe8:	6063      	str	r3, [r4, #4]
 8004fea:	bf04      	itt	eq
 8004fec:	1949      	addeq	r1, r1, r5
 8004fee:	6021      	streq	r1, [r4, #0]
 8004ff0:	6054      	str	r4, [r2, #4]
 8004ff2:	e7ca      	b.n	8004f8a <_free_r+0x26>
 8004ff4:	b003      	add	sp, #12
 8004ff6:	bd30      	pop	{r4, r5, pc}
 8004ff8:	20001190 	.word	0x20001190

08004ffc <_init>:
 8004ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffe:	bf00      	nop
 8005000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005002:	bc08      	pop	{r3}
 8005004:	469e      	mov	lr, r3
 8005006:	4770      	bx	lr

08005008 <_fini>:
 8005008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500a:	bf00      	nop
 800500c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800500e:	bc08      	pop	{r3}
 8005010:	469e      	mov	lr, r3
 8005012:	4770      	bx	lr
