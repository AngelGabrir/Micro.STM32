
Calculadora0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004490  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004620  08004620  00014620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004690  08004690  00020468  2**0
                  CONTENTS
  4 .ARM          00000000  08004690  08004690  00020468  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004690  08004690  00020468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004690  08004690  00014690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004694  08004694  00014694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000468  20000000  08004698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000468  08004b00  00020468  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000065c  08004b00  0002065c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020468  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0e0  00000000  00000000  00020498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d48  00000000  00000000  0002d578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002f2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002fce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b757  00000000  00000000  00030648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e82e  00000000  00000000  0004bd9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d820  00000000  00000000  0005a5cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7ded  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cd0  00000000  00000000  000f7e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000468 	.word	0x20000468
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004608 	.word	0x08004608

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000046c 	.word	0x2000046c
 80001cc:	08004608 	.word	0x08004608

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af02      	add	r7, sp, #8
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	f023 030f 	bic.w	r3, r3, #15
 8000280:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	011b      	lsls	r3, r3, #4
 8000286:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000288:	7bfb      	ldrb	r3, [r7, #15]
 800028a:	f043 030c 	orr.w	r3, r3, #12
 800028e:	b2db      	uxtb	r3, r3
 8000290:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000292:	7bfb      	ldrb	r3, [r7, #15]
 8000294:	f043 0308 	orr.w	r3, r3, #8
 8000298:	b2db      	uxtb	r3, r3
 800029a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800029c:	7bbb      	ldrb	r3, [r7, #14]
 800029e:	f043 030c 	orr.w	r3, r3, #12
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80002a6:	7bbb      	ldrb	r3, [r7, #14]
 80002a8:	f043 0308 	orr.w	r3, r3, #8
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002b0:	f107 0208 	add.w	r2, r7, #8
 80002b4:	2364      	movs	r3, #100	; 0x64
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	2304      	movs	r3, #4
 80002ba:	214e      	movs	r1, #78	; 0x4e
 80002bc:	4803      	ldr	r0, [pc, #12]	; (80002cc <lcd_send_cmd+0x5c>)
 80002be:	f001 f9c7 	bl	8001650 <HAL_I2C_Master_Transmit>
}
 80002c2:	bf00      	nop
 80002c4:	3710      	adds	r7, #16
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	20000484 	.word	0x20000484

080002d0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b086      	sub	sp, #24
 80002d4:	af02      	add	r7, sp, #8
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	f023 030f 	bic.w	r3, r3, #15
 80002e0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	011b      	lsls	r3, r3, #4
 80002e6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80002e8:	7bfb      	ldrb	r3, [r7, #15]
 80002ea:	f043 030d 	orr.w	r3, r3, #13
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80002f2:	7bfb      	ldrb	r3, [r7, #15]
 80002f4:	f043 0309 	orr.w	r3, r3, #9
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80002fc:	7bbb      	ldrb	r3, [r7, #14]
 80002fe:	f043 030d 	orr.w	r3, r3, #13
 8000302:	b2db      	uxtb	r3, r3
 8000304:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000306:	7bbb      	ldrb	r3, [r7, #14]
 8000308:	f043 0309 	orr.w	r3, r3, #9
 800030c:	b2db      	uxtb	r3, r3
 800030e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000310:	f107 0208 	add.w	r2, r7, #8
 8000314:	2364      	movs	r3, #100	; 0x64
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2304      	movs	r3, #4
 800031a:	214e      	movs	r1, #78	; 0x4e
 800031c:	4803      	ldr	r0, [pc, #12]	; (800032c <lcd_send_data+0x5c>)
 800031e:	f001 f997 	bl	8001650 <HAL_I2C_Master_Transmit>
}
 8000322:	bf00      	nop
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000484 	.word	0x20000484

08000330 <lcd_clear>:

void lcd_clear (void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000336:	2080      	movs	r0, #128	; 0x80
 8000338:	f7ff ff9a 	bl	8000270 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 800033c:	2300      	movs	r3, #0
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	e005      	b.n	800034e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000342:	2020      	movs	r0, #32
 8000344:	f7ff ffc4 	bl	80002d0 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	3301      	adds	r3, #1
 800034c:	607b      	str	r3, [r7, #4]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2b45      	cmp	r3, #69	; 0x45
 8000352:	ddf6      	ble.n	8000342 <lcd_clear+0x12>
	}
}
 8000354:	bf00      	nop
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}

0800035e <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800035e:	b580      	push	{r7, lr}
 8000360:	b082      	sub	sp, #8
 8000362:	af00      	add	r7, sp, #0
 8000364:	6078      	str	r0, [r7, #4]
 8000366:	6039      	str	r1, [r7, #0]
    switch (row)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d003      	beq.n	8000376 <lcd_put_cur+0x18>
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d005      	beq.n	8000380 <lcd_put_cur+0x22>
 8000374:	e009      	b.n	800038a <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800037c:	603b      	str	r3, [r7, #0]
            break;
 800037e:	e004      	b.n	800038a <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000386:	603b      	str	r3, [r7, #0]
            break;
 8000388:	bf00      	nop
    }

    lcd_send_cmd (col);
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	b2db      	uxtb	r3, r3
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff ff6e 	bl	8000270 <lcd_send_cmd>
}
 8000394:	bf00      	nop
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <lcd_init>:


void lcd_init (void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80003a0:	2032      	movs	r0, #50	; 0x32
 80003a2:	f000 fe31 	bl	8001008 <HAL_Delay>
	lcd_send_cmd (0x30);
 80003a6:	2030      	movs	r0, #48	; 0x30
 80003a8:	f7ff ff62 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80003ac:	2005      	movs	r0, #5
 80003ae:	f000 fe2b 	bl	8001008 <HAL_Delay>
	lcd_send_cmd (0x30);
 80003b2:	2030      	movs	r0, #48	; 0x30
 80003b4:	f7ff ff5c 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80003b8:	2001      	movs	r0, #1
 80003ba:	f000 fe25 	bl	8001008 <HAL_Delay>
	lcd_send_cmd (0x30);
 80003be:	2030      	movs	r0, #48	; 0x30
 80003c0:	f7ff ff56 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(10);
 80003c4:	200a      	movs	r0, #10
 80003c6:	f000 fe1f 	bl	8001008 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80003ca:	2020      	movs	r0, #32
 80003cc:	f7ff ff50 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(10);
 80003d0:	200a      	movs	r0, #10
 80003d2:	f000 fe19 	bl	8001008 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80003d6:	2028      	movs	r0, #40	; 0x28
 80003d8:	f7ff ff4a 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(1);
 80003dc:	2001      	movs	r0, #1
 80003de:	f000 fe13 	bl	8001008 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80003e2:	2008      	movs	r0, #8
 80003e4:	f7ff ff44 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(1);
 80003e8:	2001      	movs	r0, #1
 80003ea:	f000 fe0d 	bl	8001008 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80003ee:	2001      	movs	r0, #1
 80003f0:	f7ff ff3e 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(1);
 80003f4:	2001      	movs	r0, #1
 80003f6:	f000 fe07 	bl	8001008 <HAL_Delay>
	HAL_Delay(1);
 80003fa:	2001      	movs	r0, #1
 80003fc:	f000 fe04 	bl	8001008 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000400:	2006      	movs	r0, #6
 8000402:	f7ff ff35 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(1);
 8000406:	2001      	movs	r0, #1
 8000408:	f000 fdfe 	bl	8001008 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800040c:	200c      	movs	r0, #12
 800040e:	f7ff ff2f 	bl	8000270 <lcd_send_cmd>
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}

08000416 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000416:	b580      	push	{r7, lr}
 8000418:	b082      	sub	sp, #8
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800041e:	e006      	b.n	800042e <lcd_send_string+0x18>
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	1c5a      	adds	r2, r3, #1
 8000424:	607a      	str	r2, [r7, #4]
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff ff51 	bl	80002d0 <lcd_send_data>
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d1f4      	bne.n	8000420 <lcd_send_string+0xa>
}
 8000436:	bf00      	nop
 8000438:	bf00      	nop
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}

08000440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000446:	f000 fd79 	bl	8000f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800044a:	f000 f94f 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800044e:	f000 fa1b 	bl	8000888 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000452:	f000 f9a9 	bl	80007a8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000456:	f000 f9e7 	bl	8000828 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800045a:	f7ff ff9f 	bl	800039c <lcd_init>
  max_init(0x02);
 800045e:	2002      	movs	r0, #2
 8000460:	f000 fc04 	bl	8000c6c <max_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //impresion de los valores de a y b
	 	  // y anulacion del rebote
	 	  if (valor!=0) {
 8000464:	4b93      	ldr	r3, [pc, #588]	; (80006b4 <main+0x274>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d016      	beq.n	800049a <main+0x5a>
	 		HAL_Delay(500);
 800046c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000470:	f000 fdca 	bl	8001008 <HAL_Delay>
	 		sprintf(caracter, "%i", number);
 8000474:	4b90      	ldr	r3, [pc, #576]	; (80006b8 <main+0x278>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	461a      	mov	r2, r3
 800047a:	4990      	ldr	r1, [pc, #576]	; (80006bc <main+0x27c>)
 800047c:	4890      	ldr	r0, [pc, #576]	; (80006c0 <main+0x280>)
 800047e:	f003 fc55 	bl	8003d2c <siprintf>
	 		lcd_put_cur(0,cursor);
 8000482:	4b90      	ldr	r3, [pc, #576]	; (80006c4 <main+0x284>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4619      	mov	r1, r3
 8000488:	2000      	movs	r0, #0
 800048a:	f7ff ff68 	bl	800035e <lcd_put_cur>
	 		lcd_send_string(caracter);
 800048e:	488c      	ldr	r0, [pc, #560]	; (80006c0 <main+0x280>)
 8000490:	f7ff ffc1 	bl	8000416 <lcd_send_string>
	 		valor=0;
 8000494:	4b87      	ldr	r3, [pc, #540]	; (80006b4 <main+0x274>)
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
	 	}
	 	  //cambio de a y b
	 	  if ((operacion>=42&&operacion<=47)&&bandera==0)
 800049a:	4b8b      	ldr	r3, [pc, #556]	; (80006c8 <main+0x288>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b29      	cmp	r3, #41	; 0x29
 80004a0:	d94f      	bls.n	8000542 <main+0x102>
 80004a2:	4b89      	ldr	r3, [pc, #548]	; (80006c8 <main+0x288>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b2f      	cmp	r3, #47	; 0x2f
 80004a8:	d84b      	bhi.n	8000542 <main+0x102>
 80004aa:	4b88      	ldr	r3, [pc, #544]	; (80006cc <main+0x28c>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d147      	bne.n	8000542 <main+0x102>
	 	  {
	 		bandera=1;
 80004b2:	4b86      	ldr	r3, [pc, #536]	; (80006cc <main+0x28c>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	601a      	str	r2, [r3, #0]
	 		number=0;
 80004b8:	4b7f      	ldr	r3, [pc, #508]	; (80006b8 <main+0x278>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
	 		for (int var = 0; var < 16; ++var)//movimiento del cursor
 80004be:	2300      	movs	r3, #0
 80004c0:	607b      	str	r3, [r7, #4]
 80004c2:	e00d      	b.n	80004e0 <main+0xa0>
	 		{
	 			if(caracter[var]!='\0')
 80004c4:	4a7e      	ldr	r2, [pc, #504]	; (80006c0 <main+0x280>)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4413      	add	r3, r2
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d00b      	beq.n	80004e8 <main+0xa8>
	 			{
	 				cursor++;
 80004d0:	4b7c      	ldr	r3, [pc, #496]	; (80006c4 <main+0x284>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	3301      	adds	r3, #1
 80004d6:	4a7b      	ldr	r2, [pc, #492]	; (80006c4 <main+0x284>)
 80004d8:	6013      	str	r3, [r2, #0]
	 		for (int var = 0; var < 16; ++var)//movimiento del cursor
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	3301      	adds	r3, #1
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2b0f      	cmp	r3, #15
 80004e4:	ddee      	ble.n	80004c4 <main+0x84>
 80004e6:	e000      	b.n	80004ea <main+0xaa>
	 			}
	 			else{
	 				break;
 80004e8:	bf00      	nop
	 			}
	 		}
	 		for (int var = 0; var < 16; ++var)//limpiando el array del valor del numero
 80004ea:	2300      	movs	r3, #0
 80004ec:	603b      	str	r3, [r7, #0]
 80004ee:	e00d      	b.n	800050c <main+0xcc>
	 			{
	 				if(caracter[var]!='\0')
 80004f0:	4a73      	ldr	r2, [pc, #460]	; (80006c0 <main+0x280>)
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	4413      	add	r3, r2
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d00b      	beq.n	8000514 <main+0xd4>
	 				{
	 					caracter[var]='\0';
 80004fc:	4a70      	ldr	r2, [pc, #448]	; (80006c0 <main+0x280>)
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	4413      	add	r3, r2
 8000502:	2200      	movs	r2, #0
 8000504:	701a      	strb	r2, [r3, #0]
	 		for (int var = 0; var < 16; ++var)//limpiando el array del valor del numero
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	3301      	adds	r3, #1
 800050a:	603b      	str	r3, [r7, #0]
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	2b0f      	cmp	r3, #15
 8000510:	ddee      	ble.n	80004f0 <main+0xb0>
 8000512:	e000      	b.n	8000516 <main+0xd6>
	 				}
	 				else
	 				{
	 					break;
 8000514:	bf00      	nop
	 				}
	 			}
	 		//imprimiendo en la matrix led
	 		write_char(operacion,1);
 8000516:	4b6c      	ldr	r3, [pc, #432]	; (80006c8 <main+0x288>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2101      	movs	r1, #1
 800051c:	4618      	mov	r0, r3
 800051e:	f000 fb3d 	bl	8000b9c <write_char>
	 		lcd_put_cur(0,cursor);
 8000522:	4b68      	ldr	r3, [pc, #416]	; (80006c4 <main+0x284>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4619      	mov	r1, r3
 8000528:	2000      	movs	r0, #0
 800052a:	f7ff ff18 	bl	800035e <lcd_put_cur>
	 		lcd_send_data(operacion);
 800052e:	4b66      	ldr	r3, [pc, #408]	; (80006c8 <main+0x288>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff fecc 	bl	80002d0 <lcd_send_data>
	 		cursor++;
 8000538:	4b62      	ldr	r3, [pc, #392]	; (80006c4 <main+0x284>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	3301      	adds	r3, #1
 800053e:	4a61      	ldr	r2, [pc, #388]	; (80006c4 <main+0x284>)
 8000540:	6013      	str	r3, [r2, #0]
	 	  }
	 	  if(bandera==0){//igualando a, a al numero entrante
 8000542:	4b62      	ldr	r3, [pc, #392]	; (80006cc <main+0x28c>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d104      	bne.n	8000554 <main+0x114>
	 		  a=number;
 800054a:	4b5b      	ldr	r3, [pc, #364]	; (80006b8 <main+0x278>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a60      	ldr	r2, [pc, #384]	; (80006d0 <main+0x290>)
 8000550:	6013      	str	r3, [r2, #0]
 8000552:	e007      	b.n	8000564 <main+0x124>
	 	  }
	 	  else if(igual=='\0')//igualando a, b al numero entrante
 8000554:	4b5f      	ldr	r3, [pc, #380]	; (80006d4 <main+0x294>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d103      	bne.n	8000564 <main+0x124>
	 	  {
	 		  b=number;
 800055c:	4b56      	ldr	r3, [pc, #344]	; (80006b8 <main+0x278>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a5d      	ldr	r2, [pc, #372]	; (80006d8 <main+0x298>)
 8000562:	6013      	str	r3, [r2, #0]
	 	  }
	 	  if (reset==1)//Reiniciando el programa
 8000564:	4b5d      	ldr	r3, [pc, #372]	; (80006dc <main+0x29c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d11b      	bne.n	80005a4 <main+0x164>
	 	  {
	 		reset=0;
 800056c:	4b5b      	ldr	r3, [pc, #364]	; (80006dc <main+0x29c>)
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
	 		a=0;
 8000572:	4b57      	ldr	r3, [pc, #348]	; (80006d0 <main+0x290>)
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
	 		b=0;
 8000578:	4b57      	ldr	r3, [pc, #348]	; (80006d8 <main+0x298>)
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
	 		number=0;
 800057e:	4b4e      	ldr	r3, [pc, #312]	; (80006b8 <main+0x278>)
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
	 		operacion='\0';
 8000584:	4b50      	ldr	r3, [pc, #320]	; (80006c8 <main+0x288>)
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]
	 		igual='\0';
 800058a:	4b52      	ldr	r3, [pc, #328]	; (80006d4 <main+0x294>)
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
	 		cursor=0;
 8000590:	4b4c      	ldr	r3, [pc, #304]	; (80006c4 <main+0x284>)
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
	 		bandera=0;
 8000596:	4b4d      	ldr	r3, [pc, #308]	; (80006cc <main+0x28c>)
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
	 		lcd_clear();
 800059c:	f7ff fec8 	bl	8000330 <lcd_clear>
	 		max_clear();
 80005a0:	f000 fb36 	bl	8000c10 <max_clear>
	 	  }

	 	  if(igual=='='){//realizando operacion
 80005a4:	4b4b      	ldr	r3, [pc, #300]	; (80006d4 <main+0x294>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b3d      	cmp	r3, #61	; 0x3d
 80005aa:	d14b      	bne.n	8000644 <main+0x204>

	 	  switch (operacion) {
 80005ac:	4b46      	ldr	r3, [pc, #280]	; (80006c8 <main+0x288>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	3b2a      	subs	r3, #42	; 0x2a
 80005b2:	2b05      	cmp	r3, #5
 80005b4:	d830      	bhi.n	8000618 <main+0x1d8>
 80005b6:	a201      	add	r2, pc, #4	; (adr r2, 80005bc <main+0x17c>)
 80005b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005bc:	080005f5 	.word	0x080005f5
 80005c0:	080005d5 	.word	0x080005d5
 80005c4:	08000619 	.word	0x08000619
 80005c8:	080005e5 	.word	0x080005e5
 80005cc:	08000619 	.word	0x08000619
 80005d0:	08000607 	.word	0x08000607
	 		case '+':
	 			resultado=a+b;
 80005d4:	4b3e      	ldr	r3, [pc, #248]	; (80006d0 <main+0x290>)
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	4b3f      	ldr	r3, [pc, #252]	; (80006d8 <main+0x298>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4413      	add	r3, r2
 80005de:	4a40      	ldr	r2, [pc, #256]	; (80006e0 <main+0x2a0>)
 80005e0:	6013      	str	r3, [r2, #0]
	 			break;
 80005e2:	e01a      	b.n	800061a <main+0x1da>
	 		case '-':
	 			resultado=a-b;
 80005e4:	4b3a      	ldr	r3, [pc, #232]	; (80006d0 <main+0x290>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b3b      	ldr	r3, [pc, #236]	; (80006d8 <main+0x298>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	4a3c      	ldr	r2, [pc, #240]	; (80006e0 <main+0x2a0>)
 80005f0:	6013      	str	r3, [r2, #0]
	 			break;
 80005f2:	e012      	b.n	800061a <main+0x1da>
	 		case '*':
	 			resultado=a*b;
 80005f4:	4b36      	ldr	r3, [pc, #216]	; (80006d0 <main+0x290>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a37      	ldr	r2, [pc, #220]	; (80006d8 <main+0x298>)
 80005fa:	6812      	ldr	r2, [r2, #0]
 80005fc:	fb02 f303 	mul.w	r3, r2, r3
 8000600:	4a37      	ldr	r2, [pc, #220]	; (80006e0 <main+0x2a0>)
 8000602:	6013      	str	r3, [r2, #0]
	 			break;
 8000604:	e009      	b.n	800061a <main+0x1da>
	 		case '/':
	 			resultado=a/b;
 8000606:	4b32      	ldr	r3, [pc, #200]	; (80006d0 <main+0x290>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4b33      	ldr	r3, [pc, #204]	; (80006d8 <main+0x298>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000612:	4a33      	ldr	r2, [pc, #204]	; (80006e0 <main+0x2a0>)
 8000614:	6013      	str	r3, [r2, #0]
	 			break;
 8000616:	e000      	b.n	800061a <main+0x1da>
	 		default:
	 			break;
 8000618:	bf00      	nop
	 	}
	 	  //imprimiendo resultado
	 	  lcd_put_cur(1,0);
 800061a:	2100      	movs	r1, #0
 800061c:	2001      	movs	r0, #1
 800061e:	f7ff fe9e 	bl	800035e <lcd_put_cur>
	 	  lcd_send_data('=');
 8000622:	203d      	movs	r0, #61	; 0x3d
 8000624:	f7ff fe54 	bl	80002d0 <lcd_send_data>
	 	  sprintf(result, "%i", resultado);
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <main+0x2a0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4923      	ldr	r1, [pc, #140]	; (80006bc <main+0x27c>)
 8000630:	482c      	ldr	r0, [pc, #176]	; (80006e4 <main+0x2a4>)
 8000632:	f003 fb7b 	bl	8003d2c <siprintf>
	 	  lcd_put_cur(1,1);
 8000636:	2101      	movs	r1, #1
 8000638:	2001      	movs	r0, #1
 800063a:	f7ff fe90 	bl	800035e <lcd_put_cur>
	 	  lcd_send_string(result);
 800063e:	4829      	ldr	r0, [pc, #164]	; (80006e4 <main+0x2a4>)
 8000640:	f7ff fee9 	bl	8000416 <lcd_send_string>
	 	  }

	 	 //Multiplexacion del keypad
	 	 	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000644:	2201      	movs	r2, #1
 8000646:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800064a:	4827      	ldr	r0, [pc, #156]	; (80006e8 <main+0x2a8>)
 800064c:	f000 ff58 	bl	8001500 <HAL_GPIO_WritePin>
	 	 	  HAL_Delay(10);
 8000650:	200a      	movs	r0, #10
 8000652:	f000 fcd9 	bl	8001008 <HAL_Delay>
	 	 	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800065c:	4822      	ldr	r0, [pc, #136]	; (80006e8 <main+0x2a8>)
 800065e:	f000 ff4f 	bl	8001500 <HAL_GPIO_WritePin>

	 	 	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000662:	2201      	movs	r2, #1
 8000664:	2110      	movs	r1, #16
 8000666:	4820      	ldr	r0, [pc, #128]	; (80006e8 <main+0x2a8>)
 8000668:	f000 ff4a 	bl	8001500 <HAL_GPIO_WritePin>
	 	 	  HAL_Delay(10);
 800066c:	200a      	movs	r0, #10
 800066e:	f000 fccb 	bl	8001008 <HAL_Delay>
	 	 	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2110      	movs	r1, #16
 8000676:	481c      	ldr	r0, [pc, #112]	; (80006e8 <main+0x2a8>)
 8000678:	f000 ff42 	bl	8001500 <HAL_GPIO_WritePin>

	 	 	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 800067c:	2201      	movs	r2, #1
 800067e:	2120      	movs	r1, #32
 8000680:	4819      	ldr	r0, [pc, #100]	; (80006e8 <main+0x2a8>)
 8000682:	f000 ff3d 	bl	8001500 <HAL_GPIO_WritePin>
	 	 	  HAL_Delay(10);
 8000686:	200a      	movs	r0, #10
 8000688:	f000 fcbe 	bl	8001008 <HAL_Delay>
	 	 	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 800068c:	2200      	movs	r2, #0
 800068e:	2120      	movs	r1, #32
 8000690:	4815      	ldr	r0, [pc, #84]	; (80006e8 <main+0x2a8>)
 8000692:	f000 ff35 	bl	8001500 <HAL_GPIO_WritePin>

	 	 	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000696:	2201      	movs	r2, #1
 8000698:	2108      	movs	r1, #8
 800069a:	4813      	ldr	r0, [pc, #76]	; (80006e8 <main+0x2a8>)
 800069c:	f000 ff30 	bl	8001500 <HAL_GPIO_WritePin>
	 	 	  HAL_Delay(10);
 80006a0:	200a      	movs	r0, #10
 80006a2:	f000 fcb1 	bl	8001008 <HAL_Delay>
	 	 	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2108      	movs	r1, #8
 80006aa:	480f      	ldr	r0, [pc, #60]	; (80006e8 <main+0x2a8>)
 80006ac:	f000 ff28 	bl	8001500 <HAL_GPIO_WritePin>
	 	  if (valor!=0) {
 80006b0:	e6d8      	b.n	8000464 <main+0x24>
 80006b2:	bf00      	nop
 80006b4:	20000574 	.word	0x20000574
 80006b8:	20000560 	.word	0x20000560
 80006bc:	08004620 	.word	0x08004620
 80006c0:	20000584 	.word	0x20000584
 80006c4:	2000057c 	.word	0x2000057c
 80006c8:	20000580 	.word	0x20000580
 80006cc:	20000564 	.word	0x20000564
 80006d0:	20000568 	.word	0x20000568
 80006d4:	20000581 	.word	0x20000581
 80006d8:	2000056c 	.word	0x2000056c
 80006dc:	20000570 	.word	0x20000570
 80006e0:	20000578 	.word	0x20000578
 80006e4:	20000594 	.word	0x20000594
 80006e8:	48000400 	.word	0x48000400

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b09c      	sub	sp, #112	; 0x70
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006f6:	2228      	movs	r2, #40	; 0x28
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f003 fb0e 	bl	8003d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000710:	463b      	mov	r3, r7
 8000712:	2234      	movs	r2, #52	; 0x34
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f003 fb00 	bl	8003d1c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800071c:	2303      	movs	r3, #3
 800071e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000720:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000724:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072a:	2301      	movs	r3, #1
 800072c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072e:	2310      	movs	r3, #16
 8000730:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	2302      	movs	r3, #2
 8000734:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800073a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800073c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000740:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000742:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000746:	4618      	mov	r0, r3
 8000748:	f001 fb1e 	bl	8001d88 <HAL_RCC_OscConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000752:	f000 f901 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	230f      	movs	r3, #15
 8000758:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075a:	2302      	movs	r3, #2
 800075c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000766:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800076c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000770:	2102      	movs	r1, #2
 8000772:	4618      	mov	r0, r3
 8000774:	f002 fb46 	bl	8002e04 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800077e:	f000 f8eb 	bl	8000958 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000782:	2321      	movs	r3, #33	; 0x21
 8000784:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800078e:	463b      	mov	r3, r7
 8000790:	4618      	mov	r0, r3
 8000792:	f002 fd6d 	bl	8003270 <HAL_RCCEx_PeriphCLKConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800079c:	f000 f8dc 	bl	8000958 <Error_Handler>
  }
}
 80007a0:	bf00      	nop
 80007a2:	3770      	adds	r7, #112	; 0x70
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <MX_I2C1_Init+0x74>)
 80007ae:	4a1c      	ldr	r2, [pc, #112]	; (8000820 <MX_I2C1_Init+0x78>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_I2C1_Init+0x74>)
 80007b4:	4a1b      	ldr	r2, [pc, #108]	; (8000824 <MX_I2C1_Init+0x7c>)
 80007b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_I2C1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_I2C1_Init+0x74>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c4:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_I2C1_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_I2C1_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_I2C1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_I2C1_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_I2C1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e2:	480e      	ldr	r0, [pc, #56]	; (800081c <MX_I2C1_Init+0x74>)
 80007e4:	f000 fea4 	bl	8001530 <HAL_I2C_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ee:	f000 f8b3 	bl	8000958 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007f2:	2100      	movs	r1, #0
 80007f4:	4809      	ldr	r0, [pc, #36]	; (800081c <MX_I2C1_Init+0x74>)
 80007f6:	f001 fa2f 	bl	8001c58 <HAL_I2CEx_ConfigAnalogFilter>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000800:	f000 f8aa 	bl	8000958 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000804:	2100      	movs	r1, #0
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_I2C1_Init+0x74>)
 8000808:	f001 fa71 	bl	8001cee <HAL_I2CEx_ConfigDigitalFilter>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000812:	f000 f8a1 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000484 	.word	0x20000484
 8000820:	40005400 	.word	0x40005400
 8000824:	2000090e 	.word	0x2000090e

08000828 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_USART1_UART_Init+0x58>)
 800082e:	4a15      	ldr	r2, [pc, #84]	; (8000884 <MX_USART1_UART_Init+0x5c>)
 8000830:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_USART1_UART_Init+0x58>)
 8000834:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000838:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_USART1_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_USART1_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_USART1_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USART1_UART_Init+0x58>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_USART1_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USART1_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USART1_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USART1_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_USART1_UART_Init+0x58>)
 800086c:	f002 fe92 	bl	8003594 <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000876:	f000 f86f 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200004d8 	.word	0x200004d8
 8000884:	40013800 	.word	0x40013800

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089e:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	4a2b      	ldr	r2, [pc, #172]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008a8:	6153      	str	r3, [r2, #20]
 80008aa:	4b29      	ldr	r3, [pc, #164]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008b6:	4b26      	ldr	r3, [pc, #152]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	4a25      	ldr	r2, [pc, #148]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008c0:	6153      	str	r3, [r2, #20]
 80008c2:	4b23      	ldr	r3, [pc, #140]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	4b20      	ldr	r3, [pc, #128]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	4a1f      	ldr	r2, [pc, #124]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d8:	6153      	str	r3, [r2, #20]
 80008da:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	4a19      	ldr	r2, [pc, #100]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008f0:	6153      	str	r3, [r2, #20]
 80008f2:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 80008fe:	2200      	movs	r2, #0
 8000900:	f24c 4178 	movw	r1, #50296	; 0xc478
 8000904:	4813      	ldr	r0, [pc, #76]	; (8000954 <MX_GPIO_Init+0xcc>)
 8000906:	f000 fdfb 	bl	8001500 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA2 PA3 PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_10;
 800090a:	f240 530c 	movw	r3, #1292	; 0x50c
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000910:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000924:	f000 fc7a 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB14 PB15 PB3
                           PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 8000928:	f24c 4378 	movw	r3, #50296	; 0xc478
 800092c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_GPIO_Init+0xcc>)
 8000942:	f000 fc6b 	bl	800121c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	; 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000
 8000954:	48000400 	.word	0x48000400

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	e7fe      	b.n	8000960 <Error_Handler+0x8>
	...

08000964 <write_byte>:
};



void write_byte (uint8_t byte)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	e019      	b.n	80009a8 <write_byte+0x44>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 8000974:	2200      	movs	r2, #0
 8000976:	2140      	movs	r1, #64	; 0x40
 8000978:	480f      	ldr	r0, [pc, #60]	; (80009b8 <write_byte+0x54>)
 800097a:	f000 fdc1 	bl	8001500 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000984:	b2db      	uxtb	r3, r3
 8000986:	461a      	mov	r2, r3
 8000988:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800098c:	480a      	ldr	r0, [pc, #40]	; (80009b8 <write_byte+0x54>)
 800098e:	f000 fdb7 	bl	8001500 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 8000998:	2201      	movs	r2, #1
 800099a:	2140      	movs	r1, #64	; 0x40
 800099c:	4806      	ldr	r0, [pc, #24]	; (80009b8 <write_byte+0x54>)
 800099e:	f000 fdaf 	bl	8001500 <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	3301      	adds	r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	2b07      	cmp	r3, #7
 80009ac:	dde2      	ble.n	8000974 <write_byte+0x10>
	}
}
 80009ae:	bf00      	nop
 80009b0:	bf00      	nop
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	48000400 	.word	0x48000400

080009bc <write_max_cmd>:


void write_max_cmd (uint8_t address, uint8_t cmd)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	460a      	mov	r2, r1
 80009c6:	71fb      	strb	r3, [r7, #7]
 80009c8:	4613      	mov	r3, r2
 80009ca:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009d2:	4812      	ldr	r0, [pc, #72]	; (8000a1c <write_max_cmd+0x60>)
 80009d4:	f000 fd94 	bl	8001500 <HAL_GPIO_WritePin>
	for (int i=0;i<num; i++)
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	e00a      	b.n	80009f4 <write_max_cmd+0x38>
	{
		write_byte (address);
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ffbf 	bl	8000964 <write_byte>
		write_byte (cmd); 
 80009e6:	79bb      	ldrb	r3, [r7, #6]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ffbb 	bl	8000964 <write_byte>
	for (int i=0;i<num; i++)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	3301      	adds	r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	ddf1      	ble.n	80009de <write_max_cmd+0x22>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a00:	4806      	ldr	r0, [pc, #24]	; (8000a1c <write_max_cmd+0x60>)
 8000a02:	f000 fd7d 	bl	8001500 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 8000a06:	2201      	movs	r2, #1
 8000a08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <write_max_cmd+0x60>)
 8000a0e:	f000 fd77 	bl	8001500 <HAL_GPIO_WritePin>
}
 8000a12:	bf00      	nop
 8000a14:	3710      	adds	r7, #16
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	48000400 	.word	0x48000400

08000a20 <setled>:


void setled(uint8_t row, uint8_t col, uint8_t value)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	71bb      	strb	r3, [r7, #6]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	717b      	strb	r3, [r7, #5]
  bitWrite(buffer[col], row, value);
 8000a32:	797b      	ldrb	r3, [r7, #5]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d00d      	beq.n	8000a54 <setled+0x34>
 8000a38:	79bb      	ldrb	r3, [r7, #6]
 8000a3a:	4a2e      	ldr	r2, [pc, #184]	; (8000af4 <setled+0xd4>)
 8000a3c:	5cd1      	ldrb	r1, [r2, r3]
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2201      	movs	r2, #1
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	79bb      	ldrb	r3, [r7, #6]
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	b2d1      	uxtb	r1, r2
 8000a4e:	4a29      	ldr	r2, [pc, #164]	; (8000af4 <setled+0xd4>)
 8000a50:	54d1      	strb	r1, [r2, r3]
 8000a52:	e00e      	b.n	8000a72 <setled+0x52>
 8000a54:	79bb      	ldrb	r3, [r7, #6]
 8000a56:	4a27      	ldr	r2, [pc, #156]	; (8000af4 <setled+0xd4>)
 8000a58:	5cd1      	ldrb	r1, [r2, r3]
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	43db      	mvns	r3, r3
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	79bb      	ldrb	r3, [r7, #6]
 8000a6a:	400a      	ands	r2, r1
 8000a6c:	b2d1      	uxtb	r1, r2
 8000a6e:	4a21      	ldr	r2, [pc, #132]	; (8000af4 <setled+0xd4>)
 8000a70:	54d1      	strb	r1, [r2, r3]

	int n = col / 8;
 8000a72:	79bb      	ldrb	r3, [r7, #6]
 8000a74:	08db      	lsrs	r3, r3, #3
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	613b      	str	r3, [r7, #16]
	int c = col % 8;
 8000a7a:	79bb      	ldrb	r3, [r7, #6]
 8000a7c:	f003 0307 	and.w	r3, r3, #7
 8000a80:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW    
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a88:	481b      	ldr	r0, [pc, #108]	; (8000af8 <setled+0xd8>)
 8000a8a:	f000 fd39 	bl	8001500 <HAL_GPIO_WritePin>
	for (int i=0; i<num; i++) 
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	e01b      	b.n	8000acc <setled+0xac>
	{
		if (i == (num-(n+1)))
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	425b      	negs	r3, r3
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d10d      	bne.n	8000aba <setled+0x9a>
		{
			write_byte (((c+1)));
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ff5c 	bl	8000964 <write_byte>
			write_byte (buffer[col]);
 8000aac:	79bb      	ldrb	r3, [r7, #6]
 8000aae:	4a11      	ldr	r2, [pc, #68]	; (8000af4 <setled+0xd4>)
 8000ab0:	5cd3      	ldrb	r3, [r2, r3]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff ff56 	bl	8000964 <write_byte>
 8000ab8:	e005      	b.n	8000ac6 <setled+0xa6>
		}
		else
		{
			write_byte (0);
 8000aba:	2000      	movs	r0, #0
 8000abc:	f7ff ff52 	bl	8000964 <write_byte>
			write_byte (0);
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f7ff ff4f 	bl	8000964 <write_byte>
	for (int i=0; i<num; i++) 
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	dde0      	ble.n	8000a94 <setled+0x74>
		}
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW 
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ad8:	4807      	ldr	r0, [pc, #28]	; (8000af8 <setled+0xd8>)
 8000ada:	f000 fd11 	bl	8001500 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH 
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <setled+0xd8>)
 8000ae6:	f000 fd0b 	bl	8001500 <HAL_GPIO_WritePin>
}
 8000aea:	bf00      	nop
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200005a4 	.word	0x200005a4
 8000af8:	48000400 	.word	0x48000400

08000afc <setrow>:


void setrow(uint8_t row, uint8_t value)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	460a      	mov	r2, r1
 8000b06:	71fb      	strb	r3, [r7, #7]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	71bb      	strb	r3, [r7, #6]
	int n = row / 8;
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	08db      	lsrs	r3, r3, #3
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	617b      	str	r3, [r7, #20]
	int r = row % 8;
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	613b      	str	r3, [r7, #16]
	
	uint8_t store = value;
 8000b1c:	79bb      	ldrb	r3, [r7, #6]
 8000b1e:	73fb      	strb	r3, [r7, #15]
	for (int i=0; i<num; i++) 
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
 8000b24:	e02d      	b.n	8000b82 <setrow+0x86>
	{
		if (i == ((n)))
 8000b26:	69fa      	ldr	r2, [r7, #28]
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d120      	bne.n	8000b70 <setrow+0x74>
		{
//			for (int col=0+(8*n); col<8+(8*n); col++)  // uncomment this if the character looks inverted about X axis
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	00db      	lsls	r3, r3, #3
 8000b32:	3307      	adds	r3, #7
 8000b34:	61bb      	str	r3, [r7, #24]
 8000b36:	e015      	b.n	8000b64 <setrow+0x68>
			{
				bool b = value&0x80;
 8000b38:	79bb      	ldrb	r3, [r7, #6]
 8000b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	bf14      	ite	ne
 8000b42:	2301      	movne	r3, #1
 8000b44:	2300      	moveq	r3, #0
 8000b46:	73bb      	strb	r3, [r7, #14]
				setled (r, col, b);
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	69ba      	ldr	r2, [r7, #24]
 8000b4e:	b2d1      	uxtb	r1, r2
 8000b50:	7bba      	ldrb	r2, [r7, #14]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff ff64 	bl	8000a20 <setled>
				value<<=1;
 8000b58:	79bb      	ldrb	r3, [r7, #6]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	71bb      	strb	r3, [r7, #6]
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	3b01      	subs	r3, #1
 8000b62:	61bb      	str	r3, [r7, #24]
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	00db      	lsls	r3, r3, #3
 8000b68:	69ba      	ldr	r2, [r7, #24]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	dae4      	bge.n	8000b38 <setrow+0x3c>
 8000b6e:	e005      	b.n	8000b7c <setrow+0x80>
			}
		}
		else
		{
			write_byte (0);
 8000b70:	2000      	movs	r0, #0
 8000b72:	f7ff fef7 	bl	8000964 <write_byte>
			write_byte (0);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f7ff fef4 	bl	8000964 <write_byte>
	for (int i=0; i<num; i++) 
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	61fb      	str	r3, [r7, #28]
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	ddce      	ble.n	8000b26 <setrow+0x2a>
		}
	}
	buffer_row[row] = store;
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	4903      	ldr	r1, [pc, #12]	; (8000b98 <setrow+0x9c>)
 8000b8c:	7bfa      	ldrb	r2, [r7, #15]
 8000b8e:	54ca      	strb	r2, [r1, r3]
}
 8000b90:	bf00      	nop
 8000b92:	3720      	adds	r7, #32
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200005f4 	.word	0x200005f4

08000b9c <write_char>:
		


void write_char (char c, uint8_t max)  
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	460a      	mov	r2, r1
 8000ba6:	71fb      	strb	r3, [r7, #7]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	71bb      	strb	r3, [r7, #6]
	int width = CH[8*c];
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	4a16      	ldr	r2, [pc, #88]	; (8000c0c <write_char+0x70>)
 8000bb2:	5cd3      	ldrb	r3, [r2, r3]
 8000bb4:	60fb      	str	r3, [r7, #12]
	int start= (8*c)+1;
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	3301      	adds	r3, #1
 8000bbc:	60bb      	str	r3, [r7, #8]
	int row =6;
 8000bbe:	2306      	movs	r3, #6
 8000bc0:	617b      	str	r3, [r7, #20]
	for (int j=start; j<(start+width); j++) 
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	e016      	b.n	8000bf6 <write_char+0x5a>
//	for (int j=start+7; j>=(start); j--)  // uncomment this if the character looks inverted about Y axis
	{
		setrow (row+(8*(max-1)), CH[j]);
 8000bc8:	79bb      	ldrb	r3, [r7, #6]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	4413      	add	r3, r2
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	490c      	ldr	r1, [pc, #48]	; (8000c0c <write_char+0x70>)
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	440b      	add	r3, r1
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	4619      	mov	r1, r3
 8000be4:	4610      	mov	r0, r2
 8000be6:	f7ff ff89 	bl	8000afc <setrow>
		row--;
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
	for (int j=start; j<(start+width); j++) 
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	dbe2      	blt.n	8000bc8 <write_char+0x2c>
	}
}
 8000c02:	bf00      	nop
 8000c04:	bf00      	nop
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000000 	.word	0x20000000

08000c10 <max_clear>:
}



void max_clear(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
	for (int i=0; i<num*8; i++) 
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	e008      	b.n	8000c2e <max_clear+0x1e>
		setrow(i,0);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff ff6a 	bl	8000afc <setrow>
	for (int i=0; i<num*8; i++) 
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b07      	cmp	r3, #7
 8000c32:	ddf3      	ble.n	8000c1c <max_clear+0xc>
		
	for (int i=0; i<80; i++)
 8000c34:	2300      	movs	r3, #0
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	e00c      	b.n	8000c54 <max_clear+0x44>
	{
		buffer[i] = 0;
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <max_clear+0x54>)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
	  buffer_row[i] = 0;
 8000c44:	4a08      	ldr	r2, [pc, #32]	; (8000c68 <max_clear+0x58>)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	4413      	add	r3, r2
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	3301      	adds	r3, #1
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	2b4f      	cmp	r3, #79	; 0x4f
 8000c58:	ddef      	ble.n	8000c3a <max_clear+0x2a>
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200005a4 	.word	0x200005a4
 8000c68:	200005f4 	.word	0x200005f4

08000c6c <max_init>:
}



void max_init (uint8_t brightness)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
	write_max_cmd(0x09, 0x00);       //  no decoding
 8000c76:	2100      	movs	r1, #0
 8000c78:	2009      	movs	r0, #9
 8000c7a:	f7ff fe9f 	bl	80009bc <write_max_cmd>
	write_max_cmd(0x0b, 0x07);       //  scan limit = 8 LEDs
 8000c7e:	2107      	movs	r1, #7
 8000c80:	200b      	movs	r0, #11
 8000c82:	f7ff fe9b 	bl	80009bc <write_max_cmd>
	write_max_cmd(0x0c, 0x01);       //  power down =0,normal mode = 1
 8000c86:	2101      	movs	r1, #1
 8000c88:	200c      	movs	r0, #12
 8000c8a:	f7ff fe97 	bl	80009bc <write_max_cmd>
	write_max_cmd(0x0f, 0x00);       //  no test display
 8000c8e:	2100      	movs	r1, #0
 8000c90:	200f      	movs	r0, #15
 8000c92:	f7ff fe93 	bl	80009bc <write_max_cmd>
	
	max_clear ();
 8000c96:	f7ff ffbb 	bl	8000c10 <max_clear>
	
	write_max_cmd(0x0a, brightness);       //  brightness intensity
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	200a      	movs	r0, #10
 8000ca0:	f7ff fe8c 	bl	80009bc <write_max_cmd>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <HAL_MspInit+0x44>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <HAL_MspInit+0x44>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6193      	str	r3, [r2, #24]
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <HAL_MspInit+0x44>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <HAL_MspInit+0x44>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	4a08      	ldr	r2, [pc, #32]	; (8000cf0 <HAL_MspInit+0x44>)
 8000cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd4:	61d3      	str	r3, [r2, #28]
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_MspInit+0x44>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ce2:	2007      	movs	r0, #7
 8000ce4:	f000 fa66 	bl	80011b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a17      	ldr	r2, [pc, #92]	; (8000d70 <HAL_I2C_MspInit+0x7c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d128      	bne.n	8000d68 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <HAL_I2C_MspInit+0x80>)
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	4a16      	ldr	r2, [pc, #88]	; (8000d74 <HAL_I2C_MspInit+0x80>)
 8000d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d20:	6153      	str	r3, [r2, #20]
 8000d22:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <HAL_I2C_MspInit+0x80>)
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d34:	2312      	movs	r3, #18
 8000d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d40:	2304      	movs	r3, #4
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480b      	ldr	r0, [pc, #44]	; (8000d78 <HAL_I2C_MspInit+0x84>)
 8000d4c:	f000 fa66 	bl	800121c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <HAL_I2C_MspInit+0x80>)
 8000d52:	69db      	ldr	r3, [r3, #28]
 8000d54:	4a07      	ldr	r2, [pc, #28]	; (8000d74 <HAL_I2C_MspInit+0x80>)
 8000d56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d5a:	61d3      	str	r3, [r2, #28]
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <HAL_I2C_MspInit+0x80>)
 8000d5e:	69db      	ldr	r3, [r3, #28]
 8000d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d68:	bf00      	nop
 8000d6a:	3728      	adds	r7, #40	; 0x28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40005400 	.word	0x40005400
 8000d74:	40021000 	.word	0x40021000
 8000d78:	48000400 	.word	0x48000400

08000d7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	; 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a17      	ldr	r2, [pc, #92]	; (8000df8 <HAL_UART_MspInit+0x7c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d127      	bne.n	8000dee <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d9e:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <HAL_UART_MspInit+0x80>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	4a16      	ldr	r2, [pc, #88]	; (8000dfc <HAL_UART_MspInit+0x80>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6193      	str	r3, [r2, #24]
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <HAL_UART_MspInit+0x80>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <HAL_UART_MspInit+0x80>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	4a10      	ldr	r2, [pc, #64]	; (8000dfc <HAL_UART_MspInit+0x80>)
 8000dbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dc0:	6153      	str	r3, [r2, #20]
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_UART_MspInit+0x80>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000dce:	2330      	movs	r3, #48	; 0x30
 8000dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dde:	2307      	movs	r3, #7
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <HAL_UART_MspInit+0x84>)
 8000dea:	f000 fa17 	bl	800121c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dee:	bf00      	nop
 8000df0:	3728      	adds	r7, #40	; 0x28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40013800 	.word	0x40013800
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	48000800 	.word	0x48000800

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <NMI_Handler+0x4>

08000e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <MemManage_Handler+0x4>

08000e16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e50:	f000 f8ba 	bl	8000fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e60:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <_sbrk+0x5c>)
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <_sbrk+0x60>)
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d102      	bne.n	8000e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <_sbrk+0x64>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <_sbrk+0x68>)
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d207      	bcs.n	8000e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e88:	f002 ff1e 	bl	8003cc8 <__errno>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	220c      	movs	r2, #12
 8000e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	e009      	b.n	8000eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e9e:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4a05      	ldr	r2, [pc, #20]	; (8000ebc <_sbrk+0x64>)
 8000ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20004000 	.word	0x20004000
 8000eb8:	00000400 	.word	0x00000400
 8000ebc:	20000644 	.word	0x20000644
 8000ec0:	20000660 	.word	0x20000660

08000ec4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <SystemInit+0x20>)
 8000eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ece:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <SystemInit+0x20>)
 8000ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f20 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eec:	f7ff ffea 	bl	8000ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ef2:	490d      	ldr	r1, [pc, #52]	; (8000f28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <LoopForever+0xe>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef8:	e002      	b.n	8000f00 <LoopCopyDataInit>

08000efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efe:	3304      	adds	r3, #4

08000f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f04:	d3f9      	bcc.n	8000efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f08:	4c0a      	ldr	r4, [pc, #40]	; (8000f34 <LoopForever+0x16>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f0c:	e001      	b.n	8000f12 <LoopFillZerobss>

08000f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f10:	3204      	adds	r2, #4

08000f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f14:	d3fb      	bcc.n	8000f0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f16:	f002 fedd 	bl	8003cd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f1a:	f7ff fa91 	bl	8000440 <main>

08000f1e <LoopForever>:

LoopForever:
    b LoopForever
 8000f1e:	e7fe      	b.n	8000f1e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f20:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f28:	20000468 	.word	0x20000468
  ldr r2, =_sidata
 8000f2c:	08004698 	.word	0x08004698
  ldr r2, =_sbss
 8000f30:	20000468 	.word	0x20000468
  ldr r4, =_ebss
 8000f34:	2000065c 	.word	0x2000065c

08000f38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC1_IRQHandler>
	...

08000f3c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <HAL_Init+0x28>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a07      	ldr	r2, [pc, #28]	; (8000f64 <HAL_Init+0x28>)
 8000f46:	f043 0310 	orr.w	r3, r3, #16
 8000f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	f000 f931 	bl	80011b4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f52:	2000      	movs	r0, #0
 8000f54:	f000 f808 	bl	8000f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f58:	f7ff fea8 	bl	8000cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40022000 	.word	0x40022000

08000f68 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_InitTick+0x54>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_InitTick+0x58>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 f93b 	bl	8001202 <HAL_SYSTICK_Config>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00e      	b.n	8000fb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b0f      	cmp	r3, #15
 8000f9a:	d80a      	bhi.n	8000fb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f000 f911 	bl	80011ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa8:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <HAL_InitTick+0x5c>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e000      	b.n	8000fb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200003f8 	.word	0x200003f8
 8000fc0:	20000400 	.word	0x20000400
 8000fc4:	200003fc 	.word	0x200003fc

08000fc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_IncTick+0x20>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x24>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <HAL_IncTick+0x24>)
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000400 	.word	0x20000400
 8000fec:	20000648 	.word	0x20000648

08000ff0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <HAL_GetTick+0x14>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000648 	.word	0x20000648

08001008 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001010:	f7ff ffee 	bl	8000ff0 <HAL_GetTick>
 8001014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001020:	d005      	beq.n	800102e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_Delay+0x44>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800102e:	bf00      	nop
 8001030:	f7ff ffde 	bl	8000ff0 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	429a      	cmp	r2, r3
 800103e:	d8f7      	bhi.n	8001030 <HAL_Delay+0x28>
  {
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000400 	.word	0x20000400

08001050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	60d3      	str	r3, [r2, #12]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	db0a      	blt.n	80010de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	490c      	ldr	r1, [pc, #48]	; (8001100 <__NVIC_SetPriority+0x4c>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	0112      	lsls	r2, r2, #4
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	440b      	add	r3, r1
 80010d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010dc:	e00a      	b.n	80010f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4908      	ldr	r1, [pc, #32]	; (8001104 <__NVIC_SetPriority+0x50>)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	3b04      	subs	r3, #4
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	440b      	add	r3, r1
 80010f2:	761a      	strb	r2, [r3, #24]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000e100 	.word	0xe000e100
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f1c3 0307 	rsb	r3, r3, #7
 8001122:	2b04      	cmp	r3, #4
 8001124:	bf28      	it	cs
 8001126:	2304      	movcs	r3, #4
 8001128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3304      	adds	r3, #4
 800112e:	2b06      	cmp	r3, #6
 8001130:	d902      	bls.n	8001138 <NVIC_EncodePriority+0x30>
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3b03      	subs	r3, #3
 8001136:	e000      	b.n	800113a <NVIC_EncodePriority+0x32>
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	f04f 32ff 	mov.w	r2, #4294967295
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43da      	mvns	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	401a      	ands	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001150:	f04f 31ff 	mov.w	r1, #4294967295
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
 800115a:	43d9      	mvns	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	4313      	orrs	r3, r2
         );
}
 8001162:	4618      	mov	r0, r3
 8001164:	3724      	adds	r7, #36	; 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3b01      	subs	r3, #1
 800117c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001180:	d301      	bcc.n	8001186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001182:	2301      	movs	r3, #1
 8001184:	e00f      	b.n	80011a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001186:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <SysTick_Config+0x40>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118e:	210f      	movs	r1, #15
 8001190:	f04f 30ff 	mov.w	r0, #4294967295
 8001194:	f7ff ff8e 	bl	80010b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <SysTick_Config+0x40>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119e:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <SysTick_Config+0x40>)
 80011a0:	2207      	movs	r2, #7
 80011a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	e000e010 	.word	0xe000e010

080011b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ff47 	bl	8001050 <__NVIC_SetPriorityGrouping>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
 80011d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011dc:	f7ff ff5c 	bl	8001098 <__NVIC_GetPriorityGrouping>
 80011e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	68b9      	ldr	r1, [r7, #8]
 80011e6:	6978      	ldr	r0, [r7, #20]
 80011e8:	f7ff ff8e 	bl	8001108 <NVIC_EncodePriority>
 80011ec:	4602      	mov	r2, r0
 80011ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f2:	4611      	mov	r1, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff5d 	bl	80010b4 <__NVIC_SetPriority>
}
 80011fa:	bf00      	nop
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ffb0 	bl	8001170 <SysTick_Config>
 8001210:	4603      	mov	r3, r0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800121c:	b480      	push	{r7}
 800121e:	b087      	sub	sp, #28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122a:	e14e      	b.n	80014ca <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	2101      	movs	r1, #1
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	4013      	ands	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	f000 8140 	beq.w	80014c4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b01      	cmp	r3, #1
 800124e:	d005      	beq.n	800125c <HAL_GPIO_Init+0x40>
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d130      	bne.n	80012be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	68da      	ldr	r2, [r3, #12]
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001292:	2201      	movs	r2, #1
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	091b      	lsrs	r3, r3, #4
 80012a8:	f003 0201 	and.w	r2, r3, #1
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d017      	beq.n	80012fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	2203      	movs	r2, #3
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d123      	bne.n	800134e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	08da      	lsrs	r2, r3, #3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3208      	adds	r2, #8
 800130e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001312:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	220f      	movs	r2, #15
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	691a      	ldr	r2, [r3, #16]
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f003 0307 	and.w	r3, r3, #7
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	08da      	lsrs	r2, r3, #3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3208      	adds	r2, #8
 8001348:	6939      	ldr	r1, [r7, #16]
 800134a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	2203      	movs	r2, #3
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 0203 	and.w	r2, r3, #3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 809a 	beq.w	80014c4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001390:	4b55      	ldr	r3, [pc, #340]	; (80014e8 <HAL_GPIO_Init+0x2cc>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a54      	ldr	r2, [pc, #336]	; (80014e8 <HAL_GPIO_Init+0x2cc>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b52      	ldr	r3, [pc, #328]	; (80014e8 <HAL_GPIO_Init+0x2cc>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013a8:	4a50      	ldr	r2, [pc, #320]	; (80014ec <HAL_GPIO_Init+0x2d0>)
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	089b      	lsrs	r3, r3, #2
 80013ae:	3302      	adds	r3, #2
 80013b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	220f      	movs	r2, #15
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013d2:	d013      	beq.n	80013fc <HAL_GPIO_Init+0x1e0>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a46      	ldr	r2, [pc, #280]	; (80014f0 <HAL_GPIO_Init+0x2d4>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d00d      	beq.n	80013f8 <HAL_GPIO_Init+0x1dc>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a45      	ldr	r2, [pc, #276]	; (80014f4 <HAL_GPIO_Init+0x2d8>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d007      	beq.n	80013f4 <HAL_GPIO_Init+0x1d8>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a44      	ldr	r2, [pc, #272]	; (80014f8 <HAL_GPIO_Init+0x2dc>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d101      	bne.n	80013f0 <HAL_GPIO_Init+0x1d4>
 80013ec:	2303      	movs	r3, #3
 80013ee:	e006      	b.n	80013fe <HAL_GPIO_Init+0x1e2>
 80013f0:	2305      	movs	r3, #5
 80013f2:	e004      	b.n	80013fe <HAL_GPIO_Init+0x1e2>
 80013f4:	2302      	movs	r3, #2
 80013f6:	e002      	b.n	80013fe <HAL_GPIO_Init+0x1e2>
 80013f8:	2301      	movs	r3, #1
 80013fa:	e000      	b.n	80013fe <HAL_GPIO_Init+0x1e2>
 80013fc:	2300      	movs	r3, #0
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	f002 0203 	and.w	r2, r2, #3
 8001404:	0092      	lsls	r2, r2, #2
 8001406:	4093      	lsls	r3, r2
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800140e:	4937      	ldr	r1, [pc, #220]	; (80014ec <HAL_GPIO_Init+0x2d0>)
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	3302      	adds	r3, #2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141c:	4b37      	ldr	r3, [pc, #220]	; (80014fc <HAL_GPIO_Init+0x2e0>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	43db      	mvns	r3, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001440:	4a2e      	ldr	r2, [pc, #184]	; (80014fc <HAL_GPIO_Init+0x2e0>)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001446:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <HAL_GPIO_Init+0x2e0>)
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	43db      	mvns	r3, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800146a:	4a24      	ldr	r2, [pc, #144]	; (80014fc <HAL_GPIO_Init+0x2e0>)
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <HAL_GPIO_Init+0x2e0>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	43db      	mvns	r3, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001494:	4a19      	ldr	r2, [pc, #100]	; (80014fc <HAL_GPIO_Init+0x2e0>)
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_GPIO_Init+0x2e0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014be:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <HAL_GPIO_Init+0x2e0>)
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	3301      	adds	r3, #1
 80014c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	fa22 f303 	lsr.w	r3, r2, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f47f aea9 	bne.w	800122c <HAL_GPIO_Init+0x10>
  }
}
 80014da:	bf00      	nop
 80014dc:	bf00      	nop
 80014de:	371c      	adds	r7, #28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40010000 	.word	0x40010000
 80014f0:	48000400 	.word	0x48000400
 80014f4:	48000800 	.word	0x48000800
 80014f8:	48000c00 	.word	0x48000c00
 80014fc:	40010400 	.word	0x40010400

08001500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	807b      	strh	r3, [r7, #2]
 800150c:	4613      	mov	r3, r2
 800150e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001510:	787b      	ldrb	r3, [r7, #1]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001516:	887a      	ldrh	r2, [r7, #2]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800151c:	e002      	b.n	8001524 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e081      	b.n	8001646 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d106      	bne.n	800155c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff fbcc 	bl	8000cf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2224      	movs	r2, #36	; 0x24
 8001560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 0201 	bic.w	r2, r2, #1
 8001572:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001580:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001590:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d107      	bne.n	80015aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	e006      	b.n	80015b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80015b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d104      	bne.n	80015ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68da      	ldr	r2, [r3, #12]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691a      	ldr	r2, [r3, #16]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69d9      	ldr	r1, [r3, #28]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a1a      	ldr	r2, [r3, #32]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 0201 	orr.w	r2, r2, #1
 8001626:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2220      	movs	r2, #32
 8001632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af02      	add	r7, sp, #8
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	607a      	str	r2, [r7, #4]
 800165a:	461a      	mov	r2, r3
 800165c:	460b      	mov	r3, r1
 800165e:	817b      	strh	r3, [r7, #10]
 8001660:	4613      	mov	r3, r2
 8001662:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b20      	cmp	r3, #32
 800166e:	f040 80da 	bne.w	8001826 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001678:	2b01      	cmp	r3, #1
 800167a:	d101      	bne.n	8001680 <HAL_I2C_Master_Transmit+0x30>
 800167c:	2302      	movs	r3, #2
 800167e:	e0d3      	b.n	8001828 <HAL_I2C_Master_Transmit+0x1d8>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001688:	f7ff fcb2 	bl	8000ff0 <HAL_GetTick>
 800168c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2319      	movs	r3, #25
 8001694:	2201      	movs	r2, #1
 8001696:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	f000 f8f0 	bl	8001880 <I2C_WaitOnFlagUntilTimeout>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e0be      	b.n	8001828 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2221      	movs	r2, #33	; 0x21
 80016ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2210      	movs	r2, #16
 80016b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	893a      	ldrh	r2, [r7, #8]
 80016ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	2bff      	cmp	r3, #255	; 0xff
 80016da:	d90e      	bls.n	80016fa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	22ff      	movs	r2, #255	; 0xff
 80016e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	8979      	ldrh	r1, [r7, #10]
 80016ea:	4b51      	ldr	r3, [pc, #324]	; (8001830 <HAL_I2C_Master_Transmit+0x1e0>)
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f000 fa7e 	bl	8001bf4 <I2C_TransferConfig>
 80016f8:	e06c      	b.n	80017d4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016fe:	b29a      	uxth	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001708:	b2da      	uxtb	r2, r3
 800170a:	8979      	ldrh	r1, [r7, #10]
 800170c:	4b48      	ldr	r3, [pc, #288]	; (8001830 <HAL_I2C_Master_Transmit+0x1e0>)
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f000 fa6d 	bl	8001bf4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800171a:	e05b      	b.n	80017d4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	6a39      	ldr	r1, [r7, #32]
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f000 f8fc 	bl	800191e <I2C_WaitOnTXISFlagUntilTimeout>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e07b      	b.n	8001828 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	781a      	ldrb	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	1c5a      	adds	r2, r3, #1
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800174a:	b29b      	uxth	r3, r3
 800174c:	3b01      	subs	r3, #1
 800174e:	b29a      	uxth	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001758:	3b01      	subs	r3, #1
 800175a:	b29a      	uxth	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001764:	b29b      	uxth	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d034      	beq.n	80017d4 <HAL_I2C_Master_Transmit+0x184>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800176e:	2b00      	cmp	r3, #0
 8001770:	d130      	bne.n	80017d4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	6a3b      	ldr	r3, [r7, #32]
 8001778:	2200      	movs	r2, #0
 800177a:	2180      	movs	r1, #128	; 0x80
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f000 f87f 	bl	8001880 <I2C_WaitOnFlagUntilTimeout>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e04d      	b.n	8001828 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001790:	b29b      	uxth	r3, r3
 8001792:	2bff      	cmp	r3, #255	; 0xff
 8001794:	d90e      	bls.n	80017b4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	22ff      	movs	r2, #255	; 0xff
 800179a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	8979      	ldrh	r1, [r7, #10]
 80017a4:	2300      	movs	r3, #0
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f000 fa21 	bl	8001bf4 <I2C_TransferConfig>
 80017b2:	e00f      	b.n	80017d4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	8979      	ldrh	r1, [r7, #10]
 80017c6:	2300      	movs	r3, #0
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f000 fa10 	bl	8001bf4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d8:	b29b      	uxth	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d19e      	bne.n	800171c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	6a39      	ldr	r1, [r7, #32]
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 f8e2 	bl	80019ac <I2C_WaitOnSTOPFlagUntilTimeout>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e01a      	b.n	8001828 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2220      	movs	r2, #32
 80017f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6859      	ldr	r1, [r3, #4]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_I2C_Master_Transmit+0x1e4>)
 8001806:	400b      	ands	r3, r1
 8001808:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2220      	movs	r2, #32
 800180e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001822:	2300      	movs	r3, #0
 8001824:	e000      	b.n	8001828 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001826:	2302      	movs	r3, #2
  }
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	80002000 	.word	0x80002000
 8001834:	fe00e800 	.word	0xfe00e800

08001838 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b02      	cmp	r3, #2
 800184c:	d103      	bne.n	8001856 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2200      	movs	r2, #0
 8001854:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b01      	cmp	r3, #1
 8001862:	d007      	beq.n	8001874 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	699a      	ldr	r2, [r3, #24]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0201 	orr.w	r2, r2, #1
 8001872:	619a      	str	r2, [r3, #24]
  }
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	4613      	mov	r3, r2
 800188e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001890:	e031      	b.n	80018f6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001898:	d02d      	beq.n	80018f6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800189a:	f7ff fba9 	bl	8000ff0 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d302      	bcc.n	80018b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d122      	bne.n	80018f6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	699a      	ldr	r2, [r3, #24]
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	4013      	ands	r3, r2
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	429a      	cmp	r2, r3
 80018be:	bf0c      	ite	eq
 80018c0:	2301      	moveq	r3, #1
 80018c2:	2300      	movne	r3, #0
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	461a      	mov	r2, r3
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d113      	bne.n	80018f6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	f043 0220 	orr.w	r2, r3, #32
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2220      	movs	r2, #32
 80018de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00f      	b.n	8001916 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	699a      	ldr	r2, [r3, #24]
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	4013      	ands	r3, r2
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	429a      	cmp	r2, r3
 8001904:	bf0c      	ite	eq
 8001906:	2301      	moveq	r3, #1
 8001908:	2300      	movne	r3, #0
 800190a:	b2db      	uxtb	r3, r3
 800190c:	461a      	mov	r2, r3
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	429a      	cmp	r2, r3
 8001912:	d0be      	beq.n	8001892 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800192a:	e033      	b.n	8001994 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	68b9      	ldr	r1, [r7, #8]
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f000 f87f 	bl	8001a34 <I2C_IsErrorOccurred>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e031      	b.n	80019a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001946:	d025      	beq.n	8001994 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001948:	f7ff fb52 	bl	8000ff0 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	429a      	cmp	r2, r3
 8001956:	d302      	bcc.n	800195e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d11a      	bne.n	8001994 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b02      	cmp	r3, #2
 800196a:	d013      	beq.n	8001994 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001970:	f043 0220 	orr.w	r2, r3, #32
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2220      	movs	r2, #32
 800197c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e007      	b.n	80019a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d1c4      	bne.n	800192c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019b8:	e02f      	b.n	8001a1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f000 f838 	bl	8001a34 <I2C_IsErrorOccurred>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e02d      	b.n	8001a2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ce:	f7ff fb0f 	bl	8000ff0 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	68ba      	ldr	r2, [r7, #8]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d302      	bcc.n	80019e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d11a      	bne.n	8001a1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	f003 0320 	and.w	r3, r3, #32
 80019ee:	2b20      	cmp	r3, #32
 80019f0:	d013      	beq.n	8001a1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	f043 0220 	orr.w	r2, r3, #32
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2220      	movs	r2, #32
 8001a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e007      	b.n	8001a2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	f003 0320 	and.w	r3, r3, #32
 8001a24:	2b20      	cmp	r3, #32
 8001a26:	d1c8      	bne.n	80019ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	; 0x28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	f003 0310 	and.w	r3, r3, #16
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d068      	beq.n	8001b32 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2210      	movs	r2, #16
 8001a66:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a68:	e049      	b.n	8001afe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a70:	d045      	beq.n	8001afe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a72:	f7ff fabd 	bl	8000ff0 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d302      	bcc.n	8001a88 <I2C_IsErrorOccurred+0x54>
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d13a      	bne.n	8001afe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a9a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aaa:	d121      	bne.n	8001af0 <I2C_IsErrorOccurred+0xbc>
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ab2:	d01d      	beq.n	8001af0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001ab4:	7cfb      	ldrb	r3, [r7, #19]
 8001ab6:	2b20      	cmp	r3, #32
 8001ab8:	d01a      	beq.n	8001af0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ac8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001aca:	f7ff fa91 	bl	8000ff0 <HAL_GetTick>
 8001ace:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ad0:	e00e      	b.n	8001af0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001ad2:	f7ff fa8d 	bl	8000ff0 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b19      	cmp	r3, #25
 8001ade:	d907      	bls.n	8001af0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001ae0:	6a3b      	ldr	r3, [r7, #32]
 8001ae2:	f043 0320 	orr.w	r3, r3, #32
 8001ae6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001aee:	e006      	b.n	8001afe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	f003 0320 	and.w	r3, r3, #32
 8001afa:	2b20      	cmp	r3, #32
 8001afc:	d1e9      	bne.n	8001ad2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f003 0320 	and.w	r3, r3, #32
 8001b08:	2b20      	cmp	r3, #32
 8001b0a:	d003      	beq.n	8001b14 <I2C_IsErrorOccurred+0xe0>
 8001b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0aa      	beq.n	8001a6a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d103      	bne.n	8001b24 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2220      	movs	r2, #32
 8001b22:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	f043 0304 	orr.w	r3, r3, #4
 8001b2a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00b      	beq.n	8001b5c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00b      	beq.n	8001b7e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	f043 0308 	orr.w	r3, r3, #8
 8001b6c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00b      	beq.n	8001ba0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	f043 0302 	orr.w	r3, r3, #2
 8001b8e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d01c      	beq.n	8001be2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f7ff fe45 	bl	8001838 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6859      	ldr	r1, [r3, #4]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <I2C_IsErrorOccurred+0x1bc>)
 8001bba:	400b      	ands	r3, r1
 8001bbc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2220      	movs	r2, #32
 8001bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001be2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3728      	adds	r7, #40	; 0x28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	fe00e800 	.word	0xfe00e800

08001bf4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b087      	sub	sp, #28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	817b      	strh	r3, [r7, #10]
 8001c02:	4613      	mov	r3, r2
 8001c04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c06:	897b      	ldrh	r3, [r7, #10]
 8001c08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c0c:	7a7b      	ldrb	r3, [r7, #9]
 8001c0e:	041b      	lsls	r3, r3, #16
 8001c10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c14:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c22:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	0d5b      	lsrs	r3, r3, #21
 8001c2e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <I2C_TransferConfig+0x60>)
 8001c34:	430b      	orrs	r3, r1
 8001c36:	43db      	mvns	r3, r3
 8001c38:	ea02 0103 	and.w	r1, r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001c46:	bf00      	nop
 8001c48:	371c      	adds	r7, #28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	03ff63ff 	.word	0x03ff63ff

08001c58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b20      	cmp	r3, #32
 8001c6c:	d138      	bne.n	8001ce0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e032      	b.n	8001ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2224      	movs	r2, #36	; 0x24
 8001c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 0201 	bic.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001caa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6819      	ldr	r1, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	e000      	b.n	8001ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ce0:	2302      	movs	r3, #2
  }
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b085      	sub	sp, #20
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	d139      	bne.n	8001d78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d101      	bne.n	8001d12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e033      	b.n	8001d7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2224      	movs	r2, #36	; 0x24
 8001d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0201 	bic.w	r2, r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2220      	movs	r2, #32
 8001d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	e000      	b.n	8001d7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d78:	2302      	movs	r3, #2
  }
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d98:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d102      	bne.n	8001dae <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	f001 b823 	b.w	8002df4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 817d 	beq.w	80020be <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001dc4:	4bbc      	ldr	r3, [pc, #752]	; (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 030c 	and.w	r3, r3, #12
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d00c      	beq.n	8001dea <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dd0:	4bb9      	ldr	r3, [pc, #740]	; (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d15c      	bne.n	8001e96 <HAL_RCC_OscConfig+0x10e>
 8001ddc:	4bb6      	ldr	r3, [pc, #728]	; (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de8:	d155      	bne.n	8001e96 <HAL_RCC_OscConfig+0x10e>
 8001dea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dee:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001dfe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e02:	fab3 f383 	clz	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	095b      	lsrs	r3, r3, #5
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d102      	bne.n	8001e1c <HAL_RCC_OscConfig+0x94>
 8001e16:	4ba8      	ldr	r3, [pc, #672]	; (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	e015      	b.n	8001e48 <HAL_RCC_OscConfig+0xc0>
 8001e1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e20:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e34:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001e38:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e3c:	fa93 f3a3 	rbit	r3, r3
 8001e40:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001e44:	4b9c      	ldr	r3, [pc, #624]	; (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e4c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001e50:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001e54:	fa92 f2a2 	rbit	r2, r2
 8001e58:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001e5c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001e60:	fab2 f282 	clz	r2, r2
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	f042 0220 	orr.w	r2, r2, #32
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	f002 021f 	and.w	r2, r2, #31
 8001e70:	2101      	movs	r1, #1
 8001e72:	fa01 f202 	lsl.w	r2, r1, r2
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 811f 	beq.w	80020bc <HAL_RCC_OscConfig+0x334>
 8001e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f040 8116 	bne.w	80020bc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	f000 bfaf 	b.w	8002df4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x12e>
 8001ea8:	4b83      	ldr	r3, [pc, #524]	; (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a82      	ldr	r2, [pc, #520]	; (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	e036      	b.n	8001f24 <HAL_RCC_OscConfig+0x19c>
 8001eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10c      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x158>
 8001ec6:	4b7c      	ldr	r3, [pc, #496]	; (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a7b      	ldr	r2, [pc, #492]	; (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	4b79      	ldr	r3, [pc, #484]	; (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a78      	ldr	r2, [pc, #480]	; (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001ed8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	e021      	b.n	8001f24 <HAL_RCC_OscConfig+0x19c>
 8001ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x184>
 8001ef2:	4b71      	ldr	r3, [pc, #452]	; (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a70      	ldr	r2, [pc, #448]	; (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	4b6e      	ldr	r3, [pc, #440]	; (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a6d      	ldr	r2, [pc, #436]	; (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e00b      	b.n	8001f24 <HAL_RCC_OscConfig+0x19c>
 8001f0c:	4b6a      	ldr	r3, [pc, #424]	; (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a69      	ldr	r2, [pc, #420]	; (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	4b67      	ldr	r3, [pc, #412]	; (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a66      	ldr	r2, [pc, #408]	; (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f22:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f24:	4b64      	ldr	r3, [pc, #400]	; (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f28:	f023 020f 	bic.w	r2, r3, #15
 8001f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	495f      	ldr	r1, [pc, #380]	; (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d059      	beq.n	8002002 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4e:	f7ff f84f 	bl	8000ff0 <HAL_GetTick>
 8001f52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	e00a      	b.n	8001f6e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f58:	f7ff f84a 	bl	8000ff0 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b64      	cmp	r3, #100	; 0x64
 8001f66:	d902      	bls.n	8001f6e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	f000 bf43 	b.w	8002df4 <HAL_RCC_OscConfig+0x106c>
 8001f6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f72:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001f82:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f86:	fab3 f383 	clz	r3, r3
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	095b      	lsrs	r3, r3, #5
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d102      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x218>
 8001f9a:	4b47      	ldr	r3, [pc, #284]	; (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	e015      	b.n	8001fcc <HAL_RCC_OscConfig+0x244>
 8001fa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001fac:	fa93 f3a3 	rbit	r3, r3
 8001fb0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001fb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001fbc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001fc0:	fa93 f3a3 	rbit	r3, r3
 8001fc4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001fc8:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fd0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001fd4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001fd8:	fa92 f2a2 	rbit	r2, r2
 8001fdc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001fe0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001fe4:	fab2 f282 	clz	r2, r2
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	f042 0220 	orr.w	r2, r2, #32
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	f002 021f 	and.w	r2, r2, #31
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0ab      	beq.n	8001f58 <HAL_RCC_OscConfig+0x1d0>
 8002000:	e05d      	b.n	80020be <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002002:	f7fe fff5 	bl	8000ff0 <HAL_GetTick>
 8002006:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200a:	e00a      	b.n	8002022 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800200c:	f7fe fff0 	bl	8000ff0 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b64      	cmp	r3, #100	; 0x64
 800201a:	d902      	bls.n	8002022 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	f000 bee9 	b.w	8002df4 <HAL_RCC_OscConfig+0x106c>
 8002022:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002026:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800202e:	fa93 f3a3 	rbit	r3, r3
 8002032:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002036:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	095b      	lsrs	r3, r3, #5
 8002042:	b2db      	uxtb	r3, r3
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b01      	cmp	r3, #1
 800204c:	d102      	bne.n	8002054 <HAL_RCC_OscConfig+0x2cc>
 800204e:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <HAL_RCC_OscConfig+0x330>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	e015      	b.n	8002080 <HAL_RCC_OscConfig+0x2f8>
 8002054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002058:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002068:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800206c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002070:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800207c:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <HAL_RCC_OscConfig+0x330>)
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002084:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002088:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800208c:	fa92 f2a2 	rbit	r2, r2
 8002090:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002094:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002098:	fab2 f282 	clz	r2, r2
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	f042 0220 	orr.w	r2, r2, #32
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	f002 021f 	and.w	r2, r2, #31
 80020a8:	2101      	movs	r1, #1
 80020aa:	fa01 f202 	lsl.w	r2, r1, r2
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1ab      	bne.n	800200c <HAL_RCC_OscConfig+0x284>
 80020b4:	e003      	b.n	80020be <HAL_RCC_OscConfig+0x336>
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 817d 	beq.w	80023ce <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020d4:	4ba6      	ldr	r3, [pc, #664]	; (8002370 <HAL_RCC_OscConfig+0x5e8>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 030c 	and.w	r3, r3, #12
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00b      	beq.n	80020f8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020e0:	4ba3      	ldr	r3, [pc, #652]	; (8002370 <HAL_RCC_OscConfig+0x5e8>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d172      	bne.n	80021d2 <HAL_RCC_OscConfig+0x44a>
 80020ec:	4ba0      	ldr	r3, [pc, #640]	; (8002370 <HAL_RCC_OscConfig+0x5e8>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d16c      	bne.n	80021d2 <HAL_RCC_OscConfig+0x44a>
 80020f8:	2302      	movs	r3, #2
 80020fa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800210a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	095b      	lsrs	r3, r3, #5
 8002116:	b2db      	uxtb	r3, r3
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b01      	cmp	r3, #1
 8002120:	d102      	bne.n	8002128 <HAL_RCC_OscConfig+0x3a0>
 8002122:	4b93      	ldr	r3, [pc, #588]	; (8002370 <HAL_RCC_OscConfig+0x5e8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	e013      	b.n	8002150 <HAL_RCC_OscConfig+0x3c8>
 8002128:	2302      	movs	r3, #2
 800212a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002132:	fa93 f3a3 	rbit	r3, r3
 8002136:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800213a:	2302      	movs	r3, #2
 800213c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002140:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002144:	fa93 f3a3 	rbit	r3, r3
 8002148:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800214c:	4b88      	ldr	r3, [pc, #544]	; (8002370 <HAL_RCC_OscConfig+0x5e8>)
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	2202      	movs	r2, #2
 8002152:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002156:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800215a:	fa92 f2a2 	rbit	r2, r2
 800215e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002162:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002166:	fab2 f282 	clz	r2, r2
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	f042 0220 	orr.w	r2, r2, #32
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	f002 021f 	and.w	r2, r2, #31
 8002176:	2101      	movs	r1, #1
 8002178:	fa01 f202 	lsl.w	r2, r1, r2
 800217c:	4013      	ands	r3, r2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00a      	beq.n	8002198 <HAL_RCC_OscConfig+0x410>
 8002182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002186:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d002      	beq.n	8002198 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	f000 be2e 	b.w	8002df4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002198:	4b75      	ldr	r3, [pc, #468]	; (8002370 <HAL_RCC_OscConfig+0x5e8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	21f8      	movs	r1, #248	; 0xf8
 80021ae:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80021b6:	fa91 f1a1 	rbit	r1, r1
 80021ba:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80021be:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80021c2:	fab1 f181 	clz	r1, r1
 80021c6:	b2c9      	uxtb	r1, r1
 80021c8:	408b      	lsls	r3, r1
 80021ca:	4969      	ldr	r1, [pc, #420]	; (8002370 <HAL_RCC_OscConfig+0x5e8>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d0:	e0fd      	b.n	80023ce <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8088 	beq.w	80022f4 <HAL_RCC_OscConfig+0x56c>
 80021e4:	2301      	movs	r3, #1
 80021e6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80021f6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021fa:	fab3 f383 	clz	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002204:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	461a      	mov	r2, r3
 800220c:	2301      	movs	r3, #1
 800220e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7fe feee 	bl	8000ff0 <HAL_GetTick>
 8002214:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002218:	e00a      	b.n	8002230 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800221a:	f7fe fee9 	bl	8000ff0 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d902      	bls.n	8002230 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	f000 bde2 	b.w	8002df4 <HAL_RCC_OscConfig+0x106c>
 8002230:	2302      	movs	r3, #2
 8002232:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002242:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002246:	fab3 f383 	clz	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	095b      	lsrs	r3, r3, #5
 800224e:	b2db      	uxtb	r3, r3
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d102      	bne.n	8002260 <HAL_RCC_OscConfig+0x4d8>
 800225a:	4b45      	ldr	r3, [pc, #276]	; (8002370 <HAL_RCC_OscConfig+0x5e8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	e013      	b.n	8002288 <HAL_RCC_OscConfig+0x500>
 8002260:	2302      	movs	r3, #2
 8002262:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002272:	2302      	movs	r3, #2
 8002274:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002278:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800227c:	fa93 f3a3 	rbit	r3, r3
 8002280:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002284:	4b3a      	ldr	r3, [pc, #232]	; (8002370 <HAL_RCC_OscConfig+0x5e8>)
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	2202      	movs	r2, #2
 800228a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800228e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002292:	fa92 f2a2 	rbit	r2, r2
 8002296:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800229a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800229e:	fab2 f282 	clz	r2, r2
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	f042 0220 	orr.w	r2, r2, #32
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	f002 021f 	and.w	r2, r2, #31
 80022ae:	2101      	movs	r1, #1
 80022b0:	fa01 f202 	lsl.w	r2, r1, r2
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0af      	beq.n	800221a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ba:	4b2d      	ldr	r3, [pc, #180]	; (8002370 <HAL_RCC_OscConfig+0x5e8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	21f8      	movs	r1, #248	; 0xf8
 80022d0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80022d8:	fa91 f1a1 	rbit	r1, r1
 80022dc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80022e0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80022e4:	fab1 f181 	clz	r1, r1
 80022e8:	b2c9      	uxtb	r1, r1
 80022ea:	408b      	lsls	r3, r1
 80022ec:	4920      	ldr	r1, [pc, #128]	; (8002370 <HAL_RCC_OscConfig+0x5e8>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]
 80022f2:	e06c      	b.n	80023ce <HAL_RCC_OscConfig+0x646>
 80022f4:	2301      	movs	r3, #1
 80022f6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002306:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002314:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	461a      	mov	r2, r3
 800231c:	2300      	movs	r3, #0
 800231e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7fe fe66 	bl	8000ff0 <HAL_GetTick>
 8002324:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002328:	e00a      	b.n	8002340 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800232a:	f7fe fe61 	bl	8000ff0 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d902      	bls.n	8002340 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	f000 bd5a 	b.w	8002df4 <HAL_RCC_OscConfig+0x106c>
 8002340:	2302      	movs	r3, #2
 8002342:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002352:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002356:	fab3 f383 	clz	r3, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	095b      	lsrs	r3, r3, #5
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b01      	cmp	r3, #1
 8002368:	d104      	bne.n	8002374 <HAL_RCC_OscConfig+0x5ec>
 800236a:	4b01      	ldr	r3, [pc, #4]	; (8002370 <HAL_RCC_OscConfig+0x5e8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	e015      	b.n	800239c <HAL_RCC_OscConfig+0x614>
 8002370:	40021000 	.word	0x40021000
 8002374:	2302      	movs	r3, #2
 8002376:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002386:	2302      	movs	r3, #2
 8002388:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800238c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002398:	4bc8      	ldr	r3, [pc, #800]	; (80026bc <HAL_RCC_OscConfig+0x934>)
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	2202      	movs	r2, #2
 800239e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80023a2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80023a6:	fa92 f2a2 	rbit	r2, r2
 80023aa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80023ae:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80023b2:	fab2 f282 	clz	r2, r2
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	f042 0220 	orr.w	r2, r2, #32
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	f002 021f 	and.w	r2, r2, #31
 80023c2:	2101      	movs	r1, #1
 80023c4:	fa01 f202 	lsl.w	r2, r1, r2
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1ad      	bne.n	800232a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 8110 	beq.w	8002604 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d079      	beq.n	80024e8 <HAL_RCC_OscConfig+0x760>
 80023f4:	2301      	movs	r3, #1
 80023f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80023fe:	fa93 f3a3 	rbit	r3, r3
 8002402:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	461a      	mov	r2, r3
 8002412:	4bab      	ldr	r3, [pc, #684]	; (80026c0 <HAL_RCC_OscConfig+0x938>)
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	461a      	mov	r2, r3
 800241a:	2301      	movs	r3, #1
 800241c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241e:	f7fe fde7 	bl	8000ff0 <HAL_GetTick>
 8002422:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002426:	e00a      	b.n	800243e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002428:	f7fe fde2 	bl	8000ff0 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d902      	bls.n	800243e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	f000 bcdb 	b.w	8002df4 <HAL_RCC_OscConfig+0x106c>
 800243e:	2302      	movs	r3, #2
 8002440:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002448:	fa93 f3a3 	rbit	r3, r3
 800244c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002454:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002458:	2202      	movs	r2, #2
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002460:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	fa93 f2a3 	rbit	r2, r3
 800246a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800247c:	2202      	movs	r2, #2
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	fa93 f2a3 	rbit	r2, r3
 800248e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002492:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002496:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002498:	4b88      	ldr	r3, [pc, #544]	; (80026bc <HAL_RCC_OscConfig+0x934>)
 800249a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800249c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80024a4:	2102      	movs	r1, #2
 80024a6:	6019      	str	r1, [r3, #0]
 80024a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	fa93 f1a3 	rbit	r1, r3
 80024b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80024be:	6019      	str	r1, [r3, #0]
  return result;
 80024c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	f003 031f 	and.w	r3, r3, #31
 80024da:	2101      	movs	r1, #1
 80024dc:	fa01 f303 	lsl.w	r3, r1, r3
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0a0      	beq.n	8002428 <HAL_RCC_OscConfig+0x6a0>
 80024e6:	e08d      	b.n	8002604 <HAL_RCC_OscConfig+0x87c>
 80024e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024f0:	2201      	movs	r2, #1
 80024f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	fa93 f2a3 	rbit	r2, r3
 8002502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002506:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800250a:	601a      	str	r2, [r3, #0]
  return result;
 800250c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002510:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002514:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	461a      	mov	r2, r3
 800251e:	4b68      	ldr	r3, [pc, #416]	; (80026c0 <HAL_RCC_OscConfig+0x938>)
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	461a      	mov	r2, r3
 8002526:	2300      	movs	r3, #0
 8002528:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252a:	f7fe fd61 	bl	8000ff0 <HAL_GetTick>
 800252e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002532:	e00a      	b.n	800254a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002534:	f7fe fd5c 	bl	8000ff0 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d902      	bls.n	800254a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	f000 bc55 	b.w	8002df4 <HAL_RCC_OscConfig+0x106c>
 800254a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002552:	2202      	movs	r2, #2
 8002554:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	fa93 f2a3 	rbit	r2, r3
 8002564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002568:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002572:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002576:	2202      	movs	r2, #2
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	fa93 f2a3 	rbit	r2, r3
 8002588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002596:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800259a:	2202      	movs	r2, #2
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	fa93 f2a3 	rbit	r2, r3
 80025ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80025b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b6:	4b41      	ldr	r3, [pc, #260]	; (80026bc <HAL_RCC_OscConfig+0x934>)
 80025b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80025c2:	2102      	movs	r1, #2
 80025c4:	6019      	str	r1, [r3, #0]
 80025c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	fa93 f1a3 	rbit	r1, r3
 80025d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80025dc:	6019      	str	r1, [r3, #0]
  return result;
 80025de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	2101      	movs	r1, #1
 80025fa:	fa01 f303 	lsl.w	r3, r1, r3
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d197      	bne.n	8002534 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002608:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 81a1 	beq.w	800295c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261a:	2300      	movs	r3, #0
 800261c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002620:	4b26      	ldr	r3, [pc, #152]	; (80026bc <HAL_RCC_OscConfig+0x934>)
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d116      	bne.n	800265a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800262c:	4b23      	ldr	r3, [pc, #140]	; (80026bc <HAL_RCC_OscConfig+0x934>)
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	4a22      	ldr	r2, [pc, #136]	; (80026bc <HAL_RCC_OscConfig+0x934>)
 8002632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002636:	61d3      	str	r3, [r2, #28]
 8002638:	4b20      	ldr	r3, [pc, #128]	; (80026bc <HAL_RCC_OscConfig+0x934>)
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002644:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002652:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002654:	2301      	movs	r3, #1
 8002656:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265a:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <HAL_RCC_OscConfig+0x93c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002662:	2b00      	cmp	r3, #0
 8002664:	d11a      	bne.n	800269c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002666:	4b17      	ldr	r3, [pc, #92]	; (80026c4 <HAL_RCC_OscConfig+0x93c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a16      	ldr	r2, [pc, #88]	; (80026c4 <HAL_RCC_OscConfig+0x93c>)
 800266c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002670:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002672:	f7fe fcbd 	bl	8000ff0 <HAL_GetTick>
 8002676:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267a:	e009      	b.n	8002690 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267c:	f7fe fcb8 	bl	8000ff0 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b64      	cmp	r3, #100	; 0x64
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e3b1      	b.n	8002df4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <HAL_RCC_OscConfig+0x93c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0ef      	beq.n	800267c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800269c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d10d      	bne.n	80026c8 <HAL_RCC_OscConfig+0x940>
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <HAL_RCC_OscConfig+0x934>)
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	4a02      	ldr	r2, [pc, #8]	; (80026bc <HAL_RCC_OscConfig+0x934>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6213      	str	r3, [r2, #32]
 80026b8:	e03c      	b.n	8002734 <HAL_RCC_OscConfig+0x9ac>
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000
 80026c0:	10908120 	.word	0x10908120
 80026c4:	40007000 	.word	0x40007000
 80026c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10c      	bne.n	80026f2 <HAL_RCC_OscConfig+0x96a>
 80026d8:	4bc1      	ldr	r3, [pc, #772]	; (80029e0 <HAL_RCC_OscConfig+0xc58>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	4ac0      	ldr	r2, [pc, #768]	; (80029e0 <HAL_RCC_OscConfig+0xc58>)
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	6213      	str	r3, [r2, #32]
 80026e4:	4bbe      	ldr	r3, [pc, #760]	; (80029e0 <HAL_RCC_OscConfig+0xc58>)
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	4abd      	ldr	r2, [pc, #756]	; (80029e0 <HAL_RCC_OscConfig+0xc58>)
 80026ea:	f023 0304 	bic.w	r3, r3, #4
 80026ee:	6213      	str	r3, [r2, #32]
 80026f0:	e020      	b.n	8002734 <HAL_RCC_OscConfig+0x9ac>
 80026f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	2b05      	cmp	r3, #5
 8002700:	d10c      	bne.n	800271c <HAL_RCC_OscConfig+0x994>
 8002702:	4bb7      	ldr	r3, [pc, #732]	; (80029e0 <HAL_RCC_OscConfig+0xc58>)
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	4ab6      	ldr	r2, [pc, #728]	; (80029e0 <HAL_RCC_OscConfig+0xc58>)
 8002708:	f043 0304 	orr.w	r3, r3, #4
 800270c:	6213      	str	r3, [r2, #32]
 800270e:	4bb4      	ldr	r3, [pc, #720]	; (80029e0 <HAL_RCC_OscConfig+0xc58>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4ab3      	ldr	r2, [pc, #716]	; (80029e0 <HAL_RCC_OscConfig+0xc58>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	6213      	str	r3, [r2, #32]
 800271a:	e00b      	b.n	8002734 <HAL_RCC_OscConfig+0x9ac>
 800271c:	4bb0      	ldr	r3, [pc, #704]	; (80029e0 <HAL_RCC_OscConfig+0xc58>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	4aaf      	ldr	r2, [pc, #700]	; (80029e0 <HAL_RCC_OscConfig+0xc58>)
 8002722:	f023 0301 	bic.w	r3, r3, #1
 8002726:	6213      	str	r3, [r2, #32]
 8002728:	4bad      	ldr	r3, [pc, #692]	; (80029e0 <HAL_RCC_OscConfig+0xc58>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	4aac      	ldr	r2, [pc, #688]	; (80029e0 <HAL_RCC_OscConfig+0xc58>)
 800272e:	f023 0304 	bic.w	r3, r3, #4
 8002732:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002738:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 8081 	beq.w	8002848 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002746:	f7fe fc53 	bl	8000ff0 <HAL_GetTick>
 800274a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274e:	e00b      	b.n	8002768 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002750:	f7fe fc4e 	bl	8000ff0 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002760:	4293      	cmp	r3, r2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e345      	b.n	8002df4 <HAL_RCC_OscConfig+0x106c>
 8002768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002770:	2202      	movs	r2, #2
 8002772:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002778:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	fa93 f2a3 	rbit	r2, r3
 8002782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002786:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002790:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002794:	2202      	movs	r2, #2
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	fa93 f2a3 	rbit	r2, r3
 80027a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027aa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80027ae:	601a      	str	r2, [r3, #0]
  return result;
 80027b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80027b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	095b      	lsrs	r3, r3, #5
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	f043 0302 	orr.w	r3, r3, #2
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d102      	bne.n	80027d4 <HAL_RCC_OscConfig+0xa4c>
 80027ce:	4b84      	ldr	r3, [pc, #528]	; (80029e0 <HAL_RCC_OscConfig+0xc58>)
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	e013      	b.n	80027fc <HAL_RCC_OscConfig+0xa74>
 80027d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80027dc:	2202      	movs	r2, #2
 80027de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	fa93 f2a3 	rbit	r2, r3
 80027ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	4b79      	ldr	r3, [pc, #484]	; (80029e0 <HAL_RCC_OscConfig+0xc58>)
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002800:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002804:	2102      	movs	r1, #2
 8002806:	6011      	str	r1, [r2, #0]
 8002808:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800280c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002810:	6812      	ldr	r2, [r2, #0]
 8002812:	fa92 f1a2 	rbit	r1, r2
 8002816:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800281a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800281e:	6011      	str	r1, [r2, #0]
  return result;
 8002820:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002824:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	fab2 f282 	clz	r2, r2
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	f002 021f 	and.w	r2, r2, #31
 800283a:	2101      	movs	r1, #1
 800283c:	fa01 f202 	lsl.w	r2, r1, r2
 8002840:	4013      	ands	r3, r2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d084      	beq.n	8002750 <HAL_RCC_OscConfig+0x9c8>
 8002846:	e07f      	b.n	8002948 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002848:	f7fe fbd2 	bl	8000ff0 <HAL_GetTick>
 800284c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002850:	e00b      	b.n	800286a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002852:	f7fe fbcd 	bl	8000ff0 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e2c4      	b.n	8002df4 <HAL_RCC_OscConfig+0x106c>
 800286a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002872:	2202      	movs	r2, #2
 8002874:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	fa93 f2a3 	rbit	r2, r3
 8002884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002888:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002892:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002896:	2202      	movs	r2, #2
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	fa93 f2a3 	rbit	r2, r3
 80028a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ac:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80028b0:	601a      	str	r2, [r3, #0]
  return result;
 80028b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80028ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028bc:	fab3 f383 	clz	r3, r3
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	f043 0302 	orr.w	r3, r3, #2
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d102      	bne.n	80028d6 <HAL_RCC_OscConfig+0xb4e>
 80028d0:	4b43      	ldr	r3, [pc, #268]	; (80029e0 <HAL_RCC_OscConfig+0xc58>)
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	e013      	b.n	80028fe <HAL_RCC_OscConfig+0xb76>
 80028d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028da:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80028de:	2202      	movs	r2, #2
 80028e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	fa93 f2a3 	rbit	r2, r3
 80028f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	4b39      	ldr	r3, [pc, #228]	; (80029e0 <HAL_RCC_OscConfig+0xc58>)
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002902:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002906:	2102      	movs	r1, #2
 8002908:	6011      	str	r1, [r2, #0]
 800290a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800290e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	fa92 f1a2 	rbit	r1, r2
 8002918:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800291c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002920:	6011      	str	r1, [r2, #0]
  return result;
 8002922:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002926:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	fab2 f282 	clz	r2, r2
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	f002 021f 	and.w	r2, r2, #31
 800293c:	2101      	movs	r1, #1
 800293e:	fa01 f202 	lsl.w	r2, r1, r2
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d184      	bne.n	8002852 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002948:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800294c:	2b01      	cmp	r3, #1
 800294e:	d105      	bne.n	800295c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002950:	4b23      	ldr	r3, [pc, #140]	; (80029e0 <HAL_RCC_OscConfig+0xc58>)
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	4a22      	ldr	r2, [pc, #136]	; (80029e0 <HAL_RCC_OscConfig+0xc58>)
 8002956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800295a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800295c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002960:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 8242 	beq.w	8002df2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800296e:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <HAL_RCC_OscConfig+0xc58>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b08      	cmp	r3, #8
 8002978:	f000 8213 	beq.w	8002da2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800297c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002980:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	2b02      	cmp	r3, #2
 800298a:	f040 8162 	bne.w	8002c52 <HAL_RCC_OscConfig+0xeca>
 800298e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002992:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002996:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800299a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	fa93 f2a3 	rbit	r2, r3
 80029aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ae:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80029b2:	601a      	str	r2, [r3, #0]
  return result;
 80029b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80029bc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	461a      	mov	r2, r3
 80029d0:	2300      	movs	r3, #0
 80029d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7fe fb0c 	bl	8000ff0 <HAL_GetTick>
 80029d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029dc:	e00c      	b.n	80029f8 <HAL_RCC_OscConfig+0xc70>
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e4:	f7fe fb04 	bl	8000ff0 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e1fd      	b.n	8002df4 <HAL_RCC_OscConfig+0x106c>
 80029f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002a00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	fa93 f2a3 	rbit	r2, r3
 8002a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a18:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a1c:	601a      	str	r2, [r3, #0]
  return result;
 8002a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a22:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a28:	fab3 f383 	clz	r3, r3
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d102      	bne.n	8002a42 <HAL_RCC_OscConfig+0xcba>
 8002a3c:	4bb0      	ldr	r3, [pc, #704]	; (8002d00 <HAL_RCC_OscConfig+0xf78>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	e027      	b.n	8002a92 <HAL_RCC_OscConfig+0xd0a>
 8002a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a46:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a54:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	fa93 f2a3 	rbit	r2, r3
 8002a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a62:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	fa93 f2a3 	rbit	r2, r3
 8002a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a88:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	4b9c      	ldr	r3, [pc, #624]	; (8002d00 <HAL_RCC_OscConfig+0xf78>)
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a96:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a9a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a9e:	6011      	str	r1, [r2, #0]
 8002aa0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aa4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	fa92 f1a2 	rbit	r1, r2
 8002aae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ab2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002ab6:	6011      	str	r1, [r2, #0]
  return result;
 8002ab8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002abc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	fab2 f282 	clz	r2, r2
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	f042 0220 	orr.w	r2, r2, #32
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	f002 021f 	and.w	r2, r2, #31
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d182      	bne.n	80029e4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ade:	4b88      	ldr	r3, [pc, #544]	; (8002d00 <HAL_RCC_OscConfig+0xf78>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	430b      	orrs	r3, r1
 8002b00:	497f      	ldr	r1, [pc, #508]	; (8002d00 <HAL_RCC_OscConfig+0xf78>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	604b      	str	r3, [r1, #4]
 8002b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002b0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b18:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	fa93 f2a3 	rbit	r2, r3
 8002b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b26:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b2a:	601a      	str	r2, [r3, #0]
  return result;
 8002b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b30:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b34:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	461a      	mov	r2, r3
 8002b48:	2301      	movs	r3, #1
 8002b4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fa50 	bl	8000ff0 <HAL_GetTick>
 8002b50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b54:	e009      	b.n	8002b6a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b56:	f7fe fa4b 	bl	8000ff0 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e144      	b.n	8002df4 <HAL_RCC_OscConfig+0x106c>
 8002b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	fa93 f2a3 	rbit	r2, r3
 8002b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b8e:	601a      	str	r2, [r3, #0]
  return result;
 8002b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b94:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	095b      	lsrs	r3, r3, #5
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d102      	bne.n	8002bb4 <HAL_RCC_OscConfig+0xe2c>
 8002bae:	4b54      	ldr	r3, [pc, #336]	; (8002d00 <HAL_RCC_OscConfig+0xf78>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	e027      	b.n	8002c04 <HAL_RCC_OscConfig+0xe7c>
 8002bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002bbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	fa93 f2a3 	rbit	r2, r3
 8002bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bde:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002be2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bec:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	fa93 f2a3 	rbit	r2, r3
 8002bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	4b3f      	ldr	r3, [pc, #252]	; (8002d00 <HAL_RCC_OscConfig+0xf78>)
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c08:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002c0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c10:	6011      	str	r1, [r2, #0]
 8002c12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c16:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002c1a:	6812      	ldr	r2, [r2, #0]
 8002c1c:	fa92 f1a2 	rbit	r1, r2
 8002c20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c24:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c28:	6011      	str	r1, [r2, #0]
  return result;
 8002c2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c2e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	fab2 f282 	clz	r2, r2
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	f042 0220 	orr.w	r2, r2, #32
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	f002 021f 	and.w	r2, r2, #31
 8002c44:	2101      	movs	r1, #1
 8002c46:	fa01 f202 	lsl.w	r2, r1, r2
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d082      	beq.n	8002b56 <HAL_RCC_OscConfig+0xdce>
 8002c50:	e0cf      	b.n	8002df2 <HAL_RCC_OscConfig+0x106a>
 8002c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c56:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c64:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	fa93 f2a3 	rbit	r2, r3
 8002c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c72:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c76:	601a      	str	r2, [r3, #0]
  return result;
 8002c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c80:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	461a      	mov	r2, r3
 8002c94:	2300      	movs	r3, #0
 8002c96:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7fe f9aa 	bl	8000ff0 <HAL_GetTick>
 8002c9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca0:	e009      	b.n	8002cb6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca2:	f7fe f9a5 	bl	8000ff0 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e09e      	b.n	8002df4 <HAL_RCC_OscConfig+0x106c>
 8002cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cba:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002cbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	fa93 f2a3 	rbit	r2, r3
 8002cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002cda:	601a      	str	r2, [r3, #0]
  return result;
 8002cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002ce4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	095b      	lsrs	r3, r3, #5
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d104      	bne.n	8002d04 <HAL_RCC_OscConfig+0xf7c>
 8002cfa:	4b01      	ldr	r3, [pc, #4]	; (8002d00 <HAL_RCC_OscConfig+0xf78>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	e029      	b.n	8002d54 <HAL_RCC_OscConfig+0xfcc>
 8002d00:	40021000 	.word	0x40021000
 8002d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d08:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002d0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d16:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	fa93 f2a3 	rbit	r2, r3
 8002d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d24:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	fa93 f2a3 	rbit	r2, r3
 8002d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	4b2b      	ldr	r3, [pc, #172]	; (8002e00 <HAL_RCC_OscConfig+0x1078>)
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d58:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d60:	6011      	str	r1, [r2, #0]
 8002d62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d66:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	fa92 f1a2 	rbit	r1, r2
 8002d70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d74:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d78:	6011      	str	r1, [r2, #0]
  return result;
 8002d7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d7e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	fab2 f282 	clz	r2, r2
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	f042 0220 	orr.w	r2, r2, #32
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	f002 021f 	and.w	r2, r2, #31
 8002d94:	2101      	movs	r1, #1
 8002d96:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d180      	bne.n	8002ca2 <HAL_RCC_OscConfig+0xf1a>
 8002da0:	e027      	b.n	8002df2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d101      	bne.n	8002db6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e01e      	b.n	8002df4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002db6:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <HAL_RCC_OscConfig+0x1078>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002dbe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002dc2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d10b      	bne.n	8002dee <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002dd6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002dda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d001      	beq.n	8002df2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40021000 	.word	0x40021000

08002e04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b09e      	sub	sp, #120	; 0x78
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e162      	b.n	80030e2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e1c:	4b90      	ldr	r3, [pc, #576]	; (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d910      	bls.n	8002e4c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2a:	4b8d      	ldr	r3, [pc, #564]	; (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 0207 	bic.w	r2, r3, #7
 8002e32:	498b      	ldr	r1, [pc, #556]	; (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3a:	4b89      	ldr	r3, [pc, #548]	; (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e14a      	b.n	80030e2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e58:	4b82      	ldr	r3, [pc, #520]	; (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	497f      	ldr	r1, [pc, #508]	; (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 80dc 	beq.w	8003030 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d13c      	bne.n	8002efa <HAL_RCC_ClockConfig+0xf6>
 8002e80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e84:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e88:	fa93 f3a3 	rbit	r3, r3
 8002e8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e90:	fab3 f383 	clz	r3, r3
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d102      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xa6>
 8002ea4:	4b6f      	ldr	r3, [pc, #444]	; (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	e00f      	b.n	8002eca <HAL_RCC_ClockConfig+0xc6>
 8002eaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eb2:	fa93 f3a3 	rbit	r3, r3
 8002eb6:	667b      	str	r3, [r7, #100]	; 0x64
 8002eb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ebc:	663b      	str	r3, [r7, #96]	; 0x60
 8002ebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ec6:	4b67      	ldr	r3, [pc, #412]	; (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ece:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ed0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ed2:	fa92 f2a2 	rbit	r2, r2
 8002ed6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002ed8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002eda:	fab2 f282 	clz	r2, r2
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	f042 0220 	orr.w	r2, r2, #32
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	f002 021f 	and.w	r2, r2, #31
 8002eea:	2101      	movs	r1, #1
 8002eec:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d17b      	bne.n	8002fee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e0f3      	b.n	80030e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d13c      	bne.n	8002f7c <HAL_RCC_ClockConfig+0x178>
 8002f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f0a:	fa93 f3a3 	rbit	r3, r3
 8002f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f12:	fab3 f383 	clz	r3, r3
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	095b      	lsrs	r3, r3, #5
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d102      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x128>
 8002f26:	4b4f      	ldr	r3, [pc, #316]	; (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	e00f      	b.n	8002f4c <HAL_RCC_ClockConfig+0x148>
 8002f2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f34:	fa93 f3a3 	rbit	r3, r3
 8002f38:	647b      	str	r3, [r7, #68]	; 0x44
 8002f3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f3e:	643b      	str	r3, [r7, #64]	; 0x40
 8002f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f42:	fa93 f3a3 	rbit	r3, r3
 8002f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f48:	4b46      	ldr	r3, [pc, #280]	; (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f50:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f54:	fa92 f2a2 	rbit	r2, r2
 8002f58:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002f5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f5c:	fab2 f282 	clz	r2, r2
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	f042 0220 	orr.w	r2, r2, #32
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	f002 021f 	and.w	r2, r2, #31
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d13a      	bne.n	8002fee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0b2      	b.n	80030e2 <HAL_RCC_ClockConfig+0x2de>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	095b      	lsrs	r3, r3, #5
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d102      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x1a0>
 8002f9e:	4b31      	ldr	r3, [pc, #196]	; (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	e00d      	b.n	8002fc0 <HAL_RCC_ClockConfig+0x1bc>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	623b      	str	r3, [r7, #32]
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	4b29      	ldr	r3, [pc, #164]	; (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	61ba      	str	r2, [r7, #24]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	fa92 f2a2 	rbit	r2, r2
 8002fca:	617a      	str	r2, [r7, #20]
  return result;
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	fab2 f282 	clz	r2, r2
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	f042 0220 	orr.w	r2, r2, #32
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	f002 021f 	and.w	r2, r2, #31
 8002fde:	2101      	movs	r1, #1
 8002fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e079      	b.n	80030e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fee:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f023 0203 	bic.w	r2, r3, #3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	491a      	ldr	r1, [pc, #104]	; (8003064 <HAL_RCC_ClockConfig+0x260>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003000:	f7fd fff6 	bl	8000ff0 <HAL_GetTick>
 8003004:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003006:	e00a      	b.n	800301e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003008:	f7fd fff2 	bl	8000ff0 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	; 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e061      	b.n	80030e2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	4b11      	ldr	r3, [pc, #68]	; (8003064 <HAL_RCC_ClockConfig+0x260>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 020c 	and.w	r2, r3, #12
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	429a      	cmp	r2, r3
 800302e:	d1eb      	bne.n	8003008 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d214      	bcs.n	8003068 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303e:	4b08      	ldr	r3, [pc, #32]	; (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f023 0207 	bic.w	r2, r3, #7
 8003046:	4906      	ldr	r1, [pc, #24]	; (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	4313      	orrs	r3, r2
 800304c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800304e:	4b04      	ldr	r3, [pc, #16]	; (8003060 <HAL_RCC_ClockConfig+0x25c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d005      	beq.n	8003068 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e040      	b.n	80030e2 <HAL_RCC_ClockConfig+0x2de>
 8003060:	40022000 	.word	0x40022000
 8003064:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003074:	4b1d      	ldr	r3, [pc, #116]	; (80030ec <HAL_RCC_ClockConfig+0x2e8>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	491a      	ldr	r1, [pc, #104]	; (80030ec <HAL_RCC_ClockConfig+0x2e8>)
 8003082:	4313      	orrs	r3, r2
 8003084:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d009      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003092:	4b16      	ldr	r3, [pc, #88]	; (80030ec <HAL_RCC_ClockConfig+0x2e8>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4912      	ldr	r1, [pc, #72]	; (80030ec <HAL_RCC_ClockConfig+0x2e8>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80030a6:	f000 f829 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 80030aa:	4601      	mov	r1, r0
 80030ac:	4b0f      	ldr	r3, [pc, #60]	; (80030ec <HAL_RCC_ClockConfig+0x2e8>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030b4:	22f0      	movs	r2, #240	; 0xf0
 80030b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	fa92 f2a2 	rbit	r2, r2
 80030be:	60fa      	str	r2, [r7, #12]
  return result;
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	fab2 f282 	clz	r2, r2
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	40d3      	lsrs	r3, r2
 80030ca:	4a09      	ldr	r2, [pc, #36]	; (80030f0 <HAL_RCC_ClockConfig+0x2ec>)
 80030cc:	5cd3      	ldrb	r3, [r2, r3]
 80030ce:	fa21 f303 	lsr.w	r3, r1, r3
 80030d2:	4a08      	ldr	r2, [pc, #32]	; (80030f4 <HAL_RCC_ClockConfig+0x2f0>)
 80030d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80030d6:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <HAL_RCC_ClockConfig+0x2f4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd ff44 	bl	8000f68 <HAL_InitTick>
  
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3778      	adds	r7, #120	; 0x78
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40021000 	.word	0x40021000
 80030f0:	08004624 	.word	0x08004624
 80030f4:	200003f8 	.word	0x200003f8
 80030f8:	200003fc 	.word	0x200003fc

080030fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b08b      	sub	sp, #44	; 0x2c
 8003100:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	2300      	movs	r3, #0
 8003108:	61bb      	str	r3, [r7, #24]
 800310a:	2300      	movs	r3, #0
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003116:	4b29      	ldr	r3, [pc, #164]	; (80031bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f003 030c 	and.w	r3, r3, #12
 8003122:	2b04      	cmp	r3, #4
 8003124:	d002      	beq.n	800312c <HAL_RCC_GetSysClockFreq+0x30>
 8003126:	2b08      	cmp	r3, #8
 8003128:	d003      	beq.n	8003132 <HAL_RCC_GetSysClockFreq+0x36>
 800312a:	e03c      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800312c:	4b24      	ldr	r3, [pc, #144]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800312e:	623b      	str	r3, [r7, #32]
      break;
 8003130:	e03c      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003138:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800313c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	fa92 f2a2 	rbit	r2, r2
 8003144:	607a      	str	r2, [r7, #4]
  return result;
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	fab2 f282 	clz	r2, r2
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	40d3      	lsrs	r3, r2
 8003150:	4a1c      	ldr	r2, [pc, #112]	; (80031c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003152:	5cd3      	ldrb	r3, [r2, r3]
 8003154:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003156:	4b19      	ldr	r3, [pc, #100]	; (80031bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	220f      	movs	r2, #15
 8003160:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	fa92 f2a2 	rbit	r2, r2
 8003168:	60fa      	str	r2, [r7, #12]
  return result;
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	fab2 f282 	clz	r2, r2
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	40d3      	lsrs	r3, r2
 8003174:	4a14      	ldr	r2, [pc, #80]	; (80031c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003176:	5cd3      	ldrb	r3, [r2, r3]
 8003178:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d008      	beq.n	8003196 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003184:	4a0e      	ldr	r2, [pc, #56]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	fbb2 f2f3 	udiv	r2, r2, r3
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	fb02 f303 	mul.w	r3, r2, r3
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
 8003194:	e004      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	4a0c      	ldr	r2, [pc, #48]	; (80031cc <HAL_RCC_GetSysClockFreq+0xd0>)
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	623b      	str	r3, [r7, #32]
      break;
 80031a4:	e002      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031a6:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031a8:	623b      	str	r3, [r7, #32]
      break;
 80031aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ac:	6a3b      	ldr	r3, [r7, #32]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	372c      	adds	r7, #44	; 0x2c
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40021000 	.word	0x40021000
 80031c0:	007a1200 	.word	0x007a1200
 80031c4:	0800463c 	.word	0x0800463c
 80031c8:	0800464c 	.word	0x0800464c
 80031cc:	003d0900 	.word	0x003d0900

080031d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031d4:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031d6:	681b      	ldr	r3, [r3, #0]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	200003f8 	.word	0x200003f8

080031e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80031ee:	f7ff ffef 	bl	80031d0 <HAL_RCC_GetHCLKFreq>
 80031f2:	4601      	mov	r1, r0
 80031f4:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031fc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003200:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	fa92 f2a2 	rbit	r2, r2
 8003208:	603a      	str	r2, [r7, #0]
  return result;
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	fab2 f282 	clz	r2, r2
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	40d3      	lsrs	r3, r2
 8003214:	4a04      	ldr	r2, [pc, #16]	; (8003228 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003216:	5cd3      	ldrb	r3, [r2, r3]
 8003218:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40021000 	.word	0x40021000
 8003228:	08004634 	.word	0x08004634

0800322c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003232:	f7ff ffcd 	bl	80031d0 <HAL_RCC_GetHCLKFreq>
 8003236:	4601      	mov	r1, r0
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003240:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003244:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	fa92 f2a2 	rbit	r2, r2
 800324c:	603a      	str	r2, [r7, #0]
  return result;
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	fab2 f282 	clz	r2, r2
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	40d3      	lsrs	r3, r2
 8003258:	4a04      	ldr	r2, [pc, #16]	; (800326c <HAL_RCC_GetPCLK2Freq+0x40>)
 800325a:	5cd3      	ldrb	r3, [r2, r3]
 800325c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40021000 	.word	0x40021000
 800326c:	08004634 	.word	0x08004634

08003270 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b092      	sub	sp, #72	; 0x48
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003280:	2300      	movs	r3, #0
 8003282:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 80d4 	beq.w	800343c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003294:	4b4e      	ldr	r3, [pc, #312]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10e      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a0:	4b4b      	ldr	r3, [pc, #300]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	4a4a      	ldr	r2, [pc, #296]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032aa:	61d3      	str	r3, [r2, #28]
 80032ac:	4b48      	ldr	r3, [pc, #288]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032b8:	2301      	movs	r3, #1
 80032ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032be:	4b45      	ldr	r3, [pc, #276]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d118      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ca:	4b42      	ldr	r3, [pc, #264]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a41      	ldr	r2, [pc, #260]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032d6:	f7fd fe8b 	bl	8000ff0 <HAL_GetTick>
 80032da:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032dc:	e008      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032de:	f7fd fe87 	bl	8000ff0 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b64      	cmp	r3, #100	; 0x64
 80032ea:	d901      	bls.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e14b      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f0:	4b38      	ldr	r3, [pc, #224]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032fc:	4b34      	ldr	r3, [pc, #208]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003304:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 8084 	beq.w	8003416 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003316:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003318:	429a      	cmp	r2, r3
 800331a:	d07c      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800331c:	4b2c      	ldr	r3, [pc, #176]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003324:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003326:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800332a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332e:	fa93 f3a3 	rbit	r3, r3
 8003332:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003336:	fab3 f383 	clz	r3, r3
 800333a:	b2db      	uxtb	r3, r3
 800333c:	461a      	mov	r2, r3
 800333e:	4b26      	ldr	r3, [pc, #152]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	461a      	mov	r2, r3
 8003346:	2301      	movs	r3, #1
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800334e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003352:	fa93 f3a3 	rbit	r3, r3
 8003356:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800335a:	fab3 f383 	clz	r3, r3
 800335e:	b2db      	uxtb	r3, r3
 8003360:	461a      	mov	r2, r3
 8003362:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003364:	4413      	add	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	461a      	mov	r2, r3
 800336a:	2300      	movs	r3, #0
 800336c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800336e:	4a18      	ldr	r2, [pc, #96]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003372:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d04b      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337e:	f7fd fe37 	bl	8000ff0 <HAL_GetTick>
 8003382:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003384:	e00a      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003386:	f7fd fe33 	bl	8000ff0 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	f241 3288 	movw	r2, #5000	; 0x1388
 8003394:	4293      	cmp	r3, r2
 8003396:	d901      	bls.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e0f5      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800339c:	2302      	movs	r3, #2
 800339e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a2:	fa93 f3a3 	rbit	r3, r3
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
 80033a8:	2302      	movs	r3, #2
 80033aa:	623b      	str	r3, [r7, #32]
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	fa93 f3a3 	rbit	r3, r3
 80033b2:	61fb      	str	r3, [r7, #28]
  return result;
 80033b4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b6:	fab3 f383 	clz	r3, r3
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	f043 0302 	orr.w	r3, r3, #2
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d108      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80033ca:	4b01      	ldr	r3, [pc, #4]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	e00d      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40007000 	.word	0x40007000
 80033d8:	10908100 	.word	0x10908100
 80033dc:	2302      	movs	r3, #2
 80033de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	fa93 f3a3 	rbit	r3, r3
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	4b69      	ldr	r3, [pc, #420]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	2202      	movs	r2, #2
 80033ee:	613a      	str	r2, [r7, #16]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	fa92 f2a2 	rbit	r2, r2
 80033f6:	60fa      	str	r2, [r7, #12]
  return result;
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	fab2 f282 	clz	r2, r2
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	f002 021f 	and.w	r2, r2, #31
 800340a:	2101      	movs	r1, #1
 800340c:	fa01 f202 	lsl.w	r2, r1, r2
 8003410:	4013      	ands	r3, r2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0b7      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003416:	4b5e      	ldr	r3, [pc, #376]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	495b      	ldr	r1, [pc, #364]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003424:	4313      	orrs	r3, r2
 8003426:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003428:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800342c:	2b01      	cmp	r3, #1
 800342e:	d105      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003430:	4b57      	ldr	r3, [pc, #348]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	4a56      	ldr	r2, [pc, #344]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800343a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003448:	4b51      	ldr	r3, [pc, #324]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	f023 0203 	bic.w	r2, r3, #3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	494e      	ldr	r1, [pc, #312]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003456:	4313      	orrs	r3, r2
 8003458:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	2b00      	cmp	r3, #0
 8003464:	d008      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003466:	4b4a      	ldr	r3, [pc, #296]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	f023 0210 	bic.w	r2, r3, #16
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	4947      	ldr	r1, [pc, #284]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003474:	4313      	orrs	r3, r2
 8003476:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003484:	4b42      	ldr	r3, [pc, #264]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003490:	493f      	ldr	r1, [pc, #252]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003492:	4313      	orrs	r3, r2
 8003494:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d008      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034a2:	4b3b      	ldr	r3, [pc, #236]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	f023 0220 	bic.w	r2, r3, #32
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	4938      	ldr	r1, [pc, #224]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034c0:	4b33      	ldr	r3, [pc, #204]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	4930      	ldr	r1, [pc, #192]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d008      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034de:	4b2c      	ldr	r3, [pc, #176]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	4929      	ldr	r1, [pc, #164]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d008      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80034fc:	4b24      	ldr	r3, [pc, #144]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	4921      	ldr	r1, [pc, #132]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800350a:	4313      	orrs	r3, r2
 800350c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d008      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800351a:	4b1d      	ldr	r3, [pc, #116]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	491a      	ldr	r1, [pc, #104]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003528:	4313      	orrs	r3, r2
 800352a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003538:	4b15      	ldr	r3, [pc, #84]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800353a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	4912      	ldr	r1, [pc, #72]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003546:	4313      	orrs	r3, r2
 8003548:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d008      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003556:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003562:	490b      	ldr	r1, [pc, #44]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003564:	4313      	orrs	r3, r2
 8003566:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d008      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003574:	4b06      	ldr	r3, [pc, #24]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	4903      	ldr	r1, [pc, #12]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003582:	4313      	orrs	r3, r2
 8003584:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3748      	adds	r7, #72	; 0x48
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40021000 	.word	0x40021000

08003594 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e040      	b.n	8003628 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7fd fbe0 	bl	8000d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2224      	movs	r2, #36	; 0x24
 80035c0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0201 	bic.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f82c 	bl	8003630 <UART_SetConfig>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e022      	b.n	8003628 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f956 	bl	800389c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800360e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f9dd 	bl	80039e0 <UART_CheckIdleState>
 8003626:	4603      	mov	r3, r0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	431a      	orrs	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	4b8a      	ldr	r3, [pc, #552]	; (8003884 <UART_SetConfig+0x254>)
 800365c:	4013      	ands	r3, r2
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6812      	ldr	r2, [r2, #0]
 8003662:	6979      	ldr	r1, [r7, #20]
 8003664:	430b      	orrs	r3, r1
 8003666:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	4313      	orrs	r3, r2
 800368c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	430a      	orrs	r2, r1
 80036a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a78      	ldr	r2, [pc, #480]	; (8003888 <UART_SetConfig+0x258>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d120      	bne.n	80036ee <UART_SetConfig+0xbe>
 80036ac:	4b77      	ldr	r3, [pc, #476]	; (800388c <UART_SetConfig+0x25c>)
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	f003 0303 	and.w	r3, r3, #3
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	d817      	bhi.n	80036e8 <UART_SetConfig+0xb8>
 80036b8:	a201      	add	r2, pc, #4	; (adr r2, 80036c0 <UART_SetConfig+0x90>)
 80036ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036be:	bf00      	nop
 80036c0:	080036d1 	.word	0x080036d1
 80036c4:	080036dd 	.word	0x080036dd
 80036c8:	080036e3 	.word	0x080036e3
 80036cc:	080036d7 	.word	0x080036d7
 80036d0:	2300      	movs	r3, #0
 80036d2:	77fb      	strb	r3, [r7, #31]
 80036d4:	e01d      	b.n	8003712 <UART_SetConfig+0xe2>
 80036d6:	2302      	movs	r3, #2
 80036d8:	77fb      	strb	r3, [r7, #31]
 80036da:	e01a      	b.n	8003712 <UART_SetConfig+0xe2>
 80036dc:	2304      	movs	r3, #4
 80036de:	77fb      	strb	r3, [r7, #31]
 80036e0:	e017      	b.n	8003712 <UART_SetConfig+0xe2>
 80036e2:	2308      	movs	r3, #8
 80036e4:	77fb      	strb	r3, [r7, #31]
 80036e6:	e014      	b.n	8003712 <UART_SetConfig+0xe2>
 80036e8:	2310      	movs	r3, #16
 80036ea:	77fb      	strb	r3, [r7, #31]
 80036ec:	e011      	b.n	8003712 <UART_SetConfig+0xe2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a67      	ldr	r2, [pc, #412]	; (8003890 <UART_SetConfig+0x260>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d102      	bne.n	80036fe <UART_SetConfig+0xce>
 80036f8:	2300      	movs	r3, #0
 80036fa:	77fb      	strb	r3, [r7, #31]
 80036fc:	e009      	b.n	8003712 <UART_SetConfig+0xe2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a64      	ldr	r2, [pc, #400]	; (8003894 <UART_SetConfig+0x264>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d102      	bne.n	800370e <UART_SetConfig+0xde>
 8003708:	2300      	movs	r3, #0
 800370a:	77fb      	strb	r3, [r7, #31]
 800370c:	e001      	b.n	8003712 <UART_SetConfig+0xe2>
 800370e:	2310      	movs	r3, #16
 8003710:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800371a:	d15a      	bne.n	80037d2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800371c:	7ffb      	ldrb	r3, [r7, #31]
 800371e:	2b08      	cmp	r3, #8
 8003720:	d827      	bhi.n	8003772 <UART_SetConfig+0x142>
 8003722:	a201      	add	r2, pc, #4	; (adr r2, 8003728 <UART_SetConfig+0xf8>)
 8003724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003728:	0800374d 	.word	0x0800374d
 800372c:	08003755 	.word	0x08003755
 8003730:	0800375d 	.word	0x0800375d
 8003734:	08003773 	.word	0x08003773
 8003738:	08003763 	.word	0x08003763
 800373c:	08003773 	.word	0x08003773
 8003740:	08003773 	.word	0x08003773
 8003744:	08003773 	.word	0x08003773
 8003748:	0800376b 	.word	0x0800376b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800374c:	f7ff fd4c 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 8003750:	61b8      	str	r0, [r7, #24]
        break;
 8003752:	e013      	b.n	800377c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003754:	f7ff fd6a 	bl	800322c <HAL_RCC_GetPCLK2Freq>
 8003758:	61b8      	str	r0, [r7, #24]
        break;
 800375a:	e00f      	b.n	800377c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800375c:	4b4e      	ldr	r3, [pc, #312]	; (8003898 <UART_SetConfig+0x268>)
 800375e:	61bb      	str	r3, [r7, #24]
        break;
 8003760:	e00c      	b.n	800377c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003762:	f7ff fccb 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 8003766:	61b8      	str	r0, [r7, #24]
        break;
 8003768:	e008      	b.n	800377c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800376a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800376e:	61bb      	str	r3, [r7, #24]
        break;
 8003770:	e004      	b.n	800377c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	77bb      	strb	r3, [r7, #30]
        break;
 800377a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d074      	beq.n	800386c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	005a      	lsls	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	085b      	lsrs	r3, r3, #1
 800378c:	441a      	add	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	fbb2 f3f3 	udiv	r3, r2, r3
 8003796:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	2b0f      	cmp	r3, #15
 800379c:	d916      	bls.n	80037cc <UART_SetConfig+0x19c>
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a4:	d212      	bcs.n	80037cc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	f023 030f 	bic.w	r3, r3, #15
 80037ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	89fb      	ldrh	r3, [r7, #14]
 80037be:	4313      	orrs	r3, r2
 80037c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	89fa      	ldrh	r2, [r7, #14]
 80037c8:	60da      	str	r2, [r3, #12]
 80037ca:	e04f      	b.n	800386c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	77bb      	strb	r3, [r7, #30]
 80037d0:	e04c      	b.n	800386c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037d2:	7ffb      	ldrb	r3, [r7, #31]
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d828      	bhi.n	800382a <UART_SetConfig+0x1fa>
 80037d8:	a201      	add	r2, pc, #4	; (adr r2, 80037e0 <UART_SetConfig+0x1b0>)
 80037da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037de:	bf00      	nop
 80037e0:	08003805 	.word	0x08003805
 80037e4:	0800380d 	.word	0x0800380d
 80037e8:	08003815 	.word	0x08003815
 80037ec:	0800382b 	.word	0x0800382b
 80037f0:	0800381b 	.word	0x0800381b
 80037f4:	0800382b 	.word	0x0800382b
 80037f8:	0800382b 	.word	0x0800382b
 80037fc:	0800382b 	.word	0x0800382b
 8003800:	08003823 	.word	0x08003823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003804:	f7ff fcf0 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 8003808:	61b8      	str	r0, [r7, #24]
        break;
 800380a:	e013      	b.n	8003834 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800380c:	f7ff fd0e 	bl	800322c <HAL_RCC_GetPCLK2Freq>
 8003810:	61b8      	str	r0, [r7, #24]
        break;
 8003812:	e00f      	b.n	8003834 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003814:	4b20      	ldr	r3, [pc, #128]	; (8003898 <UART_SetConfig+0x268>)
 8003816:	61bb      	str	r3, [r7, #24]
        break;
 8003818:	e00c      	b.n	8003834 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800381a:	f7ff fc6f 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 800381e:	61b8      	str	r0, [r7, #24]
        break;
 8003820:	e008      	b.n	8003834 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003826:	61bb      	str	r3, [r7, #24]
        break;
 8003828:	e004      	b.n	8003834 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	77bb      	strb	r3, [r7, #30]
        break;
 8003832:	bf00      	nop
    }

    if (pclk != 0U)
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d018      	beq.n	800386c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	085a      	lsrs	r2, r3, #1
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	441a      	add	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	fbb2 f3f3 	udiv	r3, r2, r3
 800384c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	2b0f      	cmp	r3, #15
 8003852:	d909      	bls.n	8003868 <UART_SetConfig+0x238>
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385a:	d205      	bcs.n	8003868 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	b29a      	uxth	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	60da      	str	r2, [r3, #12]
 8003866:	e001      	b.n	800386c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003878:	7fbb      	ldrb	r3, [r7, #30]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	efff69f3 	.word	0xefff69f3
 8003888:	40013800 	.word	0x40013800
 800388c:	40021000 	.word	0x40021000
 8003890:	40004400 	.word	0x40004400
 8003894:	40004800 	.word	0x40004800
 8003898:	007a1200 	.word	0x007a1200

0800389c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00a      	beq.n	800390a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003978:	2b00      	cmp	r3, #0
 800397a:	d01a      	beq.n	80039b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800399a:	d10a      	bne.n	80039b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	605a      	str	r2, [r3, #4]
  }
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b098      	sub	sp, #96	; 0x60
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039f0:	f7fd fafe 	bl	8000ff0 <HAL_GetTick>
 80039f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d12e      	bne.n	8003a62 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f88c 	bl	8003b30 <UART_WaitOnFlagUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d021      	beq.n	8003a62 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a26:	e853 3f00 	ldrex	r3, [r3]
 8003a2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a32:	653b      	str	r3, [r7, #80]	; 0x50
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a3c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a3e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a44:	e841 2300 	strex	r3, r2, [r1]
 8003a48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1e6      	bne.n	8003a1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2220      	movs	r2, #32
 8003a54:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e062      	b.n	8003b28 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d149      	bne.n	8003b04 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f856 	bl	8003b30 <UART_WaitOnFlagUntilTimeout>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d03c      	beq.n	8003b04 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	e853 3f00 	ldrex	r3, [r3]
 8003a96:	623b      	str	r3, [r7, #32]
   return(result);
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa8:	633b      	str	r3, [r7, #48]	; 0x30
 8003aaa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003aae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ab0:	e841 2300 	strex	r3, r2, [r1]
 8003ab4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1e6      	bne.n	8003a8a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	3308      	adds	r3, #8
 8003ac2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	e853 3f00 	ldrex	r3, [r3]
 8003aca:	60fb      	str	r3, [r7, #12]
   return(result);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 0301 	bic.w	r3, r3, #1
 8003ad2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3308      	adds	r3, #8
 8003ada:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003adc:	61fa      	str	r2, [r7, #28]
 8003ade:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae0:	69b9      	ldr	r1, [r7, #24]
 8003ae2:	69fa      	ldr	r2, [r7, #28]
 8003ae4:	e841 2300 	strex	r3, r2, [r1]
 8003ae8:	617b      	str	r3, [r7, #20]
   return(result);
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1e5      	bne.n	8003abc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e011      	b.n	8003b28 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3758      	adds	r7, #88	; 0x58
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b40:	e049      	b.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b48:	d045      	beq.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b4a:	f7fd fa51 	bl	8000ff0 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d302      	bcc.n	8003b60 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e048      	b.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d031      	beq.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	f003 0308 	and.w	r3, r3, #8
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d110      	bne.n	8003ba2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2208      	movs	r2, #8
 8003b86:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 f838 	bl	8003bfe <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2208      	movs	r2, #8
 8003b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e029      	b.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bb0:	d111      	bne.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 f81e 	bl	8003bfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e00f      	b.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69da      	ldr	r2, [r3, #28]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4013      	ands	r3, r2
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	bf0c      	ite	eq
 8003be6:	2301      	moveq	r3, #1
 8003be8:	2300      	movne	r3, #0
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	461a      	mov	r2, r3
 8003bee:	79fb      	ldrb	r3, [r7, #7]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d0a6      	beq.n	8003b42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b095      	sub	sp, #84	; 0x54
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c0e:	e853 3f00 	ldrex	r3, [r3]
 8003c12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	461a      	mov	r2, r3
 8003c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c24:	643b      	str	r3, [r7, #64]	; 0x40
 8003c26:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c2c:	e841 2300 	strex	r3, r2, [r1]
 8003c30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1e6      	bne.n	8003c06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3308      	adds	r3, #8
 8003c3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	e853 3f00 	ldrex	r3, [r3]
 8003c46:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f023 0301 	bic.w	r3, r3, #1
 8003c4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3308      	adds	r3, #8
 8003c56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c60:	e841 2300 	strex	r3, r2, [r1]
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1e5      	bne.n	8003c38 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d118      	bne.n	8003ca6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	e853 3f00 	ldrex	r3, [r3]
 8003c80:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f023 0310 	bic.w	r3, r3, #16
 8003c88:	647b      	str	r3, [r7, #68]	; 0x44
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c92:	61bb      	str	r3, [r7, #24]
 8003c94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c96:	6979      	ldr	r1, [r7, #20]
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	e841 2300 	strex	r3, r2, [r1]
 8003c9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1e6      	bne.n	8003c74 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003cba:	bf00      	nop
 8003cbc:	3754      	adds	r7, #84	; 0x54
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
	...

08003cc8 <__errno>:
 8003cc8:	4b01      	ldr	r3, [pc, #4]	; (8003cd0 <__errno+0x8>)
 8003cca:	6818      	ldr	r0, [r3, #0]
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	20000404 	.word	0x20000404

08003cd4 <__libc_init_array>:
 8003cd4:	b570      	push	{r4, r5, r6, lr}
 8003cd6:	4d0d      	ldr	r5, [pc, #52]	; (8003d0c <__libc_init_array+0x38>)
 8003cd8:	4c0d      	ldr	r4, [pc, #52]	; (8003d10 <__libc_init_array+0x3c>)
 8003cda:	1b64      	subs	r4, r4, r5
 8003cdc:	10a4      	asrs	r4, r4, #2
 8003cde:	2600      	movs	r6, #0
 8003ce0:	42a6      	cmp	r6, r4
 8003ce2:	d109      	bne.n	8003cf8 <__libc_init_array+0x24>
 8003ce4:	4d0b      	ldr	r5, [pc, #44]	; (8003d14 <__libc_init_array+0x40>)
 8003ce6:	4c0c      	ldr	r4, [pc, #48]	; (8003d18 <__libc_init_array+0x44>)
 8003ce8:	f000 fc8e 	bl	8004608 <_init>
 8003cec:	1b64      	subs	r4, r4, r5
 8003cee:	10a4      	asrs	r4, r4, #2
 8003cf0:	2600      	movs	r6, #0
 8003cf2:	42a6      	cmp	r6, r4
 8003cf4:	d105      	bne.n	8003d02 <__libc_init_array+0x2e>
 8003cf6:	bd70      	pop	{r4, r5, r6, pc}
 8003cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cfc:	4798      	blx	r3
 8003cfe:	3601      	adds	r6, #1
 8003d00:	e7ee      	b.n	8003ce0 <__libc_init_array+0xc>
 8003d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d06:	4798      	blx	r3
 8003d08:	3601      	adds	r6, #1
 8003d0a:	e7f2      	b.n	8003cf2 <__libc_init_array+0x1e>
 8003d0c:	08004690 	.word	0x08004690
 8003d10:	08004690 	.word	0x08004690
 8003d14:	08004690 	.word	0x08004690
 8003d18:	08004694 	.word	0x08004694

08003d1c <memset>:
 8003d1c:	4402      	add	r2, r0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d100      	bne.n	8003d26 <memset+0xa>
 8003d24:	4770      	bx	lr
 8003d26:	f803 1b01 	strb.w	r1, [r3], #1
 8003d2a:	e7f9      	b.n	8003d20 <memset+0x4>

08003d2c <siprintf>:
 8003d2c:	b40e      	push	{r1, r2, r3}
 8003d2e:	b500      	push	{lr}
 8003d30:	b09c      	sub	sp, #112	; 0x70
 8003d32:	ab1d      	add	r3, sp, #116	; 0x74
 8003d34:	9002      	str	r0, [sp, #8]
 8003d36:	9006      	str	r0, [sp, #24]
 8003d38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d3c:	4809      	ldr	r0, [pc, #36]	; (8003d64 <siprintf+0x38>)
 8003d3e:	9107      	str	r1, [sp, #28]
 8003d40:	9104      	str	r1, [sp, #16]
 8003d42:	4909      	ldr	r1, [pc, #36]	; (8003d68 <siprintf+0x3c>)
 8003d44:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d48:	9105      	str	r1, [sp, #20]
 8003d4a:	6800      	ldr	r0, [r0, #0]
 8003d4c:	9301      	str	r3, [sp, #4]
 8003d4e:	a902      	add	r1, sp, #8
 8003d50:	f000 f868 	bl	8003e24 <_svfiprintf_r>
 8003d54:	9b02      	ldr	r3, [sp, #8]
 8003d56:	2200      	movs	r2, #0
 8003d58:	701a      	strb	r2, [r3, #0]
 8003d5a:	b01c      	add	sp, #112	; 0x70
 8003d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d60:	b003      	add	sp, #12
 8003d62:	4770      	bx	lr
 8003d64:	20000404 	.word	0x20000404
 8003d68:	ffff0208 	.word	0xffff0208

08003d6c <__ssputs_r>:
 8003d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d70:	688e      	ldr	r6, [r1, #8]
 8003d72:	429e      	cmp	r6, r3
 8003d74:	4682      	mov	sl, r0
 8003d76:	460c      	mov	r4, r1
 8003d78:	4690      	mov	r8, r2
 8003d7a:	461f      	mov	r7, r3
 8003d7c:	d838      	bhi.n	8003df0 <__ssputs_r+0x84>
 8003d7e:	898a      	ldrh	r2, [r1, #12]
 8003d80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d84:	d032      	beq.n	8003dec <__ssputs_r+0x80>
 8003d86:	6825      	ldr	r5, [r4, #0]
 8003d88:	6909      	ldr	r1, [r1, #16]
 8003d8a:	eba5 0901 	sub.w	r9, r5, r1
 8003d8e:	6965      	ldr	r5, [r4, #20]
 8003d90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d98:	3301      	adds	r3, #1
 8003d9a:	444b      	add	r3, r9
 8003d9c:	106d      	asrs	r5, r5, #1
 8003d9e:	429d      	cmp	r5, r3
 8003da0:	bf38      	it	cc
 8003da2:	461d      	movcc	r5, r3
 8003da4:	0553      	lsls	r3, r2, #21
 8003da6:	d531      	bpl.n	8003e0c <__ssputs_r+0xa0>
 8003da8:	4629      	mov	r1, r5
 8003daa:	f000 fb63 	bl	8004474 <_malloc_r>
 8003dae:	4606      	mov	r6, r0
 8003db0:	b950      	cbnz	r0, 8003dc8 <__ssputs_r+0x5c>
 8003db2:	230c      	movs	r3, #12
 8003db4:	f8ca 3000 	str.w	r3, [sl]
 8003db8:	89a3      	ldrh	r3, [r4, #12]
 8003dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dbe:	81a3      	strh	r3, [r4, #12]
 8003dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dc8:	6921      	ldr	r1, [r4, #16]
 8003dca:	464a      	mov	r2, r9
 8003dcc:	f000 fabe 	bl	800434c <memcpy>
 8003dd0:	89a3      	ldrh	r3, [r4, #12]
 8003dd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dda:	81a3      	strh	r3, [r4, #12]
 8003ddc:	6126      	str	r6, [r4, #16]
 8003dde:	6165      	str	r5, [r4, #20]
 8003de0:	444e      	add	r6, r9
 8003de2:	eba5 0509 	sub.w	r5, r5, r9
 8003de6:	6026      	str	r6, [r4, #0]
 8003de8:	60a5      	str	r5, [r4, #8]
 8003dea:	463e      	mov	r6, r7
 8003dec:	42be      	cmp	r6, r7
 8003dee:	d900      	bls.n	8003df2 <__ssputs_r+0x86>
 8003df0:	463e      	mov	r6, r7
 8003df2:	6820      	ldr	r0, [r4, #0]
 8003df4:	4632      	mov	r2, r6
 8003df6:	4641      	mov	r1, r8
 8003df8:	f000 fab6 	bl	8004368 <memmove>
 8003dfc:	68a3      	ldr	r3, [r4, #8]
 8003dfe:	1b9b      	subs	r3, r3, r6
 8003e00:	60a3      	str	r3, [r4, #8]
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	4433      	add	r3, r6
 8003e06:	6023      	str	r3, [r4, #0]
 8003e08:	2000      	movs	r0, #0
 8003e0a:	e7db      	b.n	8003dc4 <__ssputs_r+0x58>
 8003e0c:	462a      	mov	r2, r5
 8003e0e:	f000 fba5 	bl	800455c <_realloc_r>
 8003e12:	4606      	mov	r6, r0
 8003e14:	2800      	cmp	r0, #0
 8003e16:	d1e1      	bne.n	8003ddc <__ssputs_r+0x70>
 8003e18:	6921      	ldr	r1, [r4, #16]
 8003e1a:	4650      	mov	r0, sl
 8003e1c:	f000 fabe 	bl	800439c <_free_r>
 8003e20:	e7c7      	b.n	8003db2 <__ssputs_r+0x46>
	...

08003e24 <_svfiprintf_r>:
 8003e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e28:	4698      	mov	r8, r3
 8003e2a:	898b      	ldrh	r3, [r1, #12]
 8003e2c:	061b      	lsls	r3, r3, #24
 8003e2e:	b09d      	sub	sp, #116	; 0x74
 8003e30:	4607      	mov	r7, r0
 8003e32:	460d      	mov	r5, r1
 8003e34:	4614      	mov	r4, r2
 8003e36:	d50e      	bpl.n	8003e56 <_svfiprintf_r+0x32>
 8003e38:	690b      	ldr	r3, [r1, #16]
 8003e3a:	b963      	cbnz	r3, 8003e56 <_svfiprintf_r+0x32>
 8003e3c:	2140      	movs	r1, #64	; 0x40
 8003e3e:	f000 fb19 	bl	8004474 <_malloc_r>
 8003e42:	6028      	str	r0, [r5, #0]
 8003e44:	6128      	str	r0, [r5, #16]
 8003e46:	b920      	cbnz	r0, 8003e52 <_svfiprintf_r+0x2e>
 8003e48:	230c      	movs	r3, #12
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e50:	e0d1      	b.n	8003ff6 <_svfiprintf_r+0x1d2>
 8003e52:	2340      	movs	r3, #64	; 0x40
 8003e54:	616b      	str	r3, [r5, #20]
 8003e56:	2300      	movs	r3, #0
 8003e58:	9309      	str	r3, [sp, #36]	; 0x24
 8003e5a:	2320      	movs	r3, #32
 8003e5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e60:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e64:	2330      	movs	r3, #48	; 0x30
 8003e66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004010 <_svfiprintf_r+0x1ec>
 8003e6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e6e:	f04f 0901 	mov.w	r9, #1
 8003e72:	4623      	mov	r3, r4
 8003e74:	469a      	mov	sl, r3
 8003e76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e7a:	b10a      	cbz	r2, 8003e80 <_svfiprintf_r+0x5c>
 8003e7c:	2a25      	cmp	r2, #37	; 0x25
 8003e7e:	d1f9      	bne.n	8003e74 <_svfiprintf_r+0x50>
 8003e80:	ebba 0b04 	subs.w	fp, sl, r4
 8003e84:	d00b      	beq.n	8003e9e <_svfiprintf_r+0x7a>
 8003e86:	465b      	mov	r3, fp
 8003e88:	4622      	mov	r2, r4
 8003e8a:	4629      	mov	r1, r5
 8003e8c:	4638      	mov	r0, r7
 8003e8e:	f7ff ff6d 	bl	8003d6c <__ssputs_r>
 8003e92:	3001      	adds	r0, #1
 8003e94:	f000 80aa 	beq.w	8003fec <_svfiprintf_r+0x1c8>
 8003e98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e9a:	445a      	add	r2, fp
 8003e9c:	9209      	str	r2, [sp, #36]	; 0x24
 8003e9e:	f89a 3000 	ldrb.w	r3, [sl]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 80a2 	beq.w	8003fec <_svfiprintf_r+0x1c8>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8003eae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003eb2:	f10a 0a01 	add.w	sl, sl, #1
 8003eb6:	9304      	str	r3, [sp, #16]
 8003eb8:	9307      	str	r3, [sp, #28]
 8003eba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ebe:	931a      	str	r3, [sp, #104]	; 0x68
 8003ec0:	4654      	mov	r4, sl
 8003ec2:	2205      	movs	r2, #5
 8003ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ec8:	4851      	ldr	r0, [pc, #324]	; (8004010 <_svfiprintf_r+0x1ec>)
 8003eca:	f7fc f981 	bl	80001d0 <memchr>
 8003ece:	9a04      	ldr	r2, [sp, #16]
 8003ed0:	b9d8      	cbnz	r0, 8003f0a <_svfiprintf_r+0xe6>
 8003ed2:	06d0      	lsls	r0, r2, #27
 8003ed4:	bf44      	itt	mi
 8003ed6:	2320      	movmi	r3, #32
 8003ed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003edc:	0711      	lsls	r1, r2, #28
 8003ede:	bf44      	itt	mi
 8003ee0:	232b      	movmi	r3, #43	; 0x2b
 8003ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ee6:	f89a 3000 	ldrb.w	r3, [sl]
 8003eea:	2b2a      	cmp	r3, #42	; 0x2a
 8003eec:	d015      	beq.n	8003f1a <_svfiprintf_r+0xf6>
 8003eee:	9a07      	ldr	r2, [sp, #28]
 8003ef0:	4654      	mov	r4, sl
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	f04f 0c0a 	mov.w	ip, #10
 8003ef8:	4621      	mov	r1, r4
 8003efa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003efe:	3b30      	subs	r3, #48	; 0x30
 8003f00:	2b09      	cmp	r3, #9
 8003f02:	d94e      	bls.n	8003fa2 <_svfiprintf_r+0x17e>
 8003f04:	b1b0      	cbz	r0, 8003f34 <_svfiprintf_r+0x110>
 8003f06:	9207      	str	r2, [sp, #28]
 8003f08:	e014      	b.n	8003f34 <_svfiprintf_r+0x110>
 8003f0a:	eba0 0308 	sub.w	r3, r0, r8
 8003f0e:	fa09 f303 	lsl.w	r3, r9, r3
 8003f12:	4313      	orrs	r3, r2
 8003f14:	9304      	str	r3, [sp, #16]
 8003f16:	46a2      	mov	sl, r4
 8003f18:	e7d2      	b.n	8003ec0 <_svfiprintf_r+0x9c>
 8003f1a:	9b03      	ldr	r3, [sp, #12]
 8003f1c:	1d19      	adds	r1, r3, #4
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	9103      	str	r1, [sp, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	bfbb      	ittet	lt
 8003f26:	425b      	neglt	r3, r3
 8003f28:	f042 0202 	orrlt.w	r2, r2, #2
 8003f2c:	9307      	strge	r3, [sp, #28]
 8003f2e:	9307      	strlt	r3, [sp, #28]
 8003f30:	bfb8      	it	lt
 8003f32:	9204      	strlt	r2, [sp, #16]
 8003f34:	7823      	ldrb	r3, [r4, #0]
 8003f36:	2b2e      	cmp	r3, #46	; 0x2e
 8003f38:	d10c      	bne.n	8003f54 <_svfiprintf_r+0x130>
 8003f3a:	7863      	ldrb	r3, [r4, #1]
 8003f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f3e:	d135      	bne.n	8003fac <_svfiprintf_r+0x188>
 8003f40:	9b03      	ldr	r3, [sp, #12]
 8003f42:	1d1a      	adds	r2, r3, #4
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	9203      	str	r2, [sp, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	bfb8      	it	lt
 8003f4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f50:	3402      	adds	r4, #2
 8003f52:	9305      	str	r3, [sp, #20]
 8003f54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004020 <_svfiprintf_r+0x1fc>
 8003f58:	7821      	ldrb	r1, [r4, #0]
 8003f5a:	2203      	movs	r2, #3
 8003f5c:	4650      	mov	r0, sl
 8003f5e:	f7fc f937 	bl	80001d0 <memchr>
 8003f62:	b140      	cbz	r0, 8003f76 <_svfiprintf_r+0x152>
 8003f64:	2340      	movs	r3, #64	; 0x40
 8003f66:	eba0 000a 	sub.w	r0, r0, sl
 8003f6a:	fa03 f000 	lsl.w	r0, r3, r0
 8003f6e:	9b04      	ldr	r3, [sp, #16]
 8003f70:	4303      	orrs	r3, r0
 8003f72:	3401      	adds	r4, #1
 8003f74:	9304      	str	r3, [sp, #16]
 8003f76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f7a:	4826      	ldr	r0, [pc, #152]	; (8004014 <_svfiprintf_r+0x1f0>)
 8003f7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f80:	2206      	movs	r2, #6
 8003f82:	f7fc f925 	bl	80001d0 <memchr>
 8003f86:	2800      	cmp	r0, #0
 8003f88:	d038      	beq.n	8003ffc <_svfiprintf_r+0x1d8>
 8003f8a:	4b23      	ldr	r3, [pc, #140]	; (8004018 <_svfiprintf_r+0x1f4>)
 8003f8c:	bb1b      	cbnz	r3, 8003fd6 <_svfiprintf_r+0x1b2>
 8003f8e:	9b03      	ldr	r3, [sp, #12]
 8003f90:	3307      	adds	r3, #7
 8003f92:	f023 0307 	bic.w	r3, r3, #7
 8003f96:	3308      	adds	r3, #8
 8003f98:	9303      	str	r3, [sp, #12]
 8003f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f9c:	4433      	add	r3, r6
 8003f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8003fa0:	e767      	b.n	8003e72 <_svfiprintf_r+0x4e>
 8003fa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fa6:	460c      	mov	r4, r1
 8003fa8:	2001      	movs	r0, #1
 8003faa:	e7a5      	b.n	8003ef8 <_svfiprintf_r+0xd4>
 8003fac:	2300      	movs	r3, #0
 8003fae:	3401      	adds	r4, #1
 8003fb0:	9305      	str	r3, [sp, #20]
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	f04f 0c0a 	mov.w	ip, #10
 8003fb8:	4620      	mov	r0, r4
 8003fba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fbe:	3a30      	subs	r2, #48	; 0x30
 8003fc0:	2a09      	cmp	r2, #9
 8003fc2:	d903      	bls.n	8003fcc <_svfiprintf_r+0x1a8>
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0c5      	beq.n	8003f54 <_svfiprintf_r+0x130>
 8003fc8:	9105      	str	r1, [sp, #20]
 8003fca:	e7c3      	b.n	8003f54 <_svfiprintf_r+0x130>
 8003fcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fd0:	4604      	mov	r4, r0
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e7f0      	b.n	8003fb8 <_svfiprintf_r+0x194>
 8003fd6:	ab03      	add	r3, sp, #12
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	462a      	mov	r2, r5
 8003fdc:	4b0f      	ldr	r3, [pc, #60]	; (800401c <_svfiprintf_r+0x1f8>)
 8003fde:	a904      	add	r1, sp, #16
 8003fe0:	4638      	mov	r0, r7
 8003fe2:	f3af 8000 	nop.w
 8003fe6:	1c42      	adds	r2, r0, #1
 8003fe8:	4606      	mov	r6, r0
 8003fea:	d1d6      	bne.n	8003f9a <_svfiprintf_r+0x176>
 8003fec:	89ab      	ldrh	r3, [r5, #12]
 8003fee:	065b      	lsls	r3, r3, #25
 8003ff0:	f53f af2c 	bmi.w	8003e4c <_svfiprintf_r+0x28>
 8003ff4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ff6:	b01d      	add	sp, #116	; 0x74
 8003ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ffc:	ab03      	add	r3, sp, #12
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	462a      	mov	r2, r5
 8004002:	4b06      	ldr	r3, [pc, #24]	; (800401c <_svfiprintf_r+0x1f8>)
 8004004:	a904      	add	r1, sp, #16
 8004006:	4638      	mov	r0, r7
 8004008:	f000 f87a 	bl	8004100 <_printf_i>
 800400c:	e7eb      	b.n	8003fe6 <_svfiprintf_r+0x1c2>
 800400e:	bf00      	nop
 8004010:	0800465c 	.word	0x0800465c
 8004014:	08004666 	.word	0x08004666
 8004018:	00000000 	.word	0x00000000
 800401c:	08003d6d 	.word	0x08003d6d
 8004020:	08004662 	.word	0x08004662

08004024 <_printf_common>:
 8004024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004028:	4616      	mov	r6, r2
 800402a:	4699      	mov	r9, r3
 800402c:	688a      	ldr	r2, [r1, #8]
 800402e:	690b      	ldr	r3, [r1, #16]
 8004030:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004034:	4293      	cmp	r3, r2
 8004036:	bfb8      	it	lt
 8004038:	4613      	movlt	r3, r2
 800403a:	6033      	str	r3, [r6, #0]
 800403c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004040:	4607      	mov	r7, r0
 8004042:	460c      	mov	r4, r1
 8004044:	b10a      	cbz	r2, 800404a <_printf_common+0x26>
 8004046:	3301      	adds	r3, #1
 8004048:	6033      	str	r3, [r6, #0]
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	0699      	lsls	r1, r3, #26
 800404e:	bf42      	ittt	mi
 8004050:	6833      	ldrmi	r3, [r6, #0]
 8004052:	3302      	addmi	r3, #2
 8004054:	6033      	strmi	r3, [r6, #0]
 8004056:	6825      	ldr	r5, [r4, #0]
 8004058:	f015 0506 	ands.w	r5, r5, #6
 800405c:	d106      	bne.n	800406c <_printf_common+0x48>
 800405e:	f104 0a19 	add.w	sl, r4, #25
 8004062:	68e3      	ldr	r3, [r4, #12]
 8004064:	6832      	ldr	r2, [r6, #0]
 8004066:	1a9b      	subs	r3, r3, r2
 8004068:	42ab      	cmp	r3, r5
 800406a:	dc26      	bgt.n	80040ba <_printf_common+0x96>
 800406c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004070:	1e13      	subs	r3, r2, #0
 8004072:	6822      	ldr	r2, [r4, #0]
 8004074:	bf18      	it	ne
 8004076:	2301      	movne	r3, #1
 8004078:	0692      	lsls	r2, r2, #26
 800407a:	d42b      	bmi.n	80040d4 <_printf_common+0xb0>
 800407c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004080:	4649      	mov	r1, r9
 8004082:	4638      	mov	r0, r7
 8004084:	47c0      	blx	r8
 8004086:	3001      	adds	r0, #1
 8004088:	d01e      	beq.n	80040c8 <_printf_common+0xa4>
 800408a:	6823      	ldr	r3, [r4, #0]
 800408c:	68e5      	ldr	r5, [r4, #12]
 800408e:	6832      	ldr	r2, [r6, #0]
 8004090:	f003 0306 	and.w	r3, r3, #6
 8004094:	2b04      	cmp	r3, #4
 8004096:	bf08      	it	eq
 8004098:	1aad      	subeq	r5, r5, r2
 800409a:	68a3      	ldr	r3, [r4, #8]
 800409c:	6922      	ldr	r2, [r4, #16]
 800409e:	bf0c      	ite	eq
 80040a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040a4:	2500      	movne	r5, #0
 80040a6:	4293      	cmp	r3, r2
 80040a8:	bfc4      	itt	gt
 80040aa:	1a9b      	subgt	r3, r3, r2
 80040ac:	18ed      	addgt	r5, r5, r3
 80040ae:	2600      	movs	r6, #0
 80040b0:	341a      	adds	r4, #26
 80040b2:	42b5      	cmp	r5, r6
 80040b4:	d11a      	bne.n	80040ec <_printf_common+0xc8>
 80040b6:	2000      	movs	r0, #0
 80040b8:	e008      	b.n	80040cc <_printf_common+0xa8>
 80040ba:	2301      	movs	r3, #1
 80040bc:	4652      	mov	r2, sl
 80040be:	4649      	mov	r1, r9
 80040c0:	4638      	mov	r0, r7
 80040c2:	47c0      	blx	r8
 80040c4:	3001      	adds	r0, #1
 80040c6:	d103      	bne.n	80040d0 <_printf_common+0xac>
 80040c8:	f04f 30ff 	mov.w	r0, #4294967295
 80040cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040d0:	3501      	adds	r5, #1
 80040d2:	e7c6      	b.n	8004062 <_printf_common+0x3e>
 80040d4:	18e1      	adds	r1, r4, r3
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	2030      	movs	r0, #48	; 0x30
 80040da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040de:	4422      	add	r2, r4
 80040e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040e8:	3302      	adds	r3, #2
 80040ea:	e7c7      	b.n	800407c <_printf_common+0x58>
 80040ec:	2301      	movs	r3, #1
 80040ee:	4622      	mov	r2, r4
 80040f0:	4649      	mov	r1, r9
 80040f2:	4638      	mov	r0, r7
 80040f4:	47c0      	blx	r8
 80040f6:	3001      	adds	r0, #1
 80040f8:	d0e6      	beq.n	80040c8 <_printf_common+0xa4>
 80040fa:	3601      	adds	r6, #1
 80040fc:	e7d9      	b.n	80040b2 <_printf_common+0x8e>
	...

08004100 <_printf_i>:
 8004100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004104:	7e0f      	ldrb	r7, [r1, #24]
 8004106:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004108:	2f78      	cmp	r7, #120	; 0x78
 800410a:	4691      	mov	r9, r2
 800410c:	4680      	mov	r8, r0
 800410e:	460c      	mov	r4, r1
 8004110:	469a      	mov	sl, r3
 8004112:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004116:	d807      	bhi.n	8004128 <_printf_i+0x28>
 8004118:	2f62      	cmp	r7, #98	; 0x62
 800411a:	d80a      	bhi.n	8004132 <_printf_i+0x32>
 800411c:	2f00      	cmp	r7, #0
 800411e:	f000 80d8 	beq.w	80042d2 <_printf_i+0x1d2>
 8004122:	2f58      	cmp	r7, #88	; 0x58
 8004124:	f000 80a3 	beq.w	800426e <_printf_i+0x16e>
 8004128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800412c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004130:	e03a      	b.n	80041a8 <_printf_i+0xa8>
 8004132:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004136:	2b15      	cmp	r3, #21
 8004138:	d8f6      	bhi.n	8004128 <_printf_i+0x28>
 800413a:	a101      	add	r1, pc, #4	; (adr r1, 8004140 <_printf_i+0x40>)
 800413c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004140:	08004199 	.word	0x08004199
 8004144:	080041ad 	.word	0x080041ad
 8004148:	08004129 	.word	0x08004129
 800414c:	08004129 	.word	0x08004129
 8004150:	08004129 	.word	0x08004129
 8004154:	08004129 	.word	0x08004129
 8004158:	080041ad 	.word	0x080041ad
 800415c:	08004129 	.word	0x08004129
 8004160:	08004129 	.word	0x08004129
 8004164:	08004129 	.word	0x08004129
 8004168:	08004129 	.word	0x08004129
 800416c:	080042b9 	.word	0x080042b9
 8004170:	080041dd 	.word	0x080041dd
 8004174:	0800429b 	.word	0x0800429b
 8004178:	08004129 	.word	0x08004129
 800417c:	08004129 	.word	0x08004129
 8004180:	080042db 	.word	0x080042db
 8004184:	08004129 	.word	0x08004129
 8004188:	080041dd 	.word	0x080041dd
 800418c:	08004129 	.word	0x08004129
 8004190:	08004129 	.word	0x08004129
 8004194:	080042a3 	.word	0x080042a3
 8004198:	682b      	ldr	r3, [r5, #0]
 800419a:	1d1a      	adds	r2, r3, #4
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	602a      	str	r2, [r5, #0]
 80041a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041a8:	2301      	movs	r3, #1
 80041aa:	e0a3      	b.n	80042f4 <_printf_i+0x1f4>
 80041ac:	6820      	ldr	r0, [r4, #0]
 80041ae:	6829      	ldr	r1, [r5, #0]
 80041b0:	0606      	lsls	r6, r0, #24
 80041b2:	f101 0304 	add.w	r3, r1, #4
 80041b6:	d50a      	bpl.n	80041ce <_printf_i+0xce>
 80041b8:	680e      	ldr	r6, [r1, #0]
 80041ba:	602b      	str	r3, [r5, #0]
 80041bc:	2e00      	cmp	r6, #0
 80041be:	da03      	bge.n	80041c8 <_printf_i+0xc8>
 80041c0:	232d      	movs	r3, #45	; 0x2d
 80041c2:	4276      	negs	r6, r6
 80041c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041c8:	485e      	ldr	r0, [pc, #376]	; (8004344 <_printf_i+0x244>)
 80041ca:	230a      	movs	r3, #10
 80041cc:	e019      	b.n	8004202 <_printf_i+0x102>
 80041ce:	680e      	ldr	r6, [r1, #0]
 80041d0:	602b      	str	r3, [r5, #0]
 80041d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041d6:	bf18      	it	ne
 80041d8:	b236      	sxthne	r6, r6
 80041da:	e7ef      	b.n	80041bc <_printf_i+0xbc>
 80041dc:	682b      	ldr	r3, [r5, #0]
 80041de:	6820      	ldr	r0, [r4, #0]
 80041e0:	1d19      	adds	r1, r3, #4
 80041e2:	6029      	str	r1, [r5, #0]
 80041e4:	0601      	lsls	r1, r0, #24
 80041e6:	d501      	bpl.n	80041ec <_printf_i+0xec>
 80041e8:	681e      	ldr	r6, [r3, #0]
 80041ea:	e002      	b.n	80041f2 <_printf_i+0xf2>
 80041ec:	0646      	lsls	r6, r0, #25
 80041ee:	d5fb      	bpl.n	80041e8 <_printf_i+0xe8>
 80041f0:	881e      	ldrh	r6, [r3, #0]
 80041f2:	4854      	ldr	r0, [pc, #336]	; (8004344 <_printf_i+0x244>)
 80041f4:	2f6f      	cmp	r7, #111	; 0x6f
 80041f6:	bf0c      	ite	eq
 80041f8:	2308      	moveq	r3, #8
 80041fa:	230a      	movne	r3, #10
 80041fc:	2100      	movs	r1, #0
 80041fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004202:	6865      	ldr	r5, [r4, #4]
 8004204:	60a5      	str	r5, [r4, #8]
 8004206:	2d00      	cmp	r5, #0
 8004208:	bfa2      	ittt	ge
 800420a:	6821      	ldrge	r1, [r4, #0]
 800420c:	f021 0104 	bicge.w	r1, r1, #4
 8004210:	6021      	strge	r1, [r4, #0]
 8004212:	b90e      	cbnz	r6, 8004218 <_printf_i+0x118>
 8004214:	2d00      	cmp	r5, #0
 8004216:	d04d      	beq.n	80042b4 <_printf_i+0x1b4>
 8004218:	4615      	mov	r5, r2
 800421a:	fbb6 f1f3 	udiv	r1, r6, r3
 800421e:	fb03 6711 	mls	r7, r3, r1, r6
 8004222:	5dc7      	ldrb	r7, [r0, r7]
 8004224:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004228:	4637      	mov	r7, r6
 800422a:	42bb      	cmp	r3, r7
 800422c:	460e      	mov	r6, r1
 800422e:	d9f4      	bls.n	800421a <_printf_i+0x11a>
 8004230:	2b08      	cmp	r3, #8
 8004232:	d10b      	bne.n	800424c <_printf_i+0x14c>
 8004234:	6823      	ldr	r3, [r4, #0]
 8004236:	07de      	lsls	r6, r3, #31
 8004238:	d508      	bpl.n	800424c <_printf_i+0x14c>
 800423a:	6923      	ldr	r3, [r4, #16]
 800423c:	6861      	ldr	r1, [r4, #4]
 800423e:	4299      	cmp	r1, r3
 8004240:	bfde      	ittt	le
 8004242:	2330      	movle	r3, #48	; 0x30
 8004244:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004248:	f105 35ff 	addle.w	r5, r5, #4294967295
 800424c:	1b52      	subs	r2, r2, r5
 800424e:	6122      	str	r2, [r4, #16]
 8004250:	f8cd a000 	str.w	sl, [sp]
 8004254:	464b      	mov	r3, r9
 8004256:	aa03      	add	r2, sp, #12
 8004258:	4621      	mov	r1, r4
 800425a:	4640      	mov	r0, r8
 800425c:	f7ff fee2 	bl	8004024 <_printf_common>
 8004260:	3001      	adds	r0, #1
 8004262:	d14c      	bne.n	80042fe <_printf_i+0x1fe>
 8004264:	f04f 30ff 	mov.w	r0, #4294967295
 8004268:	b004      	add	sp, #16
 800426a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800426e:	4835      	ldr	r0, [pc, #212]	; (8004344 <_printf_i+0x244>)
 8004270:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004274:	6829      	ldr	r1, [r5, #0]
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	f851 6b04 	ldr.w	r6, [r1], #4
 800427c:	6029      	str	r1, [r5, #0]
 800427e:	061d      	lsls	r5, r3, #24
 8004280:	d514      	bpl.n	80042ac <_printf_i+0x1ac>
 8004282:	07df      	lsls	r7, r3, #31
 8004284:	bf44      	itt	mi
 8004286:	f043 0320 	orrmi.w	r3, r3, #32
 800428a:	6023      	strmi	r3, [r4, #0]
 800428c:	b91e      	cbnz	r6, 8004296 <_printf_i+0x196>
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	f023 0320 	bic.w	r3, r3, #32
 8004294:	6023      	str	r3, [r4, #0]
 8004296:	2310      	movs	r3, #16
 8004298:	e7b0      	b.n	80041fc <_printf_i+0xfc>
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	f043 0320 	orr.w	r3, r3, #32
 80042a0:	6023      	str	r3, [r4, #0]
 80042a2:	2378      	movs	r3, #120	; 0x78
 80042a4:	4828      	ldr	r0, [pc, #160]	; (8004348 <_printf_i+0x248>)
 80042a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042aa:	e7e3      	b.n	8004274 <_printf_i+0x174>
 80042ac:	0659      	lsls	r1, r3, #25
 80042ae:	bf48      	it	mi
 80042b0:	b2b6      	uxthmi	r6, r6
 80042b2:	e7e6      	b.n	8004282 <_printf_i+0x182>
 80042b4:	4615      	mov	r5, r2
 80042b6:	e7bb      	b.n	8004230 <_printf_i+0x130>
 80042b8:	682b      	ldr	r3, [r5, #0]
 80042ba:	6826      	ldr	r6, [r4, #0]
 80042bc:	6961      	ldr	r1, [r4, #20]
 80042be:	1d18      	adds	r0, r3, #4
 80042c0:	6028      	str	r0, [r5, #0]
 80042c2:	0635      	lsls	r5, r6, #24
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	d501      	bpl.n	80042cc <_printf_i+0x1cc>
 80042c8:	6019      	str	r1, [r3, #0]
 80042ca:	e002      	b.n	80042d2 <_printf_i+0x1d2>
 80042cc:	0670      	lsls	r0, r6, #25
 80042ce:	d5fb      	bpl.n	80042c8 <_printf_i+0x1c8>
 80042d0:	8019      	strh	r1, [r3, #0]
 80042d2:	2300      	movs	r3, #0
 80042d4:	6123      	str	r3, [r4, #16]
 80042d6:	4615      	mov	r5, r2
 80042d8:	e7ba      	b.n	8004250 <_printf_i+0x150>
 80042da:	682b      	ldr	r3, [r5, #0]
 80042dc:	1d1a      	adds	r2, r3, #4
 80042de:	602a      	str	r2, [r5, #0]
 80042e0:	681d      	ldr	r5, [r3, #0]
 80042e2:	6862      	ldr	r2, [r4, #4]
 80042e4:	2100      	movs	r1, #0
 80042e6:	4628      	mov	r0, r5
 80042e8:	f7fb ff72 	bl	80001d0 <memchr>
 80042ec:	b108      	cbz	r0, 80042f2 <_printf_i+0x1f2>
 80042ee:	1b40      	subs	r0, r0, r5
 80042f0:	6060      	str	r0, [r4, #4]
 80042f2:	6863      	ldr	r3, [r4, #4]
 80042f4:	6123      	str	r3, [r4, #16]
 80042f6:	2300      	movs	r3, #0
 80042f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042fc:	e7a8      	b.n	8004250 <_printf_i+0x150>
 80042fe:	6923      	ldr	r3, [r4, #16]
 8004300:	462a      	mov	r2, r5
 8004302:	4649      	mov	r1, r9
 8004304:	4640      	mov	r0, r8
 8004306:	47d0      	blx	sl
 8004308:	3001      	adds	r0, #1
 800430a:	d0ab      	beq.n	8004264 <_printf_i+0x164>
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	079b      	lsls	r3, r3, #30
 8004310:	d413      	bmi.n	800433a <_printf_i+0x23a>
 8004312:	68e0      	ldr	r0, [r4, #12]
 8004314:	9b03      	ldr	r3, [sp, #12]
 8004316:	4298      	cmp	r0, r3
 8004318:	bfb8      	it	lt
 800431a:	4618      	movlt	r0, r3
 800431c:	e7a4      	b.n	8004268 <_printf_i+0x168>
 800431e:	2301      	movs	r3, #1
 8004320:	4632      	mov	r2, r6
 8004322:	4649      	mov	r1, r9
 8004324:	4640      	mov	r0, r8
 8004326:	47d0      	blx	sl
 8004328:	3001      	adds	r0, #1
 800432a:	d09b      	beq.n	8004264 <_printf_i+0x164>
 800432c:	3501      	adds	r5, #1
 800432e:	68e3      	ldr	r3, [r4, #12]
 8004330:	9903      	ldr	r1, [sp, #12]
 8004332:	1a5b      	subs	r3, r3, r1
 8004334:	42ab      	cmp	r3, r5
 8004336:	dcf2      	bgt.n	800431e <_printf_i+0x21e>
 8004338:	e7eb      	b.n	8004312 <_printf_i+0x212>
 800433a:	2500      	movs	r5, #0
 800433c:	f104 0619 	add.w	r6, r4, #25
 8004340:	e7f5      	b.n	800432e <_printf_i+0x22e>
 8004342:	bf00      	nop
 8004344:	0800466d 	.word	0x0800466d
 8004348:	0800467e 	.word	0x0800467e

0800434c <memcpy>:
 800434c:	440a      	add	r2, r1
 800434e:	4291      	cmp	r1, r2
 8004350:	f100 33ff 	add.w	r3, r0, #4294967295
 8004354:	d100      	bne.n	8004358 <memcpy+0xc>
 8004356:	4770      	bx	lr
 8004358:	b510      	push	{r4, lr}
 800435a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800435e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004362:	4291      	cmp	r1, r2
 8004364:	d1f9      	bne.n	800435a <memcpy+0xe>
 8004366:	bd10      	pop	{r4, pc}

08004368 <memmove>:
 8004368:	4288      	cmp	r0, r1
 800436a:	b510      	push	{r4, lr}
 800436c:	eb01 0402 	add.w	r4, r1, r2
 8004370:	d902      	bls.n	8004378 <memmove+0x10>
 8004372:	4284      	cmp	r4, r0
 8004374:	4623      	mov	r3, r4
 8004376:	d807      	bhi.n	8004388 <memmove+0x20>
 8004378:	1e43      	subs	r3, r0, #1
 800437a:	42a1      	cmp	r1, r4
 800437c:	d008      	beq.n	8004390 <memmove+0x28>
 800437e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004382:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004386:	e7f8      	b.n	800437a <memmove+0x12>
 8004388:	4402      	add	r2, r0
 800438a:	4601      	mov	r1, r0
 800438c:	428a      	cmp	r2, r1
 800438e:	d100      	bne.n	8004392 <memmove+0x2a>
 8004390:	bd10      	pop	{r4, pc}
 8004392:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004396:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800439a:	e7f7      	b.n	800438c <memmove+0x24>

0800439c <_free_r>:
 800439c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800439e:	2900      	cmp	r1, #0
 80043a0:	d044      	beq.n	800442c <_free_r+0x90>
 80043a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043a6:	9001      	str	r0, [sp, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f1a1 0404 	sub.w	r4, r1, #4
 80043ae:	bfb8      	it	lt
 80043b0:	18e4      	addlt	r4, r4, r3
 80043b2:	f000 f913 	bl	80045dc <__malloc_lock>
 80043b6:	4a1e      	ldr	r2, [pc, #120]	; (8004430 <_free_r+0x94>)
 80043b8:	9801      	ldr	r0, [sp, #4]
 80043ba:	6813      	ldr	r3, [r2, #0]
 80043bc:	b933      	cbnz	r3, 80043cc <_free_r+0x30>
 80043be:	6063      	str	r3, [r4, #4]
 80043c0:	6014      	str	r4, [r2, #0]
 80043c2:	b003      	add	sp, #12
 80043c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043c8:	f000 b90e 	b.w	80045e8 <__malloc_unlock>
 80043cc:	42a3      	cmp	r3, r4
 80043ce:	d908      	bls.n	80043e2 <_free_r+0x46>
 80043d0:	6825      	ldr	r5, [r4, #0]
 80043d2:	1961      	adds	r1, r4, r5
 80043d4:	428b      	cmp	r3, r1
 80043d6:	bf01      	itttt	eq
 80043d8:	6819      	ldreq	r1, [r3, #0]
 80043da:	685b      	ldreq	r3, [r3, #4]
 80043dc:	1949      	addeq	r1, r1, r5
 80043de:	6021      	streq	r1, [r4, #0]
 80043e0:	e7ed      	b.n	80043be <_free_r+0x22>
 80043e2:	461a      	mov	r2, r3
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	b10b      	cbz	r3, 80043ec <_free_r+0x50>
 80043e8:	42a3      	cmp	r3, r4
 80043ea:	d9fa      	bls.n	80043e2 <_free_r+0x46>
 80043ec:	6811      	ldr	r1, [r2, #0]
 80043ee:	1855      	adds	r5, r2, r1
 80043f0:	42a5      	cmp	r5, r4
 80043f2:	d10b      	bne.n	800440c <_free_r+0x70>
 80043f4:	6824      	ldr	r4, [r4, #0]
 80043f6:	4421      	add	r1, r4
 80043f8:	1854      	adds	r4, r2, r1
 80043fa:	42a3      	cmp	r3, r4
 80043fc:	6011      	str	r1, [r2, #0]
 80043fe:	d1e0      	bne.n	80043c2 <_free_r+0x26>
 8004400:	681c      	ldr	r4, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	6053      	str	r3, [r2, #4]
 8004406:	4421      	add	r1, r4
 8004408:	6011      	str	r1, [r2, #0]
 800440a:	e7da      	b.n	80043c2 <_free_r+0x26>
 800440c:	d902      	bls.n	8004414 <_free_r+0x78>
 800440e:	230c      	movs	r3, #12
 8004410:	6003      	str	r3, [r0, #0]
 8004412:	e7d6      	b.n	80043c2 <_free_r+0x26>
 8004414:	6825      	ldr	r5, [r4, #0]
 8004416:	1961      	adds	r1, r4, r5
 8004418:	428b      	cmp	r3, r1
 800441a:	bf04      	itt	eq
 800441c:	6819      	ldreq	r1, [r3, #0]
 800441e:	685b      	ldreq	r3, [r3, #4]
 8004420:	6063      	str	r3, [r4, #4]
 8004422:	bf04      	itt	eq
 8004424:	1949      	addeq	r1, r1, r5
 8004426:	6021      	streq	r1, [r4, #0]
 8004428:	6054      	str	r4, [r2, #4]
 800442a:	e7ca      	b.n	80043c2 <_free_r+0x26>
 800442c:	b003      	add	sp, #12
 800442e:	bd30      	pop	{r4, r5, pc}
 8004430:	2000064c 	.word	0x2000064c

08004434 <sbrk_aligned>:
 8004434:	b570      	push	{r4, r5, r6, lr}
 8004436:	4e0e      	ldr	r6, [pc, #56]	; (8004470 <sbrk_aligned+0x3c>)
 8004438:	460c      	mov	r4, r1
 800443a:	6831      	ldr	r1, [r6, #0]
 800443c:	4605      	mov	r5, r0
 800443e:	b911      	cbnz	r1, 8004446 <sbrk_aligned+0x12>
 8004440:	f000 f8bc 	bl	80045bc <_sbrk_r>
 8004444:	6030      	str	r0, [r6, #0]
 8004446:	4621      	mov	r1, r4
 8004448:	4628      	mov	r0, r5
 800444a:	f000 f8b7 	bl	80045bc <_sbrk_r>
 800444e:	1c43      	adds	r3, r0, #1
 8004450:	d00a      	beq.n	8004468 <sbrk_aligned+0x34>
 8004452:	1cc4      	adds	r4, r0, #3
 8004454:	f024 0403 	bic.w	r4, r4, #3
 8004458:	42a0      	cmp	r0, r4
 800445a:	d007      	beq.n	800446c <sbrk_aligned+0x38>
 800445c:	1a21      	subs	r1, r4, r0
 800445e:	4628      	mov	r0, r5
 8004460:	f000 f8ac 	bl	80045bc <_sbrk_r>
 8004464:	3001      	adds	r0, #1
 8004466:	d101      	bne.n	800446c <sbrk_aligned+0x38>
 8004468:	f04f 34ff 	mov.w	r4, #4294967295
 800446c:	4620      	mov	r0, r4
 800446e:	bd70      	pop	{r4, r5, r6, pc}
 8004470:	20000650 	.word	0x20000650

08004474 <_malloc_r>:
 8004474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004478:	1ccd      	adds	r5, r1, #3
 800447a:	f025 0503 	bic.w	r5, r5, #3
 800447e:	3508      	adds	r5, #8
 8004480:	2d0c      	cmp	r5, #12
 8004482:	bf38      	it	cc
 8004484:	250c      	movcc	r5, #12
 8004486:	2d00      	cmp	r5, #0
 8004488:	4607      	mov	r7, r0
 800448a:	db01      	blt.n	8004490 <_malloc_r+0x1c>
 800448c:	42a9      	cmp	r1, r5
 800448e:	d905      	bls.n	800449c <_malloc_r+0x28>
 8004490:	230c      	movs	r3, #12
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	2600      	movs	r6, #0
 8004496:	4630      	mov	r0, r6
 8004498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800449c:	4e2e      	ldr	r6, [pc, #184]	; (8004558 <_malloc_r+0xe4>)
 800449e:	f000 f89d 	bl	80045dc <__malloc_lock>
 80044a2:	6833      	ldr	r3, [r6, #0]
 80044a4:	461c      	mov	r4, r3
 80044a6:	bb34      	cbnz	r4, 80044f6 <_malloc_r+0x82>
 80044a8:	4629      	mov	r1, r5
 80044aa:	4638      	mov	r0, r7
 80044ac:	f7ff ffc2 	bl	8004434 <sbrk_aligned>
 80044b0:	1c43      	adds	r3, r0, #1
 80044b2:	4604      	mov	r4, r0
 80044b4:	d14d      	bne.n	8004552 <_malloc_r+0xde>
 80044b6:	6834      	ldr	r4, [r6, #0]
 80044b8:	4626      	mov	r6, r4
 80044ba:	2e00      	cmp	r6, #0
 80044bc:	d140      	bne.n	8004540 <_malloc_r+0xcc>
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	4631      	mov	r1, r6
 80044c2:	4638      	mov	r0, r7
 80044c4:	eb04 0803 	add.w	r8, r4, r3
 80044c8:	f000 f878 	bl	80045bc <_sbrk_r>
 80044cc:	4580      	cmp	r8, r0
 80044ce:	d13a      	bne.n	8004546 <_malloc_r+0xd2>
 80044d0:	6821      	ldr	r1, [r4, #0]
 80044d2:	3503      	adds	r5, #3
 80044d4:	1a6d      	subs	r5, r5, r1
 80044d6:	f025 0503 	bic.w	r5, r5, #3
 80044da:	3508      	adds	r5, #8
 80044dc:	2d0c      	cmp	r5, #12
 80044de:	bf38      	it	cc
 80044e0:	250c      	movcc	r5, #12
 80044e2:	4629      	mov	r1, r5
 80044e4:	4638      	mov	r0, r7
 80044e6:	f7ff ffa5 	bl	8004434 <sbrk_aligned>
 80044ea:	3001      	adds	r0, #1
 80044ec:	d02b      	beq.n	8004546 <_malloc_r+0xd2>
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	442b      	add	r3, r5
 80044f2:	6023      	str	r3, [r4, #0]
 80044f4:	e00e      	b.n	8004514 <_malloc_r+0xa0>
 80044f6:	6822      	ldr	r2, [r4, #0]
 80044f8:	1b52      	subs	r2, r2, r5
 80044fa:	d41e      	bmi.n	800453a <_malloc_r+0xc6>
 80044fc:	2a0b      	cmp	r2, #11
 80044fe:	d916      	bls.n	800452e <_malloc_r+0xba>
 8004500:	1961      	adds	r1, r4, r5
 8004502:	42a3      	cmp	r3, r4
 8004504:	6025      	str	r5, [r4, #0]
 8004506:	bf18      	it	ne
 8004508:	6059      	strne	r1, [r3, #4]
 800450a:	6863      	ldr	r3, [r4, #4]
 800450c:	bf08      	it	eq
 800450e:	6031      	streq	r1, [r6, #0]
 8004510:	5162      	str	r2, [r4, r5]
 8004512:	604b      	str	r3, [r1, #4]
 8004514:	4638      	mov	r0, r7
 8004516:	f104 060b 	add.w	r6, r4, #11
 800451a:	f000 f865 	bl	80045e8 <__malloc_unlock>
 800451e:	f026 0607 	bic.w	r6, r6, #7
 8004522:	1d23      	adds	r3, r4, #4
 8004524:	1af2      	subs	r2, r6, r3
 8004526:	d0b6      	beq.n	8004496 <_malloc_r+0x22>
 8004528:	1b9b      	subs	r3, r3, r6
 800452a:	50a3      	str	r3, [r4, r2]
 800452c:	e7b3      	b.n	8004496 <_malloc_r+0x22>
 800452e:	6862      	ldr	r2, [r4, #4]
 8004530:	42a3      	cmp	r3, r4
 8004532:	bf0c      	ite	eq
 8004534:	6032      	streq	r2, [r6, #0]
 8004536:	605a      	strne	r2, [r3, #4]
 8004538:	e7ec      	b.n	8004514 <_malloc_r+0xa0>
 800453a:	4623      	mov	r3, r4
 800453c:	6864      	ldr	r4, [r4, #4]
 800453e:	e7b2      	b.n	80044a6 <_malloc_r+0x32>
 8004540:	4634      	mov	r4, r6
 8004542:	6876      	ldr	r6, [r6, #4]
 8004544:	e7b9      	b.n	80044ba <_malloc_r+0x46>
 8004546:	230c      	movs	r3, #12
 8004548:	603b      	str	r3, [r7, #0]
 800454a:	4638      	mov	r0, r7
 800454c:	f000 f84c 	bl	80045e8 <__malloc_unlock>
 8004550:	e7a1      	b.n	8004496 <_malloc_r+0x22>
 8004552:	6025      	str	r5, [r4, #0]
 8004554:	e7de      	b.n	8004514 <_malloc_r+0xa0>
 8004556:	bf00      	nop
 8004558:	2000064c 	.word	0x2000064c

0800455c <_realloc_r>:
 800455c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004560:	4680      	mov	r8, r0
 8004562:	4614      	mov	r4, r2
 8004564:	460e      	mov	r6, r1
 8004566:	b921      	cbnz	r1, 8004572 <_realloc_r+0x16>
 8004568:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800456c:	4611      	mov	r1, r2
 800456e:	f7ff bf81 	b.w	8004474 <_malloc_r>
 8004572:	b92a      	cbnz	r2, 8004580 <_realloc_r+0x24>
 8004574:	f7ff ff12 	bl	800439c <_free_r>
 8004578:	4625      	mov	r5, r4
 800457a:	4628      	mov	r0, r5
 800457c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004580:	f000 f838 	bl	80045f4 <_malloc_usable_size_r>
 8004584:	4284      	cmp	r4, r0
 8004586:	4607      	mov	r7, r0
 8004588:	d802      	bhi.n	8004590 <_realloc_r+0x34>
 800458a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800458e:	d812      	bhi.n	80045b6 <_realloc_r+0x5a>
 8004590:	4621      	mov	r1, r4
 8004592:	4640      	mov	r0, r8
 8004594:	f7ff ff6e 	bl	8004474 <_malloc_r>
 8004598:	4605      	mov	r5, r0
 800459a:	2800      	cmp	r0, #0
 800459c:	d0ed      	beq.n	800457a <_realloc_r+0x1e>
 800459e:	42bc      	cmp	r4, r7
 80045a0:	4622      	mov	r2, r4
 80045a2:	4631      	mov	r1, r6
 80045a4:	bf28      	it	cs
 80045a6:	463a      	movcs	r2, r7
 80045a8:	f7ff fed0 	bl	800434c <memcpy>
 80045ac:	4631      	mov	r1, r6
 80045ae:	4640      	mov	r0, r8
 80045b0:	f7ff fef4 	bl	800439c <_free_r>
 80045b4:	e7e1      	b.n	800457a <_realloc_r+0x1e>
 80045b6:	4635      	mov	r5, r6
 80045b8:	e7df      	b.n	800457a <_realloc_r+0x1e>
	...

080045bc <_sbrk_r>:
 80045bc:	b538      	push	{r3, r4, r5, lr}
 80045be:	4d06      	ldr	r5, [pc, #24]	; (80045d8 <_sbrk_r+0x1c>)
 80045c0:	2300      	movs	r3, #0
 80045c2:	4604      	mov	r4, r0
 80045c4:	4608      	mov	r0, r1
 80045c6:	602b      	str	r3, [r5, #0]
 80045c8:	f7fc fc46 	bl	8000e58 <_sbrk>
 80045cc:	1c43      	adds	r3, r0, #1
 80045ce:	d102      	bne.n	80045d6 <_sbrk_r+0x1a>
 80045d0:	682b      	ldr	r3, [r5, #0]
 80045d2:	b103      	cbz	r3, 80045d6 <_sbrk_r+0x1a>
 80045d4:	6023      	str	r3, [r4, #0]
 80045d6:	bd38      	pop	{r3, r4, r5, pc}
 80045d8:	20000654 	.word	0x20000654

080045dc <__malloc_lock>:
 80045dc:	4801      	ldr	r0, [pc, #4]	; (80045e4 <__malloc_lock+0x8>)
 80045de:	f000 b811 	b.w	8004604 <__retarget_lock_acquire_recursive>
 80045e2:	bf00      	nop
 80045e4:	20000658 	.word	0x20000658

080045e8 <__malloc_unlock>:
 80045e8:	4801      	ldr	r0, [pc, #4]	; (80045f0 <__malloc_unlock+0x8>)
 80045ea:	f000 b80c 	b.w	8004606 <__retarget_lock_release_recursive>
 80045ee:	bf00      	nop
 80045f0:	20000658 	.word	0x20000658

080045f4 <_malloc_usable_size_r>:
 80045f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045f8:	1f18      	subs	r0, r3, #4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	bfbc      	itt	lt
 80045fe:	580b      	ldrlt	r3, [r1, r0]
 8004600:	18c0      	addlt	r0, r0, r3
 8004602:	4770      	bx	lr

08004604 <__retarget_lock_acquire_recursive>:
 8004604:	4770      	bx	lr

08004606 <__retarget_lock_release_recursive>:
 8004606:	4770      	bx	lr

08004608 <_init>:
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	bf00      	nop
 800460c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460e:	bc08      	pop	{r3}
 8004610:	469e      	mov	lr, r3
 8004612:	4770      	bx	lr

08004614 <_fini>:
 8004614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004616:	bf00      	nop
 8004618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461a:	bc08      	pop	{r3}
 800461c:	469e      	mov	lr, r3
 800461e:	4770      	bx	lr
