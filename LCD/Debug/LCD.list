
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fc0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004150  08004150  00014150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041fc  080041fc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080041fc  080041fc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041fc  080041fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041fc  080041fc  000141fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004200  08004200  00014200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  08004274  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08004274  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c936  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b5a  00000000  00000000  0002c9d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  0002e530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002eef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a766  00000000  00000000  0002f7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9f2  00000000  00000000  00049f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b319  00000000  00000000  00057950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2c69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b50  00000000  00000000  000f2cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004138 	.word	0x08004138

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004138 	.word	0x08004138

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af02      	add	r7, sp, #8
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	f023 030f 	bic.w	r3, r3, #15
 8000290:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	011b      	lsls	r3, r3, #4
 8000296:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000298:	7bfb      	ldrb	r3, [r7, #15]
 800029a:	f043 030c 	orr.w	r3, r3, #12
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80002a2:	7bfb      	ldrb	r3, [r7, #15]
 80002a4:	f043 0308 	orr.w	r3, r3, #8
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80002ac:	7bbb      	ldrb	r3, [r7, #14]
 80002ae:	f043 030c 	orr.w	r3, r3, #12
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80002b6:	7bbb      	ldrb	r3, [r7, #14]
 80002b8:	f043 0308 	orr.w	r3, r3, #8
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002c0:	f107 0208 	add.w	r2, r7, #8
 80002c4:	2364      	movs	r3, #100	; 0x64
 80002c6:	9300      	str	r3, [sp, #0]
 80002c8:	2304      	movs	r3, #4
 80002ca:	214e      	movs	r1, #78	; 0x4e
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <lcd_send_cmd+0x5c>)
 80002ce:	f000 ff57 	bl	8001180 <HAL_I2C_Master_Transmit>
}
 80002d2:	bf00      	nop
 80002d4:	3710      	adds	r7, #16
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	2000008c 	.word	0x2000008c

080002e0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b086      	sub	sp, #24
 80002e4:	af02      	add	r7, sp, #8
 80002e6:	4603      	mov	r3, r0
 80002e8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	f023 030f 	bic.w	r3, r3, #15
 80002f0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	011b      	lsls	r3, r3, #4
 80002f6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80002f8:	7bfb      	ldrb	r3, [r7, #15]
 80002fa:	f043 030d 	orr.w	r3, r3, #13
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000302:	7bfb      	ldrb	r3, [r7, #15]
 8000304:	f043 0309 	orr.w	r3, r3, #9
 8000308:	b2db      	uxtb	r3, r3
 800030a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800030c:	7bbb      	ldrb	r3, [r7, #14]
 800030e:	f043 030d 	orr.w	r3, r3, #13
 8000312:	b2db      	uxtb	r3, r3
 8000314:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000316:	7bbb      	ldrb	r3, [r7, #14]
 8000318:	f043 0309 	orr.w	r3, r3, #9
 800031c:	b2db      	uxtb	r3, r3
 800031e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000320:	f107 0208 	add.w	r2, r7, #8
 8000324:	2364      	movs	r3, #100	; 0x64
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	2304      	movs	r3, #4
 800032a:	214e      	movs	r1, #78	; 0x4e
 800032c:	4803      	ldr	r0, [pc, #12]	; (800033c <lcd_send_data+0x5c>)
 800032e:	f000 ff27 	bl	8001180 <HAL_I2C_Master_Transmit>
}
 8000332:	bf00      	nop
 8000334:	3710      	adds	r7, #16
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	2000008c 	.word	0x2000008c

08000340 <lcd_clear>:
	lcd_put_cur(row,col);
	lcd_send_string(string);
}

void lcd_clear (void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000346:	2080      	movs	r0, #128	; 0x80
 8000348:	f7ff ff9a 	bl	8000280 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 800034c:	2300      	movs	r3, #0
 800034e:	607b      	str	r3, [r7, #4]
 8000350:	e005      	b.n	800035e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000352:	2020      	movs	r0, #32
 8000354:	f7ff ffc4 	bl	80002e0 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	3301      	adds	r3, #1
 800035c:	607b      	str	r3, [r7, #4]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	2b45      	cmp	r3, #69	; 0x45
 8000362:	ddf6      	ble.n	8000352 <lcd_clear+0x12>
	}
}
 8000364:	bf00      	nop
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}

0800036e <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800036e:	b580      	push	{r7, lr}
 8000370:	b082      	sub	sp, #8
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
 8000376:	6039      	str	r1, [r7, #0]
    switch (row)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d003      	beq.n	8000386 <lcd_put_cur+0x18>
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	2b01      	cmp	r3, #1
 8000382:	d005      	beq.n	8000390 <lcd_put_cur+0x22>
 8000384:	e009      	b.n	800039a <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800038c:	603b      	str	r3, [r7, #0]
            break;
 800038e:	e004      	b.n	800039a <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000396:	603b      	str	r3, [r7, #0]
            break;
 8000398:	bf00      	nop
    }

    lcd_send_cmd (col);
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	b2db      	uxtb	r3, r3
 800039e:	4618      	mov	r0, r3
 80003a0:	f7ff ff6e 	bl	8000280 <lcd_send_cmd>
}
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}

080003ac <lcd_init>:


void lcd_init (void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80003b0:	2032      	movs	r0, #50	; 0x32
 80003b2:	f000 fbc1 	bl	8000b38 <HAL_Delay>
	lcd_send_cmd (0x30);
 80003b6:	2030      	movs	r0, #48	; 0x30
 80003b8:	f7ff ff62 	bl	8000280 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80003bc:	2005      	movs	r0, #5
 80003be:	f000 fbbb 	bl	8000b38 <HAL_Delay>
	lcd_send_cmd (0x30);
 80003c2:	2030      	movs	r0, #48	; 0x30
 80003c4:	f7ff ff5c 	bl	8000280 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80003c8:	2001      	movs	r0, #1
 80003ca:	f000 fbb5 	bl	8000b38 <HAL_Delay>
	lcd_send_cmd (0x30);
 80003ce:	2030      	movs	r0, #48	; 0x30
 80003d0:	f7ff ff56 	bl	8000280 <lcd_send_cmd>
	HAL_Delay(10);
 80003d4:	200a      	movs	r0, #10
 80003d6:	f000 fbaf 	bl	8000b38 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80003da:	2020      	movs	r0, #32
 80003dc:	f7ff ff50 	bl	8000280 <lcd_send_cmd>
	HAL_Delay(10);
 80003e0:	200a      	movs	r0, #10
 80003e2:	f000 fba9 	bl	8000b38 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80003e6:	2028      	movs	r0, #40	; 0x28
 80003e8:	f7ff ff4a 	bl	8000280 <lcd_send_cmd>
	HAL_Delay(1);
 80003ec:	2001      	movs	r0, #1
 80003ee:	f000 fba3 	bl	8000b38 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80003f2:	2008      	movs	r0, #8
 80003f4:	f7ff ff44 	bl	8000280 <lcd_send_cmd>
	HAL_Delay(1);
 80003f8:	2001      	movs	r0, #1
 80003fa:	f000 fb9d 	bl	8000b38 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80003fe:	2001      	movs	r0, #1
 8000400:	f7ff ff3e 	bl	8000280 <lcd_send_cmd>
	HAL_Delay(1);
 8000404:	2001      	movs	r0, #1
 8000406:	f000 fb97 	bl	8000b38 <HAL_Delay>
	HAL_Delay(1);
 800040a:	2001      	movs	r0, #1
 800040c:	f000 fb94 	bl	8000b38 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000410:	2006      	movs	r0, #6
 8000412:	f7ff ff35 	bl	8000280 <lcd_send_cmd>
	HAL_Delay(1);
 8000416:	2001      	movs	r0, #1
 8000418:	f000 fb8e 	bl	8000b38 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800041c:	200c      	movs	r0, #12
 800041e:	f7ff ff2f 	bl	8000280 <lcd_send_cmd>
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}

08000426 <lcd_barrido>:

	}

}*/
void lcd_barrido(char *message)
{
 8000426:	b580      	push	{r7, lr}
 8000428:	b086      	sub	sp, #24
 800042a:	af00      	add	r7, sp, #0
 800042c:	6078      	str	r0, [r7, #4]
	int len = strlen(message);
 800042e:	6878      	ldr	r0, [r7, #4]
 8000430:	f7ff fece 	bl	80001d0 <strlen>
 8000434:	4603      	mov	r3, r0
 8000436:	60fb      	str	r3, [r7, #12]
	    int i, j;

	    lcd_clear();
 8000438:	f7ff ff82 	bl	8000340 <lcd_clear>

	    for(i = -15; i < len; i++){
 800043c:	f06f 030e 	mvn.w	r3, #14
 8000440:	617b      	str	r3, [r7, #20]
 8000442:	e02a      	b.n	800049a <lcd_barrido+0x74>
	        for(j = 0; j < 15; j++){
 8000444:	2300      	movs	r3, #0
 8000446:	613b      	str	r3, [r7, #16]
 8000448:	e01b      	b.n	8000482 <lcd_barrido+0x5c>
	            if(i + j >= 0 && i + j < len){
 800044a:	697a      	ldr	r2, [r7, #20]
 800044c:	693b      	ldr	r3, [r7, #16]
 800044e:	4413      	add	r3, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	db13      	blt.n	800047c <lcd_barrido+0x56>
 8000454:	697a      	ldr	r2, [r7, #20]
 8000456:	693b      	ldr	r3, [r7, #16]
 8000458:	4413      	add	r3, r2
 800045a:	68fa      	ldr	r2, [r7, #12]
 800045c:	429a      	cmp	r2, r3
 800045e:	dd0d      	ble.n	800047c <lcd_barrido+0x56>
	                lcd_put_cur(0, j);
 8000460:	6939      	ldr	r1, [r7, #16]
 8000462:	2000      	movs	r0, #0
 8000464:	f7ff ff83 	bl	800036e <lcd_put_cur>
	                lcd_send_data(message[i + j]);
 8000468:	697a      	ldr	r2, [r7, #20]
 800046a:	693b      	ldr	r3, [r7, #16]
 800046c:	4413      	add	r3, r2
 800046e:	461a      	mov	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4413      	add	r3, r2
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ff32 	bl	80002e0 <lcd_send_data>
	        for(j = 0; j < 15; j++){
 800047c:	693b      	ldr	r3, [r7, #16]
 800047e:	3301      	adds	r3, #1
 8000480:	613b      	str	r3, [r7, #16]
 8000482:	693b      	ldr	r3, [r7, #16]
 8000484:	2b0e      	cmp	r3, #14
 8000486:	dde0      	ble.n	800044a <lcd_barrido+0x24>
	            }
	        }
	       HAL_Delay(600);
 8000488:	f44f 7016 	mov.w	r0, #600	; 0x258
 800048c:	f000 fb54 	bl	8000b38 <HAL_Delay>
	      lcd_clear();
 8000490:	f7ff ff56 	bl	8000340 <lcd_clear>
	    for(i = -15; i < len; i++){
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	3301      	adds	r3, #1
 8000498:	617b      	str	r3, [r7, #20]
 800049a:	697a      	ldr	r2, [r7, #20]
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	429a      	cmp	r2, r3
 80004a0:	dbd0      	blt.n	8000444 <lcd_barrido+0x1e>

    }
	    HAL_Delay(500);
 80004a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004a6:	f000 fb47 	bl	8000b38 <HAL_Delay>
}
 80004aa:	bf00      	nop
 80004ac:	3718      	adds	r7, #24
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <lcd_enviar_int>:

void lcd_enviar_int(int numero, int row, int col)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b088      	sub	sp, #32
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	60f8      	str	r0, [r7, #12]
 80004bc:	60b9      	str	r1, [r7, #8]
 80004be:	607a      	str	r2, [r7, #4]
    char buffer[16];
    sprintf(buffer, "%d", numero);
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	68fa      	ldr	r2, [r7, #12]
 80004c6:	4908      	ldr	r1, [pc, #32]	; (80004e8 <lcd_enviar_int+0x34>)
 80004c8:	4618      	mov	r0, r3
 80004ca:	f003 f9c7 	bl	800385c <siprintf>
    lcd_put_cur(row, col);
 80004ce:	6879      	ldr	r1, [r7, #4]
 80004d0:	68b8      	ldr	r0, [r7, #8]
 80004d2:	f7ff ff4c 	bl	800036e <lcd_put_cur>
    lcd_send_string(buffer);
 80004d6:	f107 0310 	add.w	r3, r7, #16
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 f806 	bl	80004ec <lcd_send_string>
}
 80004e0:	bf00      	nop
 80004e2:	3720      	adds	r7, #32
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	08004150 	.word	0x08004150

080004ec <lcd_send_string>:

void lcd_send_string (char *str)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80004f4:	e006      	b.n	8000504 <lcd_send_string+0x18>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	1c5a      	adds	r2, r3, #1
 80004fa:	607a      	str	r2, [r7, #4]
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff feee 	bl	80002e0 <lcd_send_data>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d1f4      	bne.n	80004f6 <lcd_send_string+0xa>
}
 800050c:	bf00      	nop
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 faa6 	bl	8000a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f82a 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f8ee 	bl	8000704 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000528:	f000 f8bc 	bl	80006a4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800052c:	f000 f87a 	bl	8000624 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000530:	f7ff ff3c 	bl	80003ac <lcd_init>
   lcd_enviar("     TE AMO     ", 0, 0);
   lcd_enviar("     FLACA_     ", 1, 0);
   HAL_Delay(1000);
     lcd_clear();*/

	  lcd_barrido("_EL ANIMAL_ _EL CRIMINAL_ _THE BEST_");
 8000534:	480d      	ldr	r0, [pc, #52]	; (800056c <main+0x54>)
 8000536:	f7ff ff76 	bl	8000426 <lcd_barrido>
	  lcd_clear();
 800053a:	f7ff ff01 	bl	8000340 <lcd_clear>
	  lcd_barrido("EH MENTIRAAAAAAA");
 800053e:	480c      	ldr	r0, [pc, #48]	; (8000570 <main+0x58>)
 8000540:	f7ff ff71 	bl	8000426 <lcd_barrido>
	  lcd_clear();
 8000544:	f7ff fefc 	bl	8000340 <lcd_clear>

	  count++;
 8000548:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <main+0x5c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	3301      	adds	r3, #1
 800054e:	4a09      	ldr	r2, [pc, #36]	; (8000574 <main+0x5c>)
 8000550:	6013      	str	r3, [r2, #0]

	       lcd_enviar_int(count, 1, 0);
 8000552:	4b08      	ldr	r3, [pc, #32]	; (8000574 <main+0x5c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2200      	movs	r2, #0
 8000558:	2101      	movs	r1, #1
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff ffaa 	bl	80004b4 <lcd_enviar_int>
	       HAL_Delay(1000);
 8000560:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000564:	f000 fae8 	bl	8000b38 <HAL_Delay>
	  lcd_barrido("_EL ANIMAL_ _EL CRIMINAL_ _THE BEST_");
 8000568:	e7e4      	b.n	8000534 <main+0x1c>
 800056a:	bf00      	nop
 800056c:	08004154 	.word	0x08004154
 8000570:	0800417c 	.word	0x0800417c
 8000574:	20000168 	.word	0x20000168

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b09c      	sub	sp, #112	; 0x70
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000582:	2228      	movs	r2, #40	; 0x28
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f003 f960 	bl	800384c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800059c:	463b      	mov	r3, r7
 800059e:	2234      	movs	r2, #52	; 0x34
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 f952 	bl	800384c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b0:	2310      	movs	r3, #16
 80005b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b4:	2302      	movs	r3, #2
 80005b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b8:	2300      	movs	r3, #0
 80005ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80005bc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80005c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 f976 	bl	80018b8 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80005d2:	f000 f8ff 	bl	80007d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2302      	movs	r3, #2
 80005dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005f0:	2102      	movs	r1, #2
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 f99e 	bl	8002934 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005fe:	f000 f8e9 	bl	80007d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000602:	2320      	movs	r3, #32
 8000604:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060a:	463b      	mov	r3, r7
 800060c:	4618      	mov	r0, r3
 800060e:	f002 fbc7 	bl	8002da0 <HAL_RCCEx_PeriphCLKConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000618:	f000 f8dc 	bl	80007d4 <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3770      	adds	r7, #112	; 0x70
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <MX_I2C1_Init+0x74>)
 800062a:	4a1c      	ldr	r2, [pc, #112]	; (800069c <MX_I2C1_Init+0x78>)
 800062c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_I2C1_Init+0x74>)
 8000630:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <MX_I2C1_Init+0x7c>)
 8000632:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000634:	4b18      	ldr	r3, [pc, #96]	; (8000698 <MX_I2C1_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063a:	4b17      	ldr	r3, [pc, #92]	; (8000698 <MX_I2C1_Init+0x74>)
 800063c:	2201      	movs	r2, #1
 800063e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <MX_I2C1_Init+0x74>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000646:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MX_I2C1_Init+0x74>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <MX_I2C1_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_I2C1_Init+0x74>)
 8000654:	2200      	movs	r2, #0
 8000656:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_I2C1_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800065e:	480e      	ldr	r0, [pc, #56]	; (8000698 <MX_I2C1_Init+0x74>)
 8000660:	f000 fcfe 	bl	8001060 <HAL_I2C_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800066a:	f000 f8b3 	bl	80007d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800066e:	2100      	movs	r1, #0
 8000670:	4809      	ldr	r0, [pc, #36]	; (8000698 <MX_I2C1_Init+0x74>)
 8000672:	f001 f889 	bl	8001788 <HAL_I2CEx_ConfigAnalogFilter>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800067c:	f000 f8aa 	bl	80007d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000680:	2100      	movs	r1, #0
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_I2C1_Init+0x74>)
 8000684:	f001 f8cb 	bl	800181e <HAL_I2CEx_ConfigDigitalFilter>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800068e:	f000 f8a1 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	2000008c 	.word	0x2000008c
 800069c:	40005400 	.word	0x40005400
 80006a0:	2000090e 	.word	0x2000090e

080006a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a8:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006aa:	4a15      	ldr	r2, [pc, #84]	; (8000700 <MX_USART2_UART_Init+0x5c>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006b0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80006b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_USART2_UART_Init+0x58>)
 80006e8:	f002 fcec 	bl	80030c4 <HAL_UART_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006f2:	f000 f86f 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200000e0 	.word	0x200000e0
 8000700:	40004400 	.word	0x40004400

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	4b2b      	ldr	r3, [pc, #172]	; (80007c8 <MX_GPIO_Init+0xc4>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	4a2a      	ldr	r2, [pc, #168]	; (80007c8 <MX_GPIO_Init+0xc4>)
 8000720:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000724:	6153      	str	r3, [r2, #20]
 8000726:	4b28      	ldr	r3, [pc, #160]	; (80007c8 <MX_GPIO_Init+0xc4>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000732:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <MX_GPIO_Init+0xc4>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	4a24      	ldr	r2, [pc, #144]	; (80007c8 <MX_GPIO_Init+0xc4>)
 8000738:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800073c:	6153      	str	r3, [r2, #20]
 800073e:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <MX_GPIO_Init+0xc4>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <MX_GPIO_Init+0xc4>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	4a1e      	ldr	r2, [pc, #120]	; (80007c8 <MX_GPIO_Init+0xc4>)
 8000750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000754:	6153      	str	r3, [r2, #20]
 8000756:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <MX_GPIO_Init+0xc4>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <MX_GPIO_Init+0xc4>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	4a18      	ldr	r2, [pc, #96]	; (80007c8 <MX_GPIO_Init+0xc4>)
 8000768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800076c:	6153      	str	r3, [r2, #20]
 800076e:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <MX_GPIO_Init+0xc4>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000780:	4812      	ldr	r0, [pc, #72]	; (80007cc <MX_GPIO_Init+0xc8>)
 8000782:	f000 fc55 	bl	8001030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000786:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800078c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	480c      	ldr	r0, [pc, #48]	; (80007d0 <MX_GPIO_Init+0xcc>)
 800079e:	f000 fad5 	bl	8000d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	4619      	mov	r1, r3
 80007ba:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_GPIO_Init+0xc8>)
 80007bc:	f000 fac6 	bl	8000d4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c0:	bf00      	nop
 80007c2:	3728      	adds	r7, #40	; 0x28
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40021000 	.word	0x40021000
 80007cc:	48000400 	.word	0x48000400
 80007d0:	48000800 	.word	0x48000800

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007dc:	e7fe      	b.n	80007dc <Error_Handler+0x8>
	...

080007e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <HAL_MspInit+0x44>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <HAL_MspInit+0x44>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6193      	str	r3, [r2, #24]
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <HAL_MspInit+0x44>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_MspInit+0x44>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	4a08      	ldr	r2, [pc, #32]	; (8000824 <HAL_MspInit+0x44>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000808:	61d3      	str	r3, [r2, #28]
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_MspInit+0x44>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000816:	2007      	movs	r0, #7
 8000818:	f000 fa64 	bl	8000ce4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40021000 	.word	0x40021000

08000828 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	; 0x28
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a17      	ldr	r2, [pc, #92]	; (80008a4 <HAL_I2C_MspInit+0x7c>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d128      	bne.n	800089c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <HAL_I2C_MspInit+0x80>)
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	4a16      	ldr	r2, [pc, #88]	; (80008a8 <HAL_I2C_MspInit+0x80>)
 8000850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000854:	6153      	str	r3, [r2, #20]
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <HAL_I2C_MspInit+0x80>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000862:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000868:	2312      	movs	r3, #18
 800086a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000870:	2303      	movs	r3, #3
 8000872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000874:	2304      	movs	r3, #4
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	480b      	ldr	r0, [pc, #44]	; (80008ac <HAL_I2C_MspInit+0x84>)
 8000880:	f000 fa64 	bl	8000d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <HAL_I2C_MspInit+0x80>)
 8000886:	69db      	ldr	r3, [r3, #28]
 8000888:	4a07      	ldr	r2, [pc, #28]	; (80008a8 <HAL_I2C_MspInit+0x80>)
 800088a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800088e:	61d3      	str	r3, [r2, #28]
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <HAL_I2C_MspInit+0x80>)
 8000892:	69db      	ldr	r3, [r3, #28]
 8000894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40005400 	.word	0x40005400
 80008a8:	40021000 	.word	0x40021000
 80008ac:	48000400 	.word	0x48000400

080008b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a17      	ldr	r2, [pc, #92]	; (800092c <HAL_UART_MspInit+0x7c>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d128      	bne.n	8000924 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <HAL_UART_MspInit+0x80>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	4a16      	ldr	r2, [pc, #88]	; (8000930 <HAL_UART_MspInit+0x80>)
 80008d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008dc:	61d3      	str	r3, [r2, #28]
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <HAL_UART_MspInit+0x80>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <HAL_UART_MspInit+0x80>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	4a10      	ldr	r2, [pc, #64]	; (8000930 <HAL_UART_MspInit+0x80>)
 80008f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f4:	6153      	str	r3, [r2, #20]
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <HAL_UART_MspInit+0x80>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000902:	230c      	movs	r3, #12
 8000904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000912:	2307      	movs	r3, #7
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000920:	f000 fa14 	bl	8000d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	; 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40004400 	.word	0x40004400
 8000930:	40021000 	.word	0x40021000

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <NMI_Handler+0x4>

0800093a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <MemManage_Handler+0x4>

08000946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <UsageFault_Handler+0x4>

08000952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000980:	f000 f8ba 	bl	8000af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}

08000988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000990:	4a14      	ldr	r2, [pc, #80]	; (80009e4 <_sbrk+0x5c>)
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <_sbrk+0x60>)
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <_sbrk+0x64>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d102      	bne.n	80009aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <_sbrk+0x64>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <_sbrk+0x68>)
 80009a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <_sbrk+0x64>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d207      	bcs.n	80009c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b8:	f002 ff1e 	bl	80037f8 <__errno>
 80009bc:	4603      	mov	r3, r0
 80009be:	220c      	movs	r2, #12
 80009c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295
 80009c6:	e009      	b.n	80009dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <_sbrk+0x64>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ce:	4b07      	ldr	r3, [pc, #28]	; (80009ec <_sbrk+0x64>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	4a05      	ldr	r2, [pc, #20]	; (80009ec <_sbrk+0x64>)
 80009d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009da:	68fb      	ldr	r3, [r7, #12]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20004000 	.word	0x20004000
 80009e8:	00000400 	.word	0x00000400
 80009ec:	2000016c 	.word	0x2000016c
 80009f0:	20000188 	.word	0x20000188

080009f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <SystemInit+0x20>)
 80009fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fe:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <SystemInit+0x20>)
 8000a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a50 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a1c:	f7ff ffea 	bl	80009f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a20:	480c      	ldr	r0, [pc, #48]	; (8000a54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a22:	490d      	ldr	r1, [pc, #52]	; (8000a58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a24:	4a0d      	ldr	r2, [pc, #52]	; (8000a5c <LoopForever+0xe>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a28:	e002      	b.n	8000a30 <LoopCopyDataInit>

08000a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2e:	3304      	adds	r3, #4

08000a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a34:	d3f9      	bcc.n	8000a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a36:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a38:	4c0a      	ldr	r4, [pc, #40]	; (8000a64 <LoopForever+0x16>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a3c:	e001      	b.n	8000a42 <LoopFillZerobss>

08000a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a40:	3204      	adds	r2, #4

08000a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a44:	d3fb      	bcc.n	8000a3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a46:	f002 fedd 	bl	8003804 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a4a:	f7ff fd65 	bl	8000518 <main>

08000a4e <LoopForever>:

LoopForever:
    b LoopForever
 8000a4e:	e7fe      	b.n	8000a4e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a50:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a58:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a5c:	08004204 	.word	0x08004204
  ldr r2, =_sbss
 8000a60:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a64:	20000184 	.word	0x20000184

08000a68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a68:	e7fe      	b.n	8000a68 <ADC1_IRQHandler>
	...

08000a6c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_Init+0x28>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <HAL_Init+0x28>)
 8000a76:	f043 0310 	orr.w	r3, r3, #16
 8000a7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7c:	2003      	movs	r0, #3
 8000a7e:	f000 f931 	bl	8000ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 f808 	bl	8000a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a88:	f7ff feaa 	bl	80007e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40022000 	.word	0x40022000

08000a98 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_InitTick+0x54>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_InitTick+0x58>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 f93b 	bl	8000d32 <HAL_SYSTICK_Config>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e00e      	b.n	8000ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b0f      	cmp	r3, #15
 8000aca:	d80a      	bhi.n	8000ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000acc:	2200      	movs	r2, #0
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	f000 f911 	bl	8000cfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad8:	4a06      	ldr	r2, [pc, #24]	; (8000af4 <HAL_InitTick+0x5c>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e000      	b.n	8000ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000000 	.word	0x20000000
 8000af0:	20000008 	.word	0x20000008
 8000af4:	20000004 	.word	0x20000004

08000af8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_IncTick+0x20>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_IncTick+0x24>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <HAL_IncTick+0x24>)
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	20000170 	.word	0x20000170

08000b20 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <HAL_GetTick+0x14>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000170 	.word	0x20000170

08000b38 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b40:	f7ff ffee 	bl	8000b20 <HAL_GetTick>
 8000b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b50:	d005      	beq.n	8000b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_Delay+0x44>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b5e:	bf00      	nop
 8000b60:	f7ff ffde 	bl	8000b20 <HAL_GetTick>
 8000b64:	4602      	mov	r2, r0
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d8f7      	bhi.n	8000b60 <HAL_Delay+0x28>
  {
  }
}
 8000b70:	bf00      	nop
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008

08000b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	60d3      	str	r3, [r2, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	f003 0307 	and.w	r3, r3, #7
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	db0a      	blt.n	8000c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	490c      	ldr	r1, [pc, #48]	; (8000c30 <__NVIC_SetPriority+0x4c>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	0112      	lsls	r2, r2, #4
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	440b      	add	r3, r1
 8000c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c0c:	e00a      	b.n	8000c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4908      	ldr	r1, [pc, #32]	; (8000c34 <__NVIC_SetPriority+0x50>)
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	3b04      	subs	r3, #4
 8000c1c:	0112      	lsls	r2, r2, #4
 8000c1e:	b2d2      	uxtb	r2, r2
 8000c20:	440b      	add	r3, r1
 8000c22:	761a      	strb	r2, [r3, #24]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000e100 	.word	0xe000e100
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b089      	sub	sp, #36	; 0x24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	f1c3 0307 	rsb	r3, r3, #7
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	bf28      	it	cs
 8000c56:	2304      	movcs	r3, #4
 8000c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	2b06      	cmp	r3, #6
 8000c60:	d902      	bls.n	8000c68 <NVIC_EncodePriority+0x30>
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3b03      	subs	r3, #3
 8000c66:	e000      	b.n	8000c6a <NVIC_EncodePriority+0x32>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43da      	mvns	r2, r3
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c80:	f04f 31ff 	mov.w	r1, #4294967295
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	43d9      	mvns	r1, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	4313      	orrs	r3, r2
         );
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3724      	adds	r7, #36	; 0x24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
	...

08000ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb0:	d301      	bcc.n	8000cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00f      	b.n	8000cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <SysTick_Config+0x40>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cbe:	210f      	movs	r1, #15
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f7ff ff8e 	bl	8000be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <SysTick_Config+0x40>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cce:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <SysTick_Config+0x40>)
 8000cd0:	2207      	movs	r2, #7
 8000cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	e000e010 	.word	0xe000e010

08000ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff ff47 	bl	8000b80 <__NVIC_SetPriorityGrouping>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b086      	sub	sp, #24
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	4603      	mov	r3, r0
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
 8000d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d0c:	f7ff ff5c 	bl	8000bc8 <__NVIC_GetPriorityGrouping>
 8000d10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	68b9      	ldr	r1, [r7, #8]
 8000d16:	6978      	ldr	r0, [r7, #20]
 8000d18:	f7ff ff8e 	bl	8000c38 <NVIC_EncodePriority>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d22:	4611      	mov	r1, r2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff5d 	bl	8000be4 <__NVIC_SetPriority>
}
 8000d2a:	bf00      	nop
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff ffb0 	bl	8000ca0 <SysTick_Config>
 8000d40:	4603      	mov	r3, r0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b087      	sub	sp, #28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5a:	e14e      	b.n	8000ffa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	2101      	movs	r1, #1
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	fa01 f303 	lsl.w	r3, r1, r3
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 8140 	beq.w	8000ff4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d005      	beq.n	8000d8c <HAL_GPIO_Init+0x40>
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d130      	bne.n	8000dee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	2203      	movs	r2, #3
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	68da      	ldr	r2, [r3, #12]
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	091b      	lsrs	r3, r3, #4
 8000dd8:	f003 0201 	and.w	r2, r3, #1
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	d017      	beq.n	8000e2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	2203      	movs	r2, #3
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	689a      	ldr	r2, [r3, #8]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f003 0303 	and.w	r3, r3, #3
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d123      	bne.n	8000e7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	08da      	lsrs	r2, r3, #3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3208      	adds	r2, #8
 8000e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	220f      	movs	r2, #15
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	691a      	ldr	r2, [r3, #16]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	f003 0307 	and.w	r3, r3, #7
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	08da      	lsrs	r2, r3, #3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3208      	adds	r2, #8
 8000e78:	6939      	ldr	r1, [r7, #16]
 8000e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4013      	ands	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 0203 	and.w	r2, r3, #3
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f000 809a 	beq.w	8000ff4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec0:	4b55      	ldr	r3, [pc, #340]	; (8001018 <HAL_GPIO_Init+0x2cc>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a54      	ldr	r2, [pc, #336]	; (8001018 <HAL_GPIO_Init+0x2cc>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b52      	ldr	r3, [pc, #328]	; (8001018 <HAL_GPIO_Init+0x2cc>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ed8:	4a50      	ldr	r2, [pc, #320]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	089b      	lsrs	r3, r3, #2
 8000ede:	3302      	adds	r3, #2
 8000ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	220f      	movs	r2, #15
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f02:	d013      	beq.n	8000f2c <HAL_GPIO_Init+0x1e0>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a46      	ldr	r2, [pc, #280]	; (8001020 <HAL_GPIO_Init+0x2d4>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d00d      	beq.n	8000f28 <HAL_GPIO_Init+0x1dc>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a45      	ldr	r2, [pc, #276]	; (8001024 <HAL_GPIO_Init+0x2d8>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d007      	beq.n	8000f24 <HAL_GPIO_Init+0x1d8>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a44      	ldr	r2, [pc, #272]	; (8001028 <HAL_GPIO_Init+0x2dc>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d101      	bne.n	8000f20 <HAL_GPIO_Init+0x1d4>
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e006      	b.n	8000f2e <HAL_GPIO_Init+0x1e2>
 8000f20:	2305      	movs	r3, #5
 8000f22:	e004      	b.n	8000f2e <HAL_GPIO_Init+0x1e2>
 8000f24:	2302      	movs	r3, #2
 8000f26:	e002      	b.n	8000f2e <HAL_GPIO_Init+0x1e2>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e000      	b.n	8000f2e <HAL_GPIO_Init+0x1e2>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	f002 0203 	and.w	r2, r2, #3
 8000f34:	0092      	lsls	r2, r2, #2
 8000f36:	4093      	lsls	r3, r2
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f3e:	4937      	ldr	r1, [pc, #220]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	3302      	adds	r3, #2
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f4c:	4b37      	ldr	r3, [pc, #220]	; (800102c <HAL_GPIO_Init+0x2e0>)
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f70:	4a2e      	ldr	r2, [pc, #184]	; (800102c <HAL_GPIO_Init+0x2e0>)
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f76:	4b2d      	ldr	r3, [pc, #180]	; (800102c <HAL_GPIO_Init+0x2e0>)
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f9a:	4a24      	ldr	r2, [pc, #144]	; (800102c <HAL_GPIO_Init+0x2e0>)
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fa0:	4b22      	ldr	r3, [pc, #136]	; (800102c <HAL_GPIO_Init+0x2e0>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fc4:	4a19      	ldr	r2, [pc, #100]	; (800102c <HAL_GPIO_Init+0x2e0>)
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <HAL_GPIO_Init+0x2e0>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fee:	4a0f      	ldr	r2, [pc, #60]	; (800102c <HAL_GPIO_Init+0x2e0>)
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	fa22 f303 	lsr.w	r3, r2, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	f47f aea9 	bne.w	8000d5c <HAL_GPIO_Init+0x10>
  }
}
 800100a:	bf00      	nop
 800100c:	bf00      	nop
 800100e:	371c      	adds	r7, #28
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	40021000 	.word	0x40021000
 800101c:	40010000 	.word	0x40010000
 8001020:	48000400 	.word	0x48000400
 8001024:	48000800 	.word	0x48000800
 8001028:	48000c00 	.word	0x48000c00
 800102c:	40010400 	.word	0x40010400

08001030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	807b      	strh	r3, [r7, #2]
 800103c:	4613      	mov	r3, r2
 800103e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001040:	787b      	ldrb	r3, [r7, #1]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001046:	887a      	ldrh	r2, [r7, #2]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800104c:	e002      	b.n	8001054 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800104e:	887a      	ldrh	r2, [r7, #2]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e081      	b.n	8001176 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d106      	bne.n	800108c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff fbce 	bl	8000828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2224      	movs	r2, #36	; 0x24
 8001090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 0201 	bic.w	r2, r2, #1
 80010a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d107      	bne.n	80010da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	e006      	b.n	80010e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80010e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d104      	bne.n	80010fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	6812      	ldr	r2, [r2, #0]
 8001104:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800110c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	68da      	ldr	r2, [r3, #12]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800111c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	691a      	ldr	r2, [r3, #16]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	430a      	orrs	r2, r1
 8001136:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69d9      	ldr	r1, [r3, #28]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a1a      	ldr	r2, [r3, #32]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	430a      	orrs	r2, r1
 8001146:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 0201 	orr.w	r2, r2, #1
 8001156:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2220      	movs	r2, #32
 8001162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af02      	add	r7, sp, #8
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	461a      	mov	r2, r3
 800118c:	460b      	mov	r3, r1
 800118e:	817b      	strh	r3, [r7, #10]
 8001190:	4613      	mov	r3, r2
 8001192:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b20      	cmp	r3, #32
 800119e:	f040 80da 	bne.w	8001356 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d101      	bne.n	80011b0 <HAL_I2C_Master_Transmit+0x30>
 80011ac:	2302      	movs	r3, #2
 80011ae:	e0d3      	b.n	8001358 <HAL_I2C_Master_Transmit+0x1d8>
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011b8:	f7ff fcb2 	bl	8000b20 <HAL_GetTick>
 80011bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2319      	movs	r3, #25
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f000 f8f0 	bl	80013b0 <I2C_WaitOnFlagUntilTimeout>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e0be      	b.n	8001358 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2221      	movs	r2, #33	; 0x21
 80011de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2210      	movs	r2, #16
 80011e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2200      	movs	r2, #0
 80011ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	893a      	ldrh	r2, [r7, #8]
 80011fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2200      	movs	r2, #0
 8001200:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001206:	b29b      	uxth	r3, r3
 8001208:	2bff      	cmp	r3, #255	; 0xff
 800120a:	d90e      	bls.n	800122a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	22ff      	movs	r2, #255	; 0xff
 8001210:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001216:	b2da      	uxtb	r2, r3
 8001218:	8979      	ldrh	r1, [r7, #10]
 800121a:	4b51      	ldr	r3, [pc, #324]	; (8001360 <HAL_I2C_Master_Transmit+0x1e0>)
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f000 fa7e 	bl	8001724 <I2C_TransferConfig>
 8001228:	e06c      	b.n	8001304 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800122e:	b29a      	uxth	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001238:	b2da      	uxtb	r2, r3
 800123a:	8979      	ldrh	r1, [r7, #10]
 800123c:	4b48      	ldr	r3, [pc, #288]	; (8001360 <HAL_I2C_Master_Transmit+0x1e0>)
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f000 fa6d 	bl	8001724 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800124a:	e05b      	b.n	8001304 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	6a39      	ldr	r1, [r7, #32]
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	f000 f8fc 	bl	800144e <I2C_WaitOnTXISFlagUntilTimeout>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e07b      	b.n	8001358 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001264:	781a      	ldrb	r2, [r3, #0]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001270:	1c5a      	adds	r2, r3, #1
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800127a:	b29b      	uxth	r3, r3
 800127c:	3b01      	subs	r3, #1
 800127e:	b29a      	uxth	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001288:	3b01      	subs	r3, #1
 800128a:	b29a      	uxth	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001294:	b29b      	uxth	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d034      	beq.n	8001304 <HAL_I2C_Master_Transmit+0x184>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d130      	bne.n	8001304 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	6a3b      	ldr	r3, [r7, #32]
 80012a8:	2200      	movs	r2, #0
 80012aa:	2180      	movs	r1, #128	; 0x80
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f000 f87f 	bl	80013b0 <I2C_WaitOnFlagUntilTimeout>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e04d      	b.n	8001358 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	2bff      	cmp	r3, #255	; 0xff
 80012c4:	d90e      	bls.n	80012e4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	22ff      	movs	r2, #255	; 0xff
 80012ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	8979      	ldrh	r1, [r7, #10]
 80012d4:	2300      	movs	r3, #0
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f000 fa21 	bl	8001724 <I2C_TransferConfig>
 80012e2:	e00f      	b.n	8001304 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	8979      	ldrh	r1, [r7, #10]
 80012f6:	2300      	movs	r3, #0
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f000 fa10 	bl	8001724 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001308:	b29b      	uxth	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d19e      	bne.n	800124c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	6a39      	ldr	r1, [r7, #32]
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f000 f8e2 	bl	80014dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e01a      	b.n	8001358 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2220      	movs	r2, #32
 8001328:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6859      	ldr	r1, [r3, #4]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_I2C_Master_Transmit+0x1e4>)
 8001336:	400b      	ands	r3, r1
 8001338:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2220      	movs	r2, #32
 800133e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e000      	b.n	8001358 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001356:	2302      	movs	r3, #2
  }
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	80002000 	.word	0x80002000
 8001364:	fe00e800 	.word	0xfe00e800

08001368 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b02      	cmp	r3, #2
 800137c:	d103      	bne.n	8001386 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2200      	movs	r2, #0
 8001384:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b01      	cmp	r3, #1
 8001392:	d007      	beq.n	80013a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	699a      	ldr	r2, [r3, #24]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f042 0201 	orr.w	r2, r2, #1
 80013a2:	619a      	str	r2, [r3, #24]
  }
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	4613      	mov	r3, r2
 80013be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013c0:	e031      	b.n	8001426 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c8:	d02d      	beq.n	8001426 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013ca:	f7ff fba9 	bl	8000b20 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d302      	bcc.n	80013e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d122      	bne.n	8001426 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	699a      	ldr	r2, [r3, #24]
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	4013      	ands	r3, r2
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	bf0c      	ite	eq
 80013f0:	2301      	moveq	r3, #1
 80013f2:	2300      	movne	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d113      	bne.n	8001426 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f043 0220 	orr.w	r2, r3, #32
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2220      	movs	r2, #32
 800140e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e00f      	b.n	8001446 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	699a      	ldr	r2, [r3, #24]
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	4013      	ands	r3, r2
 8001430:	68ba      	ldr	r2, [r7, #8]
 8001432:	429a      	cmp	r2, r3
 8001434:	bf0c      	ite	eq
 8001436:	2301      	moveq	r3, #1
 8001438:	2300      	movne	r3, #0
 800143a:	b2db      	uxtb	r3, r3
 800143c:	461a      	mov	r2, r3
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	429a      	cmp	r2, r3
 8001442:	d0be      	beq.n	80013c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b084      	sub	sp, #16
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800145a:	e033      	b.n	80014c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	68b9      	ldr	r1, [r7, #8]
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f000 f87f 	bl	8001564 <I2C_IsErrorOccurred>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e031      	b.n	80014d4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001476:	d025      	beq.n	80014c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001478:	f7ff fb52 	bl	8000b20 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	429a      	cmp	r2, r3
 8001486:	d302      	bcc.n	800148e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d11a      	bne.n	80014c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b02      	cmp	r3, #2
 800149a:	d013      	beq.n	80014c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a0:	f043 0220 	orr.w	r2, r3, #32
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2220      	movs	r2, #32
 80014ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e007      	b.n	80014d4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d1c4      	bne.n	800145c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014e8:	e02f      	b.n	800154a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f000 f838 	bl	8001564 <I2C_IsErrorOccurred>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e02d      	b.n	800155a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014fe:	f7ff fb0f 	bl	8000b20 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	68ba      	ldr	r2, [r7, #8]
 800150a:	429a      	cmp	r2, r3
 800150c:	d302      	bcc.n	8001514 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d11a      	bne.n	800154a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	f003 0320 	and.w	r3, r3, #32
 800151e:	2b20      	cmp	r3, #32
 8001520:	d013      	beq.n	800154a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f043 0220 	orr.w	r2, r3, #32
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2220      	movs	r2, #32
 8001532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e007      	b.n	800155a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	f003 0320 	and.w	r3, r3, #32
 8001554:	2b20      	cmp	r3, #32
 8001556:	d1c8      	bne.n	80014ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	; 0x28
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	f003 0310 	and.w	r3, r3, #16
 800158c:	2b00      	cmp	r3, #0
 800158e:	d068      	beq.n	8001662 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2210      	movs	r2, #16
 8001596:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001598:	e049      	b.n	800162e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a0:	d045      	beq.n	800162e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80015a2:	f7ff fabd 	bl	8000b20 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	68ba      	ldr	r2, [r7, #8]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d302      	bcc.n	80015b8 <I2C_IsErrorOccurred+0x54>
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d13a      	bne.n	800162e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80015ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015da:	d121      	bne.n	8001620 <I2C_IsErrorOccurred+0xbc>
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015e2:	d01d      	beq.n	8001620 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80015e4:	7cfb      	ldrb	r3, [r7, #19]
 80015e6:	2b20      	cmp	r3, #32
 80015e8:	d01a      	beq.n	8001620 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80015fa:	f7ff fa91 	bl	8000b20 <HAL_GetTick>
 80015fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001600:	e00e      	b.n	8001620 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001602:	f7ff fa8d 	bl	8000b20 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b19      	cmp	r3, #25
 800160e:	d907      	bls.n	8001620 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	f043 0320 	orr.w	r3, r3, #32
 8001616:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800161e:	e006      	b.n	800162e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	f003 0320 	and.w	r3, r3, #32
 800162a:	2b20      	cmp	r3, #32
 800162c:	d1e9      	bne.n	8001602 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 0320 	and.w	r3, r3, #32
 8001638:	2b20      	cmp	r3, #32
 800163a:	d003      	beq.n	8001644 <I2C_IsErrorOccurred+0xe0>
 800163c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0aa      	beq.n	800159a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001648:	2b00      	cmp	r3, #0
 800164a:	d103      	bne.n	8001654 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2220      	movs	r2, #32
 8001652:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001654:	6a3b      	ldr	r3, [r7, #32]
 8001656:	f043 0304 	orr.w	r3, r3, #4
 800165a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00b      	beq.n	800168c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001684:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00b      	beq.n	80016ae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001696:	6a3b      	ldr	r3, [r7, #32]
 8001698:	f043 0308 	orr.w	r3, r3, #8
 800169c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00b      	beq.n	80016d0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	f043 0302 	orr.w	r3, r3, #2
 80016be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80016d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d01c      	beq.n	8001712 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f7ff fe45 	bl	8001368 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6859      	ldr	r1, [r3, #4]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <I2C_IsErrorOccurred+0x1bc>)
 80016ea:	400b      	ands	r3, r1
 80016ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016f2:	6a3b      	ldr	r3, [r7, #32]
 80016f4:	431a      	orrs	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2220      	movs	r2, #32
 80016fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001712:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001716:	4618      	mov	r0, r3
 8001718:	3728      	adds	r7, #40	; 0x28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	fe00e800 	.word	0xfe00e800

08001724 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001724:	b480      	push	{r7}
 8001726:	b087      	sub	sp, #28
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	460b      	mov	r3, r1
 8001730:	817b      	strh	r3, [r7, #10]
 8001732:	4613      	mov	r3, r2
 8001734:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001736:	897b      	ldrh	r3, [r7, #10]
 8001738:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800173c:	7a7b      	ldrb	r3, [r7, #9]
 800173e:	041b      	lsls	r3, r3, #16
 8001740:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001744:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	4313      	orrs	r3, r2
 800174e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001752:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	0d5b      	lsrs	r3, r3, #21
 800175e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <I2C_TransferConfig+0x60>)
 8001764:	430b      	orrs	r3, r1
 8001766:	43db      	mvns	r3, r3
 8001768:	ea02 0103 	and.w	r1, r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	430a      	orrs	r2, r1
 8001774:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001776:	bf00      	nop
 8001778:	371c      	adds	r7, #28
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	03ff63ff 	.word	0x03ff63ff

08001788 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b20      	cmp	r3, #32
 800179c:	d138      	bne.n	8001810 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e032      	b.n	8001812 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2224      	movs	r2, #36	; 0x24
 80017b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0201 	bic.w	r2, r2, #1
 80017ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6819      	ldr	r1, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0201 	orr.w	r2, r2, #1
 80017fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2220      	movs	r2, #32
 8001800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	e000      	b.n	8001812 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001810:	2302      	movs	r3, #2
  }
}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800181e:	b480      	push	{r7}
 8001820:	b085      	sub	sp, #20
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b20      	cmp	r3, #32
 8001832:	d139      	bne.n	80018a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800183a:	2b01      	cmp	r3, #1
 800183c:	d101      	bne.n	8001842 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800183e:	2302      	movs	r3, #2
 8001840:	e033      	b.n	80018aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2224      	movs	r2, #36	; 0x24
 800184e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 0201 	bic.w	r2, r2, #1
 8001860:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001870:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4313      	orrs	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0201 	orr.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2220      	movs	r2, #32
 8001898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	e000      	b.n	80018aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80018a8:	2302      	movs	r3, #2
  }
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80018be:	af00      	add	r7, sp, #0
 80018c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018c8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	f001 b823 	b.w	8002924 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 817d 	beq.w	8001bee <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018f4:	4bbc      	ldr	r3, [pc, #752]	; (8001be8 <HAL_RCC_OscConfig+0x330>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 030c 	and.w	r3, r3, #12
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d00c      	beq.n	800191a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001900:	4bb9      	ldr	r3, [pc, #740]	; (8001be8 <HAL_RCC_OscConfig+0x330>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	2b08      	cmp	r3, #8
 800190a:	d15c      	bne.n	80019c6 <HAL_RCC_OscConfig+0x10e>
 800190c:	4bb6      	ldr	r3, [pc, #728]	; (8001be8 <HAL_RCC_OscConfig+0x330>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001918:	d155      	bne.n	80019c6 <HAL_RCC_OscConfig+0x10e>
 800191a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800191e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001922:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800192e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001932:	fab3 f383 	clz	r3, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	095b      	lsrs	r3, r3, #5
 800193a:	b2db      	uxtb	r3, r3
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b01      	cmp	r3, #1
 8001944:	d102      	bne.n	800194c <HAL_RCC_OscConfig+0x94>
 8001946:	4ba8      	ldr	r3, [pc, #672]	; (8001be8 <HAL_RCC_OscConfig+0x330>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	e015      	b.n	8001978 <HAL_RCC_OscConfig+0xc0>
 800194c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001950:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001958:	fa93 f3a3 	rbit	r3, r3
 800195c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001960:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001964:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001968:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800196c:	fa93 f3a3 	rbit	r3, r3
 8001970:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001974:	4b9c      	ldr	r3, [pc, #624]	; (8001be8 <HAL_RCC_OscConfig+0x330>)
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800197c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001980:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001984:	fa92 f2a2 	rbit	r2, r2
 8001988:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800198c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001990:	fab2 f282 	clz	r2, r2
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	f042 0220 	orr.w	r2, r2, #32
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	f002 021f 	and.w	r2, r2, #31
 80019a0:	2101      	movs	r1, #1
 80019a2:	fa01 f202 	lsl.w	r2, r1, r2
 80019a6:	4013      	ands	r3, r2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 811f 	beq.w	8001bec <HAL_RCC_OscConfig+0x334>
 80019ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f040 8116 	bne.w	8001bec <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	f000 bfaf 	b.w	8002924 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d6:	d106      	bne.n	80019e6 <HAL_RCC_OscConfig+0x12e>
 80019d8:	4b83      	ldr	r3, [pc, #524]	; (8001be8 <HAL_RCC_OscConfig+0x330>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a82      	ldr	r2, [pc, #520]	; (8001be8 <HAL_RCC_OscConfig+0x330>)
 80019de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	e036      	b.n	8001a54 <HAL_RCC_OscConfig+0x19c>
 80019e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x158>
 80019f6:	4b7c      	ldr	r3, [pc, #496]	; (8001be8 <HAL_RCC_OscConfig+0x330>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a7b      	ldr	r2, [pc, #492]	; (8001be8 <HAL_RCC_OscConfig+0x330>)
 80019fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	4b79      	ldr	r3, [pc, #484]	; (8001be8 <HAL_RCC_OscConfig+0x330>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a78      	ldr	r2, [pc, #480]	; (8001be8 <HAL_RCC_OscConfig+0x330>)
 8001a08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	e021      	b.n	8001a54 <HAL_RCC_OscConfig+0x19c>
 8001a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x184>
 8001a22:	4b71      	ldr	r3, [pc, #452]	; (8001be8 <HAL_RCC_OscConfig+0x330>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a70      	ldr	r2, [pc, #448]	; (8001be8 <HAL_RCC_OscConfig+0x330>)
 8001a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b6e      	ldr	r3, [pc, #440]	; (8001be8 <HAL_RCC_OscConfig+0x330>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a6d      	ldr	r2, [pc, #436]	; (8001be8 <HAL_RCC_OscConfig+0x330>)
 8001a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e00b      	b.n	8001a54 <HAL_RCC_OscConfig+0x19c>
 8001a3c:	4b6a      	ldr	r3, [pc, #424]	; (8001be8 <HAL_RCC_OscConfig+0x330>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a69      	ldr	r2, [pc, #420]	; (8001be8 <HAL_RCC_OscConfig+0x330>)
 8001a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b67      	ldr	r3, [pc, #412]	; (8001be8 <HAL_RCC_OscConfig+0x330>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a66      	ldr	r2, [pc, #408]	; (8001be8 <HAL_RCC_OscConfig+0x330>)
 8001a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a52:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a54:	4b64      	ldr	r3, [pc, #400]	; (8001be8 <HAL_RCC_OscConfig+0x330>)
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	f023 020f 	bic.w	r2, r3, #15
 8001a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	495f      	ldr	r1, [pc, #380]	; (8001be8 <HAL_RCC_OscConfig+0x330>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d059      	beq.n	8001b32 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7e:	f7ff f84f 	bl	8000b20 <HAL_GetTick>
 8001a82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	e00a      	b.n	8001a9e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a88:	f7ff f84a 	bl	8000b20 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b64      	cmp	r3, #100	; 0x64
 8001a96:	d902      	bls.n	8001a9e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	f000 bf43 	b.w	8002924 <HAL_RCC_OscConfig+0x106c>
 8001a9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aa2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001aaa:	fa93 f3a3 	rbit	r3, r3
 8001aae:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001ab2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab6:	fab3 f383 	clz	r3, r3
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	095b      	lsrs	r3, r3, #5
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d102      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x218>
 8001aca:	4b47      	ldr	r3, [pc, #284]	; (8001be8 <HAL_RCC_OscConfig+0x330>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	e015      	b.n	8001afc <HAL_RCC_OscConfig+0x244>
 8001ad0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ad4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001adc:	fa93 f3a3 	rbit	r3, r3
 8001ae0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001ae4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001aec:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001af0:	fa93 f3a3 	rbit	r3, r3
 8001af4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001af8:	4b3b      	ldr	r3, [pc, #236]	; (8001be8 <HAL_RCC_OscConfig+0x330>)
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b00:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001b04:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001b08:	fa92 f2a2 	rbit	r2, r2
 8001b0c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001b10:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001b14:	fab2 f282 	clz	r2, r2
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	f042 0220 	orr.w	r2, r2, #32
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	f002 021f 	and.w	r2, r2, #31
 8001b24:	2101      	movs	r1, #1
 8001b26:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0ab      	beq.n	8001a88 <HAL_RCC_OscConfig+0x1d0>
 8001b30:	e05d      	b.n	8001bee <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7fe fff5 	bl	8000b20 <HAL_GetTick>
 8001b36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3a:	e00a      	b.n	8001b52 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b3c:	f7fe fff0 	bl	8000b20 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b64      	cmp	r3, #100	; 0x64
 8001b4a:	d902      	bls.n	8001b52 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	f000 bee9 	b.w	8002924 <HAL_RCC_OscConfig+0x106c>
 8001b52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b56:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001b5e:	fa93 f3a3 	rbit	r3, r3
 8001b62:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001b66:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	095b      	lsrs	r3, r3, #5
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d102      	bne.n	8001b84 <HAL_RCC_OscConfig+0x2cc>
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <HAL_RCC_OscConfig+0x330>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	e015      	b.n	8001bb0 <HAL_RCC_OscConfig+0x2f8>
 8001b84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b88:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001b90:	fa93 f3a3 	rbit	r3, r3
 8001b94:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b9c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001ba0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001ba4:	fa93 f3a3 	rbit	r3, r3
 8001ba8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <HAL_RCC_OscConfig+0x330>)
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bb4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001bb8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001bbc:	fa92 f2a2 	rbit	r2, r2
 8001bc0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001bc4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001bc8:	fab2 f282 	clz	r2, r2
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	f042 0220 	orr.w	r2, r2, #32
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	f002 021f 	and.w	r2, r2, #31
 8001bd8:	2101      	movs	r1, #1
 8001bda:	fa01 f202 	lsl.w	r2, r1, r2
 8001bde:	4013      	ands	r3, r2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1ab      	bne.n	8001b3c <HAL_RCC_OscConfig+0x284>
 8001be4:	e003      	b.n	8001bee <HAL_RCC_OscConfig+0x336>
 8001be6:	bf00      	nop
 8001be8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 817d 	beq.w	8001efe <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c04:	4ba6      	ldr	r3, [pc, #664]	; (8001ea0 <HAL_RCC_OscConfig+0x5e8>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 030c 	and.w	r3, r3, #12
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00b      	beq.n	8001c28 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c10:	4ba3      	ldr	r3, [pc, #652]	; (8001ea0 <HAL_RCC_OscConfig+0x5e8>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d172      	bne.n	8001d02 <HAL_RCC_OscConfig+0x44a>
 8001c1c:	4ba0      	ldr	r3, [pc, #640]	; (8001ea0 <HAL_RCC_OscConfig+0x5e8>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d16c      	bne.n	8001d02 <HAL_RCC_OscConfig+0x44a>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001c32:	fa93 f3a3 	rbit	r3, r3
 8001c36:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001c3a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3e:	fab3 f383 	clz	r3, r3
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	095b      	lsrs	r3, r3, #5
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d102      	bne.n	8001c58 <HAL_RCC_OscConfig+0x3a0>
 8001c52:	4b93      	ldr	r3, [pc, #588]	; (8001ea0 <HAL_RCC_OscConfig+0x5e8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	e013      	b.n	8001c80 <HAL_RCC_OscConfig+0x3c8>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001c62:	fa93 f3a3 	rbit	r3, r3
 8001c66:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c70:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001c74:	fa93 f3a3 	rbit	r3, r3
 8001c78:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001c7c:	4b88      	ldr	r3, [pc, #544]	; (8001ea0 <HAL_RCC_OscConfig+0x5e8>)
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	2202      	movs	r2, #2
 8001c82:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001c86:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c8a:	fa92 f2a2 	rbit	r2, r2
 8001c8e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001c92:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001c96:	fab2 f282 	clz	r2, r2
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	f042 0220 	orr.w	r2, r2, #32
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	f002 021f 	and.w	r2, r2, #31
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00a      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x410>
 8001cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d002      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f000 be2e 	b.w	8002924 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc8:	4b75      	ldr	r3, [pc, #468]	; (8001ea0 <HAL_RCC_OscConfig+0x5e8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	21f8      	movs	r1, #248	; 0xf8
 8001cde:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001ce6:	fa91 f1a1 	rbit	r1, r1
 8001cea:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001cee:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001cf2:	fab1 f181 	clz	r1, r1
 8001cf6:	b2c9      	uxtb	r1, r1
 8001cf8:	408b      	lsls	r3, r1
 8001cfa:	4969      	ldr	r1, [pc, #420]	; (8001ea0 <HAL_RCC_OscConfig+0x5e8>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d00:	e0fd      	b.n	8001efe <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 8088 	beq.w	8001e24 <HAL_RCC_OscConfig+0x56c>
 8001d14:	2301      	movs	r3, #1
 8001d16:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001d26:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d2a:	fab3 f383 	clz	r3, r3
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7fe feee 	bl	8000b20 <HAL_GetTick>
 8001d44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d48:	e00a      	b.n	8001d60 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d4a:	f7fe fee9 	bl	8000b20 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d902      	bls.n	8001d60 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	f000 bde2 	b.w	8002924 <HAL_RCC_OscConfig+0x106c>
 8001d60:	2302      	movs	r3, #2
 8001d62:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001d6a:	fa93 f3a3 	rbit	r3, r3
 8001d6e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001d72:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	095b      	lsrs	r3, r3, #5
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d102      	bne.n	8001d90 <HAL_RCC_OscConfig+0x4d8>
 8001d8a:	4b45      	ldr	r3, [pc, #276]	; (8001ea0 <HAL_RCC_OscConfig+0x5e8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	e013      	b.n	8001db8 <HAL_RCC_OscConfig+0x500>
 8001d90:	2302      	movs	r3, #2
 8001d92:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001d9a:	fa93 f3a3 	rbit	r3, r3
 8001d9e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001da2:	2302      	movs	r3, #2
 8001da4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001da8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001db4:	4b3a      	ldr	r3, [pc, #232]	; (8001ea0 <HAL_RCC_OscConfig+0x5e8>)
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	2202      	movs	r2, #2
 8001dba:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001dbe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001dc2:	fa92 f2a2 	rbit	r2, r2
 8001dc6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001dca:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001dce:	fab2 f282 	clz	r2, r2
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	f042 0220 	orr.w	r2, r2, #32
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	f002 021f 	and.w	r2, r2, #31
 8001dde:	2101      	movs	r1, #1
 8001de0:	fa01 f202 	lsl.w	r2, r1, r2
 8001de4:	4013      	ands	r3, r2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0af      	beq.n	8001d4a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dea:	4b2d      	ldr	r3, [pc, #180]	; (8001ea0 <HAL_RCC_OscConfig+0x5e8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	21f8      	movs	r1, #248	; 0xf8
 8001e00:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001e08:	fa91 f1a1 	rbit	r1, r1
 8001e0c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001e10:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001e14:	fab1 f181 	clz	r1, r1
 8001e18:	b2c9      	uxtb	r1, r1
 8001e1a:	408b      	lsls	r3, r1
 8001e1c:	4920      	ldr	r1, [pc, #128]	; (8001ea0 <HAL_RCC_OscConfig+0x5e8>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]
 8001e22:	e06c      	b.n	8001efe <HAL_RCC_OscConfig+0x646>
 8001e24:	2301      	movs	r3, #1
 8001e26:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e2e:	fa93 f3a3 	rbit	r3, r3
 8001e32:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001e36:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e3a:	fab3 f383 	clz	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e50:	f7fe fe66 	bl	8000b20 <HAL_GetTick>
 8001e54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e58:	e00a      	b.n	8001e70 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e5a:	f7fe fe61 	bl	8000b20 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d902      	bls.n	8001e70 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	f000 bd5a 	b.w	8002924 <HAL_RCC_OscConfig+0x106c>
 8001e70:	2302      	movs	r3, #2
 8001e72:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e86:	fab3 f383 	clz	r3, r3
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	095b      	lsrs	r3, r3, #5
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d104      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x5ec>
 8001e9a:	4b01      	ldr	r3, [pc, #4]	; (8001ea0 <HAL_RCC_OscConfig+0x5e8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	e015      	b.n	8001ecc <HAL_RCC_OscConfig+0x614>
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ebc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001ec8:	4bc8      	ldr	r3, [pc, #800]	; (80021ec <HAL_RCC_OscConfig+0x934>)
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	2202      	movs	r2, #2
 8001ece:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001ed2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ed6:	fa92 f2a2 	rbit	r2, r2
 8001eda:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001ede:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001ee2:	fab2 f282 	clz	r2, r2
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	f042 0220 	orr.w	r2, r2, #32
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	f002 021f 	and.w	r2, r2, #31
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1ad      	bne.n	8001e5a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 8110 	beq.w	8002134 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d079      	beq.n	8002018 <HAL_RCC_OscConfig+0x760>
 8001f24:	2301      	movs	r3, #1
 8001f26:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f3a:	fab3 f383 	clz	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	4bab      	ldr	r3, [pc, #684]	; (80021f0 <HAL_RCC_OscConfig+0x938>)
 8001f44:	4413      	add	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	461a      	mov	r2, r3
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4e:	f7fe fde7 	bl	8000b20 <HAL_GetTick>
 8001f52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f56:	e00a      	b.n	8001f6e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f58:	f7fe fde2 	bl	8000b20 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d902      	bls.n	8001f6e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	f000 bcdb 	b.w	8002924 <HAL_RCC_OscConfig+0x106c>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f78:	fa93 f3a3 	rbit	r3, r3
 8001f7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f84:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f88:	2202      	movs	r2, #2
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f90:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	fa93 f2a3 	rbit	r2, r3
 8001f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001fac:	2202      	movs	r2, #2
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	fa93 f2a3 	rbit	r2, r3
 8001fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001fc6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc8:	4b88      	ldr	r3, [pc, #544]	; (80021ec <HAL_RCC_OscConfig+0x934>)
 8001fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001fd4:	2102      	movs	r1, #2
 8001fd6:	6019      	str	r1, [r3, #0]
 8001fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fdc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	fa93 f1a3 	rbit	r1, r3
 8001fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001fee:	6019      	str	r1, [r3, #0]
  return result;
 8001ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	fab3 f383 	clz	r3, r3
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002004:	b2db      	uxtb	r3, r3
 8002006:	f003 031f 	and.w	r3, r3, #31
 800200a:	2101      	movs	r1, #1
 800200c:	fa01 f303 	lsl.w	r3, r1, r3
 8002010:	4013      	ands	r3, r2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0a0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x6a0>
 8002016:	e08d      	b.n	8002134 <HAL_RCC_OscConfig+0x87c>
 8002018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002020:	2201      	movs	r2, #1
 8002022:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002028:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	fa93 f2a3 	rbit	r2, r3
 8002032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002036:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800203a:	601a      	str	r2, [r3, #0]
  return result;
 800203c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002040:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002044:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	461a      	mov	r2, r3
 800204e:	4b68      	ldr	r3, [pc, #416]	; (80021f0 <HAL_RCC_OscConfig+0x938>)
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	461a      	mov	r2, r3
 8002056:	2300      	movs	r3, #0
 8002058:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205a:	f7fe fd61 	bl	8000b20 <HAL_GetTick>
 800205e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002062:	e00a      	b.n	800207a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002064:	f7fe fd5c 	bl	8000b20 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d902      	bls.n	800207a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	f000 bc55 	b.w	8002924 <HAL_RCC_OscConfig+0x106c>
 800207a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002082:	2202      	movs	r2, #2
 8002084:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	fa93 f2a3 	rbit	r2, r3
 8002094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002098:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80020a6:	2202      	movs	r2, #2
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	fa93 f2a3 	rbit	r2, r3
 80020b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80020ca:	2202      	movs	r2, #2
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	fa93 f2a3 	rbit	r2, r3
 80020dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80020e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e6:	4b41      	ldr	r3, [pc, #260]	; (80021ec <HAL_RCC_OscConfig+0x934>)
 80020e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80020f2:	2102      	movs	r1, #2
 80020f4:	6019      	str	r1, [r3, #0]
 80020f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	fa93 f1a3 	rbit	r1, r3
 8002104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002108:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800210c:	6019      	str	r1, [r3, #0]
  return result;
 800210e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002112:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	fab3 f383 	clz	r3, r3
 800211c:	b2db      	uxtb	r3, r3
 800211e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002122:	b2db      	uxtb	r3, r3
 8002124:	f003 031f 	and.w	r3, r3, #31
 8002128:	2101      	movs	r1, #1
 800212a:	fa01 f303 	lsl.w	r3, r1, r3
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d197      	bne.n	8002064 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002138:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 81a1 	beq.w	800248c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002150:	4b26      	ldr	r3, [pc, #152]	; (80021ec <HAL_RCC_OscConfig+0x934>)
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d116      	bne.n	800218a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215c:	4b23      	ldr	r3, [pc, #140]	; (80021ec <HAL_RCC_OscConfig+0x934>)
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	4a22      	ldr	r2, [pc, #136]	; (80021ec <HAL_RCC_OscConfig+0x934>)
 8002162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002166:	61d3      	str	r3, [r2, #28]
 8002168:	4b20      	ldr	r3, [pc, #128]	; (80021ec <HAL_RCC_OscConfig+0x934>)
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002174:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002182:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002184:	2301      	movs	r3, #1
 8002186:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218a:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <HAL_RCC_OscConfig+0x93c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002192:	2b00      	cmp	r3, #0
 8002194:	d11a      	bne.n	80021cc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002196:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <HAL_RCC_OscConfig+0x93c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a16      	ldr	r2, [pc, #88]	; (80021f4 <HAL_RCC_OscConfig+0x93c>)
 800219c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021a2:	f7fe fcbd 	bl	8000b20 <HAL_GetTick>
 80021a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021aa:	e009      	b.n	80021c0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ac:	f7fe fcb8 	bl	8000b20 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b64      	cmp	r3, #100	; 0x64
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e3b1      	b.n	8002924 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <HAL_RCC_OscConfig+0x93c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0ef      	beq.n	80021ac <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d10d      	bne.n	80021f8 <HAL_RCC_OscConfig+0x940>
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <HAL_RCC_OscConfig+0x934>)
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	4a02      	ldr	r2, [pc, #8]	; (80021ec <HAL_RCC_OscConfig+0x934>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6213      	str	r3, [r2, #32]
 80021e8:	e03c      	b.n	8002264 <HAL_RCC_OscConfig+0x9ac>
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000
 80021f0:	10908120 	.word	0x10908120
 80021f4:	40007000 	.word	0x40007000
 80021f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10c      	bne.n	8002222 <HAL_RCC_OscConfig+0x96a>
 8002208:	4bc1      	ldr	r3, [pc, #772]	; (8002510 <HAL_RCC_OscConfig+0xc58>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	4ac0      	ldr	r2, [pc, #768]	; (8002510 <HAL_RCC_OscConfig+0xc58>)
 800220e:	f023 0301 	bic.w	r3, r3, #1
 8002212:	6213      	str	r3, [r2, #32]
 8002214:	4bbe      	ldr	r3, [pc, #760]	; (8002510 <HAL_RCC_OscConfig+0xc58>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	4abd      	ldr	r2, [pc, #756]	; (8002510 <HAL_RCC_OscConfig+0xc58>)
 800221a:	f023 0304 	bic.w	r3, r3, #4
 800221e:	6213      	str	r3, [r2, #32]
 8002220:	e020      	b.n	8002264 <HAL_RCC_OscConfig+0x9ac>
 8002222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002226:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2b05      	cmp	r3, #5
 8002230:	d10c      	bne.n	800224c <HAL_RCC_OscConfig+0x994>
 8002232:	4bb7      	ldr	r3, [pc, #732]	; (8002510 <HAL_RCC_OscConfig+0xc58>)
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	4ab6      	ldr	r2, [pc, #728]	; (8002510 <HAL_RCC_OscConfig+0xc58>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	6213      	str	r3, [r2, #32]
 800223e:	4bb4      	ldr	r3, [pc, #720]	; (8002510 <HAL_RCC_OscConfig+0xc58>)
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4ab3      	ldr	r2, [pc, #716]	; (8002510 <HAL_RCC_OscConfig+0xc58>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6213      	str	r3, [r2, #32]
 800224a:	e00b      	b.n	8002264 <HAL_RCC_OscConfig+0x9ac>
 800224c:	4bb0      	ldr	r3, [pc, #704]	; (8002510 <HAL_RCC_OscConfig+0xc58>)
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	4aaf      	ldr	r2, [pc, #700]	; (8002510 <HAL_RCC_OscConfig+0xc58>)
 8002252:	f023 0301 	bic.w	r3, r3, #1
 8002256:	6213      	str	r3, [r2, #32]
 8002258:	4bad      	ldr	r3, [pc, #692]	; (8002510 <HAL_RCC_OscConfig+0xc58>)
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	4aac      	ldr	r2, [pc, #688]	; (8002510 <HAL_RCC_OscConfig+0xc58>)
 800225e:	f023 0304 	bic.w	r3, r3, #4
 8002262:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002268:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 8081 	beq.w	8002378 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002276:	f7fe fc53 	bl	8000b20 <HAL_GetTick>
 800227a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800227e:	e00b      	b.n	8002298 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002280:	f7fe fc4e 	bl	8000b20 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002290:	4293      	cmp	r3, r2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e345      	b.n	8002924 <HAL_RCC_OscConfig+0x106c>
 8002298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80022a0:	2202      	movs	r2, #2
 80022a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	fa93 f2a3 	rbit	r2, r3
 80022b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80022c4:	2202      	movs	r2, #2
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	fa93 f2a3 	rbit	r2, r3
 80022d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022da:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80022de:	601a      	str	r2, [r3, #0]
  return result;
 80022e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80022e8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	095b      	lsrs	r3, r3, #5
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	f043 0302 	orr.w	r3, r3, #2
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d102      	bne.n	8002304 <HAL_RCC_OscConfig+0xa4c>
 80022fe:	4b84      	ldr	r3, [pc, #528]	; (8002510 <HAL_RCC_OscConfig+0xc58>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	e013      	b.n	800232c <HAL_RCC_OscConfig+0xa74>
 8002304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002308:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800230c:	2202      	movs	r2, #2
 800230e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002314:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	fa93 f2a3 	rbit	r2, r3
 800231e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002322:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	4b79      	ldr	r3, [pc, #484]	; (8002510 <HAL_RCC_OscConfig+0xc58>)
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002330:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002334:	2102      	movs	r1, #2
 8002336:	6011      	str	r1, [r2, #0]
 8002338:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800233c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002340:	6812      	ldr	r2, [r2, #0]
 8002342:	fa92 f1a2 	rbit	r1, r2
 8002346:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800234a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800234e:	6011      	str	r1, [r2, #0]
  return result;
 8002350:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002354:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	fab2 f282 	clz	r2, r2
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	f002 021f 	and.w	r2, r2, #31
 800236a:	2101      	movs	r1, #1
 800236c:	fa01 f202 	lsl.w	r2, r1, r2
 8002370:	4013      	ands	r3, r2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d084      	beq.n	8002280 <HAL_RCC_OscConfig+0x9c8>
 8002376:	e07f      	b.n	8002478 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002378:	f7fe fbd2 	bl	8000b20 <HAL_GetTick>
 800237c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002380:	e00b      	b.n	800239a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002382:	f7fe fbcd 	bl	8000b20 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002392:	4293      	cmp	r3, r2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e2c4      	b.n	8002924 <HAL_RCC_OscConfig+0x106c>
 800239a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80023a2:	2202      	movs	r2, #2
 80023a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023aa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	fa93 f2a3 	rbit	r2, r3
 80023b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80023c6:	2202      	movs	r2, #2
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	fa93 f2a3 	rbit	r2, r3
 80023d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023dc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80023e0:	601a      	str	r2, [r3, #0]
  return result;
 80023e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80023ea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ec:	fab3 f383 	clz	r3, r3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	f043 0302 	orr.w	r3, r3, #2
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d102      	bne.n	8002406 <HAL_RCC_OscConfig+0xb4e>
 8002400:	4b43      	ldr	r3, [pc, #268]	; (8002510 <HAL_RCC_OscConfig+0xc58>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	e013      	b.n	800242e <HAL_RCC_OscConfig+0xb76>
 8002406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800240e:	2202      	movs	r2, #2
 8002410:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002416:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	fa93 f2a3 	rbit	r2, r3
 8002420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002424:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	4b39      	ldr	r3, [pc, #228]	; (8002510 <HAL_RCC_OscConfig+0xc58>)
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002432:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002436:	2102      	movs	r1, #2
 8002438:	6011      	str	r1, [r2, #0]
 800243a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800243e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002442:	6812      	ldr	r2, [r2, #0]
 8002444:	fa92 f1a2 	rbit	r1, r2
 8002448:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800244c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002450:	6011      	str	r1, [r2, #0]
  return result;
 8002452:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002456:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	fab2 f282 	clz	r2, r2
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	f002 021f 	and.w	r2, r2, #31
 800246c:	2101      	movs	r1, #1
 800246e:	fa01 f202 	lsl.w	r2, r1, r2
 8002472:	4013      	ands	r3, r2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d184      	bne.n	8002382 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002478:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800247c:	2b01      	cmp	r3, #1
 800247e:	d105      	bne.n	800248c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002480:	4b23      	ldr	r3, [pc, #140]	; (8002510 <HAL_RCC_OscConfig+0xc58>)
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	4a22      	ldr	r2, [pc, #136]	; (8002510 <HAL_RCC_OscConfig+0xc58>)
 8002486:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800248a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800248c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002490:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 8242 	beq.w	8002922 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800249e:	4b1c      	ldr	r3, [pc, #112]	; (8002510 <HAL_RCC_OscConfig+0xc58>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	f000 8213 	beq.w	80028d2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	f040 8162 	bne.w	8002782 <HAL_RCC_OscConfig+0xeca>
 80024be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80024c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	fa93 f2a3 	rbit	r2, r3
 80024da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024de:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80024e2:	601a      	str	r2, [r3, #0]
  return result;
 80024e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80024ec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ee:	fab3 f383 	clz	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	461a      	mov	r2, r3
 8002500:	2300      	movs	r3, #0
 8002502:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7fe fb0c 	bl	8000b20 <HAL_GetTick>
 8002508:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800250c:	e00c      	b.n	8002528 <HAL_RCC_OscConfig+0xc70>
 800250e:	bf00      	nop
 8002510:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002514:	f7fe fb04 	bl	8000b20 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e1fd      	b.n	8002924 <HAL_RCC_OscConfig+0x106c>
 8002528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002530:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002534:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	fa93 f2a3 	rbit	r2, r3
 8002544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002548:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800254c:	601a      	str	r2, [r3, #0]
  return result;
 800254e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002552:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002556:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002558:	fab3 f383 	clz	r3, r3
 800255c:	b2db      	uxtb	r3, r3
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	b2db      	uxtb	r3, r3
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b01      	cmp	r3, #1
 800256a:	d102      	bne.n	8002572 <HAL_RCC_OscConfig+0xcba>
 800256c:	4bb0      	ldr	r3, [pc, #704]	; (8002830 <HAL_RCC_OscConfig+0xf78>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	e027      	b.n	80025c2 <HAL_RCC_OscConfig+0xd0a>
 8002572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002576:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800257a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800257e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002584:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	fa93 f2a3 	rbit	r2, r3
 800258e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002592:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80025a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025aa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	fa93 f2a3 	rbit	r2, r3
 80025b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	4b9c      	ldr	r3, [pc, #624]	; (8002830 <HAL_RCC_OscConfig+0xf78>)
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025c6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80025ca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025ce:	6011      	str	r1, [r2, #0]
 80025d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025d4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	fa92 f1a2 	rbit	r1, r2
 80025de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025e2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80025e6:	6011      	str	r1, [r2, #0]
  return result;
 80025e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025ec:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	fab2 f282 	clz	r2, r2
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	f042 0220 	orr.w	r2, r2, #32
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	f002 021f 	and.w	r2, r2, #31
 8002602:	2101      	movs	r1, #1
 8002604:	fa01 f202 	lsl.w	r2, r1, r2
 8002608:	4013      	ands	r3, r2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d182      	bne.n	8002514 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800260e:	4b88      	ldr	r3, [pc, #544]	; (8002830 <HAL_RCC_OscConfig+0xf78>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002626:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	430b      	orrs	r3, r1
 8002630:	497f      	ldr	r1, [pc, #508]	; (8002830 <HAL_RCC_OscConfig+0xf78>)
 8002632:	4313      	orrs	r3, r2
 8002634:	604b      	str	r3, [r1, #4]
 8002636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800263e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002642:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002648:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	fa93 f2a3 	rbit	r2, r3
 8002652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002656:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800265a:	601a      	str	r2, [r3, #0]
  return result;
 800265c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002660:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002664:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002670:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	461a      	mov	r2, r3
 8002678:	2301      	movs	r3, #1
 800267a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe fa50 	bl	8000b20 <HAL_GetTick>
 8002680:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002684:	e009      	b.n	800269a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002686:	f7fe fa4b 	bl	8000b20 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e144      	b.n	8002924 <HAL_RCC_OscConfig+0x106c>
 800269a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80026a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ac:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	fa93 f2a3 	rbit	r2, r3
 80026b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ba:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80026be:	601a      	str	r2, [r3, #0]
  return result;
 80026c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80026c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026ca:	fab3 f383 	clz	r3, r3
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	095b      	lsrs	r3, r3, #5
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d102      	bne.n	80026e4 <HAL_RCC_OscConfig+0xe2c>
 80026de:	4b54      	ldr	r3, [pc, #336]	; (8002830 <HAL_RCC_OscConfig+0xf78>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	e027      	b.n	8002734 <HAL_RCC_OscConfig+0xe7c>
 80026e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80026ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	fa93 f2a3 	rbit	r2, r3
 8002700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002704:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002712:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	fa93 f2a3 	rbit	r2, r3
 8002726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	4b3f      	ldr	r3, [pc, #252]	; (8002830 <HAL_RCC_OscConfig+0xf78>)
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002738:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800273c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002740:	6011      	str	r1, [r2, #0]
 8002742:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002746:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	fa92 f1a2 	rbit	r1, r2
 8002750:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002754:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002758:	6011      	str	r1, [r2, #0]
  return result;
 800275a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800275e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	fab2 f282 	clz	r2, r2
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	f042 0220 	orr.w	r2, r2, #32
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	f002 021f 	and.w	r2, r2, #31
 8002774:	2101      	movs	r1, #1
 8002776:	fa01 f202 	lsl.w	r2, r1, r2
 800277a:	4013      	ands	r3, r2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d082      	beq.n	8002686 <HAL_RCC_OscConfig+0xdce>
 8002780:	e0cf      	b.n	8002922 <HAL_RCC_OscConfig+0x106a>
 8002782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002786:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800278a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800278e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002794:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	fa93 f2a3 	rbit	r2, r3
 800279e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80027a6:	601a      	str	r2, [r3, #0]
  return result;
 80027a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ac:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80027b0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	461a      	mov	r2, r3
 80027c4:	2300      	movs	r3, #0
 80027c6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c8:	f7fe f9aa 	bl	8000b20 <HAL_GetTick>
 80027cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d0:	e009      	b.n	80027e6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d2:	f7fe f9a5 	bl	8000b20 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e09e      	b.n	8002924 <HAL_RCC_OscConfig+0x106c>
 80027e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ea:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80027ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	fa93 f2a3 	rbit	r2, r3
 8002802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002806:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800280a:	601a      	str	r2, [r3, #0]
  return result;
 800280c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002810:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002814:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002816:	fab3 f383 	clz	r3, r3
 800281a:	b2db      	uxtb	r3, r3
 800281c:	095b      	lsrs	r3, r3, #5
 800281e:	b2db      	uxtb	r3, r3
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b01      	cmp	r3, #1
 8002828:	d104      	bne.n	8002834 <HAL_RCC_OscConfig+0xf7c>
 800282a:	4b01      	ldr	r3, [pc, #4]	; (8002830 <HAL_RCC_OscConfig+0xf78>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	e029      	b.n	8002884 <HAL_RCC_OscConfig+0xfcc>
 8002830:	40021000 	.word	0x40021000
 8002834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002838:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800283c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002840:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002846:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	fa93 f2a3 	rbit	r2, r3
 8002850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002854:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002862:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	fa93 f2a3 	rbit	r2, r3
 8002876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	4b2b      	ldr	r3, [pc, #172]	; (8002930 <HAL_RCC_OscConfig+0x1078>)
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002888:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800288c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002890:	6011      	str	r1, [r2, #0]
 8002892:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002896:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	fa92 f1a2 	rbit	r1, r2
 80028a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028a4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80028a8:	6011      	str	r1, [r2, #0]
  return result;
 80028aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028ae:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	fab2 f282 	clz	r2, r2
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	f042 0220 	orr.w	r2, r2, #32
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	f002 021f 	and.w	r2, r2, #31
 80028c4:	2101      	movs	r1, #1
 80028c6:	fa01 f202 	lsl.w	r2, r1, r2
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d180      	bne.n	80027d2 <HAL_RCC_OscConfig+0xf1a>
 80028d0:	e027      	b.n	8002922 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e01e      	b.n	8002924 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028e6:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_RCC_OscConfig+0x1078>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80028f2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	429a      	cmp	r2, r3
 8002904:	d10b      	bne.n	800291e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002906:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800290a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800290e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002912:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800291a:	429a      	cmp	r2, r3
 800291c:	d001      	beq.n	8002922 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40021000 	.word	0x40021000

08002934 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b09e      	sub	sp, #120	; 0x78
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e162      	b.n	8002c12 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800294c:	4b90      	ldr	r3, [pc, #576]	; (8002b90 <HAL_RCC_ClockConfig+0x25c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d910      	bls.n	800297c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b8d      	ldr	r3, [pc, #564]	; (8002b90 <HAL_RCC_ClockConfig+0x25c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 0207 	bic.w	r2, r3, #7
 8002962:	498b      	ldr	r1, [pc, #556]	; (8002b90 <HAL_RCC_ClockConfig+0x25c>)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	4b89      	ldr	r3, [pc, #548]	; (8002b90 <HAL_RCC_ClockConfig+0x25c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e14a      	b.n	8002c12 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002988:	4b82      	ldr	r3, [pc, #520]	; (8002b94 <HAL_RCC_ClockConfig+0x260>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	497f      	ldr	r1, [pc, #508]	; (8002b94 <HAL_RCC_ClockConfig+0x260>)
 8002996:	4313      	orrs	r3, r2
 8002998:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 80dc 	beq.w	8002b60 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d13c      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xf6>
 80029b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029b8:	fa93 f3a3 	rbit	r3, r3
 80029bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80029be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c0:	fab3 f383 	clz	r3, r3
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d102      	bne.n	80029da <HAL_RCC_ClockConfig+0xa6>
 80029d4:	4b6f      	ldr	r3, [pc, #444]	; (8002b94 <HAL_RCC_ClockConfig+0x260>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	e00f      	b.n	80029fa <HAL_RCC_ClockConfig+0xc6>
 80029da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029e2:	fa93 f3a3 	rbit	r3, r3
 80029e6:	667b      	str	r3, [r7, #100]	; 0x64
 80029e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ec:	663b      	str	r3, [r7, #96]	; 0x60
 80029ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029f6:	4b67      	ldr	r3, [pc, #412]	; (8002b94 <HAL_RCC_ClockConfig+0x260>)
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a02:	fa92 f2a2 	rbit	r2, r2
 8002a06:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002a08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a0a:	fab2 f282 	clz	r2, r2
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	f042 0220 	orr.w	r2, r2, #32
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	f002 021f 	and.w	r2, r2, #31
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d17b      	bne.n	8002b1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e0f3      	b.n	8002c12 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d13c      	bne.n	8002aac <HAL_RCC_ClockConfig+0x178>
 8002a32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a36:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a42:	fab3 f383 	clz	r3, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	095b      	lsrs	r3, r3, #5
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d102      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x128>
 8002a56:	4b4f      	ldr	r3, [pc, #316]	; (8002b94 <HAL_RCC_ClockConfig+0x260>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	e00f      	b.n	8002a7c <HAL_RCC_ClockConfig+0x148>
 8002a5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a60:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	647b      	str	r3, [r7, #68]	; 0x44
 8002a6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a6e:	643b      	str	r3, [r7, #64]	; 0x40
 8002a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a78:	4b46      	ldr	r3, [pc, #280]	; (8002b94 <HAL_RCC_ClockConfig+0x260>)
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a80:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a84:	fa92 f2a2 	rbit	r2, r2
 8002a88:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a8c:	fab2 f282 	clz	r2, r2
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	f042 0220 	orr.w	r2, r2, #32
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	f002 021f 	and.w	r2, r2, #31
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d13a      	bne.n	8002b1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0b2      	b.n	8002c12 <HAL_RCC_ClockConfig+0x2de>
 8002aac:	2302      	movs	r3, #2
 8002aae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab2:	fa93 f3a3 	rbit	r3, r3
 8002ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aba:	fab3 f383 	clz	r3, r3
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	095b      	lsrs	r3, r3, #5
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d102      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x1a0>
 8002ace:	4b31      	ldr	r3, [pc, #196]	; (8002b94 <HAL_RCC_ClockConfig+0x260>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	e00d      	b.n	8002af0 <HAL_RCC_ClockConfig+0x1bc>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	623b      	str	r3, [r7, #32]
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	fa93 f3a3 	rbit	r3, r3
 8002aea:	61fb      	str	r3, [r7, #28]
 8002aec:	4b29      	ldr	r3, [pc, #164]	; (8002b94 <HAL_RCC_ClockConfig+0x260>)
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	2202      	movs	r2, #2
 8002af2:	61ba      	str	r2, [r7, #24]
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	fa92 f2a2 	rbit	r2, r2
 8002afa:	617a      	str	r2, [r7, #20]
  return result;
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	fab2 f282 	clz	r2, r2
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	f042 0220 	orr.w	r2, r2, #32
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	f002 021f 	and.w	r2, r2, #31
 8002b0e:	2101      	movs	r1, #1
 8002b10:	fa01 f202 	lsl.w	r2, r1, r2
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e079      	b.n	8002c12 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b1e:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <HAL_RCC_ClockConfig+0x260>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f023 0203 	bic.w	r2, r3, #3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	491a      	ldr	r1, [pc, #104]	; (8002b94 <HAL_RCC_ClockConfig+0x260>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b30:	f7fd fff6 	bl	8000b20 <HAL_GetTick>
 8002b34:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b36:	e00a      	b.n	8002b4e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b38:	f7fd fff2 	bl	8000b20 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e061      	b.n	8002c12 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4e:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <HAL_RCC_ClockConfig+0x260>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 020c 	and.w	r2, r3, #12
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d1eb      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <HAL_RCC_ClockConfig+0x25c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d214      	bcs.n	8002b98 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6e:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <HAL_RCC_ClockConfig+0x25c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 0207 	bic.w	r2, r3, #7
 8002b76:	4906      	ldr	r1, [pc, #24]	; (8002b90 <HAL_RCC_ClockConfig+0x25c>)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7e:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <HAL_RCC_ClockConfig+0x25c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d005      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e040      	b.n	8002c12 <HAL_RCC_ClockConfig+0x2de>
 8002b90:	40022000 	.word	0x40022000
 8002b94:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <HAL_RCC_ClockConfig+0x2e8>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	491a      	ldr	r1, [pc, #104]	; (8002c1c <HAL_RCC_ClockConfig+0x2e8>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d009      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bc2:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <HAL_RCC_ClockConfig+0x2e8>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4912      	ldr	r1, [pc, #72]	; (8002c1c <HAL_RCC_ClockConfig+0x2e8>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002bd6:	f000 f829 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8002bda:	4601      	mov	r1, r0
 8002bdc:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <HAL_RCC_ClockConfig+0x2e8>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002be4:	22f0      	movs	r2, #240	; 0xf0
 8002be6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	fa92 f2a2 	rbit	r2, r2
 8002bee:	60fa      	str	r2, [r7, #12]
  return result;
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	fab2 f282 	clz	r2, r2
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	40d3      	lsrs	r3, r2
 8002bfa:	4a09      	ldr	r2, [pc, #36]	; (8002c20 <HAL_RCC_ClockConfig+0x2ec>)
 8002bfc:	5cd3      	ldrb	r3, [r2, r3]
 8002bfe:	fa21 f303 	lsr.w	r3, r1, r3
 8002c02:	4a08      	ldr	r2, [pc, #32]	; (8002c24 <HAL_RCC_ClockConfig+0x2f0>)
 8002c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c06:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <HAL_RCC_ClockConfig+0x2f4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fd ff44 	bl	8000a98 <HAL_InitTick>
  
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3778      	adds	r7, #120	; 0x78
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	08004190 	.word	0x08004190
 8002c24:	20000000 	.word	0x20000000
 8002c28:	20000004 	.word	0x20000004

08002c2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b08b      	sub	sp, #44	; 0x2c
 8002c30:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	2300      	movs	r3, #0
 8002c38:	61bb      	str	r3, [r7, #24]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002c46:	4b29      	ldr	r3, [pc, #164]	; (8002cec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d002      	beq.n	8002c5c <HAL_RCC_GetSysClockFreq+0x30>
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d003      	beq.n	8002c62 <HAL_RCC_GetSysClockFreq+0x36>
 8002c5a:	e03c      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c5c:	4b24      	ldr	r3, [pc, #144]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c5e:	623b      	str	r3, [r7, #32]
      break;
 8002c60:	e03c      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c68:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002c6c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	fa92 f2a2 	rbit	r2, r2
 8002c74:	607a      	str	r2, [r7, #4]
  return result;
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	fab2 f282 	clz	r2, r2
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	40d3      	lsrs	r3, r2
 8002c80:	4a1c      	ldr	r2, [pc, #112]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c82:	5cd3      	ldrb	r3, [r2, r3]
 8002c84:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c86:	4b19      	ldr	r3, [pc, #100]	; (8002cec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	220f      	movs	r2, #15
 8002c90:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	fa92 f2a2 	rbit	r2, r2
 8002c98:	60fa      	str	r2, [r7, #12]
  return result;
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	fab2 f282 	clz	r2, r2
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	40d3      	lsrs	r3, r2
 8002ca4:	4a14      	ldr	r2, [pc, #80]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ca6:	5cd3      	ldrb	r3, [r2, r3]
 8002ca8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d008      	beq.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cb4:	4a0e      	ldr	r2, [pc, #56]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	fb02 f303 	mul.w	r3, r2, r3
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc4:	e004      	b.n	8002cd0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	4a0c      	ldr	r2, [pc, #48]	; (8002cfc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cca:	fb02 f303 	mul.w	r3, r2, r3
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	623b      	str	r3, [r7, #32]
      break;
 8002cd4:	e002      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cd8:	623b      	str	r3, [r7, #32]
      break;
 8002cda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	372c      	adds	r7, #44	; 0x2c
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	007a1200 	.word	0x007a1200
 8002cf4:	080041a8 	.word	0x080041a8
 8002cf8:	080041b8 	.word	0x080041b8
 8002cfc:	003d0900 	.word	0x003d0900

08002d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d04:	4b03      	ldr	r3, [pc, #12]	; (8002d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d06:	681b      	ldr	r3, [r3, #0]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	20000000 	.word	0x20000000

08002d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002d1e:	f7ff ffef 	bl	8002d00 <HAL_RCC_GetHCLKFreq>
 8002d22:	4601      	mov	r1, r0
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d2c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002d30:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	fa92 f2a2 	rbit	r2, r2
 8002d38:	603a      	str	r2, [r7, #0]
  return result;
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	fab2 f282 	clz	r2, r2
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	40d3      	lsrs	r3, r2
 8002d44:	4a04      	ldr	r2, [pc, #16]	; (8002d58 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002d46:	5cd3      	ldrb	r3, [r2, r3]
 8002d48:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40021000 	.word	0x40021000
 8002d58:	080041a0 	.word	0x080041a0

08002d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002d62:	f7ff ffcd 	bl	8002d00 <HAL_RCC_GetHCLKFreq>
 8002d66:	4601      	mov	r1, r0
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002d70:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002d74:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	fa92 f2a2 	rbit	r2, r2
 8002d7c:	603a      	str	r2, [r7, #0]
  return result;
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	fab2 f282 	clz	r2, r2
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	40d3      	lsrs	r3, r2
 8002d88:	4a04      	ldr	r2, [pc, #16]	; (8002d9c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d8a:	5cd3      	ldrb	r3, [r2, r3]
 8002d8c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	080041a0 	.word	0x080041a0

08002da0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b092      	sub	sp, #72	; 0x48
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002db0:	2300      	movs	r3, #0
 8002db2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 80d4 	beq.w	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc4:	4b4e      	ldr	r3, [pc, #312]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10e      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd0:	4b4b      	ldr	r3, [pc, #300]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	4a4a      	ldr	r2, [pc, #296]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dda:	61d3      	str	r3, [r2, #28]
 8002ddc:	4b48      	ldr	r3, [pc, #288]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002de8:	2301      	movs	r3, #1
 8002dea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dee:	4b45      	ldr	r3, [pc, #276]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d118      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfa:	4b42      	ldr	r3, [pc, #264]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a41      	ldr	r2, [pc, #260]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e04:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e06:	f7fd fe8b 	bl	8000b20 <HAL_GetTick>
 8002e0a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0c:	e008      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0e:	f7fd fe87 	bl	8000b20 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b64      	cmp	r3, #100	; 0x64
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e14b      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e20:	4b38      	ldr	r3, [pc, #224]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e2c:	4b34      	ldr	r3, [pc, #208]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e34:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 8084 	beq.w	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d07c      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e4c:	4b2c      	ldr	r3, [pc, #176]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4b26      	ldr	r3, [pc, #152]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	461a      	mov	r2, r3
 8002e76:	2301      	movs	r3, #1
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e8a:	fab3 f383 	clz	r3, r3
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	4b1d      	ldr	r3, [pc, #116]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	461a      	mov	r2, r3
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e9e:	4a18      	ldr	r2, [pc, #96]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d04b      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eae:	f7fd fe37 	bl	8000b20 <HAL_GetTick>
 8002eb2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb4:	e00a      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb6:	f7fd fe33 	bl	8000b20 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e0f5      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed8:	2302      	movs	r3, #2
 8002eda:	623b      	str	r3, [r7, #32]
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	fa93 f3a3 	rbit	r3, r3
 8002ee2:	61fb      	str	r3, [r7, #28]
  return result;
 8002ee4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee6:	fab3 f383 	clz	r3, r3
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	095b      	lsrs	r3, r3, #5
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	f043 0302 	orr.w	r3, r3, #2
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d108      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002efa:	4b01      	ldr	r3, [pc, #4]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	e00d      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40007000 	.word	0x40007000
 8002f08:	10908100 	.word	0x10908100
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	fa93 f3a3 	rbit	r3, r3
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	4b69      	ldr	r3, [pc, #420]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	613a      	str	r2, [r7, #16]
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	fa92 f2a2 	rbit	r2, r2
 8002f26:	60fa      	str	r2, [r7, #12]
  return result;
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	fab2 f282 	clz	r2, r2
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	f002 021f 	and.w	r2, r2, #31
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0b7      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f46:	4b5e      	ldr	r3, [pc, #376]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	495b      	ldr	r1, [pc, #364]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d105      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f60:	4b57      	ldr	r3, [pc, #348]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	4a56      	ldr	r2, [pc, #344]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f78:	4b51      	ldr	r3, [pc, #324]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	f023 0203 	bic.w	r2, r3, #3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	494e      	ldr	r1, [pc, #312]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0320 	and.w	r3, r3, #32
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d008      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f96:	4b4a      	ldr	r3, [pc, #296]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	f023 0210 	bic.w	r2, r3, #16
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	4947      	ldr	r1, [pc, #284]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d008      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002fb4:	4b42      	ldr	r3, [pc, #264]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	493f      	ldr	r1, [pc, #252]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d008      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fd2:	4b3b      	ldr	r3, [pc, #236]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	f023 0220 	bic.w	r2, r3, #32
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	4938      	ldr	r1, [pc, #224]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ff0:	4b33      	ldr	r3, [pc, #204]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	4930      	ldr	r1, [pc, #192]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800300a:	2b00      	cmp	r3, #0
 800300c:	d008      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800300e:	4b2c      	ldr	r3, [pc, #176]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	4929      	ldr	r1, [pc, #164]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800301c:	4313      	orrs	r3, r2
 800301e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800302c:	4b24      	ldr	r3, [pc, #144]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	4921      	ldr	r1, [pc, #132]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800303a:	4313      	orrs	r3, r2
 800303c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d008      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800304a:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	491a      	ldr	r1, [pc, #104]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003058:	4313      	orrs	r3, r2
 800305a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003068:	4b15      	ldr	r3, [pc, #84]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	4912      	ldr	r1, [pc, #72]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003076:	4313      	orrs	r3, r2
 8003078:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d008      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003086:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003092:	490b      	ldr	r1, [pc, #44]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003094:	4313      	orrs	r3, r2
 8003096:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80030a4:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	4903      	ldr	r1, [pc, #12]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3748      	adds	r7, #72	; 0x48
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40021000 	.word	0x40021000

080030c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e040      	b.n	8003158 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7fd fbe2 	bl	80008b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2224      	movs	r2, #36	; 0x24
 80030f0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0201 	bic.w	r2, r2, #1
 8003100:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f82c 	bl	8003160 <UART_SetConfig>
 8003108:	4603      	mov	r3, r0
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e022      	b.n	8003158 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f956 	bl	80033cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800312e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800313e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f9dd 	bl	8003510 <UART_CheckIdleState>
 8003156:	4603      	mov	r3, r0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	4313      	orrs	r3, r2
 8003182:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	4b8a      	ldr	r3, [pc, #552]	; (80033b4 <UART_SetConfig+0x254>)
 800318c:	4013      	ands	r3, r2
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	6979      	ldr	r1, [r7, #20]
 8003194:	430b      	orrs	r3, r1
 8003196:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a78      	ldr	r2, [pc, #480]	; (80033b8 <UART_SetConfig+0x258>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d120      	bne.n	800321e <UART_SetConfig+0xbe>
 80031dc:	4b77      	ldr	r3, [pc, #476]	; (80033bc <UART_SetConfig+0x25c>)
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d817      	bhi.n	8003218 <UART_SetConfig+0xb8>
 80031e8:	a201      	add	r2, pc, #4	; (adr r2, 80031f0 <UART_SetConfig+0x90>)
 80031ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ee:	bf00      	nop
 80031f0:	08003201 	.word	0x08003201
 80031f4:	0800320d 	.word	0x0800320d
 80031f8:	08003213 	.word	0x08003213
 80031fc:	08003207 	.word	0x08003207
 8003200:	2300      	movs	r3, #0
 8003202:	77fb      	strb	r3, [r7, #31]
 8003204:	e01d      	b.n	8003242 <UART_SetConfig+0xe2>
 8003206:	2302      	movs	r3, #2
 8003208:	77fb      	strb	r3, [r7, #31]
 800320a:	e01a      	b.n	8003242 <UART_SetConfig+0xe2>
 800320c:	2304      	movs	r3, #4
 800320e:	77fb      	strb	r3, [r7, #31]
 8003210:	e017      	b.n	8003242 <UART_SetConfig+0xe2>
 8003212:	2308      	movs	r3, #8
 8003214:	77fb      	strb	r3, [r7, #31]
 8003216:	e014      	b.n	8003242 <UART_SetConfig+0xe2>
 8003218:	2310      	movs	r3, #16
 800321a:	77fb      	strb	r3, [r7, #31]
 800321c:	e011      	b.n	8003242 <UART_SetConfig+0xe2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a67      	ldr	r2, [pc, #412]	; (80033c0 <UART_SetConfig+0x260>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d102      	bne.n	800322e <UART_SetConfig+0xce>
 8003228:	2300      	movs	r3, #0
 800322a:	77fb      	strb	r3, [r7, #31]
 800322c:	e009      	b.n	8003242 <UART_SetConfig+0xe2>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a64      	ldr	r2, [pc, #400]	; (80033c4 <UART_SetConfig+0x264>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d102      	bne.n	800323e <UART_SetConfig+0xde>
 8003238:	2300      	movs	r3, #0
 800323a:	77fb      	strb	r3, [r7, #31]
 800323c:	e001      	b.n	8003242 <UART_SetConfig+0xe2>
 800323e:	2310      	movs	r3, #16
 8003240:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800324a:	d15a      	bne.n	8003302 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800324c:	7ffb      	ldrb	r3, [r7, #31]
 800324e:	2b08      	cmp	r3, #8
 8003250:	d827      	bhi.n	80032a2 <UART_SetConfig+0x142>
 8003252:	a201      	add	r2, pc, #4	; (adr r2, 8003258 <UART_SetConfig+0xf8>)
 8003254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003258:	0800327d 	.word	0x0800327d
 800325c:	08003285 	.word	0x08003285
 8003260:	0800328d 	.word	0x0800328d
 8003264:	080032a3 	.word	0x080032a3
 8003268:	08003293 	.word	0x08003293
 800326c:	080032a3 	.word	0x080032a3
 8003270:	080032a3 	.word	0x080032a3
 8003274:	080032a3 	.word	0x080032a3
 8003278:	0800329b 	.word	0x0800329b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800327c:	f7ff fd4c 	bl	8002d18 <HAL_RCC_GetPCLK1Freq>
 8003280:	61b8      	str	r0, [r7, #24]
        break;
 8003282:	e013      	b.n	80032ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003284:	f7ff fd6a 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 8003288:	61b8      	str	r0, [r7, #24]
        break;
 800328a:	e00f      	b.n	80032ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800328c:	4b4e      	ldr	r3, [pc, #312]	; (80033c8 <UART_SetConfig+0x268>)
 800328e:	61bb      	str	r3, [r7, #24]
        break;
 8003290:	e00c      	b.n	80032ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003292:	f7ff fccb 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8003296:	61b8      	str	r0, [r7, #24]
        break;
 8003298:	e008      	b.n	80032ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800329e:	61bb      	str	r3, [r7, #24]
        break;
 80032a0:	e004      	b.n	80032ac <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	77bb      	strb	r3, [r7, #30]
        break;
 80032aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d074      	beq.n	800339c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	005a      	lsls	r2, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	085b      	lsrs	r3, r3, #1
 80032bc:	441a      	add	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	2b0f      	cmp	r3, #15
 80032cc:	d916      	bls.n	80032fc <UART_SetConfig+0x19c>
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d4:	d212      	bcs.n	80032fc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	f023 030f 	bic.w	r3, r3, #15
 80032de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	085b      	lsrs	r3, r3, #1
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	89fb      	ldrh	r3, [r7, #14]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	89fa      	ldrh	r2, [r7, #14]
 80032f8:	60da      	str	r2, [r3, #12]
 80032fa:	e04f      	b.n	800339c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	77bb      	strb	r3, [r7, #30]
 8003300:	e04c      	b.n	800339c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003302:	7ffb      	ldrb	r3, [r7, #31]
 8003304:	2b08      	cmp	r3, #8
 8003306:	d828      	bhi.n	800335a <UART_SetConfig+0x1fa>
 8003308:	a201      	add	r2, pc, #4	; (adr r2, 8003310 <UART_SetConfig+0x1b0>)
 800330a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330e:	bf00      	nop
 8003310:	08003335 	.word	0x08003335
 8003314:	0800333d 	.word	0x0800333d
 8003318:	08003345 	.word	0x08003345
 800331c:	0800335b 	.word	0x0800335b
 8003320:	0800334b 	.word	0x0800334b
 8003324:	0800335b 	.word	0x0800335b
 8003328:	0800335b 	.word	0x0800335b
 800332c:	0800335b 	.word	0x0800335b
 8003330:	08003353 	.word	0x08003353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003334:	f7ff fcf0 	bl	8002d18 <HAL_RCC_GetPCLK1Freq>
 8003338:	61b8      	str	r0, [r7, #24]
        break;
 800333a:	e013      	b.n	8003364 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800333c:	f7ff fd0e 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 8003340:	61b8      	str	r0, [r7, #24]
        break;
 8003342:	e00f      	b.n	8003364 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003344:	4b20      	ldr	r3, [pc, #128]	; (80033c8 <UART_SetConfig+0x268>)
 8003346:	61bb      	str	r3, [r7, #24]
        break;
 8003348:	e00c      	b.n	8003364 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800334a:	f7ff fc6f 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 800334e:	61b8      	str	r0, [r7, #24]
        break;
 8003350:	e008      	b.n	8003364 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003356:	61bb      	str	r3, [r7, #24]
        break;
 8003358:	e004      	b.n	8003364 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	77bb      	strb	r3, [r7, #30]
        break;
 8003362:	bf00      	nop
    }

    if (pclk != 0U)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d018      	beq.n	800339c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	085a      	lsrs	r2, r3, #1
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	441a      	add	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	fbb2 f3f3 	udiv	r3, r2, r3
 800337c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	2b0f      	cmp	r3, #15
 8003382:	d909      	bls.n	8003398 <UART_SetConfig+0x238>
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800338a:	d205      	bcs.n	8003398 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	b29a      	uxth	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	60da      	str	r2, [r3, #12]
 8003396:	e001      	b.n	800339c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80033a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3720      	adds	r7, #32
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	efff69f3 	.word	0xefff69f3
 80033b8:	40013800 	.word	0x40013800
 80033bc:	40021000 	.word	0x40021000
 80033c0:	40004400 	.word	0x40004400
 80033c4:	40004800 	.word	0x40004800
 80033c8:	007a1200 	.word	0x007a1200

080033cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00a      	beq.n	80033f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00a      	beq.n	800343a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00a      	beq.n	80034a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d01a      	beq.n	80034e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ca:	d10a      	bne.n	80034e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	605a      	str	r2, [r3, #4]
  }
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b098      	sub	sp, #96	; 0x60
 8003514:	af02      	add	r7, sp, #8
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003520:	f7fd fafe 	bl	8000b20 <HAL_GetTick>
 8003524:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b08      	cmp	r3, #8
 8003532:	d12e      	bne.n	8003592 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003534:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800353c:	2200      	movs	r2, #0
 800353e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f88c 	bl	8003660 <UART_WaitOnFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d021      	beq.n	8003592 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003556:	e853 3f00 	ldrex	r3, [r3]
 800355a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800355c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003562:	653b      	str	r3, [r7, #80]	; 0x50
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800356c:	647b      	str	r3, [r7, #68]	; 0x44
 800356e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003570:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003572:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003574:	e841 2300 	strex	r3, r2, [r1]
 8003578:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800357a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1e6      	bne.n	800354e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2220      	movs	r2, #32
 8003584:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e062      	b.n	8003658 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b04      	cmp	r3, #4
 800359e:	d149      	bne.n	8003634 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a8:	2200      	movs	r2, #0
 80035aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f856 	bl	8003660 <UART_WaitOnFlagUntilTimeout>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d03c      	beq.n	8003634 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	e853 3f00 	ldrex	r3, [r3]
 80035c6:	623b      	str	r3, [r7, #32]
   return(result);
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d8:	633b      	str	r3, [r7, #48]	; 0x30
 80035da:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035e0:	e841 2300 	strex	r3, r2, [r1]
 80035e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1e6      	bne.n	80035ba <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3308      	adds	r3, #8
 80035f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	e853 3f00 	ldrex	r3, [r3]
 80035fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 0301 	bic.w	r3, r3, #1
 8003602:	64bb      	str	r3, [r7, #72]	; 0x48
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3308      	adds	r3, #8
 800360a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800360c:	61fa      	str	r2, [r7, #28]
 800360e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003610:	69b9      	ldr	r1, [r7, #24]
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	e841 2300 	strex	r3, r2, [r1]
 8003618:	617b      	str	r3, [r7, #20]
   return(result);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e5      	bne.n	80035ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e011      	b.n	8003658 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2220      	movs	r2, #32
 8003638:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2220      	movs	r2, #32
 800363e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3758      	adds	r7, #88	; 0x58
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	4613      	mov	r3, r2
 800366e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003670:	e049      	b.n	8003706 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003678:	d045      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367a:	f7fd fa51 	bl	8000b20 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	429a      	cmp	r2, r3
 8003688:	d302      	bcc.n	8003690 <UART_WaitOnFlagUntilTimeout+0x30>
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e048      	b.n	8003726 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d031      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d110      	bne.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2208      	movs	r2, #8
 80036b6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 f838 	bl	800372e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2208      	movs	r2, #8
 80036c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e029      	b.n	8003726 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e0:	d111      	bne.n	8003706 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 f81e 	bl	800372e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e00f      	b.n	8003726 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69da      	ldr	r2, [r3, #28]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4013      	ands	r3, r2
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	429a      	cmp	r2, r3
 8003714:	bf0c      	ite	eq
 8003716:	2301      	moveq	r3, #1
 8003718:	2300      	movne	r3, #0
 800371a:	b2db      	uxtb	r3, r3
 800371c:	461a      	mov	r2, r3
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	429a      	cmp	r2, r3
 8003722:	d0a6      	beq.n	8003672 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800372e:	b480      	push	{r7}
 8003730:	b095      	sub	sp, #84	; 0x54
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800373e:	e853 3f00 	ldrex	r3, [r3]
 8003742:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800374a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003754:	643b      	str	r3, [r7, #64]	; 0x40
 8003756:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003758:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800375a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800375c:	e841 2300 	strex	r3, r2, [r1]
 8003760:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1e6      	bne.n	8003736 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3308      	adds	r3, #8
 800376e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	e853 3f00 	ldrex	r3, [r3]
 8003776:	61fb      	str	r3, [r7, #28]
   return(result);
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f023 0301 	bic.w	r3, r3, #1
 800377e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3308      	adds	r3, #8
 8003786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003788:	62fa      	str	r2, [r7, #44]	; 0x2c
 800378a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800378e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003790:	e841 2300 	strex	r3, r2, [r1]
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1e5      	bne.n	8003768 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d118      	bne.n	80037d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f023 0310 	bic.w	r3, r3, #16
 80037b8:	647b      	str	r3, [r7, #68]	; 0x44
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037c2:	61bb      	str	r3, [r7, #24]
 80037c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c6:	6979      	ldr	r1, [r7, #20]
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	e841 2300 	strex	r3, r2, [r1]
 80037ce:	613b      	str	r3, [r7, #16]
   return(result);
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1e6      	bne.n	80037a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80037ea:	bf00      	nop
 80037ec:	3754      	adds	r7, #84	; 0x54
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
	...

080037f8 <__errno>:
 80037f8:	4b01      	ldr	r3, [pc, #4]	; (8003800 <__errno+0x8>)
 80037fa:	6818      	ldr	r0, [r3, #0]
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	2000000c 	.word	0x2000000c

08003804 <__libc_init_array>:
 8003804:	b570      	push	{r4, r5, r6, lr}
 8003806:	4d0d      	ldr	r5, [pc, #52]	; (800383c <__libc_init_array+0x38>)
 8003808:	4c0d      	ldr	r4, [pc, #52]	; (8003840 <__libc_init_array+0x3c>)
 800380a:	1b64      	subs	r4, r4, r5
 800380c:	10a4      	asrs	r4, r4, #2
 800380e:	2600      	movs	r6, #0
 8003810:	42a6      	cmp	r6, r4
 8003812:	d109      	bne.n	8003828 <__libc_init_array+0x24>
 8003814:	4d0b      	ldr	r5, [pc, #44]	; (8003844 <__libc_init_array+0x40>)
 8003816:	4c0c      	ldr	r4, [pc, #48]	; (8003848 <__libc_init_array+0x44>)
 8003818:	f000 fc8e 	bl	8004138 <_init>
 800381c:	1b64      	subs	r4, r4, r5
 800381e:	10a4      	asrs	r4, r4, #2
 8003820:	2600      	movs	r6, #0
 8003822:	42a6      	cmp	r6, r4
 8003824:	d105      	bne.n	8003832 <__libc_init_array+0x2e>
 8003826:	bd70      	pop	{r4, r5, r6, pc}
 8003828:	f855 3b04 	ldr.w	r3, [r5], #4
 800382c:	4798      	blx	r3
 800382e:	3601      	adds	r6, #1
 8003830:	e7ee      	b.n	8003810 <__libc_init_array+0xc>
 8003832:	f855 3b04 	ldr.w	r3, [r5], #4
 8003836:	4798      	blx	r3
 8003838:	3601      	adds	r6, #1
 800383a:	e7f2      	b.n	8003822 <__libc_init_array+0x1e>
 800383c:	080041fc 	.word	0x080041fc
 8003840:	080041fc 	.word	0x080041fc
 8003844:	080041fc 	.word	0x080041fc
 8003848:	08004200 	.word	0x08004200

0800384c <memset>:
 800384c:	4402      	add	r2, r0
 800384e:	4603      	mov	r3, r0
 8003850:	4293      	cmp	r3, r2
 8003852:	d100      	bne.n	8003856 <memset+0xa>
 8003854:	4770      	bx	lr
 8003856:	f803 1b01 	strb.w	r1, [r3], #1
 800385a:	e7f9      	b.n	8003850 <memset+0x4>

0800385c <siprintf>:
 800385c:	b40e      	push	{r1, r2, r3}
 800385e:	b500      	push	{lr}
 8003860:	b09c      	sub	sp, #112	; 0x70
 8003862:	ab1d      	add	r3, sp, #116	; 0x74
 8003864:	9002      	str	r0, [sp, #8]
 8003866:	9006      	str	r0, [sp, #24]
 8003868:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800386c:	4809      	ldr	r0, [pc, #36]	; (8003894 <siprintf+0x38>)
 800386e:	9107      	str	r1, [sp, #28]
 8003870:	9104      	str	r1, [sp, #16]
 8003872:	4909      	ldr	r1, [pc, #36]	; (8003898 <siprintf+0x3c>)
 8003874:	f853 2b04 	ldr.w	r2, [r3], #4
 8003878:	9105      	str	r1, [sp, #20]
 800387a:	6800      	ldr	r0, [r0, #0]
 800387c:	9301      	str	r3, [sp, #4]
 800387e:	a902      	add	r1, sp, #8
 8003880:	f000 f868 	bl	8003954 <_svfiprintf_r>
 8003884:	9b02      	ldr	r3, [sp, #8]
 8003886:	2200      	movs	r2, #0
 8003888:	701a      	strb	r2, [r3, #0]
 800388a:	b01c      	add	sp, #112	; 0x70
 800388c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003890:	b003      	add	sp, #12
 8003892:	4770      	bx	lr
 8003894:	2000000c 	.word	0x2000000c
 8003898:	ffff0208 	.word	0xffff0208

0800389c <__ssputs_r>:
 800389c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038a0:	688e      	ldr	r6, [r1, #8]
 80038a2:	429e      	cmp	r6, r3
 80038a4:	4682      	mov	sl, r0
 80038a6:	460c      	mov	r4, r1
 80038a8:	4690      	mov	r8, r2
 80038aa:	461f      	mov	r7, r3
 80038ac:	d838      	bhi.n	8003920 <__ssputs_r+0x84>
 80038ae:	898a      	ldrh	r2, [r1, #12]
 80038b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038b4:	d032      	beq.n	800391c <__ssputs_r+0x80>
 80038b6:	6825      	ldr	r5, [r4, #0]
 80038b8:	6909      	ldr	r1, [r1, #16]
 80038ba:	eba5 0901 	sub.w	r9, r5, r1
 80038be:	6965      	ldr	r5, [r4, #20]
 80038c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038c8:	3301      	adds	r3, #1
 80038ca:	444b      	add	r3, r9
 80038cc:	106d      	asrs	r5, r5, #1
 80038ce:	429d      	cmp	r5, r3
 80038d0:	bf38      	it	cc
 80038d2:	461d      	movcc	r5, r3
 80038d4:	0553      	lsls	r3, r2, #21
 80038d6:	d531      	bpl.n	800393c <__ssputs_r+0xa0>
 80038d8:	4629      	mov	r1, r5
 80038da:	f000 fb63 	bl	8003fa4 <_malloc_r>
 80038de:	4606      	mov	r6, r0
 80038e0:	b950      	cbnz	r0, 80038f8 <__ssputs_r+0x5c>
 80038e2:	230c      	movs	r3, #12
 80038e4:	f8ca 3000 	str.w	r3, [sl]
 80038e8:	89a3      	ldrh	r3, [r4, #12]
 80038ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038ee:	81a3      	strh	r3, [r4, #12]
 80038f0:	f04f 30ff 	mov.w	r0, #4294967295
 80038f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038f8:	6921      	ldr	r1, [r4, #16]
 80038fa:	464a      	mov	r2, r9
 80038fc:	f000 fabe 	bl	8003e7c <memcpy>
 8003900:	89a3      	ldrh	r3, [r4, #12]
 8003902:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800390a:	81a3      	strh	r3, [r4, #12]
 800390c:	6126      	str	r6, [r4, #16]
 800390e:	6165      	str	r5, [r4, #20]
 8003910:	444e      	add	r6, r9
 8003912:	eba5 0509 	sub.w	r5, r5, r9
 8003916:	6026      	str	r6, [r4, #0]
 8003918:	60a5      	str	r5, [r4, #8]
 800391a:	463e      	mov	r6, r7
 800391c:	42be      	cmp	r6, r7
 800391e:	d900      	bls.n	8003922 <__ssputs_r+0x86>
 8003920:	463e      	mov	r6, r7
 8003922:	6820      	ldr	r0, [r4, #0]
 8003924:	4632      	mov	r2, r6
 8003926:	4641      	mov	r1, r8
 8003928:	f000 fab6 	bl	8003e98 <memmove>
 800392c:	68a3      	ldr	r3, [r4, #8]
 800392e:	1b9b      	subs	r3, r3, r6
 8003930:	60a3      	str	r3, [r4, #8]
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	4433      	add	r3, r6
 8003936:	6023      	str	r3, [r4, #0]
 8003938:	2000      	movs	r0, #0
 800393a:	e7db      	b.n	80038f4 <__ssputs_r+0x58>
 800393c:	462a      	mov	r2, r5
 800393e:	f000 fba5 	bl	800408c <_realloc_r>
 8003942:	4606      	mov	r6, r0
 8003944:	2800      	cmp	r0, #0
 8003946:	d1e1      	bne.n	800390c <__ssputs_r+0x70>
 8003948:	6921      	ldr	r1, [r4, #16]
 800394a:	4650      	mov	r0, sl
 800394c:	f000 fabe 	bl	8003ecc <_free_r>
 8003950:	e7c7      	b.n	80038e2 <__ssputs_r+0x46>
	...

08003954 <_svfiprintf_r>:
 8003954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003958:	4698      	mov	r8, r3
 800395a:	898b      	ldrh	r3, [r1, #12]
 800395c:	061b      	lsls	r3, r3, #24
 800395e:	b09d      	sub	sp, #116	; 0x74
 8003960:	4607      	mov	r7, r0
 8003962:	460d      	mov	r5, r1
 8003964:	4614      	mov	r4, r2
 8003966:	d50e      	bpl.n	8003986 <_svfiprintf_r+0x32>
 8003968:	690b      	ldr	r3, [r1, #16]
 800396a:	b963      	cbnz	r3, 8003986 <_svfiprintf_r+0x32>
 800396c:	2140      	movs	r1, #64	; 0x40
 800396e:	f000 fb19 	bl	8003fa4 <_malloc_r>
 8003972:	6028      	str	r0, [r5, #0]
 8003974:	6128      	str	r0, [r5, #16]
 8003976:	b920      	cbnz	r0, 8003982 <_svfiprintf_r+0x2e>
 8003978:	230c      	movs	r3, #12
 800397a:	603b      	str	r3, [r7, #0]
 800397c:	f04f 30ff 	mov.w	r0, #4294967295
 8003980:	e0d1      	b.n	8003b26 <_svfiprintf_r+0x1d2>
 8003982:	2340      	movs	r3, #64	; 0x40
 8003984:	616b      	str	r3, [r5, #20]
 8003986:	2300      	movs	r3, #0
 8003988:	9309      	str	r3, [sp, #36]	; 0x24
 800398a:	2320      	movs	r3, #32
 800398c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003990:	f8cd 800c 	str.w	r8, [sp, #12]
 8003994:	2330      	movs	r3, #48	; 0x30
 8003996:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003b40 <_svfiprintf_r+0x1ec>
 800399a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800399e:	f04f 0901 	mov.w	r9, #1
 80039a2:	4623      	mov	r3, r4
 80039a4:	469a      	mov	sl, r3
 80039a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039aa:	b10a      	cbz	r2, 80039b0 <_svfiprintf_r+0x5c>
 80039ac:	2a25      	cmp	r2, #37	; 0x25
 80039ae:	d1f9      	bne.n	80039a4 <_svfiprintf_r+0x50>
 80039b0:	ebba 0b04 	subs.w	fp, sl, r4
 80039b4:	d00b      	beq.n	80039ce <_svfiprintf_r+0x7a>
 80039b6:	465b      	mov	r3, fp
 80039b8:	4622      	mov	r2, r4
 80039ba:	4629      	mov	r1, r5
 80039bc:	4638      	mov	r0, r7
 80039be:	f7ff ff6d 	bl	800389c <__ssputs_r>
 80039c2:	3001      	adds	r0, #1
 80039c4:	f000 80aa 	beq.w	8003b1c <_svfiprintf_r+0x1c8>
 80039c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039ca:	445a      	add	r2, fp
 80039cc:	9209      	str	r2, [sp, #36]	; 0x24
 80039ce:	f89a 3000 	ldrb.w	r3, [sl]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 80a2 	beq.w	8003b1c <_svfiprintf_r+0x1c8>
 80039d8:	2300      	movs	r3, #0
 80039da:	f04f 32ff 	mov.w	r2, #4294967295
 80039de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039e2:	f10a 0a01 	add.w	sl, sl, #1
 80039e6:	9304      	str	r3, [sp, #16]
 80039e8:	9307      	str	r3, [sp, #28]
 80039ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039ee:	931a      	str	r3, [sp, #104]	; 0x68
 80039f0:	4654      	mov	r4, sl
 80039f2:	2205      	movs	r2, #5
 80039f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039f8:	4851      	ldr	r0, [pc, #324]	; (8003b40 <_svfiprintf_r+0x1ec>)
 80039fa:	f7fc fbf1 	bl	80001e0 <memchr>
 80039fe:	9a04      	ldr	r2, [sp, #16]
 8003a00:	b9d8      	cbnz	r0, 8003a3a <_svfiprintf_r+0xe6>
 8003a02:	06d0      	lsls	r0, r2, #27
 8003a04:	bf44      	itt	mi
 8003a06:	2320      	movmi	r3, #32
 8003a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a0c:	0711      	lsls	r1, r2, #28
 8003a0e:	bf44      	itt	mi
 8003a10:	232b      	movmi	r3, #43	; 0x2b
 8003a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a16:	f89a 3000 	ldrb.w	r3, [sl]
 8003a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a1c:	d015      	beq.n	8003a4a <_svfiprintf_r+0xf6>
 8003a1e:	9a07      	ldr	r2, [sp, #28]
 8003a20:	4654      	mov	r4, sl
 8003a22:	2000      	movs	r0, #0
 8003a24:	f04f 0c0a 	mov.w	ip, #10
 8003a28:	4621      	mov	r1, r4
 8003a2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a2e:	3b30      	subs	r3, #48	; 0x30
 8003a30:	2b09      	cmp	r3, #9
 8003a32:	d94e      	bls.n	8003ad2 <_svfiprintf_r+0x17e>
 8003a34:	b1b0      	cbz	r0, 8003a64 <_svfiprintf_r+0x110>
 8003a36:	9207      	str	r2, [sp, #28]
 8003a38:	e014      	b.n	8003a64 <_svfiprintf_r+0x110>
 8003a3a:	eba0 0308 	sub.w	r3, r0, r8
 8003a3e:	fa09 f303 	lsl.w	r3, r9, r3
 8003a42:	4313      	orrs	r3, r2
 8003a44:	9304      	str	r3, [sp, #16]
 8003a46:	46a2      	mov	sl, r4
 8003a48:	e7d2      	b.n	80039f0 <_svfiprintf_r+0x9c>
 8003a4a:	9b03      	ldr	r3, [sp, #12]
 8003a4c:	1d19      	adds	r1, r3, #4
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	9103      	str	r1, [sp, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	bfbb      	ittet	lt
 8003a56:	425b      	neglt	r3, r3
 8003a58:	f042 0202 	orrlt.w	r2, r2, #2
 8003a5c:	9307      	strge	r3, [sp, #28]
 8003a5e:	9307      	strlt	r3, [sp, #28]
 8003a60:	bfb8      	it	lt
 8003a62:	9204      	strlt	r2, [sp, #16]
 8003a64:	7823      	ldrb	r3, [r4, #0]
 8003a66:	2b2e      	cmp	r3, #46	; 0x2e
 8003a68:	d10c      	bne.n	8003a84 <_svfiprintf_r+0x130>
 8003a6a:	7863      	ldrb	r3, [r4, #1]
 8003a6c:	2b2a      	cmp	r3, #42	; 0x2a
 8003a6e:	d135      	bne.n	8003adc <_svfiprintf_r+0x188>
 8003a70:	9b03      	ldr	r3, [sp, #12]
 8003a72:	1d1a      	adds	r2, r3, #4
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	9203      	str	r2, [sp, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bfb8      	it	lt
 8003a7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a80:	3402      	adds	r4, #2
 8003a82:	9305      	str	r3, [sp, #20]
 8003a84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003b50 <_svfiprintf_r+0x1fc>
 8003a88:	7821      	ldrb	r1, [r4, #0]
 8003a8a:	2203      	movs	r2, #3
 8003a8c:	4650      	mov	r0, sl
 8003a8e:	f7fc fba7 	bl	80001e0 <memchr>
 8003a92:	b140      	cbz	r0, 8003aa6 <_svfiprintf_r+0x152>
 8003a94:	2340      	movs	r3, #64	; 0x40
 8003a96:	eba0 000a 	sub.w	r0, r0, sl
 8003a9a:	fa03 f000 	lsl.w	r0, r3, r0
 8003a9e:	9b04      	ldr	r3, [sp, #16]
 8003aa0:	4303      	orrs	r3, r0
 8003aa2:	3401      	adds	r4, #1
 8003aa4:	9304      	str	r3, [sp, #16]
 8003aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aaa:	4826      	ldr	r0, [pc, #152]	; (8003b44 <_svfiprintf_r+0x1f0>)
 8003aac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ab0:	2206      	movs	r2, #6
 8003ab2:	f7fc fb95 	bl	80001e0 <memchr>
 8003ab6:	2800      	cmp	r0, #0
 8003ab8:	d038      	beq.n	8003b2c <_svfiprintf_r+0x1d8>
 8003aba:	4b23      	ldr	r3, [pc, #140]	; (8003b48 <_svfiprintf_r+0x1f4>)
 8003abc:	bb1b      	cbnz	r3, 8003b06 <_svfiprintf_r+0x1b2>
 8003abe:	9b03      	ldr	r3, [sp, #12]
 8003ac0:	3307      	adds	r3, #7
 8003ac2:	f023 0307 	bic.w	r3, r3, #7
 8003ac6:	3308      	adds	r3, #8
 8003ac8:	9303      	str	r3, [sp, #12]
 8003aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003acc:	4433      	add	r3, r6
 8003ace:	9309      	str	r3, [sp, #36]	; 0x24
 8003ad0:	e767      	b.n	80039a2 <_svfiprintf_r+0x4e>
 8003ad2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ad6:	460c      	mov	r4, r1
 8003ad8:	2001      	movs	r0, #1
 8003ada:	e7a5      	b.n	8003a28 <_svfiprintf_r+0xd4>
 8003adc:	2300      	movs	r3, #0
 8003ade:	3401      	adds	r4, #1
 8003ae0:	9305      	str	r3, [sp, #20]
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	f04f 0c0a 	mov.w	ip, #10
 8003ae8:	4620      	mov	r0, r4
 8003aea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003aee:	3a30      	subs	r2, #48	; 0x30
 8003af0:	2a09      	cmp	r2, #9
 8003af2:	d903      	bls.n	8003afc <_svfiprintf_r+0x1a8>
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0c5      	beq.n	8003a84 <_svfiprintf_r+0x130>
 8003af8:	9105      	str	r1, [sp, #20]
 8003afa:	e7c3      	b.n	8003a84 <_svfiprintf_r+0x130>
 8003afc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b00:	4604      	mov	r4, r0
 8003b02:	2301      	movs	r3, #1
 8003b04:	e7f0      	b.n	8003ae8 <_svfiprintf_r+0x194>
 8003b06:	ab03      	add	r3, sp, #12
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	462a      	mov	r2, r5
 8003b0c:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <_svfiprintf_r+0x1f8>)
 8003b0e:	a904      	add	r1, sp, #16
 8003b10:	4638      	mov	r0, r7
 8003b12:	f3af 8000 	nop.w
 8003b16:	1c42      	adds	r2, r0, #1
 8003b18:	4606      	mov	r6, r0
 8003b1a:	d1d6      	bne.n	8003aca <_svfiprintf_r+0x176>
 8003b1c:	89ab      	ldrh	r3, [r5, #12]
 8003b1e:	065b      	lsls	r3, r3, #25
 8003b20:	f53f af2c 	bmi.w	800397c <_svfiprintf_r+0x28>
 8003b24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b26:	b01d      	add	sp, #116	; 0x74
 8003b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b2c:	ab03      	add	r3, sp, #12
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	462a      	mov	r2, r5
 8003b32:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <_svfiprintf_r+0x1f8>)
 8003b34:	a904      	add	r1, sp, #16
 8003b36:	4638      	mov	r0, r7
 8003b38:	f000 f87a 	bl	8003c30 <_printf_i>
 8003b3c:	e7eb      	b.n	8003b16 <_svfiprintf_r+0x1c2>
 8003b3e:	bf00      	nop
 8003b40:	080041c8 	.word	0x080041c8
 8003b44:	080041d2 	.word	0x080041d2
 8003b48:	00000000 	.word	0x00000000
 8003b4c:	0800389d 	.word	0x0800389d
 8003b50:	080041ce 	.word	0x080041ce

08003b54 <_printf_common>:
 8003b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b58:	4616      	mov	r6, r2
 8003b5a:	4699      	mov	r9, r3
 8003b5c:	688a      	ldr	r2, [r1, #8]
 8003b5e:	690b      	ldr	r3, [r1, #16]
 8003b60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b64:	4293      	cmp	r3, r2
 8003b66:	bfb8      	it	lt
 8003b68:	4613      	movlt	r3, r2
 8003b6a:	6033      	str	r3, [r6, #0]
 8003b6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b70:	4607      	mov	r7, r0
 8003b72:	460c      	mov	r4, r1
 8003b74:	b10a      	cbz	r2, 8003b7a <_printf_common+0x26>
 8003b76:	3301      	adds	r3, #1
 8003b78:	6033      	str	r3, [r6, #0]
 8003b7a:	6823      	ldr	r3, [r4, #0]
 8003b7c:	0699      	lsls	r1, r3, #26
 8003b7e:	bf42      	ittt	mi
 8003b80:	6833      	ldrmi	r3, [r6, #0]
 8003b82:	3302      	addmi	r3, #2
 8003b84:	6033      	strmi	r3, [r6, #0]
 8003b86:	6825      	ldr	r5, [r4, #0]
 8003b88:	f015 0506 	ands.w	r5, r5, #6
 8003b8c:	d106      	bne.n	8003b9c <_printf_common+0x48>
 8003b8e:	f104 0a19 	add.w	sl, r4, #25
 8003b92:	68e3      	ldr	r3, [r4, #12]
 8003b94:	6832      	ldr	r2, [r6, #0]
 8003b96:	1a9b      	subs	r3, r3, r2
 8003b98:	42ab      	cmp	r3, r5
 8003b9a:	dc26      	bgt.n	8003bea <_printf_common+0x96>
 8003b9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ba0:	1e13      	subs	r3, r2, #0
 8003ba2:	6822      	ldr	r2, [r4, #0]
 8003ba4:	bf18      	it	ne
 8003ba6:	2301      	movne	r3, #1
 8003ba8:	0692      	lsls	r2, r2, #26
 8003baa:	d42b      	bmi.n	8003c04 <_printf_common+0xb0>
 8003bac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bb0:	4649      	mov	r1, r9
 8003bb2:	4638      	mov	r0, r7
 8003bb4:	47c0      	blx	r8
 8003bb6:	3001      	adds	r0, #1
 8003bb8:	d01e      	beq.n	8003bf8 <_printf_common+0xa4>
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	68e5      	ldr	r5, [r4, #12]
 8003bbe:	6832      	ldr	r2, [r6, #0]
 8003bc0:	f003 0306 	and.w	r3, r3, #6
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	bf08      	it	eq
 8003bc8:	1aad      	subeq	r5, r5, r2
 8003bca:	68a3      	ldr	r3, [r4, #8]
 8003bcc:	6922      	ldr	r2, [r4, #16]
 8003bce:	bf0c      	ite	eq
 8003bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bd4:	2500      	movne	r5, #0
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	bfc4      	itt	gt
 8003bda:	1a9b      	subgt	r3, r3, r2
 8003bdc:	18ed      	addgt	r5, r5, r3
 8003bde:	2600      	movs	r6, #0
 8003be0:	341a      	adds	r4, #26
 8003be2:	42b5      	cmp	r5, r6
 8003be4:	d11a      	bne.n	8003c1c <_printf_common+0xc8>
 8003be6:	2000      	movs	r0, #0
 8003be8:	e008      	b.n	8003bfc <_printf_common+0xa8>
 8003bea:	2301      	movs	r3, #1
 8003bec:	4652      	mov	r2, sl
 8003bee:	4649      	mov	r1, r9
 8003bf0:	4638      	mov	r0, r7
 8003bf2:	47c0      	blx	r8
 8003bf4:	3001      	adds	r0, #1
 8003bf6:	d103      	bne.n	8003c00 <_printf_common+0xac>
 8003bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c00:	3501      	adds	r5, #1
 8003c02:	e7c6      	b.n	8003b92 <_printf_common+0x3e>
 8003c04:	18e1      	adds	r1, r4, r3
 8003c06:	1c5a      	adds	r2, r3, #1
 8003c08:	2030      	movs	r0, #48	; 0x30
 8003c0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c0e:	4422      	add	r2, r4
 8003c10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c18:	3302      	adds	r3, #2
 8003c1a:	e7c7      	b.n	8003bac <_printf_common+0x58>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	4622      	mov	r2, r4
 8003c20:	4649      	mov	r1, r9
 8003c22:	4638      	mov	r0, r7
 8003c24:	47c0      	blx	r8
 8003c26:	3001      	adds	r0, #1
 8003c28:	d0e6      	beq.n	8003bf8 <_printf_common+0xa4>
 8003c2a:	3601      	adds	r6, #1
 8003c2c:	e7d9      	b.n	8003be2 <_printf_common+0x8e>
	...

08003c30 <_printf_i>:
 8003c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c34:	7e0f      	ldrb	r7, [r1, #24]
 8003c36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c38:	2f78      	cmp	r7, #120	; 0x78
 8003c3a:	4691      	mov	r9, r2
 8003c3c:	4680      	mov	r8, r0
 8003c3e:	460c      	mov	r4, r1
 8003c40:	469a      	mov	sl, r3
 8003c42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c46:	d807      	bhi.n	8003c58 <_printf_i+0x28>
 8003c48:	2f62      	cmp	r7, #98	; 0x62
 8003c4a:	d80a      	bhi.n	8003c62 <_printf_i+0x32>
 8003c4c:	2f00      	cmp	r7, #0
 8003c4e:	f000 80d8 	beq.w	8003e02 <_printf_i+0x1d2>
 8003c52:	2f58      	cmp	r7, #88	; 0x58
 8003c54:	f000 80a3 	beq.w	8003d9e <_printf_i+0x16e>
 8003c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c60:	e03a      	b.n	8003cd8 <_printf_i+0xa8>
 8003c62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c66:	2b15      	cmp	r3, #21
 8003c68:	d8f6      	bhi.n	8003c58 <_printf_i+0x28>
 8003c6a:	a101      	add	r1, pc, #4	; (adr r1, 8003c70 <_printf_i+0x40>)
 8003c6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c70:	08003cc9 	.word	0x08003cc9
 8003c74:	08003cdd 	.word	0x08003cdd
 8003c78:	08003c59 	.word	0x08003c59
 8003c7c:	08003c59 	.word	0x08003c59
 8003c80:	08003c59 	.word	0x08003c59
 8003c84:	08003c59 	.word	0x08003c59
 8003c88:	08003cdd 	.word	0x08003cdd
 8003c8c:	08003c59 	.word	0x08003c59
 8003c90:	08003c59 	.word	0x08003c59
 8003c94:	08003c59 	.word	0x08003c59
 8003c98:	08003c59 	.word	0x08003c59
 8003c9c:	08003de9 	.word	0x08003de9
 8003ca0:	08003d0d 	.word	0x08003d0d
 8003ca4:	08003dcb 	.word	0x08003dcb
 8003ca8:	08003c59 	.word	0x08003c59
 8003cac:	08003c59 	.word	0x08003c59
 8003cb0:	08003e0b 	.word	0x08003e0b
 8003cb4:	08003c59 	.word	0x08003c59
 8003cb8:	08003d0d 	.word	0x08003d0d
 8003cbc:	08003c59 	.word	0x08003c59
 8003cc0:	08003c59 	.word	0x08003c59
 8003cc4:	08003dd3 	.word	0x08003dd3
 8003cc8:	682b      	ldr	r3, [r5, #0]
 8003cca:	1d1a      	adds	r2, r3, #4
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	602a      	str	r2, [r5, #0]
 8003cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0a3      	b.n	8003e24 <_printf_i+0x1f4>
 8003cdc:	6820      	ldr	r0, [r4, #0]
 8003cde:	6829      	ldr	r1, [r5, #0]
 8003ce0:	0606      	lsls	r6, r0, #24
 8003ce2:	f101 0304 	add.w	r3, r1, #4
 8003ce6:	d50a      	bpl.n	8003cfe <_printf_i+0xce>
 8003ce8:	680e      	ldr	r6, [r1, #0]
 8003cea:	602b      	str	r3, [r5, #0]
 8003cec:	2e00      	cmp	r6, #0
 8003cee:	da03      	bge.n	8003cf8 <_printf_i+0xc8>
 8003cf0:	232d      	movs	r3, #45	; 0x2d
 8003cf2:	4276      	negs	r6, r6
 8003cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cf8:	485e      	ldr	r0, [pc, #376]	; (8003e74 <_printf_i+0x244>)
 8003cfa:	230a      	movs	r3, #10
 8003cfc:	e019      	b.n	8003d32 <_printf_i+0x102>
 8003cfe:	680e      	ldr	r6, [r1, #0]
 8003d00:	602b      	str	r3, [r5, #0]
 8003d02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d06:	bf18      	it	ne
 8003d08:	b236      	sxthne	r6, r6
 8003d0a:	e7ef      	b.n	8003cec <_printf_i+0xbc>
 8003d0c:	682b      	ldr	r3, [r5, #0]
 8003d0e:	6820      	ldr	r0, [r4, #0]
 8003d10:	1d19      	adds	r1, r3, #4
 8003d12:	6029      	str	r1, [r5, #0]
 8003d14:	0601      	lsls	r1, r0, #24
 8003d16:	d501      	bpl.n	8003d1c <_printf_i+0xec>
 8003d18:	681e      	ldr	r6, [r3, #0]
 8003d1a:	e002      	b.n	8003d22 <_printf_i+0xf2>
 8003d1c:	0646      	lsls	r6, r0, #25
 8003d1e:	d5fb      	bpl.n	8003d18 <_printf_i+0xe8>
 8003d20:	881e      	ldrh	r6, [r3, #0]
 8003d22:	4854      	ldr	r0, [pc, #336]	; (8003e74 <_printf_i+0x244>)
 8003d24:	2f6f      	cmp	r7, #111	; 0x6f
 8003d26:	bf0c      	ite	eq
 8003d28:	2308      	moveq	r3, #8
 8003d2a:	230a      	movne	r3, #10
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d32:	6865      	ldr	r5, [r4, #4]
 8003d34:	60a5      	str	r5, [r4, #8]
 8003d36:	2d00      	cmp	r5, #0
 8003d38:	bfa2      	ittt	ge
 8003d3a:	6821      	ldrge	r1, [r4, #0]
 8003d3c:	f021 0104 	bicge.w	r1, r1, #4
 8003d40:	6021      	strge	r1, [r4, #0]
 8003d42:	b90e      	cbnz	r6, 8003d48 <_printf_i+0x118>
 8003d44:	2d00      	cmp	r5, #0
 8003d46:	d04d      	beq.n	8003de4 <_printf_i+0x1b4>
 8003d48:	4615      	mov	r5, r2
 8003d4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d4e:	fb03 6711 	mls	r7, r3, r1, r6
 8003d52:	5dc7      	ldrb	r7, [r0, r7]
 8003d54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d58:	4637      	mov	r7, r6
 8003d5a:	42bb      	cmp	r3, r7
 8003d5c:	460e      	mov	r6, r1
 8003d5e:	d9f4      	bls.n	8003d4a <_printf_i+0x11a>
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d10b      	bne.n	8003d7c <_printf_i+0x14c>
 8003d64:	6823      	ldr	r3, [r4, #0]
 8003d66:	07de      	lsls	r6, r3, #31
 8003d68:	d508      	bpl.n	8003d7c <_printf_i+0x14c>
 8003d6a:	6923      	ldr	r3, [r4, #16]
 8003d6c:	6861      	ldr	r1, [r4, #4]
 8003d6e:	4299      	cmp	r1, r3
 8003d70:	bfde      	ittt	le
 8003d72:	2330      	movle	r3, #48	; 0x30
 8003d74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d7c:	1b52      	subs	r2, r2, r5
 8003d7e:	6122      	str	r2, [r4, #16]
 8003d80:	f8cd a000 	str.w	sl, [sp]
 8003d84:	464b      	mov	r3, r9
 8003d86:	aa03      	add	r2, sp, #12
 8003d88:	4621      	mov	r1, r4
 8003d8a:	4640      	mov	r0, r8
 8003d8c:	f7ff fee2 	bl	8003b54 <_printf_common>
 8003d90:	3001      	adds	r0, #1
 8003d92:	d14c      	bne.n	8003e2e <_printf_i+0x1fe>
 8003d94:	f04f 30ff 	mov.w	r0, #4294967295
 8003d98:	b004      	add	sp, #16
 8003d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d9e:	4835      	ldr	r0, [pc, #212]	; (8003e74 <_printf_i+0x244>)
 8003da0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003da4:	6829      	ldr	r1, [r5, #0]
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	f851 6b04 	ldr.w	r6, [r1], #4
 8003dac:	6029      	str	r1, [r5, #0]
 8003dae:	061d      	lsls	r5, r3, #24
 8003db0:	d514      	bpl.n	8003ddc <_printf_i+0x1ac>
 8003db2:	07df      	lsls	r7, r3, #31
 8003db4:	bf44      	itt	mi
 8003db6:	f043 0320 	orrmi.w	r3, r3, #32
 8003dba:	6023      	strmi	r3, [r4, #0]
 8003dbc:	b91e      	cbnz	r6, 8003dc6 <_printf_i+0x196>
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	f023 0320 	bic.w	r3, r3, #32
 8003dc4:	6023      	str	r3, [r4, #0]
 8003dc6:	2310      	movs	r3, #16
 8003dc8:	e7b0      	b.n	8003d2c <_printf_i+0xfc>
 8003dca:	6823      	ldr	r3, [r4, #0]
 8003dcc:	f043 0320 	orr.w	r3, r3, #32
 8003dd0:	6023      	str	r3, [r4, #0]
 8003dd2:	2378      	movs	r3, #120	; 0x78
 8003dd4:	4828      	ldr	r0, [pc, #160]	; (8003e78 <_printf_i+0x248>)
 8003dd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003dda:	e7e3      	b.n	8003da4 <_printf_i+0x174>
 8003ddc:	0659      	lsls	r1, r3, #25
 8003dde:	bf48      	it	mi
 8003de0:	b2b6      	uxthmi	r6, r6
 8003de2:	e7e6      	b.n	8003db2 <_printf_i+0x182>
 8003de4:	4615      	mov	r5, r2
 8003de6:	e7bb      	b.n	8003d60 <_printf_i+0x130>
 8003de8:	682b      	ldr	r3, [r5, #0]
 8003dea:	6826      	ldr	r6, [r4, #0]
 8003dec:	6961      	ldr	r1, [r4, #20]
 8003dee:	1d18      	adds	r0, r3, #4
 8003df0:	6028      	str	r0, [r5, #0]
 8003df2:	0635      	lsls	r5, r6, #24
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	d501      	bpl.n	8003dfc <_printf_i+0x1cc>
 8003df8:	6019      	str	r1, [r3, #0]
 8003dfa:	e002      	b.n	8003e02 <_printf_i+0x1d2>
 8003dfc:	0670      	lsls	r0, r6, #25
 8003dfe:	d5fb      	bpl.n	8003df8 <_printf_i+0x1c8>
 8003e00:	8019      	strh	r1, [r3, #0]
 8003e02:	2300      	movs	r3, #0
 8003e04:	6123      	str	r3, [r4, #16]
 8003e06:	4615      	mov	r5, r2
 8003e08:	e7ba      	b.n	8003d80 <_printf_i+0x150>
 8003e0a:	682b      	ldr	r3, [r5, #0]
 8003e0c:	1d1a      	adds	r2, r3, #4
 8003e0e:	602a      	str	r2, [r5, #0]
 8003e10:	681d      	ldr	r5, [r3, #0]
 8003e12:	6862      	ldr	r2, [r4, #4]
 8003e14:	2100      	movs	r1, #0
 8003e16:	4628      	mov	r0, r5
 8003e18:	f7fc f9e2 	bl	80001e0 <memchr>
 8003e1c:	b108      	cbz	r0, 8003e22 <_printf_i+0x1f2>
 8003e1e:	1b40      	subs	r0, r0, r5
 8003e20:	6060      	str	r0, [r4, #4]
 8003e22:	6863      	ldr	r3, [r4, #4]
 8003e24:	6123      	str	r3, [r4, #16]
 8003e26:	2300      	movs	r3, #0
 8003e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e2c:	e7a8      	b.n	8003d80 <_printf_i+0x150>
 8003e2e:	6923      	ldr	r3, [r4, #16]
 8003e30:	462a      	mov	r2, r5
 8003e32:	4649      	mov	r1, r9
 8003e34:	4640      	mov	r0, r8
 8003e36:	47d0      	blx	sl
 8003e38:	3001      	adds	r0, #1
 8003e3a:	d0ab      	beq.n	8003d94 <_printf_i+0x164>
 8003e3c:	6823      	ldr	r3, [r4, #0]
 8003e3e:	079b      	lsls	r3, r3, #30
 8003e40:	d413      	bmi.n	8003e6a <_printf_i+0x23a>
 8003e42:	68e0      	ldr	r0, [r4, #12]
 8003e44:	9b03      	ldr	r3, [sp, #12]
 8003e46:	4298      	cmp	r0, r3
 8003e48:	bfb8      	it	lt
 8003e4a:	4618      	movlt	r0, r3
 8003e4c:	e7a4      	b.n	8003d98 <_printf_i+0x168>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	4632      	mov	r2, r6
 8003e52:	4649      	mov	r1, r9
 8003e54:	4640      	mov	r0, r8
 8003e56:	47d0      	blx	sl
 8003e58:	3001      	adds	r0, #1
 8003e5a:	d09b      	beq.n	8003d94 <_printf_i+0x164>
 8003e5c:	3501      	adds	r5, #1
 8003e5e:	68e3      	ldr	r3, [r4, #12]
 8003e60:	9903      	ldr	r1, [sp, #12]
 8003e62:	1a5b      	subs	r3, r3, r1
 8003e64:	42ab      	cmp	r3, r5
 8003e66:	dcf2      	bgt.n	8003e4e <_printf_i+0x21e>
 8003e68:	e7eb      	b.n	8003e42 <_printf_i+0x212>
 8003e6a:	2500      	movs	r5, #0
 8003e6c:	f104 0619 	add.w	r6, r4, #25
 8003e70:	e7f5      	b.n	8003e5e <_printf_i+0x22e>
 8003e72:	bf00      	nop
 8003e74:	080041d9 	.word	0x080041d9
 8003e78:	080041ea 	.word	0x080041ea

08003e7c <memcpy>:
 8003e7c:	440a      	add	r2, r1
 8003e7e:	4291      	cmp	r1, r2
 8003e80:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e84:	d100      	bne.n	8003e88 <memcpy+0xc>
 8003e86:	4770      	bx	lr
 8003e88:	b510      	push	{r4, lr}
 8003e8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e92:	4291      	cmp	r1, r2
 8003e94:	d1f9      	bne.n	8003e8a <memcpy+0xe>
 8003e96:	bd10      	pop	{r4, pc}

08003e98 <memmove>:
 8003e98:	4288      	cmp	r0, r1
 8003e9a:	b510      	push	{r4, lr}
 8003e9c:	eb01 0402 	add.w	r4, r1, r2
 8003ea0:	d902      	bls.n	8003ea8 <memmove+0x10>
 8003ea2:	4284      	cmp	r4, r0
 8003ea4:	4623      	mov	r3, r4
 8003ea6:	d807      	bhi.n	8003eb8 <memmove+0x20>
 8003ea8:	1e43      	subs	r3, r0, #1
 8003eaa:	42a1      	cmp	r1, r4
 8003eac:	d008      	beq.n	8003ec0 <memmove+0x28>
 8003eae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003eb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003eb6:	e7f8      	b.n	8003eaa <memmove+0x12>
 8003eb8:	4402      	add	r2, r0
 8003eba:	4601      	mov	r1, r0
 8003ebc:	428a      	cmp	r2, r1
 8003ebe:	d100      	bne.n	8003ec2 <memmove+0x2a>
 8003ec0:	bd10      	pop	{r4, pc}
 8003ec2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ec6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003eca:	e7f7      	b.n	8003ebc <memmove+0x24>

08003ecc <_free_r>:
 8003ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ece:	2900      	cmp	r1, #0
 8003ed0:	d044      	beq.n	8003f5c <_free_r+0x90>
 8003ed2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ed6:	9001      	str	r0, [sp, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f1a1 0404 	sub.w	r4, r1, #4
 8003ede:	bfb8      	it	lt
 8003ee0:	18e4      	addlt	r4, r4, r3
 8003ee2:	f000 f913 	bl	800410c <__malloc_lock>
 8003ee6:	4a1e      	ldr	r2, [pc, #120]	; (8003f60 <_free_r+0x94>)
 8003ee8:	9801      	ldr	r0, [sp, #4]
 8003eea:	6813      	ldr	r3, [r2, #0]
 8003eec:	b933      	cbnz	r3, 8003efc <_free_r+0x30>
 8003eee:	6063      	str	r3, [r4, #4]
 8003ef0:	6014      	str	r4, [r2, #0]
 8003ef2:	b003      	add	sp, #12
 8003ef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ef8:	f000 b90e 	b.w	8004118 <__malloc_unlock>
 8003efc:	42a3      	cmp	r3, r4
 8003efe:	d908      	bls.n	8003f12 <_free_r+0x46>
 8003f00:	6825      	ldr	r5, [r4, #0]
 8003f02:	1961      	adds	r1, r4, r5
 8003f04:	428b      	cmp	r3, r1
 8003f06:	bf01      	itttt	eq
 8003f08:	6819      	ldreq	r1, [r3, #0]
 8003f0a:	685b      	ldreq	r3, [r3, #4]
 8003f0c:	1949      	addeq	r1, r1, r5
 8003f0e:	6021      	streq	r1, [r4, #0]
 8003f10:	e7ed      	b.n	8003eee <_free_r+0x22>
 8003f12:	461a      	mov	r2, r3
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	b10b      	cbz	r3, 8003f1c <_free_r+0x50>
 8003f18:	42a3      	cmp	r3, r4
 8003f1a:	d9fa      	bls.n	8003f12 <_free_r+0x46>
 8003f1c:	6811      	ldr	r1, [r2, #0]
 8003f1e:	1855      	adds	r5, r2, r1
 8003f20:	42a5      	cmp	r5, r4
 8003f22:	d10b      	bne.n	8003f3c <_free_r+0x70>
 8003f24:	6824      	ldr	r4, [r4, #0]
 8003f26:	4421      	add	r1, r4
 8003f28:	1854      	adds	r4, r2, r1
 8003f2a:	42a3      	cmp	r3, r4
 8003f2c:	6011      	str	r1, [r2, #0]
 8003f2e:	d1e0      	bne.n	8003ef2 <_free_r+0x26>
 8003f30:	681c      	ldr	r4, [r3, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	6053      	str	r3, [r2, #4]
 8003f36:	4421      	add	r1, r4
 8003f38:	6011      	str	r1, [r2, #0]
 8003f3a:	e7da      	b.n	8003ef2 <_free_r+0x26>
 8003f3c:	d902      	bls.n	8003f44 <_free_r+0x78>
 8003f3e:	230c      	movs	r3, #12
 8003f40:	6003      	str	r3, [r0, #0]
 8003f42:	e7d6      	b.n	8003ef2 <_free_r+0x26>
 8003f44:	6825      	ldr	r5, [r4, #0]
 8003f46:	1961      	adds	r1, r4, r5
 8003f48:	428b      	cmp	r3, r1
 8003f4a:	bf04      	itt	eq
 8003f4c:	6819      	ldreq	r1, [r3, #0]
 8003f4e:	685b      	ldreq	r3, [r3, #4]
 8003f50:	6063      	str	r3, [r4, #4]
 8003f52:	bf04      	itt	eq
 8003f54:	1949      	addeq	r1, r1, r5
 8003f56:	6021      	streq	r1, [r4, #0]
 8003f58:	6054      	str	r4, [r2, #4]
 8003f5a:	e7ca      	b.n	8003ef2 <_free_r+0x26>
 8003f5c:	b003      	add	sp, #12
 8003f5e:	bd30      	pop	{r4, r5, pc}
 8003f60:	20000174 	.word	0x20000174

08003f64 <sbrk_aligned>:
 8003f64:	b570      	push	{r4, r5, r6, lr}
 8003f66:	4e0e      	ldr	r6, [pc, #56]	; (8003fa0 <sbrk_aligned+0x3c>)
 8003f68:	460c      	mov	r4, r1
 8003f6a:	6831      	ldr	r1, [r6, #0]
 8003f6c:	4605      	mov	r5, r0
 8003f6e:	b911      	cbnz	r1, 8003f76 <sbrk_aligned+0x12>
 8003f70:	f000 f8bc 	bl	80040ec <_sbrk_r>
 8003f74:	6030      	str	r0, [r6, #0]
 8003f76:	4621      	mov	r1, r4
 8003f78:	4628      	mov	r0, r5
 8003f7a:	f000 f8b7 	bl	80040ec <_sbrk_r>
 8003f7e:	1c43      	adds	r3, r0, #1
 8003f80:	d00a      	beq.n	8003f98 <sbrk_aligned+0x34>
 8003f82:	1cc4      	adds	r4, r0, #3
 8003f84:	f024 0403 	bic.w	r4, r4, #3
 8003f88:	42a0      	cmp	r0, r4
 8003f8a:	d007      	beq.n	8003f9c <sbrk_aligned+0x38>
 8003f8c:	1a21      	subs	r1, r4, r0
 8003f8e:	4628      	mov	r0, r5
 8003f90:	f000 f8ac 	bl	80040ec <_sbrk_r>
 8003f94:	3001      	adds	r0, #1
 8003f96:	d101      	bne.n	8003f9c <sbrk_aligned+0x38>
 8003f98:	f04f 34ff 	mov.w	r4, #4294967295
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	bd70      	pop	{r4, r5, r6, pc}
 8003fa0:	20000178 	.word	0x20000178

08003fa4 <_malloc_r>:
 8003fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fa8:	1ccd      	adds	r5, r1, #3
 8003faa:	f025 0503 	bic.w	r5, r5, #3
 8003fae:	3508      	adds	r5, #8
 8003fb0:	2d0c      	cmp	r5, #12
 8003fb2:	bf38      	it	cc
 8003fb4:	250c      	movcc	r5, #12
 8003fb6:	2d00      	cmp	r5, #0
 8003fb8:	4607      	mov	r7, r0
 8003fba:	db01      	blt.n	8003fc0 <_malloc_r+0x1c>
 8003fbc:	42a9      	cmp	r1, r5
 8003fbe:	d905      	bls.n	8003fcc <_malloc_r+0x28>
 8003fc0:	230c      	movs	r3, #12
 8003fc2:	603b      	str	r3, [r7, #0]
 8003fc4:	2600      	movs	r6, #0
 8003fc6:	4630      	mov	r0, r6
 8003fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fcc:	4e2e      	ldr	r6, [pc, #184]	; (8004088 <_malloc_r+0xe4>)
 8003fce:	f000 f89d 	bl	800410c <__malloc_lock>
 8003fd2:	6833      	ldr	r3, [r6, #0]
 8003fd4:	461c      	mov	r4, r3
 8003fd6:	bb34      	cbnz	r4, 8004026 <_malloc_r+0x82>
 8003fd8:	4629      	mov	r1, r5
 8003fda:	4638      	mov	r0, r7
 8003fdc:	f7ff ffc2 	bl	8003f64 <sbrk_aligned>
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	4604      	mov	r4, r0
 8003fe4:	d14d      	bne.n	8004082 <_malloc_r+0xde>
 8003fe6:	6834      	ldr	r4, [r6, #0]
 8003fe8:	4626      	mov	r6, r4
 8003fea:	2e00      	cmp	r6, #0
 8003fec:	d140      	bne.n	8004070 <_malloc_r+0xcc>
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	4631      	mov	r1, r6
 8003ff2:	4638      	mov	r0, r7
 8003ff4:	eb04 0803 	add.w	r8, r4, r3
 8003ff8:	f000 f878 	bl	80040ec <_sbrk_r>
 8003ffc:	4580      	cmp	r8, r0
 8003ffe:	d13a      	bne.n	8004076 <_malloc_r+0xd2>
 8004000:	6821      	ldr	r1, [r4, #0]
 8004002:	3503      	adds	r5, #3
 8004004:	1a6d      	subs	r5, r5, r1
 8004006:	f025 0503 	bic.w	r5, r5, #3
 800400a:	3508      	adds	r5, #8
 800400c:	2d0c      	cmp	r5, #12
 800400e:	bf38      	it	cc
 8004010:	250c      	movcc	r5, #12
 8004012:	4629      	mov	r1, r5
 8004014:	4638      	mov	r0, r7
 8004016:	f7ff ffa5 	bl	8003f64 <sbrk_aligned>
 800401a:	3001      	adds	r0, #1
 800401c:	d02b      	beq.n	8004076 <_malloc_r+0xd2>
 800401e:	6823      	ldr	r3, [r4, #0]
 8004020:	442b      	add	r3, r5
 8004022:	6023      	str	r3, [r4, #0]
 8004024:	e00e      	b.n	8004044 <_malloc_r+0xa0>
 8004026:	6822      	ldr	r2, [r4, #0]
 8004028:	1b52      	subs	r2, r2, r5
 800402a:	d41e      	bmi.n	800406a <_malloc_r+0xc6>
 800402c:	2a0b      	cmp	r2, #11
 800402e:	d916      	bls.n	800405e <_malloc_r+0xba>
 8004030:	1961      	adds	r1, r4, r5
 8004032:	42a3      	cmp	r3, r4
 8004034:	6025      	str	r5, [r4, #0]
 8004036:	bf18      	it	ne
 8004038:	6059      	strne	r1, [r3, #4]
 800403a:	6863      	ldr	r3, [r4, #4]
 800403c:	bf08      	it	eq
 800403e:	6031      	streq	r1, [r6, #0]
 8004040:	5162      	str	r2, [r4, r5]
 8004042:	604b      	str	r3, [r1, #4]
 8004044:	4638      	mov	r0, r7
 8004046:	f104 060b 	add.w	r6, r4, #11
 800404a:	f000 f865 	bl	8004118 <__malloc_unlock>
 800404e:	f026 0607 	bic.w	r6, r6, #7
 8004052:	1d23      	adds	r3, r4, #4
 8004054:	1af2      	subs	r2, r6, r3
 8004056:	d0b6      	beq.n	8003fc6 <_malloc_r+0x22>
 8004058:	1b9b      	subs	r3, r3, r6
 800405a:	50a3      	str	r3, [r4, r2]
 800405c:	e7b3      	b.n	8003fc6 <_malloc_r+0x22>
 800405e:	6862      	ldr	r2, [r4, #4]
 8004060:	42a3      	cmp	r3, r4
 8004062:	bf0c      	ite	eq
 8004064:	6032      	streq	r2, [r6, #0]
 8004066:	605a      	strne	r2, [r3, #4]
 8004068:	e7ec      	b.n	8004044 <_malloc_r+0xa0>
 800406a:	4623      	mov	r3, r4
 800406c:	6864      	ldr	r4, [r4, #4]
 800406e:	e7b2      	b.n	8003fd6 <_malloc_r+0x32>
 8004070:	4634      	mov	r4, r6
 8004072:	6876      	ldr	r6, [r6, #4]
 8004074:	e7b9      	b.n	8003fea <_malloc_r+0x46>
 8004076:	230c      	movs	r3, #12
 8004078:	603b      	str	r3, [r7, #0]
 800407a:	4638      	mov	r0, r7
 800407c:	f000 f84c 	bl	8004118 <__malloc_unlock>
 8004080:	e7a1      	b.n	8003fc6 <_malloc_r+0x22>
 8004082:	6025      	str	r5, [r4, #0]
 8004084:	e7de      	b.n	8004044 <_malloc_r+0xa0>
 8004086:	bf00      	nop
 8004088:	20000174 	.word	0x20000174

0800408c <_realloc_r>:
 800408c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004090:	4680      	mov	r8, r0
 8004092:	4614      	mov	r4, r2
 8004094:	460e      	mov	r6, r1
 8004096:	b921      	cbnz	r1, 80040a2 <_realloc_r+0x16>
 8004098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800409c:	4611      	mov	r1, r2
 800409e:	f7ff bf81 	b.w	8003fa4 <_malloc_r>
 80040a2:	b92a      	cbnz	r2, 80040b0 <_realloc_r+0x24>
 80040a4:	f7ff ff12 	bl	8003ecc <_free_r>
 80040a8:	4625      	mov	r5, r4
 80040aa:	4628      	mov	r0, r5
 80040ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040b0:	f000 f838 	bl	8004124 <_malloc_usable_size_r>
 80040b4:	4284      	cmp	r4, r0
 80040b6:	4607      	mov	r7, r0
 80040b8:	d802      	bhi.n	80040c0 <_realloc_r+0x34>
 80040ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80040be:	d812      	bhi.n	80040e6 <_realloc_r+0x5a>
 80040c0:	4621      	mov	r1, r4
 80040c2:	4640      	mov	r0, r8
 80040c4:	f7ff ff6e 	bl	8003fa4 <_malloc_r>
 80040c8:	4605      	mov	r5, r0
 80040ca:	2800      	cmp	r0, #0
 80040cc:	d0ed      	beq.n	80040aa <_realloc_r+0x1e>
 80040ce:	42bc      	cmp	r4, r7
 80040d0:	4622      	mov	r2, r4
 80040d2:	4631      	mov	r1, r6
 80040d4:	bf28      	it	cs
 80040d6:	463a      	movcs	r2, r7
 80040d8:	f7ff fed0 	bl	8003e7c <memcpy>
 80040dc:	4631      	mov	r1, r6
 80040de:	4640      	mov	r0, r8
 80040e0:	f7ff fef4 	bl	8003ecc <_free_r>
 80040e4:	e7e1      	b.n	80040aa <_realloc_r+0x1e>
 80040e6:	4635      	mov	r5, r6
 80040e8:	e7df      	b.n	80040aa <_realloc_r+0x1e>
	...

080040ec <_sbrk_r>:
 80040ec:	b538      	push	{r3, r4, r5, lr}
 80040ee:	4d06      	ldr	r5, [pc, #24]	; (8004108 <_sbrk_r+0x1c>)
 80040f0:	2300      	movs	r3, #0
 80040f2:	4604      	mov	r4, r0
 80040f4:	4608      	mov	r0, r1
 80040f6:	602b      	str	r3, [r5, #0]
 80040f8:	f7fc fc46 	bl	8000988 <_sbrk>
 80040fc:	1c43      	adds	r3, r0, #1
 80040fe:	d102      	bne.n	8004106 <_sbrk_r+0x1a>
 8004100:	682b      	ldr	r3, [r5, #0]
 8004102:	b103      	cbz	r3, 8004106 <_sbrk_r+0x1a>
 8004104:	6023      	str	r3, [r4, #0]
 8004106:	bd38      	pop	{r3, r4, r5, pc}
 8004108:	2000017c 	.word	0x2000017c

0800410c <__malloc_lock>:
 800410c:	4801      	ldr	r0, [pc, #4]	; (8004114 <__malloc_lock+0x8>)
 800410e:	f000 b811 	b.w	8004134 <__retarget_lock_acquire_recursive>
 8004112:	bf00      	nop
 8004114:	20000180 	.word	0x20000180

08004118 <__malloc_unlock>:
 8004118:	4801      	ldr	r0, [pc, #4]	; (8004120 <__malloc_unlock+0x8>)
 800411a:	f000 b80c 	b.w	8004136 <__retarget_lock_release_recursive>
 800411e:	bf00      	nop
 8004120:	20000180 	.word	0x20000180

08004124 <_malloc_usable_size_r>:
 8004124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004128:	1f18      	subs	r0, r3, #4
 800412a:	2b00      	cmp	r3, #0
 800412c:	bfbc      	itt	lt
 800412e:	580b      	ldrlt	r3, [r1, r0]
 8004130:	18c0      	addlt	r0, r0, r3
 8004132:	4770      	bx	lr

08004134 <__retarget_lock_acquire_recursive>:
 8004134:	4770      	bx	lr

08004136 <__retarget_lock_release_recursive>:
 8004136:	4770      	bx	lr

08004138 <_init>:
 8004138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413a:	bf00      	nop
 800413c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413e:	bc08      	pop	{r3}
 8004140:	469e      	mov	lr, r3
 8004142:	4770      	bx	lr

08004144 <_fini>:
 8004144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004146:	bf00      	nop
 8004148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800414a:	bc08      	pop	{r3}
 800414c:	469e      	mov	lr, r3
 800414e:	4770      	bx	lr
