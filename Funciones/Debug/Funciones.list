
Funciones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000445c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  080045e8  080045e8  000145e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047f8  080047f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080047f8  080047f8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047f8  080047f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047f8  080047f8  000147f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047fc  080047fc  000147fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  0800480c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  0800480c  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008dc2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000142f  00000000  00000000  00028dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000688  00000000  00000000  0002a230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000610  00000000  00000000  0002a8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac9e  00000000  00000000  0002aec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008df1  00000000  00000000  00045b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c87d  00000000  00000000  0004e957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb1d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d54  00000000  00000000  000eb224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080045cc 	.word	0x080045cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080045cc 	.word	0x080045cc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	0000      	movs	r0, r0
	...

08000b68 <generateSquareWave>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void generateSquareWave(int amp, int freq, uint8_t Y_shift, int gdh)
{
 8000b68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000b6c:	b08c      	sub	sp, #48	; 0x30
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	60f8      	str	r0, [r7, #12]
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	4613      	mov	r3, r2
 8000b78:	71fb      	strb	r3, [r7, #7]
    float value;
    int a = amp * gdh;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	683a      	ldr	r2, [r7, #0]
 8000b7e:	fb02 f303 	mul.w	r3, r2, r3
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28
    int b = freq;
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
    int ns = 100;
 8000b88:	2364      	movs	r3, #100	; 0x64
 8000b8a:	623b      	str	r3, [r7, #32]

    for (int t = 0; t < ns; t++)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b90:	e082      	b.n	8000c98 <generateSquareWave+0x130>
    {
        value = a * sin((b * t * 2 * M_PI) / (float)ns);
 8000b92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b94:	f7ff fc6a 	bl	800046c <__aeabi_i2d>
 8000b98:	4604      	mov	r4, r0
 8000b9a:	460d      	mov	r5, r1
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ba0:	fb02 f303 	mul.w	r3, r2, r3
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fc60 	bl	800046c <__aeabi_i2d>
 8000bac:	a340      	add	r3, pc, #256	; (adr r3, 8000cb0 <generateSquareWave+0x148>)
 8000bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb2:	f7ff fcc5 	bl	8000540 <__aeabi_dmul>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	460b      	mov	r3, r1
 8000bba:	4690      	mov	r8, r2
 8000bbc:	4699      	mov	r9, r3
 8000bbe:	6a3b      	ldr	r3, [r7, #32]
 8000bc0:	ee07 3a90 	vmov	s15, r3
 8000bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bc8:	ee17 0a90 	vmov	r0, s15
 8000bcc:	f7ff fc60 	bl	8000490 <__aeabi_f2d>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	4640      	mov	r0, r8
 8000bd6:	4649      	mov	r1, r9
 8000bd8:	f7ff fddc 	bl	8000794 <__aeabi_ddiv>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	460b      	mov	r3, r1
 8000be0:	ec43 2b17 	vmov	d7, r2, r3
 8000be4:	eeb0 0a47 	vmov.f32	s0, s14
 8000be8:	eef0 0a67 	vmov.f32	s1, s15
 8000bec:	f002 fca4 	bl	8003538 <sin>
 8000bf0:	ec53 2b10 	vmov	r2, r3, d0
 8000bf4:	4620      	mov	r0, r4
 8000bf6:	4629      	mov	r1, r5
 8000bf8:	f7ff fca2 	bl	8000540 <__aeabi_dmul>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	460b      	mov	r3, r1
 8000c00:	4610      	mov	r0, r2
 8000c02:	4619      	mov	r1, r3
 8000c04:	f7ff ff5e 	bl	8000ac4 <__aeabi_d2f>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	61fb      	str	r3, [r7, #28]
        value = value > 0 ? a : -a;
 8000c0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c18:	dd05      	ble.n	8000c26 <generateSquareWave+0xbe>
 8000c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c1c:	ee07 3a90 	vmov	s15, r3
 8000c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c24:	e005      	b.n	8000c32 <generateSquareWave+0xca>
 8000c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c28:	425b      	negs	r3, r3
 8000c2a:	ee07 3a90 	vmov	s15, r3
 8000c2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c32:	edc7 7a07 	vstr	s15, [r7, #28]
        value += (127 + Y_shift * gdh);
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	683a      	ldr	r2, [r7, #0]
 8000c3a:	fb02 f303 	mul.w	r3, r2, r3
 8000c3e:	337f      	adds	r3, #127	; 0x7f
 8000c40:	ee07 3a90 	vmov	s15, r3
 8000c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c48:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c50:	edc7 7a07 	vstr	s15, [r7, #28]

        // Mapear el valor a los píxeles de la matriz LED
        int pixelValue = (int)value;
 8000c54:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c5c:	ee17 3a90 	vmov	r3, s15
 8000c60:	61bb      	str	r3, [r7, #24]
        int row = t % 8;
 8000c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c64:	425a      	negs	r2, r3
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	f002 0207 	and.w	r2, r2, #7
 8000c6e:	bf58      	it	pl
 8000c70:	4253      	negpl	r3, r2
 8000c72:	617b      	str	r3, [r7, #20]
        int column = t / 8;
 8000c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	da00      	bge.n	8000c7c <generateSquareWave+0x114>
 8000c7a:	3307      	adds	r3, #7
 8000c7c:	10db      	asrs	r3, r3, #3
 8000c7e:	613b      	str	r3, [r7, #16]
        // Actualizar el valor del píxel en la matriz LED utilizando la función setled
        setled(row, column, pixelValue);
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	b2d1      	uxtb	r1, r2
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 f96b 	bl	8000f68 <setled>
    for (int t = 0; t < ns; t++)
 8000c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c94:	3301      	adds	r3, #1
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c9a:	6a3b      	ldr	r3, [r7, #32]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	f6ff af78 	blt.w	8000b92 <generateSquareWave+0x2a>
    }
}
 8000ca2:	bf00      	nop
 8000ca4:	bf00      	nop
 8000ca6:	3730      	adds	r7, #48	; 0x30
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000cae:	bf00      	nop
 8000cb0:	54442d18 	.word	0x54442d18
 8000cb4:	400921fb 	.word	0x400921fb

08000cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cbc:	f000 fb2c 	bl	8001318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc0:	f000 f80e 	bl	8000ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc4:	f000 f882 	bl	8000dcc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cc8:	f000 f850 	bl	8000d6c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
max_init(0x03);
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f000 fa37 	bl	8001140 <max_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
generateSquareWave(5, 10, 2, 10);
 8000cd2:	230a      	movs	r3, #10
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	210a      	movs	r1, #10
 8000cd8:	2005      	movs	r0, #5
 8000cda:	f7ff ff45 	bl	8000b68 <generateSquareWave>
 8000cde:	e7f8      	b.n	8000cd2 <main+0x1a>

08000ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b090      	sub	sp, #64	; 0x40
 8000ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce6:	f107 0318 	add.w	r3, r7, #24
 8000cea:	2228      	movs	r2, #40	; 0x28
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f002 fc1a 	bl	8003528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d02:	2301      	movs	r3, #1
 8000d04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d10:	2301      	movs	r3, #1
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d14:	2302      	movs	r3, #2
 8000d16:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d1e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d24:	f107 0318 	add.w	r3, r7, #24
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 fdcb 	bl	80018c4 <HAL_RCC_OscConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d34:	f000 f8b2 	bl	8000e9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d38:	230f      	movs	r3, #15
 8000d3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2102      	movs	r1, #2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f001 fdf4 	bl	8002940 <HAL_RCC_ClockConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d5e:	f000 f89d 	bl	8000e9c <Error_Handler>
  }
}
 8000d62:	bf00      	nop
 8000d64:	3740      	adds	r7, #64	; 0x40
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000d72:	4a15      	ldr	r2, [pc, #84]	; (8000dc8 <MX_USART2_UART_Init+0x5c>)
 8000d74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000d76:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000d78:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000d7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000d92:	220c      	movs	r2, #12
 8000d94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_USART2_UART_Init+0x58>)
 8000db0:	f001 fffc 	bl	8002dac <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dba:	f000 f86f 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000028 	.word	0x20000028
 8000dc8:	40004400 	.word	0x40004400

08000dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de2:	4b2b      	ldr	r3, [pc, #172]	; (8000e90 <MX_GPIO_Init+0xc4>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	4a2a      	ldr	r2, [pc, #168]	; (8000e90 <MX_GPIO_Init+0xc4>)
 8000de8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dec:	6153      	str	r3, [r2, #20]
 8000dee:	4b28      	ldr	r3, [pc, #160]	; (8000e90 <MX_GPIO_Init+0xc4>)
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dfa:	4b25      	ldr	r3, [pc, #148]	; (8000e90 <MX_GPIO_Init+0xc4>)
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	4a24      	ldr	r2, [pc, #144]	; (8000e90 <MX_GPIO_Init+0xc4>)
 8000e00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e04:	6153      	str	r3, [r2, #20]
 8000e06:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <MX_GPIO_Init+0xc4>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <MX_GPIO_Init+0xc4>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	4a1e      	ldr	r2, [pc, #120]	; (8000e90 <MX_GPIO_Init+0xc4>)
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1c:	6153      	str	r3, [r2, #20]
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <MX_GPIO_Init+0xc4>)
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <MX_GPIO_Init+0xc4>)
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	4a18      	ldr	r2, [pc, #96]	; (8000e90 <MX_GPIO_Init+0xc4>)
 8000e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e34:	6153      	str	r3, [r2, #20]
 8000e36:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <MX_GPIO_Init+0xc4>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f24e 0140 	movw	r1, #57408	; 0xe040
 8000e48:	4812      	ldr	r0, [pc, #72]	; (8000e94 <MX_GPIO_Init+0xc8>)
 8000e4a:	f000 fd23 	bl	8001894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e54:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	480c      	ldr	r0, [pc, #48]	; (8000e98 <MX_GPIO_Init+0xcc>)
 8000e66:	f000 fba3 	bl	80015b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PB14 PB15 PB6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6;
 8000e6a:	f24e 0340 	movw	r3, #57408	; 0xe040
 8000e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e70:	2301      	movs	r3, #1
 8000e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	4804      	ldr	r0, [pc, #16]	; (8000e94 <MX_GPIO_Init+0xc8>)
 8000e84:	f000 fb94 	bl	80015b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e88:	bf00      	nop
 8000e8a:	3728      	adds	r7, #40	; 0x28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40021000 	.word	0x40021000
 8000e94:	48000400 	.word	0x48000400
 8000e98:	48000800 	.word	0x48000800

08000e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea0:	b672      	cpsid	i
}
 8000ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <Error_Handler+0x8>
	...

08000ea8 <write_byte>:
};



void write_byte (uint8_t byte)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	e01a      	b.n	8000eee <write_byte+0x46>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ebe:	4810      	ldr	r0, [pc, #64]	; (8000f00 <write_byte+0x58>)
 8000ec0:	f000 fce8 	bl	8001894 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	461a      	mov	r2, r3
 8000ece:	2140      	movs	r1, #64	; 0x40
 8000ed0:	480b      	ldr	r0, [pc, #44]	; (8000f00 <write_byte+0x58>)
 8000ed2:	f000 fcdf 	bl	8001894 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 8000edc:	2201      	movs	r2, #1
 8000ede:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ee2:	4807      	ldr	r0, [pc, #28]	; (8000f00 <write_byte+0x58>)
 8000ee4:	f000 fcd6 	bl	8001894 <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	3301      	adds	r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2b07      	cmp	r3, #7
 8000ef2:	dde1      	ble.n	8000eb8 <write_byte+0x10>
	}
}
 8000ef4:	bf00      	nop
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	48000400 	.word	0x48000400

08000f04 <write_max_cmd>:


void write_max_cmd (uint8_t address, uint8_t cmd)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	460a      	mov	r2, r1
 8000f0e:	71fb      	strb	r3, [r7, #7]
 8000f10:	4613      	mov	r3, r2
 8000f12:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f1a:	4812      	ldr	r0, [pc, #72]	; (8000f64 <write_max_cmd+0x60>)
 8000f1c:	f000 fcba 	bl	8001894 <HAL_GPIO_WritePin>
	for (int i=0;i<num; i++)
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	e00a      	b.n	8000f3c <write_max_cmd+0x38>
	{
		write_byte (address);
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ffbd 	bl	8000ea8 <write_byte>
		write_byte (cmd); 
 8000f2e:	79bb      	ldrb	r3, [r7, #6]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ffb9 	bl	8000ea8 <write_byte>
	for (int i=0;i<num; i++)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	ddf1      	ble.n	8000f26 <write_max_cmd+0x22>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8000f42:	2200      	movs	r2, #0
 8000f44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f48:	4806      	ldr	r0, [pc, #24]	; (8000f64 <write_max_cmd+0x60>)
 8000f4a:	f000 fca3 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <write_max_cmd+0x60>)
 8000f56:	f000 fc9d 	bl	8001894 <HAL_GPIO_WritePin>
}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	48000400 	.word	0x48000400

08000f68 <setled>:


void setled(uint8_t row, uint8_t col, uint8_t value)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
 8000f72:	460b      	mov	r3, r1
 8000f74:	71bb      	strb	r3, [r7, #6]
 8000f76:	4613      	mov	r3, r2
 8000f78:	717b      	strb	r3, [r7, #5]
  bitWrite(buffer[col], row, value);
 8000f7a:	797b      	ldrb	r3, [r7, #5]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00d      	beq.n	8000f9c <setled+0x34>
 8000f80:	79bb      	ldrb	r3, [r7, #6]
 8000f82:	4a2e      	ldr	r2, [pc, #184]	; (800103c <setled+0xd4>)
 8000f84:	5cd1      	ldrb	r1, [r2, r3]
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2201      	movs	r2, #1
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	79bb      	ldrb	r3, [r7, #6]
 8000f92:	430a      	orrs	r2, r1
 8000f94:	b2d1      	uxtb	r1, r2
 8000f96:	4a29      	ldr	r2, [pc, #164]	; (800103c <setled+0xd4>)
 8000f98:	54d1      	strb	r1, [r2, r3]
 8000f9a:	e00e      	b.n	8000fba <setled+0x52>
 8000f9c:	79bb      	ldrb	r3, [r7, #6]
 8000f9e:	4a27      	ldr	r2, [pc, #156]	; (800103c <setled+0xd4>)
 8000fa0:	5cd1      	ldrb	r1, [r2, r3]
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	400a      	ands	r2, r1
 8000fb4:	b2d1      	uxtb	r1, r2
 8000fb6:	4a21      	ldr	r2, [pc, #132]	; (800103c <setled+0xd4>)
 8000fb8:	54d1      	strb	r1, [r2, r3]

	int n = col / 8;
 8000fba:	79bb      	ldrb	r3, [r7, #6]
 8000fbc:	08db      	lsrs	r3, r3, #3
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	613b      	str	r3, [r7, #16]
	int c = col % 8;
 8000fc2:	79bb      	ldrb	r3, [r7, #6]
 8000fc4:	f003 0307 	and.w	r3, r3, #7
 8000fc8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW    
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd0:	481b      	ldr	r0, [pc, #108]	; (8001040 <setled+0xd8>)
 8000fd2:	f000 fc5f 	bl	8001894 <HAL_GPIO_WritePin>
	for (int i=0; i<num; i++) 
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	e01b      	b.n	8001014 <setled+0xac>
	{
		if (i == (num-(n+1)))
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	425b      	negs	r3, r3
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d10d      	bne.n	8001002 <setled+0x9a>
		{
			write_byte (((c+1)));
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	3301      	adds	r3, #1
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff5a 	bl	8000ea8 <write_byte>
			write_byte (buffer[col]);
 8000ff4:	79bb      	ldrb	r3, [r7, #6]
 8000ff6:	4a11      	ldr	r2, [pc, #68]	; (800103c <setled+0xd4>)
 8000ff8:	5cd3      	ldrb	r3, [r2, r3]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ff54 	bl	8000ea8 <write_byte>
 8001000:	e005      	b.n	800100e <setled+0xa6>
		}
		else
		{
			write_byte (0);
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff ff50 	bl	8000ea8 <write_byte>
			write_byte (0);
 8001008:	2000      	movs	r0, #0
 800100a:	f7ff ff4d 	bl	8000ea8 <write_byte>
	for (int i=0; i<num; i++) 
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3301      	adds	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	2b00      	cmp	r3, #0
 8001018:	dde0      	ble.n	8000fdc <setled+0x74>
		}
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW 
 800101a:	2200      	movs	r2, #0
 800101c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001020:	4807      	ldr	r0, [pc, #28]	; (8001040 <setled+0xd8>)
 8001022:	f000 fc37 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH 
 8001026:	2201      	movs	r2, #1
 8001028:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <setled+0xd8>)
 800102e:	f000 fc31 	bl	8001894 <HAL_GPIO_WritePin>
}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200000b0 	.word	0x200000b0
 8001040:	48000400 	.word	0x48000400

08001044 <setrow>:


void setrow(uint8_t row, uint8_t value)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	460a      	mov	r2, r1
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	4613      	mov	r3, r2
 8001052:	71bb      	strb	r3, [r7, #6]
	int n = row / 8;
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	08db      	lsrs	r3, r3, #3
 8001058:	b2db      	uxtb	r3, r3
 800105a:	617b      	str	r3, [r7, #20]
	int r = row % 8;
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	613b      	str	r3, [r7, #16]
	
	uint8_t store = value;
 8001064:	79bb      	ldrb	r3, [r7, #6]
 8001066:	73fb      	strb	r3, [r7, #15]
	for (int i=0; i<num; i++) 
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
 800106c:	e02d      	b.n	80010ca <setrow+0x86>
	{
		if (i == ((n)))
 800106e:	69fa      	ldr	r2, [r7, #28]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	429a      	cmp	r2, r3
 8001074:	d120      	bne.n	80010b8 <setrow+0x74>
		{
//			for (int col=0+(8*n); col<8+(8*n); col++)  // uncomment this if the character looks inverted about X axis
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	3307      	adds	r3, #7
 800107c:	61bb      	str	r3, [r7, #24]
 800107e:	e015      	b.n	80010ac <setrow+0x68>
			{
				bool b = value&0x80;
 8001080:	79bb      	ldrb	r3, [r7, #6]
 8001082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001086:	2b00      	cmp	r3, #0
 8001088:	bf14      	ite	ne
 800108a:	2301      	movne	r3, #1
 800108c:	2300      	moveq	r3, #0
 800108e:	73bb      	strb	r3, [r7, #14]
				setled (r, col, b);
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	b2d1      	uxtb	r1, r2
 8001098:	7bba      	ldrb	r2, [r7, #14]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff64 	bl	8000f68 <setled>
				value<<=1;
 80010a0:	79bb      	ldrb	r3, [r7, #6]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	71bb      	strb	r3, [r7, #6]
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	61bb      	str	r3, [r7, #24]
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	dae4      	bge.n	8001080 <setrow+0x3c>
 80010b6:	e005      	b.n	80010c4 <setrow+0x80>
			}
		}
		else
		{
			write_byte (0);
 80010b8:	2000      	movs	r0, #0
 80010ba:	f7ff fef5 	bl	8000ea8 <write_byte>
			write_byte (0);
 80010be:	2000      	movs	r0, #0
 80010c0:	f7ff fef2 	bl	8000ea8 <write_byte>
	for (int i=0; i<num; i++) 
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	3301      	adds	r3, #1
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	ddce      	ble.n	800106e <setrow+0x2a>
		}
	}
	buffer_row[row] = store;
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	4903      	ldr	r1, [pc, #12]	; (80010e0 <setrow+0x9c>)
 80010d4:	7bfa      	ldrb	r2, [r7, #15]
 80010d6:	54ca      	strb	r2, [r1, r3]
}
 80010d8:	bf00      	nop
 80010da:	3720      	adds	r7, #32
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000100 	.word	0x20000100

080010e4 <max_clear>:
}



void max_clear(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
	for (int i=0; i<num*8; i++) 
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	e008      	b.n	8001102 <max_clear+0x1e>
		setrow(i,0);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ffa4 	bl	8001044 <setrow>
	for (int i=0; i<num*8; i++) 
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3301      	adds	r3, #1
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b07      	cmp	r3, #7
 8001106:	ddf3      	ble.n	80010f0 <max_clear+0xc>
		
	for (int i=0; i<80; i++)
 8001108:	2300      	movs	r3, #0
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	e00c      	b.n	8001128 <max_clear+0x44>
	{
		buffer[i] = 0;
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <max_clear+0x54>)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	4413      	add	r3, r2
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
	  buffer_row[i] = 0;
 8001118:	4a08      	ldr	r2, [pc, #32]	; (800113c <max_clear+0x58>)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	4413      	add	r3, r2
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	2b4f      	cmp	r3, #79	; 0x4f
 800112c:	ddef      	ble.n	800110e <max_clear+0x2a>
	}
}
 800112e:	bf00      	nop
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200000b0 	.word	0x200000b0
 800113c:	20000100 	.word	0x20000100

08001140 <max_init>:
}



void max_init (uint8_t brightness)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
	write_max_cmd(0x09, 0x00);       //  no decoding
 800114a:	2100      	movs	r1, #0
 800114c:	2009      	movs	r0, #9
 800114e:	f7ff fed9 	bl	8000f04 <write_max_cmd>
	write_max_cmd(0x0b, 0x07);       //  scan limit = 8 LEDs
 8001152:	2107      	movs	r1, #7
 8001154:	200b      	movs	r0, #11
 8001156:	f7ff fed5 	bl	8000f04 <write_max_cmd>
	write_max_cmd(0x0c, 0x01);       //  power down =0,normal mode = 1
 800115a:	2101      	movs	r1, #1
 800115c:	200c      	movs	r0, #12
 800115e:	f7ff fed1 	bl	8000f04 <write_max_cmd>
	write_max_cmd(0x0f, 0x00);       //  no test display
 8001162:	2100      	movs	r1, #0
 8001164:	200f      	movs	r0, #15
 8001166:	f7ff fecd 	bl	8000f04 <write_max_cmd>
	
	max_clear ();
 800116a:	f7ff ffbb 	bl	80010e4 <max_clear>
	
	write_max_cmd(0x0a, brightness);       //  brightness intensity
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	4619      	mov	r1, r3
 8001172:	200a      	movs	r0, #10
 8001174:	f7ff fec6 	bl	8000f04 <write_max_cmd>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001186:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <HAL_MspInit+0x44>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	4a0e      	ldr	r2, [pc, #56]	; (80011c4 <HAL_MspInit+0x44>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6193      	str	r3, [r2, #24]
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <HAL_MspInit+0x44>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <HAL_MspInit+0x44>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	4a08      	ldr	r2, [pc, #32]	; (80011c4 <HAL_MspInit+0x44>)
 80011a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a8:	61d3      	str	r3, [r2, #28]
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_MspInit+0x44>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011b6:	2007      	movs	r0, #7
 80011b8:	f000 f9c6 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40021000 	.word	0x40021000

080011c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a17      	ldr	r2, [pc, #92]	; (8001244 <HAL_UART_MspInit+0x7c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d128      	bne.n	800123c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <HAL_UART_MspInit+0x80>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	4a16      	ldr	r2, [pc, #88]	; (8001248 <HAL_UART_MspInit+0x80>)
 80011f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f4:	61d3      	str	r3, [r2, #28]
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <HAL_UART_MspInit+0x80>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <HAL_UART_MspInit+0x80>)
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	4a10      	ldr	r2, [pc, #64]	; (8001248 <HAL_UART_MspInit+0x80>)
 8001208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800120c:	6153      	str	r3, [r2, #20]
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <HAL_UART_MspInit+0x80>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800121a:	230c      	movs	r3, #12
 800121c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800122a:	2307      	movs	r3, #7
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001238:	f000 f9ba 	bl	80015b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800123c:	bf00      	nop
 800123e:	3728      	adds	r7, #40	; 0x28
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40004400 	.word	0x40004400
 8001248:	40021000 	.word	0x40021000

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <NMI_Handler+0x4>

08001252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <HardFault_Handler+0x4>

08001258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800125c:	e7fe      	b.n	800125c <MemManage_Handler+0x4>

0800125e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <BusFault_Handler+0x4>

08001264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <UsageFault_Handler+0x4>

0800126a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001298:	f000 f884 	bl	80013a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}

080012a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <SystemInit+0x20>)
 80012a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012aa:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <SystemInit+0x20>)
 80012ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012fc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012c8:	f7ff ffea 	bl	80012a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012cc:	480c      	ldr	r0, [pc, #48]	; (8001300 <LoopForever+0x6>)
  ldr r1, =_edata
 80012ce:	490d      	ldr	r1, [pc, #52]	; (8001304 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012d0:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <LoopForever+0xe>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d4:	e002      	b.n	80012dc <LoopCopyDataInit>

080012d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012da:	3304      	adds	r3, #4

080012dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e0:	d3f9      	bcc.n	80012d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <LoopForever+0x12>)
  ldr r4, =_ebss
 80012e4:	4c0a      	ldr	r4, [pc, #40]	; (8001310 <LoopForever+0x16>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e8:	e001      	b.n	80012ee <LoopFillZerobss>

080012ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ec:	3204      	adds	r2, #4

080012ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f0:	d3fb      	bcc.n	80012ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012f2:	f002 f8f5 	bl	80034e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012f6:	f7ff fcdf 	bl	8000cb8 <main>

080012fa <LoopForever>:

LoopForever:
    b LoopForever
 80012fa:	e7fe      	b.n	80012fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012fc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001304:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001308:	08004800 	.word	0x08004800
  ldr r2, =_sbss
 800130c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001310:	20000154 	.word	0x20000154

08001314 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC1_IRQHandler>
	...

08001318 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <HAL_Init+0x28>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a07      	ldr	r2, [pc, #28]	; (8001340 <HAL_Init+0x28>)
 8001322:	f043 0310 	orr.w	r3, r3, #16
 8001326:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001328:	2003      	movs	r0, #3
 800132a:	f000 f90d 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800132e:	2000      	movs	r0, #0
 8001330:	f000 f808 	bl	8001344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001334:	f7ff ff24 	bl	8001180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40022000 	.word	0x40022000

08001344 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_InitTick+0x54>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_InitTick+0x58>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	fbb3 f3f1 	udiv	r3, r3, r1
 800135e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f917 	bl	8001596 <HAL_SYSTICK_Config>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e00e      	b.n	8001390 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b0f      	cmp	r3, #15
 8001376:	d80a      	bhi.n	800138e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001378:	2200      	movs	r2, #0
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f000 f8ed 	bl	800155e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001384:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <HAL_InitTick+0x5c>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	e000      	b.n	8001390 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000000 	.word	0x20000000
 800139c:	20000008 	.word	0x20000008
 80013a0:	20000004 	.word	0x20000004

080013a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_IncTick+0x20>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_IncTick+0x24>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <HAL_IncTick+0x24>)
 80013b6:	6013      	str	r3, [r2, #0]
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000008 	.word	0x20000008
 80013c8:	20000150 	.word	0x20000150

080013cc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return uwTick;  
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <HAL_GetTick+0x14>)
 80013d2:	681b      	ldr	r3, [r3, #0]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000150 	.word	0x20000150

080013e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001400:	4013      	ands	r3, r2
 8001402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800140c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001416:	4a04      	ldr	r2, [pc, #16]	; (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	60d3      	str	r3, [r2, #12]
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <__NVIC_GetPriorityGrouping+0x18>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	0a1b      	lsrs	r3, r3, #8
 8001436:	f003 0307 	and.w	r3, r3, #7
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	db0a      	blt.n	8001472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	490c      	ldr	r1, [pc, #48]	; (8001494 <__NVIC_SetPriority+0x4c>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	0112      	lsls	r2, r2, #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	440b      	add	r3, r1
 800146c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001470:	e00a      	b.n	8001488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4908      	ldr	r1, [pc, #32]	; (8001498 <__NVIC_SetPriority+0x50>)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	3b04      	subs	r3, #4
 8001480:	0112      	lsls	r2, r2, #4
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	440b      	add	r3, r1
 8001486:	761a      	strb	r2, [r3, #24]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000e100 	.word	0xe000e100
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	; 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f1c3 0307 	rsb	r3, r3, #7
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	bf28      	it	cs
 80014ba:	2304      	movcs	r3, #4
 80014bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3304      	adds	r3, #4
 80014c2:	2b06      	cmp	r3, #6
 80014c4:	d902      	bls.n	80014cc <NVIC_EncodePriority+0x30>
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3b03      	subs	r3, #3
 80014ca:	e000      	b.n	80014ce <NVIC_EncodePriority+0x32>
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	f04f 32ff 	mov.w	r2, #4294967295
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43da      	mvns	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	401a      	ands	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e4:	f04f 31ff 	mov.w	r1, #4294967295
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	43d9      	mvns	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	4313      	orrs	r3, r2
         );
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3724      	adds	r7, #36	; 0x24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001514:	d301      	bcc.n	800151a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001516:	2301      	movs	r3, #1
 8001518:	e00f      	b.n	800153a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <SysTick_Config+0x40>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001522:	210f      	movs	r1, #15
 8001524:	f04f 30ff 	mov.w	r0, #4294967295
 8001528:	f7ff ff8e 	bl	8001448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <SysTick_Config+0x40>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001532:	4b04      	ldr	r3, [pc, #16]	; (8001544 <SysTick_Config+0x40>)
 8001534:	2207      	movs	r2, #7
 8001536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	e000e010 	.word	0xe000e010

08001548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ff47 	bl	80013e4 <__NVIC_SetPriorityGrouping>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
 800156a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001570:	f7ff ff5c 	bl	800142c <__NVIC_GetPriorityGrouping>
 8001574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	6978      	ldr	r0, [r7, #20]
 800157c:	f7ff ff8e 	bl	800149c <NVIC_EncodePriority>
 8001580:	4602      	mov	r2, r0
 8001582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff5d 	bl	8001448 <__NVIC_SetPriority>
}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff ffb0 	bl	8001504 <SysTick_Config>
 80015a4:	4603      	mov	r3, r0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015be:	e14e      	b.n	800185e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	2101      	movs	r1, #1
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	fa01 f303 	lsl.w	r3, r1, r3
 80015cc:	4013      	ands	r3, r2
 80015ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 8140 	beq.w	8001858 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d005      	beq.n	80015f0 <HAL_GPIO_Init+0x40>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d130      	bne.n	8001652 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	2203      	movs	r2, #3
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	68da      	ldr	r2, [r3, #12]
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	4313      	orrs	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001626:	2201      	movs	r2, #1
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	091b      	lsrs	r3, r3, #4
 800163c:	f003 0201 	and.w	r2, r3, #1
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	2b03      	cmp	r3, #3
 800165c:	d017      	beq.n	800168e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	2203      	movs	r2, #3
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d123      	bne.n	80016e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	08da      	lsrs	r2, r3, #3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3208      	adds	r2, #8
 80016a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	220f      	movs	r2, #15
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	4013      	ands	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	691a      	ldr	r2, [r3, #16]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	08da      	lsrs	r2, r3, #3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3208      	adds	r2, #8
 80016dc:	6939      	ldr	r1, [r7, #16]
 80016de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	2203      	movs	r2, #3
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 0203 	and.w	r2, r3, #3
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 809a 	beq.w	8001858 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001724:	4b55      	ldr	r3, [pc, #340]	; (800187c <HAL_GPIO_Init+0x2cc>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	4a54      	ldr	r2, [pc, #336]	; (800187c <HAL_GPIO_Init+0x2cc>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6193      	str	r3, [r2, #24]
 8001730:	4b52      	ldr	r3, [pc, #328]	; (800187c <HAL_GPIO_Init+0x2cc>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800173c:	4a50      	ldr	r2, [pc, #320]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	089b      	lsrs	r3, r3, #2
 8001742:	3302      	adds	r3, #2
 8001744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	220f      	movs	r2, #15
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001766:	d013      	beq.n	8001790 <HAL_GPIO_Init+0x1e0>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a46      	ldr	r2, [pc, #280]	; (8001884 <HAL_GPIO_Init+0x2d4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d00d      	beq.n	800178c <HAL_GPIO_Init+0x1dc>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a45      	ldr	r2, [pc, #276]	; (8001888 <HAL_GPIO_Init+0x2d8>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d007      	beq.n	8001788 <HAL_GPIO_Init+0x1d8>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a44      	ldr	r2, [pc, #272]	; (800188c <HAL_GPIO_Init+0x2dc>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d101      	bne.n	8001784 <HAL_GPIO_Init+0x1d4>
 8001780:	2303      	movs	r3, #3
 8001782:	e006      	b.n	8001792 <HAL_GPIO_Init+0x1e2>
 8001784:	2305      	movs	r3, #5
 8001786:	e004      	b.n	8001792 <HAL_GPIO_Init+0x1e2>
 8001788:	2302      	movs	r3, #2
 800178a:	e002      	b.n	8001792 <HAL_GPIO_Init+0x1e2>
 800178c:	2301      	movs	r3, #1
 800178e:	e000      	b.n	8001792 <HAL_GPIO_Init+0x1e2>
 8001790:	2300      	movs	r3, #0
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	f002 0203 	and.w	r2, r2, #3
 8001798:	0092      	lsls	r2, r2, #2
 800179a:	4093      	lsls	r3, r2
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017a2:	4937      	ldr	r1, [pc, #220]	; (8001880 <HAL_GPIO_Init+0x2d0>)
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	089b      	lsrs	r3, r3, #2
 80017a8:	3302      	adds	r3, #2
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017b0:	4b37      	ldr	r3, [pc, #220]	; (8001890 <HAL_GPIO_Init+0x2e0>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017d4:	4a2e      	ldr	r2, [pc, #184]	; (8001890 <HAL_GPIO_Init+0x2e0>)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017da:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <HAL_GPIO_Init+0x2e0>)
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017fe:	4a24      	ldr	r2, [pc, #144]	; (8001890 <HAL_GPIO_Init+0x2e0>)
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001804:	4b22      	ldr	r3, [pc, #136]	; (8001890 <HAL_GPIO_Init+0x2e0>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	43db      	mvns	r3, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001828:	4a19      	ldr	r2, [pc, #100]	; (8001890 <HAL_GPIO_Init+0x2e0>)
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800182e:	4b18      	ldr	r3, [pc, #96]	; (8001890 <HAL_GPIO_Init+0x2e0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	43db      	mvns	r3, r3
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001852:	4a0f      	ldr	r2, [pc, #60]	; (8001890 <HAL_GPIO_Init+0x2e0>)
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	3301      	adds	r3, #1
 800185c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	fa22 f303 	lsr.w	r3, r2, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	f47f aea9 	bne.w	80015c0 <HAL_GPIO_Init+0x10>
  }
}
 800186e:	bf00      	nop
 8001870:	bf00      	nop
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	40021000 	.word	0x40021000
 8001880:	40010000 	.word	0x40010000
 8001884:	48000400 	.word	0x48000400
 8001888:	48000800 	.word	0x48000800
 800188c:	48000c00 	.word	0x48000c00
 8001890:	40010400 	.word	0x40010400

08001894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]
 80018a0:	4613      	mov	r3, r2
 80018a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018a4:	787b      	ldrb	r3, [r7, #1]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018aa:	887a      	ldrh	r2, [r7, #2]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018b0:	e002      	b.n	80018b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018b2:	887a      	ldrh	r2, [r7, #2]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018d4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	f001 b823 	b.w	8002930 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 817d 	beq.w	8001bfa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001900:	4bbc      	ldr	r3, [pc, #752]	; (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	2b04      	cmp	r3, #4
 800190a:	d00c      	beq.n	8001926 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800190c:	4bb9      	ldr	r3, [pc, #740]	; (8001bf4 <HAL_RCC_OscConfig+0x330>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b08      	cmp	r3, #8
 8001916:	d15c      	bne.n	80019d2 <HAL_RCC_OscConfig+0x10e>
 8001918:	4bb6      	ldr	r3, [pc, #728]	; (8001bf4 <HAL_RCC_OscConfig+0x330>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001924:	d155      	bne.n	80019d2 <HAL_RCC_OscConfig+0x10e>
 8001926:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800192a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001932:	fa93 f3a3 	rbit	r3, r3
 8001936:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800193a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193e:	fab3 f383 	clz	r3, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	095b      	lsrs	r3, r3, #5
 8001946:	b2db      	uxtb	r3, r3
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b01      	cmp	r3, #1
 8001950:	d102      	bne.n	8001958 <HAL_RCC_OscConfig+0x94>
 8001952:	4ba8      	ldr	r3, [pc, #672]	; (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	e015      	b.n	8001984 <HAL_RCC_OscConfig+0xc0>
 8001958:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800195c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001964:	fa93 f3a3 	rbit	r3, r3
 8001968:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800196c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001970:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001974:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001978:	fa93 f3a3 	rbit	r3, r3
 800197c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001980:	4b9c      	ldr	r3, [pc, #624]	; (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001988:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800198c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001990:	fa92 f2a2 	rbit	r2, r2
 8001994:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001998:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800199c:	fab2 f282 	clz	r2, r2
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	f042 0220 	orr.w	r2, r2, #32
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	f002 021f 	and.w	r2, r2, #31
 80019ac:	2101      	movs	r1, #1
 80019ae:	fa01 f202 	lsl.w	r2, r1, r2
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 811f 	beq.w	8001bf8 <HAL_RCC_OscConfig+0x334>
 80019ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f040 8116 	bne.w	8001bf8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	f000 bfaf 	b.w	8002930 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e2:	d106      	bne.n	80019f2 <HAL_RCC_OscConfig+0x12e>
 80019e4:	4b83      	ldr	r3, [pc, #524]	; (8001bf4 <HAL_RCC_OscConfig+0x330>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a82      	ldr	r2, [pc, #520]	; (8001bf4 <HAL_RCC_OscConfig+0x330>)
 80019ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	e036      	b.n	8001a60 <HAL_RCC_OscConfig+0x19c>
 80019f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10c      	bne.n	8001a1c <HAL_RCC_OscConfig+0x158>
 8001a02:	4b7c      	ldr	r3, [pc, #496]	; (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a7b      	ldr	r2, [pc, #492]	; (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	4b79      	ldr	r3, [pc, #484]	; (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a78      	ldr	r2, [pc, #480]	; (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	e021      	b.n	8001a60 <HAL_RCC_OscConfig+0x19c>
 8001a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a2c:	d10c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x184>
 8001a2e:	4b71      	ldr	r3, [pc, #452]	; (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a70      	ldr	r2, [pc, #448]	; (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	4b6e      	ldr	r3, [pc, #440]	; (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a6d      	ldr	r2, [pc, #436]	; (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e00b      	b.n	8001a60 <HAL_RCC_OscConfig+0x19c>
 8001a48:	4b6a      	ldr	r3, [pc, #424]	; (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a69      	ldr	r2, [pc, #420]	; (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	4b67      	ldr	r3, [pc, #412]	; (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a66      	ldr	r2, [pc, #408]	; (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a60:	4b64      	ldr	r3, [pc, #400]	; (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a64:	f023 020f 	bic.w	r2, r3, #15
 8001a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	495f      	ldr	r1, [pc, #380]	; (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d059      	beq.n	8001b3e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8a:	f7ff fc9f 	bl	80013cc <HAL_GetTick>
 8001a8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a92:	e00a      	b.n	8001aaa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff fc9a 	bl	80013cc <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b64      	cmp	r3, #100	; 0x64
 8001aa2:	d902      	bls.n	8001aaa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	f000 bf43 	b.w	8002930 <HAL_RCC_OscConfig+0x106c>
 8001aaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aae:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001ab6:	fa93 f3a3 	rbit	r3, r3
 8001aba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001abe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac2:	fab3 f383 	clz	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	095b      	lsrs	r3, r3, #5
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d102      	bne.n	8001adc <HAL_RCC_OscConfig+0x218>
 8001ad6:	4b47      	ldr	r3, [pc, #284]	; (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	e015      	b.n	8001b08 <HAL_RCC_OscConfig+0x244>
 8001adc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001ae8:	fa93 f3a3 	rbit	r3, r3
 8001aec:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001af0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001af4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001af8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001afc:	fa93 f3a3 	rbit	r3, r3
 8001b00:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001b04:	4b3b      	ldr	r3, [pc, #236]	; (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b0c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001b10:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001b14:	fa92 f2a2 	rbit	r2, r2
 8001b18:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001b1c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001b20:	fab2 f282 	clz	r2, r2
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	f042 0220 	orr.w	r2, r2, #32
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	f002 021f 	and.w	r2, r2, #31
 8001b30:	2101      	movs	r1, #1
 8001b32:	fa01 f202 	lsl.w	r2, r1, r2
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0ab      	beq.n	8001a94 <HAL_RCC_OscConfig+0x1d0>
 8001b3c:	e05d      	b.n	8001bfa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3e:	f7ff fc45 	bl	80013cc <HAL_GetTick>
 8001b42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b48:	f7ff fc40 	bl	80013cc <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b64      	cmp	r3, #100	; 0x64
 8001b56:	d902      	bls.n	8001b5e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	f000 bee9 	b.w	8002930 <HAL_RCC_OscConfig+0x106c>
 8001b5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b62:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b66:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001b6a:	fa93 f3a3 	rbit	r3, r3
 8001b6e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001b72:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b76:	fab3 f383 	clz	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	095b      	lsrs	r3, r3, #5
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d102      	bne.n	8001b90 <HAL_RCC_OscConfig+0x2cc>
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	e015      	b.n	8001bbc <HAL_RCC_OscConfig+0x2f8>
 8001b90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b94:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001b9c:	fa93 f3a3 	rbit	r3, r3
 8001ba0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001ba4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ba8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001bac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001bb0:	fa93 f3a3 	rbit	r3, r3
 8001bb4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <HAL_RCC_OscConfig+0x330>)
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bc0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001bc4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001bc8:	fa92 f2a2 	rbit	r2, r2
 8001bcc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001bd0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001bd4:	fab2 f282 	clz	r2, r2
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	f042 0220 	orr.w	r2, r2, #32
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	f002 021f 	and.w	r2, r2, #31
 8001be4:	2101      	movs	r1, #1
 8001be6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1ab      	bne.n	8001b48 <HAL_RCC_OscConfig+0x284>
 8001bf0:	e003      	b.n	8001bfa <HAL_RCC_OscConfig+0x336>
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 817d 	beq.w	8001f0a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c10:	4ba6      	ldr	r3, [pc, #664]	; (8001eac <HAL_RCC_OscConfig+0x5e8>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00b      	beq.n	8001c34 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c1c:	4ba3      	ldr	r3, [pc, #652]	; (8001eac <HAL_RCC_OscConfig+0x5e8>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d172      	bne.n	8001d0e <HAL_RCC_OscConfig+0x44a>
 8001c28:	4ba0      	ldr	r3, [pc, #640]	; (8001eac <HAL_RCC_OscConfig+0x5e8>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d16c      	bne.n	8001d0e <HAL_RCC_OscConfig+0x44a>
 8001c34:	2302      	movs	r3, #2
 8001c36:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001c3e:	fa93 f3a3 	rbit	r3, r3
 8001c42:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001c46:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4a:	fab3 f383 	clz	r3, r3
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	095b      	lsrs	r3, r3, #5
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d102      	bne.n	8001c64 <HAL_RCC_OscConfig+0x3a0>
 8001c5e:	4b93      	ldr	r3, [pc, #588]	; (8001eac <HAL_RCC_OscConfig+0x5e8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	e013      	b.n	8001c8c <HAL_RCC_OscConfig+0x3c8>
 8001c64:	2302      	movs	r3, #2
 8001c66:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001c6e:	fa93 f3a3 	rbit	r3, r3
 8001c72:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001c76:	2302      	movs	r3, #2
 8001c78:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c7c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001c80:	fa93 f3a3 	rbit	r3, r3
 8001c84:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001c88:	4b88      	ldr	r3, [pc, #544]	; (8001eac <HAL_RCC_OscConfig+0x5e8>)
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001c92:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c96:	fa92 f2a2 	rbit	r2, r2
 8001c9a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001c9e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001ca2:	fab2 f282 	clz	r2, r2
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	f042 0220 	orr.w	r2, r2, #32
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	f002 021f 	and.w	r2, r2, #31
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00a      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x410>
 8001cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d002      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	f000 be2e 	b.w	8002930 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd4:	4b75      	ldr	r3, [pc, #468]	; (8001eac <HAL_RCC_OscConfig+0x5e8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	21f8      	movs	r1, #248	; 0xf8
 8001cea:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cee:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001cf2:	fa91 f1a1 	rbit	r1, r1
 8001cf6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001cfa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001cfe:	fab1 f181 	clz	r1, r1
 8001d02:	b2c9      	uxtb	r1, r1
 8001d04:	408b      	lsls	r3, r1
 8001d06:	4969      	ldr	r1, [pc, #420]	; (8001eac <HAL_RCC_OscConfig+0x5e8>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0c:	e0fd      	b.n	8001f0a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 8088 	beq.w	8001e30 <HAL_RCC_OscConfig+0x56c>
 8001d20:	2301      	movs	r3, #1
 8001d22:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001d2a:	fa93 f3a3 	rbit	r3, r3
 8001d2e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001d32:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d36:	fab3 f383 	clz	r3, r3
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	461a      	mov	r2, r3
 8001d48:	2301      	movs	r3, #1
 8001d4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4c:	f7ff fb3e 	bl	80013cc <HAL_GetTick>
 8001d50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d54:	e00a      	b.n	8001d6c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d56:	f7ff fb39 	bl	80013cc <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d902      	bls.n	8001d6c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	f000 bde2 	b.w	8002930 <HAL_RCC_OscConfig+0x106c>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001d76:	fa93 f3a3 	rbit	r3, r3
 8001d7a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001d7e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d82:	fab3 f383 	clz	r3, r3
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	095b      	lsrs	r3, r3, #5
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d102      	bne.n	8001d9c <HAL_RCC_OscConfig+0x4d8>
 8001d96:	4b45      	ldr	r3, [pc, #276]	; (8001eac <HAL_RCC_OscConfig+0x5e8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	e013      	b.n	8001dc4 <HAL_RCC_OscConfig+0x500>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001da6:	fa93 f3a3 	rbit	r3, r3
 8001daa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001dae:	2302      	movs	r3, #2
 8001db0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001db4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001db8:	fa93 f3a3 	rbit	r3, r3
 8001dbc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001dc0:	4b3a      	ldr	r3, [pc, #232]	; (8001eac <HAL_RCC_OscConfig+0x5e8>)
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001dca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001dce:	fa92 f2a2 	rbit	r2, r2
 8001dd2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001dd6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001dda:	fab2 f282 	clz	r2, r2
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	f042 0220 	orr.w	r2, r2, #32
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	f002 021f 	and.w	r2, r2, #31
 8001dea:	2101      	movs	r1, #1
 8001dec:	fa01 f202 	lsl.w	r2, r1, r2
 8001df0:	4013      	ands	r3, r2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0af      	beq.n	8001d56 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df6:	4b2d      	ldr	r3, [pc, #180]	; (8001eac <HAL_RCC_OscConfig+0x5e8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	21f8      	movs	r1, #248	; 0xf8
 8001e0c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e10:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001e14:	fa91 f1a1 	rbit	r1, r1
 8001e18:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001e1c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001e20:	fab1 f181 	clz	r1, r1
 8001e24:	b2c9      	uxtb	r1, r1
 8001e26:	408b      	lsls	r3, r1
 8001e28:	4920      	ldr	r1, [pc, #128]	; (8001eac <HAL_RCC_OscConfig+0x5e8>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]
 8001e2e:	e06c      	b.n	8001f0a <HAL_RCC_OscConfig+0x646>
 8001e30:	2301      	movs	r3, #1
 8001e32:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e3a:	fa93 f3a3 	rbit	r3, r3
 8001e3e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001e42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	461a      	mov	r2, r3
 8001e58:	2300      	movs	r3, #0
 8001e5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5c:	f7ff fab6 	bl	80013cc <HAL_GetTick>
 8001e60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e64:	e00a      	b.n	8001e7c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e66:	f7ff fab1 	bl	80013cc <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d902      	bls.n	8001e7c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	f000 bd5a 	b.w	8002930 <HAL_RCC_OscConfig+0x106c>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	095b      	lsrs	r3, r3, #5
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d104      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x5ec>
 8001ea6:	4b01      	ldr	r3, [pc, #4]	; (8001eac <HAL_RCC_OscConfig+0x5e8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	e015      	b.n	8001ed8 <HAL_RCC_OscConfig+0x614>
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ec8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001ecc:	fa93 f3a3 	rbit	r3, r3
 8001ed0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001ed4:	4bc8      	ldr	r3, [pc, #800]	; (80021f8 <HAL_RCC_OscConfig+0x934>)
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	2202      	movs	r2, #2
 8001eda:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001ede:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ee2:	fa92 f2a2 	rbit	r2, r2
 8001ee6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001eea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001eee:	fab2 f282 	clz	r2, r2
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	f042 0220 	orr.w	r2, r2, #32
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	f002 021f 	and.w	r2, r2, #31
 8001efe:	2101      	movs	r1, #1
 8001f00:	fa01 f202 	lsl.w	r2, r1, r2
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1ad      	bne.n	8001e66 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 8110 	beq.w	8002140 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d079      	beq.n	8002024 <HAL_RCC_OscConfig+0x760>
 8001f30:	2301      	movs	r3, #1
 8001f32:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f3a:	fa93 f3a3 	rbit	r3, r3
 8001f3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4bab      	ldr	r3, [pc, #684]	; (80021fc <HAL_RCC_OscConfig+0x938>)
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	461a      	mov	r2, r3
 8001f56:	2301      	movs	r3, #1
 8001f58:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5a:	f7ff fa37 	bl	80013cc <HAL_GetTick>
 8001f5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f64:	f7ff fa32 	bl	80013cc <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d902      	bls.n	8001f7a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	f000 bcdb 	b.w	8002930 <HAL_RCC_OscConfig+0x106c>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f84:	fa93 f3a3 	rbit	r3, r3
 8001f88:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f90:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f94:	2202      	movs	r2, #2
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	fa93 f2a3 	rbit	r2, r3
 8001fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001faa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001fb8:	2202      	movs	r2, #2
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	fa93 f2a3 	rbit	r2, r3
 8001fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001fd2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd4:	4b88      	ldr	r3, [pc, #544]	; (80021f8 <HAL_RCC_OscConfig+0x934>)
 8001fd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fdc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001fe0:	2102      	movs	r1, #2
 8001fe2:	6019      	str	r1, [r3, #0]
 8001fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	fa93 f1a3 	rbit	r1, r3
 8001ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ffa:	6019      	str	r1, [r3, #0]
  return result;
 8001ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002000:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002010:	b2db      	uxtb	r3, r3
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	2101      	movs	r1, #1
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	4013      	ands	r3, r2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0a0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x6a0>
 8002022:	e08d      	b.n	8002140 <HAL_RCC_OscConfig+0x87c>
 8002024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002028:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800202c:	2201      	movs	r2, #1
 800202e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002034:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	fa93 f2a3 	rbit	r2, r3
 800203e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002042:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002046:	601a      	str	r2, [r3, #0]
  return result;
 8002048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002050:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002052:	fab3 f383 	clz	r3, r3
 8002056:	b2db      	uxtb	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	4b68      	ldr	r3, [pc, #416]	; (80021fc <HAL_RCC_OscConfig+0x938>)
 800205c:	4413      	add	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	461a      	mov	r2, r3
 8002062:	2300      	movs	r3, #0
 8002064:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002066:	f7ff f9b1 	bl	80013cc <HAL_GetTick>
 800206a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206e:	e00a      	b.n	8002086 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002070:	f7ff f9ac 	bl	80013cc <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d902      	bls.n	8002086 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	f000 bc55 	b.w	8002930 <HAL_RCC_OscConfig+0x106c>
 8002086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800208e:	2202      	movs	r2, #2
 8002090:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002096:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	fa93 f2a3 	rbit	r2, r3
 80020a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80020b2:	2202      	movs	r2, #2
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	fa93 f2a3 	rbit	r2, r3
 80020c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80020d6:	2202      	movs	r2, #2
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	fa93 f2a3 	rbit	r2, r3
 80020e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80020f0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f2:	4b41      	ldr	r3, [pc, #260]	; (80021f8 <HAL_RCC_OscConfig+0x934>)
 80020f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80020fe:	2102      	movs	r1, #2
 8002100:	6019      	str	r1, [r3, #0]
 8002102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002106:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	fa93 f1a3 	rbit	r1, r3
 8002110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002114:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002118:	6019      	str	r1, [r3, #0]
  return result;
 800211a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	fab3 f383 	clz	r3, r3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800212e:	b2db      	uxtb	r3, r3
 8002130:	f003 031f 	and.w	r3, r3, #31
 8002134:	2101      	movs	r1, #1
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	4013      	ands	r3, r2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d197      	bne.n	8002070 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002144:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 81a1 	beq.w	8002498 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002156:	2300      	movs	r3, #0
 8002158:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800215c:	4b26      	ldr	r3, [pc, #152]	; (80021f8 <HAL_RCC_OscConfig+0x934>)
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d116      	bne.n	8002196 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002168:	4b23      	ldr	r3, [pc, #140]	; (80021f8 <HAL_RCC_OscConfig+0x934>)
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	4a22      	ldr	r2, [pc, #136]	; (80021f8 <HAL_RCC_OscConfig+0x934>)
 800216e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002172:	61d3      	str	r3, [r2, #28]
 8002174:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <HAL_RCC_OscConfig+0x934>)
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800217c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002180:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800218e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002190:	2301      	movs	r3, #1
 8002192:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002196:	4b1a      	ldr	r3, [pc, #104]	; (8002200 <HAL_RCC_OscConfig+0x93c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d11a      	bne.n	80021d8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a2:	4b17      	ldr	r3, [pc, #92]	; (8002200 <HAL_RCC_OscConfig+0x93c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a16      	ldr	r2, [pc, #88]	; (8002200 <HAL_RCC_OscConfig+0x93c>)
 80021a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ae:	f7ff f90d 	bl	80013cc <HAL_GetTick>
 80021b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b6:	e009      	b.n	80021cc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b8:	f7ff f908 	bl	80013cc <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b64      	cmp	r3, #100	; 0x64
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e3b1      	b.n	8002930 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <HAL_RCC_OscConfig+0x93c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0ef      	beq.n	80021b8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d10d      	bne.n	8002204 <HAL_RCC_OscConfig+0x940>
 80021e8:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <HAL_RCC_OscConfig+0x934>)
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	4a02      	ldr	r2, [pc, #8]	; (80021f8 <HAL_RCC_OscConfig+0x934>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6213      	str	r3, [r2, #32]
 80021f4:	e03c      	b.n	8002270 <HAL_RCC_OscConfig+0x9ac>
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	10908120 	.word	0x10908120
 8002200:	40007000 	.word	0x40007000
 8002204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002208:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10c      	bne.n	800222e <HAL_RCC_OscConfig+0x96a>
 8002214:	4bc1      	ldr	r3, [pc, #772]	; (800251c <HAL_RCC_OscConfig+0xc58>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	4ac0      	ldr	r2, [pc, #768]	; (800251c <HAL_RCC_OscConfig+0xc58>)
 800221a:	f023 0301 	bic.w	r3, r3, #1
 800221e:	6213      	str	r3, [r2, #32]
 8002220:	4bbe      	ldr	r3, [pc, #760]	; (800251c <HAL_RCC_OscConfig+0xc58>)
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	4abd      	ldr	r2, [pc, #756]	; (800251c <HAL_RCC_OscConfig+0xc58>)
 8002226:	f023 0304 	bic.w	r3, r3, #4
 800222a:	6213      	str	r3, [r2, #32]
 800222c:	e020      	b.n	8002270 <HAL_RCC_OscConfig+0x9ac>
 800222e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002232:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	2b05      	cmp	r3, #5
 800223c:	d10c      	bne.n	8002258 <HAL_RCC_OscConfig+0x994>
 800223e:	4bb7      	ldr	r3, [pc, #732]	; (800251c <HAL_RCC_OscConfig+0xc58>)
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4ab6      	ldr	r2, [pc, #728]	; (800251c <HAL_RCC_OscConfig+0xc58>)
 8002244:	f043 0304 	orr.w	r3, r3, #4
 8002248:	6213      	str	r3, [r2, #32]
 800224a:	4bb4      	ldr	r3, [pc, #720]	; (800251c <HAL_RCC_OscConfig+0xc58>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	4ab3      	ldr	r2, [pc, #716]	; (800251c <HAL_RCC_OscConfig+0xc58>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6213      	str	r3, [r2, #32]
 8002256:	e00b      	b.n	8002270 <HAL_RCC_OscConfig+0x9ac>
 8002258:	4bb0      	ldr	r3, [pc, #704]	; (800251c <HAL_RCC_OscConfig+0xc58>)
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	4aaf      	ldr	r2, [pc, #700]	; (800251c <HAL_RCC_OscConfig+0xc58>)
 800225e:	f023 0301 	bic.w	r3, r3, #1
 8002262:	6213      	str	r3, [r2, #32]
 8002264:	4bad      	ldr	r3, [pc, #692]	; (800251c <HAL_RCC_OscConfig+0xc58>)
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	4aac      	ldr	r2, [pc, #688]	; (800251c <HAL_RCC_OscConfig+0xc58>)
 800226a:	f023 0304 	bic.w	r3, r3, #4
 800226e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002274:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 8081 	beq.w	8002384 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002282:	f7ff f8a3 	bl	80013cc <HAL_GetTick>
 8002286:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228a:	e00b      	b.n	80022a4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800228c:	f7ff f89e 	bl	80013cc <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	f241 3288 	movw	r2, #5000	; 0x1388
 800229c:	4293      	cmp	r3, r2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e345      	b.n	8002930 <HAL_RCC_OscConfig+0x106c>
 80022a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80022ac:	2202      	movs	r2, #2
 80022ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	fa93 f2a3 	rbit	r2, r3
 80022be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80022d0:	2202      	movs	r2, #2
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	fa93 f2a3 	rbit	r2, r3
 80022e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80022ea:	601a      	str	r2, [r3, #0]
  return result;
 80022ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80022f4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	095b      	lsrs	r3, r3, #5
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d102      	bne.n	8002310 <HAL_RCC_OscConfig+0xa4c>
 800230a:	4b84      	ldr	r3, [pc, #528]	; (800251c <HAL_RCC_OscConfig+0xc58>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	e013      	b.n	8002338 <HAL_RCC_OscConfig+0xa74>
 8002310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002314:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002318:	2202      	movs	r2, #2
 800231a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002320:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	fa93 f2a3 	rbit	r2, r3
 800232a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	4b79      	ldr	r3, [pc, #484]	; (800251c <HAL_RCC_OscConfig+0xc58>)
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800233c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002340:	2102      	movs	r1, #2
 8002342:	6011      	str	r1, [r2, #0]
 8002344:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002348:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	fa92 f1a2 	rbit	r1, r2
 8002352:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002356:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800235a:	6011      	str	r1, [r2, #0]
  return result;
 800235c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002360:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002364:	6812      	ldr	r2, [r2, #0]
 8002366:	fab2 f282 	clz	r2, r2
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	f002 021f 	and.w	r2, r2, #31
 8002376:	2101      	movs	r1, #1
 8002378:	fa01 f202 	lsl.w	r2, r1, r2
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d084      	beq.n	800228c <HAL_RCC_OscConfig+0x9c8>
 8002382:	e07f      	b.n	8002484 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002384:	f7ff f822 	bl	80013cc <HAL_GetTick>
 8002388:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238c:	e00b      	b.n	80023a6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800238e:	f7ff f81d 	bl	80013cc <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f241 3288 	movw	r2, #5000	; 0x1388
 800239e:	4293      	cmp	r3, r2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e2c4      	b.n	8002930 <HAL_RCC_OscConfig+0x106c>
 80023a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023aa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80023ae:	2202      	movs	r2, #2
 80023b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	fa93 f2a3 	rbit	r2, r3
 80023c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80023d2:	2202      	movs	r2, #2
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	fa93 f2a3 	rbit	r2, r3
 80023e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80023ec:	601a      	str	r2, [r3, #0]
  return result;
 80023ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80023f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f8:	fab3 f383 	clz	r3, r3
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	b2db      	uxtb	r3, r3
 8002402:	f043 0302 	orr.w	r3, r3, #2
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d102      	bne.n	8002412 <HAL_RCC_OscConfig+0xb4e>
 800240c:	4b43      	ldr	r3, [pc, #268]	; (800251c <HAL_RCC_OscConfig+0xc58>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	e013      	b.n	800243a <HAL_RCC_OscConfig+0xb76>
 8002412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002416:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800241a:	2202      	movs	r2, #2
 800241c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002422:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	fa93 f2a3 	rbit	r2, r3
 800242c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002430:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	4b39      	ldr	r3, [pc, #228]	; (800251c <HAL_RCC_OscConfig+0xc58>)
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800243e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002442:	2102      	movs	r1, #2
 8002444:	6011      	str	r1, [r2, #0]
 8002446:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800244a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	fa92 f1a2 	rbit	r1, r2
 8002454:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002458:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800245c:	6011      	str	r1, [r2, #0]
  return result;
 800245e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002462:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	fab2 f282 	clz	r2, r2
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	f002 021f 	and.w	r2, r2, #31
 8002478:	2101      	movs	r1, #1
 800247a:	fa01 f202 	lsl.w	r2, r1, r2
 800247e:	4013      	ands	r3, r2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d184      	bne.n	800238e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002484:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002488:	2b01      	cmp	r3, #1
 800248a:	d105      	bne.n	8002498 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248c:	4b23      	ldr	r3, [pc, #140]	; (800251c <HAL_RCC_OscConfig+0xc58>)
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	4a22      	ldr	r2, [pc, #136]	; (800251c <HAL_RCC_OscConfig+0xc58>)
 8002492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002496:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 8242 	beq.w	800292e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024aa:	4b1c      	ldr	r3, [pc, #112]	; (800251c <HAL_RCC_OscConfig+0xc58>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 030c 	and.w	r3, r3, #12
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	f000 8213 	beq.w	80028de <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	f040 8162 	bne.w	800278e <HAL_RCC_OscConfig+0xeca>
 80024ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ce:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80024d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024dc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	fa93 f2a3 	rbit	r2, r3
 80024e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80024ee:	601a      	str	r2, [r3, #0]
  return result;
 80024f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80024f8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002504:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	461a      	mov	r2, r3
 800250c:	2300      	movs	r3, #0
 800250e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7fe ff5c 	bl	80013cc <HAL_GetTick>
 8002514:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002518:	e00c      	b.n	8002534 <HAL_RCC_OscConfig+0xc70>
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002520:	f7fe ff54 	bl	80013cc <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e1fd      	b.n	8002930 <HAL_RCC_OscConfig+0x106c>
 8002534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002538:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800253c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002540:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002546:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	fa93 f2a3 	rbit	r2, r3
 8002550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002554:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002558:	601a      	str	r2, [r3, #0]
  return result;
 800255a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002562:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002564:	fab3 f383 	clz	r3, r3
 8002568:	b2db      	uxtb	r3, r3
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	b2db      	uxtb	r3, r3
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b01      	cmp	r3, #1
 8002576:	d102      	bne.n	800257e <HAL_RCC_OscConfig+0xcba>
 8002578:	4bb0      	ldr	r3, [pc, #704]	; (800283c <HAL_RCC_OscConfig+0xf78>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	e027      	b.n	80025ce <HAL_RCC_OscConfig+0xd0a>
 800257e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002582:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002586:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800258a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002590:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	fa93 f2a3 	rbit	r2, r3
 800259a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80025ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	fa93 f2a3 	rbit	r2, r3
 80025c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	4b9c      	ldr	r3, [pc, #624]	; (800283c <HAL_RCC_OscConfig+0xf78>)
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025d2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80025d6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025da:	6011      	str	r1, [r2, #0]
 80025dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025e0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	fa92 f1a2 	rbit	r1, r2
 80025ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025ee:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80025f2:	6011      	str	r1, [r2, #0]
  return result;
 80025f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025f8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80025fc:	6812      	ldr	r2, [r2, #0]
 80025fe:	fab2 f282 	clz	r2, r2
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	f042 0220 	orr.w	r2, r2, #32
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	f002 021f 	and.w	r2, r2, #31
 800260e:	2101      	movs	r1, #1
 8002610:	fa01 f202 	lsl.w	r2, r1, r2
 8002614:	4013      	ands	r3, r2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d182      	bne.n	8002520 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800261a:	4b88      	ldr	r3, [pc, #544]	; (800283c <HAL_RCC_OscConfig+0xf78>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002626:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800262e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002632:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	430b      	orrs	r3, r1
 800263c:	497f      	ldr	r1, [pc, #508]	; (800283c <HAL_RCC_OscConfig+0xf78>)
 800263e:	4313      	orrs	r3, r2
 8002640:	604b      	str	r3, [r1, #4]
 8002642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002646:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800264a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800264e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002654:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	fa93 f2a3 	rbit	r2, r3
 800265e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002662:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002666:	601a      	str	r2, [r3, #0]
  return result;
 8002668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002670:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002672:	fab3 f383 	clz	r3, r3
 8002676:	b2db      	uxtb	r3, r3
 8002678:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800267c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	461a      	mov	r2, r3
 8002684:	2301      	movs	r3, #1
 8002686:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7fe fea0 	bl	80013cc <HAL_GetTick>
 800268c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002690:	e009      	b.n	80026a6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002692:	f7fe fe9b 	bl	80013cc <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e144      	b.n	8002930 <HAL_RCC_OscConfig+0x106c>
 80026a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026aa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80026ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	fa93 f2a3 	rbit	r2, r3
 80026c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80026ca:	601a      	str	r2, [r3, #0]
  return result;
 80026cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80026d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	095b      	lsrs	r3, r3, #5
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d102      	bne.n	80026f0 <HAL_RCC_OscConfig+0xe2c>
 80026ea:	4b54      	ldr	r3, [pc, #336]	; (800283c <HAL_RCC_OscConfig+0xf78>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	e027      	b.n	8002740 <HAL_RCC_OscConfig+0xe7c>
 80026f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80026f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002702:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	fa93 f2a3 	rbit	r2, r3
 800270c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002710:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800271e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002728:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	fa93 f2a3 	rbit	r2, r3
 8002732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002736:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	4b3f      	ldr	r3, [pc, #252]	; (800283c <HAL_RCC_OscConfig+0xf78>)
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002744:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002748:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800274c:	6011      	str	r1, [r2, #0]
 800274e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002752:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	fa92 f1a2 	rbit	r1, r2
 800275c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002760:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002764:	6011      	str	r1, [r2, #0]
  return result;
 8002766:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800276a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	fab2 f282 	clz	r2, r2
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	f042 0220 	orr.w	r2, r2, #32
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	f002 021f 	and.w	r2, r2, #31
 8002780:	2101      	movs	r1, #1
 8002782:	fa01 f202 	lsl.w	r2, r1, r2
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d082      	beq.n	8002692 <HAL_RCC_OscConfig+0xdce>
 800278c:	e0cf      	b.n	800292e <HAL_RCC_OscConfig+0x106a>
 800278e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002792:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002796:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800279a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	fa93 f2a3 	rbit	r2, r3
 80027aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80027b2:	601a      	str	r2, [r3, #0]
  return result;
 80027b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80027bc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027be:	fab3 f383 	clz	r3, r3
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	461a      	mov	r2, r3
 80027d0:	2300      	movs	r3, #0
 80027d2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d4:	f7fe fdfa 	bl	80013cc <HAL_GetTick>
 80027d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027dc:	e009      	b.n	80027f2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027de:	f7fe fdf5 	bl	80013cc <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e09e      	b.n	8002930 <HAL_RCC_OscConfig+0x106c>
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80027fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002804:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	fa93 f2a3 	rbit	r2, r3
 800280e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002812:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002816:	601a      	str	r2, [r3, #0]
  return result;
 8002818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002820:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	095b      	lsrs	r3, r3, #5
 800282a:	b2db      	uxtb	r3, r3
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b01      	cmp	r3, #1
 8002834:	d104      	bne.n	8002840 <HAL_RCC_OscConfig+0xf7c>
 8002836:	4b01      	ldr	r3, [pc, #4]	; (800283c <HAL_RCC_OscConfig+0xf78>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	e029      	b.n	8002890 <HAL_RCC_OscConfig+0xfcc>
 800283c:	40021000 	.word	0x40021000
 8002840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002844:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002848:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800284c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002852:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	fa93 f2a3 	rbit	r2, r3
 800285c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002860:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800286e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002878:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	fa93 f2a3 	rbit	r2, r3
 8002882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002886:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	4b2b      	ldr	r3, [pc, #172]	; (800293c <HAL_RCC_OscConfig+0x1078>)
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002894:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002898:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800289c:	6011      	str	r1, [r2, #0]
 800289e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028a2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80028a6:	6812      	ldr	r2, [r2, #0]
 80028a8:	fa92 f1a2 	rbit	r1, r2
 80028ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028b0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80028b4:	6011      	str	r1, [r2, #0]
  return result;
 80028b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028ba:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	fab2 f282 	clz	r2, r2
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	f042 0220 	orr.w	r2, r2, #32
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	f002 021f 	and.w	r2, r2, #31
 80028d0:	2101      	movs	r1, #1
 80028d2:	fa01 f202 	lsl.w	r2, r1, r2
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d180      	bne.n	80027de <HAL_RCC_OscConfig+0xf1a>
 80028dc:	e027      	b.n	800292e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e01e      	b.n	8002930 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028f2:	4b12      	ldr	r3, [pc, #72]	; (800293c <HAL_RCC_OscConfig+0x1078>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80028fe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002906:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	429a      	cmp	r2, r3
 8002910:	d10b      	bne.n	800292a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002912:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002916:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800291a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002926:	429a      	cmp	r2, r3
 8002928:	d001      	beq.n	800292e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40021000 	.word	0x40021000

08002940 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b09e      	sub	sp, #120	; 0x78
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e162      	b.n	8002c1e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002958:	4b90      	ldr	r3, [pc, #576]	; (8002b9c <HAL_RCC_ClockConfig+0x25c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d910      	bls.n	8002988 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	4b8d      	ldr	r3, [pc, #564]	; (8002b9c <HAL_RCC_ClockConfig+0x25c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 0207 	bic.w	r2, r3, #7
 800296e:	498b      	ldr	r1, [pc, #556]	; (8002b9c <HAL_RCC_ClockConfig+0x25c>)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	4313      	orrs	r3, r2
 8002974:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002976:	4b89      	ldr	r3, [pc, #548]	; (8002b9c <HAL_RCC_ClockConfig+0x25c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e14a      	b.n	8002c1e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002994:	4b82      	ldr	r3, [pc, #520]	; (8002ba0 <HAL_RCC_ClockConfig+0x260>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	497f      	ldr	r1, [pc, #508]	; (8002ba0 <HAL_RCC_ClockConfig+0x260>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 80dc 	beq.w	8002b6c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d13c      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xf6>
 80029bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80029ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029cc:	fab3 f383 	clz	r3, r3
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d102      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xa6>
 80029e0:	4b6f      	ldr	r3, [pc, #444]	; (8002ba0 <HAL_RCC_ClockConfig+0x260>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	e00f      	b.n	8002a06 <HAL_RCC_ClockConfig+0xc6>
 80029e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029ee:	fa93 f3a3 	rbit	r3, r3
 80029f2:	667b      	str	r3, [r7, #100]	; 0x64
 80029f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029f8:	663b      	str	r3, [r7, #96]	; 0x60
 80029fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029fc:	fa93 f3a3 	rbit	r3, r3
 8002a00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a02:	4b67      	ldr	r3, [pc, #412]	; (8002ba0 <HAL_RCC_ClockConfig+0x260>)
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a0a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a0e:	fa92 f2a2 	rbit	r2, r2
 8002a12:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002a14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a16:	fab2 f282 	clz	r2, r2
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	f042 0220 	orr.w	r2, r2, #32
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	f002 021f 	and.w	r2, r2, #31
 8002a26:	2101      	movs	r1, #1
 8002a28:	fa01 f202 	lsl.w	r2, r1, r2
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d17b      	bne.n	8002b2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e0f3      	b.n	8002c1e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d13c      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x178>
 8002a3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a42:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a46:	fa93 f3a3 	rbit	r3, r3
 8002a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4e:	fab3 f383 	clz	r3, r3
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	095b      	lsrs	r3, r3, #5
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d102      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x128>
 8002a62:	4b4f      	ldr	r3, [pc, #316]	; (8002ba0 <HAL_RCC_ClockConfig+0x260>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	e00f      	b.n	8002a88 <HAL_RCC_ClockConfig+0x148>
 8002a68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a6c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a70:	fa93 f3a3 	rbit	r3, r3
 8002a74:	647b      	str	r3, [r7, #68]	; 0x44
 8002a76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a7a:	643b      	str	r3, [r7, #64]	; 0x40
 8002a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a84:	4b46      	ldr	r3, [pc, #280]	; (8002ba0 <HAL_RCC_ClockConfig+0x260>)
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a8c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a90:	fa92 f2a2 	rbit	r2, r2
 8002a94:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a98:	fab2 f282 	clz	r2, r2
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	f042 0220 	orr.w	r2, r2, #32
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	f002 021f 	and.w	r2, r2, #31
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d13a      	bne.n	8002b2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0b2      	b.n	8002c1e <HAL_RCC_ClockConfig+0x2de>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	095b      	lsrs	r3, r3, #5
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d102      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0x1a0>
 8002ada:	4b31      	ldr	r3, [pc, #196]	; (8002ba0 <HAL_RCC_ClockConfig+0x260>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	e00d      	b.n	8002afc <HAL_RCC_ClockConfig+0x1bc>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae6:	fa93 f3a3 	rbit	r3, r3
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
 8002aec:	2302      	movs	r3, #2
 8002aee:	623b      	str	r3, [r7, #32]
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	61fb      	str	r3, [r7, #28]
 8002af8:	4b29      	ldr	r3, [pc, #164]	; (8002ba0 <HAL_RCC_ClockConfig+0x260>)
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	2202      	movs	r2, #2
 8002afe:	61ba      	str	r2, [r7, #24]
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	fa92 f2a2 	rbit	r2, r2
 8002b06:	617a      	str	r2, [r7, #20]
  return result;
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	fab2 f282 	clz	r2, r2
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	f042 0220 	orr.w	r2, r2, #32
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	f002 021f 	and.w	r2, r2, #31
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e079      	b.n	8002c1e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <HAL_RCC_ClockConfig+0x260>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f023 0203 	bic.w	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	491a      	ldr	r1, [pc, #104]	; (8002ba0 <HAL_RCC_ClockConfig+0x260>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b3c:	f7fe fc46 	bl	80013cc <HAL_GetTick>
 8002b40:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b42:	e00a      	b.n	8002b5a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b44:	f7fe fc42 	bl	80013cc <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e061      	b.n	8002c1e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5a:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <HAL_RCC_ClockConfig+0x260>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 020c 	and.w	r2, r3, #12
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d1eb      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_RCC_ClockConfig+0x25c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d214      	bcs.n	8002ba4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7a:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <HAL_RCC_ClockConfig+0x25c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 0207 	bic.w	r2, r3, #7
 8002b82:	4906      	ldr	r1, [pc, #24]	; (8002b9c <HAL_RCC_ClockConfig+0x25c>)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <HAL_RCC_ClockConfig+0x25c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e040      	b.n	8002c1e <HAL_RCC_ClockConfig+0x2de>
 8002b9c:	40022000 	.word	0x40022000
 8002ba0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d008      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb0:	4b1d      	ldr	r3, [pc, #116]	; (8002c28 <HAL_RCC_ClockConfig+0x2e8>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	491a      	ldr	r1, [pc, #104]	; (8002c28 <HAL_RCC_ClockConfig+0x2e8>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d009      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bce:	4b16      	ldr	r3, [pc, #88]	; (8002c28 <HAL_RCC_ClockConfig+0x2e8>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4912      	ldr	r1, [pc, #72]	; (8002c28 <HAL_RCC_ClockConfig+0x2e8>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002be2:	f000 f829 	bl	8002c38 <HAL_RCC_GetSysClockFreq>
 8002be6:	4601      	mov	r1, r0
 8002be8:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <HAL_RCC_ClockConfig+0x2e8>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf0:	22f0      	movs	r2, #240	; 0xf0
 8002bf2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	fa92 f2a2 	rbit	r2, r2
 8002bfa:	60fa      	str	r2, [r7, #12]
  return result;
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	fab2 f282 	clz	r2, r2
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	40d3      	lsrs	r3, r2
 8002c06:	4a09      	ldr	r2, [pc, #36]	; (8002c2c <HAL_RCC_ClockConfig+0x2ec>)
 8002c08:	5cd3      	ldrb	r3, [r2, r3]
 8002c0a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c0e:	4a08      	ldr	r2, [pc, #32]	; (8002c30 <HAL_RCC_ClockConfig+0x2f0>)
 8002c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <HAL_RCC_ClockConfig+0x2f4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe fb94 	bl	8001344 <HAL_InitTick>
  
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3778      	adds	r7, #120	; 0x78
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	080045e8 	.word	0x080045e8
 8002c30:	20000000 	.word	0x20000000
 8002c34:	20000004 	.word	0x20000004

08002c38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b08b      	sub	sp, #44	; 0x2c
 8002c3c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61fb      	str	r3, [r7, #28]
 8002c42:	2300      	movs	r3, #0
 8002c44:	61bb      	str	r3, [r7, #24]
 8002c46:	2300      	movs	r3, #0
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002c52:	4b29      	ldr	r3, [pc, #164]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d002      	beq.n	8002c68 <HAL_RCC_GetSysClockFreq+0x30>
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d003      	beq.n	8002c6e <HAL_RCC_GetSysClockFreq+0x36>
 8002c66:	e03c      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c68:	4b24      	ldr	r3, [pc, #144]	; (8002cfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c6a:	623b      	str	r3, [r7, #32]
      break;
 8002c6c:	e03c      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c74:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002c78:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	fa92 f2a2 	rbit	r2, r2
 8002c80:	607a      	str	r2, [r7, #4]
  return result;
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	fab2 f282 	clz	r2, r2
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	40d3      	lsrs	r3, r2
 8002c8c:	4a1c      	ldr	r2, [pc, #112]	; (8002d00 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c8e:	5cd3      	ldrb	r3, [r2, r3]
 8002c90:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c92:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	220f      	movs	r2, #15
 8002c9c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	fa92 f2a2 	rbit	r2, r2
 8002ca4:	60fa      	str	r2, [r7, #12]
  return result;
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	fab2 f282 	clz	r2, r2
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	40d3      	lsrs	r3, r2
 8002cb0:	4a14      	ldr	r2, [pc, #80]	; (8002d04 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002cb2:	5cd3      	ldrb	r3, [r2, r3]
 8002cb4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cc0:	4a0e      	ldr	r2, [pc, #56]	; (8002cfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	fb02 f303 	mul.w	r3, r2, r3
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd0:	e004      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	4a0c      	ldr	r2, [pc, #48]	; (8002d08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cd6:	fb02 f303 	mul.w	r3, r2, r3
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	623b      	str	r3, [r7, #32]
      break;
 8002ce0:	e002      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ce2:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ce4:	623b      	str	r3, [r7, #32]
      break;
 8002ce6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	372c      	adds	r7, #44	; 0x2c
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	007a1200 	.word	0x007a1200
 8002d00:	08004600 	.word	0x08004600
 8002d04:	08004610 	.word	0x08004610
 8002d08:	003d0900 	.word	0x003d0900

08002d0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d10:	4b03      	ldr	r3, [pc, #12]	; (8002d20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d12:	681b      	ldr	r3, [r3, #0]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	20000000 	.word	0x20000000

08002d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002d2a:	f7ff ffef 	bl	8002d0c <HAL_RCC_GetHCLKFreq>
 8002d2e:	4601      	mov	r1, r0
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d38:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002d3c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	fa92 f2a2 	rbit	r2, r2
 8002d44:	603a      	str	r2, [r7, #0]
  return result;
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	fab2 f282 	clz	r2, r2
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	40d3      	lsrs	r3, r2
 8002d50:	4a04      	ldr	r2, [pc, #16]	; (8002d64 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002d52:	5cd3      	ldrb	r3, [r2, r3]
 8002d54:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40021000 	.word	0x40021000
 8002d64:	080045f8 	.word	0x080045f8

08002d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002d6e:	f7ff ffcd 	bl	8002d0c <HAL_RCC_GetHCLKFreq>
 8002d72:	4601      	mov	r1, r0
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002d7c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002d80:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	fa92 f2a2 	rbit	r2, r2
 8002d88:	603a      	str	r2, [r7, #0]
  return result;
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	fab2 f282 	clz	r2, r2
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	40d3      	lsrs	r3, r2
 8002d94:	4a04      	ldr	r2, [pc, #16]	; (8002da8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d96:	5cd3      	ldrb	r3, [r2, r3]
 8002d98:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40021000 	.word	0x40021000
 8002da8:	080045f8 	.word	0x080045f8

08002dac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e040      	b.n	8002e40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d106      	bne.n	8002dd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7fe f9fa 	bl	80011c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2224      	movs	r2, #36	; 0x24
 8002dd8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f82c 	bl	8002e48 <UART_SetConfig>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e022      	b.n	8002e40 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f956 	bl	80030b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f9dd 	bl	80031f8 <UART_CheckIdleState>
 8002e3e:	4603      	mov	r3, r0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b088      	sub	sp, #32
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	4b8a      	ldr	r3, [pc, #552]	; (800309c <UART_SetConfig+0x254>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	6979      	ldr	r1, [r7, #20]
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a78      	ldr	r2, [pc, #480]	; (80030a0 <UART_SetConfig+0x258>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d120      	bne.n	8002f06 <UART_SetConfig+0xbe>
 8002ec4:	4b77      	ldr	r3, [pc, #476]	; (80030a4 <UART_SetConfig+0x25c>)
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d817      	bhi.n	8002f00 <UART_SetConfig+0xb8>
 8002ed0:	a201      	add	r2, pc, #4	; (adr r2, 8002ed8 <UART_SetConfig+0x90>)
 8002ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed6:	bf00      	nop
 8002ed8:	08002ee9 	.word	0x08002ee9
 8002edc:	08002ef5 	.word	0x08002ef5
 8002ee0:	08002efb 	.word	0x08002efb
 8002ee4:	08002eef 	.word	0x08002eef
 8002ee8:	2300      	movs	r3, #0
 8002eea:	77fb      	strb	r3, [r7, #31]
 8002eec:	e01d      	b.n	8002f2a <UART_SetConfig+0xe2>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	77fb      	strb	r3, [r7, #31]
 8002ef2:	e01a      	b.n	8002f2a <UART_SetConfig+0xe2>
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	77fb      	strb	r3, [r7, #31]
 8002ef8:	e017      	b.n	8002f2a <UART_SetConfig+0xe2>
 8002efa:	2308      	movs	r3, #8
 8002efc:	77fb      	strb	r3, [r7, #31]
 8002efe:	e014      	b.n	8002f2a <UART_SetConfig+0xe2>
 8002f00:	2310      	movs	r3, #16
 8002f02:	77fb      	strb	r3, [r7, #31]
 8002f04:	e011      	b.n	8002f2a <UART_SetConfig+0xe2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a67      	ldr	r2, [pc, #412]	; (80030a8 <UART_SetConfig+0x260>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d102      	bne.n	8002f16 <UART_SetConfig+0xce>
 8002f10:	2300      	movs	r3, #0
 8002f12:	77fb      	strb	r3, [r7, #31]
 8002f14:	e009      	b.n	8002f2a <UART_SetConfig+0xe2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a64      	ldr	r2, [pc, #400]	; (80030ac <UART_SetConfig+0x264>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d102      	bne.n	8002f26 <UART_SetConfig+0xde>
 8002f20:	2300      	movs	r3, #0
 8002f22:	77fb      	strb	r3, [r7, #31]
 8002f24:	e001      	b.n	8002f2a <UART_SetConfig+0xe2>
 8002f26:	2310      	movs	r3, #16
 8002f28:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f32:	d15a      	bne.n	8002fea <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002f34:	7ffb      	ldrb	r3, [r7, #31]
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d827      	bhi.n	8002f8a <UART_SetConfig+0x142>
 8002f3a:	a201      	add	r2, pc, #4	; (adr r2, 8002f40 <UART_SetConfig+0xf8>)
 8002f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f40:	08002f65 	.word	0x08002f65
 8002f44:	08002f6d 	.word	0x08002f6d
 8002f48:	08002f75 	.word	0x08002f75
 8002f4c:	08002f8b 	.word	0x08002f8b
 8002f50:	08002f7b 	.word	0x08002f7b
 8002f54:	08002f8b 	.word	0x08002f8b
 8002f58:	08002f8b 	.word	0x08002f8b
 8002f5c:	08002f8b 	.word	0x08002f8b
 8002f60:	08002f83 	.word	0x08002f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f64:	f7ff fede 	bl	8002d24 <HAL_RCC_GetPCLK1Freq>
 8002f68:	61b8      	str	r0, [r7, #24]
        break;
 8002f6a:	e013      	b.n	8002f94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f6c:	f7ff fefc 	bl	8002d68 <HAL_RCC_GetPCLK2Freq>
 8002f70:	61b8      	str	r0, [r7, #24]
        break;
 8002f72:	e00f      	b.n	8002f94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f74:	4b4e      	ldr	r3, [pc, #312]	; (80030b0 <UART_SetConfig+0x268>)
 8002f76:	61bb      	str	r3, [r7, #24]
        break;
 8002f78:	e00c      	b.n	8002f94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f7a:	f7ff fe5d 	bl	8002c38 <HAL_RCC_GetSysClockFreq>
 8002f7e:	61b8      	str	r0, [r7, #24]
        break;
 8002f80:	e008      	b.n	8002f94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f86:	61bb      	str	r3, [r7, #24]
        break;
 8002f88:	e004      	b.n	8002f94 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	77bb      	strb	r3, [r7, #30]
        break;
 8002f92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d074      	beq.n	8003084 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	005a      	lsls	r2, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	085b      	lsrs	r3, r3, #1
 8002fa4:	441a      	add	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	2b0f      	cmp	r3, #15
 8002fb4:	d916      	bls.n	8002fe4 <UART_SetConfig+0x19c>
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fbc:	d212      	bcs.n	8002fe4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	f023 030f 	bic.w	r3, r3, #15
 8002fc6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	085b      	lsrs	r3, r3, #1
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	89fb      	ldrh	r3, [r7, #14]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	89fa      	ldrh	r2, [r7, #14]
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	e04f      	b.n	8003084 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	77bb      	strb	r3, [r7, #30]
 8002fe8:	e04c      	b.n	8003084 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fea:	7ffb      	ldrb	r3, [r7, #31]
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d828      	bhi.n	8003042 <UART_SetConfig+0x1fa>
 8002ff0:	a201      	add	r2, pc, #4	; (adr r2, 8002ff8 <UART_SetConfig+0x1b0>)
 8002ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff6:	bf00      	nop
 8002ff8:	0800301d 	.word	0x0800301d
 8002ffc:	08003025 	.word	0x08003025
 8003000:	0800302d 	.word	0x0800302d
 8003004:	08003043 	.word	0x08003043
 8003008:	08003033 	.word	0x08003033
 800300c:	08003043 	.word	0x08003043
 8003010:	08003043 	.word	0x08003043
 8003014:	08003043 	.word	0x08003043
 8003018:	0800303b 	.word	0x0800303b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800301c:	f7ff fe82 	bl	8002d24 <HAL_RCC_GetPCLK1Freq>
 8003020:	61b8      	str	r0, [r7, #24]
        break;
 8003022:	e013      	b.n	800304c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003024:	f7ff fea0 	bl	8002d68 <HAL_RCC_GetPCLK2Freq>
 8003028:	61b8      	str	r0, [r7, #24]
        break;
 800302a:	e00f      	b.n	800304c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800302c:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <UART_SetConfig+0x268>)
 800302e:	61bb      	str	r3, [r7, #24]
        break;
 8003030:	e00c      	b.n	800304c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003032:	f7ff fe01 	bl	8002c38 <HAL_RCC_GetSysClockFreq>
 8003036:	61b8      	str	r0, [r7, #24]
        break;
 8003038:	e008      	b.n	800304c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800303a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800303e:	61bb      	str	r3, [r7, #24]
        break;
 8003040:	e004      	b.n	800304c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003042:	2300      	movs	r3, #0
 8003044:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	77bb      	strb	r3, [r7, #30]
        break;
 800304a:	bf00      	nop
    }

    if (pclk != 0U)
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d018      	beq.n	8003084 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	085a      	lsrs	r2, r3, #1
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	441a      	add	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	fbb2 f3f3 	udiv	r3, r2, r3
 8003064:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	2b0f      	cmp	r3, #15
 800306a:	d909      	bls.n	8003080 <UART_SetConfig+0x238>
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003072:	d205      	bcs.n	8003080 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	b29a      	uxth	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	60da      	str	r2, [r3, #12]
 800307e:	e001      	b.n	8003084 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003090:	7fbb      	ldrb	r3, [r7, #30]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3720      	adds	r7, #32
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	efff69f3 	.word	0xefff69f3
 80030a0:	40013800 	.word	0x40013800
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40004400 	.word	0x40004400
 80030ac:	40004800 	.word	0x40004800
 80030b0:	007a1200 	.word	0x007a1200

080030b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00a      	beq.n	8003122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00a      	beq.n	8003166 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	f003 0320 	and.w	r3, r3, #32
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003190:	2b00      	cmp	r3, #0
 8003192:	d01a      	beq.n	80031ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031b2:	d10a      	bne.n	80031ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	605a      	str	r2, [r3, #4]
  }
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b098      	sub	sp, #96	; 0x60
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003208:	f7fe f8e0 	bl	80013cc <HAL_GetTick>
 800320c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b08      	cmp	r3, #8
 800321a:	d12e      	bne.n	800327a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800321c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003224:	2200      	movs	r2, #0
 8003226:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f88c 	bl	8003348 <UART_WaitOnFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d021      	beq.n	800327a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323e:	e853 3f00 	ldrex	r3, [r3]
 8003242:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800324a:	653b      	str	r3, [r7, #80]	; 0x50
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003254:	647b      	str	r3, [r7, #68]	; 0x44
 8003256:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003258:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800325a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800325c:	e841 2300 	strex	r3, r2, [r1]
 8003260:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1e6      	bne.n	8003236 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e062      	b.n	8003340 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b04      	cmp	r3, #4
 8003286:	d149      	bne.n	800331c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003288:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003290:	2200      	movs	r2, #0
 8003292:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f856 	bl	8003348 <UART_WaitOnFlagUntilTimeout>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d03c      	beq.n	800331c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	e853 3f00 	ldrex	r3, [r3]
 80032ae:	623b      	str	r3, [r7, #32]
   return(result);
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	461a      	mov	r2, r3
 80032be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c0:	633b      	str	r3, [r7, #48]	; 0x30
 80032c2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032c8:	e841 2300 	strex	r3, r2, [r1]
 80032cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80032ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1e6      	bne.n	80032a2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3308      	adds	r3, #8
 80032da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	e853 3f00 	ldrex	r3, [r3]
 80032e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0301 	bic.w	r3, r3, #1
 80032ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3308      	adds	r3, #8
 80032f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032f4:	61fa      	str	r2, [r7, #28]
 80032f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f8:	69b9      	ldr	r1, [r7, #24]
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	e841 2300 	strex	r3, r2, [r1]
 8003300:	617b      	str	r3, [r7, #20]
   return(result);
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e5      	bne.n	80032d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2220      	movs	r2, #32
 800330c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e011      	b.n	8003340 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2220      	movs	r2, #32
 8003326:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3758      	adds	r7, #88	; 0x58
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	4613      	mov	r3, r2
 8003356:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003358:	e049      	b.n	80033ee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003360:	d045      	beq.n	80033ee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003362:	f7fe f833 	bl	80013cc <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	429a      	cmp	r2, r3
 8003370:	d302      	bcc.n	8003378 <UART_WaitOnFlagUntilTimeout+0x30>
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e048      	b.n	800340e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b00      	cmp	r3, #0
 8003388:	d031      	beq.n	80033ee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	2b08      	cmp	r3, #8
 8003396:	d110      	bne.n	80033ba <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2208      	movs	r2, #8
 800339e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f838 	bl	8003416 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2208      	movs	r2, #8
 80033aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e029      	b.n	800340e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033c8:	d111      	bne.n	80033ee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 f81e 	bl	8003416 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2220      	movs	r2, #32
 80033de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e00f      	b.n	800340e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69da      	ldr	r2, [r3, #28]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	4013      	ands	r3, r2
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	bf0c      	ite	eq
 80033fe:	2301      	moveq	r3, #1
 8003400:	2300      	movne	r3, #0
 8003402:	b2db      	uxtb	r3, r3
 8003404:	461a      	mov	r2, r3
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	429a      	cmp	r2, r3
 800340a:	d0a6      	beq.n	800335a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003416:	b480      	push	{r7}
 8003418:	b095      	sub	sp, #84	; 0x54
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003426:	e853 3f00 	ldrex	r3, [r3]
 800342a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800342c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800343c:	643b      	str	r3, [r7, #64]	; 0x40
 800343e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003442:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003444:	e841 2300 	strex	r3, r2, [r1]
 8003448:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800344a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e6      	bne.n	800341e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3308      	adds	r3, #8
 8003456:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	e853 3f00 	ldrex	r3, [r3]
 800345e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f023 0301 	bic.w	r3, r3, #1
 8003466:	64bb      	str	r3, [r7, #72]	; 0x48
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3308      	adds	r3, #8
 800346e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003470:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003472:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003474:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003478:	e841 2300 	strex	r3, r2, [r1]
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e5      	bne.n	8003450 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003488:	2b01      	cmp	r3, #1
 800348a:	d118      	bne.n	80034be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	e853 3f00 	ldrex	r3, [r3]
 8003498:	60bb      	str	r3, [r7, #8]
   return(result);
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f023 0310 	bic.w	r3, r3, #16
 80034a0:	647b      	str	r3, [r7, #68]	; 0x44
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034aa:	61bb      	str	r3, [r7, #24]
 80034ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ae:	6979      	ldr	r1, [r7, #20]
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	e841 2300 	strex	r3, r2, [r1]
 80034b6:	613b      	str	r3, [r7, #16]
   return(result);
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1e6      	bne.n	800348c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80034d2:	bf00      	nop
 80034d4:	3754      	adds	r7, #84	; 0x54
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <__libc_init_array>:
 80034e0:	b570      	push	{r4, r5, r6, lr}
 80034e2:	4d0d      	ldr	r5, [pc, #52]	; (8003518 <__libc_init_array+0x38>)
 80034e4:	4c0d      	ldr	r4, [pc, #52]	; (800351c <__libc_init_array+0x3c>)
 80034e6:	1b64      	subs	r4, r4, r5
 80034e8:	10a4      	asrs	r4, r4, #2
 80034ea:	2600      	movs	r6, #0
 80034ec:	42a6      	cmp	r6, r4
 80034ee:	d109      	bne.n	8003504 <__libc_init_array+0x24>
 80034f0:	4d0b      	ldr	r5, [pc, #44]	; (8003520 <__libc_init_array+0x40>)
 80034f2:	4c0c      	ldr	r4, [pc, #48]	; (8003524 <__libc_init_array+0x44>)
 80034f4:	f001 f86a 	bl	80045cc <_init>
 80034f8:	1b64      	subs	r4, r4, r5
 80034fa:	10a4      	asrs	r4, r4, #2
 80034fc:	2600      	movs	r6, #0
 80034fe:	42a6      	cmp	r6, r4
 8003500:	d105      	bne.n	800350e <__libc_init_array+0x2e>
 8003502:	bd70      	pop	{r4, r5, r6, pc}
 8003504:	f855 3b04 	ldr.w	r3, [r5], #4
 8003508:	4798      	blx	r3
 800350a:	3601      	adds	r6, #1
 800350c:	e7ee      	b.n	80034ec <__libc_init_array+0xc>
 800350e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003512:	4798      	blx	r3
 8003514:	3601      	adds	r6, #1
 8003516:	e7f2      	b.n	80034fe <__libc_init_array+0x1e>
 8003518:	080047f8 	.word	0x080047f8
 800351c:	080047f8 	.word	0x080047f8
 8003520:	080047f8 	.word	0x080047f8
 8003524:	080047fc 	.word	0x080047fc

08003528 <memset>:
 8003528:	4402      	add	r2, r0
 800352a:	4603      	mov	r3, r0
 800352c:	4293      	cmp	r3, r2
 800352e:	d100      	bne.n	8003532 <memset+0xa>
 8003530:	4770      	bx	lr
 8003532:	f803 1b01 	strb.w	r1, [r3], #1
 8003536:	e7f9      	b.n	800352c <memset+0x4>

08003538 <sin>:
 8003538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800353a:	ec53 2b10 	vmov	r2, r3, d0
 800353e:	4828      	ldr	r0, [pc, #160]	; (80035e0 <sin+0xa8>)
 8003540:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003544:	4281      	cmp	r1, r0
 8003546:	dc07      	bgt.n	8003558 <sin+0x20>
 8003548:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80035d8 <sin+0xa0>
 800354c:	2000      	movs	r0, #0
 800354e:	b005      	add	sp, #20
 8003550:	f85d eb04 	ldr.w	lr, [sp], #4
 8003554:	f000 be6c 	b.w	8004230 <__kernel_sin>
 8003558:	4822      	ldr	r0, [pc, #136]	; (80035e4 <sin+0xac>)
 800355a:	4281      	cmp	r1, r0
 800355c:	dd09      	ble.n	8003572 <sin+0x3a>
 800355e:	ee10 0a10 	vmov	r0, s0
 8003562:	4619      	mov	r1, r3
 8003564:	f7fc fe34 	bl	80001d0 <__aeabi_dsub>
 8003568:	ec41 0b10 	vmov	d0, r0, r1
 800356c:	b005      	add	sp, #20
 800356e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003572:	4668      	mov	r0, sp
 8003574:	f000 f838 	bl	80035e8 <__ieee754_rem_pio2>
 8003578:	f000 0003 	and.w	r0, r0, #3
 800357c:	2801      	cmp	r0, #1
 800357e:	d00c      	beq.n	800359a <sin+0x62>
 8003580:	2802      	cmp	r0, #2
 8003582:	d011      	beq.n	80035a8 <sin+0x70>
 8003584:	b9f0      	cbnz	r0, 80035c4 <sin+0x8c>
 8003586:	ed9d 1b02 	vldr	d1, [sp, #8]
 800358a:	ed9d 0b00 	vldr	d0, [sp]
 800358e:	2001      	movs	r0, #1
 8003590:	f000 fe4e 	bl	8004230 <__kernel_sin>
 8003594:	ec51 0b10 	vmov	r0, r1, d0
 8003598:	e7e6      	b.n	8003568 <sin+0x30>
 800359a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800359e:	ed9d 0b00 	vldr	d0, [sp]
 80035a2:	f000 fa2d 	bl	8003a00 <__kernel_cos>
 80035a6:	e7f5      	b.n	8003594 <sin+0x5c>
 80035a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80035ac:	ed9d 0b00 	vldr	d0, [sp]
 80035b0:	2001      	movs	r0, #1
 80035b2:	f000 fe3d 	bl	8004230 <__kernel_sin>
 80035b6:	ec53 2b10 	vmov	r2, r3, d0
 80035ba:	ee10 0a10 	vmov	r0, s0
 80035be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80035c2:	e7d1      	b.n	8003568 <sin+0x30>
 80035c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80035c8:	ed9d 0b00 	vldr	d0, [sp]
 80035cc:	f000 fa18 	bl	8003a00 <__kernel_cos>
 80035d0:	e7f1      	b.n	80035b6 <sin+0x7e>
 80035d2:	bf00      	nop
 80035d4:	f3af 8000 	nop.w
	...
 80035e0:	3fe921fb 	.word	0x3fe921fb
 80035e4:	7fefffff 	.word	0x7fefffff

080035e8 <__ieee754_rem_pio2>:
 80035e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ec:	ed2d 8b02 	vpush	{d8}
 80035f0:	ec55 4b10 	vmov	r4, r5, d0
 80035f4:	4bca      	ldr	r3, [pc, #808]	; (8003920 <__ieee754_rem_pio2+0x338>)
 80035f6:	b08b      	sub	sp, #44	; 0x2c
 80035f8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80035fc:	4598      	cmp	r8, r3
 80035fe:	4682      	mov	sl, r0
 8003600:	9502      	str	r5, [sp, #8]
 8003602:	dc08      	bgt.n	8003616 <__ieee754_rem_pio2+0x2e>
 8003604:	2200      	movs	r2, #0
 8003606:	2300      	movs	r3, #0
 8003608:	ed80 0b00 	vstr	d0, [r0]
 800360c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003610:	f04f 0b00 	mov.w	fp, #0
 8003614:	e028      	b.n	8003668 <__ieee754_rem_pio2+0x80>
 8003616:	4bc3      	ldr	r3, [pc, #780]	; (8003924 <__ieee754_rem_pio2+0x33c>)
 8003618:	4598      	cmp	r8, r3
 800361a:	dc78      	bgt.n	800370e <__ieee754_rem_pio2+0x126>
 800361c:	9b02      	ldr	r3, [sp, #8]
 800361e:	4ec2      	ldr	r6, [pc, #776]	; (8003928 <__ieee754_rem_pio2+0x340>)
 8003620:	2b00      	cmp	r3, #0
 8003622:	ee10 0a10 	vmov	r0, s0
 8003626:	a3b0      	add	r3, pc, #704	; (adr r3, 80038e8 <__ieee754_rem_pio2+0x300>)
 8003628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362c:	4629      	mov	r1, r5
 800362e:	dd39      	ble.n	80036a4 <__ieee754_rem_pio2+0xbc>
 8003630:	f7fc fdce 	bl	80001d0 <__aeabi_dsub>
 8003634:	45b0      	cmp	r8, r6
 8003636:	4604      	mov	r4, r0
 8003638:	460d      	mov	r5, r1
 800363a:	d01b      	beq.n	8003674 <__ieee754_rem_pio2+0x8c>
 800363c:	a3ac      	add	r3, pc, #688	; (adr r3, 80038f0 <__ieee754_rem_pio2+0x308>)
 800363e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003642:	f7fc fdc5 	bl	80001d0 <__aeabi_dsub>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	e9ca 2300 	strd	r2, r3, [sl]
 800364e:	4620      	mov	r0, r4
 8003650:	4629      	mov	r1, r5
 8003652:	f7fc fdbd 	bl	80001d0 <__aeabi_dsub>
 8003656:	a3a6      	add	r3, pc, #664	; (adr r3, 80038f0 <__ieee754_rem_pio2+0x308>)
 8003658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365c:	f7fc fdb8 	bl	80001d0 <__aeabi_dsub>
 8003660:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003664:	f04f 0b01 	mov.w	fp, #1
 8003668:	4658      	mov	r0, fp
 800366a:	b00b      	add	sp, #44	; 0x2c
 800366c:	ecbd 8b02 	vpop	{d8}
 8003670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003674:	a3a0      	add	r3, pc, #640	; (adr r3, 80038f8 <__ieee754_rem_pio2+0x310>)
 8003676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367a:	f7fc fda9 	bl	80001d0 <__aeabi_dsub>
 800367e:	a3a0      	add	r3, pc, #640	; (adr r3, 8003900 <__ieee754_rem_pio2+0x318>)
 8003680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003684:	4604      	mov	r4, r0
 8003686:	460d      	mov	r5, r1
 8003688:	f7fc fda2 	bl	80001d0 <__aeabi_dsub>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	e9ca 2300 	strd	r2, r3, [sl]
 8003694:	4620      	mov	r0, r4
 8003696:	4629      	mov	r1, r5
 8003698:	f7fc fd9a 	bl	80001d0 <__aeabi_dsub>
 800369c:	a398      	add	r3, pc, #608	; (adr r3, 8003900 <__ieee754_rem_pio2+0x318>)
 800369e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a2:	e7db      	b.n	800365c <__ieee754_rem_pio2+0x74>
 80036a4:	f7fc fd96 	bl	80001d4 <__adddf3>
 80036a8:	45b0      	cmp	r8, r6
 80036aa:	4604      	mov	r4, r0
 80036ac:	460d      	mov	r5, r1
 80036ae:	d016      	beq.n	80036de <__ieee754_rem_pio2+0xf6>
 80036b0:	a38f      	add	r3, pc, #572	; (adr r3, 80038f0 <__ieee754_rem_pio2+0x308>)
 80036b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b6:	f7fc fd8d 	bl	80001d4 <__adddf3>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	e9ca 2300 	strd	r2, r3, [sl]
 80036c2:	4620      	mov	r0, r4
 80036c4:	4629      	mov	r1, r5
 80036c6:	f7fc fd83 	bl	80001d0 <__aeabi_dsub>
 80036ca:	a389      	add	r3, pc, #548	; (adr r3, 80038f0 <__ieee754_rem_pio2+0x308>)
 80036cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d0:	f7fc fd80 	bl	80001d4 <__adddf3>
 80036d4:	f04f 3bff 	mov.w	fp, #4294967295
 80036d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80036dc:	e7c4      	b.n	8003668 <__ieee754_rem_pio2+0x80>
 80036de:	a386      	add	r3, pc, #536	; (adr r3, 80038f8 <__ieee754_rem_pio2+0x310>)
 80036e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e4:	f7fc fd76 	bl	80001d4 <__adddf3>
 80036e8:	a385      	add	r3, pc, #532	; (adr r3, 8003900 <__ieee754_rem_pio2+0x318>)
 80036ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ee:	4604      	mov	r4, r0
 80036f0:	460d      	mov	r5, r1
 80036f2:	f7fc fd6f 	bl	80001d4 <__adddf3>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	e9ca 2300 	strd	r2, r3, [sl]
 80036fe:	4620      	mov	r0, r4
 8003700:	4629      	mov	r1, r5
 8003702:	f7fc fd65 	bl	80001d0 <__aeabi_dsub>
 8003706:	a37e      	add	r3, pc, #504	; (adr r3, 8003900 <__ieee754_rem_pio2+0x318>)
 8003708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370c:	e7e0      	b.n	80036d0 <__ieee754_rem_pio2+0xe8>
 800370e:	4b87      	ldr	r3, [pc, #540]	; (800392c <__ieee754_rem_pio2+0x344>)
 8003710:	4598      	cmp	r8, r3
 8003712:	f300 80d9 	bgt.w	80038c8 <__ieee754_rem_pio2+0x2e0>
 8003716:	f000 fe49 	bl	80043ac <fabs>
 800371a:	ec55 4b10 	vmov	r4, r5, d0
 800371e:	ee10 0a10 	vmov	r0, s0
 8003722:	a379      	add	r3, pc, #484	; (adr r3, 8003908 <__ieee754_rem_pio2+0x320>)
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	4629      	mov	r1, r5
 800372a:	f7fc ff09 	bl	8000540 <__aeabi_dmul>
 800372e:	4b80      	ldr	r3, [pc, #512]	; (8003930 <__ieee754_rem_pio2+0x348>)
 8003730:	2200      	movs	r2, #0
 8003732:	f7fc fd4f 	bl	80001d4 <__adddf3>
 8003736:	f7fd f99d 	bl	8000a74 <__aeabi_d2iz>
 800373a:	4683      	mov	fp, r0
 800373c:	f7fc fe96 	bl	800046c <__aeabi_i2d>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	ec43 2b18 	vmov	d8, r2, r3
 8003748:	a367      	add	r3, pc, #412	; (adr r3, 80038e8 <__ieee754_rem_pio2+0x300>)
 800374a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374e:	f7fc fef7 	bl	8000540 <__aeabi_dmul>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4620      	mov	r0, r4
 8003758:	4629      	mov	r1, r5
 800375a:	f7fc fd39 	bl	80001d0 <__aeabi_dsub>
 800375e:	a364      	add	r3, pc, #400	; (adr r3, 80038f0 <__ieee754_rem_pio2+0x308>)
 8003760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003764:	4606      	mov	r6, r0
 8003766:	460f      	mov	r7, r1
 8003768:	ec51 0b18 	vmov	r0, r1, d8
 800376c:	f7fc fee8 	bl	8000540 <__aeabi_dmul>
 8003770:	f1bb 0f1f 	cmp.w	fp, #31
 8003774:	4604      	mov	r4, r0
 8003776:	460d      	mov	r5, r1
 8003778:	dc0d      	bgt.n	8003796 <__ieee754_rem_pio2+0x1ae>
 800377a:	4b6e      	ldr	r3, [pc, #440]	; (8003934 <__ieee754_rem_pio2+0x34c>)
 800377c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8003780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003784:	4543      	cmp	r3, r8
 8003786:	d006      	beq.n	8003796 <__ieee754_rem_pio2+0x1ae>
 8003788:	4622      	mov	r2, r4
 800378a:	462b      	mov	r3, r5
 800378c:	4630      	mov	r0, r6
 800378e:	4639      	mov	r1, r7
 8003790:	f7fc fd1e 	bl	80001d0 <__aeabi_dsub>
 8003794:	e00f      	b.n	80037b6 <__ieee754_rem_pio2+0x1ce>
 8003796:	462b      	mov	r3, r5
 8003798:	4622      	mov	r2, r4
 800379a:	4630      	mov	r0, r6
 800379c:	4639      	mov	r1, r7
 800379e:	f7fc fd17 	bl	80001d0 <__aeabi_dsub>
 80037a2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80037a6:	9303      	str	r3, [sp, #12]
 80037a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80037ac:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80037b0:	f1b8 0f10 	cmp.w	r8, #16
 80037b4:	dc02      	bgt.n	80037bc <__ieee754_rem_pio2+0x1d4>
 80037b6:	e9ca 0100 	strd	r0, r1, [sl]
 80037ba:	e039      	b.n	8003830 <__ieee754_rem_pio2+0x248>
 80037bc:	a34e      	add	r3, pc, #312	; (adr r3, 80038f8 <__ieee754_rem_pio2+0x310>)
 80037be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c2:	ec51 0b18 	vmov	r0, r1, d8
 80037c6:	f7fc febb 	bl	8000540 <__aeabi_dmul>
 80037ca:	4604      	mov	r4, r0
 80037cc:	460d      	mov	r5, r1
 80037ce:	4602      	mov	r2, r0
 80037d0:	460b      	mov	r3, r1
 80037d2:	4630      	mov	r0, r6
 80037d4:	4639      	mov	r1, r7
 80037d6:	f7fc fcfb 	bl	80001d0 <__aeabi_dsub>
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	4680      	mov	r8, r0
 80037e0:	4689      	mov	r9, r1
 80037e2:	4630      	mov	r0, r6
 80037e4:	4639      	mov	r1, r7
 80037e6:	f7fc fcf3 	bl	80001d0 <__aeabi_dsub>
 80037ea:	4622      	mov	r2, r4
 80037ec:	462b      	mov	r3, r5
 80037ee:	f7fc fcef 	bl	80001d0 <__aeabi_dsub>
 80037f2:	a343      	add	r3, pc, #268	; (adr r3, 8003900 <__ieee754_rem_pio2+0x318>)
 80037f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f8:	4604      	mov	r4, r0
 80037fa:	460d      	mov	r5, r1
 80037fc:	ec51 0b18 	vmov	r0, r1, d8
 8003800:	f7fc fe9e 	bl	8000540 <__aeabi_dmul>
 8003804:	4622      	mov	r2, r4
 8003806:	462b      	mov	r3, r5
 8003808:	f7fc fce2 	bl	80001d0 <__aeabi_dsub>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4604      	mov	r4, r0
 8003812:	460d      	mov	r5, r1
 8003814:	4640      	mov	r0, r8
 8003816:	4649      	mov	r1, r9
 8003818:	f7fc fcda 	bl	80001d0 <__aeabi_dsub>
 800381c:	9a03      	ldr	r2, [sp, #12]
 800381e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b31      	cmp	r3, #49	; 0x31
 8003826:	dc24      	bgt.n	8003872 <__ieee754_rem_pio2+0x28a>
 8003828:	e9ca 0100 	strd	r0, r1, [sl]
 800382c:	4646      	mov	r6, r8
 800382e:	464f      	mov	r7, r9
 8003830:	e9da 8900 	ldrd	r8, r9, [sl]
 8003834:	4630      	mov	r0, r6
 8003836:	4642      	mov	r2, r8
 8003838:	464b      	mov	r3, r9
 800383a:	4639      	mov	r1, r7
 800383c:	f7fc fcc8 	bl	80001d0 <__aeabi_dsub>
 8003840:	462b      	mov	r3, r5
 8003842:	4622      	mov	r2, r4
 8003844:	f7fc fcc4 	bl	80001d0 <__aeabi_dsub>
 8003848:	9b02      	ldr	r3, [sp, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003850:	f6bf af0a 	bge.w	8003668 <__ieee754_rem_pio2+0x80>
 8003854:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003858:	f8ca 3004 	str.w	r3, [sl, #4]
 800385c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003860:	f8ca 8000 	str.w	r8, [sl]
 8003864:	f8ca 0008 	str.w	r0, [sl, #8]
 8003868:	f8ca 300c 	str.w	r3, [sl, #12]
 800386c:	f1cb 0b00 	rsb	fp, fp, #0
 8003870:	e6fa      	b.n	8003668 <__ieee754_rem_pio2+0x80>
 8003872:	a327      	add	r3, pc, #156	; (adr r3, 8003910 <__ieee754_rem_pio2+0x328>)
 8003874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003878:	ec51 0b18 	vmov	r0, r1, d8
 800387c:	f7fc fe60 	bl	8000540 <__aeabi_dmul>
 8003880:	4604      	mov	r4, r0
 8003882:	460d      	mov	r5, r1
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4640      	mov	r0, r8
 800388a:	4649      	mov	r1, r9
 800388c:	f7fc fca0 	bl	80001d0 <__aeabi_dsub>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4606      	mov	r6, r0
 8003896:	460f      	mov	r7, r1
 8003898:	4640      	mov	r0, r8
 800389a:	4649      	mov	r1, r9
 800389c:	f7fc fc98 	bl	80001d0 <__aeabi_dsub>
 80038a0:	4622      	mov	r2, r4
 80038a2:	462b      	mov	r3, r5
 80038a4:	f7fc fc94 	bl	80001d0 <__aeabi_dsub>
 80038a8:	a31b      	add	r3, pc, #108	; (adr r3, 8003918 <__ieee754_rem_pio2+0x330>)
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	4604      	mov	r4, r0
 80038b0:	460d      	mov	r5, r1
 80038b2:	ec51 0b18 	vmov	r0, r1, d8
 80038b6:	f7fc fe43 	bl	8000540 <__aeabi_dmul>
 80038ba:	4622      	mov	r2, r4
 80038bc:	462b      	mov	r3, r5
 80038be:	f7fc fc87 	bl	80001d0 <__aeabi_dsub>
 80038c2:	4604      	mov	r4, r0
 80038c4:	460d      	mov	r5, r1
 80038c6:	e75f      	b.n	8003788 <__ieee754_rem_pio2+0x1a0>
 80038c8:	4b1b      	ldr	r3, [pc, #108]	; (8003938 <__ieee754_rem_pio2+0x350>)
 80038ca:	4598      	cmp	r8, r3
 80038cc:	dd36      	ble.n	800393c <__ieee754_rem_pio2+0x354>
 80038ce:	ee10 2a10 	vmov	r2, s0
 80038d2:	462b      	mov	r3, r5
 80038d4:	4620      	mov	r0, r4
 80038d6:	4629      	mov	r1, r5
 80038d8:	f7fc fc7a 	bl	80001d0 <__aeabi_dsub>
 80038dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80038e0:	e9ca 0100 	strd	r0, r1, [sl]
 80038e4:	e694      	b.n	8003610 <__ieee754_rem_pio2+0x28>
 80038e6:	bf00      	nop
 80038e8:	54400000 	.word	0x54400000
 80038ec:	3ff921fb 	.word	0x3ff921fb
 80038f0:	1a626331 	.word	0x1a626331
 80038f4:	3dd0b461 	.word	0x3dd0b461
 80038f8:	1a600000 	.word	0x1a600000
 80038fc:	3dd0b461 	.word	0x3dd0b461
 8003900:	2e037073 	.word	0x2e037073
 8003904:	3ba3198a 	.word	0x3ba3198a
 8003908:	6dc9c883 	.word	0x6dc9c883
 800390c:	3fe45f30 	.word	0x3fe45f30
 8003910:	2e000000 	.word	0x2e000000
 8003914:	3ba3198a 	.word	0x3ba3198a
 8003918:	252049c1 	.word	0x252049c1
 800391c:	397b839a 	.word	0x397b839a
 8003920:	3fe921fb 	.word	0x3fe921fb
 8003924:	4002d97b 	.word	0x4002d97b
 8003928:	3ff921fb 	.word	0x3ff921fb
 800392c:	413921fb 	.word	0x413921fb
 8003930:	3fe00000 	.word	0x3fe00000
 8003934:	08004620 	.word	0x08004620
 8003938:	7fefffff 	.word	0x7fefffff
 800393c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8003940:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8003944:	ee10 0a10 	vmov	r0, s0
 8003948:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800394c:	ee10 6a10 	vmov	r6, s0
 8003950:	460f      	mov	r7, r1
 8003952:	f7fd f88f 	bl	8000a74 <__aeabi_d2iz>
 8003956:	f7fc fd89 	bl	800046c <__aeabi_i2d>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4630      	mov	r0, r6
 8003960:	4639      	mov	r1, r7
 8003962:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003966:	f7fc fc33 	bl	80001d0 <__aeabi_dsub>
 800396a:	4b23      	ldr	r3, [pc, #140]	; (80039f8 <__ieee754_rem_pio2+0x410>)
 800396c:	2200      	movs	r2, #0
 800396e:	f7fc fde7 	bl	8000540 <__aeabi_dmul>
 8003972:	460f      	mov	r7, r1
 8003974:	4606      	mov	r6, r0
 8003976:	f7fd f87d 	bl	8000a74 <__aeabi_d2iz>
 800397a:	f7fc fd77 	bl	800046c <__aeabi_i2d>
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	4630      	mov	r0, r6
 8003984:	4639      	mov	r1, r7
 8003986:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800398a:	f7fc fc21 	bl	80001d0 <__aeabi_dsub>
 800398e:	4b1a      	ldr	r3, [pc, #104]	; (80039f8 <__ieee754_rem_pio2+0x410>)
 8003990:	2200      	movs	r2, #0
 8003992:	f7fc fdd5 	bl	8000540 <__aeabi_dmul>
 8003996:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800399a:	ad04      	add	r5, sp, #16
 800399c:	f04f 0803 	mov.w	r8, #3
 80039a0:	46a9      	mov	r9, r5
 80039a2:	2600      	movs	r6, #0
 80039a4:	2700      	movs	r7, #0
 80039a6:	4632      	mov	r2, r6
 80039a8:	463b      	mov	r3, r7
 80039aa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80039ae:	46c3      	mov	fp, r8
 80039b0:	3d08      	subs	r5, #8
 80039b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80039b6:	f7fd f82b 	bl	8000a10 <__aeabi_dcmpeq>
 80039ba:	2800      	cmp	r0, #0
 80039bc:	d1f3      	bne.n	80039a6 <__ieee754_rem_pio2+0x3be>
 80039be:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <__ieee754_rem_pio2+0x414>)
 80039c0:	9301      	str	r3, [sp, #4]
 80039c2:	2302      	movs	r3, #2
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	4622      	mov	r2, r4
 80039c8:	465b      	mov	r3, fp
 80039ca:	4651      	mov	r1, sl
 80039cc:	4648      	mov	r0, r9
 80039ce:	f000 f8df 	bl	8003b90 <__kernel_rem_pio2>
 80039d2:	9b02      	ldr	r3, [sp, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	4683      	mov	fp, r0
 80039d8:	f6bf ae46 	bge.w	8003668 <__ieee754_rem_pio2+0x80>
 80039dc:	e9da 2100 	ldrd	r2, r1, [sl]
 80039e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80039e4:	e9ca 2300 	strd	r2, r3, [sl]
 80039e8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80039ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80039f0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80039f4:	e73a      	b.n	800386c <__ieee754_rem_pio2+0x284>
 80039f6:	bf00      	nop
 80039f8:	41700000 	.word	0x41700000
 80039fc:	080046a0 	.word	0x080046a0

08003a00 <__kernel_cos>:
 8003a00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a04:	ec57 6b10 	vmov	r6, r7, d0
 8003a08:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003a0c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8003a10:	ed8d 1b00 	vstr	d1, [sp]
 8003a14:	da07      	bge.n	8003a26 <__kernel_cos+0x26>
 8003a16:	ee10 0a10 	vmov	r0, s0
 8003a1a:	4639      	mov	r1, r7
 8003a1c:	f7fd f82a 	bl	8000a74 <__aeabi_d2iz>
 8003a20:	2800      	cmp	r0, #0
 8003a22:	f000 8088 	beq.w	8003b36 <__kernel_cos+0x136>
 8003a26:	4632      	mov	r2, r6
 8003a28:	463b      	mov	r3, r7
 8003a2a:	4630      	mov	r0, r6
 8003a2c:	4639      	mov	r1, r7
 8003a2e:	f7fc fd87 	bl	8000540 <__aeabi_dmul>
 8003a32:	4b51      	ldr	r3, [pc, #324]	; (8003b78 <__kernel_cos+0x178>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	4604      	mov	r4, r0
 8003a38:	460d      	mov	r5, r1
 8003a3a:	f7fc fd81 	bl	8000540 <__aeabi_dmul>
 8003a3e:	a340      	add	r3, pc, #256	; (adr r3, 8003b40 <__kernel_cos+0x140>)
 8003a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a44:	4682      	mov	sl, r0
 8003a46:	468b      	mov	fp, r1
 8003a48:	4620      	mov	r0, r4
 8003a4a:	4629      	mov	r1, r5
 8003a4c:	f7fc fd78 	bl	8000540 <__aeabi_dmul>
 8003a50:	a33d      	add	r3, pc, #244	; (adr r3, 8003b48 <__kernel_cos+0x148>)
 8003a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a56:	f7fc fbbd 	bl	80001d4 <__adddf3>
 8003a5a:	4622      	mov	r2, r4
 8003a5c:	462b      	mov	r3, r5
 8003a5e:	f7fc fd6f 	bl	8000540 <__aeabi_dmul>
 8003a62:	a33b      	add	r3, pc, #236	; (adr r3, 8003b50 <__kernel_cos+0x150>)
 8003a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a68:	f7fc fbb2 	bl	80001d0 <__aeabi_dsub>
 8003a6c:	4622      	mov	r2, r4
 8003a6e:	462b      	mov	r3, r5
 8003a70:	f7fc fd66 	bl	8000540 <__aeabi_dmul>
 8003a74:	a338      	add	r3, pc, #224	; (adr r3, 8003b58 <__kernel_cos+0x158>)
 8003a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7a:	f7fc fbab 	bl	80001d4 <__adddf3>
 8003a7e:	4622      	mov	r2, r4
 8003a80:	462b      	mov	r3, r5
 8003a82:	f7fc fd5d 	bl	8000540 <__aeabi_dmul>
 8003a86:	a336      	add	r3, pc, #216	; (adr r3, 8003b60 <__kernel_cos+0x160>)
 8003a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8c:	f7fc fba0 	bl	80001d0 <__aeabi_dsub>
 8003a90:	4622      	mov	r2, r4
 8003a92:	462b      	mov	r3, r5
 8003a94:	f7fc fd54 	bl	8000540 <__aeabi_dmul>
 8003a98:	a333      	add	r3, pc, #204	; (adr r3, 8003b68 <__kernel_cos+0x168>)
 8003a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9e:	f7fc fb99 	bl	80001d4 <__adddf3>
 8003aa2:	4622      	mov	r2, r4
 8003aa4:	462b      	mov	r3, r5
 8003aa6:	f7fc fd4b 	bl	8000540 <__aeabi_dmul>
 8003aaa:	4622      	mov	r2, r4
 8003aac:	462b      	mov	r3, r5
 8003aae:	f7fc fd47 	bl	8000540 <__aeabi_dmul>
 8003ab2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003ab6:	4604      	mov	r4, r0
 8003ab8:	460d      	mov	r5, r1
 8003aba:	4630      	mov	r0, r6
 8003abc:	4639      	mov	r1, r7
 8003abe:	f7fc fd3f 	bl	8000540 <__aeabi_dmul>
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	4620      	mov	r0, r4
 8003aca:	f7fc fb81 	bl	80001d0 <__aeabi_dsub>
 8003ace:	4b2b      	ldr	r3, [pc, #172]	; (8003b7c <__kernel_cos+0x17c>)
 8003ad0:	4598      	cmp	r8, r3
 8003ad2:	4606      	mov	r6, r0
 8003ad4:	460f      	mov	r7, r1
 8003ad6:	dc10      	bgt.n	8003afa <__kernel_cos+0xfa>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4650      	mov	r0, sl
 8003ade:	4659      	mov	r1, fp
 8003ae0:	f7fc fb76 	bl	80001d0 <__aeabi_dsub>
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	4926      	ldr	r1, [pc, #152]	; (8003b80 <__kernel_cos+0x180>)
 8003ae8:	4602      	mov	r2, r0
 8003aea:	2000      	movs	r0, #0
 8003aec:	f7fc fb70 	bl	80001d0 <__aeabi_dsub>
 8003af0:	ec41 0b10 	vmov	d0, r0, r1
 8003af4:	b003      	add	sp, #12
 8003af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003afa:	4b22      	ldr	r3, [pc, #136]	; (8003b84 <__kernel_cos+0x184>)
 8003afc:	4920      	ldr	r1, [pc, #128]	; (8003b80 <__kernel_cos+0x180>)
 8003afe:	4598      	cmp	r8, r3
 8003b00:	bfcc      	ite	gt
 8003b02:	4d21      	ldrgt	r5, [pc, #132]	; (8003b88 <__kernel_cos+0x188>)
 8003b04:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8003b08:	2400      	movs	r4, #0
 8003b0a:	4622      	mov	r2, r4
 8003b0c:	462b      	mov	r3, r5
 8003b0e:	2000      	movs	r0, #0
 8003b10:	f7fc fb5e 	bl	80001d0 <__aeabi_dsub>
 8003b14:	4622      	mov	r2, r4
 8003b16:	4680      	mov	r8, r0
 8003b18:	4689      	mov	r9, r1
 8003b1a:	462b      	mov	r3, r5
 8003b1c:	4650      	mov	r0, sl
 8003b1e:	4659      	mov	r1, fp
 8003b20:	f7fc fb56 	bl	80001d0 <__aeabi_dsub>
 8003b24:	4632      	mov	r2, r6
 8003b26:	463b      	mov	r3, r7
 8003b28:	f7fc fb52 	bl	80001d0 <__aeabi_dsub>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4640      	mov	r0, r8
 8003b32:	4649      	mov	r1, r9
 8003b34:	e7da      	b.n	8003aec <__kernel_cos+0xec>
 8003b36:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8003b70 <__kernel_cos+0x170>
 8003b3a:	e7db      	b.n	8003af4 <__kernel_cos+0xf4>
 8003b3c:	f3af 8000 	nop.w
 8003b40:	be8838d4 	.word	0xbe8838d4
 8003b44:	bda8fae9 	.word	0xbda8fae9
 8003b48:	bdb4b1c4 	.word	0xbdb4b1c4
 8003b4c:	3e21ee9e 	.word	0x3e21ee9e
 8003b50:	809c52ad 	.word	0x809c52ad
 8003b54:	3e927e4f 	.word	0x3e927e4f
 8003b58:	19cb1590 	.word	0x19cb1590
 8003b5c:	3efa01a0 	.word	0x3efa01a0
 8003b60:	16c15177 	.word	0x16c15177
 8003b64:	3f56c16c 	.word	0x3f56c16c
 8003b68:	5555554c 	.word	0x5555554c
 8003b6c:	3fa55555 	.word	0x3fa55555
 8003b70:	00000000 	.word	0x00000000
 8003b74:	3ff00000 	.word	0x3ff00000
 8003b78:	3fe00000 	.word	0x3fe00000
 8003b7c:	3fd33332 	.word	0x3fd33332
 8003b80:	3ff00000 	.word	0x3ff00000
 8003b84:	3fe90000 	.word	0x3fe90000
 8003b88:	3fd20000 	.word	0x3fd20000
 8003b8c:	00000000 	.word	0x00000000

08003b90 <__kernel_rem_pio2>:
 8003b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b94:	ed2d 8b02 	vpush	{d8}
 8003b98:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8003b9c:	f112 0f14 	cmn.w	r2, #20
 8003ba0:	9308      	str	r3, [sp, #32]
 8003ba2:	9101      	str	r1, [sp, #4]
 8003ba4:	4bc4      	ldr	r3, [pc, #784]	; (8003eb8 <__kernel_rem_pio2+0x328>)
 8003ba6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8003ba8:	900b      	str	r0, [sp, #44]	; 0x2c
 8003baa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003bae:	9302      	str	r3, [sp, #8]
 8003bb0:	9b08      	ldr	r3, [sp, #32]
 8003bb2:	f103 33ff 	add.w	r3, r3, #4294967295
 8003bb6:	bfa8      	it	ge
 8003bb8:	1ed4      	subge	r4, r2, #3
 8003bba:	9306      	str	r3, [sp, #24]
 8003bbc:	bfb2      	itee	lt
 8003bbe:	2400      	movlt	r4, #0
 8003bc0:	2318      	movge	r3, #24
 8003bc2:	fb94 f4f3 	sdivge	r4, r4, r3
 8003bc6:	f06f 0317 	mvn.w	r3, #23
 8003bca:	fb04 3303 	mla	r3, r4, r3, r3
 8003bce:	eb03 0a02 	add.w	sl, r3, r2
 8003bd2:	9b02      	ldr	r3, [sp, #8]
 8003bd4:	9a06      	ldr	r2, [sp, #24]
 8003bd6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8003ea8 <__kernel_rem_pio2+0x318>
 8003bda:	eb03 0802 	add.w	r8, r3, r2
 8003bde:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8003be0:	1aa7      	subs	r7, r4, r2
 8003be2:	ae22      	add	r6, sp, #136	; 0x88
 8003be4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003be8:	2500      	movs	r5, #0
 8003bea:	4545      	cmp	r5, r8
 8003bec:	dd13      	ble.n	8003c16 <__kernel_rem_pio2+0x86>
 8003bee:	9b08      	ldr	r3, [sp, #32]
 8003bf0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8003ea8 <__kernel_rem_pio2+0x318>
 8003bf4:	aa22      	add	r2, sp, #136	; 0x88
 8003bf6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003bfa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8003bfe:	f04f 0800 	mov.w	r8, #0
 8003c02:	9b02      	ldr	r3, [sp, #8]
 8003c04:	4598      	cmp	r8, r3
 8003c06:	dc2f      	bgt.n	8003c68 <__kernel_rem_pio2+0xd8>
 8003c08:	ed8d 8b04 	vstr	d8, [sp, #16]
 8003c0c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8003c10:	462f      	mov	r7, r5
 8003c12:	2600      	movs	r6, #0
 8003c14:	e01b      	b.n	8003c4e <__kernel_rem_pio2+0xbe>
 8003c16:	42ef      	cmn	r7, r5
 8003c18:	d407      	bmi.n	8003c2a <__kernel_rem_pio2+0x9a>
 8003c1a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003c1e:	f7fc fc25 	bl	800046c <__aeabi_i2d>
 8003c22:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003c26:	3501      	adds	r5, #1
 8003c28:	e7df      	b.n	8003bea <__kernel_rem_pio2+0x5a>
 8003c2a:	ec51 0b18 	vmov	r0, r1, d8
 8003c2e:	e7f8      	b.n	8003c22 <__kernel_rem_pio2+0x92>
 8003c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c34:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003c38:	f7fc fc82 	bl	8000540 <__aeabi_dmul>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c44:	f7fc fac6 	bl	80001d4 <__adddf3>
 8003c48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c4c:	3601      	adds	r6, #1
 8003c4e:	9b06      	ldr	r3, [sp, #24]
 8003c50:	429e      	cmp	r6, r3
 8003c52:	f1a7 0708 	sub.w	r7, r7, #8
 8003c56:	ddeb      	ble.n	8003c30 <__kernel_rem_pio2+0xa0>
 8003c58:	ed9d 7b04 	vldr	d7, [sp, #16]
 8003c5c:	f108 0801 	add.w	r8, r8, #1
 8003c60:	ecab 7b02 	vstmia	fp!, {d7}
 8003c64:	3508      	adds	r5, #8
 8003c66:	e7cc      	b.n	8003c02 <__kernel_rem_pio2+0x72>
 8003c68:	9b02      	ldr	r3, [sp, #8]
 8003c6a:	aa0e      	add	r2, sp, #56	; 0x38
 8003c6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003c70:	930d      	str	r3, [sp, #52]	; 0x34
 8003c72:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8003c74:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003c78:	9c02      	ldr	r4, [sp, #8]
 8003c7a:	930c      	str	r3, [sp, #48]	; 0x30
 8003c7c:	00e3      	lsls	r3, r4, #3
 8003c7e:	930a      	str	r3, [sp, #40]	; 0x28
 8003c80:	ab9a      	add	r3, sp, #616	; 0x268
 8003c82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003c86:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8003c8a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8003c8e:	ab72      	add	r3, sp, #456	; 0x1c8
 8003c90:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8003c94:	46c3      	mov	fp, r8
 8003c96:	46a1      	mov	r9, r4
 8003c98:	f1b9 0f00 	cmp.w	r9, #0
 8003c9c:	f1a5 0508 	sub.w	r5, r5, #8
 8003ca0:	dc77      	bgt.n	8003d92 <__kernel_rem_pio2+0x202>
 8003ca2:	ec47 6b10 	vmov	d0, r6, r7
 8003ca6:	4650      	mov	r0, sl
 8003ca8:	f000 fc0a 	bl	80044c0 <scalbn>
 8003cac:	ec57 6b10 	vmov	r6, r7, d0
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003cb6:	ee10 0a10 	vmov	r0, s0
 8003cba:	4639      	mov	r1, r7
 8003cbc:	f7fc fc40 	bl	8000540 <__aeabi_dmul>
 8003cc0:	ec41 0b10 	vmov	d0, r0, r1
 8003cc4:	f000 fb7c 	bl	80043c0 <floor>
 8003cc8:	4b7c      	ldr	r3, [pc, #496]	; (8003ebc <__kernel_rem_pio2+0x32c>)
 8003cca:	ec51 0b10 	vmov	r0, r1, d0
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f7fc fc36 	bl	8000540 <__aeabi_dmul>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4630      	mov	r0, r6
 8003cda:	4639      	mov	r1, r7
 8003cdc:	f7fc fa78 	bl	80001d0 <__aeabi_dsub>
 8003ce0:	460f      	mov	r7, r1
 8003ce2:	4606      	mov	r6, r0
 8003ce4:	f7fc fec6 	bl	8000a74 <__aeabi_d2iz>
 8003ce8:	9004      	str	r0, [sp, #16]
 8003cea:	f7fc fbbf 	bl	800046c <__aeabi_i2d>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4630      	mov	r0, r6
 8003cf4:	4639      	mov	r1, r7
 8003cf6:	f7fc fa6b 	bl	80001d0 <__aeabi_dsub>
 8003cfa:	f1ba 0f00 	cmp.w	sl, #0
 8003cfe:	4606      	mov	r6, r0
 8003d00:	460f      	mov	r7, r1
 8003d02:	dd6d      	ble.n	8003de0 <__kernel_rem_pio2+0x250>
 8003d04:	1e62      	subs	r2, r4, #1
 8003d06:	ab0e      	add	r3, sp, #56	; 0x38
 8003d08:	9d04      	ldr	r5, [sp, #16]
 8003d0a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003d0e:	f1ca 0118 	rsb	r1, sl, #24
 8003d12:	fa40 f301 	asr.w	r3, r0, r1
 8003d16:	441d      	add	r5, r3
 8003d18:	408b      	lsls	r3, r1
 8003d1a:	1ac0      	subs	r0, r0, r3
 8003d1c:	ab0e      	add	r3, sp, #56	; 0x38
 8003d1e:	9504      	str	r5, [sp, #16]
 8003d20:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003d24:	f1ca 0317 	rsb	r3, sl, #23
 8003d28:	fa40 fb03 	asr.w	fp, r0, r3
 8003d2c:	f1bb 0f00 	cmp.w	fp, #0
 8003d30:	dd65      	ble.n	8003dfe <__kernel_rem_pio2+0x26e>
 8003d32:	9b04      	ldr	r3, [sp, #16]
 8003d34:	2200      	movs	r2, #0
 8003d36:	3301      	adds	r3, #1
 8003d38:	9304      	str	r3, [sp, #16]
 8003d3a:	4615      	mov	r5, r2
 8003d3c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003d40:	4294      	cmp	r4, r2
 8003d42:	f300 809c 	bgt.w	8003e7e <__kernel_rem_pio2+0x2ee>
 8003d46:	f1ba 0f00 	cmp.w	sl, #0
 8003d4a:	dd07      	ble.n	8003d5c <__kernel_rem_pio2+0x1cc>
 8003d4c:	f1ba 0f01 	cmp.w	sl, #1
 8003d50:	f000 80c0 	beq.w	8003ed4 <__kernel_rem_pio2+0x344>
 8003d54:	f1ba 0f02 	cmp.w	sl, #2
 8003d58:	f000 80c6 	beq.w	8003ee8 <__kernel_rem_pio2+0x358>
 8003d5c:	f1bb 0f02 	cmp.w	fp, #2
 8003d60:	d14d      	bne.n	8003dfe <__kernel_rem_pio2+0x26e>
 8003d62:	4632      	mov	r2, r6
 8003d64:	463b      	mov	r3, r7
 8003d66:	4956      	ldr	r1, [pc, #344]	; (8003ec0 <__kernel_rem_pio2+0x330>)
 8003d68:	2000      	movs	r0, #0
 8003d6a:	f7fc fa31 	bl	80001d0 <__aeabi_dsub>
 8003d6e:	4606      	mov	r6, r0
 8003d70:	460f      	mov	r7, r1
 8003d72:	2d00      	cmp	r5, #0
 8003d74:	d043      	beq.n	8003dfe <__kernel_rem_pio2+0x26e>
 8003d76:	4650      	mov	r0, sl
 8003d78:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8003eb0 <__kernel_rem_pio2+0x320>
 8003d7c:	f000 fba0 	bl	80044c0 <scalbn>
 8003d80:	4630      	mov	r0, r6
 8003d82:	4639      	mov	r1, r7
 8003d84:	ec53 2b10 	vmov	r2, r3, d0
 8003d88:	f7fc fa22 	bl	80001d0 <__aeabi_dsub>
 8003d8c:	4606      	mov	r6, r0
 8003d8e:	460f      	mov	r7, r1
 8003d90:	e035      	b.n	8003dfe <__kernel_rem_pio2+0x26e>
 8003d92:	4b4c      	ldr	r3, [pc, #304]	; (8003ec4 <__kernel_rem_pio2+0x334>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	4630      	mov	r0, r6
 8003d98:	4639      	mov	r1, r7
 8003d9a:	f7fc fbd1 	bl	8000540 <__aeabi_dmul>
 8003d9e:	f7fc fe69 	bl	8000a74 <__aeabi_d2iz>
 8003da2:	f7fc fb63 	bl	800046c <__aeabi_i2d>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	ec43 2b18 	vmov	d8, r2, r3
 8003dae:	4b46      	ldr	r3, [pc, #280]	; (8003ec8 <__kernel_rem_pio2+0x338>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	f7fc fbc5 	bl	8000540 <__aeabi_dmul>
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	4630      	mov	r0, r6
 8003dbc:	4639      	mov	r1, r7
 8003dbe:	f7fc fa07 	bl	80001d0 <__aeabi_dsub>
 8003dc2:	f7fc fe57 	bl	8000a74 <__aeabi_d2iz>
 8003dc6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003dca:	f84b 0b04 	str.w	r0, [fp], #4
 8003dce:	ec51 0b18 	vmov	r0, r1, d8
 8003dd2:	f7fc f9ff 	bl	80001d4 <__adddf3>
 8003dd6:	f109 39ff 	add.w	r9, r9, #4294967295
 8003dda:	4606      	mov	r6, r0
 8003ddc:	460f      	mov	r7, r1
 8003dde:	e75b      	b.n	8003c98 <__kernel_rem_pio2+0x108>
 8003de0:	d106      	bne.n	8003df0 <__kernel_rem_pio2+0x260>
 8003de2:	1e63      	subs	r3, r4, #1
 8003de4:	aa0e      	add	r2, sp, #56	; 0x38
 8003de6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003dea:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8003dee:	e79d      	b.n	8003d2c <__kernel_rem_pio2+0x19c>
 8003df0:	4b36      	ldr	r3, [pc, #216]	; (8003ecc <__kernel_rem_pio2+0x33c>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	f7fc fe2a 	bl	8000a4c <__aeabi_dcmpge>
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	d13d      	bne.n	8003e78 <__kernel_rem_pio2+0x2e8>
 8003dfc:	4683      	mov	fp, r0
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2300      	movs	r3, #0
 8003e02:	4630      	mov	r0, r6
 8003e04:	4639      	mov	r1, r7
 8003e06:	f7fc fe03 	bl	8000a10 <__aeabi_dcmpeq>
 8003e0a:	2800      	cmp	r0, #0
 8003e0c:	f000 80c0 	beq.w	8003f90 <__kernel_rem_pio2+0x400>
 8003e10:	1e65      	subs	r5, r4, #1
 8003e12:	462b      	mov	r3, r5
 8003e14:	2200      	movs	r2, #0
 8003e16:	9902      	ldr	r1, [sp, #8]
 8003e18:	428b      	cmp	r3, r1
 8003e1a:	da6c      	bge.n	8003ef6 <__kernel_rem_pio2+0x366>
 8003e1c:	2a00      	cmp	r2, #0
 8003e1e:	f000 8089 	beq.w	8003f34 <__kernel_rem_pio2+0x3a4>
 8003e22:	ab0e      	add	r3, sp, #56	; 0x38
 8003e24:	f1aa 0a18 	sub.w	sl, sl, #24
 8003e28:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80ad 	beq.w	8003f8c <__kernel_rem_pio2+0x3fc>
 8003e32:	4650      	mov	r0, sl
 8003e34:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8003eb0 <__kernel_rem_pio2+0x320>
 8003e38:	f000 fb42 	bl	80044c0 <scalbn>
 8003e3c:	ab9a      	add	r3, sp, #616	; 0x268
 8003e3e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003e42:	ec57 6b10 	vmov	r6, r7, d0
 8003e46:	00ec      	lsls	r4, r5, #3
 8003e48:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8003e4c:	46aa      	mov	sl, r5
 8003e4e:	f1ba 0f00 	cmp.w	sl, #0
 8003e52:	f280 80d6 	bge.w	8004002 <__kernel_rem_pio2+0x472>
 8003e56:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8003ea8 <__kernel_rem_pio2+0x318>
 8003e5a:	462e      	mov	r6, r5
 8003e5c:	2e00      	cmp	r6, #0
 8003e5e:	f2c0 8104 	blt.w	800406a <__kernel_rem_pio2+0x4da>
 8003e62:	ab72      	add	r3, sp, #456	; 0x1c8
 8003e64:	ed8d 8b06 	vstr	d8, [sp, #24]
 8003e68:	f8df a064 	ldr.w	sl, [pc, #100]	; 8003ed0 <__kernel_rem_pio2+0x340>
 8003e6c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8003e70:	f04f 0800 	mov.w	r8, #0
 8003e74:	1baf      	subs	r7, r5, r6
 8003e76:	e0ea      	b.n	800404e <__kernel_rem_pio2+0x4be>
 8003e78:	f04f 0b02 	mov.w	fp, #2
 8003e7c:	e759      	b.n	8003d32 <__kernel_rem_pio2+0x1a2>
 8003e7e:	f8d8 3000 	ldr.w	r3, [r8]
 8003e82:	b955      	cbnz	r5, 8003e9a <__kernel_rem_pio2+0x30a>
 8003e84:	b123      	cbz	r3, 8003e90 <__kernel_rem_pio2+0x300>
 8003e86:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003e8a:	f8c8 3000 	str.w	r3, [r8]
 8003e8e:	2301      	movs	r3, #1
 8003e90:	3201      	adds	r2, #1
 8003e92:	f108 0804 	add.w	r8, r8, #4
 8003e96:	461d      	mov	r5, r3
 8003e98:	e752      	b.n	8003d40 <__kernel_rem_pio2+0x1b0>
 8003e9a:	1acb      	subs	r3, r1, r3
 8003e9c:	f8c8 3000 	str.w	r3, [r8]
 8003ea0:	462b      	mov	r3, r5
 8003ea2:	e7f5      	b.n	8003e90 <__kernel_rem_pio2+0x300>
 8003ea4:	f3af 8000 	nop.w
	...
 8003eb4:	3ff00000 	.word	0x3ff00000
 8003eb8:	080047e8 	.word	0x080047e8
 8003ebc:	40200000 	.word	0x40200000
 8003ec0:	3ff00000 	.word	0x3ff00000
 8003ec4:	3e700000 	.word	0x3e700000
 8003ec8:	41700000 	.word	0x41700000
 8003ecc:	3fe00000 	.word	0x3fe00000
 8003ed0:	080047a8 	.word	0x080047a8
 8003ed4:	1e62      	subs	r2, r4, #1
 8003ed6:	ab0e      	add	r3, sp, #56	; 0x38
 8003ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003edc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003ee0:	a90e      	add	r1, sp, #56	; 0x38
 8003ee2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003ee6:	e739      	b.n	8003d5c <__kernel_rem_pio2+0x1cc>
 8003ee8:	1e62      	subs	r2, r4, #1
 8003eea:	ab0e      	add	r3, sp, #56	; 0x38
 8003eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ef0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003ef4:	e7f4      	b.n	8003ee0 <__kernel_rem_pio2+0x350>
 8003ef6:	a90e      	add	r1, sp, #56	; 0x38
 8003ef8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	430a      	orrs	r2, r1
 8003f00:	e789      	b.n	8003e16 <__kernel_rem_pio2+0x286>
 8003f02:	3301      	adds	r3, #1
 8003f04:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003f08:	2900      	cmp	r1, #0
 8003f0a:	d0fa      	beq.n	8003f02 <__kernel_rem_pio2+0x372>
 8003f0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f0e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8003f12:	446a      	add	r2, sp
 8003f14:	3a98      	subs	r2, #152	; 0x98
 8003f16:	920a      	str	r2, [sp, #40]	; 0x28
 8003f18:	9a08      	ldr	r2, [sp, #32]
 8003f1a:	18e3      	adds	r3, r4, r3
 8003f1c:	18a5      	adds	r5, r4, r2
 8003f1e:	aa22      	add	r2, sp, #136	; 0x88
 8003f20:	f104 0801 	add.w	r8, r4, #1
 8003f24:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8003f28:	9304      	str	r3, [sp, #16]
 8003f2a:	9b04      	ldr	r3, [sp, #16]
 8003f2c:	4543      	cmp	r3, r8
 8003f2e:	da04      	bge.n	8003f3a <__kernel_rem_pio2+0x3aa>
 8003f30:	461c      	mov	r4, r3
 8003f32:	e6a3      	b.n	8003c7c <__kernel_rem_pio2+0xec>
 8003f34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003f36:	2301      	movs	r3, #1
 8003f38:	e7e4      	b.n	8003f04 <__kernel_rem_pio2+0x374>
 8003f3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f3c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003f40:	f7fc fa94 	bl	800046c <__aeabi_i2d>
 8003f44:	e8e5 0102 	strd	r0, r1, [r5], #8
 8003f48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f4a:	46ab      	mov	fp, r5
 8003f4c:	461c      	mov	r4, r3
 8003f4e:	f04f 0900 	mov.w	r9, #0
 8003f52:	2600      	movs	r6, #0
 8003f54:	2700      	movs	r7, #0
 8003f56:	9b06      	ldr	r3, [sp, #24]
 8003f58:	4599      	cmp	r9, r3
 8003f5a:	dd06      	ble.n	8003f6a <__kernel_rem_pio2+0x3da>
 8003f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f5e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8003f62:	f108 0801 	add.w	r8, r8, #1
 8003f66:	930a      	str	r3, [sp, #40]	; 0x28
 8003f68:	e7df      	b.n	8003f2a <__kernel_rem_pio2+0x39a>
 8003f6a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8003f6e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8003f72:	f7fc fae5 	bl	8000540 <__aeabi_dmul>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4630      	mov	r0, r6
 8003f7c:	4639      	mov	r1, r7
 8003f7e:	f7fc f929 	bl	80001d4 <__adddf3>
 8003f82:	f109 0901 	add.w	r9, r9, #1
 8003f86:	4606      	mov	r6, r0
 8003f88:	460f      	mov	r7, r1
 8003f8a:	e7e4      	b.n	8003f56 <__kernel_rem_pio2+0x3c6>
 8003f8c:	3d01      	subs	r5, #1
 8003f8e:	e748      	b.n	8003e22 <__kernel_rem_pio2+0x292>
 8003f90:	ec47 6b10 	vmov	d0, r6, r7
 8003f94:	f1ca 0000 	rsb	r0, sl, #0
 8003f98:	f000 fa92 	bl	80044c0 <scalbn>
 8003f9c:	ec57 6b10 	vmov	r6, r7, d0
 8003fa0:	4ba0      	ldr	r3, [pc, #640]	; (8004224 <__kernel_rem_pio2+0x694>)
 8003fa2:	ee10 0a10 	vmov	r0, s0
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	4639      	mov	r1, r7
 8003faa:	f7fc fd4f 	bl	8000a4c <__aeabi_dcmpge>
 8003fae:	b1f8      	cbz	r0, 8003ff0 <__kernel_rem_pio2+0x460>
 8003fb0:	4b9d      	ldr	r3, [pc, #628]	; (8004228 <__kernel_rem_pio2+0x698>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	4630      	mov	r0, r6
 8003fb6:	4639      	mov	r1, r7
 8003fb8:	f7fc fac2 	bl	8000540 <__aeabi_dmul>
 8003fbc:	f7fc fd5a 	bl	8000a74 <__aeabi_d2iz>
 8003fc0:	4680      	mov	r8, r0
 8003fc2:	f7fc fa53 	bl	800046c <__aeabi_i2d>
 8003fc6:	4b97      	ldr	r3, [pc, #604]	; (8004224 <__kernel_rem_pio2+0x694>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f7fc fab9 	bl	8000540 <__aeabi_dmul>
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	4639      	mov	r1, r7
 8003fd4:	4630      	mov	r0, r6
 8003fd6:	f7fc f8fb 	bl	80001d0 <__aeabi_dsub>
 8003fda:	f7fc fd4b 	bl	8000a74 <__aeabi_d2iz>
 8003fde:	1c65      	adds	r5, r4, #1
 8003fe0:	ab0e      	add	r3, sp, #56	; 0x38
 8003fe2:	f10a 0a18 	add.w	sl, sl, #24
 8003fe6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003fea:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8003fee:	e720      	b.n	8003e32 <__kernel_rem_pio2+0x2a2>
 8003ff0:	4630      	mov	r0, r6
 8003ff2:	4639      	mov	r1, r7
 8003ff4:	f7fc fd3e 	bl	8000a74 <__aeabi_d2iz>
 8003ff8:	ab0e      	add	r3, sp, #56	; 0x38
 8003ffa:	4625      	mov	r5, r4
 8003ffc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004000:	e717      	b.n	8003e32 <__kernel_rem_pio2+0x2a2>
 8004002:	ab0e      	add	r3, sp, #56	; 0x38
 8004004:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8004008:	f7fc fa30 	bl	800046c <__aeabi_i2d>
 800400c:	4632      	mov	r2, r6
 800400e:	463b      	mov	r3, r7
 8004010:	f7fc fa96 	bl	8000540 <__aeabi_dmul>
 8004014:	4b84      	ldr	r3, [pc, #528]	; (8004228 <__kernel_rem_pio2+0x698>)
 8004016:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800401a:	2200      	movs	r2, #0
 800401c:	4630      	mov	r0, r6
 800401e:	4639      	mov	r1, r7
 8004020:	f7fc fa8e 	bl	8000540 <__aeabi_dmul>
 8004024:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004028:	4606      	mov	r6, r0
 800402a:	460f      	mov	r7, r1
 800402c:	e70f      	b.n	8003e4e <__kernel_rem_pio2+0x2be>
 800402e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004032:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8004036:	f7fc fa83 	bl	8000540 <__aeabi_dmul>
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004042:	f7fc f8c7 	bl	80001d4 <__adddf3>
 8004046:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800404a:	f108 0801 	add.w	r8, r8, #1
 800404e:	9b02      	ldr	r3, [sp, #8]
 8004050:	4598      	cmp	r8, r3
 8004052:	dc01      	bgt.n	8004058 <__kernel_rem_pio2+0x4c8>
 8004054:	45b8      	cmp	r8, r7
 8004056:	ddea      	ble.n	800402e <__kernel_rem_pio2+0x49e>
 8004058:	ed9d 7b06 	vldr	d7, [sp, #24]
 800405c:	ab4a      	add	r3, sp, #296	; 0x128
 800405e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004062:	ed87 7b00 	vstr	d7, [r7]
 8004066:	3e01      	subs	r6, #1
 8004068:	e6f8      	b.n	8003e5c <__kernel_rem_pio2+0x2cc>
 800406a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800406c:	2b02      	cmp	r3, #2
 800406e:	dc0b      	bgt.n	8004088 <__kernel_rem_pio2+0x4f8>
 8004070:	2b00      	cmp	r3, #0
 8004072:	dc35      	bgt.n	80040e0 <__kernel_rem_pio2+0x550>
 8004074:	d059      	beq.n	800412a <__kernel_rem_pio2+0x59a>
 8004076:	9b04      	ldr	r3, [sp, #16]
 8004078:	f003 0007 	and.w	r0, r3, #7
 800407c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8004080:	ecbd 8b02 	vpop	{d8}
 8004084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004088:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800408a:	2b03      	cmp	r3, #3
 800408c:	d1f3      	bne.n	8004076 <__kernel_rem_pio2+0x4e6>
 800408e:	ab4a      	add	r3, sp, #296	; 0x128
 8004090:	4423      	add	r3, r4
 8004092:	9306      	str	r3, [sp, #24]
 8004094:	461c      	mov	r4, r3
 8004096:	469a      	mov	sl, r3
 8004098:	9502      	str	r5, [sp, #8]
 800409a:	9b02      	ldr	r3, [sp, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	f1aa 0a08 	sub.w	sl, sl, #8
 80040a2:	dc6b      	bgt.n	800417c <__kernel_rem_pio2+0x5ec>
 80040a4:	46aa      	mov	sl, r5
 80040a6:	f1ba 0f01 	cmp.w	sl, #1
 80040aa:	f1a4 0408 	sub.w	r4, r4, #8
 80040ae:	f300 8085 	bgt.w	80041bc <__kernel_rem_pio2+0x62c>
 80040b2:	9c06      	ldr	r4, [sp, #24]
 80040b4:	2000      	movs	r0, #0
 80040b6:	3408      	adds	r4, #8
 80040b8:	2100      	movs	r1, #0
 80040ba:	2d01      	cmp	r5, #1
 80040bc:	f300 809d 	bgt.w	80041fa <__kernel_rem_pio2+0x66a>
 80040c0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80040c4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80040c8:	f1bb 0f00 	cmp.w	fp, #0
 80040cc:	f040 809b 	bne.w	8004206 <__kernel_rem_pio2+0x676>
 80040d0:	9b01      	ldr	r3, [sp, #4]
 80040d2:	e9c3 5600 	strd	r5, r6, [r3]
 80040d6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80040da:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80040de:	e7ca      	b.n	8004076 <__kernel_rem_pio2+0x4e6>
 80040e0:	3408      	adds	r4, #8
 80040e2:	ab4a      	add	r3, sp, #296	; 0x128
 80040e4:	441c      	add	r4, r3
 80040e6:	462e      	mov	r6, r5
 80040e8:	2000      	movs	r0, #0
 80040ea:	2100      	movs	r1, #0
 80040ec:	2e00      	cmp	r6, #0
 80040ee:	da36      	bge.n	800415e <__kernel_rem_pio2+0x5ce>
 80040f0:	f1bb 0f00 	cmp.w	fp, #0
 80040f4:	d039      	beq.n	800416a <__kernel_rem_pio2+0x5da>
 80040f6:	4602      	mov	r2, r0
 80040f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80040fc:	9c01      	ldr	r4, [sp, #4]
 80040fe:	e9c4 2300 	strd	r2, r3, [r4]
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800410a:	f7fc f861 	bl	80001d0 <__aeabi_dsub>
 800410e:	ae4c      	add	r6, sp, #304	; 0x130
 8004110:	2401      	movs	r4, #1
 8004112:	42a5      	cmp	r5, r4
 8004114:	da2c      	bge.n	8004170 <__kernel_rem_pio2+0x5e0>
 8004116:	f1bb 0f00 	cmp.w	fp, #0
 800411a:	d002      	beq.n	8004122 <__kernel_rem_pio2+0x592>
 800411c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004120:	4619      	mov	r1, r3
 8004122:	9b01      	ldr	r3, [sp, #4]
 8004124:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004128:	e7a5      	b.n	8004076 <__kernel_rem_pio2+0x4e6>
 800412a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800412e:	eb0d 0403 	add.w	r4, sp, r3
 8004132:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8004136:	2000      	movs	r0, #0
 8004138:	2100      	movs	r1, #0
 800413a:	2d00      	cmp	r5, #0
 800413c:	da09      	bge.n	8004152 <__kernel_rem_pio2+0x5c2>
 800413e:	f1bb 0f00 	cmp.w	fp, #0
 8004142:	d002      	beq.n	800414a <__kernel_rem_pio2+0x5ba>
 8004144:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004148:	4619      	mov	r1, r3
 800414a:	9b01      	ldr	r3, [sp, #4]
 800414c:	e9c3 0100 	strd	r0, r1, [r3]
 8004150:	e791      	b.n	8004076 <__kernel_rem_pio2+0x4e6>
 8004152:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004156:	f7fc f83d 	bl	80001d4 <__adddf3>
 800415a:	3d01      	subs	r5, #1
 800415c:	e7ed      	b.n	800413a <__kernel_rem_pio2+0x5aa>
 800415e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004162:	f7fc f837 	bl	80001d4 <__adddf3>
 8004166:	3e01      	subs	r6, #1
 8004168:	e7c0      	b.n	80040ec <__kernel_rem_pio2+0x55c>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	e7c5      	b.n	80040fc <__kernel_rem_pio2+0x56c>
 8004170:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8004174:	f7fc f82e 	bl	80001d4 <__adddf3>
 8004178:	3401      	adds	r4, #1
 800417a:	e7ca      	b.n	8004112 <__kernel_rem_pio2+0x582>
 800417c:	e9da 8900 	ldrd	r8, r9, [sl]
 8004180:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8004184:	9b02      	ldr	r3, [sp, #8]
 8004186:	3b01      	subs	r3, #1
 8004188:	9302      	str	r3, [sp, #8]
 800418a:	4632      	mov	r2, r6
 800418c:	463b      	mov	r3, r7
 800418e:	4640      	mov	r0, r8
 8004190:	4649      	mov	r1, r9
 8004192:	f7fc f81f 	bl	80001d4 <__adddf3>
 8004196:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4640      	mov	r0, r8
 80041a0:	4649      	mov	r1, r9
 80041a2:	f7fc f815 	bl	80001d0 <__aeabi_dsub>
 80041a6:	4632      	mov	r2, r6
 80041a8:	463b      	mov	r3, r7
 80041aa:	f7fc f813 	bl	80001d4 <__adddf3>
 80041ae:	ed9d 7b08 	vldr	d7, [sp, #32]
 80041b2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80041b6:	ed8a 7b00 	vstr	d7, [sl]
 80041ba:	e76e      	b.n	800409a <__kernel_rem_pio2+0x50a>
 80041bc:	e9d4 8900 	ldrd	r8, r9, [r4]
 80041c0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80041c4:	4640      	mov	r0, r8
 80041c6:	4632      	mov	r2, r6
 80041c8:	463b      	mov	r3, r7
 80041ca:	4649      	mov	r1, r9
 80041cc:	f7fc f802 	bl	80001d4 <__adddf3>
 80041d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4640      	mov	r0, r8
 80041da:	4649      	mov	r1, r9
 80041dc:	f7fb fff8 	bl	80001d0 <__aeabi_dsub>
 80041e0:	4632      	mov	r2, r6
 80041e2:	463b      	mov	r3, r7
 80041e4:	f7fb fff6 	bl	80001d4 <__adddf3>
 80041e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80041ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80041f0:	ed84 7b00 	vstr	d7, [r4]
 80041f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80041f8:	e755      	b.n	80040a6 <__kernel_rem_pio2+0x516>
 80041fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80041fe:	f7fb ffe9 	bl	80001d4 <__adddf3>
 8004202:	3d01      	subs	r5, #1
 8004204:	e759      	b.n	80040ba <__kernel_rem_pio2+0x52a>
 8004206:	9b01      	ldr	r3, [sp, #4]
 8004208:	9a01      	ldr	r2, [sp, #4]
 800420a:	601d      	str	r5, [r3, #0]
 800420c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8004210:	605c      	str	r4, [r3, #4]
 8004212:	609f      	str	r7, [r3, #8]
 8004214:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8004218:	60d3      	str	r3, [r2, #12]
 800421a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800421e:	6110      	str	r0, [r2, #16]
 8004220:	6153      	str	r3, [r2, #20]
 8004222:	e728      	b.n	8004076 <__kernel_rem_pio2+0x4e6>
 8004224:	41700000 	.word	0x41700000
 8004228:	3e700000 	.word	0x3e700000
 800422c:	00000000 	.word	0x00000000

08004230 <__kernel_sin>:
 8004230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004234:	ed2d 8b04 	vpush	{d8-d9}
 8004238:	eeb0 8a41 	vmov.f32	s16, s2
 800423c:	eef0 8a61 	vmov.f32	s17, s3
 8004240:	ec55 4b10 	vmov	r4, r5, d0
 8004244:	b083      	sub	sp, #12
 8004246:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800424a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800424e:	9001      	str	r0, [sp, #4]
 8004250:	da06      	bge.n	8004260 <__kernel_sin+0x30>
 8004252:	ee10 0a10 	vmov	r0, s0
 8004256:	4629      	mov	r1, r5
 8004258:	f7fc fc0c 	bl	8000a74 <__aeabi_d2iz>
 800425c:	2800      	cmp	r0, #0
 800425e:	d051      	beq.n	8004304 <__kernel_sin+0xd4>
 8004260:	4622      	mov	r2, r4
 8004262:	462b      	mov	r3, r5
 8004264:	4620      	mov	r0, r4
 8004266:	4629      	mov	r1, r5
 8004268:	f7fc f96a 	bl	8000540 <__aeabi_dmul>
 800426c:	4682      	mov	sl, r0
 800426e:	468b      	mov	fp, r1
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4620      	mov	r0, r4
 8004276:	4629      	mov	r1, r5
 8004278:	f7fc f962 	bl	8000540 <__aeabi_dmul>
 800427c:	a341      	add	r3, pc, #260	; (adr r3, 8004384 <__kernel_sin+0x154>)
 800427e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004282:	4680      	mov	r8, r0
 8004284:	4689      	mov	r9, r1
 8004286:	4650      	mov	r0, sl
 8004288:	4659      	mov	r1, fp
 800428a:	f7fc f959 	bl	8000540 <__aeabi_dmul>
 800428e:	a33f      	add	r3, pc, #252	; (adr r3, 800438c <__kernel_sin+0x15c>)
 8004290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004294:	f7fb ff9c 	bl	80001d0 <__aeabi_dsub>
 8004298:	4652      	mov	r2, sl
 800429a:	465b      	mov	r3, fp
 800429c:	f7fc f950 	bl	8000540 <__aeabi_dmul>
 80042a0:	a33c      	add	r3, pc, #240	; (adr r3, 8004394 <__kernel_sin+0x164>)
 80042a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a6:	f7fb ff95 	bl	80001d4 <__adddf3>
 80042aa:	4652      	mov	r2, sl
 80042ac:	465b      	mov	r3, fp
 80042ae:	f7fc f947 	bl	8000540 <__aeabi_dmul>
 80042b2:	a33a      	add	r3, pc, #232	; (adr r3, 800439c <__kernel_sin+0x16c>)
 80042b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b8:	f7fb ff8a 	bl	80001d0 <__aeabi_dsub>
 80042bc:	4652      	mov	r2, sl
 80042be:	465b      	mov	r3, fp
 80042c0:	f7fc f93e 	bl	8000540 <__aeabi_dmul>
 80042c4:	a337      	add	r3, pc, #220	; (adr r3, 80043a4 <__kernel_sin+0x174>)
 80042c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ca:	f7fb ff83 	bl	80001d4 <__adddf3>
 80042ce:	9b01      	ldr	r3, [sp, #4]
 80042d0:	4606      	mov	r6, r0
 80042d2:	460f      	mov	r7, r1
 80042d4:	b9eb      	cbnz	r3, 8004312 <__kernel_sin+0xe2>
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	4650      	mov	r0, sl
 80042dc:	4659      	mov	r1, fp
 80042de:	f7fc f92f 	bl	8000540 <__aeabi_dmul>
 80042e2:	a325      	add	r3, pc, #148	; (adr r3, 8004378 <__kernel_sin+0x148>)
 80042e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e8:	f7fb ff72 	bl	80001d0 <__aeabi_dsub>
 80042ec:	4642      	mov	r2, r8
 80042ee:	464b      	mov	r3, r9
 80042f0:	f7fc f926 	bl	8000540 <__aeabi_dmul>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4620      	mov	r0, r4
 80042fa:	4629      	mov	r1, r5
 80042fc:	f7fb ff6a 	bl	80001d4 <__adddf3>
 8004300:	4604      	mov	r4, r0
 8004302:	460d      	mov	r5, r1
 8004304:	ec45 4b10 	vmov	d0, r4, r5
 8004308:	b003      	add	sp, #12
 800430a:	ecbd 8b04 	vpop	{d8-d9}
 800430e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004312:	4b1b      	ldr	r3, [pc, #108]	; (8004380 <__kernel_sin+0x150>)
 8004314:	ec51 0b18 	vmov	r0, r1, d8
 8004318:	2200      	movs	r2, #0
 800431a:	f7fc f911 	bl	8000540 <__aeabi_dmul>
 800431e:	4632      	mov	r2, r6
 8004320:	ec41 0b19 	vmov	d9, r0, r1
 8004324:	463b      	mov	r3, r7
 8004326:	4640      	mov	r0, r8
 8004328:	4649      	mov	r1, r9
 800432a:	f7fc f909 	bl	8000540 <__aeabi_dmul>
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	ec51 0b19 	vmov	r0, r1, d9
 8004336:	f7fb ff4b 	bl	80001d0 <__aeabi_dsub>
 800433a:	4652      	mov	r2, sl
 800433c:	465b      	mov	r3, fp
 800433e:	f7fc f8ff 	bl	8000540 <__aeabi_dmul>
 8004342:	ec53 2b18 	vmov	r2, r3, d8
 8004346:	f7fb ff43 	bl	80001d0 <__aeabi_dsub>
 800434a:	a30b      	add	r3, pc, #44	; (adr r3, 8004378 <__kernel_sin+0x148>)
 800434c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004350:	4606      	mov	r6, r0
 8004352:	460f      	mov	r7, r1
 8004354:	4640      	mov	r0, r8
 8004356:	4649      	mov	r1, r9
 8004358:	f7fc f8f2 	bl	8000540 <__aeabi_dmul>
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	4630      	mov	r0, r6
 8004362:	4639      	mov	r1, r7
 8004364:	f7fb ff36 	bl	80001d4 <__adddf3>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4620      	mov	r0, r4
 800436e:	4629      	mov	r1, r5
 8004370:	f7fb ff2e 	bl	80001d0 <__aeabi_dsub>
 8004374:	e7c4      	b.n	8004300 <__kernel_sin+0xd0>
 8004376:	bf00      	nop
 8004378:	55555549 	.word	0x55555549
 800437c:	3fc55555 	.word	0x3fc55555
 8004380:	3fe00000 	.word	0x3fe00000
 8004384:	5acfd57c 	.word	0x5acfd57c
 8004388:	3de5d93a 	.word	0x3de5d93a
 800438c:	8a2b9ceb 	.word	0x8a2b9ceb
 8004390:	3e5ae5e6 	.word	0x3e5ae5e6
 8004394:	57b1fe7d 	.word	0x57b1fe7d
 8004398:	3ec71de3 	.word	0x3ec71de3
 800439c:	19c161d5 	.word	0x19c161d5
 80043a0:	3f2a01a0 	.word	0x3f2a01a0
 80043a4:	1110f8a6 	.word	0x1110f8a6
 80043a8:	3f811111 	.word	0x3f811111

080043ac <fabs>:
 80043ac:	ec51 0b10 	vmov	r0, r1, d0
 80043b0:	ee10 2a10 	vmov	r2, s0
 80043b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80043b8:	ec43 2b10 	vmov	d0, r2, r3
 80043bc:	4770      	bx	lr
	...

080043c0 <floor>:
 80043c0:	ec51 0b10 	vmov	r0, r1, d0
 80043c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043c8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80043cc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80043d0:	2e13      	cmp	r6, #19
 80043d2:	ee10 5a10 	vmov	r5, s0
 80043d6:	ee10 8a10 	vmov	r8, s0
 80043da:	460c      	mov	r4, r1
 80043dc:	dc32      	bgt.n	8004444 <floor+0x84>
 80043de:	2e00      	cmp	r6, #0
 80043e0:	da14      	bge.n	800440c <floor+0x4c>
 80043e2:	a333      	add	r3, pc, #204	; (adr r3, 80044b0 <floor+0xf0>)
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	f7fb fef4 	bl	80001d4 <__adddf3>
 80043ec:	2200      	movs	r2, #0
 80043ee:	2300      	movs	r3, #0
 80043f0:	f7fc fb36 	bl	8000a60 <__aeabi_dcmpgt>
 80043f4:	b138      	cbz	r0, 8004406 <floor+0x46>
 80043f6:	2c00      	cmp	r4, #0
 80043f8:	da57      	bge.n	80044aa <floor+0xea>
 80043fa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80043fe:	431d      	orrs	r5, r3
 8004400:	d001      	beq.n	8004406 <floor+0x46>
 8004402:	4c2d      	ldr	r4, [pc, #180]	; (80044b8 <floor+0xf8>)
 8004404:	2500      	movs	r5, #0
 8004406:	4621      	mov	r1, r4
 8004408:	4628      	mov	r0, r5
 800440a:	e025      	b.n	8004458 <floor+0x98>
 800440c:	4f2b      	ldr	r7, [pc, #172]	; (80044bc <floor+0xfc>)
 800440e:	4137      	asrs	r7, r6
 8004410:	ea01 0307 	and.w	r3, r1, r7
 8004414:	4303      	orrs	r3, r0
 8004416:	d01f      	beq.n	8004458 <floor+0x98>
 8004418:	a325      	add	r3, pc, #148	; (adr r3, 80044b0 <floor+0xf0>)
 800441a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441e:	f7fb fed9 	bl	80001d4 <__adddf3>
 8004422:	2200      	movs	r2, #0
 8004424:	2300      	movs	r3, #0
 8004426:	f7fc fb1b 	bl	8000a60 <__aeabi_dcmpgt>
 800442a:	2800      	cmp	r0, #0
 800442c:	d0eb      	beq.n	8004406 <floor+0x46>
 800442e:	2c00      	cmp	r4, #0
 8004430:	bfbe      	ittt	lt
 8004432:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004436:	fa43 f606 	asrlt.w	r6, r3, r6
 800443a:	19a4      	addlt	r4, r4, r6
 800443c:	ea24 0407 	bic.w	r4, r4, r7
 8004440:	2500      	movs	r5, #0
 8004442:	e7e0      	b.n	8004406 <floor+0x46>
 8004444:	2e33      	cmp	r6, #51	; 0x33
 8004446:	dd0b      	ble.n	8004460 <floor+0xa0>
 8004448:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800444c:	d104      	bne.n	8004458 <floor+0x98>
 800444e:	ee10 2a10 	vmov	r2, s0
 8004452:	460b      	mov	r3, r1
 8004454:	f7fb febe 	bl	80001d4 <__adddf3>
 8004458:	ec41 0b10 	vmov	d0, r0, r1
 800445c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004460:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004464:	f04f 33ff 	mov.w	r3, #4294967295
 8004468:	fa23 f707 	lsr.w	r7, r3, r7
 800446c:	4207      	tst	r7, r0
 800446e:	d0f3      	beq.n	8004458 <floor+0x98>
 8004470:	a30f      	add	r3, pc, #60	; (adr r3, 80044b0 <floor+0xf0>)
 8004472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004476:	f7fb fead 	bl	80001d4 <__adddf3>
 800447a:	2200      	movs	r2, #0
 800447c:	2300      	movs	r3, #0
 800447e:	f7fc faef 	bl	8000a60 <__aeabi_dcmpgt>
 8004482:	2800      	cmp	r0, #0
 8004484:	d0bf      	beq.n	8004406 <floor+0x46>
 8004486:	2c00      	cmp	r4, #0
 8004488:	da02      	bge.n	8004490 <floor+0xd0>
 800448a:	2e14      	cmp	r6, #20
 800448c:	d103      	bne.n	8004496 <floor+0xd6>
 800448e:	3401      	adds	r4, #1
 8004490:	ea25 0507 	bic.w	r5, r5, r7
 8004494:	e7b7      	b.n	8004406 <floor+0x46>
 8004496:	2301      	movs	r3, #1
 8004498:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800449c:	fa03 f606 	lsl.w	r6, r3, r6
 80044a0:	4435      	add	r5, r6
 80044a2:	4545      	cmp	r5, r8
 80044a4:	bf38      	it	cc
 80044a6:	18e4      	addcc	r4, r4, r3
 80044a8:	e7f2      	b.n	8004490 <floor+0xd0>
 80044aa:	2500      	movs	r5, #0
 80044ac:	462c      	mov	r4, r5
 80044ae:	e7aa      	b.n	8004406 <floor+0x46>
 80044b0:	8800759c 	.word	0x8800759c
 80044b4:	7e37e43c 	.word	0x7e37e43c
 80044b8:	bff00000 	.word	0xbff00000
 80044bc:	000fffff 	.word	0x000fffff

080044c0 <scalbn>:
 80044c0:	b570      	push	{r4, r5, r6, lr}
 80044c2:	ec55 4b10 	vmov	r4, r5, d0
 80044c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80044ca:	4606      	mov	r6, r0
 80044cc:	462b      	mov	r3, r5
 80044ce:	b99a      	cbnz	r2, 80044f8 <scalbn+0x38>
 80044d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80044d4:	4323      	orrs	r3, r4
 80044d6:	d036      	beq.n	8004546 <scalbn+0x86>
 80044d8:	4b39      	ldr	r3, [pc, #228]	; (80045c0 <scalbn+0x100>)
 80044da:	4629      	mov	r1, r5
 80044dc:	ee10 0a10 	vmov	r0, s0
 80044e0:	2200      	movs	r2, #0
 80044e2:	f7fc f82d 	bl	8000540 <__aeabi_dmul>
 80044e6:	4b37      	ldr	r3, [pc, #220]	; (80045c4 <scalbn+0x104>)
 80044e8:	429e      	cmp	r6, r3
 80044ea:	4604      	mov	r4, r0
 80044ec:	460d      	mov	r5, r1
 80044ee:	da10      	bge.n	8004512 <scalbn+0x52>
 80044f0:	a32b      	add	r3, pc, #172	; (adr r3, 80045a0 <scalbn+0xe0>)
 80044f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f6:	e03a      	b.n	800456e <scalbn+0xae>
 80044f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80044fc:	428a      	cmp	r2, r1
 80044fe:	d10c      	bne.n	800451a <scalbn+0x5a>
 8004500:	ee10 2a10 	vmov	r2, s0
 8004504:	4620      	mov	r0, r4
 8004506:	4629      	mov	r1, r5
 8004508:	f7fb fe64 	bl	80001d4 <__adddf3>
 800450c:	4604      	mov	r4, r0
 800450e:	460d      	mov	r5, r1
 8004510:	e019      	b.n	8004546 <scalbn+0x86>
 8004512:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004516:	460b      	mov	r3, r1
 8004518:	3a36      	subs	r2, #54	; 0x36
 800451a:	4432      	add	r2, r6
 800451c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004520:	428a      	cmp	r2, r1
 8004522:	dd08      	ble.n	8004536 <scalbn+0x76>
 8004524:	2d00      	cmp	r5, #0
 8004526:	a120      	add	r1, pc, #128	; (adr r1, 80045a8 <scalbn+0xe8>)
 8004528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800452c:	da1c      	bge.n	8004568 <scalbn+0xa8>
 800452e:	a120      	add	r1, pc, #128	; (adr r1, 80045b0 <scalbn+0xf0>)
 8004530:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004534:	e018      	b.n	8004568 <scalbn+0xa8>
 8004536:	2a00      	cmp	r2, #0
 8004538:	dd08      	ble.n	800454c <scalbn+0x8c>
 800453a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800453e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004542:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004546:	ec45 4b10 	vmov	d0, r4, r5
 800454a:	bd70      	pop	{r4, r5, r6, pc}
 800454c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004550:	da19      	bge.n	8004586 <scalbn+0xc6>
 8004552:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004556:	429e      	cmp	r6, r3
 8004558:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800455c:	dd0a      	ble.n	8004574 <scalbn+0xb4>
 800455e:	a112      	add	r1, pc, #72	; (adr r1, 80045a8 <scalbn+0xe8>)
 8004560:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1e2      	bne.n	800452e <scalbn+0x6e>
 8004568:	a30f      	add	r3, pc, #60	; (adr r3, 80045a8 <scalbn+0xe8>)
 800456a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456e:	f7fb ffe7 	bl	8000540 <__aeabi_dmul>
 8004572:	e7cb      	b.n	800450c <scalbn+0x4c>
 8004574:	a10a      	add	r1, pc, #40	; (adr r1, 80045a0 <scalbn+0xe0>)
 8004576:	e9d1 0100 	ldrd	r0, r1, [r1]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0b8      	beq.n	80044f0 <scalbn+0x30>
 800457e:	a10e      	add	r1, pc, #56	; (adr r1, 80045b8 <scalbn+0xf8>)
 8004580:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004584:	e7b4      	b.n	80044f0 <scalbn+0x30>
 8004586:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800458a:	3236      	adds	r2, #54	; 0x36
 800458c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004590:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004594:	4620      	mov	r0, r4
 8004596:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <scalbn+0x108>)
 8004598:	2200      	movs	r2, #0
 800459a:	e7e8      	b.n	800456e <scalbn+0xae>
 800459c:	f3af 8000 	nop.w
 80045a0:	c2f8f359 	.word	0xc2f8f359
 80045a4:	01a56e1f 	.word	0x01a56e1f
 80045a8:	8800759c 	.word	0x8800759c
 80045ac:	7e37e43c 	.word	0x7e37e43c
 80045b0:	8800759c 	.word	0x8800759c
 80045b4:	fe37e43c 	.word	0xfe37e43c
 80045b8:	c2f8f359 	.word	0xc2f8f359
 80045bc:	81a56e1f 	.word	0x81a56e1f
 80045c0:	43500000 	.word	0x43500000
 80045c4:	ffff3cb0 	.word	0xffff3cb0
 80045c8:	3c900000 	.word	0x3c900000

080045cc <_init>:
 80045cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ce:	bf00      	nop
 80045d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045d2:	bc08      	pop	{r3}
 80045d4:	469e      	mov	lr, r3
 80045d6:	4770      	bx	lr

080045d8 <_fini>:
 80045d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045da:	bf00      	nop
 80045dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045de:	bc08      	pop	{r3}
 80045e0:	469e      	mov	lr, r3
 80045e2:	4770      	bx	lr
