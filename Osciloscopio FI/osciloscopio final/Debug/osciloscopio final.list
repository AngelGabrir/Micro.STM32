
osciloscopio final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005fc0  08005fc0  00015fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006030  08006030  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006030  08006030  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006030  08006030  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006030  08006030  00016030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006034  08006034  00016034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  20000070  080060a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  080060a8  00020474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136e1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002786  00000000  00000000  00033781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  00035f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  00036f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d719  00000000  00000000  00037ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145b8  00000000  00000000  00055609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aeee6  00000000  00000000  00069bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00118aa7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004924  00000000  00000000  00118af8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005fa8 	.word	0x08005fa8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005fa8 	.word	0x08005fa8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <button>:
GPIO_PinState estpul;
bool ctrl = false;
//uint32_t sine_val[100];
//int16_t contador = 0;
//////////////////////////////////////////
void button() {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	estpul = HAL_GPIO_ReadPin(Pulsador_GPIO_Port, Pulsador_Pin);
 8000284:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000288:	481b      	ldr	r0, [pc, #108]	; (80002f8 <button+0x78>)
 800028a:	f002 fc0b 	bl	8002aa4 <HAL_GPIO_ReadPin>
 800028e:	4603      	mov	r3, r0
 8000290:	461a      	mov	r2, r3
 8000292:	4b1a      	ldr	r3, [pc, #104]	; (80002fc <button+0x7c>)
 8000294:	701a      	strb	r2, [r3, #0]

	if (estpul && !ctrl) {
 8000296:	4b19      	ldr	r3, [pc, #100]	; (80002fc <button+0x7c>)
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d00a      	beq.n	80002b4 <button+0x34>
 800029e:	4b18      	ldr	r3, [pc, #96]	; (8000300 <button+0x80>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	f083 0301 	eor.w	r3, r3, #1
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d003      	beq.n	80002b4 <button+0x34>
		ctrl = true;
 80002ac:	4b14      	ldr	r3, [pc, #80]	; (8000300 <button+0x80>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	701a      	strb	r2, [r3, #0]
 80002b2:	e00f      	b.n	80002d4 <button+0x54>
	} else if (!estpul && ctrl) {
 80002b4:	4b11      	ldr	r3, [pc, #68]	; (80002fc <button+0x7c>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d10b      	bne.n	80002d4 <button+0x54>
 80002bc:	4b10      	ldr	r3, [pc, #64]	; (8000300 <button+0x80>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d007      	beq.n	80002d4 <button+0x54>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80002c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c8:	480e      	ldr	r0, [pc, #56]	; (8000304 <button+0x84>)
 80002ca:	f002 fc1b 	bl	8002b04 <HAL_GPIO_TogglePin>
		ctrl = false;
 80002ce:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <button+0x80>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin) == GPIO_PIN_SET) {
 80002d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002d8:	480a      	ldr	r0, [pc, #40]	; (8000304 <button+0x84>)
 80002da:	f002 fbe3 	bl	8002aa4 <HAL_GPIO_ReadPin>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b01      	cmp	r3, #1
 80002e2:	d103      	bne.n	80002ec <button+0x6c>
		Stat = 1; // Establecer Stat en 1 cuando el pin del LED está activo
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <button+0x88>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	701a      	strb	r2, [r3, #0]
	} else {
		Stat = 0; // Establecer Stat en 0 cuando el pin del LED está inactivo
	}
}
 80002ea:	e002      	b.n	80002f2 <button+0x72>
		Stat = 0; // Establecer Stat en 0 cuando el pin del LED está inactivo
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <button+0x88>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	701a      	strb	r2, [r3, #0]
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	48000800 	.word	0x48000800
 80002fc:	200003b7 	.word	0x200003b7
 8000300:	200003b8 	.word	0x200003b8
 8000304:	48000400 	.word	0x48000400
 8000308:	200003b6 	.word	0x200003b6

0800030c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]

	counter = __HAL_TIM_GET_COUNTER(htim);
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800031a:	4a1f      	ldr	r2, [pc, #124]	; (8000398 <HAL_TIM_IC_CaptureCallback+0x8c>)
 800031c:	6013      	str	r3, [r2, #0]

	count = (int16_t) counter;
 800031e:	4b1e      	ldr	r3, [pc, #120]	; (8000398 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	b21a      	sxth	r2, r3
 8000324:	4b1d      	ldr	r3, [pc, #116]	; (800039c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000326:	801a      	strh	r2, [r3, #0]
	if (Stat == 1) {
 8000328:	4b1d      	ldr	r3, [pc, #116]	; (80003a0 <HAL_TIM_IC_CaptureCallback+0x94>)
 800032a:	f993 3000 	ldrsb.w	r3, [r3]
 800032e:	2b01      	cmp	r3, #1
 8000330:	d116      	bne.n	8000360 <HAL_TIM_IC_CaptureCallback+0x54>
			Position_volt = count / 4;
 8000332:	4b1a      	ldr	r3, [pc, #104]	; (800039c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <HAL_TIM_IC_CaptureCallback+0x32>
 800033c:	3303      	adds	r3, #3
 800033e:	109b      	asrs	r3, r3, #2
 8000340:	b21a      	sxth	r2, r3
 8000342:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000344:	801a      	strh	r2, [r3, #0]
			if (Position_volt < 0) {
 8000346:	4b17      	ldr	r3, [pc, #92]	; (80003a4 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000348:	f9b3 3000 	ldrsh.w	r3, [r3]
 800034c:	2b00      	cmp	r3, #0
 800034e:	da1d      	bge.n	800038c <HAL_TIM_IC_CaptureCallback+0x80>
				Position_volt = 0;
 8000350:	4b14      	ldr	r3, [pc, #80]	; (80003a4 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000352:	2200      	movs	r2, #0
 8000354:	801a      	strh	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	2200      	movs	r2, #0
 800035c:	625a      	str	r2, [r3, #36]	; 0x24
 800035e:	e015      	b.n	800038c <HAL_TIM_IC_CaptureCallback+0x80>
			}

		} else {
			Position_time = count / 4;
 8000360:	4b0e      	ldr	r3, [pc, #56]	; (800039c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000366:	2b00      	cmp	r3, #0
 8000368:	da00      	bge.n	800036c <HAL_TIM_IC_CaptureCallback+0x60>
 800036a:	3303      	adds	r3, #3
 800036c:	109b      	asrs	r3, r3, #2
 800036e:	b21a      	sxth	r2, r3
 8000370:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000372:	801a      	strh	r2, [r3, #0]
			if (Position_time < 0) {
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000376:	f9b3 3000 	ldrsh.w	r3, [r3]
 800037a:	2b00      	cmp	r3, #0
 800037c:	da06      	bge.n	800038c <HAL_TIM_IC_CaptureCallback+0x80>
				Position_time = 0;
 800037e:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000380:	2200      	movs	r2, #0
 8000382:	801a      	strh	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2200      	movs	r2, #0
 800038a:	625a      	str	r2, [r3, #36]	; 0x24
			}

		}
		button();
 800038c:	f7ff ff78 	bl	8000280 <button>
	}
 8000390:	bf00      	nop
 8000392:	3708      	adds	r7, #8
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	200003ac 	.word	0x200003ac
 800039c:	200003b0 	.word	0x200003b0
 80003a0:	200003b6 	.word	0x200003b6
 80003a4:	200003b4 	.word	0x200003b4
 80003a8:	200003b2 	.word	0x200003b2

080003ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b2:	f001 f83d 	bl	8001430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b6:	f000 fa1d 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ba:	f000 fbf7 	bl	8000bac <MX_GPIO_Init>
  MX_DMA_Init();
 80003be:	f000 fbcf 	bl	8000b60 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80003c2:	f000 fb9d 	bl	8000b00 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80003c6:	f000 fa71 	bl	80008ac <MX_ADC1_Init>
  MX_TIM2_Init();
 80003ca:	f000 faf5 	bl	80009b8 <MX_TIM2_Init>
  MX_DAC_Init();
 80003ce:	f000 fac9 	bl	8000964 <MX_DAC_Init>
  MX_TIM15_Init();
 80003d2:	f000 fb45 	bl	8000a60 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80003d6:	213c      	movs	r1, #60	; 0x3c
 80003d8:	48a0      	ldr	r0, [pc, #640]	; (800065c <main+0x2b0>)
 80003da:	f004 f8b0 	bl	800453e <HAL_TIM_Encoder_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, &VALOR_ADC, 1);
 80003de:	2201      	movs	r2, #1
 80003e0:	499f      	ldr	r1, [pc, #636]	; (8000660 <main+0x2b4>)
 80003e2:	48a0      	ldr	r0, [pc, #640]	; (8000664 <main+0x2b8>)
 80003e4:	f001 fa52 	bl	800188c <HAL_ADC_Start_DMA>
	max_init(0x02);
 80003e8:	2002      	movs	r0, #2
 80003ea:	f000 fd8f 	bl	8000f0c <max_init>
	button();
 80003ee:	f7ff ff47 	bl	8000280 <button>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		button();
 80003f2:	f7ff ff45 	bl	8000280 <button>
		//calcsin();
		sprintf(val, "%u\n", VALOR_ADC);
 80003f6:	4b9a      	ldr	r3, [pc, #616]	; (8000660 <main+0x2b4>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	461a      	mov	r2, r3
 80003fc:	499a      	ldr	r1, [pc, #616]	; (8000668 <main+0x2bc>)
 80003fe:	489b      	ldr	r0, [pc, #620]	; (800066c <main+0x2c0>)
 8000400:	f005 f964 	bl	80056cc <siprintf>
		uint8_t len = strlen(val);
 8000404:	4899      	ldr	r0, [pc, #612]	; (800066c <main+0x2c0>)
 8000406:	f7ff fee3 	bl	80001d0 <strlen>
 800040a:	4603      	mov	r3, r0
 800040c:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Transmit(&huart2, (uint8_t*) val, len, 100);
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	b29a      	uxth	r2, r3
 8000412:	2364      	movs	r3, #100	; 0x64
 8000414:	4995      	ldr	r1, [pc, #596]	; (800066c <main+0x2c0>)
 8000416:	4896      	ldr	r0, [pc, #600]	; (8000670 <main+0x2c4>)
 8000418:	f004 fd50 	bl	8004ebc <HAL_UART_Transmit>

		if (VALOR_ADC >= (250-(Position_volt*4)) && VALOR_ADC <= (720-(Position_volt*4))) {
 800041c:	4b95      	ldr	r3, [pc, #596]	; (8000674 <main+0x2c8>)
 800041e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000422:	009b      	lsls	r3, r3, #2
 8000424:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 8000428:	461a      	mov	r2, r3
 800042a:	4b8d      	ldr	r3, [pc, #564]	; (8000660 <main+0x2b4>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	429a      	cmp	r2, r3
 8000430:	d817      	bhi.n	8000462 <main+0xb6>
 8000432:	4b90      	ldr	r3, [pc, #576]	; (8000674 <main+0x2c8>)
 8000434:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000438:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	461a      	mov	r2, r3
 8000440:	4b87      	ldr	r3, [pc, #540]	; (8000660 <main+0x2b4>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	429a      	cmp	r2, r3
 8000446:	d30c      	bcc.n	8000462 <main+0xb6>

			matris_on[0][wave] = 1;
 8000448:	4b8b      	ldr	r3, [pc, #556]	; (8000678 <main+0x2cc>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a8b      	ldr	r2, [pc, #556]	; (800067c <main+0x2d0>)
 800044e:	2101      	movs	r1, #1
 8000450:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			HAL_Delay(Position_time);
 8000454:	4b8a      	ldr	r3, [pc, #552]	; (8000680 <main+0x2d4>)
 8000456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800045a:	4618      	mov	r0, r3
 800045c:	f001 f84e 	bl	80014fc <HAL_Delay>
 8000460:	e00b      	b.n	800047a <main+0xce>
		}

		else {

			matris_on[0][wave] = 0;
 8000462:	4b85      	ldr	r3, [pc, #532]	; (8000678 <main+0x2cc>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a85      	ldr	r2, [pc, #532]	; (800067c <main+0x2d0>)
 8000468:	2100      	movs	r1, #0
 800046a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			HAL_Delay(Position_time);
 800046e:	4b84      	ldr	r3, [pc, #528]	; (8000680 <main+0x2d4>)
 8000470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000474:	4618      	mov	r0, r3
 8000476:	f001 f841 	bl	80014fc <HAL_Delay>
		}
		if (VALOR_ADC >= (720-(Position_volt*4)) && VALOR_ADC <= (1260-(Position_volt*4))) {
 800047a:	4b7e      	ldr	r3, [pc, #504]	; (8000674 <main+0x2c8>)
 800047c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000480:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	461a      	mov	r2, r3
 8000488:	4b75      	ldr	r3, [pc, #468]	; (8000660 <main+0x2b4>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	429a      	cmp	r2, r3
 800048e:	d819      	bhi.n	80004c4 <main+0x118>
 8000490:	4b78      	ldr	r3, [pc, #480]	; (8000674 <main+0x2c8>)
 8000492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000496:	f5c3 739d 	rsb	r3, r3, #314	; 0x13a
 800049a:	3301      	adds	r3, #1
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	461a      	mov	r2, r3
 80004a0:	4b6f      	ldr	r3, [pc, #444]	; (8000660 <main+0x2b4>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d30d      	bcc.n	80004c4 <main+0x118>

			matris_on[1][wave] = 1;
 80004a8:	4b73      	ldr	r3, [pc, #460]	; (8000678 <main+0x2cc>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a73      	ldr	r2, [pc, #460]	; (800067c <main+0x2d0>)
 80004ae:	3308      	adds	r3, #8
 80004b0:	2101      	movs	r1, #1
 80004b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			HAL_Delay(Position_time);
 80004b6:	4b72      	ldr	r3, [pc, #456]	; (8000680 <main+0x2d4>)
 80004b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004bc:	4618      	mov	r0, r3
 80004be:	f001 f81d 	bl	80014fc <HAL_Delay>
 80004c2:	e00c      	b.n	80004de <main+0x132>
		}

		else {

			matris_on[1][wave] = 0;
 80004c4:	4b6c      	ldr	r3, [pc, #432]	; (8000678 <main+0x2cc>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a6c      	ldr	r2, [pc, #432]	; (800067c <main+0x2d0>)
 80004ca:	3308      	adds	r3, #8
 80004cc:	2100      	movs	r1, #0
 80004ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			HAL_Delay(Position_time);
 80004d2:	4b6b      	ldr	r3, [pc, #428]	; (8000680 <main+0x2d4>)
 80004d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004d8:	4618      	mov	r0, r3
 80004da:	f001 f80f 	bl	80014fc <HAL_Delay>
		}
		if (VALOR_ADC >= (1260-(Position_volt*4)) && VALOR_ADC <= (1780-(Position_volt*4))) {
 80004de:	4b65      	ldr	r3, [pc, #404]	; (8000674 <main+0x2c8>)
 80004e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004e4:	f5c3 739d 	rsb	r3, r3, #314	; 0x13a
 80004e8:	3301      	adds	r3, #1
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	461a      	mov	r2, r3
 80004ee:	4b5c      	ldr	r3, [pc, #368]	; (8000660 <main+0x2b4>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	429a      	cmp	r2, r3
 80004f4:	d819      	bhi.n	800052a <main+0x17e>
 80004f6:	4b5f      	ldr	r3, [pc, #380]	; (8000674 <main+0x2c8>)
 80004f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004fc:	f5c3 73de 	rsb	r3, r3, #444	; 0x1bc
 8000500:	3301      	adds	r3, #1
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	461a      	mov	r2, r3
 8000506:	4b56      	ldr	r3, [pc, #344]	; (8000660 <main+0x2b4>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	429a      	cmp	r2, r3
 800050c:	d30d      	bcc.n	800052a <main+0x17e>

			matris_on[2][wave] = 1;
 800050e:	4b5a      	ldr	r3, [pc, #360]	; (8000678 <main+0x2cc>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a5a      	ldr	r2, [pc, #360]	; (800067c <main+0x2d0>)
 8000514:	3310      	adds	r3, #16
 8000516:	2101      	movs	r1, #1
 8000518:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			HAL_Delay(Position_time);
 800051c:	4b58      	ldr	r3, [pc, #352]	; (8000680 <main+0x2d4>)
 800051e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000522:	4618      	mov	r0, r3
 8000524:	f000 ffea 	bl	80014fc <HAL_Delay>
 8000528:	e00c      	b.n	8000544 <main+0x198>
		}

		else {

			matris_on[2][wave] = 0;
 800052a:	4b53      	ldr	r3, [pc, #332]	; (8000678 <main+0x2cc>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a53      	ldr	r2, [pc, #332]	; (800067c <main+0x2d0>)
 8000530:	3310      	adds	r3, #16
 8000532:	2100      	movs	r1, #0
 8000534:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			HAL_Delay(Position_time);
 8000538:	4b51      	ldr	r3, [pc, #324]	; (8000680 <main+0x2d4>)
 800053a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800053e:	4618      	mov	r0, r3
 8000540:	f000 ffdc 	bl	80014fc <HAL_Delay>
		}
		if (VALOR_ADC >= (1780-(Position_volt*4)) && VALOR_ADC <= (2280-(Position_volt*4))) {
 8000544:	4b4b      	ldr	r3, [pc, #300]	; (8000674 <main+0x2c8>)
 8000546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800054a:	f5c3 73de 	rsb	r3, r3, #444	; 0x1bc
 800054e:	3301      	adds	r3, #1
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	461a      	mov	r2, r3
 8000554:	4b42      	ldr	r3, [pc, #264]	; (8000660 <main+0x2b4>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	429a      	cmp	r2, r3
 800055a:	d819      	bhi.n	8000590 <main+0x1e4>
 800055c:	4b45      	ldr	r3, [pc, #276]	; (8000674 <main+0x2c8>)
 800055e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000562:	f5c3 730e 	rsb	r3, r3, #568	; 0x238
 8000566:	3302      	adds	r3, #2
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	461a      	mov	r2, r3
 800056c:	4b3c      	ldr	r3, [pc, #240]	; (8000660 <main+0x2b4>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	429a      	cmp	r2, r3
 8000572:	d30d      	bcc.n	8000590 <main+0x1e4>

			matris_on[3][wave] = 1;
 8000574:	4b40      	ldr	r3, [pc, #256]	; (8000678 <main+0x2cc>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a40      	ldr	r2, [pc, #256]	; (800067c <main+0x2d0>)
 800057a:	3318      	adds	r3, #24
 800057c:	2101      	movs	r1, #1
 800057e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			HAL_Delay(Position_time);
 8000582:	4b3f      	ldr	r3, [pc, #252]	; (8000680 <main+0x2d4>)
 8000584:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000588:	4618      	mov	r0, r3
 800058a:	f000 ffb7 	bl	80014fc <HAL_Delay>
 800058e:	e00c      	b.n	80005aa <main+0x1fe>
		}

		else {

			matris_on[3][wave] = 0;
 8000590:	4b39      	ldr	r3, [pc, #228]	; (8000678 <main+0x2cc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a39      	ldr	r2, [pc, #228]	; (800067c <main+0x2d0>)
 8000596:	3318      	adds	r3, #24
 8000598:	2100      	movs	r1, #0
 800059a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			HAL_Delay(Position_time);
 800059e:	4b38      	ldr	r3, [pc, #224]	; (8000680 <main+0x2d4>)
 80005a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 ffa9 	bl	80014fc <HAL_Delay>
		}
		if (VALOR_ADC >= (2280-(Position_volt*4)) && VALOR_ADC <= (2780-(Position_volt*4))) {
 80005aa:	4b32      	ldr	r3, [pc, #200]	; (8000674 <main+0x2c8>)
 80005ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005b0:	f5c3 730e 	rsb	r3, r3, #568	; 0x238
 80005b4:	3302      	adds	r3, #2
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b29      	ldr	r3, [pc, #164]	; (8000660 <main+0x2b4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	429a      	cmp	r2, r3
 80005c0:	d819      	bhi.n	80005f6 <main+0x24a>
 80005c2:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <main+0x2c8>)
 80005c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005c8:	f5c3 732d 	rsb	r3, r3, #692	; 0x2b4
 80005cc:	3303      	adds	r3, #3
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b23      	ldr	r3, [pc, #140]	; (8000660 <main+0x2b4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d30d      	bcc.n	80005f6 <main+0x24a>

			matris_on[4][wave] = 1;
 80005da:	4b27      	ldr	r3, [pc, #156]	; (8000678 <main+0x2cc>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a27      	ldr	r2, [pc, #156]	; (800067c <main+0x2d0>)
 80005e0:	3320      	adds	r3, #32
 80005e2:	2101      	movs	r1, #1
 80005e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			HAL_Delay(Position_time);
 80005e8:	4b25      	ldr	r3, [pc, #148]	; (8000680 <main+0x2d4>)
 80005ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 ff84 	bl	80014fc <HAL_Delay>
 80005f4:	e00c      	b.n	8000610 <main+0x264>
		}

		else {

			matris_on[4][wave] = 0;
 80005f6:	4b20      	ldr	r3, [pc, #128]	; (8000678 <main+0x2cc>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a20      	ldr	r2, [pc, #128]	; (800067c <main+0x2d0>)
 80005fc:	3320      	adds	r3, #32
 80005fe:	2100      	movs	r1, #0
 8000600:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			HAL_Delay(Position_time);
 8000604:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <main+0x2d4>)
 8000606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800060a:	4618      	mov	r0, r3
 800060c:	f000 ff76 	bl	80014fc <HAL_Delay>
		}
		if (VALOR_ADC >= (2780-(Position_volt*4)) && VALOR_ADC <= (3280-(Position_volt*4))) {
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <main+0x2c8>)
 8000612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000616:	f5c3 732d 	rsb	r3, r3, #692	; 0x2b4
 800061a:	3303      	adds	r3, #3
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	461a      	mov	r2, r3
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <main+0x2b4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	429a      	cmp	r2, r3
 8000626:	d82d      	bhi.n	8000684 <main+0x2d8>
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <main+0x2c8>)
 800062a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800062e:	f5c3 734d 	rsb	r3, r3, #820	; 0x334
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	461a      	mov	r2, r3
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <main+0x2b4>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	429a      	cmp	r2, r3
 800063c:	d322      	bcc.n	8000684 <main+0x2d8>

			matris_on[5][wave] = 1;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <main+0x2cc>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a0e      	ldr	r2, [pc, #56]	; (800067c <main+0x2d0>)
 8000644:	3328      	adds	r3, #40	; 0x28
 8000646:	2101      	movs	r1, #1
 8000648:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			HAL_Delay(Position_time);
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <main+0x2d4>)
 800064e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 ff52 	bl	80014fc <HAL_Delay>
 8000658:	e021      	b.n	800069e <main+0x2f2>
 800065a:	bf00      	nop
 800065c:	20000178 	.word	0x20000178
 8000660:	20000298 	.word	0x20000298
 8000664:	2000008c 	.word	0x2000008c
 8000668:	08005fc0 	.word	0x08005fc0
 800066c:	2000029c 	.word	0x2000029c
 8000670:	20000210 	.word	0x20000210
 8000674:	200003b4 	.word	0x200003b4
 8000678:	200003a8 	.word	0x200003a8
 800067c:	200002a8 	.word	0x200002a8
 8000680:	200003b2 	.word	0x200003b2
		}

		else {

			matris_on[5][wave] = 0;
 8000684:	4b56      	ldr	r3, [pc, #344]	; (80007e0 <main+0x434>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a56      	ldr	r2, [pc, #344]	; (80007e4 <main+0x438>)
 800068a:	3328      	adds	r3, #40	; 0x28
 800068c:	2100      	movs	r1, #0
 800068e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			HAL_Delay(Position_time);
 8000692:	4b55      	ldr	r3, [pc, #340]	; (80007e8 <main+0x43c>)
 8000694:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000698:	4618      	mov	r0, r3
 800069a:	f000 ff2f 	bl	80014fc <HAL_Delay>
		}
		if (VALOR_ADC >= (3280-(Position_volt*4)) && VALOR_ADC <= (3780-(Position_volt*4))) {
 800069e:	4b53      	ldr	r3, [pc, #332]	; (80007ec <main+0x440>)
 80006a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006a4:	f5c3 734d 	rsb	r3, r3, #820	; 0x334
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b50      	ldr	r3, [pc, #320]	; (80007f0 <main+0x444>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d819      	bhi.n	80006e8 <main+0x33c>
 80006b4:	4b4d      	ldr	r3, [pc, #308]	; (80007ec <main+0x440>)
 80006b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ba:	f5c3 736c 	rsb	r3, r3, #944	; 0x3b0
 80006be:	3301      	adds	r3, #1
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b4a      	ldr	r3, [pc, #296]	; (80007f0 <main+0x444>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d30d      	bcc.n	80006e8 <main+0x33c>

			matris_on[6][wave] = 1;
 80006cc:	4b44      	ldr	r3, [pc, #272]	; (80007e0 <main+0x434>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a44      	ldr	r2, [pc, #272]	; (80007e4 <main+0x438>)
 80006d2:	3330      	adds	r3, #48	; 0x30
 80006d4:	2101      	movs	r1, #1
 80006d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			HAL_Delay(Position_time);
 80006da:	4b43      	ldr	r3, [pc, #268]	; (80007e8 <main+0x43c>)
 80006dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 ff0b 	bl	80014fc <HAL_Delay>
 80006e6:	e00c      	b.n	8000702 <main+0x356>
		}

		else {

			matris_on[6][wave] = 0;
 80006e8:	4b3d      	ldr	r3, [pc, #244]	; (80007e0 <main+0x434>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a3d      	ldr	r2, [pc, #244]	; (80007e4 <main+0x438>)
 80006ee:	3330      	adds	r3, #48	; 0x30
 80006f0:	2100      	movs	r1, #0
 80006f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			HAL_Delay(Position_time);
 80006f6:	4b3c      	ldr	r3, [pc, #240]	; (80007e8 <main+0x43c>)
 80006f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 fefd 	bl	80014fc <HAL_Delay>
		}
		if (VALOR_ADC >= (3780-(Position_volt*4)) && VALOR_ADC <= (4000-(Position_volt*4))) {
 8000702:	4b3a      	ldr	r3, [pc, #232]	; (80007ec <main+0x440>)
 8000704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000708:	f5c3 736c 	rsb	r3, r3, #944	; 0x3b0
 800070c:	3301      	adds	r3, #1
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	461a      	mov	r2, r3
 8000712:	4b37      	ldr	r3, [pc, #220]	; (80007f0 <main+0x444>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	429a      	cmp	r2, r3
 8000718:	d818      	bhi.n	800074c <main+0x3a0>
 800071a:	4b34      	ldr	r3, [pc, #208]	; (80007ec <main+0x440>)
 800071c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000720:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	461a      	mov	r2, r3
 8000728:	4b31      	ldr	r3, [pc, #196]	; (80007f0 <main+0x444>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	429a      	cmp	r2, r3
 800072e:	d30d      	bcc.n	800074c <main+0x3a0>

			matris_on[7][wave] = 1;
 8000730:	4b2b      	ldr	r3, [pc, #172]	; (80007e0 <main+0x434>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a2b      	ldr	r2, [pc, #172]	; (80007e4 <main+0x438>)
 8000736:	3338      	adds	r3, #56	; 0x38
 8000738:	2101      	movs	r1, #1
 800073a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			HAL_Delay(Position_time);
 800073e:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <main+0x43c>)
 8000740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fed9 	bl	80014fc <HAL_Delay>
 800074a:	e00c      	b.n	8000766 <main+0x3ba>
		}

		else {

			matris_on[7][wave] = 0;
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <main+0x434>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a24      	ldr	r2, [pc, #144]	; (80007e4 <main+0x438>)
 8000752:	3338      	adds	r3, #56	; 0x38
 8000754:	2100      	movs	r1, #0
 8000756:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			HAL_Delay(Position_time);
 800075a:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <main+0x43c>)
 800075c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000760:	4618      	mov	r0, r3
 8000762:	f000 fecb 	bl	80014fc <HAL_Delay>
		}

		for (int z = 0; z < 8; z++) {
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	e025      	b.n	80007b8 <main+0x40c>

			for (int i = 0; i < 8; i++) {
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	e01c      	b.n	80007ac <main+0x400>

				if (matris_on[i][z] == 1) {
 8000772:	491c      	ldr	r1, [pc, #112]	; (80007e4 <main+0x438>)
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	00da      	lsls	r2, r3, #3
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	4413      	add	r3, r2
 800077c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d108      	bne.n	8000796 <main+0x3ea>

					setled(i, z, 1);
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	68fa      	ldr	r2, [r7, #12]
 800078a:	b2d1      	uxtb	r1, r2
 800078c:	2201      	movs	r2, #1
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fad4 	bl	8000d3c <setled>
 8000794:	e007      	b.n	80007a6 <main+0x3fa>

				} else {
					setled(i, z, 0);
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	68fa      	ldr	r2, [r7, #12]
 800079c:	b2d1      	uxtb	r1, r2
 800079e:	2200      	movs	r2, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 facb 	bl	8000d3c <setled>
			for (int i = 0; i < 8; i++) {
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	3301      	adds	r3, #1
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	2b07      	cmp	r3, #7
 80007b0:	dddf      	ble.n	8000772 <main+0x3c6>
		for (int z = 0; z < 8; z++) {
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	3301      	adds	r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	2b07      	cmp	r3, #7
 80007bc:	ddd6      	ble.n	800076c <main+0x3c0>
				}

			}
		}

		wave++;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <main+0x434>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4a06      	ldr	r2, [pc, #24]	; (80007e0 <main+0x434>)
 80007c6:	6013      	str	r3, [r2, #0]
		HAL_Delay(30);
 80007c8:	201e      	movs	r0, #30
 80007ca:	f000 fe97 	bl	80014fc <HAL_Delay>
		if (wave > 7) {
 80007ce:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <main+0x434>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b07      	cmp	r3, #7
 80007d4:	f77f ae0d 	ble.w	80003f2 <main+0x46>

			wave = 0;
 80007d8:	4b01      	ldr	r3, [pc, #4]	; (80007e0 <main+0x434>)
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
	while (1) {
 80007de:	e608      	b.n	80003f2 <main+0x46>
 80007e0:	200003a8 	.word	0x200003a8
 80007e4:	200002a8 	.word	0x200002a8
 80007e8:	200003b2 	.word	0x200003b2
 80007ec:	200003b4 	.word	0x200003b4
 80007f0:	20000298 	.word	0x20000298

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b09c      	sub	sp, #112	; 0x70
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007fe:	2228      	movs	r2, #40	; 0x28
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f004 ff5a 	bl	80056bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000818:	463b      	mov	r3, r7
 800081a:	2234      	movs	r2, #52	; 0x34
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f004 ff4c 	bl	80056bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000824:	2302      	movs	r3, #2
 8000826:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000828:	2301      	movs	r3, #1
 800082a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082c:	2310      	movs	r3, #16
 800082e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000830:	2302      	movs	r3, #2
 8000832:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000834:	2300      	movs	r3, #0
 8000836:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000838:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800083c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000842:	4618      	mov	r0, r3
 8000844:	f002 f978 	bl	8002b38 <HAL_RCC_OscConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800084e:	f000 fa15 	bl	8000c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000852:	230f      	movs	r3, #15
 8000854:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000856:	2302      	movs	r3, #2
 8000858:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000862:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000868:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800086c:	2102      	movs	r1, #2
 800086e:	4618      	mov	r0, r3
 8000870:	f003 f9a0 	bl	8003bb4 <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800087a:	f000 f9ff 	bl	8000c7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15|RCC_PERIPHCLK_ADC1;
 800087e:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <SystemClock_Config+0xb4>)
 8000880:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800088a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800088c:	463b      	mov	r3, r7
 800088e:	4618      	mov	r0, r3
 8000890:	f003 fbc6 	bl	8004020 <HAL_RCCEx_PeriphCLKConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800089a:	f000 f9ef 	bl	8000c7c <Error_Handler>
  }
}
 800089e:	bf00      	nop
 80008a0:	3770      	adds	r7, #112	; 0x70
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	00040080 	.word	0x00040080

080008ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008b2:	463b      	mov	r3, r7
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
 80008c0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008c2:	4b27      	ldr	r3, [pc, #156]	; (8000960 <MX_ADC1_Init+0xb4>)
 80008c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008ca:	4b25      	ldr	r3, [pc, #148]	; (8000960 <MX_ADC1_Init+0xb4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008d0:	4b23      	ldr	r3, [pc, #140]	; (8000960 <MX_ADC1_Init+0xb4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008d6:	4b22      	ldr	r3, [pc, #136]	; (8000960 <MX_ADC1_Init+0xb4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008dc:	4b20      	ldr	r3, [pc, #128]	; (8000960 <MX_ADC1_Init+0xb4>)
 80008de:	2201      	movs	r2, #1
 80008e0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008e2:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <MX_ADC1_Init+0xb4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ea:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <MX_ADC1_Init+0xb4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <MX_ADC1_Init+0xb4>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_ADC1_Init+0xb4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008fc:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_ADC1_Init+0xb4>)
 80008fe:	2201      	movs	r2, #1
 8000900:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_ADC1_Init+0xb4>)
 8000904:	2201      	movs	r2, #1
 8000906:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_ADC1_Init+0xb4>)
 800090c:	2204      	movs	r2, #4
 800090e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_ADC1_Init+0xb4>)
 8000912:	2200      	movs	r2, #0
 8000914:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_ADC1_Init+0xb4>)
 8000918:	2200      	movs	r2, #0
 800091a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800091c:	4810      	ldr	r0, [pc, #64]	; (8000960 <MX_ADC1_Init+0xb4>)
 800091e:	f000 fe2f 	bl	8001580 <HAL_ADC_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000928:	f000 f9a8 	bl	8000c7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800092c:	2301      	movs	r3, #1
 800092e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000930:	2301      	movs	r3, #1
 8000932:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000938:	2307      	movs	r3, #7
 800093a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000944:	463b      	mov	r3, r7
 8000946:	4619      	mov	r1, r3
 8000948:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_ADC1_Init+0xb4>)
 800094a:	f001 f83b 	bl	80019c4 <HAL_ADC_ConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000954:	f000 f992 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000008c 	.word	0x2000008c

08000964 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_DAC_Init+0x4c>)
 8000976:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <MX_DAC_Init+0x50>)
 8000978:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800097a:	480d      	ldr	r0, [pc, #52]	; (80009b0 <MX_DAC_Init+0x4c>)
 800097c:	f001 fd19 	bl	80023b2 <HAL_DAC_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8000986:	f000 f979 	bl	8000c7c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T15_TRGO;
 800098a:	231c      	movs	r3, #28
 800098c:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2200      	movs	r2, #0
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_DAC_Init+0x4c>)
 800099a:	f001 fd2c 	bl	80023f6 <HAL_DAC_ConfigChannel>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 80009a4:	f000 f96a 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000120 	.word	0x20000120
 80009b4:	40007400 	.word	0x40007400

080009b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08c      	sub	sp, #48	; 0x30
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	2224      	movs	r2, #36	; 0x24
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f004 fe78 	bl	80056bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009cc:	463b      	mov	r3, r7
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009d6:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <MX_TIM2_Init+0xa4>)
 80009d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009de:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <MX_TIM2_Init+0xa4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e4:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <MX_TIM2_Init+0xa4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <MX_TIM2_Init+0xa4>)
 80009ec:	f04f 32ff 	mov.w	r2, #4294967295
 80009f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <MX_TIM2_Init+0xa4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MX_TIM2_Init+0xa4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009fe:	2303      	movs	r3, #3
 8000a00:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000a02:	2302      	movs	r3, #2
 8000a04:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a06:	2301      	movs	r3, #1
 8000a08:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000a12:	2302      	movs	r3, #2
 8000a14:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a16:	2301      	movs	r3, #1
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	4619      	mov	r1, r3
 8000a28:	480c      	ldr	r0, [pc, #48]	; (8000a5c <MX_TIM2_Init+0xa4>)
 8000a2a:	f003 fce2 	bl	80043f2 <HAL_TIM_Encoder_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000a34:	f000 f922 	bl	8000c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_TIM2_Init+0xa4>)
 8000a46:	f004 f967 	bl	8004d18 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000a50:	f000 f914 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	3730      	adds	r7, #48	; 0x30
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000178 	.word	0x20000178

08000a60 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a66:	f107 0310 	add.w	r3, r7, #16
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <MX_TIM15_Init+0x98>)
 8000a80:	4a1e      	ldr	r2, [pc, #120]	; (8000afc <MX_TIM15_Init+0x9c>)
 8000a82:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 72-1;
 8000a84:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <MX_TIM15_Init+0x98>)
 8000a86:	2247      	movs	r2, #71	; 0x47
 8000a88:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <MX_TIM15_Init+0x98>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 100;
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <MX_TIM15_Init+0x98>)
 8000a92:	2264      	movs	r2, #100	; 0x64
 8000a94:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_TIM15_Init+0x98>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_TIM15_Init+0x98>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_TIM15_Init+0x98>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000aa8:	4813      	ldr	r0, [pc, #76]	; (8000af8 <MX_TIM15_Init+0x98>)
 8000aaa:	f003 fc4b 	bl	8004344 <HAL_TIM_Base_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8000ab4:	f000 f8e2 	bl	8000c7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000abe:	f107 0310 	add.w	r3, r7, #16
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480c      	ldr	r0, [pc, #48]	; (8000af8 <MX_TIM15_Init+0x98>)
 8000ac6:	f003 ff07 	bl	80048d8 <HAL_TIM_ConfigClockSource>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8000ad0:	f000 f8d4 	bl	8000c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ad4:	2320      	movs	r3, #32
 8000ad6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_TIM15_Init+0x98>)
 8000ae2:	f004 f919 	bl	8004d18 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8000aec:	f000 f8c6 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	3720      	adds	r7, #32
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200001c4 	.word	0x200001c4
 8000afc:	40014000 	.word	0x40014000

08000b00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b06:	4a15      	ldr	r2, [pc, #84]	; (8000b5c <MX_USART2_UART_Init+0x5c>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b44:	f004 f96c 	bl	8004e20 <HAL_UART_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b4e:	f000 f895 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000210 	.word	0x20000210
 8000b5c:	40004400 	.word	0x40004400

08000b60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <MX_DMA_Init+0x48>)
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ba8 <MX_DMA_Init+0x48>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6153      	str	r3, [r2, #20]
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <MX_DMA_Init+0x48>)
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2100      	movs	r1, #0
 8000b82:	200b      	movs	r0, #11
 8000b84:	f001 fbdf 	bl	8002346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b88:	200b      	movs	r0, #11
 8000b8a:	f001 fbf8 	bl	800237e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	200d      	movs	r0, #13
 8000b94:	f001 fbd7 	bl	8002346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000b98:	200d      	movs	r0, #13
 8000b9a:	f001 fbf0 	bl	800237e <HAL_NVIC_EnableIRQ>

}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000

08000bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	4b2b      	ldr	r3, [pc, #172]	; (8000c70 <MX_GPIO_Init+0xc4>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	4a2a      	ldr	r2, [pc, #168]	; (8000c70 <MX_GPIO_Init+0xc4>)
 8000bc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bcc:	6153      	str	r3, [r2, #20]
 8000bce:	4b28      	ldr	r3, [pc, #160]	; (8000c70 <MX_GPIO_Init+0xc4>)
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bda:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <MX_GPIO_Init+0xc4>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	4a24      	ldr	r2, [pc, #144]	; (8000c70 <MX_GPIO_Init+0xc4>)
 8000be0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000be4:	6153      	str	r3, [r2, #20]
 8000be6:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <MX_GPIO_Init+0xc4>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <MX_GPIO_Init+0xc4>)
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	4a1e      	ldr	r2, [pc, #120]	; (8000c70 <MX_GPIO_Init+0xc4>)
 8000bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfc:	6153      	str	r3, [r2, #20]
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <MX_GPIO_Init+0xc4>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <MX_GPIO_Init+0xc4>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	4a18      	ldr	r2, [pc, #96]	; (8000c70 <MX_GPIO_Init+0xc4>)
 8000c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c14:	6153      	str	r3, [r2, #20]
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_GPIO_Init+0xc4>)
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	f242 0138 	movw	r1, #8248	; 0x2038
 8000c28:	4812      	ldr	r0, [pc, #72]	; (8000c74 <MX_GPIO_Init+0xc8>)
 8000c2a:	f001 ff53 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Pulsador_Pin */
  GPIO_InitStruct.Pin = Pulsador_Pin;
 8000c2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pulsador_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	480d      	ldr	r0, [pc, #52]	; (8000c78 <MX_GPIO_Init+0xcc>)
 8000c44:	f001 fdbc 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = LED_Pin|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000c48:	f242 0338 	movw	r3, #8248	; 0x2038
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <MX_GPIO_Init+0xc8>)
 8000c62:	f001 fdad 	bl	80027c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	; 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40021000 	.word	0x40021000
 8000c74:	48000400 	.word	0x48000400
 8000c78:	48000800 	.word	0x48000800

08000c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c80:	b672      	cpsid	i
}
 8000c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c84:	e7fe      	b.n	8000c84 <Error_Handler+0x8>
	...

08000c88 <write_byte>:
};



void write_byte (uint8_t byte)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	e018      	b.n	8000cca <write_byte+0x42>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2120      	movs	r1, #32
 8000c9c:	480f      	ldr	r0, [pc, #60]	; (8000cdc <write_byte+0x54>)
 8000c9e:	f001 ff19 	bl	8002ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	461a      	mov	r2, r3
 8000cac:	2108      	movs	r1, #8
 8000cae:	480b      	ldr	r0, [pc, #44]	; (8000cdc <write_byte+0x54>)
 8000cb0:	f001 ff10 	bl	8002ad4 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2120      	movs	r1, #32
 8000cbe:	4807      	ldr	r0, [pc, #28]	; (8000cdc <write_byte+0x54>)
 8000cc0:	f001 ff08 	bl	8002ad4 <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	2b07      	cmp	r3, #7
 8000cce:	dde3      	ble.n	8000c98 <write_byte+0x10>
	}
}
 8000cd0:	bf00      	nop
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	48000400 	.word	0x48000400

08000ce0 <write_max_cmd>:


void write_max_cmd (uint8_t address, uint8_t cmd)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	460a      	mov	r2, r1
 8000cea:	71fb      	strb	r3, [r7, #7]
 8000cec:	4613      	mov	r3, r2
 8000cee:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2110      	movs	r1, #16
 8000cf4:	4810      	ldr	r0, [pc, #64]	; (8000d38 <write_max_cmd+0x58>)
 8000cf6:	f001 feed 	bl	8002ad4 <HAL_GPIO_WritePin>
	for (int i=0;i<num; i++)
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	e00a      	b.n	8000d16 <write_max_cmd+0x36>
	{
		write_byte (address);
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ffc0 	bl	8000c88 <write_byte>
		write_byte (cmd); 
 8000d08:	79bb      	ldrb	r3, [r7, #6]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ffbc 	bl	8000c88 <write_byte>
	for (int i=0;i<num; i++)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	3301      	adds	r3, #1
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	ddf1      	ble.n	8000d00 <write_max_cmd+0x20>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2110      	movs	r1, #16
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <write_max_cmd+0x58>)
 8000d22:	f001 fed7 	bl	8002ad4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 8000d26:	2201      	movs	r2, #1
 8000d28:	2110      	movs	r1, #16
 8000d2a:	4803      	ldr	r0, [pc, #12]	; (8000d38 <write_max_cmd+0x58>)
 8000d2c:	f001 fed2 	bl	8002ad4 <HAL_GPIO_WritePin>
}
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	48000400 	.word	0x48000400

08000d3c <setled>:


void setled(uint8_t row, uint8_t col, uint8_t value)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
 8000d46:	460b      	mov	r3, r1
 8000d48:	71bb      	strb	r3, [r7, #6]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	717b      	strb	r3, [r7, #5]
  bitWrite(buffer[col], row, value);
 8000d4e:	797b      	ldrb	r3, [r7, #5]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d00d      	beq.n	8000d70 <setled+0x34>
 8000d54:	79bb      	ldrb	r3, [r7, #6]
 8000d56:	4a2c      	ldr	r2, [pc, #176]	; (8000e08 <setled+0xcc>)
 8000d58:	5cd1      	ldrb	r1, [r2, r3]
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	79bb      	ldrb	r3, [r7, #6]
 8000d66:	430a      	orrs	r2, r1
 8000d68:	b2d1      	uxtb	r1, r2
 8000d6a:	4a27      	ldr	r2, [pc, #156]	; (8000e08 <setled+0xcc>)
 8000d6c:	54d1      	strb	r1, [r2, r3]
 8000d6e:	e00e      	b.n	8000d8e <setled+0x52>
 8000d70:	79bb      	ldrb	r3, [r7, #6]
 8000d72:	4a25      	ldr	r2, [pc, #148]	; (8000e08 <setled+0xcc>)
 8000d74:	5cd1      	ldrb	r1, [r2, r3]
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	79bb      	ldrb	r3, [r7, #6]
 8000d86:	400a      	ands	r2, r1
 8000d88:	b2d1      	uxtb	r1, r2
 8000d8a:	4a1f      	ldr	r2, [pc, #124]	; (8000e08 <setled+0xcc>)
 8000d8c:	54d1      	strb	r1, [r2, r3]

	int n = col / 8;
 8000d8e:	79bb      	ldrb	r3, [r7, #6]
 8000d90:	08db      	lsrs	r3, r3, #3
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	613b      	str	r3, [r7, #16]
	int c = col % 8;
 8000d96:	79bb      	ldrb	r3, [r7, #6]
 8000d98:	f003 0307 	and.w	r3, r3, #7
 8000d9c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW    
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2110      	movs	r1, #16
 8000da2:	481a      	ldr	r0, [pc, #104]	; (8000e0c <setled+0xd0>)
 8000da4:	f001 fe96 	bl	8002ad4 <HAL_GPIO_WritePin>
	for (int i=0; i<num; i++) 
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	e01b      	b.n	8000de6 <setled+0xaa>
	{
		if (i == (num-(n+1)))
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	425b      	negs	r3, r3
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d10d      	bne.n	8000dd4 <setled+0x98>
		{
			write_byte (((c+1)));
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff61 	bl	8000c88 <write_byte>
			write_byte (buffer[col]);
 8000dc6:	79bb      	ldrb	r3, [r7, #6]
 8000dc8:	4a0f      	ldr	r2, [pc, #60]	; (8000e08 <setled+0xcc>)
 8000dca:	5cd3      	ldrb	r3, [r2, r3]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff5b 	bl	8000c88 <write_byte>
 8000dd2:	e005      	b.n	8000de0 <setled+0xa4>
		}
		else
		{
			write_byte (0);
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f7ff ff57 	bl	8000c88 <write_byte>
			write_byte (0);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f7ff ff54 	bl	8000c88 <write_byte>
	for (int i=0; i<num; i++) 
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	3301      	adds	r3, #1
 8000de4:	617b      	str	r3, [r7, #20]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	dde0      	ble.n	8000dae <setled+0x72>
		}
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW 
 8000dec:	2200      	movs	r2, #0
 8000dee:	2110      	movs	r1, #16
 8000df0:	4806      	ldr	r0, [pc, #24]	; (8000e0c <setled+0xd0>)
 8000df2:	f001 fe6f 	bl	8002ad4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH 
 8000df6:	2201      	movs	r2, #1
 8000df8:	2110      	movs	r1, #16
 8000dfa:	4804      	ldr	r0, [pc, #16]	; (8000e0c <setled+0xd0>)
 8000dfc:	f001 fe6a 	bl	8002ad4 <HAL_GPIO_WritePin>
}
 8000e00:	bf00      	nop
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	200003bc 	.word	0x200003bc
 8000e0c:	48000400 	.word	0x48000400

08000e10 <setrow>:


void setrow(uint8_t row, uint8_t value)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	460a      	mov	r2, r1
 8000e1a:	71fb      	strb	r3, [r7, #7]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	71bb      	strb	r3, [r7, #6]
	int n = row / 8;
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	08db      	lsrs	r3, r3, #3
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	617b      	str	r3, [r7, #20]
	int r = row % 8;
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	613b      	str	r3, [r7, #16]
	
	uint8_t store = value;
 8000e30:	79bb      	ldrb	r3, [r7, #6]
 8000e32:	73fb      	strb	r3, [r7, #15]
	for (int i=0; i<num; i++) 
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]
 8000e38:	e02d      	b.n	8000e96 <setrow+0x86>
	{
		if (i == ((n)))
 8000e3a:	69fa      	ldr	r2, [r7, #28]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d120      	bne.n	8000e84 <setrow+0x74>
		{
//			for (int col=0+(8*n); col<8+(8*n); col++)  // uncomment this if the character looks inverted about X axis
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	3307      	adds	r3, #7
 8000e48:	61bb      	str	r3, [r7, #24]
 8000e4a:	e015      	b.n	8000e78 <setrow+0x68>
			{
				bool b = value&0x80;
 8000e4c:	79bb      	ldrb	r3, [r7, #6]
 8000e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	bf14      	ite	ne
 8000e56:	2301      	movne	r3, #1
 8000e58:	2300      	moveq	r3, #0
 8000e5a:	73bb      	strb	r3, [r7, #14]
				setled (r, col, b);
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	b2d1      	uxtb	r1, r2
 8000e64:	7bba      	ldrb	r2, [r7, #14]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff68 	bl	8000d3c <setled>
				value<<=1;
 8000e6c:	79bb      	ldrb	r3, [r7, #6]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	71bb      	strb	r3, [r7, #6]
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	3b01      	subs	r3, #1
 8000e76:	61bb      	str	r3, [r7, #24]
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	dae4      	bge.n	8000e4c <setrow+0x3c>
 8000e82:	e005      	b.n	8000e90 <setrow+0x80>
			}
		}
		else
		{
			write_byte (0);
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff feff 	bl	8000c88 <write_byte>
			write_byte (0);
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff fefc 	bl	8000c88 <write_byte>
	for (int i=0; i<num; i++) 
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	3301      	adds	r3, #1
 8000e94:	61fb      	str	r3, [r7, #28]
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	ddce      	ble.n	8000e3a <setrow+0x2a>
		}
	}
	buffer_row[row] = store;
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	4903      	ldr	r1, [pc, #12]	; (8000eac <setrow+0x9c>)
 8000ea0:	7bfa      	ldrb	r2, [r7, #15]
 8000ea2:	54ca      	strb	r2, [r1, r3]
}
 8000ea4:	bf00      	nop
 8000ea6:	3720      	adds	r7, #32
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	2000040c 	.word	0x2000040c

08000eb0 <max_clear>:
}



void max_clear(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
	for (int i=0; i<num*8; i++) 
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	e008      	b.n	8000ece <max_clear+0x1e>
		setrow(i,0);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ffa4 	bl	8000e10 <setrow>
	for (int i=0; i<num*8; i++) 
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b07      	cmp	r3, #7
 8000ed2:	ddf3      	ble.n	8000ebc <max_clear+0xc>
		
	for (int i=0; i<80; i++)
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	e00c      	b.n	8000ef4 <max_clear+0x44>
	{
		buffer[i] = 0;
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <max_clear+0x54>)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
	  buffer_row[i] = 0;
 8000ee4:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <max_clear+0x58>)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	4413      	add	r3, r2
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	2b4f      	cmp	r3, #79	; 0x4f
 8000ef8:	ddef      	ble.n	8000eda <max_clear+0x2a>
	}
}
 8000efa:	bf00      	nop
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	200003bc 	.word	0x200003bc
 8000f08:	2000040c 	.word	0x2000040c

08000f0c <max_init>:
}



void max_init (uint8_t brightness)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
	write_max_cmd(0x09, 0x00);       //  no decoding
 8000f16:	2100      	movs	r1, #0
 8000f18:	2009      	movs	r0, #9
 8000f1a:	f7ff fee1 	bl	8000ce0 <write_max_cmd>
	write_max_cmd(0x0b, 0x07);       //  scan limit = 8 LEDs
 8000f1e:	2107      	movs	r1, #7
 8000f20:	200b      	movs	r0, #11
 8000f22:	f7ff fedd 	bl	8000ce0 <write_max_cmd>
	write_max_cmd(0x0c, 0x01);       //  power down =0,normal mode = 1
 8000f26:	2101      	movs	r1, #1
 8000f28:	200c      	movs	r0, #12
 8000f2a:	f7ff fed9 	bl	8000ce0 <write_max_cmd>
	write_max_cmd(0x0f, 0x00);       //  no test display
 8000f2e:	2100      	movs	r1, #0
 8000f30:	200f      	movs	r0, #15
 8000f32:	f7ff fed5 	bl	8000ce0 <write_max_cmd>
	
	max_clear ();
 8000f36:	f7ff ffbb 	bl	8000eb0 <max_clear>
	
	write_max_cmd(0x0a, brightness);       //  brightness intensity
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	200a      	movs	r0, #10
 8000f40:	f7ff fece 	bl	8000ce0 <write_max_cmd>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <HAL_MspInit+0x44>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <HAL_MspInit+0x44>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6193      	str	r3, [r2, #24]
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <HAL_MspInit+0x44>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <HAL_MspInit+0x44>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <HAL_MspInit+0x44>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	61d3      	str	r3, [r2, #28]
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_MspInit+0x44>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f82:	2007      	movs	r0, #7
 8000f84:	f001 f9d4 	bl	8002330 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40021000 	.word	0x40021000

08000f94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fb4:	d14c      	bne.n	8001050 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fb6:	4b28      	ldr	r3, [pc, #160]	; (8001058 <HAL_ADC_MspInit+0xc4>)
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	4a27      	ldr	r2, [pc, #156]	; (8001058 <HAL_ADC_MspInit+0xc4>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	6153      	str	r3, [r2, #20]
 8000fc2:	4b25      	ldr	r3, [pc, #148]	; (8001058 <HAL_ADC_MspInit+0xc4>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	4b22      	ldr	r3, [pc, #136]	; (8001058 <HAL_ADC_MspInit+0xc4>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	4a21      	ldr	r2, [pc, #132]	; (8001058 <HAL_ADC_MspInit+0xc4>)
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd8:	6153      	str	r3, [r2, #20]
 8000fda:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <HAL_ADC_MspInit+0xc4>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fea:	2303      	movs	r3, #3
 8000fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ffc:	f001 fbe0 	bl	80027c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <HAL_ADC_MspInit+0xc8>)
 8001002:	4a17      	ldr	r2, [pc, #92]	; (8001060 <HAL_ADC_MspInit+0xcc>)
 8001004:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <HAL_ADC_MspInit+0xc8>)
 8001008:	2200      	movs	r2, #0
 800100a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <HAL_ADC_MspInit+0xc8>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001012:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_ADC_MspInit+0xc8>)
 8001014:	2280      	movs	r2, #128	; 0x80
 8001016:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001018:	4b10      	ldr	r3, [pc, #64]	; (800105c <HAL_ADC_MspInit+0xc8>)
 800101a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800101e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <HAL_ADC_MspInit+0xc8>)
 8001022:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001026:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <HAL_ADC_MspInit+0xc8>)
 800102a:	2220      	movs	r2, #32
 800102c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <HAL_ADC_MspInit+0xc8>)
 8001030:	2200      	movs	r2, #0
 8001032:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001034:	4809      	ldr	r0, [pc, #36]	; (800105c <HAL_ADC_MspInit+0xc8>)
 8001036:	f001 fa2b 	bl	8002490 <HAL_DMA_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001040:	f7ff fe1c 	bl	8000c7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a05      	ldr	r2, [pc, #20]	; (800105c <HAL_ADC_MspInit+0xc8>)
 8001048:	639a      	str	r2, [r3, #56]	; 0x38
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <HAL_ADC_MspInit+0xc8>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001050:	bf00      	nop
 8001052:	3728      	adds	r7, #40	; 0x28
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40021000 	.word	0x40021000
 800105c:	200000dc 	.word	0x200000dc
 8001060:	40020008 	.word	0x40020008

08001064 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a2c      	ldr	r2, [pc, #176]	; (8001134 <HAL_DAC_MspInit+0xd0>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d152      	bne.n	800112c <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001086:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <HAL_DAC_MspInit+0xd4>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4a2b      	ldr	r2, [pc, #172]	; (8001138 <HAL_DAC_MspInit+0xd4>)
 800108c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001090:	61d3      	str	r3, [r2, #28]
 8001092:	4b29      	ldr	r3, [pc, #164]	; (8001138 <HAL_DAC_MspInit+0xd4>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	4b26      	ldr	r3, [pc, #152]	; (8001138 <HAL_DAC_MspInit+0xd4>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	4a25      	ldr	r2, [pc, #148]	; (8001138 <HAL_DAC_MspInit+0xd4>)
 80010a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a8:	6153      	str	r3, [r2, #20]
 80010aa:	4b23      	ldr	r3, [pc, #140]	; (8001138 <HAL_DAC_MspInit+0xd4>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010b6:	2310      	movs	r3, #16
 80010b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ba:	2303      	movs	r3, #3
 80010bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010cc:	f001 fb78 	bl	80027c0 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <HAL_DAC_MspInit+0xd8>)
 80010d2:	4a1b      	ldr	r2, [pc, #108]	; (8001140 <HAL_DAC_MspInit+0xdc>)
 80010d4:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010d6:	4b19      	ldr	r3, [pc, #100]	; (800113c <HAL_DAC_MspInit+0xd8>)
 80010d8:	2210      	movs	r2, #16
 80010da:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <HAL_DAC_MspInit+0xd8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <HAL_DAC_MspInit+0xd8>)
 80010e4:	2280      	movs	r2, #128	; 0x80
 80010e6:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <HAL_DAC_MspInit+0xd8>)
 80010ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ee:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_DAC_MspInit+0xd8>)
 80010f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010f6:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <HAL_DAC_MspInit+0xd8>)
 80010fa:	2220      	movs	r2, #32
 80010fc:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <HAL_DAC_MspInit+0xd8>)
 8001100:	2200      	movs	r2, #0
 8001102:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001104:	480d      	ldr	r0, [pc, #52]	; (800113c <HAL_DAC_MspInit+0xd8>)
 8001106:	f001 f9c3 	bl	8002490 <HAL_DMA_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8001110:	f7ff fdb4 	bl	8000c7c <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <HAL_DAC_MspInit+0xe0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <HAL_DAC_MspInit+0xe0>)
 800111a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800111e:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a06      	ldr	r2, [pc, #24]	; (800113c <HAL_DAC_MspInit+0xd8>)
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <HAL_DAC_MspInit+0xd8>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800112c:	bf00      	nop
 800112e:	3728      	adds	r7, #40	; 0x28
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40007400 	.word	0x40007400
 8001138:	40021000 	.word	0x40021000
 800113c:	20000134 	.word	0x20000134
 8001140:	40020030 	.word	0x40020030
 8001144:	40010000 	.word	0x40010000

08001148 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	; 0x28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001168:	d130      	bne.n	80011cc <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <HAL_TIM_Encoder_MspInit+0x8c>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	61d3      	str	r3, [r2, #28]
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	4a13      	ldr	r2, [pc, #76]	; (80011d4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800118c:	6153      	str	r3, [r2, #20]
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800119a:	2322      	movs	r3, #34	; 0x22
 800119c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011aa:	2301      	movs	r3, #1
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b8:	f001 fb02 	bl	80027c0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2100      	movs	r1, #0
 80011c0:	201c      	movs	r0, #28
 80011c2:	f001 f8c0 	bl	8002346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011c6:	201c      	movs	r0, #28
 80011c8:	f001 f8d9 	bl	800237e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011cc:	bf00      	nop
 80011ce:	3728      	adds	r7, #40	; 0x28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40021000 	.word	0x40021000

080011d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0d      	ldr	r2, [pc, #52]	; (800121c <HAL_TIM_Base_MspInit+0x44>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d113      	bne.n	8001212 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <HAL_TIM_Base_MspInit+0x48>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	4a0c      	ldr	r2, [pc, #48]	; (8001220 <HAL_TIM_Base_MspInit+0x48>)
 80011f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f4:	6193      	str	r3, [r2, #24]
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_TIM_Base_MspInit+0x48>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	2018      	movs	r0, #24
 8001208:	f001 f89d 	bl	8002346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800120c:	2018      	movs	r0, #24
 800120e:	f001 f8b6 	bl	800237e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40014000 	.word	0x40014000
 8001220:	40021000 	.word	0x40021000

08001224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a17      	ldr	r2, [pc, #92]	; (80012a0 <HAL_UART_MspInit+0x7c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d128      	bne.n	8001298 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <HAL_UART_MspInit+0x80>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	4a16      	ldr	r2, [pc, #88]	; (80012a4 <HAL_UART_MspInit+0x80>)
 800124c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001250:	61d3      	str	r3, [r2, #28]
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <HAL_UART_MspInit+0x80>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <HAL_UART_MspInit+0x80>)
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <HAL_UART_MspInit+0x80>)
 8001264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001268:	6153      	str	r3, [r2, #20]
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_UART_MspInit+0x80>)
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001276:	230c      	movs	r3, #12
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001286:	2307      	movs	r3, #7
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4619      	mov	r1, r3
 8001290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001294:	f001 fa94 	bl	80027c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001298:	bf00      	nop
 800129a:	3728      	adds	r7, #40	; 0x28
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40004400 	.word	0x40004400
 80012a4:	40021000 	.word	0x40021000

080012a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <NMI_Handler+0x4>

080012ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <HardFault_Handler+0x4>

080012b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <MemManage_Handler+0x4>

080012ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <BusFault_Handler+0x4>

080012c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <UsageFault_Handler+0x4>

080012c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f4:	f000 f8e2 	bl	80014bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}

080012fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <DMA1_Channel1_IRQHandler+0x10>)
 8001302:	f001 f96b 	bl	80025dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200000dc 	.word	0x200000dc

08001310 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <DMA1_Channel3_IRQHandler+0x10>)
 8001316:	f001 f961 	bl	80025dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000134 	.word	0x20000134

08001324 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800132a:	f003 f9b6 	bl	800469a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200001c4 	.word	0x200001c4

08001338 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <TIM2_IRQHandler+0x10>)
 800133e:	f003 f9ac 	bl	800469a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000178 	.word	0x20000178

0800134c <_sbrk>:
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <_sbrk+0x5c>)
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <_sbrk+0x60>)
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d102      	bne.n	800136e <_sbrk+0x22>
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <_sbrk+0x64>)
 800136a:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <_sbrk+0x68>)
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <_sbrk+0x64>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	429a      	cmp	r2, r3
 800137a:	d207      	bcs.n	800138c <_sbrk+0x40>
 800137c:	f004 f974 	bl	8005668 <__errno>
 8001380:	4603      	mov	r3, r0
 8001382:	220c      	movs	r2, #12
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
 800138a:	e009      	b.n	80013a0 <_sbrk+0x54>
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <_sbrk+0x64>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	4a05      	ldr	r2, [pc, #20]	; (80013b0 <_sbrk+0x64>)
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20004000 	.word	0x20004000
 80013ac:	00000400 	.word	0x00000400
 80013b0:	2000045c 	.word	0x2000045c
 80013b4:	20000478 	.word	0x20000478

080013b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <SystemInit+0x20>)
 80013be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013c2:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <SystemInit+0x20>)
 80013c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <Reset_Handler>:
 80013dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001414 <LoopForever+0x2>
 80013e0:	f7ff ffea 	bl	80013b8 <SystemInit>
 80013e4:	480c      	ldr	r0, [pc, #48]	; (8001418 <LoopForever+0x6>)
 80013e6:	490d      	ldr	r1, [pc, #52]	; (800141c <LoopForever+0xa>)
 80013e8:	4a0d      	ldr	r2, [pc, #52]	; (8001420 <LoopForever+0xe>)
 80013ea:	2300      	movs	r3, #0
 80013ec:	e002      	b.n	80013f4 <LoopCopyDataInit>

080013ee <CopyDataInit>:
 80013ee:	58d4      	ldr	r4, [r2, r3]
 80013f0:	50c4      	str	r4, [r0, r3]
 80013f2:	3304      	adds	r3, #4

080013f4 <LoopCopyDataInit>:
 80013f4:	18c4      	adds	r4, r0, r3
 80013f6:	428c      	cmp	r4, r1
 80013f8:	d3f9      	bcc.n	80013ee <CopyDataInit>
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <LoopForever+0x12>)
 80013fc:	4c0a      	ldr	r4, [pc, #40]	; (8001428 <LoopForever+0x16>)
 80013fe:	2300      	movs	r3, #0
 8001400:	e001      	b.n	8001406 <LoopFillZerobss>

08001402 <FillZerobss>:
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	3204      	adds	r2, #4

08001406 <LoopFillZerobss>:
 8001406:	42a2      	cmp	r2, r4
 8001408:	d3fb      	bcc.n	8001402 <FillZerobss>
 800140a:	f004 f933 	bl	8005674 <__libc_init_array>
 800140e:	f7fe ffcd 	bl	80003ac <main>

08001412 <LoopForever>:
 8001412:	e7fe      	b.n	8001412 <LoopForever>
 8001414:	20004000 	.word	0x20004000
 8001418:	20000000 	.word	0x20000000
 800141c:	20000070 	.word	0x20000070
 8001420:	08006038 	.word	0x08006038
 8001424:	20000070 	.word	0x20000070
 8001428:	20000474 	.word	0x20000474

0800142c <ADC1_IRQHandler>:
 800142c:	e7fe      	b.n	800142c <ADC1_IRQHandler>
	...

08001430 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <HAL_Init+0x28>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a07      	ldr	r2, [pc, #28]	; (8001458 <HAL_Init+0x28>)
 800143a:	f043 0310 	orr.w	r3, r3, #16
 800143e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001440:	2003      	movs	r0, #3
 8001442:	f000 ff75 	bl	8002330 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001446:	2000      	movs	r0, #0
 8001448:	f000 f808 	bl	800145c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800144c:	f7ff fd7e 	bl	8000f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40022000 	.word	0x40022000

0800145c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_InitTick+0x54>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_InitTick+0x58>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4619      	mov	r1, r3
 800146e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001472:	fbb3 f3f1 	udiv	r3, r3, r1
 8001476:	fbb2 f3f3 	udiv	r3, r2, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f000 ff8d 	bl	800239a <HAL_SYSTICK_Config>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e00e      	b.n	80014a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b0f      	cmp	r3, #15
 800148e:	d80a      	bhi.n	80014a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001490:	2200      	movs	r2, #0
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f000 ff55 	bl	8002346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800149c:	4a06      	ldr	r2, [pc, #24]	; (80014b8 <HAL_InitTick+0x5c>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e000      	b.n	80014a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000000 	.word	0x20000000
 80014b4:	20000008 	.word	0x20000008
 80014b8:	20000004 	.word	0x20000004

080014bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_IncTick+0x20>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_IncTick+0x24>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <HAL_IncTick+0x24>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000008 	.word	0x20000008
 80014e0:	20000460 	.word	0x20000460

080014e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <HAL_GetTick+0x14>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000460 	.word	0x20000460

080014fc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001504:	f7ff ffee 	bl	80014e4 <HAL_GetTick>
 8001508:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001514:	d005      	beq.n	8001522 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001516:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <HAL_Delay+0x44>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4413      	add	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001522:	bf00      	nop
 8001524:	f7ff ffde 	bl	80014e4 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	429a      	cmp	r2, r3
 8001532:	d8f7      	bhi.n	8001524 <HAL_Delay+0x28>
  {
  }
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000008 	.word	0x20000008

08001544 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b09a      	sub	sp, #104	; 0x68
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800158e:	2300      	movs	r3, #0
 8001590:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e169      	b.n	8001874 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d176      	bne.n	80016a0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d152      	bne.n	8001660 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff fcdd 	bl	8000f94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d13b      	bne.n	8001660 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 fd6b 	bl	80020c4 <ADC_Disable>
 80015ee:	4603      	mov	r3, r0
 80015f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d12f      	bne.n	8001660 <HAL_ADC_Init+0xe0>
 8001600:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001604:	2b00      	cmp	r3, #0
 8001606:	d12b      	bne.n	8001660 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001610:	f023 0302 	bic.w	r3, r3, #2
 8001614:	f043 0202 	orr.w	r2, r3, #2
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689a      	ldr	r2, [r3, #8]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800162a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800163a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800163c:	4b8f      	ldr	r3, [pc, #572]	; (800187c <HAL_ADC_Init+0x2fc>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a8f      	ldr	r2, [pc, #572]	; (8001880 <HAL_ADC_Init+0x300>)
 8001642:	fba2 2303 	umull	r2, r3, r2, r3
 8001646:	0c9a      	lsrs	r2, r3, #18
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001652:	e002      	b.n	800165a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	3b01      	subs	r3, #1
 8001658:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f9      	bne.n	8001654 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d007      	beq.n	800167e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001678:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800167c:	d110      	bne.n	80016a0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f023 0312 	bic.w	r3, r3, #18
 8001686:	f043 0210 	orr.w	r2, r3, #16
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f043 0201 	orr.w	r2, r3, #1
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	f003 0310 	and.w	r3, r3, #16
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f040 80d6 	bne.w	800185a <HAL_ADC_Init+0x2da>
 80016ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f040 80d1 	bne.w	800185a <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f040 80c9 	bne.w	800185a <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016d0:	f043 0202 	orr.w	r2, r3, #2
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016d8:	4b6a      	ldr	r3, [pc, #424]	; (8001884 <HAL_ADC_Init+0x304>)
 80016da:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d108      	bne.n	8001700 <HAL_ADC_Init+0x180>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d101      	bne.n	8001700 <HAL_ADC_Init+0x180>
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <HAL_ADC_Init+0x182>
 8001700:	2300      	movs	r3, #0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d11c      	bne.n	8001740 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001706:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001708:	2b00      	cmp	r3, #0
 800170a:	d010      	beq.n	800172e <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	2b01      	cmp	r3, #1
 8001716:	d107      	bne.n	8001728 <HAL_ADC_Init+0x1a8>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b01      	cmp	r3, #1
 8001722:	d101      	bne.n	8001728 <HAL_ADC_Init+0x1a8>
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <HAL_ADC_Init+0x1aa>
 8001728:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800172a:	2b00      	cmp	r3, #0
 800172c:	d108      	bne.n	8001740 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800172e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	431a      	orrs	r2, r3
 800173c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800173e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7e5b      	ldrb	r3, [r3, #25]
 8001744:	035b      	lsls	r3, r3, #13
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800174a:	2a01      	cmp	r2, #1
 800174c:	d002      	beq.n	8001754 <HAL_ADC_Init+0x1d4>
 800174e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001752:	e000      	b.n	8001756 <HAL_ADC_Init+0x1d6>
 8001754:	2200      	movs	r2, #0
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	431a      	orrs	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	4313      	orrs	r3, r2
 8001764:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001766:	4313      	orrs	r3, r2
 8001768:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d11b      	bne.n	80017ac <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7e5b      	ldrb	r3, [r3, #25]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d109      	bne.n	8001790 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	3b01      	subs	r3, #1
 8001782:	045a      	lsls	r2, r3, #17
 8001784:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001786:	4313      	orrs	r3, r2
 8001788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178c:	663b      	str	r3, [r7, #96]	; 0x60
 800178e:	e00d      	b.n	80017ac <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001798:	f043 0220 	orr.w	r2, r3, #32
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a4:	f043 0201 	orr.w	r2, r3, #1
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d007      	beq.n	80017c4 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	4313      	orrs	r3, r2
 80017be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017c0:	4313      	orrs	r3, r2
 80017c2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d114      	bne.n	80017fc <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017e0:	f023 0302 	bic.w	r3, r3, #2
 80017e4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	7e1b      	ldrb	r3, [r3, #24]
 80017ea:	039a      	lsls	r2, r3, #14
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4313      	orrs	r3, r2
 80017f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017f8:	4313      	orrs	r3, r2
 80017fa:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	4b21      	ldr	r3, [pc, #132]	; (8001888 <HAL_ADC_Init+0x308>)
 8001804:	4013      	ands	r3, r2
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800180c:	430b      	orrs	r3, r1
 800180e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d10c      	bne.n	8001832 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f023 010f 	bic.w	r1, r3, #15
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	1e5a      	subs	r2, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	631a      	str	r2, [r3, #48]	; 0x30
 8001830:	e007      	b.n	8001842 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 020f 	bic.w	r2, r2, #15
 8001840:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f023 0303 	bic.w	r3, r3, #3
 8001850:	f043 0201 	orr.w	r2, r3, #1
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	641a      	str	r2, [r3, #64]	; 0x40
 8001858:	e00a      	b.n	8001870 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f023 0312 	bic.w	r3, r3, #18
 8001862:	f043 0210 	orr.w	r2, r3, #16
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800186a:	2301      	movs	r3, #1
 800186c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001870:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001874:	4618      	mov	r0, r3
 8001876:	3768      	adds	r7, #104	; 0x68
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000000 	.word	0x20000000
 8001880:	431bde83 	.word	0x431bde83
 8001884:	50000300 	.word	0x50000300
 8001888:	fff0c007 	.word	0xfff0c007

0800188c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d17e      	bne.n	80019a8 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <HAL_ADC_Start_DMA+0x2c>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e07a      	b.n	80019ae <HAL_ADC_Start_DMA+0x122>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f000 fb9b 	bl	8001ffc <ADC_Enable>
 80018c6:	4603      	mov	r3, r0
 80018c8:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80018ca:	7dfb      	ldrb	r3, [r7, #23]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d166      	bne.n	800199e <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018d8:	f023 0301 	bic.w	r3, r3, #1
 80018dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d007      	beq.n	800190e <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001906:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800191a:	d106      	bne.n	800192a <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001920:	f023 0206 	bic.w	r2, r3, #6
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	645a      	str	r2, [r3, #68]	; 0x44
 8001928:	e002      	b.n	8001930 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193c:	4a1e      	ldr	r2, [pc, #120]	; (80019b8 <HAL_ADC_Start_DMA+0x12c>)
 800193e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001944:	4a1d      	ldr	r2, [pc, #116]	; (80019bc <HAL_ADC_Start_DMA+0x130>)
 8001946:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800194c:	4a1c      	ldr	r2, [pc, #112]	; (80019c0 <HAL_ADC_Start_DMA+0x134>)
 800194e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	221c      	movs	r2, #28
 8001956:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 0210 	orr.w	r2, r2, #16
 8001966:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f042 0201 	orr.w	r2, r2, #1
 8001976:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	3340      	adds	r3, #64	; 0x40
 8001982:	4619      	mov	r1, r3
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f000 fdc9 	bl	800251e <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 0204 	orr.w	r2, r2, #4
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	e006      	b.n	80019ac <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80019a6:	e001      	b.n	80019ac <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019a8:	2302      	movs	r3, #2
 80019aa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	08001f31 	.word	0x08001f31
 80019bc:	08001fab 	.word	0x08001fab
 80019c0:	08001fc7 	.word	0x08001fc7

080019c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b09b      	sub	sp, #108	; 0x6c
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d101      	bne.n	80019e6 <HAL_ADC_ConfigChannel+0x22>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e299      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x556>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f040 827d 	bne.w	8001ef8 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d81c      	bhi.n	8001a40 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4413      	add	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	461a      	mov	r2, r3
 8001a1a:	231f      	movs	r3, #31
 8001a1c:	4093      	lsls	r3, r2
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	4019      	ands	r1, r3
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	6818      	ldr	r0, [r3, #0]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	fa00 f203 	lsl.w	r2, r0, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a3e:	e063      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b09      	cmp	r3, #9
 8001a46:	d81e      	bhi.n	8001a86 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	3b1e      	subs	r3, #30
 8001a5c:	221f      	movs	r2, #31
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	4019      	ands	r1, r3
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	3b1e      	subs	r3, #30
 8001a78:	fa00 f203 	lsl.w	r2, r0, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	635a      	str	r2, [r3, #52]	; 0x34
 8001a84:	e040      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b0e      	cmp	r3, #14
 8001a8c:	d81e      	bhi.n	8001acc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4413      	add	r3, r2
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	3b3c      	subs	r3, #60	; 0x3c
 8001aa2:	221f      	movs	r2, #31
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	4019      	ands	r1, r3
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4413      	add	r3, r2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	3b3c      	subs	r3, #60	; 0x3c
 8001abe:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	639a      	str	r2, [r3, #56]	; 0x38
 8001aca:	e01d      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	3b5a      	subs	r3, #90	; 0x5a
 8001ae0:	221f      	movs	r2, #31
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	4019      	ands	r1, r3
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	6818      	ldr	r0, [r3, #0]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4413      	add	r3, r2
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	3b5a      	subs	r3, #90	; 0x5a
 8001afc:	fa00 f203 	lsl.w	r2, r0, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f040 80e5 	bne.w	8001ce2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b09      	cmp	r3, #9
 8001b1e:	d91c      	bls.n	8001b5a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6999      	ldr	r1, [r3, #24]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	3b1e      	subs	r3, #30
 8001b32:	2207      	movs	r2, #7
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	4019      	ands	r1, r3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	6898      	ldr	r0, [r3, #8]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4613      	mov	r3, r2
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4413      	add	r3, r2
 8001b4a:	3b1e      	subs	r3, #30
 8001b4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	619a      	str	r2, [r3, #24]
 8001b58:	e019      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6959      	ldr	r1, [r3, #20]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4613      	mov	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	2207      	movs	r2, #7
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	4019      	ands	r1, r3
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	6898      	ldr	r0, [r3, #8]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	fa00 f203 	lsl.w	r2, r0, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	695a      	ldr	r2, [r3, #20]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	08db      	lsrs	r3, r3, #3
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d84f      	bhi.n	8001c50 <HAL_ADC_ConfigChannel+0x28c>
 8001bb0:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <HAL_ADC_ConfigChannel+0x1f4>)
 8001bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb6:	bf00      	nop
 8001bb8:	08001bc9 	.word	0x08001bc9
 8001bbc:	08001beb 	.word	0x08001beb
 8001bc0:	08001c0d 	.word	0x08001c0d
 8001bc4:	08001c2f 	.word	0x08001c2f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bce:	4b99      	ldr	r3, [pc, #612]	; (8001e34 <HAL_ADC_ConfigChannel+0x470>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	0691      	lsls	r1, r2, #26
 8001bd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001be6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001be8:	e07e      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001bf0:	4b90      	ldr	r3, [pc, #576]	; (8001e34 <HAL_ADC_ConfigChannel+0x470>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	0691      	lsls	r1, r2, #26
 8001bfa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c08:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c0a:	e06d      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001c12:	4b88      	ldr	r3, [pc, #544]	; (8001e34 <HAL_ADC_ConfigChannel+0x470>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	0691      	lsls	r1, r2, #26
 8001c1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	431a      	orrs	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c2a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c2c:	e05c      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c34:	4b7f      	ldr	r3, [pc, #508]	; (8001e34 <HAL_ADC_ConfigChannel+0x470>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	0691      	lsls	r1, r2, #26
 8001c3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c40:	430a      	orrs	r2, r1
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c4c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c4e:	e04b      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	069b      	lsls	r3, r3, #26
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d107      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c72:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	069b      	lsls	r3, r3, #26
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d107      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c96:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	069b      	lsls	r3, r3, #26
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d107      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cba:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	069b      	lsls	r3, r3, #26
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d10a      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cde:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001ce0:	e001      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001ce2:	bf00      	nop
 8001ce4:	e000      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001ce6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d108      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x344>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x344>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x346>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f040 80ff 	bne.w	8001f0e <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d00f      	beq.n	8001d38 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2201      	movs	r2, #1
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	400a      	ands	r2, r1
 8001d32:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001d36:	e049      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2201      	movs	r2, #1
 8001d46:	409a      	lsls	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b09      	cmp	r3, #9
 8001d58:	d91c      	bls.n	8001d94 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6999      	ldr	r1, [r3, #24]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4613      	mov	r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4413      	add	r3, r2
 8001d6a:	3b1b      	subs	r3, #27
 8001d6c:	2207      	movs	r2, #7
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	4019      	ands	r1, r3
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	6898      	ldr	r0, [r3, #8]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4413      	add	r3, r2
 8001d84:	3b1b      	subs	r3, #27
 8001d86:	fa00 f203 	lsl.w	r2, r0, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	619a      	str	r2, [r3, #24]
 8001d92:	e01b      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6959      	ldr	r1, [r3, #20]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	1c5a      	adds	r2, r3, #1
 8001da0:	4613      	mov	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	2207      	movs	r2, #7
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	4019      	ands	r1, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	6898      	ldr	r0, [r3, #8]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <HAL_ADC_ConfigChannel+0x474>)
 8001dce:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b10      	cmp	r3, #16
 8001dd6:	d105      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d014      	beq.n	8001e0e <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001de8:	2b11      	cmp	r3, #17
 8001dea:	d105      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00a      	beq.n	8001e0e <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001dfc:	2b12      	cmp	r3, #18
 8001dfe:	f040 8086 	bne.w	8001f0e <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d17f      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d10d      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x478>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d106      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x478>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e005      	b.n	8001e3e <HAL_ADC_ConfigChannel+0x47a>
 8001e32:	bf00      	nop
 8001e34:	83fff000 	.word	0x83fff000
 8001e38:	50000300 	.word	0x50000300
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d150      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e42:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d010      	beq.n	8001e6a <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d107      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x4a0>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x4a0>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x4a2>
 8001e64:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d13c      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b10      	cmp	r3, #16
 8001e70:	d11d      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x4ea>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e7a:	d118      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001e7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e86:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e88:	4b27      	ldr	r3, [pc, #156]	; (8001f28 <HAL_ADC_ConfigChannel+0x564>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a27      	ldr	r2, [pc, #156]	; (8001f2c <HAL_ADC_ConfigChannel+0x568>)
 8001e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e92:	0c9a      	lsrs	r2, r3, #18
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e9e:	e002      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f9      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001eac:	e02e      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b11      	cmp	r3, #17
 8001eb4:	d10b      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x50a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ebe:	d106      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001ec0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001ec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eca:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ecc:	e01e      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2b12      	cmp	r3, #18
 8001ed4:	d11a      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ee0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ee2:	e013      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	f043 0220 	orr.w	r2, r3, #32
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001ef6:	e00a      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	f043 0220 	orr.w	r2, r3, #32
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f0a:	e000      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f0c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	376c      	adds	r7, #108	; 0x6c
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	431bde83 	.word	0x431bde83

08001f30 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d126      	bne.n	8001f98 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d115      	bne.n	8001f90 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d111      	bne.n	8001f90 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d105      	bne.n	8001f90 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	f043 0201 	orr.w	r2, r3, #1
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f7ff fad7 	bl	8001544 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001f96:	e004      	b.n	8001fa2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	4798      	blx	r3
}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b084      	sub	sp, #16
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f7ff facd 	bl	8001558 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b084      	sub	sp, #16
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe4:	f043 0204 	orr.w	r2, r3, #4
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f7ff fabd 	bl	800156c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ff2:	bf00      	nop
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d108      	bne.n	8002028 <ADC_Enable+0x2c>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <ADC_Enable+0x2c>
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <ADC_Enable+0x2e>
 8002028:	2300      	movs	r3, #0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d143      	bne.n	80020b6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	4b22      	ldr	r3, [pc, #136]	; (80020c0 <ADC_Enable+0xc4>)
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00d      	beq.n	8002058 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	f043 0210 	orr.w	r2, r3, #16
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204c:	f043 0201 	orr.w	r2, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e02f      	b.n	80020b8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0201 	orr.w	r2, r2, #1
 8002066:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002068:	f7ff fa3c 	bl	80014e4 <HAL_GetTick>
 800206c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800206e:	e01b      	b.n	80020a8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002070:	f7ff fa38 	bl	80014e4 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d914      	bls.n	80020a8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b01      	cmp	r3, #1
 800208a:	d00d      	beq.n	80020a8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	f043 0210 	orr.w	r2, r3, #16
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209c:	f043 0201 	orr.w	r2, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e007      	b.n	80020b8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d1dc      	bne.n	8002070 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	8000003f 	.word	0x8000003f

080020c4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d108      	bne.n	80020f0 <ADC_Disable+0x2c>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <ADC_Disable+0x2c>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <ADC_Disable+0x2e>
 80020f0:	2300      	movs	r3, #0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d047      	beq.n	8002186 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 030d 	and.w	r3, r3, #13
 8002100:	2b01      	cmp	r3, #1
 8002102:	d10f      	bne.n	8002124 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0202 	orr.w	r2, r2, #2
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2203      	movs	r2, #3
 800211a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800211c:	f7ff f9e2 	bl	80014e4 <HAL_GetTick>
 8002120:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002122:	e029      	b.n	8002178 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	f043 0210 	orr.w	r2, r3, #16
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002134:	f043 0201 	orr.w	r2, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e023      	b.n	8002188 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002140:	f7ff f9d0 	bl	80014e4 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d914      	bls.n	8002178 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b01      	cmp	r3, #1
 800215a:	d10d      	bne.n	8002178 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f043 0210 	orr.w	r2, r3, #16
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216c:	f043 0201 	orr.w	r2, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e007      	b.n	8002188 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b01      	cmp	r3, #1
 8002184:	d0dc      	beq.n	8002140 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <__NVIC_SetPriorityGrouping+0x44>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021ac:	4013      	ands	r3, r2
 80021ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021c2:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <__NVIC_SetPriorityGrouping+0x44>)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	60d3      	str	r3, [r2, #12]
}
 80021c8:	bf00      	nop
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021dc:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <__NVIC_GetPriorityGrouping+0x18>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	0a1b      	lsrs	r3, r3, #8
 80021e2:	f003 0307 	and.w	r3, r3, #7
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	2b00      	cmp	r3, #0
 8002204:	db0b      	blt.n	800221e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	f003 021f 	and.w	r2, r3, #31
 800220c:	4907      	ldr	r1, [pc, #28]	; (800222c <__NVIC_EnableIRQ+0x38>)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	095b      	lsrs	r3, r3, #5
 8002214:	2001      	movs	r0, #1
 8002216:	fa00 f202 	lsl.w	r2, r0, r2
 800221a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	e000e100 	.word	0xe000e100

08002230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	6039      	str	r1, [r7, #0]
 800223a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800223c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002240:	2b00      	cmp	r3, #0
 8002242:	db0a      	blt.n	800225a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	b2da      	uxtb	r2, r3
 8002248:	490c      	ldr	r1, [pc, #48]	; (800227c <__NVIC_SetPriority+0x4c>)
 800224a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224e:	0112      	lsls	r2, r2, #4
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	440b      	add	r3, r1
 8002254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002258:	e00a      	b.n	8002270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	b2da      	uxtb	r2, r3
 800225e:	4908      	ldr	r1, [pc, #32]	; (8002280 <__NVIC_SetPriority+0x50>)
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	3b04      	subs	r3, #4
 8002268:	0112      	lsls	r2, r2, #4
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	440b      	add	r3, r1
 800226e:	761a      	strb	r2, [r3, #24]
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	e000e100 	.word	0xe000e100
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002284:	b480      	push	{r7}
 8002286:	b089      	sub	sp, #36	; 0x24
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f1c3 0307 	rsb	r3, r3, #7
 800229e:	2b04      	cmp	r3, #4
 80022a0:	bf28      	it	cs
 80022a2:	2304      	movcs	r3, #4
 80022a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3304      	adds	r3, #4
 80022aa:	2b06      	cmp	r3, #6
 80022ac:	d902      	bls.n	80022b4 <NVIC_EncodePriority+0x30>
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	3b03      	subs	r3, #3
 80022b2:	e000      	b.n	80022b6 <NVIC_EncodePriority+0x32>
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b8:	f04f 32ff 	mov.w	r2, #4294967295
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43da      	mvns	r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	401a      	ands	r2, r3
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022cc:	f04f 31ff 	mov.w	r1, #4294967295
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	fa01 f303 	lsl.w	r3, r1, r3
 80022d6:	43d9      	mvns	r1, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022dc:	4313      	orrs	r3, r2
         );
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3724      	adds	r7, #36	; 0x24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022fc:	d301      	bcc.n	8002302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022fe:	2301      	movs	r3, #1
 8002300:	e00f      	b.n	8002322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002302:	4a0a      	ldr	r2, [pc, #40]	; (800232c <SysTick_Config+0x40>)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3b01      	subs	r3, #1
 8002308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800230a:	210f      	movs	r1, #15
 800230c:	f04f 30ff 	mov.w	r0, #4294967295
 8002310:	f7ff ff8e 	bl	8002230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <SysTick_Config+0x40>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800231a:	4b04      	ldr	r3, [pc, #16]	; (800232c <SysTick_Config+0x40>)
 800231c:	2207      	movs	r2, #7
 800231e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	e000e010 	.word	0xe000e010

08002330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff ff29 	bl	8002190 <__NVIC_SetPriorityGrouping>
}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b086      	sub	sp, #24
 800234a:	af00      	add	r7, sp, #0
 800234c:	4603      	mov	r3, r0
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002358:	f7ff ff3e 	bl	80021d8 <__NVIC_GetPriorityGrouping>
 800235c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68b9      	ldr	r1, [r7, #8]
 8002362:	6978      	ldr	r0, [r7, #20]
 8002364:	f7ff ff8e 	bl	8002284 <NVIC_EncodePriority>
 8002368:	4602      	mov	r2, r0
 800236a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800236e:	4611      	mov	r1, r2
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff ff5d 	bl	8002230 <__NVIC_SetPriority>
}
 8002376:	bf00      	nop
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
 8002384:	4603      	mov	r3, r0
 8002386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff ff31 	bl	80021f4 <__NVIC_EnableIRQ>
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff ffa2 	bl	80022ec <SysTick_Config>
 80023a8:	4603      	mov	r3, r0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e014      	b.n	80023ee <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	791b      	ldrb	r3, [r3, #4]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d105      	bne.n	80023da <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7fe fe45 	bl	8001064 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2202      	movs	r2, #2
 80023de:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b087      	sub	sp, #28
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	795b      	ldrb	r3, [r3, #5]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_DAC_ConfigChannel+0x20>
 8002412:	2302      	movs	r3, #2
 8002414:	e036      	b.n	8002484 <HAL_DAC_ConfigChannel+0x8e>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2201      	movs	r2, #1
 800241a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2202      	movs	r2, #2
 8002420:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800242a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4013      	ands	r3, r2
 800243a:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	4313      	orrs	r3, r2
 8002454:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6819      	ldr	r1, [r3, #0]
 8002464:	22c0      	movs	r2, #192	; 0xc0
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43da      	mvns	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	400a      	ands	r2, r1
 8002474:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2201      	movs	r2, #1
 800247a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	371c      	adds	r7, #28
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e037      	b.n	8002516 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2202      	movs	r2, #2
 80024aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024bc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80024c0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80024ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f941 	bl	8002780 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}  
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b086      	sub	sp, #24
 8002522:	af00      	add	r7, sp, #0
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	607a      	str	r2, [r7, #4]
 800252a:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_DMA_Start_IT+0x20>
 800253a:	2302      	movs	r3, #2
 800253c:	e04a      	b.n	80025d4 <HAL_DMA_Start_IT+0xb6>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800254c:	2b01      	cmp	r3, #1
 800254e:	d13a      	bne.n	80025c6 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0201 	bic.w	r2, r2, #1
 800256c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	68b9      	ldr	r1, [r7, #8]
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 f8d4 	bl	8002722 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 020e 	orr.w	r2, r2, #14
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	e00f      	b.n	80025b4 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 020a 	orr.w	r2, r2, #10
 80025a2:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0204 	bic.w	r2, r2, #4
 80025b2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	e005      	b.n	80025d2 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80025ce:	2302      	movs	r3, #2
 80025d0:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80025d2:	7dfb      	ldrb	r3, [r7, #23]
} 
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	2204      	movs	r2, #4
 80025fa:	409a      	lsls	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d024      	beq.n	800264e <HAL_DMA_IRQHandler+0x72>
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b00      	cmp	r3, #0
 800260c:	d01f      	beq.n	800264e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0320 	and.w	r3, r3, #32
 8002618:	2b00      	cmp	r3, #0
 800261a:	d107      	bne.n	800262c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0204 	bic.w	r2, r2, #4
 800262a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002634:	2104      	movs	r1, #4
 8002636:	fa01 f202 	lsl.w	r2, r1, r2
 800263a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	2b00      	cmp	r3, #0
 8002642:	d06a      	beq.n	800271a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800264c:	e065      	b.n	800271a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	2202      	movs	r2, #2
 8002654:	409a      	lsls	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4013      	ands	r3, r2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d02c      	beq.n	80026b8 <HAL_DMA_IRQHandler+0xdc>
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d027      	beq.n	80026b8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0320 	and.w	r3, r3, #32
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10b      	bne.n	800268e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 020a 	bic.w	r2, r2, #10
 8002684:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002696:	2102      	movs	r1, #2
 8002698:	fa01 f202 	lsl.w	r2, r1, r2
 800269c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d035      	beq.n	800271a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80026b6:	e030      	b.n	800271a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	2208      	movs	r2, #8
 80026be:	409a      	lsls	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d028      	beq.n	800271a <HAL_DMA_IRQHandler+0x13e>
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d023      	beq.n	800271a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 020e 	bic.w	r2, r2, #14
 80026e0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ea:	2101      	movs	r1, #1
 80026ec:	fa01 f202 	lsl.w	r2, r1, r2
 80026f0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270c:	2b00      	cmp	r3, #0
 800270e:	d004      	beq.n	800271a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	4798      	blx	r3
    }
  }
}  
 8002718:	e7ff      	b.n	800271a <HAL_DMA_IRQHandler+0x13e>
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002722:	b480      	push	{r7}
 8002724:	b085      	sub	sp, #20
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002738:	2101      	movs	r1, #1
 800273a:	fa01 f202 	lsl.w	r2, r1, r2
 800273e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b10      	cmp	r3, #16
 800274e:	d108      	bne.n	8002762 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002760:	e007      	b.n	8002772 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	60da      	str	r2, [r3, #12]
}
 8002772:	bf00      	nop
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
	...

08002780 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <DMA_CalcBaseAndBitshift+0x34>)
 8002790:	4413      	add	r3, r2
 8002792:	4a09      	ldr	r2, [pc, #36]	; (80027b8 <DMA_CalcBaseAndBitshift+0x38>)
 8002794:	fba2 2303 	umull	r2, r3, r2, r3
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	009a      	lsls	r2, r3, #2
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a06      	ldr	r2, [pc, #24]	; (80027bc <DMA_CalcBaseAndBitshift+0x3c>)
 80027a4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	bffdfff8 	.word	0xbffdfff8
 80027b8:	cccccccd 	.word	0xcccccccd
 80027bc:	40020000 	.word	0x40020000

080027c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ce:	e14e      	b.n	8002a6e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	2101      	movs	r1, #1
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	fa01 f303 	lsl.w	r3, r1, r3
 80027dc:	4013      	ands	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 8140 	beq.w	8002a68 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d005      	beq.n	8002800 <HAL_GPIO_Init+0x40>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d130      	bne.n	8002862 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	2203      	movs	r2, #3
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4013      	ands	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002836:	2201      	movs	r2, #1
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43db      	mvns	r3, r3
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4013      	ands	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	091b      	lsrs	r3, r3, #4
 800284c:	f003 0201 	and.w	r2, r3, #1
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	2b03      	cmp	r3, #3
 800286c:	d017      	beq.n	800289e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	2203      	movs	r2, #3
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4013      	ands	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d123      	bne.n	80028f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	08da      	lsrs	r2, r3, #3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3208      	adds	r2, #8
 80028b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	220f      	movs	r2, #15
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4013      	ands	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	691a      	ldr	r2, [r3, #16]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	08da      	lsrs	r2, r3, #3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3208      	adds	r2, #8
 80028ec:	6939      	ldr	r1, [r7, #16]
 80028ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	2203      	movs	r2, #3
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4013      	ands	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f003 0203 	and.w	r2, r3, #3
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 809a 	beq.w	8002a68 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002934:	4b55      	ldr	r3, [pc, #340]	; (8002a8c <HAL_GPIO_Init+0x2cc>)
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	4a54      	ldr	r2, [pc, #336]	; (8002a8c <HAL_GPIO_Init+0x2cc>)
 800293a:	f043 0301 	orr.w	r3, r3, #1
 800293e:	6193      	str	r3, [r2, #24]
 8002940:	4b52      	ldr	r3, [pc, #328]	; (8002a8c <HAL_GPIO_Init+0x2cc>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800294c:	4a50      	ldr	r2, [pc, #320]	; (8002a90 <HAL_GPIO_Init+0x2d0>)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	089b      	lsrs	r3, r3, #2
 8002952:	3302      	adds	r3, #2
 8002954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002958:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	220f      	movs	r2, #15
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002976:	d013      	beq.n	80029a0 <HAL_GPIO_Init+0x1e0>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a46      	ldr	r2, [pc, #280]	; (8002a94 <HAL_GPIO_Init+0x2d4>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d00d      	beq.n	800299c <HAL_GPIO_Init+0x1dc>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a45      	ldr	r2, [pc, #276]	; (8002a98 <HAL_GPIO_Init+0x2d8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d007      	beq.n	8002998 <HAL_GPIO_Init+0x1d8>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a44      	ldr	r2, [pc, #272]	; (8002a9c <HAL_GPIO_Init+0x2dc>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d101      	bne.n	8002994 <HAL_GPIO_Init+0x1d4>
 8002990:	2303      	movs	r3, #3
 8002992:	e006      	b.n	80029a2 <HAL_GPIO_Init+0x1e2>
 8002994:	2305      	movs	r3, #5
 8002996:	e004      	b.n	80029a2 <HAL_GPIO_Init+0x1e2>
 8002998:	2302      	movs	r3, #2
 800299a:	e002      	b.n	80029a2 <HAL_GPIO_Init+0x1e2>
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <HAL_GPIO_Init+0x1e2>
 80029a0:	2300      	movs	r3, #0
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	f002 0203 	and.w	r2, r2, #3
 80029a8:	0092      	lsls	r2, r2, #2
 80029aa:	4093      	lsls	r3, r2
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029b2:	4937      	ldr	r1, [pc, #220]	; (8002a90 <HAL_GPIO_Init+0x2d0>)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	3302      	adds	r3, #2
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029c0:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <HAL_GPIO_Init+0x2e0>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029e4:	4a2e      	ldr	r2, [pc, #184]	; (8002aa0 <HAL_GPIO_Init+0x2e0>)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029ea:	4b2d      	ldr	r3, [pc, #180]	; (8002aa0 <HAL_GPIO_Init+0x2e0>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	43db      	mvns	r3, r3
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a0e:	4a24      	ldr	r2, [pc, #144]	; (8002aa0 <HAL_GPIO_Init+0x2e0>)
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a14:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <HAL_GPIO_Init+0x2e0>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a38:	4a19      	ldr	r2, [pc, #100]	; (8002aa0 <HAL_GPIO_Init+0x2e0>)
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a3e:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <HAL_GPIO_Init+0x2e0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a62:	4a0f      	ldr	r2, [pc, #60]	; (8002aa0 <HAL_GPIO_Init+0x2e0>)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	fa22 f303 	lsr.w	r3, r2, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f47f aea9 	bne.w	80027d0 <HAL_GPIO_Init+0x10>
  }
}
 8002a7e:	bf00      	nop
 8002a80:	bf00      	nop
 8002a82:	371c      	adds	r7, #28
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40010000 	.word	0x40010000
 8002a94:	48000400 	.word	0x48000400
 8002a98:	48000800 	.word	0x48000800
 8002a9c:	48000c00 	.word	0x48000c00
 8002aa0:	40010400 	.word	0x40010400

08002aa4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691a      	ldr	r2, [r3, #16]
 8002ab4:	887b      	ldrh	r3, [r7, #2]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
 8002ac0:	e001      	b.n	8002ac6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	807b      	strh	r3, [r7, #2]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae4:	787b      	ldrb	r3, [r7, #1]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002aea:	887a      	ldrh	r2, [r7, #2]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002af0:	e002      	b.n	8002af8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002af2:	887a      	ldrh	r2, [r7, #2]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b16:	887a      	ldrh	r2, [r7, #2]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	041a      	lsls	r2, r3, #16
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	43d9      	mvns	r1, r3
 8002b22:	887b      	ldrh	r3, [r7, #2]
 8002b24:	400b      	ands	r3, r1
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	619a      	str	r2, [r3, #24]
}
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b48:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d102      	bne.n	8002b5e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	f001 b823 	b.w	8003ba4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 817d 	beq.w	8002e6e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b74:	4bbc      	ldr	r3, [pc, #752]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 030c 	and.w	r3, r3, #12
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d00c      	beq.n	8002b9a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b80:	4bb9      	ldr	r3, [pc, #740]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 030c 	and.w	r3, r3, #12
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d15c      	bne.n	8002c46 <HAL_RCC_OscConfig+0x10e>
 8002b8c:	4bb6      	ldr	r3, [pc, #728]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b98:	d155      	bne.n	8002c46 <HAL_RCC_OscConfig+0x10e>
 8002b9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b9e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb2:	fab3 f383 	clz	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	095b      	lsrs	r3, r3, #5
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d102      	bne.n	8002bcc <HAL_RCC_OscConfig+0x94>
 8002bc6:	4ba8      	ldr	r3, [pc, #672]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	e015      	b.n	8002bf8 <HAL_RCC_OscConfig+0xc0>
 8002bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bd0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002bd8:	fa93 f3a3 	rbit	r3, r3
 8002bdc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002be0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002be4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002be8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002bec:	fa93 f3a3 	rbit	r3, r3
 8002bf0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002bf4:	4b9c      	ldr	r3, [pc, #624]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bfc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002c00:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002c04:	fa92 f2a2 	rbit	r2, r2
 8002c08:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002c0c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002c10:	fab2 f282 	clz	r2, r2
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	f042 0220 	orr.w	r2, r2, #32
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	f002 021f 	and.w	r2, r2, #31
 8002c20:	2101      	movs	r1, #1
 8002c22:	fa01 f202 	lsl.w	r2, r1, r2
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 811f 	beq.w	8002e6c <HAL_RCC_OscConfig+0x334>
 8002c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f040 8116 	bne.w	8002e6c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	f000 bfaf 	b.w	8003ba4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c56:	d106      	bne.n	8002c66 <HAL_RCC_OscConfig+0x12e>
 8002c58:	4b83      	ldr	r3, [pc, #524]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a82      	ldr	r2, [pc, #520]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	e036      	b.n	8002cd4 <HAL_RCC_OscConfig+0x19c>
 8002c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCC_OscConfig+0x158>
 8002c76:	4b7c      	ldr	r3, [pc, #496]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a7b      	ldr	r2, [pc, #492]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	4b79      	ldr	r3, [pc, #484]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a78      	ldr	r2, [pc, #480]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002c88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	e021      	b.n	8002cd4 <HAL_RCC_OscConfig+0x19c>
 8002c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ca0:	d10c      	bne.n	8002cbc <HAL_RCC_OscConfig+0x184>
 8002ca2:	4b71      	ldr	r3, [pc, #452]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a70      	ldr	r2, [pc, #448]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	4b6e      	ldr	r3, [pc, #440]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a6d      	ldr	r2, [pc, #436]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	e00b      	b.n	8002cd4 <HAL_RCC_OscConfig+0x19c>
 8002cbc:	4b6a      	ldr	r3, [pc, #424]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a69      	ldr	r2, [pc, #420]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	4b67      	ldr	r3, [pc, #412]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a66      	ldr	r2, [pc, #408]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cd2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cd4:	4b64      	ldr	r3, [pc, #400]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	f023 020f 	bic.w	r2, r3, #15
 8002cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	495f      	ldr	r1, [pc, #380]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d059      	beq.n	8002db2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfe:	f7fe fbf1 	bl	80014e4 <HAL_GetTick>
 8002d02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d08:	f7fe fbec 	bl	80014e4 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b64      	cmp	r3, #100	; 0x64
 8002d16:	d902      	bls.n	8002d1e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	f000 bf43 	b.w	8003ba4 <HAL_RCC_OscConfig+0x106c>
 8002d1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d22:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002d32:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d36:	fab3 f383 	clz	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	095b      	lsrs	r3, r3, #5
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d102      	bne.n	8002d50 <HAL_RCC_OscConfig+0x218>
 8002d4a:	4b47      	ldr	r3, [pc, #284]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	e015      	b.n	8002d7c <HAL_RCC_OscConfig+0x244>
 8002d50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d54:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002d5c:	fa93 f3a3 	rbit	r3, r3
 8002d60:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002d64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d68:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002d6c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002d70:	fa93 f3a3 	rbit	r3, r3
 8002d74:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002d78:	4b3b      	ldr	r3, [pc, #236]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d80:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002d84:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002d88:	fa92 f2a2 	rbit	r2, r2
 8002d8c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002d90:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002d94:	fab2 f282 	clz	r2, r2
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	f042 0220 	orr.w	r2, r2, #32
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	f002 021f 	and.w	r2, r2, #31
 8002da4:	2101      	movs	r1, #1
 8002da6:	fa01 f202 	lsl.w	r2, r1, r2
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0ab      	beq.n	8002d08 <HAL_RCC_OscConfig+0x1d0>
 8002db0:	e05d      	b.n	8002e6e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db2:	f7fe fb97 	bl	80014e4 <HAL_GetTick>
 8002db6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dba:	e00a      	b.n	8002dd2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dbc:	f7fe fb92 	bl	80014e4 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b64      	cmp	r3, #100	; 0x64
 8002dca:	d902      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	f000 bee9 	b.w	8003ba4 <HAL_RCC_OscConfig+0x106c>
 8002dd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dd6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002dde:	fa93 f3a3 	rbit	r3, r3
 8002de2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002de6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dea:	fab3 f383 	clz	r3, r3
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	095b      	lsrs	r3, r3, #5
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d102      	bne.n	8002e04 <HAL_RCC_OscConfig+0x2cc>
 8002dfe:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	e015      	b.n	8002e30 <HAL_RCC_OscConfig+0x2f8>
 8002e04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e08:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002e10:	fa93 f3a3 	rbit	r3, r3
 8002e14:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002e18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e1c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002e20:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002e24:	fa93 f3a3 	rbit	r3, r3
 8002e28:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e34:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002e38:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002e3c:	fa92 f2a2 	rbit	r2, r2
 8002e40:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002e44:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002e48:	fab2 f282 	clz	r2, r2
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	f042 0220 	orr.w	r2, r2, #32
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	f002 021f 	and.w	r2, r2, #31
 8002e58:	2101      	movs	r1, #1
 8002e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1ab      	bne.n	8002dbc <HAL_RCC_OscConfig+0x284>
 8002e64:	e003      	b.n	8002e6e <HAL_RCC_OscConfig+0x336>
 8002e66:	bf00      	nop
 8002e68:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 817d 	beq.w	800317e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e84:	4ba6      	ldr	r3, [pc, #664]	; (8003120 <HAL_RCC_OscConfig+0x5e8>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 030c 	and.w	r3, r3, #12
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00b      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e90:	4ba3      	ldr	r3, [pc, #652]	; (8003120 <HAL_RCC_OscConfig+0x5e8>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 030c 	and.w	r3, r3, #12
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d172      	bne.n	8002f82 <HAL_RCC_OscConfig+0x44a>
 8002e9c:	4ba0      	ldr	r3, [pc, #640]	; (8003120 <HAL_RCC_OscConfig+0x5e8>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d16c      	bne.n	8002f82 <HAL_RCC_OscConfig+0x44a>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002eb2:	fa93 f3a3 	rbit	r3, r3
 8002eb6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002eba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ebe:	fab3 f383 	clz	r3, r3
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	095b      	lsrs	r3, r3, #5
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d102      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x3a0>
 8002ed2:	4b93      	ldr	r3, [pc, #588]	; (8003120 <HAL_RCC_OscConfig+0x5e8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	e013      	b.n	8002f00 <HAL_RCC_OscConfig+0x3c8>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002eea:	2302      	movs	r3, #2
 8002eec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002ef0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ef4:	fa93 f3a3 	rbit	r3, r3
 8002ef8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002efc:	4b88      	ldr	r3, [pc, #544]	; (8003120 <HAL_RCC_OscConfig+0x5e8>)
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	2202      	movs	r2, #2
 8002f02:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002f06:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002f0a:	fa92 f2a2 	rbit	r2, r2
 8002f0e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002f12:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002f16:	fab2 f282 	clz	r2, r2
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	f042 0220 	orr.w	r2, r2, #32
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	f002 021f 	and.w	r2, r2, #31
 8002f26:	2101      	movs	r1, #1
 8002f28:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <HAL_RCC_OscConfig+0x410>
 8002f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d002      	beq.n	8002f48 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	f000 be2e 	b.w	8003ba4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f48:	4b75      	ldr	r3, [pc, #468]	; (8003120 <HAL_RCC_OscConfig+0x5e8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	21f8      	movs	r1, #248	; 0xf8
 8002f5e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002f66:	fa91 f1a1 	rbit	r1, r1
 8002f6a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002f6e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002f72:	fab1 f181 	clz	r1, r1
 8002f76:	b2c9      	uxtb	r1, r1
 8002f78:	408b      	lsls	r3, r1
 8002f7a:	4969      	ldr	r1, [pc, #420]	; (8003120 <HAL_RCC_OscConfig+0x5e8>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f80:	e0fd      	b.n	800317e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 8088 	beq.w	80030a4 <HAL_RCC_OscConfig+0x56c>
 8002f94:	2301      	movs	r3, #1
 8002f96:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002f9e:	fa93 f3a3 	rbit	r3, r3
 8002fa2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002fa6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002faa:	fab3 f383 	clz	r3, r3
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	461a      	mov	r2, r3
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7fe fa90 	bl	80014e4 <HAL_GetTick>
 8002fc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fca:	f7fe fa8b 	bl	80014e4 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d902      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	f000 bde2 	b.w	8003ba4 <HAL_RCC_OscConfig+0x106c>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002fea:	fa93 f3a3 	rbit	r3, r3
 8002fee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002ff2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff6:	fab3 f383 	clz	r3, r3
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b01      	cmp	r3, #1
 8003008:	d102      	bne.n	8003010 <HAL_RCC_OscConfig+0x4d8>
 800300a:	4b45      	ldr	r3, [pc, #276]	; (8003120 <HAL_RCC_OscConfig+0x5e8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	e013      	b.n	8003038 <HAL_RCC_OscConfig+0x500>
 8003010:	2302      	movs	r3, #2
 8003012:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003016:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800301a:	fa93 f3a3 	rbit	r3, r3
 800301e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003022:	2302      	movs	r3, #2
 8003024:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003028:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800302c:	fa93 f3a3 	rbit	r3, r3
 8003030:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003034:	4b3a      	ldr	r3, [pc, #232]	; (8003120 <HAL_RCC_OscConfig+0x5e8>)
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	2202      	movs	r2, #2
 800303a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800303e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003042:	fa92 f2a2 	rbit	r2, r2
 8003046:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800304a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800304e:	fab2 f282 	clz	r2, r2
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	f042 0220 	orr.w	r2, r2, #32
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	f002 021f 	and.w	r2, r2, #31
 800305e:	2101      	movs	r1, #1
 8003060:	fa01 f202 	lsl.w	r2, r1, r2
 8003064:	4013      	ands	r3, r2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0af      	beq.n	8002fca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306a:	4b2d      	ldr	r3, [pc, #180]	; (8003120 <HAL_RCC_OscConfig+0x5e8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003076:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	21f8      	movs	r1, #248	; 0xf8
 8003080:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003084:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003088:	fa91 f1a1 	rbit	r1, r1
 800308c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003090:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003094:	fab1 f181 	clz	r1, r1
 8003098:	b2c9      	uxtb	r1, r1
 800309a:	408b      	lsls	r3, r1
 800309c:	4920      	ldr	r1, [pc, #128]	; (8003120 <HAL_RCC_OscConfig+0x5e8>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]
 80030a2:	e06c      	b.n	800317e <HAL_RCC_OscConfig+0x646>
 80030a4:	2301      	movs	r3, #1
 80030a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80030ae:	fa93 f3a3 	rbit	r3, r3
 80030b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80030b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ba:	fab3 f383 	clz	r3, r3
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	461a      	mov	r2, r3
 80030cc:	2300      	movs	r3, #0
 80030ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7fe fa08 	bl	80014e4 <HAL_GetTick>
 80030d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d8:	e00a      	b.n	80030f0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030da:	f7fe fa03 	bl	80014e4 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d902      	bls.n	80030f0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	f000 bd5a 	b.w	8003ba4 <HAL_RCC_OscConfig+0x106c>
 80030f0:	2302      	movs	r3, #2
 80030f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80030fa:	fa93 f3a3 	rbit	r3, r3
 80030fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003102:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	095b      	lsrs	r3, r3, #5
 800310e:	b2db      	uxtb	r3, r3
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b01      	cmp	r3, #1
 8003118:	d104      	bne.n	8003124 <HAL_RCC_OscConfig+0x5ec>
 800311a:	4b01      	ldr	r3, [pc, #4]	; (8003120 <HAL_RCC_OscConfig+0x5e8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	e015      	b.n	800314c <HAL_RCC_OscConfig+0x614>
 8003120:	40021000 	.word	0x40021000
 8003124:	2302      	movs	r3, #2
 8003126:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800312e:	fa93 f3a3 	rbit	r3, r3
 8003132:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003136:	2302      	movs	r3, #2
 8003138:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800313c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003148:	4bc8      	ldr	r3, [pc, #800]	; (800346c <HAL_RCC_OscConfig+0x934>)
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	2202      	movs	r2, #2
 800314e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003152:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003156:	fa92 f2a2 	rbit	r2, r2
 800315a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800315e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003162:	fab2 f282 	clz	r2, r2
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	f042 0220 	orr.w	r2, r2, #32
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	f002 021f 	and.w	r2, r2, #31
 8003172:	2101      	movs	r1, #1
 8003174:	fa01 f202 	lsl.w	r2, r1, r2
 8003178:	4013      	ands	r3, r2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1ad      	bne.n	80030da <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800317e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003182:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 8110 	beq.w	80033b4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003198:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d079      	beq.n	8003298 <HAL_RCC_OscConfig+0x760>
 80031a4:	2301      	movs	r3, #1
 80031a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80031ae:	fa93 f3a3 	rbit	r3, r3
 80031b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80031b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ba:	fab3 f383 	clz	r3, r3
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	4bab      	ldr	r3, [pc, #684]	; (8003470 <HAL_RCC_OscConfig+0x938>)
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	461a      	mov	r2, r3
 80031ca:	2301      	movs	r3, #1
 80031cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ce:	f7fe f989 	bl	80014e4 <HAL_GetTick>
 80031d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d6:	e00a      	b.n	80031ee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031d8:	f7fe f984 	bl	80014e4 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d902      	bls.n	80031ee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	f000 bcdb 	b.w	8003ba4 <HAL_RCC_OscConfig+0x106c>
 80031ee:	2302      	movs	r3, #2
 80031f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80031f8:	fa93 f3a3 	rbit	r3, r3
 80031fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003204:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003208:	2202      	movs	r2, #2
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003210:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	fa93 f2a3 	rbit	r2, r3
 800321a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800322c:	2202      	movs	r2, #2
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	fa93 f2a3 	rbit	r2, r3
 800323e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003242:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003246:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003248:	4b88      	ldr	r3, [pc, #544]	; (800346c <HAL_RCC_OscConfig+0x934>)
 800324a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800324c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003250:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003254:	2102      	movs	r1, #2
 8003256:	6019      	str	r1, [r3, #0]
 8003258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	fa93 f1a3 	rbit	r1, r3
 8003266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800326e:	6019      	str	r1, [r3, #0]
  return result;
 8003270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003274:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	fab3 f383 	clz	r3, r3
 800327e:	b2db      	uxtb	r3, r3
 8003280:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003284:	b2db      	uxtb	r3, r3
 8003286:	f003 031f 	and.w	r3, r3, #31
 800328a:	2101      	movs	r1, #1
 800328c:	fa01 f303 	lsl.w	r3, r1, r3
 8003290:	4013      	ands	r3, r2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0a0      	beq.n	80031d8 <HAL_RCC_OscConfig+0x6a0>
 8003296:	e08d      	b.n	80033b4 <HAL_RCC_OscConfig+0x87c>
 8003298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80032a0:	2201      	movs	r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	fa93 f2a3 	rbit	r2, r3
 80032b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80032ba:	601a      	str	r2, [r3, #0]
  return result;
 80032bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80032c4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c6:	fab3 f383 	clz	r3, r3
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	461a      	mov	r2, r3
 80032ce:	4b68      	ldr	r3, [pc, #416]	; (8003470 <HAL_RCC_OscConfig+0x938>)
 80032d0:	4413      	add	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	461a      	mov	r2, r3
 80032d6:	2300      	movs	r3, #0
 80032d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032da:	f7fe f903 	bl	80014e4 <HAL_GetTick>
 80032de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e2:	e00a      	b.n	80032fa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e4:	f7fe f8fe 	bl	80014e4 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d902      	bls.n	80032fa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	f000 bc55 	b.w	8003ba4 <HAL_RCC_OscConfig+0x106c>
 80032fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003302:	2202      	movs	r2, #2
 8003304:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	fa93 f2a3 	rbit	r2, r3
 8003314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003318:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003322:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003326:	2202      	movs	r2, #2
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	fa93 f2a3 	rbit	r2, r3
 8003338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003346:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800334a:	2202      	movs	r2, #2
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003352:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	fa93 f2a3 	rbit	r2, r3
 800335c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003360:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003364:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003366:	4b41      	ldr	r3, [pc, #260]	; (800346c <HAL_RCC_OscConfig+0x934>)
 8003368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800336a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003372:	2102      	movs	r1, #2
 8003374:	6019      	str	r1, [r3, #0]
 8003376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	fa93 f1a3 	rbit	r1, r3
 8003384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003388:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800338c:	6019      	str	r1, [r3, #0]
  return result;
 800338e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003392:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	fab3 f383 	clz	r3, r3
 800339c:	b2db      	uxtb	r3, r3
 800339e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f003 031f 	and.w	r3, r3, #31
 80033a8:	2101      	movs	r1, #1
 80033aa:	fa01 f303 	lsl.w	r3, r1, r3
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d197      	bne.n	80032e4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 81a1 	beq.w	800370c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ca:	2300      	movs	r3, #0
 80033cc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033d0:	4b26      	ldr	r3, [pc, #152]	; (800346c <HAL_RCC_OscConfig+0x934>)
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d116      	bne.n	800340a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033dc:	4b23      	ldr	r3, [pc, #140]	; (800346c <HAL_RCC_OscConfig+0x934>)
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	4a22      	ldr	r2, [pc, #136]	; (800346c <HAL_RCC_OscConfig+0x934>)
 80033e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e6:	61d3      	str	r3, [r2, #28]
 80033e8:	4b20      	ldr	r3, [pc, #128]	; (800346c <HAL_RCC_OscConfig+0x934>)
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80033f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fe:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003402:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003404:	2301      	movs	r3, #1
 8003406:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340a:	4b1a      	ldr	r3, [pc, #104]	; (8003474 <HAL_RCC_OscConfig+0x93c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003412:	2b00      	cmp	r3, #0
 8003414:	d11a      	bne.n	800344c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003416:	4b17      	ldr	r3, [pc, #92]	; (8003474 <HAL_RCC_OscConfig+0x93c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a16      	ldr	r2, [pc, #88]	; (8003474 <HAL_RCC_OscConfig+0x93c>)
 800341c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003420:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003422:	f7fe f85f 	bl	80014e4 <HAL_GetTick>
 8003426:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342a:	e009      	b.n	8003440 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342c:	f7fe f85a 	bl	80014e4 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b64      	cmp	r3, #100	; 0x64
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e3b1      	b.n	8003ba4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003440:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <HAL_RCC_OscConfig+0x93c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0ef      	beq.n	800342c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800344c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003450:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d10d      	bne.n	8003478 <HAL_RCC_OscConfig+0x940>
 800345c:	4b03      	ldr	r3, [pc, #12]	; (800346c <HAL_RCC_OscConfig+0x934>)
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	4a02      	ldr	r2, [pc, #8]	; (800346c <HAL_RCC_OscConfig+0x934>)
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	6213      	str	r3, [r2, #32]
 8003468:	e03c      	b.n	80034e4 <HAL_RCC_OscConfig+0x9ac>
 800346a:	bf00      	nop
 800346c:	40021000 	.word	0x40021000
 8003470:	10908120 	.word	0x10908120
 8003474:	40007000 	.word	0x40007000
 8003478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10c      	bne.n	80034a2 <HAL_RCC_OscConfig+0x96a>
 8003488:	4bc1      	ldr	r3, [pc, #772]	; (8003790 <HAL_RCC_OscConfig+0xc58>)
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	4ac0      	ldr	r2, [pc, #768]	; (8003790 <HAL_RCC_OscConfig+0xc58>)
 800348e:	f023 0301 	bic.w	r3, r3, #1
 8003492:	6213      	str	r3, [r2, #32]
 8003494:	4bbe      	ldr	r3, [pc, #760]	; (8003790 <HAL_RCC_OscConfig+0xc58>)
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	4abd      	ldr	r2, [pc, #756]	; (8003790 <HAL_RCC_OscConfig+0xc58>)
 800349a:	f023 0304 	bic.w	r3, r3, #4
 800349e:	6213      	str	r3, [r2, #32]
 80034a0:	e020      	b.n	80034e4 <HAL_RCC_OscConfig+0x9ac>
 80034a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	2b05      	cmp	r3, #5
 80034b0:	d10c      	bne.n	80034cc <HAL_RCC_OscConfig+0x994>
 80034b2:	4bb7      	ldr	r3, [pc, #732]	; (8003790 <HAL_RCC_OscConfig+0xc58>)
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	4ab6      	ldr	r2, [pc, #728]	; (8003790 <HAL_RCC_OscConfig+0xc58>)
 80034b8:	f043 0304 	orr.w	r3, r3, #4
 80034bc:	6213      	str	r3, [r2, #32]
 80034be:	4bb4      	ldr	r3, [pc, #720]	; (8003790 <HAL_RCC_OscConfig+0xc58>)
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	4ab3      	ldr	r2, [pc, #716]	; (8003790 <HAL_RCC_OscConfig+0xc58>)
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	6213      	str	r3, [r2, #32]
 80034ca:	e00b      	b.n	80034e4 <HAL_RCC_OscConfig+0x9ac>
 80034cc:	4bb0      	ldr	r3, [pc, #704]	; (8003790 <HAL_RCC_OscConfig+0xc58>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	4aaf      	ldr	r2, [pc, #700]	; (8003790 <HAL_RCC_OscConfig+0xc58>)
 80034d2:	f023 0301 	bic.w	r3, r3, #1
 80034d6:	6213      	str	r3, [r2, #32]
 80034d8:	4bad      	ldr	r3, [pc, #692]	; (8003790 <HAL_RCC_OscConfig+0xc58>)
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	4aac      	ldr	r2, [pc, #688]	; (8003790 <HAL_RCC_OscConfig+0xc58>)
 80034de:	f023 0304 	bic.w	r3, r3, #4
 80034e2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 8081 	beq.w	80035f8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f6:	f7fd fff5 	bl	80014e4 <HAL_GetTick>
 80034fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fe:	e00b      	b.n	8003518 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003500:	f7fd fff0 	bl	80014e4 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003510:	4293      	cmp	r3, r2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e345      	b.n	8003ba4 <HAL_RCC_OscConfig+0x106c>
 8003518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003520:	2202      	movs	r2, #2
 8003522:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003528:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	fa93 f2a3 	rbit	r2, r3
 8003532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003536:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003540:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003544:	2202      	movs	r2, #2
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	fa93 f2a3 	rbit	r2, r3
 8003556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800355e:	601a      	str	r2, [r3, #0]
  return result;
 8003560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003564:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003568:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800356a:	fab3 f383 	clz	r3, r3
 800356e:	b2db      	uxtb	r3, r3
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f043 0302 	orr.w	r3, r3, #2
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d102      	bne.n	8003584 <HAL_RCC_OscConfig+0xa4c>
 800357e:	4b84      	ldr	r3, [pc, #528]	; (8003790 <HAL_RCC_OscConfig+0xc58>)
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	e013      	b.n	80035ac <HAL_RCC_OscConfig+0xa74>
 8003584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003588:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800358c:	2202      	movs	r2, #2
 800358e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003594:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	fa93 f2a3 	rbit	r2, r3
 800359e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	4b79      	ldr	r3, [pc, #484]	; (8003790 <HAL_RCC_OscConfig+0xc58>)
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035b0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80035b4:	2102      	movs	r1, #2
 80035b6:	6011      	str	r1, [r2, #0]
 80035b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80035c0:	6812      	ldr	r2, [r2, #0]
 80035c2:	fa92 f1a2 	rbit	r1, r2
 80035c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035ca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80035ce:	6011      	str	r1, [r2, #0]
  return result;
 80035d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035d4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80035d8:	6812      	ldr	r2, [r2, #0]
 80035da:	fab2 f282 	clz	r2, r2
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	f002 021f 	and.w	r2, r2, #31
 80035ea:	2101      	movs	r1, #1
 80035ec:	fa01 f202 	lsl.w	r2, r1, r2
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d084      	beq.n	8003500 <HAL_RCC_OscConfig+0x9c8>
 80035f6:	e07f      	b.n	80036f8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f8:	f7fd ff74 	bl	80014e4 <HAL_GetTick>
 80035fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003600:	e00b      	b.n	800361a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003602:	f7fd ff6f 	bl	80014e4 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003612:	4293      	cmp	r3, r2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e2c4      	b.n	8003ba4 <HAL_RCC_OscConfig+0x106c>
 800361a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003622:	2202      	movs	r2, #2
 8003624:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800362a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	fa93 f2a3 	rbit	r2, r3
 8003634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003638:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003642:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003646:	2202      	movs	r2, #2
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	fa93 f2a3 	rbit	r2, r3
 8003658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003660:	601a      	str	r2, [r3, #0]
  return result;
 8003662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003666:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800366a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366c:	fab3 f383 	clz	r3, r3
 8003670:	b2db      	uxtb	r3, r3
 8003672:	095b      	lsrs	r3, r3, #5
 8003674:	b2db      	uxtb	r3, r3
 8003676:	f043 0302 	orr.w	r3, r3, #2
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d102      	bne.n	8003686 <HAL_RCC_OscConfig+0xb4e>
 8003680:	4b43      	ldr	r3, [pc, #268]	; (8003790 <HAL_RCC_OscConfig+0xc58>)
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	e013      	b.n	80036ae <HAL_RCC_OscConfig+0xb76>
 8003686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800368e:	2202      	movs	r2, #2
 8003690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003696:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	fa93 f2a3 	rbit	r2, r3
 80036a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	4b39      	ldr	r3, [pc, #228]	; (8003790 <HAL_RCC_OscConfig+0xc58>)
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036b2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80036b6:	2102      	movs	r1, #2
 80036b8:	6011      	str	r1, [r2, #0]
 80036ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	fa92 f1a2 	rbit	r1, r2
 80036c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036cc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80036d0:	6011      	str	r1, [r2, #0]
  return result;
 80036d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036d6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	fab2 f282 	clz	r2, r2
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	f002 021f 	and.w	r2, r2, #31
 80036ec:	2101      	movs	r1, #1
 80036ee:	fa01 f202 	lsl.w	r2, r1, r2
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d184      	bne.n	8003602 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d105      	bne.n	800370c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003700:	4b23      	ldr	r3, [pc, #140]	; (8003790 <HAL_RCC_OscConfig+0xc58>)
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	4a22      	ldr	r2, [pc, #136]	; (8003790 <HAL_RCC_OscConfig+0xc58>)
 8003706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800370c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003710:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 8242 	beq.w	8003ba2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800371e:	4b1c      	ldr	r3, [pc, #112]	; (8003790 <HAL_RCC_OscConfig+0xc58>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 030c 	and.w	r3, r3, #12
 8003726:	2b08      	cmp	r3, #8
 8003728:	f000 8213 	beq.w	8003b52 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800372c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003730:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	2b02      	cmp	r3, #2
 800373a:	f040 8162 	bne.w	8003a02 <HAL_RCC_OscConfig+0xeca>
 800373e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003742:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003746:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800374a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003750:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	fa93 f2a3 	rbit	r2, r3
 800375a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003762:	601a      	str	r2, [r3, #0]
  return result;
 8003764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003768:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800376c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376e:	fab3 f383 	clz	r3, r3
 8003772:	b2db      	uxtb	r3, r3
 8003774:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003778:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	461a      	mov	r2, r3
 8003780:	2300      	movs	r3, #0
 8003782:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003784:	f7fd feae 	bl	80014e4 <HAL_GetTick>
 8003788:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800378c:	e00c      	b.n	80037a8 <HAL_RCC_OscConfig+0xc70>
 800378e:	bf00      	nop
 8003790:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003794:	f7fd fea6 	bl	80014e4 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e1fd      	b.n	8003ba4 <HAL_RCC_OscConfig+0x106c>
 80037a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80037b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ba:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	fa93 f2a3 	rbit	r2, r3
 80037c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80037cc:	601a      	str	r2, [r3, #0]
  return result;
 80037ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80037d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037d8:	fab3 f383 	clz	r3, r3
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d102      	bne.n	80037f2 <HAL_RCC_OscConfig+0xcba>
 80037ec:	4bb0      	ldr	r3, [pc, #704]	; (8003ab0 <HAL_RCC_OscConfig+0xf78>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	e027      	b.n	8003842 <HAL_RCC_OscConfig+0xd0a>
 80037f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003804:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	fa93 f2a3 	rbit	r2, r3
 800380e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003812:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800381c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003820:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800382a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	fa93 f2a3 	rbit	r2, r3
 8003834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003838:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	4b9c      	ldr	r3, [pc, #624]	; (8003ab0 <HAL_RCC_OscConfig+0xf78>)
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003846:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800384a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800384e:	6011      	str	r1, [r2, #0]
 8003850:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003854:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	fa92 f1a2 	rbit	r1, r2
 800385e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003862:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003866:	6011      	str	r1, [r2, #0]
  return result;
 8003868:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800386c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	fab2 f282 	clz	r2, r2
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	f042 0220 	orr.w	r2, r2, #32
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	f002 021f 	and.w	r2, r2, #31
 8003882:	2101      	movs	r1, #1
 8003884:	fa01 f202 	lsl.w	r2, r1, r2
 8003888:	4013      	ands	r3, r2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d182      	bne.n	8003794 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800388e:	4b88      	ldr	r3, [pc, #544]	; (8003ab0 <HAL_RCC_OscConfig+0xf78>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80038a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	430b      	orrs	r3, r1
 80038b0:	497f      	ldr	r1, [pc, #508]	; (8003ab0 <HAL_RCC_OscConfig+0xf78>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	604b      	str	r3, [r1, #4]
 80038b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ba:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80038be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	fa93 f2a3 	rbit	r2, r3
 80038d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80038da:	601a      	str	r2, [r3, #0]
  return result;
 80038dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80038e4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e6:	fab3 f383 	clz	r3, r3
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	461a      	mov	r2, r3
 80038f8:	2301      	movs	r3, #1
 80038fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fc:	f7fd fdf2 	bl	80014e4 <HAL_GetTick>
 8003900:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003904:	e009      	b.n	800391a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003906:	f7fd fded 	bl	80014e4 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e144      	b.n	8003ba4 <HAL_RCC_OscConfig+0x106c>
 800391a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800391e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003922:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003926:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	fa93 f2a3 	rbit	r2, r3
 8003936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800393e:	601a      	str	r2, [r3, #0]
  return result;
 8003940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003944:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003948:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800394a:	fab3 f383 	clz	r3, r3
 800394e:	b2db      	uxtb	r3, r3
 8003950:	095b      	lsrs	r3, r3, #5
 8003952:	b2db      	uxtb	r3, r3
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b01      	cmp	r3, #1
 800395c:	d102      	bne.n	8003964 <HAL_RCC_OscConfig+0xe2c>
 800395e:	4b54      	ldr	r3, [pc, #336]	; (8003ab0 <HAL_RCC_OscConfig+0xf78>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	e027      	b.n	80039b4 <HAL_RCC_OscConfig+0xe7c>
 8003964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003968:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800396c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003970:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003976:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	fa93 f2a3 	rbit	r2, r3
 8003980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003984:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003992:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	fa93 f2a3 	rbit	r2, r3
 80039a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039aa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	4b3f      	ldr	r3, [pc, #252]	; (8003ab0 <HAL_RCC_OscConfig+0xf78>)
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039b8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80039bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80039c0:	6011      	str	r1, [r2, #0]
 80039c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039c6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80039ca:	6812      	ldr	r2, [r2, #0]
 80039cc:	fa92 f1a2 	rbit	r1, r2
 80039d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039d4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80039d8:	6011      	str	r1, [r2, #0]
  return result;
 80039da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039de:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	fab2 f282 	clz	r2, r2
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	f042 0220 	orr.w	r2, r2, #32
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	f002 021f 	and.w	r2, r2, #31
 80039f4:	2101      	movs	r1, #1
 80039f6:	fa01 f202 	lsl.w	r2, r1, r2
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d082      	beq.n	8003906 <HAL_RCC_OscConfig+0xdce>
 8003a00:	e0cf      	b.n	8003ba2 <HAL_RCC_OscConfig+0x106a>
 8003a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a06:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003a0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a14:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	fa93 f2a3 	rbit	r2, r3
 8003a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a22:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003a26:	601a      	str	r2, [r3, #0]
  return result;
 8003a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003a30:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a32:	fab3 f383 	clz	r3, r3
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	461a      	mov	r2, r3
 8003a44:	2300      	movs	r3, #0
 8003a46:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a48:	f7fd fd4c 	bl	80014e4 <HAL_GetTick>
 8003a4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a50:	e009      	b.n	8003a66 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a52:	f7fd fd47 	bl	80014e4 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e09e      	b.n	8003ba4 <HAL_RCC_OscConfig+0x106c>
 8003a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a6a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003a6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a78:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	fa93 f2a3 	rbit	r2, r3
 8003a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a86:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a8a:	601a      	str	r2, [r3, #0]
  return result;
 8003a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a90:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a96:	fab3 f383 	clz	r3, r3
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	095b      	lsrs	r3, r3, #5
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d104      	bne.n	8003ab4 <HAL_RCC_OscConfig+0xf7c>
 8003aaa:	4b01      	ldr	r3, [pc, #4]	; (8003ab0 <HAL_RCC_OscConfig+0xf78>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	e029      	b.n	8003b04 <HAL_RCC_OscConfig+0xfcc>
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003abc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ac0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	fa93 f2a3 	rbit	r2, r3
 8003ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ade:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003ae2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aec:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	fa93 f2a3 	rbit	r2, r3
 8003af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003afa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	4b2b      	ldr	r3, [pc, #172]	; (8003bb0 <HAL_RCC_OscConfig+0x1078>)
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b08:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003b0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b10:	6011      	str	r1, [r2, #0]
 8003b12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b16:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	fa92 f1a2 	rbit	r1, r2
 8003b20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b24:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003b28:	6011      	str	r1, [r2, #0]
  return result;
 8003b2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b2e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	fab2 f282 	clz	r2, r2
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	f042 0220 	orr.w	r2, r2, #32
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	f002 021f 	and.w	r2, r2, #31
 8003b44:	2101      	movs	r1, #1
 8003b46:	fa01 f202 	lsl.w	r2, r1, r2
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d180      	bne.n	8003a52 <HAL_RCC_OscConfig+0xf1a>
 8003b50:	e027      	b.n	8003ba2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e01e      	b.n	8003ba4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b66:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <HAL_RCC_OscConfig+0x1078>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003b72:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d10b      	bne.n	8003b9e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003b86:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003b8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d001      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40021000 	.word	0x40021000

08003bb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b09e      	sub	sp, #120	; 0x78
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e162      	b.n	8003e92 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bcc:	4b90      	ldr	r3, [pc, #576]	; (8003e10 <HAL_RCC_ClockConfig+0x25c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d910      	bls.n	8003bfc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bda:	4b8d      	ldr	r3, [pc, #564]	; (8003e10 <HAL_RCC_ClockConfig+0x25c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 0207 	bic.w	r2, r3, #7
 8003be2:	498b      	ldr	r1, [pc, #556]	; (8003e10 <HAL_RCC_ClockConfig+0x25c>)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bea:	4b89      	ldr	r3, [pc, #548]	; (8003e10 <HAL_RCC_ClockConfig+0x25c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e14a      	b.n	8003e92 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c08:	4b82      	ldr	r3, [pc, #520]	; (8003e14 <HAL_RCC_ClockConfig+0x260>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	497f      	ldr	r1, [pc, #508]	; (8003e14 <HAL_RCC_ClockConfig+0x260>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 80dc 	beq.w	8003de0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d13c      	bne.n	8003caa <HAL_RCC_ClockConfig+0xf6>
 8003c30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c34:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c38:	fa93 f3a3 	rbit	r3, r3
 8003c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c40:	fab3 f383 	clz	r3, r3
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d102      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xa6>
 8003c54:	4b6f      	ldr	r3, [pc, #444]	; (8003e14 <HAL_RCC_ClockConfig+0x260>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	e00f      	b.n	8003c7a <HAL_RCC_ClockConfig+0xc6>
 8003c5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c62:	fa93 f3a3 	rbit	r3, r3
 8003c66:	667b      	str	r3, [r7, #100]	; 0x64
 8003c68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c6c:	663b      	str	r3, [r7, #96]	; 0x60
 8003c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c70:	fa93 f3a3 	rbit	r3, r3
 8003c74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c76:	4b67      	ldr	r3, [pc, #412]	; (8003e14 <HAL_RCC_ClockConfig+0x260>)
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c82:	fa92 f2a2 	rbit	r2, r2
 8003c86:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003c88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c8a:	fab2 f282 	clz	r2, r2
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	f042 0220 	orr.w	r2, r2, #32
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	f002 021f 	and.w	r2, r2, #31
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d17b      	bne.n	8003d9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e0f3      	b.n	8003e92 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d13c      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x178>
 8003cb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cb6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cba:	fa93 f3a3 	rbit	r3, r3
 8003cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc2:	fab3 f383 	clz	r3, r3
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	f043 0301 	orr.w	r3, r3, #1
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d102      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x128>
 8003cd6:	4b4f      	ldr	r3, [pc, #316]	; (8003e14 <HAL_RCC_ClockConfig+0x260>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	e00f      	b.n	8003cfc <HAL_RCC_ClockConfig+0x148>
 8003cdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ce0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ce4:	fa93 f3a3 	rbit	r3, r3
 8003ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8003cea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cee:	643b      	str	r3, [r7, #64]	; 0x40
 8003cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf2:	fa93 f3a3 	rbit	r3, r3
 8003cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf8:	4b46      	ldr	r3, [pc, #280]	; (8003e14 <HAL_RCC_ClockConfig+0x260>)
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d00:	63ba      	str	r2, [r7, #56]	; 0x38
 8003d02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d04:	fa92 f2a2 	rbit	r2, r2
 8003d08:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d0c:	fab2 f282 	clz	r2, r2
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	f042 0220 	orr.w	r2, r2, #32
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	f002 021f 	and.w	r2, r2, #31
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d22:	4013      	ands	r3, r2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d13a      	bne.n	8003d9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0b2      	b.n	8003e92 <HAL_RCC_ClockConfig+0x2de>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d32:	fa93 f3a3 	rbit	r3, r3
 8003d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3a:	fab3 f383 	clz	r3, r3
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	095b      	lsrs	r3, r3, #5
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d102      	bne.n	8003d54 <HAL_RCC_ClockConfig+0x1a0>
 8003d4e:	4b31      	ldr	r3, [pc, #196]	; (8003e14 <HAL_RCC_ClockConfig+0x260>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	e00d      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1bc>
 8003d54:	2302      	movs	r3, #2
 8003d56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5a:	fa93 f3a3 	rbit	r3, r3
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d60:	2302      	movs	r3, #2
 8003d62:	623b      	str	r3, [r7, #32]
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	fa93 f3a3 	rbit	r3, r3
 8003d6a:	61fb      	str	r3, [r7, #28]
 8003d6c:	4b29      	ldr	r3, [pc, #164]	; (8003e14 <HAL_RCC_ClockConfig+0x260>)
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	2202      	movs	r2, #2
 8003d72:	61ba      	str	r2, [r7, #24]
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	fa92 f2a2 	rbit	r2, r2
 8003d7a:	617a      	str	r2, [r7, #20]
  return result;
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	fab2 f282 	clz	r2, r2
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	f042 0220 	orr.w	r2, r2, #32
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	f002 021f 	and.w	r2, r2, #31
 8003d8e:	2101      	movs	r1, #1
 8003d90:	fa01 f202 	lsl.w	r2, r1, r2
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e079      	b.n	8003e92 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d9e:	4b1d      	ldr	r3, [pc, #116]	; (8003e14 <HAL_RCC_ClockConfig+0x260>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f023 0203 	bic.w	r2, r3, #3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	491a      	ldr	r1, [pc, #104]	; (8003e14 <HAL_RCC_ClockConfig+0x260>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003db0:	f7fd fb98 	bl	80014e4 <HAL_GetTick>
 8003db4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db6:	e00a      	b.n	8003dce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db8:	f7fd fb94 	bl	80014e4 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e061      	b.n	8003e92 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dce:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <HAL_RCC_ClockConfig+0x260>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f003 020c 	and.w	r2, r3, #12
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d1eb      	bne.n	8003db8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003de0:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <HAL_RCC_ClockConfig+0x25c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d214      	bcs.n	8003e18 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dee:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <HAL_RCC_ClockConfig+0x25c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f023 0207 	bic.w	r2, r3, #7
 8003df6:	4906      	ldr	r1, [pc, #24]	; (8003e10 <HAL_RCC_ClockConfig+0x25c>)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfe:	4b04      	ldr	r3, [pc, #16]	; (8003e10 <HAL_RCC_ClockConfig+0x25c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d005      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e040      	b.n	8003e92 <HAL_RCC_ClockConfig+0x2de>
 8003e10:	40022000 	.word	0x40022000
 8003e14:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e24:	4b1d      	ldr	r3, [pc, #116]	; (8003e9c <HAL_RCC_ClockConfig+0x2e8>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	491a      	ldr	r1, [pc, #104]	; (8003e9c <HAL_RCC_ClockConfig+0x2e8>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e42:	4b16      	ldr	r3, [pc, #88]	; (8003e9c <HAL_RCC_ClockConfig+0x2e8>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	4912      	ldr	r1, [pc, #72]	; (8003e9c <HAL_RCC_ClockConfig+0x2e8>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e56:	f000 f829 	bl	8003eac <HAL_RCC_GetSysClockFreq>
 8003e5a:	4601      	mov	r1, r0
 8003e5c:	4b0f      	ldr	r3, [pc, #60]	; (8003e9c <HAL_RCC_ClockConfig+0x2e8>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e64:	22f0      	movs	r2, #240	; 0xf0
 8003e66:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	fa92 f2a2 	rbit	r2, r2
 8003e6e:	60fa      	str	r2, [r7, #12]
  return result;
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	fab2 f282 	clz	r2, r2
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	40d3      	lsrs	r3, r2
 8003e7a:	4a09      	ldr	r2, [pc, #36]	; (8003ea0 <HAL_RCC_ClockConfig+0x2ec>)
 8003e7c:	5cd3      	ldrb	r3, [r2, r3]
 8003e7e:	fa21 f303 	lsr.w	r3, r1, r3
 8003e82:	4a08      	ldr	r2, [pc, #32]	; (8003ea4 <HAL_RCC_ClockConfig+0x2f0>)
 8003e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003e86:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <HAL_RCC_ClockConfig+0x2f4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fd fae6 	bl	800145c <HAL_InitTick>
  
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3778      	adds	r7, #120	; 0x78
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	08005fc4 	.word	0x08005fc4
 8003ea4:	20000000 	.word	0x20000000
 8003ea8:	20000004 	.word	0x20000004

08003eac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b08b      	sub	sp, #44	; 0x2c
 8003eb0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61fb      	str	r3, [r7, #28]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61bb      	str	r3, [r7, #24]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003ec6:	4b29      	ldr	r3, [pc, #164]	; (8003f6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f003 030c 	and.w	r3, r3, #12
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d002      	beq.n	8003edc <HAL_RCC_GetSysClockFreq+0x30>
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d003      	beq.n	8003ee2 <HAL_RCC_GetSysClockFreq+0x36>
 8003eda:	e03c      	b.n	8003f56 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003edc:	4b24      	ldr	r3, [pc, #144]	; (8003f70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ede:	623b      	str	r3, [r7, #32]
      break;
 8003ee0:	e03c      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003ee8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003eec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	fa92 f2a2 	rbit	r2, r2
 8003ef4:	607a      	str	r2, [r7, #4]
  return result;
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	fab2 f282 	clz	r2, r2
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	40d3      	lsrs	r3, r2
 8003f00:	4a1c      	ldr	r2, [pc, #112]	; (8003f74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f02:	5cd3      	ldrb	r3, [r2, r3]
 8003f04:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003f06:	4b19      	ldr	r3, [pc, #100]	; (8003f6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	220f      	movs	r2, #15
 8003f10:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	fa92 f2a2 	rbit	r2, r2
 8003f18:	60fa      	str	r2, [r7, #12]
  return result;
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	fab2 f282 	clz	r2, r2
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	40d3      	lsrs	r3, r2
 8003f24:	4a14      	ldr	r2, [pc, #80]	; (8003f78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003f26:	5cd3      	ldrb	r3, [r2, r3]
 8003f28:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f34:	4a0e      	ldr	r2, [pc, #56]	; (8003f70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	fb02 f303 	mul.w	r3, r2, r3
 8003f42:	627b      	str	r3, [r7, #36]	; 0x24
 8003f44:	e004      	b.n	8003f50 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	4a0c      	ldr	r2, [pc, #48]	; (8003f7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f4a:	fb02 f303 	mul.w	r3, r2, r3
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	623b      	str	r3, [r7, #32]
      break;
 8003f54:	e002      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f56:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f58:	623b      	str	r3, [r7, #32]
      break;
 8003f5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	372c      	adds	r7, #44	; 0x2c
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	007a1200 	.word	0x007a1200
 8003f74:	08005fdc 	.word	0x08005fdc
 8003f78:	08005fec 	.word	0x08005fec
 8003f7c:	003d0900 	.word	0x003d0900

08003f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f84:	4b03      	ldr	r3, [pc, #12]	; (8003f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f86:	681b      	ldr	r3, [r3, #0]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	20000000 	.word	0x20000000

08003f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003f9e:	f7ff ffef 	bl	8003f80 <HAL_RCC_GetHCLKFreq>
 8003fa2:	4601      	mov	r1, r0
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003fb0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	fa92 f2a2 	rbit	r2, r2
 8003fb8:	603a      	str	r2, [r7, #0]
  return result;
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	fab2 f282 	clz	r2, r2
 8003fc0:	b2d2      	uxtb	r2, r2
 8003fc2:	40d3      	lsrs	r3, r2
 8003fc4:	4a04      	ldr	r2, [pc, #16]	; (8003fd8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003fc6:	5cd3      	ldrb	r3, [r2, r3]
 8003fc8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	08005fd4 	.word	0x08005fd4

08003fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003fe2:	f7ff ffcd 	bl	8003f80 <HAL_RCC_GetHCLKFreq>
 8003fe6:	4601      	mov	r1, r0
 8003fe8:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003ff0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003ff4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	fa92 f2a2 	rbit	r2, r2
 8003ffc:	603a      	str	r2, [r7, #0]
  return result;
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	fab2 f282 	clz	r2, r2
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	40d3      	lsrs	r3, r2
 8004008:	4a04      	ldr	r2, [pc, #16]	; (800401c <HAL_RCC_GetPCLK2Freq+0x40>)
 800400a:	5cd3      	ldrb	r3, [r2, r3]
 800400c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004010:	4618      	mov	r0, r3
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40021000 	.word	0x40021000
 800401c:	08005fd4 	.word	0x08005fd4

08004020 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b092      	sub	sp, #72	; 0x48
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004030:	2300      	movs	r3, #0
 8004032:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 80d4 	beq.w	80041ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004044:	4b4e      	ldr	r3, [pc, #312]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10e      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004050:	4b4b      	ldr	r3, [pc, #300]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	4a4a      	ldr	r2, [pc, #296]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800405a:	61d3      	str	r3, [r2, #28]
 800405c:	4b48      	ldr	r3, [pc, #288]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004068:	2301      	movs	r3, #1
 800406a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406e:	4b45      	ldr	r3, [pc, #276]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004076:	2b00      	cmp	r3, #0
 8004078:	d118      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800407a:	4b42      	ldr	r3, [pc, #264]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a41      	ldr	r2, [pc, #260]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004084:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004086:	f7fd fa2d 	bl	80014e4 <HAL_GetTick>
 800408a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800408c:	e008      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800408e:	f7fd fa29 	bl	80014e4 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b64      	cmp	r3, #100	; 0x64
 800409a:	d901      	bls.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e14b      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a0:	4b38      	ldr	r3, [pc, #224]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0f0      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040ac:	4b34      	ldr	r3, [pc, #208]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 8084 	beq.w	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d07c      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040cc:	4b2c      	ldr	r3, [pc, #176]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040de:	fa93 f3a3 	rbit	r3, r3
 80040e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80040e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040e6:	fab3 f383 	clz	r3, r3
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	461a      	mov	r2, r3
 80040ee:	4b26      	ldr	r3, [pc, #152]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	461a      	mov	r2, r3
 80040f6:	2301      	movs	r3, #1
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004102:	fa93 f3a3 	rbit	r3, r3
 8004106:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800410a:	fab3 f383 	clz	r3, r3
 800410e:	b2db      	uxtb	r3, r3
 8004110:	461a      	mov	r2, r3
 8004112:	4b1d      	ldr	r3, [pc, #116]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	461a      	mov	r2, r3
 800411a:	2300      	movs	r3, #0
 800411c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800411e:	4a18      	ldr	r2, [pc, #96]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004122:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d04b      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412e:	f7fd f9d9 	bl	80014e4 <HAL_GetTick>
 8004132:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004134:	e00a      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004136:	f7fd f9d5 	bl	80014e4 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	f241 3288 	movw	r2, #5000	; 0x1388
 8004144:	4293      	cmp	r3, r2
 8004146:	d901      	bls.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e0f5      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800414c:	2302      	movs	r3, #2
 800414e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004152:	fa93 f3a3 	rbit	r3, r3
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
 8004158:	2302      	movs	r3, #2
 800415a:	623b      	str	r3, [r7, #32]
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	fa93 f3a3 	rbit	r3, r3
 8004162:	61fb      	str	r3, [r7, #28]
  return result;
 8004164:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004166:	fab3 f383 	clz	r3, r3
 800416a:	b2db      	uxtb	r3, r3
 800416c:	095b      	lsrs	r3, r3, #5
 800416e:	b2db      	uxtb	r3, r3
 8004170:	f043 0302 	orr.w	r3, r3, #2
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d108      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800417a:	4b01      	ldr	r3, [pc, #4]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	e00d      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004180:	40021000 	.word	0x40021000
 8004184:	40007000 	.word	0x40007000
 8004188:	10908100 	.word	0x10908100
 800418c:	2302      	movs	r3, #2
 800418e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	fa93 f3a3 	rbit	r3, r3
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	4b69      	ldr	r3, [pc, #420]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	2202      	movs	r2, #2
 800419e:	613a      	str	r2, [r7, #16]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	fa92 f2a2 	rbit	r2, r2
 80041a6:	60fa      	str	r2, [r7, #12]
  return result;
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	fab2 f282 	clz	r2, r2
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041b4:	b2d2      	uxtb	r2, r2
 80041b6:	f002 021f 	and.w	r2, r2, #31
 80041ba:	2101      	movs	r1, #1
 80041bc:	fa01 f202 	lsl.w	r2, r1, r2
 80041c0:	4013      	ands	r3, r2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0b7      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80041c6:	4b5e      	ldr	r3, [pc, #376]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	495b      	ldr	r1, [pc, #364]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d105      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041e0:	4b57      	ldr	r3, [pc, #348]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	4a56      	ldr	r2, [pc, #344]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d008      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041f8:	4b51      	ldr	r3, [pc, #324]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fc:	f023 0203 	bic.w	r2, r3, #3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	494e      	ldr	r1, [pc, #312]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004206:	4313      	orrs	r3, r2
 8004208:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b00      	cmp	r3, #0
 8004214:	d008      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004216:	4b4a      	ldr	r3, [pc, #296]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	f023 0210 	bic.w	r2, r3, #16
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	4947      	ldr	r1, [pc, #284]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004224:	4313      	orrs	r3, r2
 8004226:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d008      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004234:	4b42      	ldr	r3, [pc, #264]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004240:	493f      	ldr	r1, [pc, #252]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004242:	4313      	orrs	r3, r2
 8004244:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424e:	2b00      	cmp	r3, #0
 8004250:	d008      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004252:	4b3b      	ldr	r3, [pc, #236]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	f023 0220 	bic.w	r2, r3, #32
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	4938      	ldr	r1, [pc, #224]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004260:	4313      	orrs	r3, r2
 8004262:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d008      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004270:	4b33      	ldr	r3, [pc, #204]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004274:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	4930      	ldr	r1, [pc, #192]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800427e:	4313      	orrs	r3, r2
 8004280:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800428a:	2b00      	cmp	r3, #0
 800428c:	d008      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800428e:	4b2c      	ldr	r3, [pc, #176]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	4929      	ldr	r1, [pc, #164]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800429c:	4313      	orrs	r3, r2
 800429e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d008      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80042ac:	4b24      	ldr	r3, [pc, #144]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	4921      	ldr	r1, [pc, #132]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d008      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80042ca:	4b1d      	ldr	r3, [pc, #116]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	491a      	ldr	r1, [pc, #104]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d008      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80042e8:	4b15      	ldr	r3, [pc, #84]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	4912      	ldr	r1, [pc, #72]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d008      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004306:	4b0e      	ldr	r3, [pc, #56]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004312:	490b      	ldr	r1, [pc, #44]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004314:	4313      	orrs	r3, r2
 8004316:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d008      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004324:	4b06      	ldr	r3, [pc, #24]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004328:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	4903      	ldr	r1, [pc, #12]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004332:	4313      	orrs	r3, r2
 8004334:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3748      	adds	r7, #72	; 0x48
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40021000 	.word	0x40021000

08004344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e049      	b.n	80043ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fc ff34 	bl	80011d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3304      	adds	r3, #4
 8004380:	4619      	mov	r1, r3
 8004382:	4610      	mov	r0, r2
 8004384:	f000 fb9a 	bl	8004abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b086      	sub	sp, #24
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e097      	b.n	8004536 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d106      	bne.n	8004420 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7fc fe94 	bl	8001148 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6812      	ldr	r2, [r2, #0]
 8004432:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004436:	f023 0307 	bic.w	r3, r3, #7
 800443a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3304      	adds	r3, #4
 8004444:	4619      	mov	r1, r3
 8004446:	4610      	mov	r0, r2
 8004448:	f000 fb38 	bl	8004abc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	4313      	orrs	r3, r2
 800446c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004474:	f023 0303 	bic.w	r3, r3, #3
 8004478:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	021b      	lsls	r3, r3, #8
 8004484:	4313      	orrs	r3, r2
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004492:	f023 030c 	bic.w	r3, r3, #12
 8004496:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800449e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	021b      	lsls	r3, r3, #8
 80044ae:	4313      	orrs	r3, r2
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	011a      	lsls	r2, r3, #4
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	031b      	lsls	r3, r3, #12
 80044c2:	4313      	orrs	r3, r2
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80044d0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80044d8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	4313      	orrs	r3, r2
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800454e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004556:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800455e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004566:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d110      	bne.n	8004590 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800456e:	7bfb      	ldrb	r3, [r7, #15]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d102      	bne.n	800457a <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004574:	7b7b      	ldrb	r3, [r7, #13]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d001      	beq.n	800457e <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e089      	b.n	8004692 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2202      	movs	r2, #2
 8004582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2202      	movs	r2, #2
 800458a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800458e:	e031      	b.n	80045f4 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b04      	cmp	r3, #4
 8004594:	d110      	bne.n	80045b8 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004596:	7bbb      	ldrb	r3, [r7, #14]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d102      	bne.n	80045a2 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800459c:	7b3b      	ldrb	r3, [r7, #12]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d001      	beq.n	80045a6 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e075      	b.n	8004692 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2202      	movs	r2, #2
 80045aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2202      	movs	r2, #2
 80045b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045b6:	e01d      	b.n	80045f4 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d108      	bne.n	80045d0 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80045be:	7bbb      	ldrb	r3, [r7, #14]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d105      	bne.n	80045d0 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045c4:	7b7b      	ldrb	r3, [r7, #13]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d102      	bne.n	80045d0 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80045ca:	7b3b      	ldrb	r3, [r7, #12]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d001      	beq.n	80045d4 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e05e      	b.n	8004692 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_TIM_Encoder_Start_IT+0xc4>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d010      	beq.n	8004622 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004600:	e01f      	b.n	8004642 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2201      	movs	r2, #1
 8004608:	2100      	movs	r1, #0
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fb5e 	bl	8004ccc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0202 	orr.w	r2, r2, #2
 800461e:	60da      	str	r2, [r3, #12]
      break;
 8004620:	e02e      	b.n	8004680 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2201      	movs	r2, #1
 8004628:	2104      	movs	r1, #4
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fb4e 	bl	8004ccc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0204 	orr.w	r2, r2, #4
 800463e:	60da      	str	r2, [r3, #12]
      break;
 8004640:	e01e      	b.n	8004680 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2201      	movs	r2, #1
 8004648:	2100      	movs	r1, #0
 800464a:	4618      	mov	r0, r3
 800464c:	f000 fb3e 	bl	8004ccc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2201      	movs	r2, #1
 8004656:	2104      	movs	r1, #4
 8004658:	4618      	mov	r0, r3
 800465a:	f000 fb37 	bl	8004ccc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0202 	orr.w	r2, r2, #2
 800466c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f042 0204 	orr.w	r2, r2, #4
 800467c:	60da      	str	r2, [r3, #12]
      break;
 800467e:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0201 	orr.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b082      	sub	sp, #8
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d122      	bne.n	80046f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d11b      	bne.n	80046f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f06f 0202 	mvn.w	r2, #2
 80046c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7fb fe15 	bl	800030c <HAL_TIM_IC_CaptureCallback>
 80046e2:	e005      	b.n	80046f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f9ca 	bl	8004a7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f9d1 	bl	8004a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b04      	cmp	r3, #4
 8004702:	d122      	bne.n	800474a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b04      	cmp	r3, #4
 8004710:	d11b      	bne.n	800474a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f06f 0204 	mvn.w	r2, #4
 800471a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7fb fdeb 	bl	800030c <HAL_TIM_IC_CaptureCallback>
 8004736:	e005      	b.n	8004744 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f9a0 	bl	8004a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f9a7 	bl	8004a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b08      	cmp	r3, #8
 8004756:	d122      	bne.n	800479e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	2b08      	cmp	r3, #8
 8004764:	d11b      	bne.n	800479e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f06f 0208 	mvn.w	r2, #8
 800476e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2204      	movs	r2, #4
 8004774:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	f003 0303 	and.w	r3, r3, #3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7fb fdc1 	bl	800030c <HAL_TIM_IC_CaptureCallback>
 800478a:	e005      	b.n	8004798 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f976 	bl	8004a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f97d 	bl	8004a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	f003 0310 	and.w	r3, r3, #16
 80047a8:	2b10      	cmp	r3, #16
 80047aa:	d122      	bne.n	80047f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f003 0310 	and.w	r3, r3, #16
 80047b6:	2b10      	cmp	r3, #16
 80047b8:	d11b      	bne.n	80047f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f06f 0210 	mvn.w	r2, #16
 80047c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2208      	movs	r2, #8
 80047c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7fb fd97 	bl	800030c <HAL_TIM_IC_CaptureCallback>
 80047de:	e005      	b.n	80047ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f94c 	bl	8004a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f953 	bl	8004a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d10e      	bne.n	800481e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b01      	cmp	r3, #1
 800480c:	d107      	bne.n	800481e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f06f 0201 	mvn.w	r2, #1
 8004816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f926 	bl	8004a6a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004828:	2b80      	cmp	r3, #128	; 0x80
 800482a:	d10e      	bne.n	800484a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004836:	2b80      	cmp	r3, #128	; 0x80
 8004838:	d107      	bne.n	800484a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fad7 	bl	8004df8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004858:	d10e      	bne.n	8004878 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004864:	2b80      	cmp	r3, #128	; 0x80
 8004866:	d107      	bne.n	8004878 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 faca 	bl	8004e0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004882:	2b40      	cmp	r3, #64	; 0x40
 8004884:	d10e      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004890:	2b40      	cmp	r3, #64	; 0x40
 8004892:	d107      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800489c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f901 	bl	8004aa6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b20      	cmp	r3, #32
 80048b0:	d10e      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f003 0320 	and.w	r3, r3, #32
 80048bc:	2b20      	cmp	r3, #32
 80048be:	d107      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f06f 0220 	mvn.w	r2, #32
 80048c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fa8a 	bl	8004de4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048d0:	bf00      	nop
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_TIM_ConfigClockSource+0x1c>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e0b6      	b.n	8004a62 <HAL_TIM_ConfigClockSource+0x18a>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004912:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004916:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800491e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004930:	d03e      	beq.n	80049b0 <HAL_TIM_ConfigClockSource+0xd8>
 8004932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004936:	f200 8087 	bhi.w	8004a48 <HAL_TIM_ConfigClockSource+0x170>
 800493a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800493e:	f000 8086 	beq.w	8004a4e <HAL_TIM_ConfigClockSource+0x176>
 8004942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004946:	d87f      	bhi.n	8004a48 <HAL_TIM_ConfigClockSource+0x170>
 8004948:	2b70      	cmp	r3, #112	; 0x70
 800494a:	d01a      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0xaa>
 800494c:	2b70      	cmp	r3, #112	; 0x70
 800494e:	d87b      	bhi.n	8004a48 <HAL_TIM_ConfigClockSource+0x170>
 8004950:	2b60      	cmp	r3, #96	; 0x60
 8004952:	d050      	beq.n	80049f6 <HAL_TIM_ConfigClockSource+0x11e>
 8004954:	2b60      	cmp	r3, #96	; 0x60
 8004956:	d877      	bhi.n	8004a48 <HAL_TIM_ConfigClockSource+0x170>
 8004958:	2b50      	cmp	r3, #80	; 0x50
 800495a:	d03c      	beq.n	80049d6 <HAL_TIM_ConfigClockSource+0xfe>
 800495c:	2b50      	cmp	r3, #80	; 0x50
 800495e:	d873      	bhi.n	8004a48 <HAL_TIM_ConfigClockSource+0x170>
 8004960:	2b40      	cmp	r3, #64	; 0x40
 8004962:	d058      	beq.n	8004a16 <HAL_TIM_ConfigClockSource+0x13e>
 8004964:	2b40      	cmp	r3, #64	; 0x40
 8004966:	d86f      	bhi.n	8004a48 <HAL_TIM_ConfigClockSource+0x170>
 8004968:	2b30      	cmp	r3, #48	; 0x30
 800496a:	d064      	beq.n	8004a36 <HAL_TIM_ConfigClockSource+0x15e>
 800496c:	2b30      	cmp	r3, #48	; 0x30
 800496e:	d86b      	bhi.n	8004a48 <HAL_TIM_ConfigClockSource+0x170>
 8004970:	2b20      	cmp	r3, #32
 8004972:	d060      	beq.n	8004a36 <HAL_TIM_ConfigClockSource+0x15e>
 8004974:	2b20      	cmp	r3, #32
 8004976:	d867      	bhi.n	8004a48 <HAL_TIM_ConfigClockSource+0x170>
 8004978:	2b00      	cmp	r3, #0
 800497a:	d05c      	beq.n	8004a36 <HAL_TIM_ConfigClockSource+0x15e>
 800497c:	2b10      	cmp	r3, #16
 800497e:	d05a      	beq.n	8004a36 <HAL_TIM_ConfigClockSource+0x15e>
 8004980:	e062      	b.n	8004a48 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6818      	ldr	r0, [r3, #0]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	6899      	ldr	r1, [r3, #8]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f000 f97b 	bl	8004c8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	609a      	str	r2, [r3, #8]
      break;
 80049ae:	e04f      	b.n	8004a50 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6818      	ldr	r0, [r3, #0]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	6899      	ldr	r1, [r3, #8]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f000 f964 	bl	8004c8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689a      	ldr	r2, [r3, #8]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049d2:	609a      	str	r2, [r3, #8]
      break;
 80049d4:	e03c      	b.n	8004a50 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	6859      	ldr	r1, [r3, #4]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	461a      	mov	r2, r3
 80049e4:	f000 f8d8 	bl	8004b98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2150      	movs	r1, #80	; 0x50
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 f931 	bl	8004c56 <TIM_ITRx_SetConfig>
      break;
 80049f4:	e02c      	b.n	8004a50 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6818      	ldr	r0, [r3, #0]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	6859      	ldr	r1, [r3, #4]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	461a      	mov	r2, r3
 8004a04:	f000 f8f7 	bl	8004bf6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2160      	movs	r1, #96	; 0x60
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 f921 	bl	8004c56 <TIM_ITRx_SetConfig>
      break;
 8004a14:	e01c      	b.n	8004a50 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6818      	ldr	r0, [r3, #0]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	6859      	ldr	r1, [r3, #4]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	461a      	mov	r2, r3
 8004a24:	f000 f8b8 	bl	8004b98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2140      	movs	r1, #64	; 0x40
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 f911 	bl	8004c56 <TIM_ITRx_SetConfig>
      break;
 8004a34:	e00c      	b.n	8004a50 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4610      	mov	r0, r2
 8004a42:	f000 f908 	bl	8004c56 <TIM_ITRx_SetConfig>
      break;
 8004a46:	e003      	b.n	8004a50 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a4c:	e000      	b.n	8004a50 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004a4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
	...

08004abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a2e      	ldr	r2, [pc, #184]	; (8004b88 <TIM_Base_SetConfig+0xcc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d003      	beq.n	8004adc <TIM_Base_SetConfig+0x20>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ada:	d108      	bne.n	8004aee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a25      	ldr	r2, [pc, #148]	; (8004b88 <TIM_Base_SetConfig+0xcc>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d00f      	beq.n	8004b16 <TIM_Base_SetConfig+0x5a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afc:	d00b      	beq.n	8004b16 <TIM_Base_SetConfig+0x5a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a22      	ldr	r2, [pc, #136]	; (8004b8c <TIM_Base_SetConfig+0xd0>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d007      	beq.n	8004b16 <TIM_Base_SetConfig+0x5a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a21      	ldr	r2, [pc, #132]	; (8004b90 <TIM_Base_SetConfig+0xd4>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d003      	beq.n	8004b16 <TIM_Base_SetConfig+0x5a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a20      	ldr	r2, [pc, #128]	; (8004b94 <TIM_Base_SetConfig+0xd8>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d108      	bne.n	8004b28 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a0e      	ldr	r2, [pc, #56]	; (8004b88 <TIM_Base_SetConfig+0xcc>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d00b      	beq.n	8004b6c <TIM_Base_SetConfig+0xb0>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a0d      	ldr	r2, [pc, #52]	; (8004b8c <TIM_Base_SetConfig+0xd0>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d007      	beq.n	8004b6c <TIM_Base_SetConfig+0xb0>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a0c      	ldr	r2, [pc, #48]	; (8004b90 <TIM_Base_SetConfig+0xd4>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d003      	beq.n	8004b6c <TIM_Base_SetConfig+0xb0>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a0b      	ldr	r2, [pc, #44]	; (8004b94 <TIM_Base_SetConfig+0xd8>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d103      	bne.n	8004b74 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	615a      	str	r2, [r3, #20]
}
 8004b7a:	bf00      	nop
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40012c00 	.word	0x40012c00
 8004b8c:	40014000 	.word	0x40014000
 8004b90:	40014400 	.word	0x40014400
 8004b94:	40014800 	.word	0x40014800

08004b98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f023 0201 	bic.w	r2, r3, #1
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f023 030a 	bic.w	r3, r3, #10
 8004bd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	621a      	str	r2, [r3, #32]
}
 8004bea:	bf00      	nop
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b087      	sub	sp, #28
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	60f8      	str	r0, [r7, #12]
 8004bfe:	60b9      	str	r1, [r7, #8]
 8004c00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	f023 0210 	bic.w	r2, r3, #16
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	031b      	lsls	r3, r3, #12
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	621a      	str	r2, [r3, #32]
}
 8004c4a:	bf00      	nop
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b085      	sub	sp, #20
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f043 0307 	orr.w	r3, r3, #7
 8004c78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	609a      	str	r2, [r3, #8]
}
 8004c80:	bf00      	nop
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
 8004c98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ca6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	021a      	lsls	r2, r3, #8
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	609a      	str	r2, [r3, #8]
}
 8004cc0:	bf00      	nop
 8004cc2:	371c      	adds	r7, #28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f003 031f 	and.w	r3, r3, #31
 8004cde:	2201      	movs	r2, #1
 8004ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6a1a      	ldr	r2, [r3, #32]
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	43db      	mvns	r3, r3
 8004cee:	401a      	ands	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6a1a      	ldr	r2, [r3, #32]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f003 031f 	and.w	r3, r3, #31
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	fa01 f303 	lsl.w	r3, r1, r3
 8004d04:	431a      	orrs	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	621a      	str	r2, [r3, #32]
}
 8004d0a:	bf00      	nop
 8004d0c:	371c      	adds	r7, #28
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
	...

08004d18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e04f      	b.n	8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a21      	ldr	r2, [pc, #132]	; (8004ddc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d108      	bne.n	8004d6c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d60:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a14      	ldr	r2, [pc, #80]	; (8004ddc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d009      	beq.n	8004da4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d98:	d004      	beq.n	8004da4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a10      	ldr	r2, [pc, #64]	; (8004de0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d10c      	bne.n	8004dbe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004daa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	40012c00 	.word	0x40012c00
 8004de0:	40014000 	.word	0x40014000

08004de4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e040      	b.n	8004eb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7fc f9ee 	bl	8001224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2224      	movs	r2, #36	; 0x24
 8004e4c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0201 	bic.w	r2, r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f8b6 	bl	8004fd0 <UART_SetConfig>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d101      	bne.n	8004e6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e022      	b.n	8004eb4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f9e0 	bl	800523c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0201 	orr.w	r2, r2, #1
 8004eaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 fa67 	bl	8005380 <UART_CheckIdleState>
 8004eb2:	4603      	mov	r3, r0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08a      	sub	sp, #40	; 0x28
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	603b      	str	r3, [r7, #0]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ed0:	2b20      	cmp	r3, #32
 8004ed2:	d178      	bne.n	8004fc6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <HAL_UART_Transmit+0x24>
 8004eda:	88fb      	ldrh	r3, [r7, #6]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e071      	b.n	8004fc8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2221      	movs	r2, #33	; 0x21
 8004ef0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ef2:	f7fc faf7 	bl	80014e4 <HAL_GetTick>
 8004ef6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	88fa      	ldrh	r2, [r7, #6]
 8004efc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	88fa      	ldrh	r2, [r7, #6]
 8004f04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f10:	d108      	bne.n	8004f24 <HAL_UART_Transmit+0x68>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d104      	bne.n	8004f24 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	61bb      	str	r3, [r7, #24]
 8004f22:	e003      	b.n	8004f2c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f2c:	e030      	b.n	8004f90 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2200      	movs	r2, #0
 8004f36:	2180      	movs	r1, #128	; 0x80
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 fac9 	bl	80054d0 <UART_WaitOnFlagUntilTimeout>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d004      	beq.n	8004f4e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2220      	movs	r2, #32
 8004f48:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e03c      	b.n	8004fc8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10b      	bne.n	8004f6c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	881a      	ldrh	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f60:	b292      	uxth	r2, r2
 8004f62:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	3302      	adds	r3, #2
 8004f68:	61bb      	str	r3, [r7, #24]
 8004f6a:	e008      	b.n	8004f7e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	781a      	ldrb	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	b292      	uxth	r2, r2
 8004f76:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1c8      	bne.n	8004f2e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2140      	movs	r1, #64	; 0x40
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 fa92 	bl	80054d0 <UART_WaitOnFlagUntilTimeout>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d004      	beq.n	8004fbc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e005      	b.n	8004fc8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	e000      	b.n	8004fc8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004fc6:	2302      	movs	r3, #2
  }
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3720      	adds	r7, #32
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	4b8a      	ldr	r3, [pc, #552]	; (8005224 <UART_SetConfig+0x254>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6812      	ldr	r2, [r2, #0]
 8005002:	6979      	ldr	r1, [r7, #20]
 8005004:	430b      	orrs	r3, r1
 8005006:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	4313      	orrs	r3, r2
 800502c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	430a      	orrs	r2, r1
 8005040:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a78      	ldr	r2, [pc, #480]	; (8005228 <UART_SetConfig+0x258>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d120      	bne.n	800508e <UART_SetConfig+0xbe>
 800504c:	4b77      	ldr	r3, [pc, #476]	; (800522c <UART_SetConfig+0x25c>)
 800504e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005050:	f003 0303 	and.w	r3, r3, #3
 8005054:	2b03      	cmp	r3, #3
 8005056:	d817      	bhi.n	8005088 <UART_SetConfig+0xb8>
 8005058:	a201      	add	r2, pc, #4	; (adr r2, 8005060 <UART_SetConfig+0x90>)
 800505a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505e:	bf00      	nop
 8005060:	08005071 	.word	0x08005071
 8005064:	0800507d 	.word	0x0800507d
 8005068:	08005083 	.word	0x08005083
 800506c:	08005077 	.word	0x08005077
 8005070:	2300      	movs	r3, #0
 8005072:	77fb      	strb	r3, [r7, #31]
 8005074:	e01d      	b.n	80050b2 <UART_SetConfig+0xe2>
 8005076:	2302      	movs	r3, #2
 8005078:	77fb      	strb	r3, [r7, #31]
 800507a:	e01a      	b.n	80050b2 <UART_SetConfig+0xe2>
 800507c:	2304      	movs	r3, #4
 800507e:	77fb      	strb	r3, [r7, #31]
 8005080:	e017      	b.n	80050b2 <UART_SetConfig+0xe2>
 8005082:	2308      	movs	r3, #8
 8005084:	77fb      	strb	r3, [r7, #31]
 8005086:	e014      	b.n	80050b2 <UART_SetConfig+0xe2>
 8005088:	2310      	movs	r3, #16
 800508a:	77fb      	strb	r3, [r7, #31]
 800508c:	e011      	b.n	80050b2 <UART_SetConfig+0xe2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a67      	ldr	r2, [pc, #412]	; (8005230 <UART_SetConfig+0x260>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d102      	bne.n	800509e <UART_SetConfig+0xce>
 8005098:	2300      	movs	r3, #0
 800509a:	77fb      	strb	r3, [r7, #31]
 800509c:	e009      	b.n	80050b2 <UART_SetConfig+0xe2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a64      	ldr	r2, [pc, #400]	; (8005234 <UART_SetConfig+0x264>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d102      	bne.n	80050ae <UART_SetConfig+0xde>
 80050a8:	2300      	movs	r3, #0
 80050aa:	77fb      	strb	r3, [r7, #31]
 80050ac:	e001      	b.n	80050b2 <UART_SetConfig+0xe2>
 80050ae:	2310      	movs	r3, #16
 80050b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ba:	d15a      	bne.n	8005172 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80050bc:	7ffb      	ldrb	r3, [r7, #31]
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d827      	bhi.n	8005112 <UART_SetConfig+0x142>
 80050c2:	a201      	add	r2, pc, #4	; (adr r2, 80050c8 <UART_SetConfig+0xf8>)
 80050c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c8:	080050ed 	.word	0x080050ed
 80050cc:	080050f5 	.word	0x080050f5
 80050d0:	080050fd 	.word	0x080050fd
 80050d4:	08005113 	.word	0x08005113
 80050d8:	08005103 	.word	0x08005103
 80050dc:	08005113 	.word	0x08005113
 80050e0:	08005113 	.word	0x08005113
 80050e4:	08005113 	.word	0x08005113
 80050e8:	0800510b 	.word	0x0800510b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050ec:	f7fe ff54 	bl	8003f98 <HAL_RCC_GetPCLK1Freq>
 80050f0:	61b8      	str	r0, [r7, #24]
        break;
 80050f2:	e013      	b.n	800511c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050f4:	f7fe ff72 	bl	8003fdc <HAL_RCC_GetPCLK2Freq>
 80050f8:	61b8      	str	r0, [r7, #24]
        break;
 80050fa:	e00f      	b.n	800511c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050fc:	4b4e      	ldr	r3, [pc, #312]	; (8005238 <UART_SetConfig+0x268>)
 80050fe:	61bb      	str	r3, [r7, #24]
        break;
 8005100:	e00c      	b.n	800511c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005102:	f7fe fed3 	bl	8003eac <HAL_RCC_GetSysClockFreq>
 8005106:	61b8      	str	r0, [r7, #24]
        break;
 8005108:	e008      	b.n	800511c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800510a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800510e:	61bb      	str	r3, [r7, #24]
        break;
 8005110:	e004      	b.n	800511c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	77bb      	strb	r3, [r7, #30]
        break;
 800511a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d074      	beq.n	800520c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	005a      	lsls	r2, r3, #1
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	085b      	lsrs	r3, r3, #1
 800512c:	441a      	add	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	fbb2 f3f3 	udiv	r3, r2, r3
 8005136:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	2b0f      	cmp	r3, #15
 800513c:	d916      	bls.n	800516c <UART_SetConfig+0x19c>
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005144:	d212      	bcs.n	800516c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	b29b      	uxth	r3, r3
 800514a:	f023 030f 	bic.w	r3, r3, #15
 800514e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	085b      	lsrs	r3, r3, #1
 8005154:	b29b      	uxth	r3, r3
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	b29a      	uxth	r2, r3
 800515c:	89fb      	ldrh	r3, [r7, #14]
 800515e:	4313      	orrs	r3, r2
 8005160:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	89fa      	ldrh	r2, [r7, #14]
 8005168:	60da      	str	r2, [r3, #12]
 800516a:	e04f      	b.n	800520c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	77bb      	strb	r3, [r7, #30]
 8005170:	e04c      	b.n	800520c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005172:	7ffb      	ldrb	r3, [r7, #31]
 8005174:	2b08      	cmp	r3, #8
 8005176:	d828      	bhi.n	80051ca <UART_SetConfig+0x1fa>
 8005178:	a201      	add	r2, pc, #4	; (adr r2, 8005180 <UART_SetConfig+0x1b0>)
 800517a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517e:	bf00      	nop
 8005180:	080051a5 	.word	0x080051a5
 8005184:	080051ad 	.word	0x080051ad
 8005188:	080051b5 	.word	0x080051b5
 800518c:	080051cb 	.word	0x080051cb
 8005190:	080051bb 	.word	0x080051bb
 8005194:	080051cb 	.word	0x080051cb
 8005198:	080051cb 	.word	0x080051cb
 800519c:	080051cb 	.word	0x080051cb
 80051a0:	080051c3 	.word	0x080051c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051a4:	f7fe fef8 	bl	8003f98 <HAL_RCC_GetPCLK1Freq>
 80051a8:	61b8      	str	r0, [r7, #24]
        break;
 80051aa:	e013      	b.n	80051d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051ac:	f7fe ff16 	bl	8003fdc <HAL_RCC_GetPCLK2Freq>
 80051b0:	61b8      	str	r0, [r7, #24]
        break;
 80051b2:	e00f      	b.n	80051d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051b4:	4b20      	ldr	r3, [pc, #128]	; (8005238 <UART_SetConfig+0x268>)
 80051b6:	61bb      	str	r3, [r7, #24]
        break;
 80051b8:	e00c      	b.n	80051d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ba:	f7fe fe77 	bl	8003eac <HAL_RCC_GetSysClockFreq>
 80051be:	61b8      	str	r0, [r7, #24]
        break;
 80051c0:	e008      	b.n	80051d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051c6:	61bb      	str	r3, [r7, #24]
        break;
 80051c8:	e004      	b.n	80051d4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	77bb      	strb	r3, [r7, #30]
        break;
 80051d2:	bf00      	nop
    }

    if (pclk != 0U)
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d018      	beq.n	800520c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	085a      	lsrs	r2, r3, #1
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	441a      	add	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	2b0f      	cmp	r3, #15
 80051f2:	d909      	bls.n	8005208 <UART_SetConfig+0x238>
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051fa:	d205      	bcs.n	8005208 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	b29a      	uxth	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	60da      	str	r2, [r3, #12]
 8005206:	e001      	b.n	800520c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005218:	7fbb      	ldrb	r3, [r7, #30]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3720      	adds	r7, #32
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	efff69f3 	.word	0xefff69f3
 8005228:	40013800 	.word	0x40013800
 800522c:	40021000 	.word	0x40021000
 8005230:	40004400 	.word	0x40004400
 8005234:	40004800 	.word	0x40004800
 8005238:	007a1200 	.word	0x007a1200

0800523c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00a      	beq.n	8005266 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00a      	beq.n	80052aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	f003 0308 	and.w	r3, r3, #8
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	f003 0310 	and.w	r3, r3, #16
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00a      	beq.n	80052ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	f003 0320 	and.w	r3, r3, #32
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01a      	beq.n	8005352 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800533a:	d10a      	bne.n	8005352 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	605a      	str	r2, [r3, #4]
  }
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b098      	sub	sp, #96	; 0x60
 8005384:	af02      	add	r7, sp, #8
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005390:	f7fc f8a8 	bl	80014e4 <HAL_GetTick>
 8005394:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0308 	and.w	r3, r3, #8
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d12e      	bne.n	8005402 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053ac:	2200      	movs	r2, #0
 80053ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f88c 	bl	80054d0 <UART_WaitOnFlagUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d021      	beq.n	8005402 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	e853 3f00 	ldrex	r3, [r3]
 80053ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d2:	653b      	str	r3, [r7, #80]	; 0x50
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	461a      	mov	r2, r3
 80053da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053dc:	647b      	str	r3, [r7, #68]	; 0x44
 80053de:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053e4:	e841 2300 	strex	r3, r2, [r1]
 80053e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1e6      	bne.n	80053be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2220      	movs	r2, #32
 80053f4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e062      	b.n	80054c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b04      	cmp	r3, #4
 800540e:	d149      	bne.n	80054a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005410:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005418:	2200      	movs	r2, #0
 800541a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f856 	bl	80054d0 <UART_WaitOnFlagUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d03c      	beq.n	80054a4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	e853 3f00 	ldrex	r3, [r3]
 8005436:	623b      	str	r3, [r7, #32]
   return(result);
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800543e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005448:	633b      	str	r3, [r7, #48]	; 0x30
 800544a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800544e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005450:	e841 2300 	strex	r3, r2, [r1]
 8005454:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e6      	bne.n	800542a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3308      	adds	r3, #8
 8005462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	60fb      	str	r3, [r7, #12]
   return(result);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0301 	bic.w	r3, r3, #1
 8005472:	64bb      	str	r3, [r7, #72]	; 0x48
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3308      	adds	r3, #8
 800547a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800547c:	61fa      	str	r2, [r7, #28]
 800547e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	69b9      	ldr	r1, [r7, #24]
 8005482:	69fa      	ldr	r2, [r7, #28]
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	617b      	str	r3, [r7, #20]
   return(result);
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e5      	bne.n	800545c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e011      	b.n	80054c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2220      	movs	r2, #32
 80054a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3758      	adds	r7, #88	; 0x58
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	603b      	str	r3, [r7, #0]
 80054dc:	4613      	mov	r3, r2
 80054de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054e0:	e049      	b.n	8005576 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d045      	beq.n	8005576 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ea:	f7fb fffb 	bl	80014e4 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d302      	bcc.n	8005500 <UART_WaitOnFlagUntilTimeout+0x30>
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e048      	b.n	8005596 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0304 	and.w	r3, r3, #4
 800550e:	2b00      	cmp	r3, #0
 8005510:	d031      	beq.n	8005576 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	f003 0308 	and.w	r3, r3, #8
 800551c:	2b08      	cmp	r3, #8
 800551e:	d110      	bne.n	8005542 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2208      	movs	r2, #8
 8005526:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 f838 	bl	800559e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2208      	movs	r2, #8
 8005532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e029      	b.n	8005596 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800554c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005550:	d111      	bne.n	8005576 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800555a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f81e 	bl	800559e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2220      	movs	r2, #32
 8005566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e00f      	b.n	8005596 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69da      	ldr	r2, [r3, #28]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4013      	ands	r3, r2
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	429a      	cmp	r2, r3
 8005584:	bf0c      	ite	eq
 8005586:	2301      	moveq	r3, #1
 8005588:	2300      	movne	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	461a      	mov	r2, r3
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	429a      	cmp	r2, r3
 8005592:	d0a6      	beq.n	80054e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800559e:	b480      	push	{r7}
 80055a0:	b095      	sub	sp, #84	; 0x54
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ae:	e853 3f00 	ldrex	r3, [r3]
 80055b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	461a      	mov	r2, r3
 80055c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c4:	643b      	str	r3, [r7, #64]	; 0x40
 80055c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055cc:	e841 2300 	strex	r3, r2, [r1]
 80055d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e6      	bne.n	80055a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3308      	adds	r3, #8
 80055de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	e853 3f00 	ldrex	r3, [r3]
 80055e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	f023 0301 	bic.w	r3, r3, #1
 80055ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	3308      	adds	r3, #8
 80055f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005600:	e841 2300 	strex	r3, r2, [r1]
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e5      	bne.n	80055d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005610:	2b01      	cmp	r3, #1
 8005612:	d118      	bne.n	8005646 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	60bb      	str	r3, [r7, #8]
   return(result);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f023 0310 	bic.w	r3, r3, #16
 8005628:	647b      	str	r3, [r7, #68]	; 0x44
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005632:	61bb      	str	r3, [r7, #24]
 8005634:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	6979      	ldr	r1, [r7, #20]
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	613b      	str	r3, [r7, #16]
   return(result);
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e6      	bne.n	8005614 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2220      	movs	r2, #32
 800564a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	669a      	str	r2, [r3, #104]	; 0x68
}
 800565a:	bf00      	nop
 800565c:	3754      	adds	r7, #84	; 0x54
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
	...

08005668 <__errno>:
 8005668:	4b01      	ldr	r3, [pc, #4]	; (8005670 <__errno+0x8>)
 800566a:	6818      	ldr	r0, [r3, #0]
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	2000000c 	.word	0x2000000c

08005674 <__libc_init_array>:
 8005674:	b570      	push	{r4, r5, r6, lr}
 8005676:	4d0d      	ldr	r5, [pc, #52]	; (80056ac <__libc_init_array+0x38>)
 8005678:	4c0d      	ldr	r4, [pc, #52]	; (80056b0 <__libc_init_array+0x3c>)
 800567a:	1b64      	subs	r4, r4, r5
 800567c:	10a4      	asrs	r4, r4, #2
 800567e:	2600      	movs	r6, #0
 8005680:	42a6      	cmp	r6, r4
 8005682:	d109      	bne.n	8005698 <__libc_init_array+0x24>
 8005684:	4d0b      	ldr	r5, [pc, #44]	; (80056b4 <__libc_init_array+0x40>)
 8005686:	4c0c      	ldr	r4, [pc, #48]	; (80056b8 <__libc_init_array+0x44>)
 8005688:	f000 fc8e 	bl	8005fa8 <_init>
 800568c:	1b64      	subs	r4, r4, r5
 800568e:	10a4      	asrs	r4, r4, #2
 8005690:	2600      	movs	r6, #0
 8005692:	42a6      	cmp	r6, r4
 8005694:	d105      	bne.n	80056a2 <__libc_init_array+0x2e>
 8005696:	bd70      	pop	{r4, r5, r6, pc}
 8005698:	f855 3b04 	ldr.w	r3, [r5], #4
 800569c:	4798      	blx	r3
 800569e:	3601      	adds	r6, #1
 80056a0:	e7ee      	b.n	8005680 <__libc_init_array+0xc>
 80056a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a6:	4798      	blx	r3
 80056a8:	3601      	adds	r6, #1
 80056aa:	e7f2      	b.n	8005692 <__libc_init_array+0x1e>
 80056ac:	08006030 	.word	0x08006030
 80056b0:	08006030 	.word	0x08006030
 80056b4:	08006030 	.word	0x08006030
 80056b8:	08006034 	.word	0x08006034

080056bc <memset>:
 80056bc:	4402      	add	r2, r0
 80056be:	4603      	mov	r3, r0
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d100      	bne.n	80056c6 <memset+0xa>
 80056c4:	4770      	bx	lr
 80056c6:	f803 1b01 	strb.w	r1, [r3], #1
 80056ca:	e7f9      	b.n	80056c0 <memset+0x4>

080056cc <siprintf>:
 80056cc:	b40e      	push	{r1, r2, r3}
 80056ce:	b500      	push	{lr}
 80056d0:	b09c      	sub	sp, #112	; 0x70
 80056d2:	ab1d      	add	r3, sp, #116	; 0x74
 80056d4:	9002      	str	r0, [sp, #8]
 80056d6:	9006      	str	r0, [sp, #24]
 80056d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056dc:	4809      	ldr	r0, [pc, #36]	; (8005704 <siprintf+0x38>)
 80056de:	9107      	str	r1, [sp, #28]
 80056e0:	9104      	str	r1, [sp, #16]
 80056e2:	4909      	ldr	r1, [pc, #36]	; (8005708 <siprintf+0x3c>)
 80056e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80056e8:	9105      	str	r1, [sp, #20]
 80056ea:	6800      	ldr	r0, [r0, #0]
 80056ec:	9301      	str	r3, [sp, #4]
 80056ee:	a902      	add	r1, sp, #8
 80056f0:	f000 f868 	bl	80057c4 <_svfiprintf_r>
 80056f4:	9b02      	ldr	r3, [sp, #8]
 80056f6:	2200      	movs	r2, #0
 80056f8:	701a      	strb	r2, [r3, #0]
 80056fa:	b01c      	add	sp, #112	; 0x70
 80056fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005700:	b003      	add	sp, #12
 8005702:	4770      	bx	lr
 8005704:	2000000c 	.word	0x2000000c
 8005708:	ffff0208 	.word	0xffff0208

0800570c <__ssputs_r>:
 800570c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005710:	688e      	ldr	r6, [r1, #8]
 8005712:	429e      	cmp	r6, r3
 8005714:	4682      	mov	sl, r0
 8005716:	460c      	mov	r4, r1
 8005718:	4690      	mov	r8, r2
 800571a:	461f      	mov	r7, r3
 800571c:	d838      	bhi.n	8005790 <__ssputs_r+0x84>
 800571e:	898a      	ldrh	r2, [r1, #12]
 8005720:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005724:	d032      	beq.n	800578c <__ssputs_r+0x80>
 8005726:	6825      	ldr	r5, [r4, #0]
 8005728:	6909      	ldr	r1, [r1, #16]
 800572a:	eba5 0901 	sub.w	r9, r5, r1
 800572e:	6965      	ldr	r5, [r4, #20]
 8005730:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005734:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005738:	3301      	adds	r3, #1
 800573a:	444b      	add	r3, r9
 800573c:	106d      	asrs	r5, r5, #1
 800573e:	429d      	cmp	r5, r3
 8005740:	bf38      	it	cc
 8005742:	461d      	movcc	r5, r3
 8005744:	0553      	lsls	r3, r2, #21
 8005746:	d531      	bpl.n	80057ac <__ssputs_r+0xa0>
 8005748:	4629      	mov	r1, r5
 800574a:	f000 fb63 	bl	8005e14 <_malloc_r>
 800574e:	4606      	mov	r6, r0
 8005750:	b950      	cbnz	r0, 8005768 <__ssputs_r+0x5c>
 8005752:	230c      	movs	r3, #12
 8005754:	f8ca 3000 	str.w	r3, [sl]
 8005758:	89a3      	ldrh	r3, [r4, #12]
 800575a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800575e:	81a3      	strh	r3, [r4, #12]
 8005760:	f04f 30ff 	mov.w	r0, #4294967295
 8005764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005768:	6921      	ldr	r1, [r4, #16]
 800576a:	464a      	mov	r2, r9
 800576c:	f000 fabe 	bl	8005cec <memcpy>
 8005770:	89a3      	ldrh	r3, [r4, #12]
 8005772:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800577a:	81a3      	strh	r3, [r4, #12]
 800577c:	6126      	str	r6, [r4, #16]
 800577e:	6165      	str	r5, [r4, #20]
 8005780:	444e      	add	r6, r9
 8005782:	eba5 0509 	sub.w	r5, r5, r9
 8005786:	6026      	str	r6, [r4, #0]
 8005788:	60a5      	str	r5, [r4, #8]
 800578a:	463e      	mov	r6, r7
 800578c:	42be      	cmp	r6, r7
 800578e:	d900      	bls.n	8005792 <__ssputs_r+0x86>
 8005790:	463e      	mov	r6, r7
 8005792:	6820      	ldr	r0, [r4, #0]
 8005794:	4632      	mov	r2, r6
 8005796:	4641      	mov	r1, r8
 8005798:	f000 fab6 	bl	8005d08 <memmove>
 800579c:	68a3      	ldr	r3, [r4, #8]
 800579e:	1b9b      	subs	r3, r3, r6
 80057a0:	60a3      	str	r3, [r4, #8]
 80057a2:	6823      	ldr	r3, [r4, #0]
 80057a4:	4433      	add	r3, r6
 80057a6:	6023      	str	r3, [r4, #0]
 80057a8:	2000      	movs	r0, #0
 80057aa:	e7db      	b.n	8005764 <__ssputs_r+0x58>
 80057ac:	462a      	mov	r2, r5
 80057ae:	f000 fba5 	bl	8005efc <_realloc_r>
 80057b2:	4606      	mov	r6, r0
 80057b4:	2800      	cmp	r0, #0
 80057b6:	d1e1      	bne.n	800577c <__ssputs_r+0x70>
 80057b8:	6921      	ldr	r1, [r4, #16]
 80057ba:	4650      	mov	r0, sl
 80057bc:	f000 fabe 	bl	8005d3c <_free_r>
 80057c0:	e7c7      	b.n	8005752 <__ssputs_r+0x46>
	...

080057c4 <_svfiprintf_r>:
 80057c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c8:	4698      	mov	r8, r3
 80057ca:	898b      	ldrh	r3, [r1, #12]
 80057cc:	061b      	lsls	r3, r3, #24
 80057ce:	b09d      	sub	sp, #116	; 0x74
 80057d0:	4607      	mov	r7, r0
 80057d2:	460d      	mov	r5, r1
 80057d4:	4614      	mov	r4, r2
 80057d6:	d50e      	bpl.n	80057f6 <_svfiprintf_r+0x32>
 80057d8:	690b      	ldr	r3, [r1, #16]
 80057da:	b963      	cbnz	r3, 80057f6 <_svfiprintf_r+0x32>
 80057dc:	2140      	movs	r1, #64	; 0x40
 80057de:	f000 fb19 	bl	8005e14 <_malloc_r>
 80057e2:	6028      	str	r0, [r5, #0]
 80057e4:	6128      	str	r0, [r5, #16]
 80057e6:	b920      	cbnz	r0, 80057f2 <_svfiprintf_r+0x2e>
 80057e8:	230c      	movs	r3, #12
 80057ea:	603b      	str	r3, [r7, #0]
 80057ec:	f04f 30ff 	mov.w	r0, #4294967295
 80057f0:	e0d1      	b.n	8005996 <_svfiprintf_r+0x1d2>
 80057f2:	2340      	movs	r3, #64	; 0x40
 80057f4:	616b      	str	r3, [r5, #20]
 80057f6:	2300      	movs	r3, #0
 80057f8:	9309      	str	r3, [sp, #36]	; 0x24
 80057fa:	2320      	movs	r3, #32
 80057fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005800:	f8cd 800c 	str.w	r8, [sp, #12]
 8005804:	2330      	movs	r3, #48	; 0x30
 8005806:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80059b0 <_svfiprintf_r+0x1ec>
 800580a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800580e:	f04f 0901 	mov.w	r9, #1
 8005812:	4623      	mov	r3, r4
 8005814:	469a      	mov	sl, r3
 8005816:	f813 2b01 	ldrb.w	r2, [r3], #1
 800581a:	b10a      	cbz	r2, 8005820 <_svfiprintf_r+0x5c>
 800581c:	2a25      	cmp	r2, #37	; 0x25
 800581e:	d1f9      	bne.n	8005814 <_svfiprintf_r+0x50>
 8005820:	ebba 0b04 	subs.w	fp, sl, r4
 8005824:	d00b      	beq.n	800583e <_svfiprintf_r+0x7a>
 8005826:	465b      	mov	r3, fp
 8005828:	4622      	mov	r2, r4
 800582a:	4629      	mov	r1, r5
 800582c:	4638      	mov	r0, r7
 800582e:	f7ff ff6d 	bl	800570c <__ssputs_r>
 8005832:	3001      	adds	r0, #1
 8005834:	f000 80aa 	beq.w	800598c <_svfiprintf_r+0x1c8>
 8005838:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800583a:	445a      	add	r2, fp
 800583c:	9209      	str	r2, [sp, #36]	; 0x24
 800583e:	f89a 3000 	ldrb.w	r3, [sl]
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 80a2 	beq.w	800598c <_svfiprintf_r+0x1c8>
 8005848:	2300      	movs	r3, #0
 800584a:	f04f 32ff 	mov.w	r2, #4294967295
 800584e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005852:	f10a 0a01 	add.w	sl, sl, #1
 8005856:	9304      	str	r3, [sp, #16]
 8005858:	9307      	str	r3, [sp, #28]
 800585a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800585e:	931a      	str	r3, [sp, #104]	; 0x68
 8005860:	4654      	mov	r4, sl
 8005862:	2205      	movs	r2, #5
 8005864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005868:	4851      	ldr	r0, [pc, #324]	; (80059b0 <_svfiprintf_r+0x1ec>)
 800586a:	f7fa fcb9 	bl	80001e0 <memchr>
 800586e:	9a04      	ldr	r2, [sp, #16]
 8005870:	b9d8      	cbnz	r0, 80058aa <_svfiprintf_r+0xe6>
 8005872:	06d0      	lsls	r0, r2, #27
 8005874:	bf44      	itt	mi
 8005876:	2320      	movmi	r3, #32
 8005878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800587c:	0711      	lsls	r1, r2, #28
 800587e:	bf44      	itt	mi
 8005880:	232b      	movmi	r3, #43	; 0x2b
 8005882:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005886:	f89a 3000 	ldrb.w	r3, [sl]
 800588a:	2b2a      	cmp	r3, #42	; 0x2a
 800588c:	d015      	beq.n	80058ba <_svfiprintf_r+0xf6>
 800588e:	9a07      	ldr	r2, [sp, #28]
 8005890:	4654      	mov	r4, sl
 8005892:	2000      	movs	r0, #0
 8005894:	f04f 0c0a 	mov.w	ip, #10
 8005898:	4621      	mov	r1, r4
 800589a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800589e:	3b30      	subs	r3, #48	; 0x30
 80058a0:	2b09      	cmp	r3, #9
 80058a2:	d94e      	bls.n	8005942 <_svfiprintf_r+0x17e>
 80058a4:	b1b0      	cbz	r0, 80058d4 <_svfiprintf_r+0x110>
 80058a6:	9207      	str	r2, [sp, #28]
 80058a8:	e014      	b.n	80058d4 <_svfiprintf_r+0x110>
 80058aa:	eba0 0308 	sub.w	r3, r0, r8
 80058ae:	fa09 f303 	lsl.w	r3, r9, r3
 80058b2:	4313      	orrs	r3, r2
 80058b4:	9304      	str	r3, [sp, #16]
 80058b6:	46a2      	mov	sl, r4
 80058b8:	e7d2      	b.n	8005860 <_svfiprintf_r+0x9c>
 80058ba:	9b03      	ldr	r3, [sp, #12]
 80058bc:	1d19      	adds	r1, r3, #4
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	9103      	str	r1, [sp, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	bfbb      	ittet	lt
 80058c6:	425b      	neglt	r3, r3
 80058c8:	f042 0202 	orrlt.w	r2, r2, #2
 80058cc:	9307      	strge	r3, [sp, #28]
 80058ce:	9307      	strlt	r3, [sp, #28]
 80058d0:	bfb8      	it	lt
 80058d2:	9204      	strlt	r2, [sp, #16]
 80058d4:	7823      	ldrb	r3, [r4, #0]
 80058d6:	2b2e      	cmp	r3, #46	; 0x2e
 80058d8:	d10c      	bne.n	80058f4 <_svfiprintf_r+0x130>
 80058da:	7863      	ldrb	r3, [r4, #1]
 80058dc:	2b2a      	cmp	r3, #42	; 0x2a
 80058de:	d135      	bne.n	800594c <_svfiprintf_r+0x188>
 80058e0:	9b03      	ldr	r3, [sp, #12]
 80058e2:	1d1a      	adds	r2, r3, #4
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	9203      	str	r2, [sp, #12]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	bfb8      	it	lt
 80058ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80058f0:	3402      	adds	r4, #2
 80058f2:	9305      	str	r3, [sp, #20]
 80058f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80059c0 <_svfiprintf_r+0x1fc>
 80058f8:	7821      	ldrb	r1, [r4, #0]
 80058fa:	2203      	movs	r2, #3
 80058fc:	4650      	mov	r0, sl
 80058fe:	f7fa fc6f 	bl	80001e0 <memchr>
 8005902:	b140      	cbz	r0, 8005916 <_svfiprintf_r+0x152>
 8005904:	2340      	movs	r3, #64	; 0x40
 8005906:	eba0 000a 	sub.w	r0, r0, sl
 800590a:	fa03 f000 	lsl.w	r0, r3, r0
 800590e:	9b04      	ldr	r3, [sp, #16]
 8005910:	4303      	orrs	r3, r0
 8005912:	3401      	adds	r4, #1
 8005914:	9304      	str	r3, [sp, #16]
 8005916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800591a:	4826      	ldr	r0, [pc, #152]	; (80059b4 <_svfiprintf_r+0x1f0>)
 800591c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005920:	2206      	movs	r2, #6
 8005922:	f7fa fc5d 	bl	80001e0 <memchr>
 8005926:	2800      	cmp	r0, #0
 8005928:	d038      	beq.n	800599c <_svfiprintf_r+0x1d8>
 800592a:	4b23      	ldr	r3, [pc, #140]	; (80059b8 <_svfiprintf_r+0x1f4>)
 800592c:	bb1b      	cbnz	r3, 8005976 <_svfiprintf_r+0x1b2>
 800592e:	9b03      	ldr	r3, [sp, #12]
 8005930:	3307      	adds	r3, #7
 8005932:	f023 0307 	bic.w	r3, r3, #7
 8005936:	3308      	adds	r3, #8
 8005938:	9303      	str	r3, [sp, #12]
 800593a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800593c:	4433      	add	r3, r6
 800593e:	9309      	str	r3, [sp, #36]	; 0x24
 8005940:	e767      	b.n	8005812 <_svfiprintf_r+0x4e>
 8005942:	fb0c 3202 	mla	r2, ip, r2, r3
 8005946:	460c      	mov	r4, r1
 8005948:	2001      	movs	r0, #1
 800594a:	e7a5      	b.n	8005898 <_svfiprintf_r+0xd4>
 800594c:	2300      	movs	r3, #0
 800594e:	3401      	adds	r4, #1
 8005950:	9305      	str	r3, [sp, #20]
 8005952:	4619      	mov	r1, r3
 8005954:	f04f 0c0a 	mov.w	ip, #10
 8005958:	4620      	mov	r0, r4
 800595a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800595e:	3a30      	subs	r2, #48	; 0x30
 8005960:	2a09      	cmp	r2, #9
 8005962:	d903      	bls.n	800596c <_svfiprintf_r+0x1a8>
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0c5      	beq.n	80058f4 <_svfiprintf_r+0x130>
 8005968:	9105      	str	r1, [sp, #20]
 800596a:	e7c3      	b.n	80058f4 <_svfiprintf_r+0x130>
 800596c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005970:	4604      	mov	r4, r0
 8005972:	2301      	movs	r3, #1
 8005974:	e7f0      	b.n	8005958 <_svfiprintf_r+0x194>
 8005976:	ab03      	add	r3, sp, #12
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	462a      	mov	r2, r5
 800597c:	4b0f      	ldr	r3, [pc, #60]	; (80059bc <_svfiprintf_r+0x1f8>)
 800597e:	a904      	add	r1, sp, #16
 8005980:	4638      	mov	r0, r7
 8005982:	f3af 8000 	nop.w
 8005986:	1c42      	adds	r2, r0, #1
 8005988:	4606      	mov	r6, r0
 800598a:	d1d6      	bne.n	800593a <_svfiprintf_r+0x176>
 800598c:	89ab      	ldrh	r3, [r5, #12]
 800598e:	065b      	lsls	r3, r3, #25
 8005990:	f53f af2c 	bmi.w	80057ec <_svfiprintf_r+0x28>
 8005994:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005996:	b01d      	add	sp, #116	; 0x74
 8005998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800599c:	ab03      	add	r3, sp, #12
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	462a      	mov	r2, r5
 80059a2:	4b06      	ldr	r3, [pc, #24]	; (80059bc <_svfiprintf_r+0x1f8>)
 80059a4:	a904      	add	r1, sp, #16
 80059a6:	4638      	mov	r0, r7
 80059a8:	f000 f87a 	bl	8005aa0 <_printf_i>
 80059ac:	e7eb      	b.n	8005986 <_svfiprintf_r+0x1c2>
 80059ae:	bf00      	nop
 80059b0:	08005ffc 	.word	0x08005ffc
 80059b4:	08006006 	.word	0x08006006
 80059b8:	00000000 	.word	0x00000000
 80059bc:	0800570d 	.word	0x0800570d
 80059c0:	08006002 	.word	0x08006002

080059c4 <_printf_common>:
 80059c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c8:	4616      	mov	r6, r2
 80059ca:	4699      	mov	r9, r3
 80059cc:	688a      	ldr	r2, [r1, #8]
 80059ce:	690b      	ldr	r3, [r1, #16]
 80059d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059d4:	4293      	cmp	r3, r2
 80059d6:	bfb8      	it	lt
 80059d8:	4613      	movlt	r3, r2
 80059da:	6033      	str	r3, [r6, #0]
 80059dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059e0:	4607      	mov	r7, r0
 80059e2:	460c      	mov	r4, r1
 80059e4:	b10a      	cbz	r2, 80059ea <_printf_common+0x26>
 80059e6:	3301      	adds	r3, #1
 80059e8:	6033      	str	r3, [r6, #0]
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	0699      	lsls	r1, r3, #26
 80059ee:	bf42      	ittt	mi
 80059f0:	6833      	ldrmi	r3, [r6, #0]
 80059f2:	3302      	addmi	r3, #2
 80059f4:	6033      	strmi	r3, [r6, #0]
 80059f6:	6825      	ldr	r5, [r4, #0]
 80059f8:	f015 0506 	ands.w	r5, r5, #6
 80059fc:	d106      	bne.n	8005a0c <_printf_common+0x48>
 80059fe:	f104 0a19 	add.w	sl, r4, #25
 8005a02:	68e3      	ldr	r3, [r4, #12]
 8005a04:	6832      	ldr	r2, [r6, #0]
 8005a06:	1a9b      	subs	r3, r3, r2
 8005a08:	42ab      	cmp	r3, r5
 8005a0a:	dc26      	bgt.n	8005a5a <_printf_common+0x96>
 8005a0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a10:	1e13      	subs	r3, r2, #0
 8005a12:	6822      	ldr	r2, [r4, #0]
 8005a14:	bf18      	it	ne
 8005a16:	2301      	movne	r3, #1
 8005a18:	0692      	lsls	r2, r2, #26
 8005a1a:	d42b      	bmi.n	8005a74 <_printf_common+0xb0>
 8005a1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a20:	4649      	mov	r1, r9
 8005a22:	4638      	mov	r0, r7
 8005a24:	47c0      	blx	r8
 8005a26:	3001      	adds	r0, #1
 8005a28:	d01e      	beq.n	8005a68 <_printf_common+0xa4>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	68e5      	ldr	r5, [r4, #12]
 8005a2e:	6832      	ldr	r2, [r6, #0]
 8005a30:	f003 0306 	and.w	r3, r3, #6
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	bf08      	it	eq
 8005a38:	1aad      	subeq	r5, r5, r2
 8005a3a:	68a3      	ldr	r3, [r4, #8]
 8005a3c:	6922      	ldr	r2, [r4, #16]
 8005a3e:	bf0c      	ite	eq
 8005a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a44:	2500      	movne	r5, #0
 8005a46:	4293      	cmp	r3, r2
 8005a48:	bfc4      	itt	gt
 8005a4a:	1a9b      	subgt	r3, r3, r2
 8005a4c:	18ed      	addgt	r5, r5, r3
 8005a4e:	2600      	movs	r6, #0
 8005a50:	341a      	adds	r4, #26
 8005a52:	42b5      	cmp	r5, r6
 8005a54:	d11a      	bne.n	8005a8c <_printf_common+0xc8>
 8005a56:	2000      	movs	r0, #0
 8005a58:	e008      	b.n	8005a6c <_printf_common+0xa8>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	4652      	mov	r2, sl
 8005a5e:	4649      	mov	r1, r9
 8005a60:	4638      	mov	r0, r7
 8005a62:	47c0      	blx	r8
 8005a64:	3001      	adds	r0, #1
 8005a66:	d103      	bne.n	8005a70 <_printf_common+0xac>
 8005a68:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a70:	3501      	adds	r5, #1
 8005a72:	e7c6      	b.n	8005a02 <_printf_common+0x3e>
 8005a74:	18e1      	adds	r1, r4, r3
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	2030      	movs	r0, #48	; 0x30
 8005a7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a7e:	4422      	add	r2, r4
 8005a80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a88:	3302      	adds	r3, #2
 8005a8a:	e7c7      	b.n	8005a1c <_printf_common+0x58>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	4622      	mov	r2, r4
 8005a90:	4649      	mov	r1, r9
 8005a92:	4638      	mov	r0, r7
 8005a94:	47c0      	blx	r8
 8005a96:	3001      	adds	r0, #1
 8005a98:	d0e6      	beq.n	8005a68 <_printf_common+0xa4>
 8005a9a:	3601      	adds	r6, #1
 8005a9c:	e7d9      	b.n	8005a52 <_printf_common+0x8e>
	...

08005aa0 <_printf_i>:
 8005aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa4:	7e0f      	ldrb	r7, [r1, #24]
 8005aa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005aa8:	2f78      	cmp	r7, #120	; 0x78
 8005aaa:	4691      	mov	r9, r2
 8005aac:	4680      	mov	r8, r0
 8005aae:	460c      	mov	r4, r1
 8005ab0:	469a      	mov	sl, r3
 8005ab2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ab6:	d807      	bhi.n	8005ac8 <_printf_i+0x28>
 8005ab8:	2f62      	cmp	r7, #98	; 0x62
 8005aba:	d80a      	bhi.n	8005ad2 <_printf_i+0x32>
 8005abc:	2f00      	cmp	r7, #0
 8005abe:	f000 80d8 	beq.w	8005c72 <_printf_i+0x1d2>
 8005ac2:	2f58      	cmp	r7, #88	; 0x58
 8005ac4:	f000 80a3 	beq.w	8005c0e <_printf_i+0x16e>
 8005ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005acc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ad0:	e03a      	b.n	8005b48 <_printf_i+0xa8>
 8005ad2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ad6:	2b15      	cmp	r3, #21
 8005ad8:	d8f6      	bhi.n	8005ac8 <_printf_i+0x28>
 8005ada:	a101      	add	r1, pc, #4	; (adr r1, 8005ae0 <_printf_i+0x40>)
 8005adc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ae0:	08005b39 	.word	0x08005b39
 8005ae4:	08005b4d 	.word	0x08005b4d
 8005ae8:	08005ac9 	.word	0x08005ac9
 8005aec:	08005ac9 	.word	0x08005ac9
 8005af0:	08005ac9 	.word	0x08005ac9
 8005af4:	08005ac9 	.word	0x08005ac9
 8005af8:	08005b4d 	.word	0x08005b4d
 8005afc:	08005ac9 	.word	0x08005ac9
 8005b00:	08005ac9 	.word	0x08005ac9
 8005b04:	08005ac9 	.word	0x08005ac9
 8005b08:	08005ac9 	.word	0x08005ac9
 8005b0c:	08005c59 	.word	0x08005c59
 8005b10:	08005b7d 	.word	0x08005b7d
 8005b14:	08005c3b 	.word	0x08005c3b
 8005b18:	08005ac9 	.word	0x08005ac9
 8005b1c:	08005ac9 	.word	0x08005ac9
 8005b20:	08005c7b 	.word	0x08005c7b
 8005b24:	08005ac9 	.word	0x08005ac9
 8005b28:	08005b7d 	.word	0x08005b7d
 8005b2c:	08005ac9 	.word	0x08005ac9
 8005b30:	08005ac9 	.word	0x08005ac9
 8005b34:	08005c43 	.word	0x08005c43
 8005b38:	682b      	ldr	r3, [r5, #0]
 8005b3a:	1d1a      	adds	r2, r3, #4
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	602a      	str	r2, [r5, #0]
 8005b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e0a3      	b.n	8005c94 <_printf_i+0x1f4>
 8005b4c:	6820      	ldr	r0, [r4, #0]
 8005b4e:	6829      	ldr	r1, [r5, #0]
 8005b50:	0606      	lsls	r6, r0, #24
 8005b52:	f101 0304 	add.w	r3, r1, #4
 8005b56:	d50a      	bpl.n	8005b6e <_printf_i+0xce>
 8005b58:	680e      	ldr	r6, [r1, #0]
 8005b5a:	602b      	str	r3, [r5, #0]
 8005b5c:	2e00      	cmp	r6, #0
 8005b5e:	da03      	bge.n	8005b68 <_printf_i+0xc8>
 8005b60:	232d      	movs	r3, #45	; 0x2d
 8005b62:	4276      	negs	r6, r6
 8005b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b68:	485e      	ldr	r0, [pc, #376]	; (8005ce4 <_printf_i+0x244>)
 8005b6a:	230a      	movs	r3, #10
 8005b6c:	e019      	b.n	8005ba2 <_printf_i+0x102>
 8005b6e:	680e      	ldr	r6, [r1, #0]
 8005b70:	602b      	str	r3, [r5, #0]
 8005b72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b76:	bf18      	it	ne
 8005b78:	b236      	sxthne	r6, r6
 8005b7a:	e7ef      	b.n	8005b5c <_printf_i+0xbc>
 8005b7c:	682b      	ldr	r3, [r5, #0]
 8005b7e:	6820      	ldr	r0, [r4, #0]
 8005b80:	1d19      	adds	r1, r3, #4
 8005b82:	6029      	str	r1, [r5, #0]
 8005b84:	0601      	lsls	r1, r0, #24
 8005b86:	d501      	bpl.n	8005b8c <_printf_i+0xec>
 8005b88:	681e      	ldr	r6, [r3, #0]
 8005b8a:	e002      	b.n	8005b92 <_printf_i+0xf2>
 8005b8c:	0646      	lsls	r6, r0, #25
 8005b8e:	d5fb      	bpl.n	8005b88 <_printf_i+0xe8>
 8005b90:	881e      	ldrh	r6, [r3, #0]
 8005b92:	4854      	ldr	r0, [pc, #336]	; (8005ce4 <_printf_i+0x244>)
 8005b94:	2f6f      	cmp	r7, #111	; 0x6f
 8005b96:	bf0c      	ite	eq
 8005b98:	2308      	moveq	r3, #8
 8005b9a:	230a      	movne	r3, #10
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ba2:	6865      	ldr	r5, [r4, #4]
 8005ba4:	60a5      	str	r5, [r4, #8]
 8005ba6:	2d00      	cmp	r5, #0
 8005ba8:	bfa2      	ittt	ge
 8005baa:	6821      	ldrge	r1, [r4, #0]
 8005bac:	f021 0104 	bicge.w	r1, r1, #4
 8005bb0:	6021      	strge	r1, [r4, #0]
 8005bb2:	b90e      	cbnz	r6, 8005bb8 <_printf_i+0x118>
 8005bb4:	2d00      	cmp	r5, #0
 8005bb6:	d04d      	beq.n	8005c54 <_printf_i+0x1b4>
 8005bb8:	4615      	mov	r5, r2
 8005bba:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bbe:	fb03 6711 	mls	r7, r3, r1, r6
 8005bc2:	5dc7      	ldrb	r7, [r0, r7]
 8005bc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bc8:	4637      	mov	r7, r6
 8005bca:	42bb      	cmp	r3, r7
 8005bcc:	460e      	mov	r6, r1
 8005bce:	d9f4      	bls.n	8005bba <_printf_i+0x11a>
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d10b      	bne.n	8005bec <_printf_i+0x14c>
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	07de      	lsls	r6, r3, #31
 8005bd8:	d508      	bpl.n	8005bec <_printf_i+0x14c>
 8005bda:	6923      	ldr	r3, [r4, #16]
 8005bdc:	6861      	ldr	r1, [r4, #4]
 8005bde:	4299      	cmp	r1, r3
 8005be0:	bfde      	ittt	le
 8005be2:	2330      	movle	r3, #48	; 0x30
 8005be4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005be8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005bec:	1b52      	subs	r2, r2, r5
 8005bee:	6122      	str	r2, [r4, #16]
 8005bf0:	f8cd a000 	str.w	sl, [sp]
 8005bf4:	464b      	mov	r3, r9
 8005bf6:	aa03      	add	r2, sp, #12
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	4640      	mov	r0, r8
 8005bfc:	f7ff fee2 	bl	80059c4 <_printf_common>
 8005c00:	3001      	adds	r0, #1
 8005c02:	d14c      	bne.n	8005c9e <_printf_i+0x1fe>
 8005c04:	f04f 30ff 	mov.w	r0, #4294967295
 8005c08:	b004      	add	sp, #16
 8005c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c0e:	4835      	ldr	r0, [pc, #212]	; (8005ce4 <_printf_i+0x244>)
 8005c10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c14:	6829      	ldr	r1, [r5, #0]
 8005c16:	6823      	ldr	r3, [r4, #0]
 8005c18:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c1c:	6029      	str	r1, [r5, #0]
 8005c1e:	061d      	lsls	r5, r3, #24
 8005c20:	d514      	bpl.n	8005c4c <_printf_i+0x1ac>
 8005c22:	07df      	lsls	r7, r3, #31
 8005c24:	bf44      	itt	mi
 8005c26:	f043 0320 	orrmi.w	r3, r3, #32
 8005c2a:	6023      	strmi	r3, [r4, #0]
 8005c2c:	b91e      	cbnz	r6, 8005c36 <_printf_i+0x196>
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	f023 0320 	bic.w	r3, r3, #32
 8005c34:	6023      	str	r3, [r4, #0]
 8005c36:	2310      	movs	r3, #16
 8005c38:	e7b0      	b.n	8005b9c <_printf_i+0xfc>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	f043 0320 	orr.w	r3, r3, #32
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	2378      	movs	r3, #120	; 0x78
 8005c44:	4828      	ldr	r0, [pc, #160]	; (8005ce8 <_printf_i+0x248>)
 8005c46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c4a:	e7e3      	b.n	8005c14 <_printf_i+0x174>
 8005c4c:	0659      	lsls	r1, r3, #25
 8005c4e:	bf48      	it	mi
 8005c50:	b2b6      	uxthmi	r6, r6
 8005c52:	e7e6      	b.n	8005c22 <_printf_i+0x182>
 8005c54:	4615      	mov	r5, r2
 8005c56:	e7bb      	b.n	8005bd0 <_printf_i+0x130>
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	6826      	ldr	r6, [r4, #0]
 8005c5c:	6961      	ldr	r1, [r4, #20]
 8005c5e:	1d18      	adds	r0, r3, #4
 8005c60:	6028      	str	r0, [r5, #0]
 8005c62:	0635      	lsls	r5, r6, #24
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	d501      	bpl.n	8005c6c <_printf_i+0x1cc>
 8005c68:	6019      	str	r1, [r3, #0]
 8005c6a:	e002      	b.n	8005c72 <_printf_i+0x1d2>
 8005c6c:	0670      	lsls	r0, r6, #25
 8005c6e:	d5fb      	bpl.n	8005c68 <_printf_i+0x1c8>
 8005c70:	8019      	strh	r1, [r3, #0]
 8005c72:	2300      	movs	r3, #0
 8005c74:	6123      	str	r3, [r4, #16]
 8005c76:	4615      	mov	r5, r2
 8005c78:	e7ba      	b.n	8005bf0 <_printf_i+0x150>
 8005c7a:	682b      	ldr	r3, [r5, #0]
 8005c7c:	1d1a      	adds	r2, r3, #4
 8005c7e:	602a      	str	r2, [r5, #0]
 8005c80:	681d      	ldr	r5, [r3, #0]
 8005c82:	6862      	ldr	r2, [r4, #4]
 8005c84:	2100      	movs	r1, #0
 8005c86:	4628      	mov	r0, r5
 8005c88:	f7fa faaa 	bl	80001e0 <memchr>
 8005c8c:	b108      	cbz	r0, 8005c92 <_printf_i+0x1f2>
 8005c8e:	1b40      	subs	r0, r0, r5
 8005c90:	6060      	str	r0, [r4, #4]
 8005c92:	6863      	ldr	r3, [r4, #4]
 8005c94:	6123      	str	r3, [r4, #16]
 8005c96:	2300      	movs	r3, #0
 8005c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c9c:	e7a8      	b.n	8005bf0 <_printf_i+0x150>
 8005c9e:	6923      	ldr	r3, [r4, #16]
 8005ca0:	462a      	mov	r2, r5
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	4640      	mov	r0, r8
 8005ca6:	47d0      	blx	sl
 8005ca8:	3001      	adds	r0, #1
 8005caa:	d0ab      	beq.n	8005c04 <_printf_i+0x164>
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	079b      	lsls	r3, r3, #30
 8005cb0:	d413      	bmi.n	8005cda <_printf_i+0x23a>
 8005cb2:	68e0      	ldr	r0, [r4, #12]
 8005cb4:	9b03      	ldr	r3, [sp, #12]
 8005cb6:	4298      	cmp	r0, r3
 8005cb8:	bfb8      	it	lt
 8005cba:	4618      	movlt	r0, r3
 8005cbc:	e7a4      	b.n	8005c08 <_printf_i+0x168>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	4632      	mov	r2, r6
 8005cc2:	4649      	mov	r1, r9
 8005cc4:	4640      	mov	r0, r8
 8005cc6:	47d0      	blx	sl
 8005cc8:	3001      	adds	r0, #1
 8005cca:	d09b      	beq.n	8005c04 <_printf_i+0x164>
 8005ccc:	3501      	adds	r5, #1
 8005cce:	68e3      	ldr	r3, [r4, #12]
 8005cd0:	9903      	ldr	r1, [sp, #12]
 8005cd2:	1a5b      	subs	r3, r3, r1
 8005cd4:	42ab      	cmp	r3, r5
 8005cd6:	dcf2      	bgt.n	8005cbe <_printf_i+0x21e>
 8005cd8:	e7eb      	b.n	8005cb2 <_printf_i+0x212>
 8005cda:	2500      	movs	r5, #0
 8005cdc:	f104 0619 	add.w	r6, r4, #25
 8005ce0:	e7f5      	b.n	8005cce <_printf_i+0x22e>
 8005ce2:	bf00      	nop
 8005ce4:	0800600d 	.word	0x0800600d
 8005ce8:	0800601e 	.word	0x0800601e

08005cec <memcpy>:
 8005cec:	440a      	add	r2, r1
 8005cee:	4291      	cmp	r1, r2
 8005cf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cf4:	d100      	bne.n	8005cf8 <memcpy+0xc>
 8005cf6:	4770      	bx	lr
 8005cf8:	b510      	push	{r4, lr}
 8005cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d02:	4291      	cmp	r1, r2
 8005d04:	d1f9      	bne.n	8005cfa <memcpy+0xe>
 8005d06:	bd10      	pop	{r4, pc}

08005d08 <memmove>:
 8005d08:	4288      	cmp	r0, r1
 8005d0a:	b510      	push	{r4, lr}
 8005d0c:	eb01 0402 	add.w	r4, r1, r2
 8005d10:	d902      	bls.n	8005d18 <memmove+0x10>
 8005d12:	4284      	cmp	r4, r0
 8005d14:	4623      	mov	r3, r4
 8005d16:	d807      	bhi.n	8005d28 <memmove+0x20>
 8005d18:	1e43      	subs	r3, r0, #1
 8005d1a:	42a1      	cmp	r1, r4
 8005d1c:	d008      	beq.n	8005d30 <memmove+0x28>
 8005d1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d26:	e7f8      	b.n	8005d1a <memmove+0x12>
 8005d28:	4402      	add	r2, r0
 8005d2a:	4601      	mov	r1, r0
 8005d2c:	428a      	cmp	r2, r1
 8005d2e:	d100      	bne.n	8005d32 <memmove+0x2a>
 8005d30:	bd10      	pop	{r4, pc}
 8005d32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d3a:	e7f7      	b.n	8005d2c <memmove+0x24>

08005d3c <_free_r>:
 8005d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d3e:	2900      	cmp	r1, #0
 8005d40:	d044      	beq.n	8005dcc <_free_r+0x90>
 8005d42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d46:	9001      	str	r0, [sp, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f1a1 0404 	sub.w	r4, r1, #4
 8005d4e:	bfb8      	it	lt
 8005d50:	18e4      	addlt	r4, r4, r3
 8005d52:	f000 f913 	bl	8005f7c <__malloc_lock>
 8005d56:	4a1e      	ldr	r2, [pc, #120]	; (8005dd0 <_free_r+0x94>)
 8005d58:	9801      	ldr	r0, [sp, #4]
 8005d5a:	6813      	ldr	r3, [r2, #0]
 8005d5c:	b933      	cbnz	r3, 8005d6c <_free_r+0x30>
 8005d5e:	6063      	str	r3, [r4, #4]
 8005d60:	6014      	str	r4, [r2, #0]
 8005d62:	b003      	add	sp, #12
 8005d64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d68:	f000 b90e 	b.w	8005f88 <__malloc_unlock>
 8005d6c:	42a3      	cmp	r3, r4
 8005d6e:	d908      	bls.n	8005d82 <_free_r+0x46>
 8005d70:	6825      	ldr	r5, [r4, #0]
 8005d72:	1961      	adds	r1, r4, r5
 8005d74:	428b      	cmp	r3, r1
 8005d76:	bf01      	itttt	eq
 8005d78:	6819      	ldreq	r1, [r3, #0]
 8005d7a:	685b      	ldreq	r3, [r3, #4]
 8005d7c:	1949      	addeq	r1, r1, r5
 8005d7e:	6021      	streq	r1, [r4, #0]
 8005d80:	e7ed      	b.n	8005d5e <_free_r+0x22>
 8005d82:	461a      	mov	r2, r3
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	b10b      	cbz	r3, 8005d8c <_free_r+0x50>
 8005d88:	42a3      	cmp	r3, r4
 8005d8a:	d9fa      	bls.n	8005d82 <_free_r+0x46>
 8005d8c:	6811      	ldr	r1, [r2, #0]
 8005d8e:	1855      	adds	r5, r2, r1
 8005d90:	42a5      	cmp	r5, r4
 8005d92:	d10b      	bne.n	8005dac <_free_r+0x70>
 8005d94:	6824      	ldr	r4, [r4, #0]
 8005d96:	4421      	add	r1, r4
 8005d98:	1854      	adds	r4, r2, r1
 8005d9a:	42a3      	cmp	r3, r4
 8005d9c:	6011      	str	r1, [r2, #0]
 8005d9e:	d1e0      	bne.n	8005d62 <_free_r+0x26>
 8005da0:	681c      	ldr	r4, [r3, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	6053      	str	r3, [r2, #4]
 8005da6:	4421      	add	r1, r4
 8005da8:	6011      	str	r1, [r2, #0]
 8005daa:	e7da      	b.n	8005d62 <_free_r+0x26>
 8005dac:	d902      	bls.n	8005db4 <_free_r+0x78>
 8005dae:	230c      	movs	r3, #12
 8005db0:	6003      	str	r3, [r0, #0]
 8005db2:	e7d6      	b.n	8005d62 <_free_r+0x26>
 8005db4:	6825      	ldr	r5, [r4, #0]
 8005db6:	1961      	adds	r1, r4, r5
 8005db8:	428b      	cmp	r3, r1
 8005dba:	bf04      	itt	eq
 8005dbc:	6819      	ldreq	r1, [r3, #0]
 8005dbe:	685b      	ldreq	r3, [r3, #4]
 8005dc0:	6063      	str	r3, [r4, #4]
 8005dc2:	bf04      	itt	eq
 8005dc4:	1949      	addeq	r1, r1, r5
 8005dc6:	6021      	streq	r1, [r4, #0]
 8005dc8:	6054      	str	r4, [r2, #4]
 8005dca:	e7ca      	b.n	8005d62 <_free_r+0x26>
 8005dcc:	b003      	add	sp, #12
 8005dce:	bd30      	pop	{r4, r5, pc}
 8005dd0:	20000464 	.word	0x20000464

08005dd4 <sbrk_aligned>:
 8005dd4:	b570      	push	{r4, r5, r6, lr}
 8005dd6:	4e0e      	ldr	r6, [pc, #56]	; (8005e10 <sbrk_aligned+0x3c>)
 8005dd8:	460c      	mov	r4, r1
 8005dda:	6831      	ldr	r1, [r6, #0]
 8005ddc:	4605      	mov	r5, r0
 8005dde:	b911      	cbnz	r1, 8005de6 <sbrk_aligned+0x12>
 8005de0:	f000 f8bc 	bl	8005f5c <_sbrk_r>
 8005de4:	6030      	str	r0, [r6, #0]
 8005de6:	4621      	mov	r1, r4
 8005de8:	4628      	mov	r0, r5
 8005dea:	f000 f8b7 	bl	8005f5c <_sbrk_r>
 8005dee:	1c43      	adds	r3, r0, #1
 8005df0:	d00a      	beq.n	8005e08 <sbrk_aligned+0x34>
 8005df2:	1cc4      	adds	r4, r0, #3
 8005df4:	f024 0403 	bic.w	r4, r4, #3
 8005df8:	42a0      	cmp	r0, r4
 8005dfa:	d007      	beq.n	8005e0c <sbrk_aligned+0x38>
 8005dfc:	1a21      	subs	r1, r4, r0
 8005dfe:	4628      	mov	r0, r5
 8005e00:	f000 f8ac 	bl	8005f5c <_sbrk_r>
 8005e04:	3001      	adds	r0, #1
 8005e06:	d101      	bne.n	8005e0c <sbrk_aligned+0x38>
 8005e08:	f04f 34ff 	mov.w	r4, #4294967295
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	bd70      	pop	{r4, r5, r6, pc}
 8005e10:	20000468 	.word	0x20000468

08005e14 <_malloc_r>:
 8005e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e18:	1ccd      	adds	r5, r1, #3
 8005e1a:	f025 0503 	bic.w	r5, r5, #3
 8005e1e:	3508      	adds	r5, #8
 8005e20:	2d0c      	cmp	r5, #12
 8005e22:	bf38      	it	cc
 8005e24:	250c      	movcc	r5, #12
 8005e26:	2d00      	cmp	r5, #0
 8005e28:	4607      	mov	r7, r0
 8005e2a:	db01      	blt.n	8005e30 <_malloc_r+0x1c>
 8005e2c:	42a9      	cmp	r1, r5
 8005e2e:	d905      	bls.n	8005e3c <_malloc_r+0x28>
 8005e30:	230c      	movs	r3, #12
 8005e32:	603b      	str	r3, [r7, #0]
 8005e34:	2600      	movs	r6, #0
 8005e36:	4630      	mov	r0, r6
 8005e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e3c:	4e2e      	ldr	r6, [pc, #184]	; (8005ef8 <_malloc_r+0xe4>)
 8005e3e:	f000 f89d 	bl	8005f7c <__malloc_lock>
 8005e42:	6833      	ldr	r3, [r6, #0]
 8005e44:	461c      	mov	r4, r3
 8005e46:	bb34      	cbnz	r4, 8005e96 <_malloc_r+0x82>
 8005e48:	4629      	mov	r1, r5
 8005e4a:	4638      	mov	r0, r7
 8005e4c:	f7ff ffc2 	bl	8005dd4 <sbrk_aligned>
 8005e50:	1c43      	adds	r3, r0, #1
 8005e52:	4604      	mov	r4, r0
 8005e54:	d14d      	bne.n	8005ef2 <_malloc_r+0xde>
 8005e56:	6834      	ldr	r4, [r6, #0]
 8005e58:	4626      	mov	r6, r4
 8005e5a:	2e00      	cmp	r6, #0
 8005e5c:	d140      	bne.n	8005ee0 <_malloc_r+0xcc>
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	4631      	mov	r1, r6
 8005e62:	4638      	mov	r0, r7
 8005e64:	eb04 0803 	add.w	r8, r4, r3
 8005e68:	f000 f878 	bl	8005f5c <_sbrk_r>
 8005e6c:	4580      	cmp	r8, r0
 8005e6e:	d13a      	bne.n	8005ee6 <_malloc_r+0xd2>
 8005e70:	6821      	ldr	r1, [r4, #0]
 8005e72:	3503      	adds	r5, #3
 8005e74:	1a6d      	subs	r5, r5, r1
 8005e76:	f025 0503 	bic.w	r5, r5, #3
 8005e7a:	3508      	adds	r5, #8
 8005e7c:	2d0c      	cmp	r5, #12
 8005e7e:	bf38      	it	cc
 8005e80:	250c      	movcc	r5, #12
 8005e82:	4629      	mov	r1, r5
 8005e84:	4638      	mov	r0, r7
 8005e86:	f7ff ffa5 	bl	8005dd4 <sbrk_aligned>
 8005e8a:	3001      	adds	r0, #1
 8005e8c:	d02b      	beq.n	8005ee6 <_malloc_r+0xd2>
 8005e8e:	6823      	ldr	r3, [r4, #0]
 8005e90:	442b      	add	r3, r5
 8005e92:	6023      	str	r3, [r4, #0]
 8005e94:	e00e      	b.n	8005eb4 <_malloc_r+0xa0>
 8005e96:	6822      	ldr	r2, [r4, #0]
 8005e98:	1b52      	subs	r2, r2, r5
 8005e9a:	d41e      	bmi.n	8005eda <_malloc_r+0xc6>
 8005e9c:	2a0b      	cmp	r2, #11
 8005e9e:	d916      	bls.n	8005ece <_malloc_r+0xba>
 8005ea0:	1961      	adds	r1, r4, r5
 8005ea2:	42a3      	cmp	r3, r4
 8005ea4:	6025      	str	r5, [r4, #0]
 8005ea6:	bf18      	it	ne
 8005ea8:	6059      	strne	r1, [r3, #4]
 8005eaa:	6863      	ldr	r3, [r4, #4]
 8005eac:	bf08      	it	eq
 8005eae:	6031      	streq	r1, [r6, #0]
 8005eb0:	5162      	str	r2, [r4, r5]
 8005eb2:	604b      	str	r3, [r1, #4]
 8005eb4:	4638      	mov	r0, r7
 8005eb6:	f104 060b 	add.w	r6, r4, #11
 8005eba:	f000 f865 	bl	8005f88 <__malloc_unlock>
 8005ebe:	f026 0607 	bic.w	r6, r6, #7
 8005ec2:	1d23      	adds	r3, r4, #4
 8005ec4:	1af2      	subs	r2, r6, r3
 8005ec6:	d0b6      	beq.n	8005e36 <_malloc_r+0x22>
 8005ec8:	1b9b      	subs	r3, r3, r6
 8005eca:	50a3      	str	r3, [r4, r2]
 8005ecc:	e7b3      	b.n	8005e36 <_malloc_r+0x22>
 8005ece:	6862      	ldr	r2, [r4, #4]
 8005ed0:	42a3      	cmp	r3, r4
 8005ed2:	bf0c      	ite	eq
 8005ed4:	6032      	streq	r2, [r6, #0]
 8005ed6:	605a      	strne	r2, [r3, #4]
 8005ed8:	e7ec      	b.n	8005eb4 <_malloc_r+0xa0>
 8005eda:	4623      	mov	r3, r4
 8005edc:	6864      	ldr	r4, [r4, #4]
 8005ede:	e7b2      	b.n	8005e46 <_malloc_r+0x32>
 8005ee0:	4634      	mov	r4, r6
 8005ee2:	6876      	ldr	r6, [r6, #4]
 8005ee4:	e7b9      	b.n	8005e5a <_malloc_r+0x46>
 8005ee6:	230c      	movs	r3, #12
 8005ee8:	603b      	str	r3, [r7, #0]
 8005eea:	4638      	mov	r0, r7
 8005eec:	f000 f84c 	bl	8005f88 <__malloc_unlock>
 8005ef0:	e7a1      	b.n	8005e36 <_malloc_r+0x22>
 8005ef2:	6025      	str	r5, [r4, #0]
 8005ef4:	e7de      	b.n	8005eb4 <_malloc_r+0xa0>
 8005ef6:	bf00      	nop
 8005ef8:	20000464 	.word	0x20000464

08005efc <_realloc_r>:
 8005efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f00:	4680      	mov	r8, r0
 8005f02:	4614      	mov	r4, r2
 8005f04:	460e      	mov	r6, r1
 8005f06:	b921      	cbnz	r1, 8005f12 <_realloc_r+0x16>
 8005f08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	f7ff bf81 	b.w	8005e14 <_malloc_r>
 8005f12:	b92a      	cbnz	r2, 8005f20 <_realloc_r+0x24>
 8005f14:	f7ff ff12 	bl	8005d3c <_free_r>
 8005f18:	4625      	mov	r5, r4
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f20:	f000 f838 	bl	8005f94 <_malloc_usable_size_r>
 8005f24:	4284      	cmp	r4, r0
 8005f26:	4607      	mov	r7, r0
 8005f28:	d802      	bhi.n	8005f30 <_realloc_r+0x34>
 8005f2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f2e:	d812      	bhi.n	8005f56 <_realloc_r+0x5a>
 8005f30:	4621      	mov	r1, r4
 8005f32:	4640      	mov	r0, r8
 8005f34:	f7ff ff6e 	bl	8005e14 <_malloc_r>
 8005f38:	4605      	mov	r5, r0
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	d0ed      	beq.n	8005f1a <_realloc_r+0x1e>
 8005f3e:	42bc      	cmp	r4, r7
 8005f40:	4622      	mov	r2, r4
 8005f42:	4631      	mov	r1, r6
 8005f44:	bf28      	it	cs
 8005f46:	463a      	movcs	r2, r7
 8005f48:	f7ff fed0 	bl	8005cec <memcpy>
 8005f4c:	4631      	mov	r1, r6
 8005f4e:	4640      	mov	r0, r8
 8005f50:	f7ff fef4 	bl	8005d3c <_free_r>
 8005f54:	e7e1      	b.n	8005f1a <_realloc_r+0x1e>
 8005f56:	4635      	mov	r5, r6
 8005f58:	e7df      	b.n	8005f1a <_realloc_r+0x1e>
	...

08005f5c <_sbrk_r>:
 8005f5c:	b538      	push	{r3, r4, r5, lr}
 8005f5e:	4d06      	ldr	r5, [pc, #24]	; (8005f78 <_sbrk_r+0x1c>)
 8005f60:	2300      	movs	r3, #0
 8005f62:	4604      	mov	r4, r0
 8005f64:	4608      	mov	r0, r1
 8005f66:	602b      	str	r3, [r5, #0]
 8005f68:	f7fb f9f0 	bl	800134c <_sbrk>
 8005f6c:	1c43      	adds	r3, r0, #1
 8005f6e:	d102      	bne.n	8005f76 <_sbrk_r+0x1a>
 8005f70:	682b      	ldr	r3, [r5, #0]
 8005f72:	b103      	cbz	r3, 8005f76 <_sbrk_r+0x1a>
 8005f74:	6023      	str	r3, [r4, #0]
 8005f76:	bd38      	pop	{r3, r4, r5, pc}
 8005f78:	2000046c 	.word	0x2000046c

08005f7c <__malloc_lock>:
 8005f7c:	4801      	ldr	r0, [pc, #4]	; (8005f84 <__malloc_lock+0x8>)
 8005f7e:	f000 b811 	b.w	8005fa4 <__retarget_lock_acquire_recursive>
 8005f82:	bf00      	nop
 8005f84:	20000470 	.word	0x20000470

08005f88 <__malloc_unlock>:
 8005f88:	4801      	ldr	r0, [pc, #4]	; (8005f90 <__malloc_unlock+0x8>)
 8005f8a:	f000 b80c 	b.w	8005fa6 <__retarget_lock_release_recursive>
 8005f8e:	bf00      	nop
 8005f90:	20000470 	.word	0x20000470

08005f94 <_malloc_usable_size_r>:
 8005f94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f98:	1f18      	subs	r0, r3, #4
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	bfbc      	itt	lt
 8005f9e:	580b      	ldrlt	r3, [r1, r0]
 8005fa0:	18c0      	addlt	r0, r0, r3
 8005fa2:	4770      	bx	lr

08005fa4 <__retarget_lock_acquire_recursive>:
 8005fa4:	4770      	bx	lr

08005fa6 <__retarget_lock_release_recursive>:
 8005fa6:	4770      	bx	lr

08005fa8 <_init>:
 8005fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005faa:	bf00      	nop
 8005fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fae:	bc08      	pop	{r3}
 8005fb0:	469e      	mov	lr, r3
 8005fb2:	4770      	bx	lr

08005fb4 <_fini>:
 8005fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb6:	bf00      	nop
 8005fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fba:	bc08      	pop	{r3}
 8005fbc:	469e      	mov	lr, r3
 8005fbe:	4770      	bx	lr
