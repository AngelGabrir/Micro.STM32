
Micro.Calculadora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08004788  08004788  00014788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800490c  0800490c  00020490  2**0
                  CONTENTS
  4 .ARM          00000000  0800490c  0800490c  00020490  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800490c  0800490c  00020490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800490c  0800490c  0001490c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004910  08004910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000490  20000000  08004914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000490  08004da4  00020490  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  08004da4  000205bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020490  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000914e  00000000  00000000  000204c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf9  00000000  00000000  0002960e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  0002b208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  0002ba20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aebe  00000000  00000000  0002c158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000beb6  00000000  00000000  00047016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099273  00000000  00000000  00052ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec13f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022f8  00000000  00000000  000ec190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000490 	.word	0x20000490
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004770 	.word	0x08004770

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000494 	.word	0x20000494
 80001cc:	08004770 	.word	0x08004770

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af02      	add	r7, sp, #8
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	f023 030f 	bic.w	r3, r3, #15
 8000290:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	011b      	lsls	r3, r3, #4
 8000296:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000298:	7bfb      	ldrb	r3, [r7, #15]
 800029a:	f043 030c 	orr.w	r3, r3, #12
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80002a2:	7bfb      	ldrb	r3, [r7, #15]
 80002a4:	f043 0308 	orr.w	r3, r3, #8
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80002ac:	7bbb      	ldrb	r3, [r7, #14]
 80002ae:	f043 030c 	orr.w	r3, r3, #12
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80002b6:	7bbb      	ldrb	r3, [r7, #14]
 80002b8:	f043 0308 	orr.w	r3, r3, #8
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002c0:	f107 0208 	add.w	r2, r7, #8
 80002c4:	2364      	movs	r3, #100	; 0x64
 80002c6:	9300      	str	r3, [sp, #0]
 80002c8:	2304      	movs	r3, #4
 80002ca:	214e      	movs	r1, #78	; 0x4e
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <lcd_send_cmd+0x5c>)
 80002ce:	f001 fe5d 	bl	8001f8c <HAL_I2C_Master_Transmit>
}
 80002d2:	bf00      	nop
 80002d4:	3710      	adds	r7, #16
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	200004b0 	.word	0x200004b0

080002e0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b086      	sub	sp, #24
 80002e4:	af02      	add	r7, sp, #8
 80002e6:	4603      	mov	r3, r0
 80002e8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	f023 030f 	bic.w	r3, r3, #15
 80002f0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	011b      	lsls	r3, r3, #4
 80002f6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80002f8:	7bfb      	ldrb	r3, [r7, #15]
 80002fa:	f043 030d 	orr.w	r3, r3, #13
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000302:	7bfb      	ldrb	r3, [r7, #15]
 8000304:	f043 0309 	orr.w	r3, r3, #9
 8000308:	b2db      	uxtb	r3, r3
 800030a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800030c:	7bbb      	ldrb	r3, [r7, #14]
 800030e:	f043 030d 	orr.w	r3, r3, #13
 8000312:	b2db      	uxtb	r3, r3
 8000314:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000316:	7bbb      	ldrb	r3, [r7, #14]
 8000318:	f043 0309 	orr.w	r3, r3, #9
 800031c:	b2db      	uxtb	r3, r3
 800031e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000320:	f107 0208 	add.w	r2, r7, #8
 8000324:	2364      	movs	r3, #100	; 0x64
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	2304      	movs	r3, #4
 800032a:	214e      	movs	r1, #78	; 0x4e
 800032c:	4803      	ldr	r0, [pc, #12]	; (800033c <lcd_send_data+0x5c>)
 800032e:	f001 fe2d 	bl	8001f8c <HAL_I2C_Master_Transmit>
}
 8000332:	bf00      	nop
 8000334:	3710      	adds	r7, #16
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	200004b0 	.word	0x200004b0

08000340 <lcd_clear>:
	lcd_put_cur(row,col);
	lcd_send_string(string);
}

void lcd_clear (void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000346:	2080      	movs	r0, #128	; 0x80
 8000348:	f7ff ff9a 	bl	8000280 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 800034c:	2300      	movs	r3, #0
 800034e:	607b      	str	r3, [r7, #4]
 8000350:	e005      	b.n	800035e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000352:	2020      	movs	r0, #32
 8000354:	f7ff ffc4 	bl	80002e0 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	3301      	adds	r3, #1
 800035c:	607b      	str	r3, [r7, #4]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	2b45      	cmp	r3, #69	; 0x45
 8000362:	ddf6      	ble.n	8000352 <lcd_clear+0x12>
	}
}
 8000364:	bf00      	nop
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}

0800036e <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800036e:	b580      	push	{r7, lr}
 8000370:	b082      	sub	sp, #8
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
 8000376:	6039      	str	r1, [r7, #0]
    switch (row)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d003      	beq.n	8000386 <lcd_put_cur+0x18>
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	2b01      	cmp	r3, #1
 8000382:	d005      	beq.n	8000390 <lcd_put_cur+0x22>
 8000384:	e009      	b.n	800039a <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800038c:	603b      	str	r3, [r7, #0]
            break;
 800038e:	e004      	b.n	800039a <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000396:	603b      	str	r3, [r7, #0]
            break;
 8000398:	bf00      	nop
    }

    lcd_send_cmd (col);
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	b2db      	uxtb	r3, r3
 800039e:	4618      	mov	r0, r3
 80003a0:	f7ff ff6e 	bl	8000280 <lcd_send_cmd>
}
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}

080003ac <lcd_init>:


void lcd_init (void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80003b0:	2032      	movs	r0, #50	; 0x32
 80003b2:	f001 faaf 	bl	8001914 <HAL_Delay>
	lcd_send_cmd (0x30);
 80003b6:	2030      	movs	r0, #48	; 0x30
 80003b8:	f7ff ff62 	bl	8000280 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80003bc:	2005      	movs	r0, #5
 80003be:	f001 faa9 	bl	8001914 <HAL_Delay>
	lcd_send_cmd (0x30);
 80003c2:	2030      	movs	r0, #48	; 0x30
 80003c4:	f7ff ff5c 	bl	8000280 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80003c8:	2001      	movs	r0, #1
 80003ca:	f001 faa3 	bl	8001914 <HAL_Delay>
	lcd_send_cmd (0x30);
 80003ce:	2030      	movs	r0, #48	; 0x30
 80003d0:	f7ff ff56 	bl	8000280 <lcd_send_cmd>
	HAL_Delay(10);
 80003d4:	200a      	movs	r0, #10
 80003d6:	f001 fa9d 	bl	8001914 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80003da:	2020      	movs	r0, #32
 80003dc:	f7ff ff50 	bl	8000280 <lcd_send_cmd>
	HAL_Delay(10);
 80003e0:	200a      	movs	r0, #10
 80003e2:	f001 fa97 	bl	8001914 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80003e6:	2028      	movs	r0, #40	; 0x28
 80003e8:	f7ff ff4a 	bl	8000280 <lcd_send_cmd>
	HAL_Delay(1);
 80003ec:	2001      	movs	r0, #1
 80003ee:	f001 fa91 	bl	8001914 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80003f2:	2008      	movs	r0, #8
 80003f4:	f7ff ff44 	bl	8000280 <lcd_send_cmd>
	HAL_Delay(1);
 80003f8:	2001      	movs	r0, #1
 80003fa:	f001 fa8b 	bl	8001914 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80003fe:	2001      	movs	r0, #1
 8000400:	f7ff ff3e 	bl	8000280 <lcd_send_cmd>
	HAL_Delay(1);
 8000404:	2001      	movs	r0, #1
 8000406:	f001 fa85 	bl	8001914 <HAL_Delay>
	HAL_Delay(1);
 800040a:	2001      	movs	r0, #1
 800040c:	f001 fa82 	bl	8001914 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000410:	2006      	movs	r0, #6
 8000412:	f7ff ff35 	bl	8000280 <lcd_send_cmd>
	HAL_Delay(1);
 8000416:	2001      	movs	r0, #1
 8000418:	f001 fa7c 	bl	8001914 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800041c:	200c      	movs	r0, #12
 800041e:	f7ff ff2f 	bl	8000280 <lcd_send_cmd>
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}

08000426 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000426:	b580      	push	{r7, lr}
 8000428:	b082      	sub	sp, #8
 800042a:	af00      	add	r7, sp, #0
 800042c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800042e:	e006      	b.n	800043e <lcd_send_string+0x18>
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	1c5a      	adds	r2, r3, #1
 8000434:	607a      	str	r2, [r7, #4]
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff ff51 	bl	80002e0 <lcd_send_data>
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d1f4      	bne.n	8000430 <lcd_send_string+0xa>
}
 8000446:	bf00      	nop
 8000448:	bf00      	nop
 800044a:	3708      	adds	r7, #8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}

08000450 <Keypad_Get_Char>:
                         {'4','5','6','B'},
                         {'7','8','9','C'},
                         {'*','0','#','D'}};

char Keypad_Get_Char(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
	val_key = 0;
 8000454:	4bd1      	ldr	r3, [pc, #836]	; (800079c <Keypad_Get_Char+0x34c>)
 8000456:	2200      	movs	r2, #0
 8000458:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 800045a:	2200      	movs	r2, #0
 800045c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000464:	f001 fcea 	bl	8001e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000468:	2201      	movs	r2, #1
 800046a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800046e:	48cc      	ldr	r0, [pc, #816]	; (80007a0 <Keypad_Get_Char+0x350>)
 8000470:	f001 fce4 	bl	8001e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000474:	2201      	movs	r2, #1
 8000476:	2110      	movs	r1, #16
 8000478:	48c9      	ldr	r0, [pc, #804]	; (80007a0 <Keypad_Get_Char+0x350>)
 800047a:	f001 fcdf 	bl	8001e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 800047e:	2201      	movs	r2, #1
 8000480:	2120      	movs	r1, #32
 8000482:	48c7      	ldr	r0, [pc, #796]	; (80007a0 <Keypad_Get_Char+0x350>)
 8000484:	f001 fcda 	bl	8001e3c <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 8000488:	2108      	movs	r1, #8
 800048a:	48c5      	ldr	r0, [pc, #788]	; (80007a0 <Keypad_Get_Char+0x350>)
 800048c:	f001 fcbe 	bl	8001e0c <HAL_GPIO_ReadPin>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d110      	bne.n	80004b8 <Keypad_Get_Char+0x68>
		HAL_Delay(4);
 8000496:	2004      	movs	r0, #4
 8000498:	f001 fa3c 	bl	8001914 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)));
 800049c:	bf00      	nop
 800049e:	2108      	movs	r1, #8
 80004a0:	48bf      	ldr	r0, [pc, #764]	; (80007a0 <Keypad_Get_Char+0x350>)
 80004a2:	f001 fcb3 	bl	8001e0c <HAL_GPIO_ReadPin>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d0f8      	beq.n	800049e <Keypad_Get_Char+0x4e>
		HAL_Delay(4);
 80004ac:	2004      	movs	r0, #4
 80004ae:	f001 fa31 	bl	8001914 <HAL_Delay>
		val_key = keys[0][0];
 80004b2:	2231      	movs	r2, #49	; 0x31
 80004b4:	4bb9      	ldr	r3, [pc, #740]	; (800079c <Keypad_Get_Char+0x34c>)
 80004b6:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 80004b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c0:	f001 fca4 	bl	8001e0c <HAL_GPIO_ReadPin>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d112      	bne.n	80004f0 <Keypad_Get_Char+0xa0>
		HAL_Delay(4);
 80004ca:	2004      	movs	r0, #4
 80004cc:	f001 fa22 	bl	8001914 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 80004d0:	bf00      	nop
 80004d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004da:	f001 fc97 	bl	8001e0c <HAL_GPIO_ReadPin>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d0f6      	beq.n	80004d2 <Keypad_Get_Char+0x82>
		HAL_Delay(4);
 80004e4:	2004      	movs	r0, #4
 80004e6:	f001 fa15 	bl	8001914 <HAL_Delay>
		val_key = keys[0][1];
 80004ea:	2232      	movs	r2, #50	; 0x32
 80004ec:	4bab      	ldr	r3, [pc, #684]	; (800079c <Keypad_Get_Char+0x34c>)
 80004ee:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 80004f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f8:	f001 fc88 	bl	8001e0c <HAL_GPIO_ReadPin>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d112      	bne.n	8000528 <Keypad_Get_Char+0xd8>
		HAL_Delay(4);
 8000502:	2004      	movs	r0, #4
 8000504:	f001 fa06 	bl	8001914 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8000508:	bf00      	nop
 800050a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800050e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000512:	f001 fc7b 	bl	8001e0c <HAL_GPIO_ReadPin>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d0f6      	beq.n	800050a <Keypad_Get_Char+0xba>
		HAL_Delay(4);
 800051c:	2004      	movs	r0, #4
 800051e:	f001 f9f9 	bl	8001914 <HAL_Delay>
		val_key = keys[0][2];
 8000522:	2233      	movs	r2, #51	; 0x33
 8000524:	4b9d      	ldr	r3, [pc, #628]	; (800079c <Keypad_Get_Char+0x34c>)
 8000526:	701a      	strb	r2, [r3, #0]
	}
	if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 8000528:	2180      	movs	r1, #128	; 0x80
 800052a:	489e      	ldr	r0, [pc, #632]	; (80007a4 <Keypad_Get_Char+0x354>)
 800052c:	f001 fc6e 	bl	8001e0c <HAL_GPIO_ReadPin>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d110      	bne.n	8000558 <Keypad_Get_Char+0x108>
		HAL_Delay(4);
 8000536:	2004      	movs	r0, #4
 8000538:	f001 f9ec 	bl	8001914 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 800053c:	bf00      	nop
 800053e:	2180      	movs	r1, #128	; 0x80
 8000540:	4898      	ldr	r0, [pc, #608]	; (80007a4 <Keypad_Get_Char+0x354>)
 8000542:	f001 fc63 	bl	8001e0c <HAL_GPIO_ReadPin>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d0f8      	beq.n	800053e <Keypad_Get_Char+0xee>
		HAL_Delay(4);
 800054c:	2004      	movs	r0, #4
 800054e:	f001 f9e1 	bl	8001914 <HAL_Delay>
		val_key = keys[0][3];
 8000552:	2241      	movs	r2, #65	; 0x41
 8000554:	4b91      	ldr	r3, [pc, #580]	; (800079c <Keypad_Get_Char+0x34c>)
 8000556:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000558:	2201      	movs	r2, #1
 800055a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800055e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000562:	f001 fc6b 	bl	8001e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800056c:	488c      	ldr	r0, [pc, #560]	; (80007a0 <Keypad_Get_Char+0x350>)
 800056e:	f001 fc65 	bl	8001e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8000572:	2201      	movs	r2, #1
 8000574:	2110      	movs	r1, #16
 8000576:	488a      	ldr	r0, [pc, #552]	; (80007a0 <Keypad_Get_Char+0x350>)
 8000578:	f001 fc60 	bl	8001e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	2120      	movs	r1, #32
 8000580:	4887      	ldr	r0, [pc, #540]	; (80007a0 <Keypad_Get_Char+0x350>)
 8000582:	f001 fc5b 	bl	8001e3c <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 8000586:	2108      	movs	r1, #8
 8000588:	4885      	ldr	r0, [pc, #532]	; (80007a0 <Keypad_Get_Char+0x350>)
 800058a:	f001 fc3f 	bl	8001e0c <HAL_GPIO_ReadPin>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d110      	bne.n	80005b6 <Keypad_Get_Char+0x166>
		HAL_Delay(4);
 8000594:	2004      	movs	r0, #4
 8000596:	f001 f9bd 	bl	8001914 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 800059a:	bf00      	nop
 800059c:	2108      	movs	r1, #8
 800059e:	4880      	ldr	r0, [pc, #512]	; (80007a0 <Keypad_Get_Char+0x350>)
 80005a0:	f001 fc34 	bl	8001e0c <HAL_GPIO_ReadPin>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0f8      	beq.n	800059c <Keypad_Get_Char+0x14c>
		HAL_Delay(4);
 80005aa:	2004      	movs	r0, #4
 80005ac:	f001 f9b2 	bl	8001914 <HAL_Delay>
		val_key = keys[1][0];
 80005b0:	2234      	movs	r2, #52	; 0x34
 80005b2:	4b7a      	ldr	r3, [pc, #488]	; (800079c <Keypad_Get_Char+0x34c>)
 80005b4:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 80005b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005be:	f001 fc25 	bl	8001e0c <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d112      	bne.n	80005ee <Keypad_Get_Char+0x19e>
		HAL_Delay(4);
 80005c8:	2004      	movs	r0, #4
 80005ca:	f001 f9a3 	bl	8001914 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 80005ce:	bf00      	nop
 80005d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d8:	f001 fc18 	bl	8001e0c <HAL_GPIO_ReadPin>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d0f6      	beq.n	80005d0 <Keypad_Get_Char+0x180>
		HAL_Delay(4);
 80005e2:	2004      	movs	r0, #4
 80005e4:	f001 f996 	bl	8001914 <HAL_Delay>
		val_key = keys[1][1];
 80005e8:	2235      	movs	r2, #53	; 0x35
 80005ea:	4b6c      	ldr	r3, [pc, #432]	; (800079c <Keypad_Get_Char+0x34c>)
 80005ec:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 80005ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f6:	f001 fc09 	bl	8001e0c <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d112      	bne.n	8000626 <Keypad_Get_Char+0x1d6>
		HAL_Delay(4);
 8000600:	2004      	movs	r0, #4
 8000602:	f001 f987 	bl	8001914 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8000606:	bf00      	nop
 8000608:	f44f 7100 	mov.w	r1, #512	; 0x200
 800060c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000610:	f001 fbfc 	bl	8001e0c <HAL_GPIO_ReadPin>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d0f6      	beq.n	8000608 <Keypad_Get_Char+0x1b8>
		HAL_Delay(4);
 800061a:	2004      	movs	r0, #4
 800061c:	f001 f97a 	bl	8001914 <HAL_Delay>
		val_key = keys[1][2];
 8000620:	2236      	movs	r2, #54	; 0x36
 8000622:	4b5e      	ldr	r3, [pc, #376]	; (800079c <Keypad_Get_Char+0x34c>)
 8000624:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 8000626:	2180      	movs	r1, #128	; 0x80
 8000628:	485e      	ldr	r0, [pc, #376]	; (80007a4 <Keypad_Get_Char+0x354>)
 800062a:	f001 fbef 	bl	8001e0c <HAL_GPIO_ReadPin>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d110      	bne.n	8000656 <Keypad_Get_Char+0x206>
		HAL_Delay(4);
 8000634:	2004      	movs	r0, #4
 8000636:	f001 f96d 	bl	8001914 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 800063a:	bf00      	nop
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	4859      	ldr	r0, [pc, #356]	; (80007a4 <Keypad_Get_Char+0x354>)
 8000640:	f001 fbe4 	bl	8001e0c <HAL_GPIO_ReadPin>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d0f8      	beq.n	800063c <Keypad_Get_Char+0x1ec>
		HAL_Delay(4);
 800064a:	2004      	movs	r0, #4
 800064c:	f001 f962 	bl	8001914 <HAL_Delay>
		val_key = keys[1][3];
 8000650:	2242      	movs	r2, #66	; 0x42
 8000652:	4b52      	ldr	r3, [pc, #328]	; (800079c <Keypad_Get_Char+0x34c>)
 8000654:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000656:	2201      	movs	r2, #1
 8000658:	f44f 7180 	mov.w	r1, #256	; 0x100
 800065c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000660:	f001 fbec 	bl	8001e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800066a:	484d      	ldr	r0, [pc, #308]	; (80007a0 <Keypad_Get_Char+0x350>)
 800066c:	f001 fbe6 	bl	8001e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	2110      	movs	r1, #16
 8000674:	484a      	ldr	r0, [pc, #296]	; (80007a0 <Keypad_Get_Char+0x350>)
 8000676:	f001 fbe1 	bl	8001e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 800067a:	2201      	movs	r2, #1
 800067c:	2120      	movs	r1, #32
 800067e:	4848      	ldr	r0, [pc, #288]	; (80007a0 <Keypad_Get_Char+0x350>)
 8000680:	f001 fbdc 	bl	8001e3c <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 8000684:	2108      	movs	r1, #8
 8000686:	4846      	ldr	r0, [pc, #280]	; (80007a0 <Keypad_Get_Char+0x350>)
 8000688:	f001 fbc0 	bl	8001e0c <HAL_GPIO_ReadPin>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d110      	bne.n	80006b4 <Keypad_Get_Char+0x264>
		HAL_Delay(4);
 8000692:	2004      	movs	r0, #4
 8000694:	f001 f93e 	bl	8001914 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 8000698:	bf00      	nop
 800069a:	2108      	movs	r1, #8
 800069c:	4840      	ldr	r0, [pc, #256]	; (80007a0 <Keypad_Get_Char+0x350>)
 800069e:	f001 fbb5 	bl	8001e0c <HAL_GPIO_ReadPin>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d0f8      	beq.n	800069a <Keypad_Get_Char+0x24a>
		HAL_Delay(4);
 80006a8:	2004      	movs	r0, #4
 80006aa:	f001 f933 	bl	8001914 <HAL_Delay>
		val_key = keys[2][0];
 80006ae:	2237      	movs	r2, #55	; 0x37
 80006b0:	4b3a      	ldr	r3, [pc, #232]	; (800079c <Keypad_Get_Char+0x34c>)
 80006b2:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 80006b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006bc:	f001 fba6 	bl	8001e0c <HAL_GPIO_ReadPin>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d112      	bne.n	80006ec <Keypad_Get_Char+0x29c>
		HAL_Delay(4);
 80006c6:	2004      	movs	r0, #4
 80006c8:	f001 f924 	bl	8001914 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 80006cc:	bf00      	nop
 80006ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d6:	f001 fb99 	bl	8001e0c <HAL_GPIO_ReadPin>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d0f6      	beq.n	80006ce <Keypad_Get_Char+0x27e>
		HAL_Delay(4);
 80006e0:	2004      	movs	r0, #4
 80006e2:	f001 f917 	bl	8001914 <HAL_Delay>
		val_key = keys[2][1];
 80006e6:	2238      	movs	r2, #56	; 0x38
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <Keypad_Get_Char+0x34c>)
 80006ea:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 80006ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f4:	f001 fb8a 	bl	8001e0c <HAL_GPIO_ReadPin>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d112      	bne.n	8000724 <Keypad_Get_Char+0x2d4>
		HAL_Delay(4);
 80006fe:	2004      	movs	r0, #4
 8000700:	f001 f908 	bl	8001914 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8000704:	bf00      	nop
 8000706:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070e:	f001 fb7d 	bl	8001e0c <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d0f6      	beq.n	8000706 <Keypad_Get_Char+0x2b6>
		HAL_Delay(4);
 8000718:	2004      	movs	r0, #4
 800071a:	f001 f8fb 	bl	8001914 <HAL_Delay>
		val_key = keys[2][2];
 800071e:	2239      	movs	r2, #57	; 0x39
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <Keypad_Get_Char+0x34c>)
 8000722:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin))){
 8000724:	2180      	movs	r1, #128	; 0x80
 8000726:	481f      	ldr	r0, [pc, #124]	; (80007a4 <Keypad_Get_Char+0x354>)
 8000728:	f001 fb70 	bl	8001e0c <HAL_GPIO_ReadPin>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d110      	bne.n	8000754 <Keypad_Get_Char+0x304>
		HAL_Delay(4);
 8000732:	2004      	movs	r0, #4
 8000734:	f001 f8ee 	bl	8001914 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 8000738:	bf00      	nop
 800073a:	2180      	movs	r1, #128	; 0x80
 800073c:	4819      	ldr	r0, [pc, #100]	; (80007a4 <Keypad_Get_Char+0x354>)
 800073e:	f001 fb65 	bl	8001e0c <HAL_GPIO_ReadPin>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d0f8      	beq.n	800073a <Keypad_Get_Char+0x2ea>
		HAL_Delay(4);
 8000748:	2004      	movs	r0, #4
 800074a:	f001 f8e3 	bl	8001914 <HAL_Delay>
		val_key = keys[2][3];
 800074e:	2243      	movs	r2, #67	; 0x43
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <Keypad_Get_Char+0x34c>)
 8000752:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000754:	2201      	movs	r2, #1
 8000756:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075e:	f001 fb6d 	bl	8001e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000768:	480d      	ldr	r0, [pc, #52]	; (80007a0 <Keypad_Get_Char+0x350>)
 800076a:	f001 fb67 	bl	8001e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	2110      	movs	r1, #16
 8000772:	480b      	ldr	r0, [pc, #44]	; (80007a0 <Keypad_Get_Char+0x350>)
 8000774:	f001 fb62 	bl	8001e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	2120      	movs	r1, #32
 800077c:	4808      	ldr	r0, [pc, #32]	; (80007a0 <Keypad_Get_Char+0x350>)
 800077e:	f001 fb5d 	bl	8001e3c <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 8000782:	2108      	movs	r1, #8
 8000784:	4806      	ldr	r0, [pc, #24]	; (80007a0 <Keypad_Get_Char+0x350>)
 8000786:	f001 fb41 	bl	8001e0c <HAL_GPIO_ReadPin>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d118      	bne.n	80007c2 <Keypad_Get_Char+0x372>
		HAL_Delay(4);
 8000790:	2004      	movs	r0, #4
 8000792:	f001 f8bf 	bl	8001914 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 8000796:	bf00      	nop
 8000798:	e006      	b.n	80007a8 <Keypad_Get_Char+0x358>
 800079a:	bf00      	nop
 800079c:	200004ac 	.word	0x200004ac
 80007a0:	48000400 	.word	0x48000400
 80007a4:	48000800 	.word	0x48000800
 80007a8:	2108      	movs	r1, #8
 80007aa:	4830      	ldr	r0, [pc, #192]	; (800086c <Keypad_Get_Char+0x41c>)
 80007ac:	f001 fb2e 	bl	8001e0c <HAL_GPIO_ReadPin>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d0f8      	beq.n	80007a8 <Keypad_Get_Char+0x358>
		HAL_Delay(4);
 80007b6:	2004      	movs	r0, #4
 80007b8:	f001 f8ac 	bl	8001914 <HAL_Delay>
		val_key = keys[3][0];
 80007bc:	222a      	movs	r2, #42	; 0x2a
 80007be:	4b2c      	ldr	r3, [pc, #176]	; (8000870 <Keypad_Get_Char+0x420>)
 80007c0:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 80007c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ca:	f001 fb1f 	bl	8001e0c <HAL_GPIO_ReadPin>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d112      	bne.n	80007fa <Keypad_Get_Char+0x3aa>
		HAL_Delay(4);
 80007d4:	2004      	movs	r0, #4
 80007d6:	f001 f89d 	bl	8001914 <HAL_Delay>
		while (!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 80007da:	bf00      	nop
 80007dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e4:	f001 fb12 	bl	8001e0c <HAL_GPIO_ReadPin>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d0f6      	beq.n	80007dc <Keypad_Get_Char+0x38c>
		HAL_Delay(4);
 80007ee:	2004      	movs	r0, #4
 80007f0:	f001 f890 	bl	8001914 <HAL_Delay>
		val_key = keys[3][1];
 80007f4:	2230      	movs	r2, #48	; 0x30
 80007f6:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <Keypad_Get_Char+0x420>)
 80007f8:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 80007fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000802:	f001 fb03 	bl	8001e0c <HAL_GPIO_ReadPin>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d112      	bne.n	8000832 <Keypad_Get_Char+0x3e2>
		HAL_Delay(4);
 800080c:	2004      	movs	r0, #4
 800080e:	f001 f881 	bl	8001914 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8000812:	bf00      	nop
 8000814:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081c:	f001 faf6 	bl	8001e0c <HAL_GPIO_ReadPin>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f6      	beq.n	8000814 <Keypad_Get_Char+0x3c4>
		HAL_Delay(4);
 8000826:	2004      	movs	r0, #4
 8000828:	f001 f874 	bl	8001914 <HAL_Delay>
		val_key = keys[3][2];
 800082c:	2223      	movs	r2, #35	; 0x23
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <Keypad_Get_Char+0x420>)
 8000830:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 8000832:	2180      	movs	r1, #128	; 0x80
 8000834:	480f      	ldr	r0, [pc, #60]	; (8000874 <Keypad_Get_Char+0x424>)
 8000836:	f001 fae9 	bl	8001e0c <HAL_GPIO_ReadPin>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d110      	bne.n	8000862 <Keypad_Get_Char+0x412>
		HAL_Delay(4);
 8000840:	2004      	movs	r0, #4
 8000842:	f001 f867 	bl	8001914 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 8000846:	bf00      	nop
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	480a      	ldr	r0, [pc, #40]	; (8000874 <Keypad_Get_Char+0x424>)
 800084c:	f001 fade 	bl	8001e0c <HAL_GPIO_ReadPin>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f8      	beq.n	8000848 <Keypad_Get_Char+0x3f8>
		HAL_Delay(4);
 8000856:	2004      	movs	r0, #4
 8000858:	f001 f85c 	bl	8001914 <HAL_Delay>
		val_key = keys[3][3];
 800085c:	2244      	movs	r2, #68	; 0x44
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <Keypad_Get_Char+0x420>)
 8000860:	701a      	strb	r2, [r3, #0]
	}
	return val_key;
 8000862:	4b03      	ldr	r3, [pc, #12]	; (8000870 <Keypad_Get_Char+0x420>)
 8000864:	781b      	ldrb	r3, [r3, #0]
}
 8000866:	4618      	mov	r0, r3
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	48000400 	.word	0x48000400
 8000870:	200004ac 	.word	0x200004ac
 8000874:	48000800 	.word	0x48000800

08000878 <intToDecimalString>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void intToDecimalString(int numd, char *str) {
 8000878:	b480      	push	{r7}
 800087a:	b089      	sub	sp, #36	; 0x24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
    if (numd == 0) {
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d107      	bne.n	8000898 <intToDecimalString+0x20>
        str[0] = '0';
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	2230      	movs	r2, #48	; 0x30
 800088c:	701a      	strb	r2, [r3, #0]
        str[1] = '\0';
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	3301      	adds	r3, #1
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
        return;
 8000896:	e05f      	b.n	8000958 <intToDecimalString+0xe0>
    }

    int i = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
    int isNegative = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	61bb      	str	r3, [r7, #24]

    if (numd < 0) {
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	da23      	bge.n	80008ee <intToDecimalString+0x76>
        isNegative = 1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	61bb      	str	r3, [r7, #24]
        numd = -numd;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	425b      	negs	r3, r3
 80008ae:	607b      	str	r3, [r7, #4]
    }

    while (numd > 0) {
 80008b0:	e01d      	b.n	80008ee <intToDecimalString+0x76>
        str[i++] = numd % 10 + '0';
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	4b2b      	ldr	r3, [pc, #172]	; (8000964 <intToDecimalString+0xec>)
 80008b6:	fb83 1302 	smull	r1, r3, r3, r2
 80008ba:	1099      	asrs	r1, r3, #2
 80008bc:	17d3      	asrs	r3, r2, #31
 80008be:	1ac9      	subs	r1, r1, r3
 80008c0:	460b      	mov	r3, r1
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	440b      	add	r3, r1
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	1ad1      	subs	r1, r2, r3
 80008ca:	b2ca      	uxtb	r2, r1
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	1c59      	adds	r1, r3, #1
 80008d0:	61f9      	str	r1, [r7, #28]
 80008d2:	4619      	mov	r1, r3
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	440b      	add	r3, r1
 80008d8:	3230      	adds	r2, #48	; 0x30
 80008da:	b2d2      	uxtb	r2, r2
 80008dc:	701a      	strb	r2, [r3, #0]
        numd /= 10;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a20      	ldr	r2, [pc, #128]	; (8000964 <intToDecimalString+0xec>)
 80008e2:	fb82 1203 	smull	r1, r2, r2, r3
 80008e6:	1092      	asrs	r2, r2, #2
 80008e8:	17db      	asrs	r3, r3, #31
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	607b      	str	r3, [r7, #4]
    while (numd > 0) {
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	dcde      	bgt.n	80008b2 <intToDecimalString+0x3a>
    }

    if (isNegative) {
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d007      	beq.n	800090a <intToDecimalString+0x92>
        str[i++] = '-';
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	1c5a      	adds	r2, r3, #1
 80008fe:	61fa      	str	r2, [r7, #28]
 8000900:	461a      	mov	r2, r3
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	4413      	add	r3, r2
 8000906:	222d      	movs	r2, #45	; 0x2d
 8000908:	701a      	strb	r2, [r3, #0]
    }

    str[i] = '\0';
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	683a      	ldr	r2, [r7, #0]
 800090e:	4413      	add	r3, r2
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]

    // Invertir el string
    int start = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
    int end = i - 1;
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	3b01      	subs	r3, #1
 800091c:	613b      	str	r3, [r7, #16]
    while (start < end) {
 800091e:	e017      	b.n	8000950 <intToDecimalString+0xd8>
        char temp = str[start];
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	683a      	ldr	r2, [r7, #0]
 8000924:	4413      	add	r3, r2
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	73fb      	strb	r3, [r7, #15]
        str[start] = str[end];
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	683a      	ldr	r2, [r7, #0]
 800092e:	441a      	add	r2, r3
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	6839      	ldr	r1, [r7, #0]
 8000934:	440b      	add	r3, r1
 8000936:	7812      	ldrb	r2, [r2, #0]
 8000938:	701a      	strb	r2, [r3, #0]
        str[end] = temp;
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	683a      	ldr	r2, [r7, #0]
 800093e:	4413      	add	r3, r2
 8000940:	7bfa      	ldrb	r2, [r7, #15]
 8000942:	701a      	strb	r2, [r3, #0]
        start++;
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	3301      	adds	r3, #1
 8000948:	617b      	str	r3, [r7, #20]
        end--;
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	3b01      	subs	r3, #1
 800094e:	613b      	str	r3, [r7, #16]
    while (start < end) {
 8000950:	697a      	ldr	r2, [r7, #20]
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	429a      	cmp	r2, r3
 8000956:	dbe3      	blt.n	8000920 <intToDecimalString+0xa8>
    }
}
 8000958:	3724      	adds	r7, #36	; 0x24
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	66666667 	.word	0x66666667

08000968 <stringToInteger>:

int stringToInteger(const char *str) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
    int result = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
    int sign = 1;
 8000974:	2301      	movs	r3, #1
 8000976:	613b      	str	r3, [r7, #16]
    int i = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]

    // Ignorar espacios iniciales
    while (str[i] == ' ')
 800097c:	e002      	b.n	8000984 <stringToInteger+0x1c>
        i++;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	3301      	adds	r3, #1
 8000982:	60fb      	str	r3, [r7, #12]
    while (str[i] == ' ')
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b20      	cmp	r3, #32
 800098e:	d0f6      	beq.n	800097e <stringToInteger+0x16>

    // Verificar el signo
    if (str[i] == '-') {
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b2d      	cmp	r3, #45	; 0x2d
 800099a:	d106      	bne.n	80009aa <stringToInteger+0x42>
        sign = -1;
 800099c:	f04f 33ff 	mov.w	r3, #4294967295
 80009a0:	613b      	str	r3, [r7, #16]
        i++;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	3301      	adds	r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	e008      	b.n	80009bc <stringToInteger+0x54>
    } else if (str[i] == '+') {
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	4413      	add	r3, r2
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b2b      	cmp	r3, #43	; 0x2b
 80009b4:	d102      	bne.n	80009bc <stringToInteger+0x54>
        i++;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	3301      	adds	r3, #1
 80009ba:	60fb      	str	r3, [r7, #12]
    }

    // Calcular el valor numérico
    int len = strlen(str);
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff fc07 	bl	80001d0 <strlen>
 80009c2:	4603      	mov	r3, r0
 80009c4:	60bb      	str	r3, [r7, #8]
    for (; i < len; i++) {
 80009c6:	e00f      	b.n	80009e8 <stringToInteger+0x80>
        result = result * 10 + (str[i] - '0');
 80009c8:	697a      	ldr	r2, [r7, #20]
 80009ca:	4613      	mov	r3, r2
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	4413      	add	r3, r2
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	4619      	mov	r1, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	3b30      	subs	r3, #48	; 0x30
 80009de:	440b      	add	r3, r1
 80009e0:	617b      	str	r3, [r7, #20]
    for (; i < len; i++) {
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	3301      	adds	r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fa      	ldr	r2, [r7, #12]
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	dbeb      	blt.n	80009c8 <stringToInteger+0x60>
    }

    return sign * result;
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	697a      	ldr	r2, [r7, #20]
 80009f4:	fb02 f303 	mul.w	r3, r2, r3
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b09e      	sub	sp, #120	; 0x78
 8000a04:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a06:	f000 ff1f 	bl	8001848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0a:	f000 fa5d 	bl	8000ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0e:	f000 faf7 	bl	8001000 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a12:	f000 fab5 	bl	8000f80 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000a16:	f7ff fcc9 	bl	80003ac <lcd_init>
  max_init(0x02);
 8000a1a:	2002      	movs	r0, #2
 8000a1c:	f000 fdf0 	bl	8001600 <max_init>
         	                    lcd_send_string("+");
         	                     lcd_put_cur(1, 5);
         	                    lcd_send_string("");
         	                    index2 = 0;
         	                    write_char(0b10000000, 1);*/
  scroll_string("Asignacion 1 -- Calculadora   ", 100, left);
 8000a20:	224c      	movs	r2, #76	; 0x4c
 8000a22:	2164      	movs	r1, #100	; 0x64
 8000a24:	48bf      	ldr	r0, [pc, #764]	; (8000d24 <main+0x324>)
 8000a26:	f000 fd33 	bl	8001490 <scroll_string>
           HAL_Delay(500);
 8000a2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a2e:	f000 ff71 	bl	8001914 <HAL_Delay>
           max_clear();
 8000a32:	f000 fd49 	bl	80014c8 <max_clear>

  lcd_put_cur(0, 0);
 8000a36:	2100      	movs	r1, #0
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f7ff fc98 	bl	800036e <lcd_put_cur>
  lcd_send_string("Angel G. Segura ");
 8000a3e:	48ba      	ldr	r0, [pc, #744]	; (8000d28 <main+0x328>)
 8000a40:	f7ff fcf1 	bl	8000426 <lcd_send_string>
  lcd_put_cur(1, 0);
 8000a44:	2100      	movs	r1, #0
 8000a46:	2001      	movs	r0, #1
 8000a48:	f7ff fc91 	bl	800036e <lcd_put_cur>
  lcd_send_string("   2021-0311    ");
 8000a4c:	48b7      	ldr	r0, [pc, #732]	; (8000d2c <main+0x32c>)
 8000a4e:	f7ff fcea 	bl	8000426 <lcd_send_string>
HAL_Delay(3000);
 8000a52:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a56:	f000 ff5d 	bl	8001914 <HAL_Delay>
while (1) {
        // Declarar variables y arreglos
        char num1[5];
            char num2[5];
            int index1 = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	66fb      	str	r3, [r7, #108]	; 0x6c
            int index2 = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	66bb      	str	r3, [r7, #104]	; 0x68
            int result = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	667b      	str	r3, [r7, #100]	; 0x64
            int input_stage = 1; // Etapa de entrada: 1 para num1, 2 para num2
 8000a66:	2301      	movs	r3, #1
 8000a68:	663b      	str	r3, [r7, #96]	; 0x60
            int resta = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	65fb      	str	r3, [r7, #92]	; 0x5c
            int suma = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	65bb      	str	r3, [r7, #88]	; 0x58
            int multiplicacion = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	657b      	str	r3, [r7, #84]	; 0x54
            int division = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	653b      	str	r3, [r7, #80]	; 0x50


        // Mostrar mensaje en la pantalla
        lcd_clear();
 8000a7a:	f7ff fc61 	bl	8000340 <lcd_clear>
        lcd_put_cur(0, 0);
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2000      	movs	r0, #0
 8000a82:	f7ff fc74 	bl	800036e <lcd_put_cur>
        lcd_send_string("Introd. Digitos");
 8000a86:	48aa      	ldr	r0, [pc, #680]	; (8000d30 <main+0x330>)
 8000a88:	f7ff fccd 	bl	8000426 <lcd_send_string>
        lcd_put_cur(1, 0);
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f7ff fc6d 	bl	800036e <lcd_put_cur>
        lcd_send_string("");
 8000a94:	48a7      	ldr	r0, [pc, #668]	; (8000d34 <main+0x334>)
 8000a96:	f7ff fcc6 	bl	8000426 <lcd_send_string>

        while (1) {
       	 // Esperar hasta que se presione una tecla en el teclado
       	        char keypad_key = Keypad_Get_Char();
 8000a9a:	f7ff fcd9 	bl	8000450 <Keypad_Get_Char>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

       	        if (keypad_key >= '0' && keypad_key <= '9') {
 8000aa4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000aa8:	2b2f      	cmp	r3, #47	; 0x2f
 8000aaa:	f240 8097 	bls.w	8000bdc <main+0x1dc>
 8000aae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000ab2:	2b39      	cmp	r3, #57	; 0x39
 8000ab4:	f200 8092 	bhi.w	8000bdc <main+0x1dc>
       	                    if (input_stage == 1 && index1 < 4) {
 8000ab8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d111      	bne.n	8000ae2 <main+0xe2>
 8000abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	dc0e      	bgt.n	8000ae2 <main+0xe2>
       	                                        num1[index1++] = keypad_key;
 8000ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ac6:	1c5a      	adds	r2, r3, #1
 8000ac8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000aca:	3370      	adds	r3, #112	; 0x70
 8000acc:	443b      	add	r3, r7
 8000ace:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000ad2:	f803 2c34 	strb.w	r2, [r3, #-52]
       	                                            lcd_send_data(keypad_key);
 8000ad6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fc00 	bl	80002e0 <lcd_send_data>
 8000ae0:	e013      	b.n	8000b0a <main+0x10a>
       	                                                  } else if (input_stage == 2 && index2 < 4) {
 8000ae2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d110      	bne.n	8000b0a <main+0x10a>
 8000ae8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	dc0d      	bgt.n	8000b0a <main+0x10a>
       	                                                     num2[index2++] = keypad_key;
 8000aee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000af0:	1c5a      	adds	r2, r3, #1
 8000af2:	66ba      	str	r2, [r7, #104]	; 0x68
 8000af4:	3370      	adds	r3, #112	; 0x70
 8000af6:	443b      	add	r3, r7
 8000af8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000afc:	f803 2c3c 	strb.w	r2, [r3, #-60]
       	                                                       lcd_send_data(keypad_key);}
 8000b00:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fbeb 	bl	80002e0 <lcd_send_data>


       	                 // Mostrar los dígitos y el signo en la pantalla LCD
       	                     lcd_clear();
 8000b0a:	f7ff fc19 	bl	8000340 <lcd_clear>
       	                     lcd_put_cur(0, 0);
 8000b0e:	2100      	movs	r1, #0
 8000b10:	2000      	movs	r0, #0
 8000b12:	f7ff fc2c 	bl	800036e <lcd_put_cur>
       	                     lcd_send_string("Introd. Digitos");
 8000b16:	4886      	ldr	r0, [pc, #536]	; (8000d30 <main+0x330>)
 8000b18:	f7ff fc85 	bl	8000426 <lcd_send_string>
       	                     lcd_put_cur(1, 0);
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f7ff fc25 	bl	800036e <lcd_put_cur>

       	                     // Concatenar num1, el signo y num2 en una cadena
       	                     char display_str[15];
       	                     if (input_stage == 1) {
 8000b24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d108      	bne.n	8000b3c <main+0x13c>
       	                         // Mostrar todos los dígitos ingresados de num1
       	                         sprintf(display_str, "%.*s", index1, num1);
 8000b2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000b32:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000b34:	4980      	ldr	r1, [pc, #512]	; (8000d38 <main+0x338>)
 8000b36:	f003 f9ad 	bl	8003e94 <siprintf>
 8000b3a:	e049      	b.n	8000bd0 <main+0x1d0>
       	                     } else if (input_stage == 2) {
 8000b3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d146      	bne.n	8000bd0 <main+0x1d0>
       	                         if (suma) {
 8000b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d00e      	beq.n	8000b66 <main+0x166>
       	                             // Mostrar todos los dígitos ingresados de num1, el signo y todos los dígitos ingresados de num2
       	                             sprintf(display_str, "%.*s + %.*s", index1, num1, index2, num2);
 8000b48:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000b4c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000b50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b54:	9301      	str	r3, [sp, #4]
 8000b56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000b5e:	4977      	ldr	r1, [pc, #476]	; (8000d3c <main+0x33c>)
 8000b60:	f003 f998 	bl	8003e94 <siprintf>
 8000b64:	e034      	b.n	8000bd0 <main+0x1d0>
       	                         } else if (resta) {
 8000b66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d00e      	beq.n	8000b8a <main+0x18a>
       	                             // Mostrar todos los dígitos ingresados de num1, el signo y todos los dígitos ingresados de num2
       	                             sprintf(display_str, "%.*s - %.*s", index1, num1, index2, num2);
 8000b6c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000b70:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000b74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b78:	9301      	str	r3, [sp, #4]
 8000b7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000b82:	496f      	ldr	r1, [pc, #444]	; (8000d40 <main+0x340>)
 8000b84:	f003 f986 	bl	8003e94 <siprintf>
 8000b88:	e022      	b.n	8000bd0 <main+0x1d0>
       	                         } else if (multiplicacion) {
 8000b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d00e      	beq.n	8000bae <main+0x1ae>
       	                             // Mostrar todos los dígitos ingresados de num1, el signo y todos los dígitos ingresados de num2
       	                             sprintf(display_str, "%.*s * %.*s", index1, num1, index2, num2);
 8000b90:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000b94:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000b98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b9c:	9301      	str	r3, [sp, #4]
 8000b9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000ba6:	4967      	ldr	r1, [pc, #412]	; (8000d44 <main+0x344>)
 8000ba8:	f003 f974 	bl	8003e94 <siprintf>
 8000bac:	e010      	b.n	8000bd0 <main+0x1d0>
       	                         } else if (division) {
 8000bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d00d      	beq.n	8000bd0 <main+0x1d0>
       	                             // Mostrar todos los dígitos ingresados de num1, el signo y todos los dígitos ingresados de num2
       	                             sprintf(display_str, "%.*s / %.*s", index1, num1, index2, num2);
 8000bb4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000bb8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000bbc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bc0:	9301      	str	r3, [sp, #4]
 8000bc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000bca:	495f      	ldr	r1, [pc, #380]	; (8000d48 <main+0x348>)
 8000bcc:	f003 f962 	bl	8003e94 <siprintf>
       	                         }
       	                     }


       	             lcd_send_string(display_str);
 8000bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fc26 	bl	8000426 <lcd_send_string>
       	        if (keypad_key >= '0' && keypad_key <= '9') {
 8000bda:	e16d      	b.n	8000eb8 <main+0x4b8>

} else if (keypad_key == 'A') {
 8000bdc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000be0:	2b41      	cmp	r3, #65	; 0x41
 8000be2:	d129      	bne.n	8000c38 <main+0x238>
       	                    input_stage = 2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	663b      	str	r3, [r7, #96]	; 0x60
       	                          suma = 1;
 8000be8:	2301      	movs	r3, #1
 8000bea:	65bb      	str	r3, [r7, #88]	; 0x58
       	                             resta = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	65fb      	str	r3, [r7, #92]	; 0x5c
       	                                multiplicacion = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	657b      	str	r3, [r7, #84]	; 0x54
       	                                   division = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	653b      	str	r3, [r7, #80]	; 0x50

       	                    lcd_clear();
 8000bf8:	f7ff fba2 	bl	8000340 <lcd_clear>
       	                    lcd_put_cur(0, 1);
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f7ff fbb5 	bl	800036e <lcd_put_cur>
       	                    lcd_send_string("Tcl.A   SUMA(+) ");
 8000c04:	4851      	ldr	r0, [pc, #324]	; (8000d4c <main+0x34c>)
 8000c06:	f7ff fc0e 	bl	8000426 <lcd_send_string>
       	                    lcd_put_cur(1, 0);
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f7ff fbae 	bl	800036e <lcd_put_cur>
       	                    lcd_send_string("+");
 8000c12:	484f      	ldr	r0, [pc, #316]	; (8000d50 <main+0x350>)
 8000c14:	f7ff fc07 	bl	8000426 <lcd_send_string>
       	                    index2 = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	66bb      	str	r3, [r7, #104]	; 0x68
       	                    write_char(0b10000000, 1);
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	2080      	movs	r0, #128	; 0x80
 8000c20:	f000 fbaa 	bl	8001378 <write_char>


       	                         // Concatenar num1 y num2 en una cadena
       	                         char display_str[10];
       	                         sprintf(display_str, "%s %s", num1, num2);
 8000c24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c28:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000c2c:	f107 0018 	add.w	r0, r7, #24
 8000c30:	4948      	ldr	r1, [pc, #288]	; (8000d54 <main+0x354>)
 8000c32:	f003 f92f 	bl	8003e94 <siprintf>
 8000c36:	e730      	b.n	8000a9a <main+0x9a>
       	                }else if (keypad_key == 'B') {
 8000c38:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000c3c:	2b42      	cmp	r3, #66	; 0x42
 8000c3e:	d122      	bne.n	8000c86 <main+0x286>
       	                	max_clear();
 8000c40:	f000 fc42 	bl	80014c8 <max_clear>
       	                         input_stage = 2;
 8000c44:	2302      	movs	r3, #2
 8000c46:	663b      	str	r3, [r7, #96]	; 0x60
       	                            suma = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	65bb      	str	r3, [r7, #88]	; 0x58
       	                               resta = 1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	65fb      	str	r3, [r7, #92]	; 0x5c
       	                                    multiplicacion = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	657b      	str	r3, [r7, #84]	; 0x54
       	                    division = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	653b      	str	r3, [r7, #80]	; 0x50
       	                    lcd_clear();
 8000c58:	f7ff fb72 	bl	8000340 <lcd_clear>
       	                    lcd_put_cur(0, 1);
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff fb85 	bl	800036e <lcd_put_cur>
       	                    lcd_send_string("Tcl.B  RESTA(-) ");
 8000c64:	483c      	ldr	r0, [pc, #240]	; (8000d58 <main+0x358>)
 8000c66:	f7ff fbde 	bl	8000426 <lcd_send_string>
       	                    lcd_put_cur(1, 0);
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f7ff fb7e 	bl	800036e <lcd_put_cur>
       	                    lcd_send_string("-");
 8000c72:	483a      	ldr	r0, [pc, #232]	; (8000d5c <main+0x35c>)
 8000c74:	f7ff fbd7 	bl	8000426 <lcd_send_string>
       	                    index2 = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	66bb      	str	r3, [r7, #104]	; 0x68
       	                    write_char(0b10000001, 1);
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	2081      	movs	r0, #129	; 0x81
 8000c80:	f000 fb7a 	bl	8001378 <write_char>
 8000c84:	e709      	b.n	8000a9a <main+0x9a>

       	                }else if (keypad_key == 'C') {
 8000c86:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000c8a:	2b43      	cmp	r3, #67	; 0x43
 8000c8c:	d122      	bne.n	8000cd4 <main+0x2d4>
       	                	max_clear();
 8000c8e:	f000 fc1b 	bl	80014c8 <max_clear>
       	                        input_stage = 2;
 8000c92:	2302      	movs	r3, #2
 8000c94:	663b      	str	r3, [r7, #96]	; 0x60
       	                            suma = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	65bb      	str	r3, [r7, #88]	; 0x58
       	                                resta = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
       	                                    multiplicacion = 1;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	657b      	str	r3, [r7, #84]	; 0x54
       	                                         division = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	653b      	str	r3, [r7, #80]	; 0x50
       	                    lcd_clear();
 8000ca6:	f7ff fb4b 	bl	8000340 <lcd_clear>
       	                    lcd_put_cur(0, 1);
 8000caa:	2101      	movs	r1, #1
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff fb5e 	bl	800036e <lcd_put_cur>
       	                    lcd_send_string("Tcl.C   MULT(x) ");
 8000cb2:	482b      	ldr	r0, [pc, #172]	; (8000d60 <main+0x360>)
 8000cb4:	f7ff fbb7 	bl	8000426 <lcd_send_string>
       	                    lcd_put_cur(1, 0);
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f7ff fb57 	bl	800036e <lcd_put_cur>
       	                    lcd_send_string("x");
 8000cc0:	4828      	ldr	r0, [pc, #160]	; (8000d64 <main+0x364>)
 8000cc2:	f7ff fbb0 	bl	8000426 <lcd_send_string>
       	                    index2 = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	66bb      	str	r3, [r7, #104]	; 0x68
       	                    write_char(0b10000010, 1);
 8000cca:	2101      	movs	r1, #1
 8000ccc:	2082      	movs	r0, #130	; 0x82
 8000cce:	f000 fb53 	bl	8001378 <write_char>
 8000cd2:	e6e2      	b.n	8000a9a <main+0x9a>

       	                }else if (keypad_key == 'D') {
 8000cd4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000cd8:	2b44      	cmp	r3, #68	; 0x44
 8000cda:	d149      	bne.n	8000d70 <main+0x370>
       	                	max_clear();
 8000cdc:	f000 fbf4 	bl	80014c8 <max_clear>
       	                         input_stage = 2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	663b      	str	r3, [r7, #96]	; 0x60
       	                             suma = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	65bb      	str	r3, [r7, #88]	; 0x58
       	                                  resta = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	65fb      	str	r3, [r7, #92]	; 0x5c
       	                                      multiplicacion = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	657b      	str	r3, [r7, #84]	; 0x54
       	                                            division = 1;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	653b      	str	r3, [r7, #80]	; 0x50
       	                    lcd_clear();
 8000cf4:	f7ff fb24 	bl	8000340 <lcd_clear>
       	                    lcd_put_cur(0, 1);
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff fb37 	bl	800036e <lcd_put_cur>
       	                    lcd_send_string("Tcl.D    DIV(/) ");
 8000d00:	4819      	ldr	r0, [pc, #100]	; (8000d68 <main+0x368>)
 8000d02:	f7ff fb90 	bl	8000426 <lcd_send_string>
       	                    lcd_put_cur(1, 0);
 8000d06:	2100      	movs	r1, #0
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f7ff fb30 	bl	800036e <lcd_put_cur>
       	                    lcd_send_string("/");
 8000d0e:	4817      	ldr	r0, [pc, #92]	; (8000d6c <main+0x36c>)
 8000d10:	f7ff fb89 	bl	8000426 <lcd_send_string>
       	                    index2 = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	66bb      	str	r3, [r7, #104]	; 0x68
       	                    write_char(0b10000011, 1);
 8000d18:	2101      	movs	r1, #1
 8000d1a:	2083      	movs	r0, #131	; 0x83
 8000d1c:	f000 fb2c 	bl	8001378 <write_char>
 8000d20:	e6bb      	b.n	8000a9a <main+0x9a>
 8000d22:	bf00      	nop
 8000d24:	08004788 	.word	0x08004788
 8000d28:	080047a8 	.word	0x080047a8
 8000d2c:	080047bc 	.word	0x080047bc
 8000d30:	080047d0 	.word	0x080047d0
 8000d34:	080047e0 	.word	0x080047e0
 8000d38:	080047e4 	.word	0x080047e4
 8000d3c:	080047ec 	.word	0x080047ec
 8000d40:	080047f8 	.word	0x080047f8
 8000d44:	08004804 	.word	0x08004804
 8000d48:	08004810 	.word	0x08004810
 8000d4c:	0800481c 	.word	0x0800481c
 8000d50:	08004830 	.word	0x08004830
 8000d54:	08004834 	.word	0x08004834
 8000d58:	0800483c 	.word	0x0800483c
 8000d5c:	08004850 	.word	0x08004850
 8000d60:	08004854 	.word	0x08004854
 8000d64:	08004868 	.word	0x08004868
 8000d68:	0800486c 	.word	0x0800486c
 8000d6c:	08004880 	.word	0x08004880

       	                } else if (keypad_key == '*') {
 8000d70:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000d74:	2b2a      	cmp	r3, #42	; 0x2a
 8000d76:	d127      	bne.n	8000dc8 <main+0x3c8>

       	                  if (input_stage == 1 && index1 > 0) {
 8000d78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d10f      	bne.n	8000d9e <main+0x39e>
 8000d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	dd0c      	ble.n	8000d9e <main+0x39e>
       	                      index1--;  // Decrementar el índice de num1 para eliminar el último dígito
 8000d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d86:	3b01      	subs	r3, #1
 8000d88:	66fb      	str	r3, [r7, #108]	; 0x6c
       	                      lcd_send_cmd(0x10);  // Mover el cursor a la posición anterior en la pantalla LCD
 8000d8a:	2010      	movs	r0, #16
 8000d8c:	f7ff fa78 	bl	8000280 <lcd_send_cmd>
       	                      lcd_send_data(' ');  // Borrar el dígito anterior en la pantalla LCD
 8000d90:	2020      	movs	r0, #32
 8000d92:	f7ff faa5 	bl	80002e0 <lcd_send_data>
       	                    lcd_send_cmd(0x10);  // Mover el cursor nuevamente a la posición anterior
 8000d96:	2010      	movs	r0, #16
 8000d98:	f7ff fa72 	bl	8000280 <lcd_send_cmd>
 8000d9c:	e08c      	b.n	8000eb8 <main+0x4b8>

       	                  } else if (input_stage == 2 && index2 > 0) {
 8000d9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	f47f ae7a 	bne.w	8000a9a <main+0x9a>
 8000da6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f77f ae76 	ble.w	8000a9a <main+0x9a>
       	                      index2--;  // Decrementar el índice de num2 para eliminar el último dígito
 8000dae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000db0:	3b01      	subs	r3, #1
 8000db2:	66bb      	str	r3, [r7, #104]	; 0x68
       	                      lcd_send_cmd(0x10);  // Mover el cursor a la posición anterior en la pantalla LCD
 8000db4:	2010      	movs	r0, #16
 8000db6:	f7ff fa63 	bl	8000280 <lcd_send_cmd>
       	                      lcd_send_data(' ');  // Borrar el dígito anterior en la pantalla LCD
 8000dba:	2020      	movs	r0, #32
 8000dbc:	f7ff fa90 	bl	80002e0 <lcd_send_data>
       	                      lcd_send_cmd(0x10);  // Mover el cursor nuevamente a la posición anterior
 8000dc0:	2010      	movs	r0, #16
 8000dc2:	f7ff fa5d 	bl	8000280 <lcd_send_cmd>
 8000dc6:	e668      	b.n	8000a9a <main+0x9a>
       	                  }

       	              }else if (keypad_key == '#') {
 8000dc8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000dcc:	2b23      	cmp	r3, #35	; 0x23
 8000dce:	f47f ae64 	bne.w	8000a9a <main+0x9a>
       	                	max_clear();
 8000dd2:	f000 fb79 	bl	80014c8 <max_clear>
       	                    num1[index1] = '\0';
 8000dd6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ddc:	4413      	add	r3, r2
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
       	                    num2[index2] = '\0';
 8000de2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000de6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000de8:	4413      	add	r3, r2
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]

       	                    int num1_decimal = stringToInteger(num1);
 8000dee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fdb8 	bl	8000968 <stringToInteger>
 8000df8:	64b8      	str	r0, [r7, #72]	; 0x48
       	                    int num2_decimal = stringToInteger(num2);
 8000dfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fdb2 	bl	8000968 <stringToInteger>
 8000e04:	6478      	str	r0, [r7, #68]	; 0x44
       	                    if(suma == 1)
 8000e06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d104      	bne.n	8000e16 <main+0x416>
       	                    {
       	                    	                             result = num1_decimal + num2_decimal;
 8000e0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e10:	4413      	add	r3, r2
 8000e12:	667b      	str	r3, [r7, #100]	; 0x64
 8000e14:	e01a      	b.n	8000e4c <main+0x44c>

       	                    } else if(resta == 1)
 8000e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d106      	bne.n	8000e2a <main+0x42a>
       	                    {
       	                    	                              result = num1_decimal - num2_decimal;
 8000e1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	667b      	str	r3, [r7, #100]	; 0x64
       	                    	max_clear();
 8000e24:	f000 fb50 	bl	80014c8 <max_clear>
 8000e28:	e010      	b.n	8000e4c <main+0x44c>
       	                    } else if ( multiplicacion == 1 )
 8000e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d105      	bne.n	8000e3c <main+0x43c>
       	                    {
       	                    	                              result = num1_decimal * num2_decimal;
 8000e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000e34:	fb02 f303 	mul.w	r3, r2, r3
 8000e38:	667b      	str	r3, [r7, #100]	; 0x64
 8000e3a:	e007      	b.n	8000e4c <main+0x44c>


       	                    } else if ( division == 1 )
 8000e3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d104      	bne.n	8000e4c <main+0x44c>
       	                    {
       	                    	                              result = num1_decimal / num2_decimal;
 8000e42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e46:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e4a:	667b      	str	r3, [r7, #100]	; 0x64

       	                    }
       	                    char result_str[20];
       	                    intToDecimalString(result, result_str);
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	4619      	mov	r1, r3
 8000e50:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000e52:	f7ff fd11 	bl	8000878 <intToDecimalString>

       	                    lcd_clear();
 8000e56:	f7ff fa73 	bl	8000340 <lcd_clear>
       	                    lcd_put_cur(0, 0);
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f7ff fa86 	bl	800036e <lcd_put_cur>
       	                    lcd_send_string("Resultado");
 8000e62:	4816      	ldr	r0, [pc, #88]	; (8000ebc <main+0x4bc>)
 8000e64:	f7ff fadf 	bl	8000426 <lcd_send_string>
       	                 lcd_put_cur(1, 0);
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f7ff fa7f 	bl	800036e <lcd_put_cur>
       	                        	                    lcd_send_string("=");
 8000e70:	4813      	ldr	r0, [pc, #76]	; (8000ec0 <main+0x4c0>)
 8000e72:	f7ff fad8 	bl	8000426 <lcd_send_string>
       	                    lcd_put_cur(1, 1);
 8000e76:	2101      	movs	r1, #1
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f7ff fa78 	bl	800036e <lcd_put_cur>
       	                    lcd_send_string(result_str);
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fad0 	bl	8000426 <lcd_send_string>
       	                    HAL_Delay(5000);
 8000e86:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e8a:	f000 fd43 	bl	8001914 <HAL_Delay>
       	                    lcd_clear();
 8000e8e:	f7ff fa57 	bl	8000340 <lcd_clear>


       	                    index1 = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	66fb      	str	r3, [r7, #108]	; 0x6c
       	                    index2 = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	66bb      	str	r3, [r7, #104]	; 0x68
       	                    input_stage = 1;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	663b      	str	r3, [r7, #96]	; 0x60

       	                 scroll_string("Vuelva a calcular  ", 100, left);
 8000e9e:	224c      	movs	r2, #76	; 0x4c
 8000ea0:	2164      	movs	r1, #100	; 0x64
 8000ea2:	4808      	ldr	r0, [pc, #32]	; (8000ec4 <main+0x4c4>)
 8000ea4:	f000 faf4 	bl	8001490 <scroll_string>
       	                            HAL_Delay(500);
 8000ea8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eac:	f000 fd32 	bl	8001914 <HAL_Delay>
       	                            max_clear();
 8000eb0:	f000 fb0a 	bl	80014c8 <max_clear>

       	                 break;
 8000eb4:	bf00      	nop
while (1) {
 8000eb6:	e5d0      	b.n	8000a5a <main+0x5a>
        while (1) {
 8000eb8:	e5ef      	b.n	8000a9a <main+0x9a>
 8000eba:	bf00      	nop
 8000ebc:	08004884 	.word	0x08004884
 8000ec0:	08004890 	.word	0x08004890
 8000ec4:	08004894 	.word	0x08004894

08000ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b09c      	sub	sp, #112	; 0x70
 8000ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ece:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ed2:	2228      	movs	r2, #40	; 0x28
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f002 ffd4 	bl	8003e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000edc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eec:	463b      	mov	r3, r7
 8000eee:	2234      	movs	r2, #52	; 0x34
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f002 ffc6 	bl	8003e84 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000efc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f00:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f06:	2301      	movs	r3, #1
 8000f08:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f0a:	2310      	movs	r3, #16
 8000f0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f16:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f18:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 fbce 	bl	80026c4 <HAL_RCC_OscConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000f2e:	f000 f8ff 	bl	8001130 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f32:	230f      	movs	r3, #15
 8000f34:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f36:	2302      	movs	r3, #2
 8000f38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f002 fbf6 	bl	8003740 <HAL_RCC_ClockConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f5a:	f000 f8e9 	bl	8001130 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f5e:	2320      	movs	r3, #32
 8000f60:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f66:	463b      	mov	r3, r7
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f002 fdcf 	bl	8003b0c <HAL_RCCEx_PeriphCLKConfig>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000f74:	f000 f8dc 	bl	8001130 <Error_Handler>
  }
}
 8000f78:	bf00      	nop
 8000f7a:	3770      	adds	r7, #112	; 0x70
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000f86:	4a1c      	ldr	r2, [pc, #112]	; (8000ff8 <MX_I2C1_Init+0x78>)
 8000f88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000f8c:	4a1b      	ldr	r2, [pc, #108]	; (8000ffc <MX_I2C1_Init+0x7c>)
 8000f8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fba:	480e      	ldr	r0, [pc, #56]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000fbc:	f000 ff56 	bl	8001e6c <HAL_I2C_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fc6:	f000 f8b3 	bl	8001130 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000fce:	f001 fae1 	bl	8002594 <HAL_I2CEx_ConfigAnalogFilter>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fd8:	f000 f8aa 	bl	8001130 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_I2C1_Init+0x74>)
 8000fe0:	f001 fb23 	bl	800262a <HAL_I2CEx_ConfigDigitalFilter>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fea:	f000 f8a1 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200004b0 	.word	0x200004b0
 8000ff8:	40005400 	.word	0x40005400
 8000ffc:	2000090e 	.word	0x2000090e

08001000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001016:	4b43      	ldr	r3, [pc, #268]	; (8001124 <MX_GPIO_Init+0x124>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	4a42      	ldr	r2, [pc, #264]	; (8001124 <MX_GPIO_Init+0x124>)
 800101c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001020:	6153      	str	r3, [r2, #20]
 8001022:	4b40      	ldr	r3, [pc, #256]	; (8001124 <MX_GPIO_Init+0x124>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	4b3d      	ldr	r3, [pc, #244]	; (8001124 <MX_GPIO_Init+0x124>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	4a3c      	ldr	r2, [pc, #240]	; (8001124 <MX_GPIO_Init+0x124>)
 8001034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001038:	6153      	str	r3, [r2, #20]
 800103a:	4b3a      	ldr	r3, [pc, #232]	; (8001124 <MX_GPIO_Init+0x124>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001046:	4b37      	ldr	r3, [pc, #220]	; (8001124 <MX_GPIO_Init+0x124>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	4a36      	ldr	r2, [pc, #216]	; (8001124 <MX_GPIO_Init+0x124>)
 800104c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001050:	6153      	str	r3, [r2, #20]
 8001052:	4b34      	ldr	r3, [pc, #208]	; (8001124 <MX_GPIO_Init+0x124>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	4b31      	ldr	r3, [pc, #196]	; (8001124 <MX_GPIO_Init+0x124>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	4a30      	ldr	r2, [pc, #192]	; (8001124 <MX_GPIO_Init+0x124>)
 8001064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001068:	6153      	str	r3, [r2, #20]
 800106a:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <MX_GPIO_Init+0x124>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R2_Pin|GPIO_PIN_14|GPIO_PIN_15|R3_Pin
 8001076:	2200      	movs	r2, #0
 8001078:	f24c 4170 	movw	r1, #50288	; 0xc470
 800107c:	482a      	ldr	r0, [pc, #168]	; (8001128 <MX_GPIO_Init+0x128>)
 800107e:	f000 fedd 	bl	8001e3c <HAL_GPIO_WritePin>
                         |R4_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108c:	f000 fed6 	bl	8001e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R2_Pin PB14 PB15 R3_Pin
                           R4_Pin PB6 */
  GPIO_InitStruct.Pin = R2_Pin|GPIO_PIN_14|GPIO_PIN_15|R3_Pin
 8001090:	f24c 4370 	movw	r3, #50288	; 0xc470
 8001094:	617b      	str	r3, [r7, #20]
                          |R4_Pin|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	2301      	movs	r3, #1
 8001098:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	481f      	ldr	r0, [pc, #124]	; (8001128 <MX_GPIO_Init+0x128>)
 80010aa:	f000 fd3d 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : C4_Pin */
  GPIO_InitStruct.Pin = C4_Pin;
 80010ae:	2380      	movs	r3, #128	; 0x80
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b6:	2301      	movs	r3, #1
 80010b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(C4_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	481a      	ldr	r0, [pc, #104]	; (800112c <MX_GPIO_Init+0x12c>)
 80010c2:	f000 fd31 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : R1_Pin */
  GPIO_InitStruct.Pin = R1_Pin;
 80010c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(R1_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e2:	f000 fd21 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : C3_Pin C2_Pin */
  GPIO_InitStruct.Pin = C3_Pin|C2_Pin;
 80010e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fe:	f000 fd13 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : C1_Pin */
  GPIO_InitStruct.Pin = C1_Pin;
 8001102:	2308      	movs	r3, #8
 8001104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800110a:	2301      	movs	r3, #1
 800110c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(C1_GPIO_Port, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <MX_GPIO_Init+0x128>)
 8001116:	f000 fd07 	bl	8001b28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	; 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000
 8001128:	48000400 	.word	0x48000400
 800112c:	48000800 	.word	0x48000800

08001130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001134:	b672      	cpsid	i
}
 8001136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001138:	e7fe      	b.n	8001138 <Error_Handler+0x8>
	...

0800113c <write_byte>:
};



void write_byte (uint8_t byte)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	e01a      	b.n	8001182 <write_byte+0x46>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001152:	4810      	ldr	r0, [pc, #64]	; (8001194 <write_byte+0x58>)
 8001154:	f000 fe72 	bl	8001e3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800115e:	b2db      	uxtb	r3, r3
 8001160:	461a      	mov	r2, r3
 8001162:	2140      	movs	r1, #64	; 0x40
 8001164:	480b      	ldr	r0, [pc, #44]	; (8001194 <write_byte+0x58>)
 8001166:	f000 fe69 	bl	8001e3c <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 8001170:	2201      	movs	r2, #1
 8001172:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001176:	4807      	ldr	r0, [pc, #28]	; (8001194 <write_byte+0x58>)
 8001178:	f000 fe60 	bl	8001e3c <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	3301      	adds	r3, #1
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2b07      	cmp	r3, #7
 8001186:	dde1      	ble.n	800114c <write_byte+0x10>
	}
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	48000400 	.word	0x48000400

08001198 <write_max_cmd>:


void write_max_cmd (uint8_t address, uint8_t cmd)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	460a      	mov	r2, r1
 80011a2:	71fb      	strb	r3, [r7, #7]
 80011a4:	4613      	mov	r3, r2
 80011a6:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 80011a8:	2200      	movs	r2, #0
 80011aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ae:	4812      	ldr	r0, [pc, #72]	; (80011f8 <write_max_cmd+0x60>)
 80011b0:	f000 fe44 	bl	8001e3c <HAL_GPIO_WritePin>
	for (int i=0;i<num; i++)
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	e00a      	b.n	80011d0 <write_max_cmd+0x38>
	{
		write_byte (address);
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ffbd 	bl	800113c <write_byte>
		write_byte (cmd); 
 80011c2:	79bb      	ldrb	r3, [r7, #6]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ffb9 	bl	800113c <write_byte>
	for (int i=0;i<num; i++)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	3301      	adds	r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	ddf1      	ble.n	80011ba <write_max_cmd+0x22>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 80011d6:	2200      	movs	r2, #0
 80011d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011dc:	4806      	ldr	r0, [pc, #24]	; (80011f8 <write_max_cmd+0x60>)
 80011de:	f000 fe2d 	bl	8001e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 80011e2:	2201      	movs	r2, #1
 80011e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e8:	4803      	ldr	r0, [pc, #12]	; (80011f8 <write_max_cmd+0x60>)
 80011ea:	f000 fe27 	bl	8001e3c <HAL_GPIO_WritePin>
}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	48000400 	.word	0x48000400

080011fc <setled>:


void setled(uint8_t row, uint8_t col, uint8_t value)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
 8001206:	460b      	mov	r3, r1
 8001208:	71bb      	strb	r3, [r7, #6]
 800120a:	4613      	mov	r3, r2
 800120c:	717b      	strb	r3, [r7, #5]
  bitWrite(buffer[col], row, value);
 800120e:	797b      	ldrb	r3, [r7, #5]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00d      	beq.n	8001230 <setled+0x34>
 8001214:	79bb      	ldrb	r3, [r7, #6]
 8001216:	4a2e      	ldr	r2, [pc, #184]	; (80012d0 <setled+0xd4>)
 8001218:	5cd1      	ldrb	r1, [r2, r3]
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2201      	movs	r2, #1
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	b2da      	uxtb	r2, r3
 8001224:	79bb      	ldrb	r3, [r7, #6]
 8001226:	430a      	orrs	r2, r1
 8001228:	b2d1      	uxtb	r1, r2
 800122a:	4a29      	ldr	r2, [pc, #164]	; (80012d0 <setled+0xd4>)
 800122c:	54d1      	strb	r1, [r2, r3]
 800122e:	e00e      	b.n	800124e <setled+0x52>
 8001230:	79bb      	ldrb	r3, [r7, #6]
 8001232:	4a27      	ldr	r2, [pc, #156]	; (80012d0 <setled+0xd4>)
 8001234:	5cd1      	ldrb	r1, [r2, r3]
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	2201      	movs	r2, #1
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	b2da      	uxtb	r2, r3
 8001244:	79bb      	ldrb	r3, [r7, #6]
 8001246:	400a      	ands	r2, r1
 8001248:	b2d1      	uxtb	r1, r2
 800124a:	4a21      	ldr	r2, [pc, #132]	; (80012d0 <setled+0xd4>)
 800124c:	54d1      	strb	r1, [r2, r3]

	int n = col / 8;
 800124e:	79bb      	ldrb	r3, [r7, #6]
 8001250:	08db      	lsrs	r3, r3, #3
 8001252:	b2db      	uxtb	r3, r3
 8001254:	613b      	str	r3, [r7, #16]
	int c = col % 8;
 8001256:	79bb      	ldrb	r3, [r7, #6]
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW    
 800125e:	2200      	movs	r2, #0
 8001260:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001264:	481b      	ldr	r0, [pc, #108]	; (80012d4 <setled+0xd8>)
 8001266:	f000 fde9 	bl	8001e3c <HAL_GPIO_WritePin>
	for (int i=0; i<num; i++) 
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	e01b      	b.n	80012a8 <setled+0xac>
	{
		if (i == (num-(n+1)))
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	425b      	negs	r3, r3
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	429a      	cmp	r2, r3
 8001278:	d10d      	bne.n	8001296 <setled+0x9a>
		{
			write_byte (((c+1)));
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	3301      	adds	r3, #1
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ff5a 	bl	800113c <write_byte>
			write_byte (buffer[col]);
 8001288:	79bb      	ldrb	r3, [r7, #6]
 800128a:	4a11      	ldr	r2, [pc, #68]	; (80012d0 <setled+0xd4>)
 800128c:	5cd3      	ldrb	r3, [r2, r3]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff54 	bl	800113c <write_byte>
 8001294:	e005      	b.n	80012a2 <setled+0xa6>
		}
		else
		{
			write_byte (0);
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff ff50 	bl	800113c <write_byte>
			write_byte (0);
 800129c:	2000      	movs	r0, #0
 800129e:	f7ff ff4d 	bl	800113c <write_byte>
	for (int i=0; i<num; i++) 
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	3301      	adds	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	dde0      	ble.n	8001270 <setled+0x74>
		}
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW 
 80012ae:	2200      	movs	r2, #0
 80012b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012b4:	4807      	ldr	r0, [pc, #28]	; (80012d4 <setled+0xd8>)
 80012b6:	f000 fdc1 	bl	8001e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH 
 80012ba:	2201      	movs	r2, #1
 80012bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012c0:	4804      	ldr	r0, [pc, #16]	; (80012d4 <setled+0xd8>)
 80012c2:	f000 fdbb 	bl	8001e3c <HAL_GPIO_WritePin>
}
 80012c6:	bf00      	nop
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000504 	.word	0x20000504
 80012d4:	48000400 	.word	0x48000400

080012d8 <setrow>:


void setrow(uint8_t row, uint8_t value)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	460a      	mov	r2, r1
 80012e2:	71fb      	strb	r3, [r7, #7]
 80012e4:	4613      	mov	r3, r2
 80012e6:	71bb      	strb	r3, [r7, #6]
	int n = row / 8;
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	08db      	lsrs	r3, r3, #3
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	617b      	str	r3, [r7, #20]
	int r = row % 8;
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	613b      	str	r3, [r7, #16]
	
	uint8_t store = value;
 80012f8:	79bb      	ldrb	r3, [r7, #6]
 80012fa:	73fb      	strb	r3, [r7, #15]
	for (int i=0; i<num; i++) 
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
 8001300:	e02d      	b.n	800135e <setrow+0x86>
	{
		if (i == ((n)))
 8001302:	69fa      	ldr	r2, [r7, #28]
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	429a      	cmp	r2, r3
 8001308:	d120      	bne.n	800134c <setrow+0x74>
		{
//			for (int col=0+(8*n); col<8+(8*n); col++)  // uncomment this if the character looks inverted about X axis
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	3307      	adds	r3, #7
 8001310:	61bb      	str	r3, [r7, #24]
 8001312:	e015      	b.n	8001340 <setrow+0x68>
			{
				bool b = value&0x80;
 8001314:	79bb      	ldrb	r3, [r7, #6]
 8001316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131a:	2b00      	cmp	r3, #0
 800131c:	bf14      	ite	ne
 800131e:	2301      	movne	r3, #1
 8001320:	2300      	moveq	r3, #0
 8001322:	73bb      	strb	r3, [r7, #14]
				setled (r, col, b);
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	b2d1      	uxtb	r1, r2
 800132c:	7bba      	ldrb	r2, [r7, #14]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff64 	bl	80011fc <setled>
				value<<=1;
 8001334:	79bb      	ldrb	r3, [r7, #6]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	71bb      	strb	r3, [r7, #6]
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	3b01      	subs	r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	429a      	cmp	r2, r3
 8001348:	dae4      	bge.n	8001314 <setrow+0x3c>
 800134a:	e005      	b.n	8001358 <setrow+0x80>
			}
		}
		else
		{
			write_byte (0);
 800134c:	2000      	movs	r0, #0
 800134e:	f7ff fef5 	bl	800113c <write_byte>
			write_byte (0);
 8001352:	2000      	movs	r0, #0
 8001354:	f7ff fef2 	bl	800113c <write_byte>
	for (int i=0; i<num; i++) 
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	3301      	adds	r3, #1
 800135c:	61fb      	str	r3, [r7, #28]
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	2b00      	cmp	r3, #0
 8001362:	ddce      	ble.n	8001302 <setrow+0x2a>
		}
	}
	buffer_row[row] = store;
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	4903      	ldr	r1, [pc, #12]	; (8001374 <setrow+0x9c>)
 8001368:	7bfa      	ldrb	r2, [r7, #15]
 800136a:	54ca      	strb	r2, [r1, r3]
}
 800136c:	bf00      	nop
 800136e:	3720      	adds	r7, #32
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000554 	.word	0x20000554

08001378 <write_char>:
		


void write_char (char c, uint8_t max)  
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	460a      	mov	r2, r1
 8001382:	71fb      	strb	r3, [r7, #7]
 8001384:	4613      	mov	r3, r2
 8001386:	71bb      	strb	r3, [r7, #6]
	int width = CH[8*c];
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	4a16      	ldr	r2, [pc, #88]	; (80013e8 <write_char+0x70>)
 800138e:	5cd3      	ldrb	r3, [r2, r3]
 8001390:	60fb      	str	r3, [r7, #12]
	int start= (8*c)+1;
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	3301      	adds	r3, #1
 8001398:	60bb      	str	r3, [r7, #8]
	int row =6;
 800139a:	2306      	movs	r3, #6
 800139c:	617b      	str	r3, [r7, #20]
	for (int j=start; j<(start+width); j++) 
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	e016      	b.n	80013d2 <write_char+0x5a>
//	for (int j=start+7; j>=(start); j--)   // uncomment this if the character looks inverted about Y axis
	{
		setrow (row+(8*(max-1)), CH[j]);
 80013a4:	79bb      	ldrb	r3, [r7, #6]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	4413      	add	r3, r2
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	490c      	ldr	r1, [pc, #48]	; (80013e8 <write_char+0x70>)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	440b      	add	r3, r1
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4619      	mov	r1, r3
 80013c0:	4610      	mov	r0, r2
 80013c2:	f7ff ff89 	bl	80012d8 <setrow>
		row--;
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
	for (int j=start; j<(start+width); j++) 
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	3301      	adds	r3, #1
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4413      	add	r3, r2
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	429a      	cmp	r2, r3
 80013dc:	dbe2      	blt.n	80013a4 <write_char+0x2c>
	}
}
 80013de:	bf00      	nop
 80013e0:	bf00      	nop
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000000 	.word	0x20000000

080013ec <shift_char>:
					break;
			}			
}	
		
void shift_char (char c, uint32_t speed, char direction)  
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	71fb      	strb	r3, [r7, #7]
 80013f8:	4613      	mov	r3, r2
 80013fa:	71bb      	strb	r3, [r7, #6]
	int width = CH[8*c];
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	4a22      	ldr	r2, [pc, #136]	; (800148c <shift_char+0xa0>)
 8001402:	5cd3      	ldrb	r3, [r2, r3]
 8001404:	60fb      	str	r3, [r7, #12]
	int start= (8*c)+1;
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	3301      	adds	r3, #1
 800140c:	60bb      	str	r3, [r7, #8]

		switch (direction)
 800140e:	79bb      	ldrb	r3, [r7, #6]
 8001410:	2b4c      	cmp	r3, #76	; 0x4c
 8001412:	d002      	beq.n	800141a <shift_char+0x2e>
 8001414:	2b52      	cmp	r3, #82	; 0x52
 8001416:	d01a      	beq.n	800144e <shift_char+0x62>
						HAL_Delay (speed);
					}
					break;
			
				default :
					break;
 8001418:	e034      	b.n	8001484 <shift_char+0x98>
					for (int j=start; j<(start+width+1); j++)
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	e00f      	b.n	8001440 <shift_char+0x54>
						setrow (0, CH[j]);
 8001420:	4a1a      	ldr	r2, [pc, #104]	; (800148c <shift_char+0xa0>)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	4413      	add	r3, r2
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	4619      	mov	r1, r3
 800142a:	2000      	movs	r0, #0
 800142c:	f7ff ff54 	bl	80012d8 <setrow>
						shiftleft();
 8001430:	f000 f878 	bl	8001524 <shiftleft>
						HAL_Delay (speed);
 8001434:	6838      	ldr	r0, [r7, #0]
 8001436:	f000 fa6d 	bl	8001914 <HAL_Delay>
					for (int j=start; j<(start+width+1); j++)
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	3301      	adds	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4413      	add	r3, r2
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	429a      	cmp	r2, r3
 800144a:	dde9      	ble.n	8001420 <shift_char+0x34>
						break;
 800144c:	e01a      	b.n	8001484 <shift_char+0x98>
					for (int j=start+width+1; j>=(start); j--)
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4413      	add	r3, r2
 8001454:	3301      	adds	r3, #1
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	e00f      	b.n	800147a <shift_char+0x8e>
						setrow ((num*8)-1, CH[j]);
 800145a:	4a0c      	ldr	r2, [pc, #48]	; (800148c <shift_char+0xa0>)
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4413      	add	r3, r2
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	4619      	mov	r1, r3
 8001464:	2007      	movs	r0, #7
 8001466:	f7ff ff37 	bl	80012d8 <setrow>
						shiftright();
 800146a:	f000 f893 	bl	8001594 <shiftright>
						HAL_Delay (speed);
 800146e:	6838      	ldr	r0, [r7, #0]
 8001470:	f000 fa50 	bl	8001914 <HAL_Delay>
					for (int j=start+width+1; j>=(start); j--)
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	3b01      	subs	r3, #1
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	429a      	cmp	r2, r3
 8001480:	daeb      	bge.n	800145a <shift_char+0x6e>
					break;
 8001482:	bf00      	nop
			}
}
 8001484:	bf00      	nop
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000000 	.word	0x20000000

08001490 <scroll_string>:



void scroll_string (uint8_t *string, uint32_t speed, char direction)
{	
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	4613      	mov	r3, r2
 800149c:	71fb      	strb	r3, [r7, #7]
	while (*string != 0) 
 800149e:	e009      	b.n	80014b4 <scroll_string+0x24>
	{	
		shift_char (*string, speed, direction);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	79fa      	ldrb	r2, [r7, #7]
 80014a6:	68b9      	ldr	r1, [r7, #8]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff9f 	bl	80013ec <shift_char>
		string++;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	3301      	adds	r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
	while (*string != 0) 
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f1      	bne.n	80014a0 <scroll_string+0x10>
  }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <max_clear>:



void max_clear(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
	for (int i=0; i<num*8; i++) 
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	e008      	b.n	80014e6 <max_clear+0x1e>
		setrow(i,0);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fefc 	bl	80012d8 <setrow>
	for (int i=0; i<num*8; i++) 
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3301      	adds	r3, #1
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b07      	cmp	r3, #7
 80014ea:	ddf3      	ble.n	80014d4 <max_clear+0xc>
		
	for (int i=0; i<80; i++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	e00c      	b.n	800150c <max_clear+0x44>
	{
		buffer[i] = 0;
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <max_clear+0x54>)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
	  buffer_row[i] = 0;
 80014fc:	4a08      	ldr	r2, [pc, #32]	; (8001520 <max_clear+0x58>)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	4413      	add	r3, r2
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	2b4f      	cmp	r3, #79	; 0x4f
 8001510:	ddef      	ble.n	80014f2 <max_clear+0x2a>
	}
}
 8001512:	bf00      	nop
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000504 	.word	0x20000504
 8001520:	20000554 	.word	0x20000554

08001524 <shiftleft>:



void shiftleft(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
	int last = num*8-1;
 800152a:	2307      	movs	r3, #7
 800152c:	60bb      	str	r3, [r7, #8]
	uint8_t old = buffer_row[last];
 800152e:	4a18      	ldr	r2, [pc, #96]	; (8001590 <shiftleft+0x6c>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	4413      	add	r3, r2
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	71fb      	strb	r3, [r7, #7]
	int i;
	for (i=0; i<num*8; i++)
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	e00c      	b.n	8001558 <shiftleft+0x34>
	{
		setrow(i, buffer_row[i]);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4913      	ldr	r1, [pc, #76]	; (8001590 <shiftleft+0x6c>)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	440b      	add	r3, r1
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	4619      	mov	r1, r3
 800154c:	4610      	mov	r0, r2
 800154e:	f7ff fec3 	bl	80012d8 <setrow>
	for (i=0; i<num*8; i++)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3301      	adds	r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2b07      	cmp	r3, #7
 800155c:	ddef      	ble.n	800153e <shiftleft+0x1a>
	}
	for (i=79; i>0; i--)
 800155e:	234f      	movs	r3, #79	; 0x4f
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	e00b      	b.n	800157c <shiftleft+0x58>
	{
 		buffer_row[i] = buffer_row[i-1];
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	3b01      	subs	r3, #1
 8001568:	4a09      	ldr	r2, [pc, #36]	; (8001590 <shiftleft+0x6c>)
 800156a:	5cd1      	ldrb	r1, [r2, r3]
 800156c:	4a08      	ldr	r2, [pc, #32]	; (8001590 <shiftleft+0x6c>)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4413      	add	r3, r2
 8001572:	460a      	mov	r2, r1
 8001574:	701a      	strb	r2, [r3, #0]
	for (i=79; i>0; i--)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3b01      	subs	r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2b00      	cmp	r3, #0
 8001580:	dcf0      	bgt.n	8001564 <shiftleft+0x40>
	}
	
	buffer_row[0] = old;
 8001582:	4a03      	ldr	r2, [pc, #12]	; (8001590 <shiftleft+0x6c>)
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	7013      	strb	r3, [r2, #0]
}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000554 	.word	0x20000554

08001594 <shiftright>:


void shiftright(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
	int last = num*8-1;	
 800159a:	2307      	movs	r3, #7
 800159c:	607b      	str	r3, [r7, #4]
	uint8_t old = buffer_row[0];
 800159e:	4b17      	ldr	r3, [pc, #92]	; (80015fc <shiftright+0x68>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	70fb      	strb	r3, [r7, #3]
	
	for (int i=last; i>=0; i--)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	e00c      	b.n	80015c4 <shiftright+0x30>
	{
		setrow (i, buffer_row[i]);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4913      	ldr	r1, [pc, #76]	; (80015fc <shiftright+0x68>)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	440b      	add	r3, r1
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	4619      	mov	r1, r3
 80015b8:	4610      	mov	r0, r2
 80015ba:	f7ff fe8d 	bl	80012d8 <setrow>
	for (int i=last; i>=0; i--)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	daef      	bge.n	80015aa <shiftright+0x16>
	}
	
	for (int i=0; i<80; i++)
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	e00b      	b.n	80015e8 <shiftright+0x54>
	{
		buffer_row[i] = buffer_row[i+1];
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	3301      	adds	r3, #1
 80015d4:	4a09      	ldr	r2, [pc, #36]	; (80015fc <shiftright+0x68>)
 80015d6:	5cd1      	ldrb	r1, [r2, r3]
 80015d8:	4a08      	ldr	r2, [pc, #32]	; (80015fc <shiftright+0x68>)
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	4413      	add	r3, r2
 80015de:	460a      	mov	r2, r1
 80015e0:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	3301      	adds	r3, #1
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	2b4f      	cmp	r3, #79	; 0x4f
 80015ec:	ddf0      	ble.n	80015d0 <shiftright+0x3c>
	}
	
	buffer_row[num*8-1] = old;
 80015ee:	4a03      	ldr	r2, [pc, #12]	; (80015fc <shiftright+0x68>)
 80015f0:	78fb      	ldrb	r3, [r7, #3]
 80015f2:	71d3      	strb	r3, [r2, #7]
}
 80015f4:	bf00      	nop
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000554 	.word	0x20000554

08001600 <max_init>:



void max_init (uint8_t brightness)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
	write_max_cmd(0x09, 0x00);       //  no decoding
 800160a:	2100      	movs	r1, #0
 800160c:	2009      	movs	r0, #9
 800160e:	f7ff fdc3 	bl	8001198 <write_max_cmd>
	write_max_cmd(0x0b, 0x07);       //  scan limit = 8 LEDs
 8001612:	2107      	movs	r1, #7
 8001614:	200b      	movs	r0, #11
 8001616:	f7ff fdbf 	bl	8001198 <write_max_cmd>
	write_max_cmd(0x0c, 0x01);       //  power down =0,normal mode = 1
 800161a:	2101      	movs	r1, #1
 800161c:	200c      	movs	r0, #12
 800161e:	f7ff fdbb 	bl	8001198 <write_max_cmd>
	write_max_cmd(0x0f, 0x00);       //  no test display
 8001622:	2100      	movs	r1, #0
 8001624:	200f      	movs	r0, #15
 8001626:	f7ff fdb7 	bl	8001198 <write_max_cmd>
	
	max_clear ();
 800162a:	f7ff ff4d 	bl	80014c8 <max_clear>
	
	write_max_cmd(0x0a, brightness);       //  brightness intensity
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	4619      	mov	r1, r3
 8001632:	200a      	movs	r0, #10
 8001634:	f7ff fdb0 	bl	8001198 <write_max_cmd>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <HAL_MspInit+0x44>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <HAL_MspInit+0x44>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6193      	str	r3, [r2, #24]
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <HAL_MspInit+0x44>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <HAL_MspInit+0x44>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	4a08      	ldr	r2, [pc, #32]	; (8001684 <HAL_MspInit+0x44>)
 8001664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001668:	61d3      	str	r3, [r2, #28]
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_MspInit+0x44>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001676:	2007      	movs	r0, #7
 8001678:	f000 fa22 	bl	8001ac0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40021000 	.word	0x40021000

08001688 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a17      	ldr	r2, [pc, #92]	; (8001704 <HAL_I2C_MspInit+0x7c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d128      	bne.n	80016fc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <HAL_I2C_MspInit+0x80>)
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	4a16      	ldr	r2, [pc, #88]	; (8001708 <HAL_I2C_MspInit+0x80>)
 80016b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b4:	6153      	str	r3, [r2, #20]
 80016b6:	4b14      	ldr	r3, [pc, #80]	; (8001708 <HAL_I2C_MspInit+0x80>)
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c8:	2312      	movs	r3, #18
 80016ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016d4:	2304      	movs	r3, #4
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4619      	mov	r1, r3
 80016de:	480b      	ldr	r0, [pc, #44]	; (800170c <HAL_I2C_MspInit+0x84>)
 80016e0:	f000 fa22 	bl	8001b28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <HAL_I2C_MspInit+0x80>)
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	4a07      	ldr	r2, [pc, #28]	; (8001708 <HAL_I2C_MspInit+0x80>)
 80016ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ee:	61d3      	str	r3, [r2, #28]
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_I2C_MspInit+0x80>)
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016fc:	bf00      	nop
 80016fe:	3728      	adds	r7, #40	; 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40005400 	.word	0x40005400
 8001708:	40021000 	.word	0x40021000
 800170c:	48000400 	.word	0x48000400

08001710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <NMI_Handler+0x4>

08001716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <HardFault_Handler+0x4>

0800171c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <MemManage_Handler+0x4>

08001722 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001726:	e7fe      	b.n	8001726 <BusFault_Handler+0x4>

08001728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800172c:	e7fe      	b.n	800172c <UsageFault_Handler+0x4>

0800172e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175c:	f000 f8ba 	bl	80018d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}

08001764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800176c:	4a14      	ldr	r2, [pc, #80]	; (80017c0 <_sbrk+0x5c>)
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <_sbrk+0x60>)
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001778:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <_sbrk+0x64>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <_sbrk+0x64>)
 8001782:	4a12      	ldr	r2, [pc, #72]	; (80017cc <_sbrk+0x68>)
 8001784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <_sbrk+0x64>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	429a      	cmp	r2, r3
 8001792:	d207      	bcs.n	80017a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001794:	f002 fb4c 	bl	8003e30 <__errno>
 8001798:	4603      	mov	r3, r0
 800179a:	220c      	movs	r2, #12
 800179c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
 80017a2:	e009      	b.n	80017b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <_sbrk+0x64>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <_sbrk+0x64>)
 80017b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017b6:	68fb      	ldr	r3, [r7, #12]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20004000 	.word	0x20004000
 80017c4:	00000400 	.word	0x00000400
 80017c8:	200005a4 	.word	0x200005a4
 80017cc:	200005c0 	.word	0x200005c0

080017d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <SystemInit+0x20>)
 80017d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <SystemInit+0x20>)
 80017dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800182c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80017f8:	f7ff ffea 	bl	80017d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017fc:	480c      	ldr	r0, [pc, #48]	; (8001830 <LoopForever+0x6>)
  ldr r1, =_edata
 80017fe:	490d      	ldr	r1, [pc, #52]	; (8001834 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <LoopForever+0xe>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001814:	4c0a      	ldr	r4, [pc, #40]	; (8001840 <LoopForever+0x16>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001822:	f002 fb0b 	bl	8003e3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001826:	f7ff f8eb 	bl	8000a00 <main>

0800182a <LoopForever>:

LoopForever:
    b LoopForever
 800182a:	e7fe      	b.n	800182a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800182c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001834:	20000490 	.word	0x20000490
  ldr r2, =_sidata
 8001838:	08004914 	.word	0x08004914
  ldr r2, =_sbss
 800183c:	20000490 	.word	0x20000490
  ldr r4, =_ebss
 8001840:	200005bc 	.word	0x200005bc

08001844 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001844:	e7fe      	b.n	8001844 <ADC1_IRQHandler>
	...

08001848 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_Init+0x28>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a07      	ldr	r2, [pc, #28]	; (8001870 <HAL_Init+0x28>)
 8001852:	f043 0310 	orr.w	r3, r3, #16
 8001856:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001858:	2003      	movs	r0, #3
 800185a:	f000 f931 	bl	8001ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800185e:	2000      	movs	r0, #0
 8001860:	f000 f808 	bl	8001874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001864:	f7ff feec 	bl	8001640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40022000 	.word	0x40022000

08001874 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_InitTick+0x54>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_InitTick+0x58>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188a:	fbb3 f3f1 	udiv	r3, r3, r1
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f93b 	bl	8001b0e <HAL_SYSTICK_Config>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e00e      	b.n	80018c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b0f      	cmp	r3, #15
 80018a6:	d80a      	bhi.n	80018be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a8:	2200      	movs	r2, #0
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f000 f911 	bl	8001ad6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b4:	4a06      	ldr	r2, [pc, #24]	; (80018d0 <HAL_InitTick+0x5c>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e000      	b.n	80018c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000420 	.word	0x20000420
 80018cc:	20000428 	.word	0x20000428
 80018d0:	20000424 	.word	0x20000424

080018d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_IncTick+0x20>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_IncTick+0x24>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <HAL_IncTick+0x24>)
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000428 	.word	0x20000428
 80018f8:	200005a8 	.word	0x200005a8

080018fc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return uwTick;  
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <HAL_GetTick+0x14>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	200005a8 	.word	0x200005a8

08001914 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800191c:	f7ff ffee 	bl	80018fc <HAL_GetTick>
 8001920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800192c:	d005      	beq.n	800193a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_Delay+0x44>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4413      	add	r3, r2
 8001938:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800193a:	bf00      	nop
 800193c:	f7ff ffde 	bl	80018fc <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	429a      	cmp	r2, r3
 800194a:	d8f7      	bhi.n	800193c <HAL_Delay+0x28>
  {
  }
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000428 	.word	0x20000428

0800195c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <__NVIC_SetPriorityGrouping+0x44>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001978:	4013      	ands	r3, r2
 800197a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800198c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198e:	4a04      	ldr	r2, [pc, #16]	; (80019a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	60d3      	str	r3, [r2, #12]
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a8:	4b04      	ldr	r3, [pc, #16]	; (80019bc <__NVIC_GetPriorityGrouping+0x18>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	f003 0307 	and.w	r3, r3, #7
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	6039      	str	r1, [r7, #0]
 80019ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	db0a      	blt.n	80019ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	490c      	ldr	r1, [pc, #48]	; (8001a0c <__NVIC_SetPriority+0x4c>)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	0112      	lsls	r2, r2, #4
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	440b      	add	r3, r1
 80019e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e8:	e00a      	b.n	8001a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4908      	ldr	r1, [pc, #32]	; (8001a10 <__NVIC_SetPriority+0x50>)
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	3b04      	subs	r3, #4
 80019f8:	0112      	lsls	r2, r2, #4
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	440b      	add	r3, r1
 80019fe:	761a      	strb	r2, [r3, #24]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000e100 	.word	0xe000e100
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b089      	sub	sp, #36	; 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f1c3 0307 	rsb	r3, r3, #7
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	bf28      	it	cs
 8001a32:	2304      	movcs	r3, #4
 8001a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	2b06      	cmp	r3, #6
 8001a3c:	d902      	bls.n	8001a44 <NVIC_EncodePriority+0x30>
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3b03      	subs	r3, #3
 8001a42:	e000      	b.n	8001a46 <NVIC_EncodePriority+0x32>
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	f04f 32ff 	mov.w	r2, #4294967295
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43da      	mvns	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	401a      	ands	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	43d9      	mvns	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	4313      	orrs	r3, r2
         );
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3724      	adds	r7, #36	; 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a8c:	d301      	bcc.n	8001a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00f      	b.n	8001ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a92:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <SysTick_Config+0x40>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9a:	210f      	movs	r1, #15
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa0:	f7ff ff8e 	bl	80019c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <SysTick_Config+0x40>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aaa:	4b04      	ldr	r3, [pc, #16]	; (8001abc <SysTick_Config+0x40>)
 8001aac:	2207      	movs	r2, #7
 8001aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	e000e010 	.word	0xe000e010

08001ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff47 	bl	800195c <__NVIC_SetPriorityGrouping>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae8:	f7ff ff5c 	bl	80019a4 <__NVIC_GetPriorityGrouping>
 8001aec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	6978      	ldr	r0, [r7, #20]
 8001af4:	f7ff ff8e 	bl	8001a14 <NVIC_EncodePriority>
 8001af8:	4602      	mov	r2, r0
 8001afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afe:	4611      	mov	r1, r2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff5d 	bl	80019c0 <__NVIC_SetPriority>
}
 8001b06:	bf00      	nop
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ffb0 	bl	8001a7c <SysTick_Config>
 8001b1c:	4603      	mov	r3, r0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b087      	sub	sp, #28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b36:	e14e      	b.n	8001dd6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	fa01 f303 	lsl.w	r3, r1, r3
 8001b44:	4013      	ands	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 8140 	beq.w	8001dd0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d005      	beq.n	8001b68 <HAL_GPIO_Init+0x40>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d130      	bne.n	8001bca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	f003 0201 	and.w	r2, r3, #1
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d017      	beq.n	8001c06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	2203      	movs	r2, #3
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d123      	bne.n	8001c5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	08da      	lsrs	r2, r3, #3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3208      	adds	r2, #8
 8001c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	220f      	movs	r2, #15
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4013      	ands	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	691a      	ldr	r2, [r3, #16]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	08da      	lsrs	r2, r3, #3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3208      	adds	r2, #8
 8001c54:	6939      	ldr	r1, [r7, #16]
 8001c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	2203      	movs	r2, #3
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 0203 	and.w	r2, r3, #3
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 809a 	beq.w	8001dd0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9c:	4b55      	ldr	r3, [pc, #340]	; (8001df4 <HAL_GPIO_Init+0x2cc>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	4a54      	ldr	r2, [pc, #336]	; (8001df4 <HAL_GPIO_Init+0x2cc>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6193      	str	r3, [r2, #24]
 8001ca8:	4b52      	ldr	r3, [pc, #328]	; (8001df4 <HAL_GPIO_Init+0x2cc>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cb4:	4a50      	ldr	r2, [pc, #320]	; (8001df8 <HAL_GPIO_Init+0x2d0>)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	3302      	adds	r3, #2
 8001cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	220f      	movs	r2, #15
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cde:	d013      	beq.n	8001d08 <HAL_GPIO_Init+0x1e0>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a46      	ldr	r2, [pc, #280]	; (8001dfc <HAL_GPIO_Init+0x2d4>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d00d      	beq.n	8001d04 <HAL_GPIO_Init+0x1dc>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a45      	ldr	r2, [pc, #276]	; (8001e00 <HAL_GPIO_Init+0x2d8>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d007      	beq.n	8001d00 <HAL_GPIO_Init+0x1d8>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a44      	ldr	r2, [pc, #272]	; (8001e04 <HAL_GPIO_Init+0x2dc>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d101      	bne.n	8001cfc <HAL_GPIO_Init+0x1d4>
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e006      	b.n	8001d0a <HAL_GPIO_Init+0x1e2>
 8001cfc:	2305      	movs	r3, #5
 8001cfe:	e004      	b.n	8001d0a <HAL_GPIO_Init+0x1e2>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e002      	b.n	8001d0a <HAL_GPIO_Init+0x1e2>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <HAL_GPIO_Init+0x1e2>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	f002 0203 	and.w	r2, r2, #3
 8001d10:	0092      	lsls	r2, r2, #2
 8001d12:	4093      	lsls	r3, r2
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d1a:	4937      	ldr	r1, [pc, #220]	; (8001df8 <HAL_GPIO_Init+0x2d0>)
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	089b      	lsrs	r3, r3, #2
 8001d20:	3302      	adds	r3, #2
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d28:	4b37      	ldr	r3, [pc, #220]	; (8001e08 <HAL_GPIO_Init+0x2e0>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d4c:	4a2e      	ldr	r2, [pc, #184]	; (8001e08 <HAL_GPIO_Init+0x2e0>)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d52:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <HAL_GPIO_Init+0x2e0>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d76:	4a24      	ldr	r2, [pc, #144]	; (8001e08 <HAL_GPIO_Init+0x2e0>)
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d7c:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <HAL_GPIO_Init+0x2e0>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001da0:	4a19      	ldr	r2, [pc, #100]	; (8001e08 <HAL_GPIO_Init+0x2e0>)
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001da6:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <HAL_GPIO_Init+0x2e0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001dca:	4a0f      	ldr	r2, [pc, #60]	; (8001e08 <HAL_GPIO_Init+0x2e0>)
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f47f aea9 	bne.w	8001b38 <HAL_GPIO_Init+0x10>
  }
}
 8001de6:	bf00      	nop
 8001de8:	bf00      	nop
 8001dea:	371c      	adds	r7, #28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40010000 	.word	0x40010000
 8001dfc:	48000400 	.word	0x48000400
 8001e00:	48000800 	.word	0x48000800
 8001e04:	48000c00 	.word	0x48000c00
 8001e08:	40010400 	.word	0x40010400

08001e0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691a      	ldr	r2, [r3, #16]
 8001e1c:	887b      	ldrh	r3, [r7, #2]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e24:	2301      	movs	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
 8001e28:	e001      	b.n	8001e2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e4c:	787b      	ldrb	r3, [r7, #1]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e58:	e002      	b.n	8001e60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e081      	b.n	8001f82 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d106      	bne.n	8001e98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff fbf8 	bl	8001688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2224      	movs	r2, #36	; 0x24
 8001e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0201 	bic.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ebc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ecc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d107      	bne.n	8001ee6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	e006      	b.n	8001ef4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ef2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d104      	bne.n	8001f06 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691a      	ldr	r2, [r3, #16]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69d9      	ldr	r1, [r3, #28]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1a      	ldr	r2, [r3, #32]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af02      	add	r7, sp, #8
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	461a      	mov	r2, r3
 8001f98:	460b      	mov	r3, r1
 8001f9a:	817b      	strh	r3, [r7, #10]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b20      	cmp	r3, #32
 8001faa:	f040 80da 	bne.w	8002162 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_I2C_Master_Transmit+0x30>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e0d3      	b.n	8002164 <HAL_I2C_Master_Transmit+0x1d8>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fc4:	f7ff fc9a 	bl	80018fc <HAL_GetTick>
 8001fc8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	2319      	movs	r3, #25
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f000 f8f0 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e0be      	b.n	8002164 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2221      	movs	r2, #33	; 0x21
 8001fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2210      	movs	r2, #16
 8001ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	893a      	ldrh	r2, [r7, #8]
 8002006:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002012:	b29b      	uxth	r3, r3
 8002014:	2bff      	cmp	r3, #255	; 0xff
 8002016:	d90e      	bls.n	8002036 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	22ff      	movs	r2, #255	; 0xff
 800201c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002022:	b2da      	uxtb	r2, r3
 8002024:	8979      	ldrh	r1, [r7, #10]
 8002026:	4b51      	ldr	r3, [pc, #324]	; (800216c <HAL_I2C_Master_Transmit+0x1e0>)
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 fa7e 	bl	8002530 <I2C_TransferConfig>
 8002034:	e06c      	b.n	8002110 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203a:	b29a      	uxth	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002044:	b2da      	uxtb	r2, r3
 8002046:	8979      	ldrh	r1, [r7, #10]
 8002048:	4b48      	ldr	r3, [pc, #288]	; (800216c <HAL_I2C_Master_Transmit+0x1e0>)
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 fa6d 	bl	8002530 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002056:	e05b      	b.n	8002110 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	6a39      	ldr	r1, [r7, #32]
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 f8fc 	bl	800225a <I2C_WaitOnTXISFlagUntilTimeout>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e07b      	b.n	8002164 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	781a      	ldrb	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	1c5a      	adds	r2, r3, #1
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002086:	b29b      	uxth	r3, r3
 8002088:	3b01      	subs	r3, #1
 800208a:	b29a      	uxth	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002094:	3b01      	subs	r3, #1
 8002096:	b29a      	uxth	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d034      	beq.n	8002110 <HAL_I2C_Master_Transmit+0x184>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d130      	bne.n	8002110 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	2200      	movs	r2, #0
 80020b6:	2180      	movs	r1, #128	; 0x80
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 f87f 	bl	80021bc <I2C_WaitOnFlagUntilTimeout>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e04d      	b.n	8002164 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	2bff      	cmp	r3, #255	; 0xff
 80020d0:	d90e      	bls.n	80020f0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	22ff      	movs	r2, #255	; 0xff
 80020d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	8979      	ldrh	r1, [r7, #10]
 80020e0:	2300      	movs	r3, #0
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 fa21 	bl	8002530 <I2C_TransferConfig>
 80020ee:	e00f      	b.n	8002110 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	8979      	ldrh	r1, [r7, #10]
 8002102:	2300      	movs	r3, #0
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 fa10 	bl	8002530 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002114:	b29b      	uxth	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d19e      	bne.n	8002058 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	6a39      	ldr	r1, [r7, #32]
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 f8e2 	bl	80022e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e01a      	b.n	8002164 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2220      	movs	r2, #32
 8002134:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6859      	ldr	r1, [r3, #4]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_I2C_Master_Transmit+0x1e4>)
 8002142:	400b      	ands	r3, r1
 8002144:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2220      	movs	r2, #32
 800214a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	e000      	b.n	8002164 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002162:	2302      	movs	r3, #2
  }
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	80002000 	.word	0x80002000
 8002170:	fe00e800 	.word	0xfe00e800

08002174 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b02      	cmp	r3, #2
 8002188:	d103      	bne.n	8002192 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2200      	movs	r2, #0
 8002190:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b01      	cmp	r3, #1
 800219e:	d007      	beq.n	80021b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699a      	ldr	r2, [r3, #24]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	619a      	str	r2, [r3, #24]
  }
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	4613      	mov	r3, r2
 80021ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021cc:	e031      	b.n	8002232 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d4:	d02d      	beq.n	8002232 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d6:	f7ff fb91 	bl	80018fc <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d302      	bcc.n	80021ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d122      	bne.n	8002232 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699a      	ldr	r2, [r3, #24]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	4013      	ands	r3, r2
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	bf0c      	ite	eq
 80021fc:	2301      	moveq	r3, #1
 80021fe:	2300      	movne	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	461a      	mov	r2, r3
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	429a      	cmp	r2, r3
 8002208:	d113      	bne.n	8002232 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	f043 0220 	orr.w	r2, r3, #32
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e00f      	b.n	8002252 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	699a      	ldr	r2, [r3, #24]
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4013      	ands	r3, r2
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	429a      	cmp	r2, r3
 8002240:	bf0c      	ite	eq
 8002242:	2301      	moveq	r3, #1
 8002244:	2300      	movne	r3, #0
 8002246:	b2db      	uxtb	r3, r3
 8002248:	461a      	mov	r2, r3
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	429a      	cmp	r2, r3
 800224e:	d0be      	beq.n	80021ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b084      	sub	sp, #16
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002266:	e033      	b.n	80022d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	68b9      	ldr	r1, [r7, #8]
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 f87f 	bl	8002370 <I2C_IsErrorOccurred>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e031      	b.n	80022e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002282:	d025      	beq.n	80022d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002284:	f7ff fb3a 	bl	80018fc <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	429a      	cmp	r2, r3
 8002292:	d302      	bcc.n	800229a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d11a      	bne.n	80022d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d013      	beq.n	80022d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ac:	f043 0220 	orr.w	r2, r3, #32
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e007      	b.n	80022e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d1c4      	bne.n	8002268 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022f4:	e02f      	b.n	8002356 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f838 	bl	8002370 <I2C_IsErrorOccurred>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e02d      	b.n	8002366 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800230a:	f7ff faf7 	bl	80018fc <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	429a      	cmp	r2, r3
 8002318:	d302      	bcc.n	8002320 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d11a      	bne.n	8002356 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	f003 0320 	and.w	r3, r3, #32
 800232a:	2b20      	cmp	r3, #32
 800232c:	d013      	beq.n	8002356 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	f043 0220 	orr.w	r2, r3, #32
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2220      	movs	r2, #32
 800233e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e007      	b.n	8002366 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f003 0320 	and.w	r3, r3, #32
 8002360:	2b20      	cmp	r3, #32
 8002362:	d1c8      	bne.n	80022f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08a      	sub	sp, #40	; 0x28
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800237c:	2300      	movs	r3, #0
 800237e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	2b00      	cmp	r3, #0
 800239a:	d068      	beq.n	800246e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2210      	movs	r2, #16
 80023a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023a4:	e049      	b.n	800243a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ac:	d045      	beq.n	800243a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023ae:	f7ff faa5 	bl	80018fc <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d302      	bcc.n	80023c4 <I2C_IsErrorOccurred+0x54>
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d13a      	bne.n	800243a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023e6:	d121      	bne.n	800242c <I2C_IsErrorOccurred+0xbc>
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023ee:	d01d      	beq.n	800242c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80023f0:	7cfb      	ldrb	r3, [r7, #19]
 80023f2:	2b20      	cmp	r3, #32
 80023f4:	d01a      	beq.n	800242c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002404:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002406:	f7ff fa79 	bl	80018fc <HAL_GetTick>
 800240a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800240c:	e00e      	b.n	800242c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800240e:	f7ff fa75 	bl	80018fc <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b19      	cmp	r3, #25
 800241a:	d907      	bls.n	800242c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	f043 0320 	orr.w	r3, r3, #32
 8002422:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800242a:	e006      	b.n	800243a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f003 0320 	and.w	r3, r3, #32
 8002436:	2b20      	cmp	r3, #32
 8002438:	d1e9      	bne.n	800240e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	f003 0320 	and.w	r3, r3, #32
 8002444:	2b20      	cmp	r3, #32
 8002446:	d003      	beq.n	8002450 <I2C_IsErrorOccurred+0xe0>
 8002448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0aa      	beq.n	80023a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002454:	2b00      	cmp	r3, #0
 8002456:	d103      	bne.n	8002460 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2220      	movs	r2, #32
 800245e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	f043 0304 	orr.w	r3, r3, #4
 8002466:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00b      	beq.n	8002498 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002490:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00b      	beq.n	80024ba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	f043 0308 	orr.w	r3, r3, #8
 80024a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00b      	beq.n	80024dc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	f043 0302 	orr.w	r3, r3, #2
 80024ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80024dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d01c      	beq.n	800251e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f7ff fe45 	bl	8002174 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6859      	ldr	r1, [r3, #4]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b0d      	ldr	r3, [pc, #52]	; (800252c <I2C_IsErrorOccurred+0x1bc>)
 80024f6:	400b      	ands	r3, r1
 80024f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	431a      	orrs	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2220      	movs	r2, #32
 800250a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800251e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002522:	4618      	mov	r0, r3
 8002524:	3728      	adds	r7, #40	; 0x28
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	fe00e800 	.word	0xfe00e800

08002530 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	607b      	str	r3, [r7, #4]
 800253a:	460b      	mov	r3, r1
 800253c:	817b      	strh	r3, [r7, #10]
 800253e:	4613      	mov	r3, r2
 8002540:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002542:	897b      	ldrh	r3, [r7, #10]
 8002544:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002548:	7a7b      	ldrb	r3, [r7, #9]
 800254a:	041b      	lsls	r3, r3, #16
 800254c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002550:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	4313      	orrs	r3, r2
 800255a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800255e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	6a3b      	ldr	r3, [r7, #32]
 8002568:	0d5b      	lsrs	r3, r3, #21
 800256a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <I2C_TransferConfig+0x60>)
 8002570:	430b      	orrs	r3, r1
 8002572:	43db      	mvns	r3, r3
 8002574:	ea02 0103 	and.w	r1, r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	430a      	orrs	r2, r1
 8002580:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002582:	bf00      	nop
 8002584:	371c      	adds	r7, #28
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	03ff63ff 	.word	0x03ff63ff

08002594 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b20      	cmp	r3, #32
 80025a8:	d138      	bne.n	800261c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e032      	b.n	800261e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2224      	movs	r2, #36	; 0x24
 80025c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0201 	bic.w	r2, r2, #1
 80025d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6819      	ldr	r1, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	e000      	b.n	800261e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800261c:	2302      	movs	r3, #2
  }
}
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800262a:	b480      	push	{r7}
 800262c:	b085      	sub	sp, #20
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b20      	cmp	r3, #32
 800263e:	d139      	bne.n	80026b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800264a:	2302      	movs	r3, #2
 800264c:	e033      	b.n	80026b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2224      	movs	r2, #36	; 0x24
 800265a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0201 	bic.w	r2, r2, #1
 800266c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800267c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	021b      	lsls	r3, r3, #8
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	4313      	orrs	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0201 	orr.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	e000      	b.n	80026b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026b4:	2302      	movs	r3, #2
  }
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026d4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d102      	bne.n	80026ea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	f001 b823 	b.w	8003730 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 817d 	beq.w	80029fa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002700:	4bbc      	ldr	r3, [pc, #752]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 030c 	and.w	r3, r3, #12
 8002708:	2b04      	cmp	r3, #4
 800270a:	d00c      	beq.n	8002726 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800270c:	4bb9      	ldr	r3, [pc, #740]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 030c 	and.w	r3, r3, #12
 8002714:	2b08      	cmp	r3, #8
 8002716:	d15c      	bne.n	80027d2 <HAL_RCC_OscConfig+0x10e>
 8002718:	4bb6      	ldr	r3, [pc, #728]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002724:	d155      	bne.n	80027d2 <HAL_RCC_OscConfig+0x10e>
 8002726:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800272a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800273a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273e:	fab3 f383 	clz	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	095b      	lsrs	r3, r3, #5
 8002746:	b2db      	uxtb	r3, r3
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b01      	cmp	r3, #1
 8002750:	d102      	bne.n	8002758 <HAL_RCC_OscConfig+0x94>
 8002752:	4ba8      	ldr	r3, [pc, #672]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	e015      	b.n	8002784 <HAL_RCC_OscConfig+0xc0>
 8002758:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800275c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800276c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002770:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002774:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002778:	fa93 f3a3 	rbit	r3, r3
 800277c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002780:	4b9c      	ldr	r3, [pc, #624]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002788:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800278c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002790:	fa92 f2a2 	rbit	r2, r2
 8002794:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002798:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800279c:	fab2 f282 	clz	r2, r2
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	f042 0220 	orr.w	r2, r2, #32
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	f002 021f 	and.w	r2, r2, #31
 80027ac:	2101      	movs	r1, #1
 80027ae:	fa01 f202 	lsl.w	r2, r1, r2
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 811f 	beq.w	80029f8 <HAL_RCC_OscConfig+0x334>
 80027ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f040 8116 	bne.w	80029f8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	f000 bfaf 	b.w	8003730 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e2:	d106      	bne.n	80027f2 <HAL_RCC_OscConfig+0x12e>
 80027e4:	4b83      	ldr	r3, [pc, #524]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a82      	ldr	r2, [pc, #520]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 80027ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	e036      	b.n	8002860 <HAL_RCC_OscConfig+0x19c>
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10c      	bne.n	800281c <HAL_RCC_OscConfig+0x158>
 8002802:	4b7c      	ldr	r3, [pc, #496]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a7b      	ldr	r2, [pc, #492]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	4b79      	ldr	r3, [pc, #484]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a78      	ldr	r2, [pc, #480]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002814:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e021      	b.n	8002860 <HAL_RCC_OscConfig+0x19c>
 800281c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002820:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800282c:	d10c      	bne.n	8002848 <HAL_RCC_OscConfig+0x184>
 800282e:	4b71      	ldr	r3, [pc, #452]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a70      	ldr	r2, [pc, #448]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	4b6e      	ldr	r3, [pc, #440]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a6d      	ldr	r2, [pc, #436]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	e00b      	b.n	8002860 <HAL_RCC_OscConfig+0x19c>
 8002848:	4b6a      	ldr	r3, [pc, #424]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a69      	ldr	r2, [pc, #420]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 800284e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	4b67      	ldr	r3, [pc, #412]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a66      	ldr	r2, [pc, #408]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 800285a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800285e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002860:	4b64      	ldr	r3, [pc, #400]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002864:	f023 020f 	bic.w	r2, r3, #15
 8002868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	495f      	ldr	r1, [pc, #380]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002876:	4313      	orrs	r3, r2
 8002878:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800287a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d059      	beq.n	800293e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288a:	f7ff f837 	bl	80018fc <HAL_GetTick>
 800288e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002892:	e00a      	b.n	80028aa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002894:	f7ff f832 	bl	80018fc <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b64      	cmp	r3, #100	; 0x64
 80028a2:	d902      	bls.n	80028aa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	f000 bf43 	b.w	8003730 <HAL_RCC_OscConfig+0x106c>
 80028aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ae:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80028be:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	095b      	lsrs	r3, r3, #5
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d102      	bne.n	80028dc <HAL_RCC_OscConfig+0x218>
 80028d6:	4b47      	ldr	r3, [pc, #284]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	e015      	b.n	8002908 <HAL_RCC_OscConfig+0x244>
 80028dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028e0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80028e8:	fa93 f3a3 	rbit	r3, r3
 80028ec:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80028f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028f4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80028f8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80028fc:	fa93 f3a3 	rbit	r3, r3
 8002900:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002904:	4b3b      	ldr	r3, [pc, #236]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800290c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002910:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002914:	fa92 f2a2 	rbit	r2, r2
 8002918:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800291c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002920:	fab2 f282 	clz	r2, r2
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	f042 0220 	orr.w	r2, r2, #32
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	f002 021f 	and.w	r2, r2, #31
 8002930:	2101      	movs	r1, #1
 8002932:	fa01 f202 	lsl.w	r2, r1, r2
 8002936:	4013      	ands	r3, r2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0ab      	beq.n	8002894 <HAL_RCC_OscConfig+0x1d0>
 800293c:	e05d      	b.n	80029fa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293e:	f7fe ffdd 	bl	80018fc <HAL_GetTick>
 8002942:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002946:	e00a      	b.n	800295e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002948:	f7fe ffd8 	bl	80018fc <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b64      	cmp	r3, #100	; 0x64
 8002956:	d902      	bls.n	800295e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	f000 bee9 	b.w	8003730 <HAL_RCC_OscConfig+0x106c>
 800295e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002962:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800296a:	fa93 f3a3 	rbit	r3, r3
 800296e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002972:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	095b      	lsrs	r3, r3, #5
 800297e:	b2db      	uxtb	r3, r3
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b01      	cmp	r3, #1
 8002988:	d102      	bne.n	8002990 <HAL_RCC_OscConfig+0x2cc>
 800298a:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	e015      	b.n	80029bc <HAL_RCC_OscConfig+0x2f8>
 8002990:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002994:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800299c:	fa93 f3a3 	rbit	r3, r3
 80029a0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80029a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029a8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80029ac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80029b0:	fa93 f3a3 	rbit	r3, r3
 80029b4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80029b8:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <HAL_RCC_OscConfig+0x330>)
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029c0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80029c4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80029c8:	fa92 f2a2 	rbit	r2, r2
 80029cc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80029d0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80029d4:	fab2 f282 	clz	r2, r2
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	f042 0220 	orr.w	r2, r2, #32
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	f002 021f 	and.w	r2, r2, #31
 80029e4:	2101      	movs	r1, #1
 80029e6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1ab      	bne.n	8002948 <HAL_RCC_OscConfig+0x284>
 80029f0:	e003      	b.n	80029fa <HAL_RCC_OscConfig+0x336>
 80029f2:	bf00      	nop
 80029f4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 817d 	beq.w	8002d0a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a10:	4ba6      	ldr	r3, [pc, #664]	; (8002cac <HAL_RCC_OscConfig+0x5e8>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 030c 	and.w	r3, r3, #12
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00b      	beq.n	8002a34 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a1c:	4ba3      	ldr	r3, [pc, #652]	; (8002cac <HAL_RCC_OscConfig+0x5e8>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 030c 	and.w	r3, r3, #12
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d172      	bne.n	8002b0e <HAL_RCC_OscConfig+0x44a>
 8002a28:	4ba0      	ldr	r3, [pc, #640]	; (8002cac <HAL_RCC_OscConfig+0x5e8>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d16c      	bne.n	8002b0e <HAL_RCC_OscConfig+0x44a>
 8002a34:	2302      	movs	r3, #2
 8002a36:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002a3e:	fa93 f3a3 	rbit	r3, r3
 8002a42:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002a46:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4a:	fab3 f383 	clz	r3, r3
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	095b      	lsrs	r3, r3, #5
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d102      	bne.n	8002a64 <HAL_RCC_OscConfig+0x3a0>
 8002a5e:	4b93      	ldr	r3, [pc, #588]	; (8002cac <HAL_RCC_OscConfig+0x5e8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	e013      	b.n	8002a8c <HAL_RCC_OscConfig+0x3c8>
 8002a64:	2302      	movs	r3, #2
 8002a66:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002a76:	2302      	movs	r3, #2
 8002a78:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002a7c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a80:	fa93 f3a3 	rbit	r3, r3
 8002a84:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002a88:	4b88      	ldr	r3, [pc, #544]	; (8002cac <HAL_RCC_OscConfig+0x5e8>)
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002a92:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002a96:	fa92 f2a2 	rbit	r2, r2
 8002a9a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002a9e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002aa2:	fab2 f282 	clz	r2, r2
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	f042 0220 	orr.w	r2, r2, #32
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	f002 021f 	and.w	r2, r2, #31
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x410>
 8002abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d002      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	f000 be2e 	b.w	8003730 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad4:	4b75      	ldr	r3, [pc, #468]	; (8002cac <HAL_RCC_OscConfig+0x5e8>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	21f8      	movs	r1, #248	; 0xf8
 8002aea:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002af2:	fa91 f1a1 	rbit	r1, r1
 8002af6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002afa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002afe:	fab1 f181 	clz	r1, r1
 8002b02:	b2c9      	uxtb	r1, r1
 8002b04:	408b      	lsls	r3, r1
 8002b06:	4969      	ldr	r1, [pc, #420]	; (8002cac <HAL_RCC_OscConfig+0x5e8>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0c:	e0fd      	b.n	8002d0a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 8088 	beq.w	8002c30 <HAL_RCC_OscConfig+0x56c>
 8002b20:	2301      	movs	r3, #1
 8002b22:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002b32:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	461a      	mov	r2, r3
 8002b48:	2301      	movs	r3, #1
 8002b4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fed6 	bl	80018fc <HAL_GetTick>
 8002b50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b54:	e00a      	b.n	8002b6c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b56:	f7fe fed1 	bl	80018fc <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d902      	bls.n	8002b6c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	f000 bde2 	b.w	8003730 <HAL_RCC_OscConfig+0x106c>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b72:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002b76:	fa93 f3a3 	rbit	r3, r3
 8002b7a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002b7e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	095b      	lsrs	r3, r3, #5
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d102      	bne.n	8002b9c <HAL_RCC_OscConfig+0x4d8>
 8002b96:	4b45      	ldr	r3, [pc, #276]	; (8002cac <HAL_RCC_OscConfig+0x5e8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	e013      	b.n	8002bc4 <HAL_RCC_OscConfig+0x500>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002bae:	2302      	movs	r3, #2
 8002bb0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002bb4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002bc0:	4b3a      	ldr	r3, [pc, #232]	; (8002cac <HAL_RCC_OscConfig+0x5e8>)
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002bca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002bce:	fa92 f2a2 	rbit	r2, r2
 8002bd2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002bd6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002bda:	fab2 f282 	clz	r2, r2
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	f042 0220 	orr.w	r2, r2, #32
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	f002 021f 	and.w	r2, r2, #31
 8002bea:	2101      	movs	r1, #1
 8002bec:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0af      	beq.n	8002b56 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf6:	4b2d      	ldr	r3, [pc, #180]	; (8002cac <HAL_RCC_OscConfig+0x5e8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	21f8      	movs	r1, #248	; 0xf8
 8002c0c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002c14:	fa91 f1a1 	rbit	r1, r1
 8002c18:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002c1c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002c20:	fab1 f181 	clz	r1, r1
 8002c24:	b2c9      	uxtb	r1, r1
 8002c26:	408b      	lsls	r3, r1
 8002c28:	4920      	ldr	r1, [pc, #128]	; (8002cac <HAL_RCC_OscConfig+0x5e8>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	600b      	str	r3, [r1, #0]
 8002c2e:	e06c      	b.n	8002d0a <HAL_RCC_OscConfig+0x646>
 8002c30:	2301      	movs	r3, #1
 8002c32:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002c42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	461a      	mov	r2, r3
 8002c58:	2300      	movs	r3, #0
 8002c5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5c:	f7fe fe4e 	bl	80018fc <HAL_GetTick>
 8002c60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c64:	e00a      	b.n	8002c7c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c66:	f7fe fe49 	bl	80018fc <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d902      	bls.n	8002c7c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	f000 bd5a 	b.w	8003730 <HAL_RCC_OscConfig+0x106c>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	095b      	lsrs	r3, r3, #5
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d104      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x5ec>
 8002ca6:	4b01      	ldr	r3, [pc, #4]	; (8002cac <HAL_RCC_OscConfig+0x5e8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	e015      	b.n	8002cd8 <HAL_RCC_OscConfig+0x614>
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002cba:	fa93 f3a3 	rbit	r3, r3
 8002cbe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002cc8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002cd4:	4bc8      	ldr	r3, [pc, #800]	; (8002ff8 <HAL_RCC_OscConfig+0x934>)
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	2202      	movs	r2, #2
 8002cda:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002cde:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002ce2:	fa92 f2a2 	rbit	r2, r2
 8002ce6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002cea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002cee:	fab2 f282 	clz	r2, r2
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	f042 0220 	orr.w	r2, r2, #32
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	f002 021f 	and.w	r2, r2, #31
 8002cfe:	2101      	movs	r1, #1
 8002d00:	fa01 f202 	lsl.w	r2, r1, r2
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1ad      	bne.n	8002c66 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 8110 	beq.w	8002f40 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d079      	beq.n	8002e24 <HAL_RCC_OscConfig+0x760>
 8002d30:	2301      	movs	r3, #1
 8002d32:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d3a:	fa93 f3a3 	rbit	r3, r3
 8002d3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4bab      	ldr	r3, [pc, #684]	; (8002ffc <HAL_RCC_OscConfig+0x938>)
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	461a      	mov	r2, r3
 8002d56:	2301      	movs	r3, #1
 8002d58:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5a:	f7fe fdcf 	bl	80018fc <HAL_GetTick>
 8002d5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d62:	e00a      	b.n	8002d7a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d64:	f7fe fdca 	bl	80018fc <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d902      	bls.n	8002d7a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	f000 bcdb 	b.w	8003730 <HAL_RCC_OscConfig+0x106c>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d90:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002d94:	2202      	movs	r2, #2
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	fa93 f2a3 	rbit	r2, r3
 8002da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002daa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002db8:	2202      	movs	r2, #2
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	fa93 f2a3 	rbit	r2, r3
 8002dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002dd2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd4:	4b88      	ldr	r3, [pc, #544]	; (8002ff8 <HAL_RCC_OscConfig+0x934>)
 8002dd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ddc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002de0:	2102      	movs	r1, #2
 8002de2:	6019      	str	r1, [r3, #0]
 8002de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	fa93 f1a3 	rbit	r1, r3
 8002df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002dfa:	6019      	str	r1, [r3, #0]
  return result;
 8002dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e00:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	f003 031f 	and.w	r3, r3, #31
 8002e16:	2101      	movs	r1, #1
 8002e18:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0a0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x6a0>
 8002e22:	e08d      	b.n	8002f40 <HAL_RCC_OscConfig+0x87c>
 8002e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e28:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e34:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	fa93 f2a3 	rbit	r2, r3
 8002e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e42:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e46:	601a      	str	r2, [r3, #0]
  return result;
 8002e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e50:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4b68      	ldr	r3, [pc, #416]	; (8002ffc <HAL_RCC_OscConfig+0x938>)
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	461a      	mov	r2, r3
 8002e62:	2300      	movs	r3, #0
 8002e64:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e66:	f7fe fd49 	bl	80018fc <HAL_GetTick>
 8002e6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e6e:	e00a      	b.n	8002e86 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e70:	f7fe fd44 	bl	80018fc <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d902      	bls.n	8002e86 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	f000 bc55 	b.w	8003730 <HAL_RCC_OscConfig+0x106c>
 8002e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002e8e:	2202      	movs	r2, #2
 8002e90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e96:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	fa93 f2a3 	rbit	r2, r3
 8002ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	fa93 f2a3 	rbit	r2, r3
 8002ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	fa93 f2a3 	rbit	r2, r3
 8002ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002ef0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef2:	4b41      	ldr	r3, [pc, #260]	; (8002ff8 <HAL_RCC_OscConfig+0x934>)
 8002ef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002efe:	2102      	movs	r1, #2
 8002f00:	6019      	str	r1, [r3, #0]
 8002f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f06:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	fa93 f1a3 	rbit	r1, r3
 8002f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f14:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f18:	6019      	str	r1, [r3, #0]
  return result;
 8002f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	fab3 f383 	clz	r3, r3
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	f003 031f 	and.w	r3, r3, #31
 8002f34:	2101      	movs	r1, #1
 8002f36:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d197      	bne.n	8002e70 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 81a1 	beq.w	8003298 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f56:	2300      	movs	r3, #0
 8002f58:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f5c:	4b26      	ldr	r3, [pc, #152]	; (8002ff8 <HAL_RCC_OscConfig+0x934>)
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d116      	bne.n	8002f96 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f68:	4b23      	ldr	r3, [pc, #140]	; (8002ff8 <HAL_RCC_OscConfig+0x934>)
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	4a22      	ldr	r2, [pc, #136]	; (8002ff8 <HAL_RCC_OscConfig+0x934>)
 8002f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f72:	61d3      	str	r3, [r2, #28]
 8002f74:	4b20      	ldr	r3, [pc, #128]	; (8002ff8 <HAL_RCC_OscConfig+0x934>)
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f80:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002f8e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f90:	2301      	movs	r3, #1
 8002f92:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f96:	4b1a      	ldr	r3, [pc, #104]	; (8003000 <HAL_RCC_OscConfig+0x93c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d11a      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fa2:	4b17      	ldr	r3, [pc, #92]	; (8003000 <HAL_RCC_OscConfig+0x93c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a16      	ldr	r2, [pc, #88]	; (8003000 <HAL_RCC_OscConfig+0x93c>)
 8002fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fae:	f7fe fca5 	bl	80018fc <HAL_GetTick>
 8002fb2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb6:	e009      	b.n	8002fcc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb8:	f7fe fca0 	bl	80018fc <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b64      	cmp	r3, #100	; 0x64
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e3b1      	b.n	8003730 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <HAL_RCC_OscConfig+0x93c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0ef      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fdc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d10d      	bne.n	8003004 <HAL_RCC_OscConfig+0x940>
 8002fe8:	4b03      	ldr	r3, [pc, #12]	; (8002ff8 <HAL_RCC_OscConfig+0x934>)
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	4a02      	ldr	r2, [pc, #8]	; (8002ff8 <HAL_RCC_OscConfig+0x934>)
 8002fee:	f043 0301 	orr.w	r3, r3, #1
 8002ff2:	6213      	str	r3, [r2, #32]
 8002ff4:	e03c      	b.n	8003070 <HAL_RCC_OscConfig+0x9ac>
 8002ff6:	bf00      	nop
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	10908120 	.word	0x10908120
 8003000:	40007000 	.word	0x40007000
 8003004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003008:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10c      	bne.n	800302e <HAL_RCC_OscConfig+0x96a>
 8003014:	4bc1      	ldr	r3, [pc, #772]	; (800331c <HAL_RCC_OscConfig+0xc58>)
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	4ac0      	ldr	r2, [pc, #768]	; (800331c <HAL_RCC_OscConfig+0xc58>)
 800301a:	f023 0301 	bic.w	r3, r3, #1
 800301e:	6213      	str	r3, [r2, #32]
 8003020:	4bbe      	ldr	r3, [pc, #760]	; (800331c <HAL_RCC_OscConfig+0xc58>)
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	4abd      	ldr	r2, [pc, #756]	; (800331c <HAL_RCC_OscConfig+0xc58>)
 8003026:	f023 0304 	bic.w	r3, r3, #4
 800302a:	6213      	str	r3, [r2, #32]
 800302c:	e020      	b.n	8003070 <HAL_RCC_OscConfig+0x9ac>
 800302e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003032:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	2b05      	cmp	r3, #5
 800303c:	d10c      	bne.n	8003058 <HAL_RCC_OscConfig+0x994>
 800303e:	4bb7      	ldr	r3, [pc, #732]	; (800331c <HAL_RCC_OscConfig+0xc58>)
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	4ab6      	ldr	r2, [pc, #728]	; (800331c <HAL_RCC_OscConfig+0xc58>)
 8003044:	f043 0304 	orr.w	r3, r3, #4
 8003048:	6213      	str	r3, [r2, #32]
 800304a:	4bb4      	ldr	r3, [pc, #720]	; (800331c <HAL_RCC_OscConfig+0xc58>)
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	4ab3      	ldr	r2, [pc, #716]	; (800331c <HAL_RCC_OscConfig+0xc58>)
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	6213      	str	r3, [r2, #32]
 8003056:	e00b      	b.n	8003070 <HAL_RCC_OscConfig+0x9ac>
 8003058:	4bb0      	ldr	r3, [pc, #704]	; (800331c <HAL_RCC_OscConfig+0xc58>)
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	4aaf      	ldr	r2, [pc, #700]	; (800331c <HAL_RCC_OscConfig+0xc58>)
 800305e:	f023 0301 	bic.w	r3, r3, #1
 8003062:	6213      	str	r3, [r2, #32]
 8003064:	4bad      	ldr	r3, [pc, #692]	; (800331c <HAL_RCC_OscConfig+0xc58>)
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	4aac      	ldr	r2, [pc, #688]	; (800331c <HAL_RCC_OscConfig+0xc58>)
 800306a:	f023 0304 	bic.w	r3, r3, #4
 800306e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003074:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 8081 	beq.w	8003184 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003082:	f7fe fc3b 	bl	80018fc <HAL_GetTick>
 8003086:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308a:	e00b      	b.n	80030a4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800308c:	f7fe fc36 	bl	80018fc <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	f241 3288 	movw	r2, #5000	; 0x1388
 800309c:	4293      	cmp	r3, r2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e345      	b.n	8003730 <HAL_RCC_OscConfig+0x106c>
 80030a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80030ac:	2202      	movs	r2, #2
 80030ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	fa93 f2a3 	rbit	r2, r3
 80030be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80030d0:	2202      	movs	r2, #2
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	fa93 f2a3 	rbit	r2, r3
 80030e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80030ea:	601a      	str	r2, [r3, #0]
  return result;
 80030ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80030f4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f6:	fab3 f383 	clz	r3, r3
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	095b      	lsrs	r3, r3, #5
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	f043 0302 	orr.w	r3, r3, #2
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d102      	bne.n	8003110 <HAL_RCC_OscConfig+0xa4c>
 800310a:	4b84      	ldr	r3, [pc, #528]	; (800331c <HAL_RCC_OscConfig+0xc58>)
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	e013      	b.n	8003138 <HAL_RCC_OscConfig+0xa74>
 8003110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003114:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003118:	2202      	movs	r2, #2
 800311a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003120:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	fa93 f2a3 	rbit	r2, r3
 800312a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	4b79      	ldr	r3, [pc, #484]	; (800331c <HAL_RCC_OscConfig+0xc58>)
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800313c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003140:	2102      	movs	r1, #2
 8003142:	6011      	str	r1, [r2, #0]
 8003144:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003148:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	fa92 f1a2 	rbit	r1, r2
 8003152:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003156:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800315a:	6011      	str	r1, [r2, #0]
  return result;
 800315c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003160:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003164:	6812      	ldr	r2, [r2, #0]
 8003166:	fab2 f282 	clz	r2, r2
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	f002 021f 	and.w	r2, r2, #31
 8003176:	2101      	movs	r1, #1
 8003178:	fa01 f202 	lsl.w	r2, r1, r2
 800317c:	4013      	ands	r3, r2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d084      	beq.n	800308c <HAL_RCC_OscConfig+0x9c8>
 8003182:	e07f      	b.n	8003284 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003184:	f7fe fbba 	bl	80018fc <HAL_GetTick>
 8003188:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800318c:	e00b      	b.n	80031a6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800318e:	f7fe fbb5 	bl	80018fc <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f241 3288 	movw	r2, #5000	; 0x1388
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e2c4      	b.n	8003730 <HAL_RCC_OscConfig+0x106c>
 80031a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031aa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80031ae:	2202      	movs	r2, #2
 80031b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	fa93 f2a3 	rbit	r2, r3
 80031c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80031d2:	2202      	movs	r2, #2
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	fa93 f2a3 	rbit	r2, r3
 80031e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80031ec:	601a      	str	r2, [r3, #0]
  return result;
 80031ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80031f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f8:	fab3 f383 	clz	r3, r3
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	b2db      	uxtb	r3, r3
 8003202:	f043 0302 	orr.w	r3, r3, #2
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d102      	bne.n	8003212 <HAL_RCC_OscConfig+0xb4e>
 800320c:	4b43      	ldr	r3, [pc, #268]	; (800331c <HAL_RCC_OscConfig+0xc58>)
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	e013      	b.n	800323a <HAL_RCC_OscConfig+0xb76>
 8003212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003216:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800321a:	2202      	movs	r2, #2
 800321c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003222:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	fa93 f2a3 	rbit	r2, r3
 800322c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003230:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	4b39      	ldr	r3, [pc, #228]	; (800331c <HAL_RCC_OscConfig+0xc58>)
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800323e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003242:	2102      	movs	r1, #2
 8003244:	6011      	str	r1, [r2, #0]
 8003246:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800324a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800324e:	6812      	ldr	r2, [r2, #0]
 8003250:	fa92 f1a2 	rbit	r1, r2
 8003254:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003258:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800325c:	6011      	str	r1, [r2, #0]
  return result;
 800325e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003262:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003266:	6812      	ldr	r2, [r2, #0]
 8003268:	fab2 f282 	clz	r2, r2
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	f002 021f 	and.w	r2, r2, #31
 8003278:	2101      	movs	r1, #1
 800327a:	fa01 f202 	lsl.w	r2, r1, r2
 800327e:	4013      	ands	r3, r2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d184      	bne.n	800318e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003284:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003288:	2b01      	cmp	r3, #1
 800328a:	d105      	bne.n	8003298 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800328c:	4b23      	ldr	r3, [pc, #140]	; (800331c <HAL_RCC_OscConfig+0xc58>)
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	4a22      	ldr	r2, [pc, #136]	; (800331c <HAL_RCC_OscConfig+0xc58>)
 8003292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003296:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 8242 	beq.w	800372e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032aa:	4b1c      	ldr	r3, [pc, #112]	; (800331c <HAL_RCC_OscConfig+0xc58>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	f000 8213 	beq.w	80036de <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	f040 8162 	bne.w	800358e <HAL_RCC_OscConfig+0xeca>
 80032ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ce:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80032d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032dc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	fa93 f2a3 	rbit	r2, r3
 80032e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80032ee:	601a      	str	r2, [r3, #0]
  return result;
 80032f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80032f8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fa:	fab3 f383 	clz	r3, r3
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003304:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	461a      	mov	r2, r3
 800330c:	2300      	movs	r3, #0
 800330e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7fe faf4 	bl	80018fc <HAL_GetTick>
 8003314:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003318:	e00c      	b.n	8003334 <HAL_RCC_OscConfig+0xc70>
 800331a:	bf00      	nop
 800331c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003320:	f7fe faec 	bl	80018fc <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e1fd      	b.n	8003730 <HAL_RCC_OscConfig+0x106c>
 8003334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003338:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800333c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003340:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003346:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	fa93 f2a3 	rbit	r2, r3
 8003350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003354:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003358:	601a      	str	r2, [r3, #0]
  return result;
 800335a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003362:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003364:	fab3 f383 	clz	r3, r3
 8003368:	b2db      	uxtb	r3, r3
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	b2db      	uxtb	r3, r3
 800336e:	f043 0301 	orr.w	r3, r3, #1
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b01      	cmp	r3, #1
 8003376:	d102      	bne.n	800337e <HAL_RCC_OscConfig+0xcba>
 8003378:	4bb0      	ldr	r3, [pc, #704]	; (800363c <HAL_RCC_OscConfig+0xf78>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	e027      	b.n	80033ce <HAL_RCC_OscConfig+0xd0a>
 800337e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003382:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003386:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800338a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003390:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	fa93 f2a3 	rbit	r2, r3
 800339a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80033ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	fa93 f2a3 	rbit	r2, r3
 80033c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	4b9c      	ldr	r3, [pc, #624]	; (800363c <HAL_RCC_OscConfig+0xf78>)
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033d2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80033d6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033da:	6011      	str	r1, [r2, #0]
 80033dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033e0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80033e4:	6812      	ldr	r2, [r2, #0]
 80033e6:	fa92 f1a2 	rbit	r1, r2
 80033ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033ee:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80033f2:	6011      	str	r1, [r2, #0]
  return result;
 80033f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033f8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	fab2 f282 	clz	r2, r2
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	f042 0220 	orr.w	r2, r2, #32
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	f002 021f 	and.w	r2, r2, #31
 800340e:	2101      	movs	r1, #1
 8003410:	fa01 f202 	lsl.w	r2, r1, r2
 8003414:	4013      	ands	r3, r2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d182      	bne.n	8003320 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800341a:	4b88      	ldr	r3, [pc, #544]	; (800363c <HAL_RCC_OscConfig+0xf78>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003426:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800342e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003432:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	430b      	orrs	r3, r1
 800343c:	497f      	ldr	r1, [pc, #508]	; (800363c <HAL_RCC_OscConfig+0xf78>)
 800343e:	4313      	orrs	r3, r2
 8003440:	604b      	str	r3, [r1, #4]
 8003442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003446:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800344a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800344e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003454:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	fa93 f2a3 	rbit	r2, r3
 800345e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003462:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003466:	601a      	str	r2, [r3, #0]
  return result;
 8003468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003470:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800347c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	461a      	mov	r2, r3
 8003484:	2301      	movs	r3, #1
 8003486:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7fe fa38 	bl	80018fc <HAL_GetTick>
 800348c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003490:	e009      	b.n	80034a6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003492:	f7fe fa33 	bl	80018fc <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e144      	b.n	8003730 <HAL_RCC_OscConfig+0x106c>
 80034a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034aa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80034ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	fa93 f2a3 	rbit	r2, r3
 80034c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80034ca:	601a      	str	r2, [r3, #0]
  return result;
 80034cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80034d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034d6:	fab3 f383 	clz	r3, r3
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	095b      	lsrs	r3, r3, #5
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d102      	bne.n	80034f0 <HAL_RCC_OscConfig+0xe2c>
 80034ea:	4b54      	ldr	r3, [pc, #336]	; (800363c <HAL_RCC_OscConfig+0xf78>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	e027      	b.n	8003540 <HAL_RCC_OscConfig+0xe7c>
 80034f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80034f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003502:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	fa93 f2a3 	rbit	r2, r3
 800350c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003510:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800351e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003528:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	fa93 f2a3 	rbit	r2, r3
 8003532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003536:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	4b3f      	ldr	r3, [pc, #252]	; (800363c <HAL_RCC_OscConfig+0xf78>)
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003544:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003548:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800354c:	6011      	str	r1, [r2, #0]
 800354e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003552:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	fa92 f1a2 	rbit	r1, r2
 800355c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003560:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003564:	6011      	str	r1, [r2, #0]
  return result;
 8003566:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800356a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	fab2 f282 	clz	r2, r2
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	f042 0220 	orr.w	r2, r2, #32
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	f002 021f 	and.w	r2, r2, #31
 8003580:	2101      	movs	r1, #1
 8003582:	fa01 f202 	lsl.w	r2, r1, r2
 8003586:	4013      	ands	r3, r2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d082      	beq.n	8003492 <HAL_RCC_OscConfig+0xdce>
 800358c:	e0cf      	b.n	800372e <HAL_RCC_OscConfig+0x106a>
 800358e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003592:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003596:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800359a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	fa93 f2a3 	rbit	r2, r3
 80035aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80035b2:	601a      	str	r2, [r3, #0]
  return result;
 80035b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80035bc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035be:	fab3 f383 	clz	r3, r3
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	461a      	mov	r2, r3
 80035d0:	2300      	movs	r3, #0
 80035d2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d4:	f7fe f992 	bl	80018fc <HAL_GetTick>
 80035d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035dc:	e009      	b.n	80035f2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035de:	f7fe f98d 	bl	80018fc <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e09e      	b.n	8003730 <HAL_RCC_OscConfig+0x106c>
 80035f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80035fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003604:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	fa93 f2a3 	rbit	r2, r3
 800360e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003612:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003616:	601a      	str	r2, [r3, #0]
  return result;
 8003618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003620:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003622:	fab3 f383 	clz	r3, r3
 8003626:	b2db      	uxtb	r3, r3
 8003628:	095b      	lsrs	r3, r3, #5
 800362a:	b2db      	uxtb	r3, r3
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b01      	cmp	r3, #1
 8003634:	d104      	bne.n	8003640 <HAL_RCC_OscConfig+0xf7c>
 8003636:	4b01      	ldr	r3, [pc, #4]	; (800363c <HAL_RCC_OscConfig+0xf78>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	e029      	b.n	8003690 <HAL_RCC_OscConfig+0xfcc>
 800363c:	40021000 	.word	0x40021000
 8003640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003644:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003648:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800364c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003652:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	fa93 f2a3 	rbit	r2, r3
 800365c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003660:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800366e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003678:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	fa93 f2a3 	rbit	r2, r3
 8003682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003686:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	4b2b      	ldr	r3, [pc, #172]	; (800373c <HAL_RCC_OscConfig+0x1078>)
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003694:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003698:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800369c:	6011      	str	r1, [r2, #0]
 800369e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036a2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	fa92 f1a2 	rbit	r1, r2
 80036ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036b0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80036b4:	6011      	str	r1, [r2, #0]
  return result;
 80036b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036ba:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	fab2 f282 	clz	r2, r2
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	f042 0220 	orr.w	r2, r2, #32
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	f002 021f 	and.w	r2, r2, #31
 80036d0:	2101      	movs	r1, #1
 80036d2:	fa01 f202 	lsl.w	r2, r1, r2
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d180      	bne.n	80035de <HAL_RCC_OscConfig+0xf1a>
 80036dc:	e027      	b.n	800372e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d101      	bne.n	80036f2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e01e      	b.n	8003730 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036f2:	4b12      	ldr	r3, [pc, #72]	; (800373c <HAL_RCC_OscConfig+0x1078>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80036fe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003706:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	429a      	cmp	r2, r3
 8003710:	d10b      	bne.n	800372a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003712:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003716:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800371a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800371e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003726:	429a      	cmp	r2, r3
 8003728:	d001      	beq.n	800372e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000

08003740 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b09e      	sub	sp, #120	; 0x78
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800374a:	2300      	movs	r3, #0
 800374c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e162      	b.n	8003a1e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003758:	4b90      	ldr	r3, [pc, #576]	; (800399c <HAL_RCC_ClockConfig+0x25c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d910      	bls.n	8003788 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003766:	4b8d      	ldr	r3, [pc, #564]	; (800399c <HAL_RCC_ClockConfig+0x25c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f023 0207 	bic.w	r2, r3, #7
 800376e:	498b      	ldr	r1, [pc, #556]	; (800399c <HAL_RCC_ClockConfig+0x25c>)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	4313      	orrs	r3, r2
 8003774:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003776:	4b89      	ldr	r3, [pc, #548]	; (800399c <HAL_RCC_ClockConfig+0x25c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d001      	beq.n	8003788 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e14a      	b.n	8003a1e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003794:	4b82      	ldr	r3, [pc, #520]	; (80039a0 <HAL_RCC_ClockConfig+0x260>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	497f      	ldr	r1, [pc, #508]	; (80039a0 <HAL_RCC_ClockConfig+0x260>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 80dc 	beq.w	800396c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d13c      	bne.n	8003836 <HAL_RCC_ClockConfig+0xf6>
 80037bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037c4:	fa93 f3a3 	rbit	r3, r3
 80037c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80037ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037cc:	fab3 f383 	clz	r3, r3
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d102      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xa6>
 80037e0:	4b6f      	ldr	r3, [pc, #444]	; (80039a0 <HAL_RCC_ClockConfig+0x260>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	e00f      	b.n	8003806 <HAL_RCC_ClockConfig+0xc6>
 80037e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037ee:	fa93 f3a3 	rbit	r3, r3
 80037f2:	667b      	str	r3, [r7, #100]	; 0x64
 80037f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037f8:	663b      	str	r3, [r7, #96]	; 0x60
 80037fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037fc:	fa93 f3a3 	rbit	r3, r3
 8003800:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003802:	4b67      	ldr	r3, [pc, #412]	; (80039a0 <HAL_RCC_ClockConfig+0x260>)
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800380a:	65ba      	str	r2, [r7, #88]	; 0x58
 800380c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800380e:	fa92 f2a2 	rbit	r2, r2
 8003812:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003814:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003816:	fab2 f282 	clz	r2, r2
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	f042 0220 	orr.w	r2, r2, #32
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	f002 021f 	and.w	r2, r2, #31
 8003826:	2101      	movs	r1, #1
 8003828:	fa01 f202 	lsl.w	r2, r1, r2
 800382c:	4013      	ands	r3, r2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d17b      	bne.n	800392a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e0f3      	b.n	8003a1e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d13c      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x178>
 800383e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003842:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003846:	fa93 f3a3 	rbit	r3, r3
 800384a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800384c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384e:	fab3 f383 	clz	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	095b      	lsrs	r3, r3, #5
 8003856:	b2db      	uxtb	r3, r3
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b01      	cmp	r3, #1
 8003860:	d102      	bne.n	8003868 <HAL_RCC_ClockConfig+0x128>
 8003862:	4b4f      	ldr	r3, [pc, #316]	; (80039a0 <HAL_RCC_ClockConfig+0x260>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	e00f      	b.n	8003888 <HAL_RCC_ClockConfig+0x148>
 8003868:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800386c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003870:	fa93 f3a3 	rbit	r3, r3
 8003874:	647b      	str	r3, [r7, #68]	; 0x44
 8003876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800387a:	643b      	str	r3, [r7, #64]	; 0x40
 800387c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800387e:	fa93 f3a3 	rbit	r3, r3
 8003882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003884:	4b46      	ldr	r3, [pc, #280]	; (80039a0 <HAL_RCC_ClockConfig+0x260>)
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800388c:	63ba      	str	r2, [r7, #56]	; 0x38
 800388e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003890:	fa92 f2a2 	rbit	r2, r2
 8003894:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003898:	fab2 f282 	clz	r2, r2
 800389c:	b2d2      	uxtb	r2, r2
 800389e:	f042 0220 	orr.w	r2, r2, #32
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	f002 021f 	and.w	r2, r2, #31
 80038a8:	2101      	movs	r1, #1
 80038aa:	fa01 f202 	lsl.w	r2, r1, r2
 80038ae:	4013      	ands	r3, r2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d13a      	bne.n	800392a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0b2      	b.n	8003a1e <HAL_RCC_ClockConfig+0x2de>
 80038b8:	2302      	movs	r3, #2
 80038ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038be:	fa93 f3a3 	rbit	r3, r3
 80038c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c6:	fab3 f383 	clz	r3, r3
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d102      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x1a0>
 80038da:	4b31      	ldr	r3, [pc, #196]	; (80039a0 <HAL_RCC_ClockConfig+0x260>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	e00d      	b.n	80038fc <HAL_RCC_ClockConfig+0x1bc>
 80038e0:	2302      	movs	r3, #2
 80038e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e6:	fa93 f3a3 	rbit	r3, r3
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
 80038ec:	2302      	movs	r3, #2
 80038ee:	623b      	str	r3, [r7, #32]
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	fa93 f3a3 	rbit	r3, r3
 80038f6:	61fb      	str	r3, [r7, #28]
 80038f8:	4b29      	ldr	r3, [pc, #164]	; (80039a0 <HAL_RCC_ClockConfig+0x260>)
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	2202      	movs	r2, #2
 80038fe:	61ba      	str	r2, [r7, #24]
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	fa92 f2a2 	rbit	r2, r2
 8003906:	617a      	str	r2, [r7, #20]
  return result;
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	fab2 f282 	clz	r2, r2
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	f042 0220 	orr.w	r2, r2, #32
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	f002 021f 	and.w	r2, r2, #31
 800391a:	2101      	movs	r1, #1
 800391c:	fa01 f202 	lsl.w	r2, r1, r2
 8003920:	4013      	ands	r3, r2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e079      	b.n	8003a1e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800392a:	4b1d      	ldr	r3, [pc, #116]	; (80039a0 <HAL_RCC_ClockConfig+0x260>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f023 0203 	bic.w	r2, r3, #3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	491a      	ldr	r1, [pc, #104]	; (80039a0 <HAL_RCC_ClockConfig+0x260>)
 8003938:	4313      	orrs	r3, r2
 800393a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800393c:	f7fd ffde 	bl	80018fc <HAL_GetTick>
 8003940:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003942:	e00a      	b.n	800395a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003944:	f7fd ffda 	bl	80018fc <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003952:	4293      	cmp	r3, r2
 8003954:	d901      	bls.n	800395a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e061      	b.n	8003a1e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395a:	4b11      	ldr	r3, [pc, #68]	; (80039a0 <HAL_RCC_ClockConfig+0x260>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f003 020c 	and.w	r2, r3, #12
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	429a      	cmp	r2, r3
 800396a:	d1eb      	bne.n	8003944 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800396c:	4b0b      	ldr	r3, [pc, #44]	; (800399c <HAL_RCC_ClockConfig+0x25c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d214      	bcs.n	80039a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397a:	4b08      	ldr	r3, [pc, #32]	; (800399c <HAL_RCC_ClockConfig+0x25c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f023 0207 	bic.w	r2, r3, #7
 8003982:	4906      	ldr	r1, [pc, #24]	; (800399c <HAL_RCC_ClockConfig+0x25c>)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	4313      	orrs	r3, r2
 8003988:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800398a:	4b04      	ldr	r3, [pc, #16]	; (800399c <HAL_RCC_ClockConfig+0x25c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d005      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e040      	b.n	8003a1e <HAL_RCC_ClockConfig+0x2de>
 800399c:	40022000 	.word	0x40022000
 80039a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b0:	4b1d      	ldr	r3, [pc, #116]	; (8003a28 <HAL_RCC_ClockConfig+0x2e8>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	491a      	ldr	r1, [pc, #104]	; (8003a28 <HAL_RCC_ClockConfig+0x2e8>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d009      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ce:	4b16      	ldr	r3, [pc, #88]	; (8003a28 <HAL_RCC_ClockConfig+0x2e8>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4912      	ldr	r1, [pc, #72]	; (8003a28 <HAL_RCC_ClockConfig+0x2e8>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039e2:	f000 f829 	bl	8003a38 <HAL_RCC_GetSysClockFreq>
 80039e6:	4601      	mov	r1, r0
 80039e8:	4b0f      	ldr	r3, [pc, #60]	; (8003a28 <HAL_RCC_ClockConfig+0x2e8>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039f0:	22f0      	movs	r2, #240	; 0xf0
 80039f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	fa92 f2a2 	rbit	r2, r2
 80039fa:	60fa      	str	r2, [r7, #12]
  return result;
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	fab2 f282 	clz	r2, r2
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	40d3      	lsrs	r3, r2
 8003a06:	4a09      	ldr	r2, [pc, #36]	; (8003a2c <HAL_RCC_ClockConfig+0x2ec>)
 8003a08:	5cd3      	ldrb	r3, [r2, r3]
 8003a0a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a0e:	4a08      	ldr	r2, [pc, #32]	; (8003a30 <HAL_RCC_ClockConfig+0x2f0>)
 8003a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a12:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <HAL_RCC_ClockConfig+0x2f4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fd ff2c 	bl	8001874 <HAL_InitTick>
  
  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3778      	adds	r7, #120	; 0x78
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	080048a8 	.word	0x080048a8
 8003a30:	20000420 	.word	0x20000420
 8003a34:	20000424 	.word	0x20000424

08003a38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b08b      	sub	sp, #44	; 0x2c
 8003a3c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
 8003a42:	2300      	movs	r3, #0
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	2300      	movs	r3, #0
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a52:	4b29      	ldr	r3, [pc, #164]	; (8003af8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d002      	beq.n	8003a68 <HAL_RCC_GetSysClockFreq+0x30>
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d003      	beq.n	8003a6e <HAL_RCC_GetSysClockFreq+0x36>
 8003a66:	e03c      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a68:	4b24      	ldr	r3, [pc, #144]	; (8003afc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a6a:	623b      	str	r3, [r7, #32]
      break;
 8003a6c:	e03c      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003a74:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a78:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	fa92 f2a2 	rbit	r2, r2
 8003a80:	607a      	str	r2, [r7, #4]
  return result;
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	fab2 f282 	clz	r2, r2
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	40d3      	lsrs	r3, r2
 8003a8c:	4a1c      	ldr	r2, [pc, #112]	; (8003b00 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a8e:	5cd3      	ldrb	r3, [r2, r3]
 8003a90:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003a92:	4b19      	ldr	r3, [pc, #100]	; (8003af8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	220f      	movs	r2, #15
 8003a9c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	fa92 f2a2 	rbit	r2, r2
 8003aa4:	60fa      	str	r2, [r7, #12]
  return result;
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	fab2 f282 	clz	r2, r2
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	40d3      	lsrs	r3, r2
 8003ab0:	4a14      	ldr	r2, [pc, #80]	; (8003b04 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ab2:	5cd3      	ldrb	r3, [r2, r3]
 8003ab4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ac0:	4a0e      	ldr	r2, [pc, #56]	; (8003afc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	fb02 f303 	mul.w	r3, r2, r3
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad0:	e004      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	4a0c      	ldr	r2, [pc, #48]	; (8003b08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ad6:	fb02 f303 	mul.w	r3, r2, r3
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	623b      	str	r3, [r7, #32]
      break;
 8003ae0:	e002      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ae2:	4b06      	ldr	r3, [pc, #24]	; (8003afc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ae4:	623b      	str	r3, [r7, #32]
      break;
 8003ae6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	372c      	adds	r7, #44	; 0x2c
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40021000 	.word	0x40021000
 8003afc:	007a1200 	.word	0x007a1200
 8003b00:	080048b8 	.word	0x080048b8
 8003b04:	080048c8 	.word	0x080048c8
 8003b08:	003d0900 	.word	0x003d0900

08003b0c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b092      	sub	sp, #72	; 0x48
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 80d4 	beq.w	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b30:	4b4e      	ldr	r3, [pc, #312]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10e      	bne.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b3c:	4b4b      	ldr	r3, [pc, #300]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	4a4a      	ldr	r2, [pc, #296]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b46:	61d3      	str	r3, [r2, #28]
 8003b48:	4b48      	ldr	r3, [pc, #288]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b54:	2301      	movs	r3, #1
 8003b56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5a:	4b45      	ldr	r3, [pc, #276]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d118      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b66:	4b42      	ldr	r3, [pc, #264]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a41      	ldr	r2, [pc, #260]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b70:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b72:	f7fd fec3 	bl	80018fc <HAL_GetTick>
 8003b76:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b78:	e008      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7a:	f7fd febf 	bl	80018fc <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b64      	cmp	r3, #100	; 0x64
 8003b86:	d901      	bls.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e14b      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8c:	4b38      	ldr	r3, [pc, #224]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0f0      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b98:	4b34      	ldr	r3, [pc, #208]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 8084 	beq.w	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d07c      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bb8:	4b2c      	ldr	r3, [pc, #176]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bc6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bca:	fa93 f3a3 	rbit	r3, r3
 8003bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bd2:	fab3 f383 	clz	r3, r3
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4b26      	ldr	r3, [pc, #152]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	461a      	mov	r2, r3
 8003be2:	2301      	movs	r3, #1
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bee:	fa93 f3a3 	rbit	r3, r3
 8003bf2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bf6:	fab3 f383 	clz	r3, r3
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	4b1d      	ldr	r3, [pc, #116]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	461a      	mov	r2, r3
 8003c06:	2300      	movs	r3, #0
 8003c08:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c0a:	4a18      	ldr	r2, [pc, #96]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c0e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d04b      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1a:	f7fd fe6f 	bl	80018fc <HAL_GetTick>
 8003c1e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c20:	e00a      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c22:	f7fd fe6b 	bl	80018fc <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e0f5      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3e:	fa93 f3a3 	rbit	r3, r3
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
 8003c44:	2302      	movs	r3, #2
 8003c46:	623b      	str	r3, [r7, #32]
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	fa93 f3a3 	rbit	r3, r3
 8003c4e:	61fb      	str	r3, [r7, #28]
  return result;
 8003c50:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c52:	fab3 f383 	clz	r3, r3
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	f043 0302 	orr.w	r3, r3, #2
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d108      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003c66:	4b01      	ldr	r3, [pc, #4]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	e00d      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40007000 	.word	0x40007000
 8003c74:	10908100 	.word	0x10908100
 8003c78:	2302      	movs	r3, #2
 8003c7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	fa93 f3a3 	rbit	r3, r3
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	4b69      	ldr	r3, [pc, #420]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	2202      	movs	r2, #2
 8003c8a:	613a      	str	r2, [r7, #16]
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	fa92 f2a2 	rbit	r2, r2
 8003c92:	60fa      	str	r2, [r7, #12]
  return result;
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	fab2 f282 	clz	r2, r2
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	f002 021f 	and.w	r2, r2, #31
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cac:	4013      	ands	r3, r2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0b7      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003cb2:	4b5e      	ldr	r3, [pc, #376]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	495b      	ldr	r1, [pc, #364]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cc4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d105      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ccc:	4b57      	ldr	r3, [pc, #348]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	4a56      	ldr	r2, [pc, #344]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cd6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ce4:	4b51      	ldr	r3, [pc, #324]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	f023 0203 	bic.w	r2, r3, #3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	494e      	ldr	r1, [pc, #312]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d008      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d02:	4b4a      	ldr	r3, [pc, #296]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	f023 0210 	bic.w	r2, r3, #16
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	4947      	ldr	r1, [pc, #284]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d008      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003d20:	4b42      	ldr	r3, [pc, #264]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2c:	493f      	ldr	r1, [pc, #252]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d008      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d3e:	4b3b      	ldr	r3, [pc, #236]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	f023 0220 	bic.w	r2, r3, #32
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	4938      	ldr	r1, [pc, #224]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d5c:	4b33      	ldr	r3, [pc, #204]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	4930      	ldr	r1, [pc, #192]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d008      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d7a:	4b2c      	ldr	r3, [pc, #176]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	4929      	ldr	r1, [pc, #164]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d008      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003d98:	4b24      	ldr	r3, [pc, #144]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	4921      	ldr	r1, [pc, #132]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d008      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003db6:	4b1d      	ldr	r3, [pc, #116]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	491a      	ldr	r1, [pc, #104]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d008      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003dd4:	4b15      	ldr	r3, [pc, #84]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	4912      	ldr	r1, [pc, #72]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d008      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003df2:	4b0e      	ldr	r3, [pc, #56]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	490b      	ldr	r1, [pc, #44]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003e10:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	4903      	ldr	r1, [pc, #12]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3748      	adds	r7, #72	; 0x48
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40021000 	.word	0x40021000

08003e30 <__errno>:
 8003e30:	4b01      	ldr	r3, [pc, #4]	; (8003e38 <__errno+0x8>)
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	2000042c 	.word	0x2000042c

08003e3c <__libc_init_array>:
 8003e3c:	b570      	push	{r4, r5, r6, lr}
 8003e3e:	4d0d      	ldr	r5, [pc, #52]	; (8003e74 <__libc_init_array+0x38>)
 8003e40:	4c0d      	ldr	r4, [pc, #52]	; (8003e78 <__libc_init_array+0x3c>)
 8003e42:	1b64      	subs	r4, r4, r5
 8003e44:	10a4      	asrs	r4, r4, #2
 8003e46:	2600      	movs	r6, #0
 8003e48:	42a6      	cmp	r6, r4
 8003e4a:	d109      	bne.n	8003e60 <__libc_init_array+0x24>
 8003e4c:	4d0b      	ldr	r5, [pc, #44]	; (8003e7c <__libc_init_array+0x40>)
 8003e4e:	4c0c      	ldr	r4, [pc, #48]	; (8003e80 <__libc_init_array+0x44>)
 8003e50:	f000 fc8e 	bl	8004770 <_init>
 8003e54:	1b64      	subs	r4, r4, r5
 8003e56:	10a4      	asrs	r4, r4, #2
 8003e58:	2600      	movs	r6, #0
 8003e5a:	42a6      	cmp	r6, r4
 8003e5c:	d105      	bne.n	8003e6a <__libc_init_array+0x2e>
 8003e5e:	bd70      	pop	{r4, r5, r6, pc}
 8003e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e64:	4798      	blx	r3
 8003e66:	3601      	adds	r6, #1
 8003e68:	e7ee      	b.n	8003e48 <__libc_init_array+0xc>
 8003e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e6e:	4798      	blx	r3
 8003e70:	3601      	adds	r6, #1
 8003e72:	e7f2      	b.n	8003e5a <__libc_init_array+0x1e>
 8003e74:	0800490c 	.word	0x0800490c
 8003e78:	0800490c 	.word	0x0800490c
 8003e7c:	0800490c 	.word	0x0800490c
 8003e80:	08004910 	.word	0x08004910

08003e84 <memset>:
 8003e84:	4402      	add	r2, r0
 8003e86:	4603      	mov	r3, r0
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d100      	bne.n	8003e8e <memset+0xa>
 8003e8c:	4770      	bx	lr
 8003e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e92:	e7f9      	b.n	8003e88 <memset+0x4>

08003e94 <siprintf>:
 8003e94:	b40e      	push	{r1, r2, r3}
 8003e96:	b500      	push	{lr}
 8003e98:	b09c      	sub	sp, #112	; 0x70
 8003e9a:	ab1d      	add	r3, sp, #116	; 0x74
 8003e9c:	9002      	str	r0, [sp, #8]
 8003e9e:	9006      	str	r0, [sp, #24]
 8003ea0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ea4:	4809      	ldr	r0, [pc, #36]	; (8003ecc <siprintf+0x38>)
 8003ea6:	9107      	str	r1, [sp, #28]
 8003ea8:	9104      	str	r1, [sp, #16]
 8003eaa:	4909      	ldr	r1, [pc, #36]	; (8003ed0 <siprintf+0x3c>)
 8003eac:	f853 2b04 	ldr.w	r2, [r3], #4
 8003eb0:	9105      	str	r1, [sp, #20]
 8003eb2:	6800      	ldr	r0, [r0, #0]
 8003eb4:	9301      	str	r3, [sp, #4]
 8003eb6:	a902      	add	r1, sp, #8
 8003eb8:	f000 f868 	bl	8003f8c <_svfiprintf_r>
 8003ebc:	9b02      	ldr	r3, [sp, #8]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	701a      	strb	r2, [r3, #0]
 8003ec2:	b01c      	add	sp, #112	; 0x70
 8003ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ec8:	b003      	add	sp, #12
 8003eca:	4770      	bx	lr
 8003ecc:	2000042c 	.word	0x2000042c
 8003ed0:	ffff0208 	.word	0xffff0208

08003ed4 <__ssputs_r>:
 8003ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed8:	688e      	ldr	r6, [r1, #8]
 8003eda:	429e      	cmp	r6, r3
 8003edc:	4682      	mov	sl, r0
 8003ede:	460c      	mov	r4, r1
 8003ee0:	4690      	mov	r8, r2
 8003ee2:	461f      	mov	r7, r3
 8003ee4:	d838      	bhi.n	8003f58 <__ssputs_r+0x84>
 8003ee6:	898a      	ldrh	r2, [r1, #12]
 8003ee8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003eec:	d032      	beq.n	8003f54 <__ssputs_r+0x80>
 8003eee:	6825      	ldr	r5, [r4, #0]
 8003ef0:	6909      	ldr	r1, [r1, #16]
 8003ef2:	eba5 0901 	sub.w	r9, r5, r1
 8003ef6:	6965      	ldr	r5, [r4, #20]
 8003ef8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003efc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f00:	3301      	adds	r3, #1
 8003f02:	444b      	add	r3, r9
 8003f04:	106d      	asrs	r5, r5, #1
 8003f06:	429d      	cmp	r5, r3
 8003f08:	bf38      	it	cc
 8003f0a:	461d      	movcc	r5, r3
 8003f0c:	0553      	lsls	r3, r2, #21
 8003f0e:	d531      	bpl.n	8003f74 <__ssputs_r+0xa0>
 8003f10:	4629      	mov	r1, r5
 8003f12:	f000 fb63 	bl	80045dc <_malloc_r>
 8003f16:	4606      	mov	r6, r0
 8003f18:	b950      	cbnz	r0, 8003f30 <__ssputs_r+0x5c>
 8003f1a:	230c      	movs	r3, #12
 8003f1c:	f8ca 3000 	str.w	r3, [sl]
 8003f20:	89a3      	ldrh	r3, [r4, #12]
 8003f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f26:	81a3      	strh	r3, [r4, #12]
 8003f28:	f04f 30ff 	mov.w	r0, #4294967295
 8003f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f30:	6921      	ldr	r1, [r4, #16]
 8003f32:	464a      	mov	r2, r9
 8003f34:	f000 fabe 	bl	80044b4 <memcpy>
 8003f38:	89a3      	ldrh	r3, [r4, #12]
 8003f3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f42:	81a3      	strh	r3, [r4, #12]
 8003f44:	6126      	str	r6, [r4, #16]
 8003f46:	6165      	str	r5, [r4, #20]
 8003f48:	444e      	add	r6, r9
 8003f4a:	eba5 0509 	sub.w	r5, r5, r9
 8003f4e:	6026      	str	r6, [r4, #0]
 8003f50:	60a5      	str	r5, [r4, #8]
 8003f52:	463e      	mov	r6, r7
 8003f54:	42be      	cmp	r6, r7
 8003f56:	d900      	bls.n	8003f5a <__ssputs_r+0x86>
 8003f58:	463e      	mov	r6, r7
 8003f5a:	6820      	ldr	r0, [r4, #0]
 8003f5c:	4632      	mov	r2, r6
 8003f5e:	4641      	mov	r1, r8
 8003f60:	f000 fab6 	bl	80044d0 <memmove>
 8003f64:	68a3      	ldr	r3, [r4, #8]
 8003f66:	1b9b      	subs	r3, r3, r6
 8003f68:	60a3      	str	r3, [r4, #8]
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	4433      	add	r3, r6
 8003f6e:	6023      	str	r3, [r4, #0]
 8003f70:	2000      	movs	r0, #0
 8003f72:	e7db      	b.n	8003f2c <__ssputs_r+0x58>
 8003f74:	462a      	mov	r2, r5
 8003f76:	f000 fba5 	bl	80046c4 <_realloc_r>
 8003f7a:	4606      	mov	r6, r0
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	d1e1      	bne.n	8003f44 <__ssputs_r+0x70>
 8003f80:	6921      	ldr	r1, [r4, #16]
 8003f82:	4650      	mov	r0, sl
 8003f84:	f000 fabe 	bl	8004504 <_free_r>
 8003f88:	e7c7      	b.n	8003f1a <__ssputs_r+0x46>
	...

08003f8c <_svfiprintf_r>:
 8003f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f90:	4698      	mov	r8, r3
 8003f92:	898b      	ldrh	r3, [r1, #12]
 8003f94:	061b      	lsls	r3, r3, #24
 8003f96:	b09d      	sub	sp, #116	; 0x74
 8003f98:	4607      	mov	r7, r0
 8003f9a:	460d      	mov	r5, r1
 8003f9c:	4614      	mov	r4, r2
 8003f9e:	d50e      	bpl.n	8003fbe <_svfiprintf_r+0x32>
 8003fa0:	690b      	ldr	r3, [r1, #16]
 8003fa2:	b963      	cbnz	r3, 8003fbe <_svfiprintf_r+0x32>
 8003fa4:	2140      	movs	r1, #64	; 0x40
 8003fa6:	f000 fb19 	bl	80045dc <_malloc_r>
 8003faa:	6028      	str	r0, [r5, #0]
 8003fac:	6128      	str	r0, [r5, #16]
 8003fae:	b920      	cbnz	r0, 8003fba <_svfiprintf_r+0x2e>
 8003fb0:	230c      	movs	r3, #12
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb8:	e0d1      	b.n	800415e <_svfiprintf_r+0x1d2>
 8003fba:	2340      	movs	r3, #64	; 0x40
 8003fbc:	616b      	str	r3, [r5, #20]
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8003fc2:	2320      	movs	r3, #32
 8003fc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fcc:	2330      	movs	r3, #48	; 0x30
 8003fce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004178 <_svfiprintf_r+0x1ec>
 8003fd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fd6:	f04f 0901 	mov.w	r9, #1
 8003fda:	4623      	mov	r3, r4
 8003fdc:	469a      	mov	sl, r3
 8003fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fe2:	b10a      	cbz	r2, 8003fe8 <_svfiprintf_r+0x5c>
 8003fe4:	2a25      	cmp	r2, #37	; 0x25
 8003fe6:	d1f9      	bne.n	8003fdc <_svfiprintf_r+0x50>
 8003fe8:	ebba 0b04 	subs.w	fp, sl, r4
 8003fec:	d00b      	beq.n	8004006 <_svfiprintf_r+0x7a>
 8003fee:	465b      	mov	r3, fp
 8003ff0:	4622      	mov	r2, r4
 8003ff2:	4629      	mov	r1, r5
 8003ff4:	4638      	mov	r0, r7
 8003ff6:	f7ff ff6d 	bl	8003ed4 <__ssputs_r>
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	f000 80aa 	beq.w	8004154 <_svfiprintf_r+0x1c8>
 8004000:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004002:	445a      	add	r2, fp
 8004004:	9209      	str	r2, [sp, #36]	; 0x24
 8004006:	f89a 3000 	ldrb.w	r3, [sl]
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 80a2 	beq.w	8004154 <_svfiprintf_r+0x1c8>
 8004010:	2300      	movs	r3, #0
 8004012:	f04f 32ff 	mov.w	r2, #4294967295
 8004016:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800401a:	f10a 0a01 	add.w	sl, sl, #1
 800401e:	9304      	str	r3, [sp, #16]
 8004020:	9307      	str	r3, [sp, #28]
 8004022:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004026:	931a      	str	r3, [sp, #104]	; 0x68
 8004028:	4654      	mov	r4, sl
 800402a:	2205      	movs	r2, #5
 800402c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004030:	4851      	ldr	r0, [pc, #324]	; (8004178 <_svfiprintf_r+0x1ec>)
 8004032:	f7fc f8d5 	bl	80001e0 <memchr>
 8004036:	9a04      	ldr	r2, [sp, #16]
 8004038:	b9d8      	cbnz	r0, 8004072 <_svfiprintf_r+0xe6>
 800403a:	06d0      	lsls	r0, r2, #27
 800403c:	bf44      	itt	mi
 800403e:	2320      	movmi	r3, #32
 8004040:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004044:	0711      	lsls	r1, r2, #28
 8004046:	bf44      	itt	mi
 8004048:	232b      	movmi	r3, #43	; 0x2b
 800404a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800404e:	f89a 3000 	ldrb.w	r3, [sl]
 8004052:	2b2a      	cmp	r3, #42	; 0x2a
 8004054:	d015      	beq.n	8004082 <_svfiprintf_r+0xf6>
 8004056:	9a07      	ldr	r2, [sp, #28]
 8004058:	4654      	mov	r4, sl
 800405a:	2000      	movs	r0, #0
 800405c:	f04f 0c0a 	mov.w	ip, #10
 8004060:	4621      	mov	r1, r4
 8004062:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004066:	3b30      	subs	r3, #48	; 0x30
 8004068:	2b09      	cmp	r3, #9
 800406a:	d94e      	bls.n	800410a <_svfiprintf_r+0x17e>
 800406c:	b1b0      	cbz	r0, 800409c <_svfiprintf_r+0x110>
 800406e:	9207      	str	r2, [sp, #28]
 8004070:	e014      	b.n	800409c <_svfiprintf_r+0x110>
 8004072:	eba0 0308 	sub.w	r3, r0, r8
 8004076:	fa09 f303 	lsl.w	r3, r9, r3
 800407a:	4313      	orrs	r3, r2
 800407c:	9304      	str	r3, [sp, #16]
 800407e:	46a2      	mov	sl, r4
 8004080:	e7d2      	b.n	8004028 <_svfiprintf_r+0x9c>
 8004082:	9b03      	ldr	r3, [sp, #12]
 8004084:	1d19      	adds	r1, r3, #4
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	9103      	str	r1, [sp, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	bfbb      	ittet	lt
 800408e:	425b      	neglt	r3, r3
 8004090:	f042 0202 	orrlt.w	r2, r2, #2
 8004094:	9307      	strge	r3, [sp, #28]
 8004096:	9307      	strlt	r3, [sp, #28]
 8004098:	bfb8      	it	lt
 800409a:	9204      	strlt	r2, [sp, #16]
 800409c:	7823      	ldrb	r3, [r4, #0]
 800409e:	2b2e      	cmp	r3, #46	; 0x2e
 80040a0:	d10c      	bne.n	80040bc <_svfiprintf_r+0x130>
 80040a2:	7863      	ldrb	r3, [r4, #1]
 80040a4:	2b2a      	cmp	r3, #42	; 0x2a
 80040a6:	d135      	bne.n	8004114 <_svfiprintf_r+0x188>
 80040a8:	9b03      	ldr	r3, [sp, #12]
 80040aa:	1d1a      	adds	r2, r3, #4
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	9203      	str	r2, [sp, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	bfb8      	it	lt
 80040b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80040b8:	3402      	adds	r4, #2
 80040ba:	9305      	str	r3, [sp, #20]
 80040bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004188 <_svfiprintf_r+0x1fc>
 80040c0:	7821      	ldrb	r1, [r4, #0]
 80040c2:	2203      	movs	r2, #3
 80040c4:	4650      	mov	r0, sl
 80040c6:	f7fc f88b 	bl	80001e0 <memchr>
 80040ca:	b140      	cbz	r0, 80040de <_svfiprintf_r+0x152>
 80040cc:	2340      	movs	r3, #64	; 0x40
 80040ce:	eba0 000a 	sub.w	r0, r0, sl
 80040d2:	fa03 f000 	lsl.w	r0, r3, r0
 80040d6:	9b04      	ldr	r3, [sp, #16]
 80040d8:	4303      	orrs	r3, r0
 80040da:	3401      	adds	r4, #1
 80040dc:	9304      	str	r3, [sp, #16]
 80040de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040e2:	4826      	ldr	r0, [pc, #152]	; (800417c <_svfiprintf_r+0x1f0>)
 80040e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040e8:	2206      	movs	r2, #6
 80040ea:	f7fc f879 	bl	80001e0 <memchr>
 80040ee:	2800      	cmp	r0, #0
 80040f0:	d038      	beq.n	8004164 <_svfiprintf_r+0x1d8>
 80040f2:	4b23      	ldr	r3, [pc, #140]	; (8004180 <_svfiprintf_r+0x1f4>)
 80040f4:	bb1b      	cbnz	r3, 800413e <_svfiprintf_r+0x1b2>
 80040f6:	9b03      	ldr	r3, [sp, #12]
 80040f8:	3307      	adds	r3, #7
 80040fa:	f023 0307 	bic.w	r3, r3, #7
 80040fe:	3308      	adds	r3, #8
 8004100:	9303      	str	r3, [sp, #12]
 8004102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004104:	4433      	add	r3, r6
 8004106:	9309      	str	r3, [sp, #36]	; 0x24
 8004108:	e767      	b.n	8003fda <_svfiprintf_r+0x4e>
 800410a:	fb0c 3202 	mla	r2, ip, r2, r3
 800410e:	460c      	mov	r4, r1
 8004110:	2001      	movs	r0, #1
 8004112:	e7a5      	b.n	8004060 <_svfiprintf_r+0xd4>
 8004114:	2300      	movs	r3, #0
 8004116:	3401      	adds	r4, #1
 8004118:	9305      	str	r3, [sp, #20]
 800411a:	4619      	mov	r1, r3
 800411c:	f04f 0c0a 	mov.w	ip, #10
 8004120:	4620      	mov	r0, r4
 8004122:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004126:	3a30      	subs	r2, #48	; 0x30
 8004128:	2a09      	cmp	r2, #9
 800412a:	d903      	bls.n	8004134 <_svfiprintf_r+0x1a8>
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0c5      	beq.n	80040bc <_svfiprintf_r+0x130>
 8004130:	9105      	str	r1, [sp, #20]
 8004132:	e7c3      	b.n	80040bc <_svfiprintf_r+0x130>
 8004134:	fb0c 2101 	mla	r1, ip, r1, r2
 8004138:	4604      	mov	r4, r0
 800413a:	2301      	movs	r3, #1
 800413c:	e7f0      	b.n	8004120 <_svfiprintf_r+0x194>
 800413e:	ab03      	add	r3, sp, #12
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	462a      	mov	r2, r5
 8004144:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <_svfiprintf_r+0x1f8>)
 8004146:	a904      	add	r1, sp, #16
 8004148:	4638      	mov	r0, r7
 800414a:	f3af 8000 	nop.w
 800414e:	1c42      	adds	r2, r0, #1
 8004150:	4606      	mov	r6, r0
 8004152:	d1d6      	bne.n	8004102 <_svfiprintf_r+0x176>
 8004154:	89ab      	ldrh	r3, [r5, #12]
 8004156:	065b      	lsls	r3, r3, #25
 8004158:	f53f af2c 	bmi.w	8003fb4 <_svfiprintf_r+0x28>
 800415c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800415e:	b01d      	add	sp, #116	; 0x74
 8004160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004164:	ab03      	add	r3, sp, #12
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	462a      	mov	r2, r5
 800416a:	4b06      	ldr	r3, [pc, #24]	; (8004184 <_svfiprintf_r+0x1f8>)
 800416c:	a904      	add	r1, sp, #16
 800416e:	4638      	mov	r0, r7
 8004170:	f000 f87a 	bl	8004268 <_printf_i>
 8004174:	e7eb      	b.n	800414e <_svfiprintf_r+0x1c2>
 8004176:	bf00      	nop
 8004178:	080048d8 	.word	0x080048d8
 800417c:	080048e2 	.word	0x080048e2
 8004180:	00000000 	.word	0x00000000
 8004184:	08003ed5 	.word	0x08003ed5
 8004188:	080048de 	.word	0x080048de

0800418c <_printf_common>:
 800418c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004190:	4616      	mov	r6, r2
 8004192:	4699      	mov	r9, r3
 8004194:	688a      	ldr	r2, [r1, #8]
 8004196:	690b      	ldr	r3, [r1, #16]
 8004198:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800419c:	4293      	cmp	r3, r2
 800419e:	bfb8      	it	lt
 80041a0:	4613      	movlt	r3, r2
 80041a2:	6033      	str	r3, [r6, #0]
 80041a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041a8:	4607      	mov	r7, r0
 80041aa:	460c      	mov	r4, r1
 80041ac:	b10a      	cbz	r2, 80041b2 <_printf_common+0x26>
 80041ae:	3301      	adds	r3, #1
 80041b0:	6033      	str	r3, [r6, #0]
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	0699      	lsls	r1, r3, #26
 80041b6:	bf42      	ittt	mi
 80041b8:	6833      	ldrmi	r3, [r6, #0]
 80041ba:	3302      	addmi	r3, #2
 80041bc:	6033      	strmi	r3, [r6, #0]
 80041be:	6825      	ldr	r5, [r4, #0]
 80041c0:	f015 0506 	ands.w	r5, r5, #6
 80041c4:	d106      	bne.n	80041d4 <_printf_common+0x48>
 80041c6:	f104 0a19 	add.w	sl, r4, #25
 80041ca:	68e3      	ldr	r3, [r4, #12]
 80041cc:	6832      	ldr	r2, [r6, #0]
 80041ce:	1a9b      	subs	r3, r3, r2
 80041d0:	42ab      	cmp	r3, r5
 80041d2:	dc26      	bgt.n	8004222 <_printf_common+0x96>
 80041d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041d8:	1e13      	subs	r3, r2, #0
 80041da:	6822      	ldr	r2, [r4, #0]
 80041dc:	bf18      	it	ne
 80041de:	2301      	movne	r3, #1
 80041e0:	0692      	lsls	r2, r2, #26
 80041e2:	d42b      	bmi.n	800423c <_printf_common+0xb0>
 80041e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041e8:	4649      	mov	r1, r9
 80041ea:	4638      	mov	r0, r7
 80041ec:	47c0      	blx	r8
 80041ee:	3001      	adds	r0, #1
 80041f0:	d01e      	beq.n	8004230 <_printf_common+0xa4>
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	68e5      	ldr	r5, [r4, #12]
 80041f6:	6832      	ldr	r2, [r6, #0]
 80041f8:	f003 0306 	and.w	r3, r3, #6
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	bf08      	it	eq
 8004200:	1aad      	subeq	r5, r5, r2
 8004202:	68a3      	ldr	r3, [r4, #8]
 8004204:	6922      	ldr	r2, [r4, #16]
 8004206:	bf0c      	ite	eq
 8004208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800420c:	2500      	movne	r5, #0
 800420e:	4293      	cmp	r3, r2
 8004210:	bfc4      	itt	gt
 8004212:	1a9b      	subgt	r3, r3, r2
 8004214:	18ed      	addgt	r5, r5, r3
 8004216:	2600      	movs	r6, #0
 8004218:	341a      	adds	r4, #26
 800421a:	42b5      	cmp	r5, r6
 800421c:	d11a      	bne.n	8004254 <_printf_common+0xc8>
 800421e:	2000      	movs	r0, #0
 8004220:	e008      	b.n	8004234 <_printf_common+0xa8>
 8004222:	2301      	movs	r3, #1
 8004224:	4652      	mov	r2, sl
 8004226:	4649      	mov	r1, r9
 8004228:	4638      	mov	r0, r7
 800422a:	47c0      	blx	r8
 800422c:	3001      	adds	r0, #1
 800422e:	d103      	bne.n	8004238 <_printf_common+0xac>
 8004230:	f04f 30ff 	mov.w	r0, #4294967295
 8004234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004238:	3501      	adds	r5, #1
 800423a:	e7c6      	b.n	80041ca <_printf_common+0x3e>
 800423c:	18e1      	adds	r1, r4, r3
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	2030      	movs	r0, #48	; 0x30
 8004242:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004246:	4422      	add	r2, r4
 8004248:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800424c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004250:	3302      	adds	r3, #2
 8004252:	e7c7      	b.n	80041e4 <_printf_common+0x58>
 8004254:	2301      	movs	r3, #1
 8004256:	4622      	mov	r2, r4
 8004258:	4649      	mov	r1, r9
 800425a:	4638      	mov	r0, r7
 800425c:	47c0      	blx	r8
 800425e:	3001      	adds	r0, #1
 8004260:	d0e6      	beq.n	8004230 <_printf_common+0xa4>
 8004262:	3601      	adds	r6, #1
 8004264:	e7d9      	b.n	800421a <_printf_common+0x8e>
	...

08004268 <_printf_i>:
 8004268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800426c:	7e0f      	ldrb	r7, [r1, #24]
 800426e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004270:	2f78      	cmp	r7, #120	; 0x78
 8004272:	4691      	mov	r9, r2
 8004274:	4680      	mov	r8, r0
 8004276:	460c      	mov	r4, r1
 8004278:	469a      	mov	sl, r3
 800427a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800427e:	d807      	bhi.n	8004290 <_printf_i+0x28>
 8004280:	2f62      	cmp	r7, #98	; 0x62
 8004282:	d80a      	bhi.n	800429a <_printf_i+0x32>
 8004284:	2f00      	cmp	r7, #0
 8004286:	f000 80d8 	beq.w	800443a <_printf_i+0x1d2>
 800428a:	2f58      	cmp	r7, #88	; 0x58
 800428c:	f000 80a3 	beq.w	80043d6 <_printf_i+0x16e>
 8004290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004294:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004298:	e03a      	b.n	8004310 <_printf_i+0xa8>
 800429a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800429e:	2b15      	cmp	r3, #21
 80042a0:	d8f6      	bhi.n	8004290 <_printf_i+0x28>
 80042a2:	a101      	add	r1, pc, #4	; (adr r1, 80042a8 <_printf_i+0x40>)
 80042a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042a8:	08004301 	.word	0x08004301
 80042ac:	08004315 	.word	0x08004315
 80042b0:	08004291 	.word	0x08004291
 80042b4:	08004291 	.word	0x08004291
 80042b8:	08004291 	.word	0x08004291
 80042bc:	08004291 	.word	0x08004291
 80042c0:	08004315 	.word	0x08004315
 80042c4:	08004291 	.word	0x08004291
 80042c8:	08004291 	.word	0x08004291
 80042cc:	08004291 	.word	0x08004291
 80042d0:	08004291 	.word	0x08004291
 80042d4:	08004421 	.word	0x08004421
 80042d8:	08004345 	.word	0x08004345
 80042dc:	08004403 	.word	0x08004403
 80042e0:	08004291 	.word	0x08004291
 80042e4:	08004291 	.word	0x08004291
 80042e8:	08004443 	.word	0x08004443
 80042ec:	08004291 	.word	0x08004291
 80042f0:	08004345 	.word	0x08004345
 80042f4:	08004291 	.word	0x08004291
 80042f8:	08004291 	.word	0x08004291
 80042fc:	0800440b 	.word	0x0800440b
 8004300:	682b      	ldr	r3, [r5, #0]
 8004302:	1d1a      	adds	r2, r3, #4
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	602a      	str	r2, [r5, #0]
 8004308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800430c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004310:	2301      	movs	r3, #1
 8004312:	e0a3      	b.n	800445c <_printf_i+0x1f4>
 8004314:	6820      	ldr	r0, [r4, #0]
 8004316:	6829      	ldr	r1, [r5, #0]
 8004318:	0606      	lsls	r6, r0, #24
 800431a:	f101 0304 	add.w	r3, r1, #4
 800431e:	d50a      	bpl.n	8004336 <_printf_i+0xce>
 8004320:	680e      	ldr	r6, [r1, #0]
 8004322:	602b      	str	r3, [r5, #0]
 8004324:	2e00      	cmp	r6, #0
 8004326:	da03      	bge.n	8004330 <_printf_i+0xc8>
 8004328:	232d      	movs	r3, #45	; 0x2d
 800432a:	4276      	negs	r6, r6
 800432c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004330:	485e      	ldr	r0, [pc, #376]	; (80044ac <_printf_i+0x244>)
 8004332:	230a      	movs	r3, #10
 8004334:	e019      	b.n	800436a <_printf_i+0x102>
 8004336:	680e      	ldr	r6, [r1, #0]
 8004338:	602b      	str	r3, [r5, #0]
 800433a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800433e:	bf18      	it	ne
 8004340:	b236      	sxthne	r6, r6
 8004342:	e7ef      	b.n	8004324 <_printf_i+0xbc>
 8004344:	682b      	ldr	r3, [r5, #0]
 8004346:	6820      	ldr	r0, [r4, #0]
 8004348:	1d19      	adds	r1, r3, #4
 800434a:	6029      	str	r1, [r5, #0]
 800434c:	0601      	lsls	r1, r0, #24
 800434e:	d501      	bpl.n	8004354 <_printf_i+0xec>
 8004350:	681e      	ldr	r6, [r3, #0]
 8004352:	e002      	b.n	800435a <_printf_i+0xf2>
 8004354:	0646      	lsls	r6, r0, #25
 8004356:	d5fb      	bpl.n	8004350 <_printf_i+0xe8>
 8004358:	881e      	ldrh	r6, [r3, #0]
 800435a:	4854      	ldr	r0, [pc, #336]	; (80044ac <_printf_i+0x244>)
 800435c:	2f6f      	cmp	r7, #111	; 0x6f
 800435e:	bf0c      	ite	eq
 8004360:	2308      	moveq	r3, #8
 8004362:	230a      	movne	r3, #10
 8004364:	2100      	movs	r1, #0
 8004366:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800436a:	6865      	ldr	r5, [r4, #4]
 800436c:	60a5      	str	r5, [r4, #8]
 800436e:	2d00      	cmp	r5, #0
 8004370:	bfa2      	ittt	ge
 8004372:	6821      	ldrge	r1, [r4, #0]
 8004374:	f021 0104 	bicge.w	r1, r1, #4
 8004378:	6021      	strge	r1, [r4, #0]
 800437a:	b90e      	cbnz	r6, 8004380 <_printf_i+0x118>
 800437c:	2d00      	cmp	r5, #0
 800437e:	d04d      	beq.n	800441c <_printf_i+0x1b4>
 8004380:	4615      	mov	r5, r2
 8004382:	fbb6 f1f3 	udiv	r1, r6, r3
 8004386:	fb03 6711 	mls	r7, r3, r1, r6
 800438a:	5dc7      	ldrb	r7, [r0, r7]
 800438c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004390:	4637      	mov	r7, r6
 8004392:	42bb      	cmp	r3, r7
 8004394:	460e      	mov	r6, r1
 8004396:	d9f4      	bls.n	8004382 <_printf_i+0x11a>
 8004398:	2b08      	cmp	r3, #8
 800439a:	d10b      	bne.n	80043b4 <_printf_i+0x14c>
 800439c:	6823      	ldr	r3, [r4, #0]
 800439e:	07de      	lsls	r6, r3, #31
 80043a0:	d508      	bpl.n	80043b4 <_printf_i+0x14c>
 80043a2:	6923      	ldr	r3, [r4, #16]
 80043a4:	6861      	ldr	r1, [r4, #4]
 80043a6:	4299      	cmp	r1, r3
 80043a8:	bfde      	ittt	le
 80043aa:	2330      	movle	r3, #48	; 0x30
 80043ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043b4:	1b52      	subs	r2, r2, r5
 80043b6:	6122      	str	r2, [r4, #16]
 80043b8:	f8cd a000 	str.w	sl, [sp]
 80043bc:	464b      	mov	r3, r9
 80043be:	aa03      	add	r2, sp, #12
 80043c0:	4621      	mov	r1, r4
 80043c2:	4640      	mov	r0, r8
 80043c4:	f7ff fee2 	bl	800418c <_printf_common>
 80043c8:	3001      	adds	r0, #1
 80043ca:	d14c      	bne.n	8004466 <_printf_i+0x1fe>
 80043cc:	f04f 30ff 	mov.w	r0, #4294967295
 80043d0:	b004      	add	sp, #16
 80043d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d6:	4835      	ldr	r0, [pc, #212]	; (80044ac <_printf_i+0x244>)
 80043d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80043dc:	6829      	ldr	r1, [r5, #0]
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80043e4:	6029      	str	r1, [r5, #0]
 80043e6:	061d      	lsls	r5, r3, #24
 80043e8:	d514      	bpl.n	8004414 <_printf_i+0x1ac>
 80043ea:	07df      	lsls	r7, r3, #31
 80043ec:	bf44      	itt	mi
 80043ee:	f043 0320 	orrmi.w	r3, r3, #32
 80043f2:	6023      	strmi	r3, [r4, #0]
 80043f4:	b91e      	cbnz	r6, 80043fe <_printf_i+0x196>
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	f023 0320 	bic.w	r3, r3, #32
 80043fc:	6023      	str	r3, [r4, #0]
 80043fe:	2310      	movs	r3, #16
 8004400:	e7b0      	b.n	8004364 <_printf_i+0xfc>
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	f043 0320 	orr.w	r3, r3, #32
 8004408:	6023      	str	r3, [r4, #0]
 800440a:	2378      	movs	r3, #120	; 0x78
 800440c:	4828      	ldr	r0, [pc, #160]	; (80044b0 <_printf_i+0x248>)
 800440e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004412:	e7e3      	b.n	80043dc <_printf_i+0x174>
 8004414:	0659      	lsls	r1, r3, #25
 8004416:	bf48      	it	mi
 8004418:	b2b6      	uxthmi	r6, r6
 800441a:	e7e6      	b.n	80043ea <_printf_i+0x182>
 800441c:	4615      	mov	r5, r2
 800441e:	e7bb      	b.n	8004398 <_printf_i+0x130>
 8004420:	682b      	ldr	r3, [r5, #0]
 8004422:	6826      	ldr	r6, [r4, #0]
 8004424:	6961      	ldr	r1, [r4, #20]
 8004426:	1d18      	adds	r0, r3, #4
 8004428:	6028      	str	r0, [r5, #0]
 800442a:	0635      	lsls	r5, r6, #24
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	d501      	bpl.n	8004434 <_printf_i+0x1cc>
 8004430:	6019      	str	r1, [r3, #0]
 8004432:	e002      	b.n	800443a <_printf_i+0x1d2>
 8004434:	0670      	lsls	r0, r6, #25
 8004436:	d5fb      	bpl.n	8004430 <_printf_i+0x1c8>
 8004438:	8019      	strh	r1, [r3, #0]
 800443a:	2300      	movs	r3, #0
 800443c:	6123      	str	r3, [r4, #16]
 800443e:	4615      	mov	r5, r2
 8004440:	e7ba      	b.n	80043b8 <_printf_i+0x150>
 8004442:	682b      	ldr	r3, [r5, #0]
 8004444:	1d1a      	adds	r2, r3, #4
 8004446:	602a      	str	r2, [r5, #0]
 8004448:	681d      	ldr	r5, [r3, #0]
 800444a:	6862      	ldr	r2, [r4, #4]
 800444c:	2100      	movs	r1, #0
 800444e:	4628      	mov	r0, r5
 8004450:	f7fb fec6 	bl	80001e0 <memchr>
 8004454:	b108      	cbz	r0, 800445a <_printf_i+0x1f2>
 8004456:	1b40      	subs	r0, r0, r5
 8004458:	6060      	str	r0, [r4, #4]
 800445a:	6863      	ldr	r3, [r4, #4]
 800445c:	6123      	str	r3, [r4, #16]
 800445e:	2300      	movs	r3, #0
 8004460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004464:	e7a8      	b.n	80043b8 <_printf_i+0x150>
 8004466:	6923      	ldr	r3, [r4, #16]
 8004468:	462a      	mov	r2, r5
 800446a:	4649      	mov	r1, r9
 800446c:	4640      	mov	r0, r8
 800446e:	47d0      	blx	sl
 8004470:	3001      	adds	r0, #1
 8004472:	d0ab      	beq.n	80043cc <_printf_i+0x164>
 8004474:	6823      	ldr	r3, [r4, #0]
 8004476:	079b      	lsls	r3, r3, #30
 8004478:	d413      	bmi.n	80044a2 <_printf_i+0x23a>
 800447a:	68e0      	ldr	r0, [r4, #12]
 800447c:	9b03      	ldr	r3, [sp, #12]
 800447e:	4298      	cmp	r0, r3
 8004480:	bfb8      	it	lt
 8004482:	4618      	movlt	r0, r3
 8004484:	e7a4      	b.n	80043d0 <_printf_i+0x168>
 8004486:	2301      	movs	r3, #1
 8004488:	4632      	mov	r2, r6
 800448a:	4649      	mov	r1, r9
 800448c:	4640      	mov	r0, r8
 800448e:	47d0      	blx	sl
 8004490:	3001      	adds	r0, #1
 8004492:	d09b      	beq.n	80043cc <_printf_i+0x164>
 8004494:	3501      	adds	r5, #1
 8004496:	68e3      	ldr	r3, [r4, #12]
 8004498:	9903      	ldr	r1, [sp, #12]
 800449a:	1a5b      	subs	r3, r3, r1
 800449c:	42ab      	cmp	r3, r5
 800449e:	dcf2      	bgt.n	8004486 <_printf_i+0x21e>
 80044a0:	e7eb      	b.n	800447a <_printf_i+0x212>
 80044a2:	2500      	movs	r5, #0
 80044a4:	f104 0619 	add.w	r6, r4, #25
 80044a8:	e7f5      	b.n	8004496 <_printf_i+0x22e>
 80044aa:	bf00      	nop
 80044ac:	080048e9 	.word	0x080048e9
 80044b0:	080048fa 	.word	0x080048fa

080044b4 <memcpy>:
 80044b4:	440a      	add	r2, r1
 80044b6:	4291      	cmp	r1, r2
 80044b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80044bc:	d100      	bne.n	80044c0 <memcpy+0xc>
 80044be:	4770      	bx	lr
 80044c0:	b510      	push	{r4, lr}
 80044c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044ca:	4291      	cmp	r1, r2
 80044cc:	d1f9      	bne.n	80044c2 <memcpy+0xe>
 80044ce:	bd10      	pop	{r4, pc}

080044d0 <memmove>:
 80044d0:	4288      	cmp	r0, r1
 80044d2:	b510      	push	{r4, lr}
 80044d4:	eb01 0402 	add.w	r4, r1, r2
 80044d8:	d902      	bls.n	80044e0 <memmove+0x10>
 80044da:	4284      	cmp	r4, r0
 80044dc:	4623      	mov	r3, r4
 80044de:	d807      	bhi.n	80044f0 <memmove+0x20>
 80044e0:	1e43      	subs	r3, r0, #1
 80044e2:	42a1      	cmp	r1, r4
 80044e4:	d008      	beq.n	80044f8 <memmove+0x28>
 80044e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044ee:	e7f8      	b.n	80044e2 <memmove+0x12>
 80044f0:	4402      	add	r2, r0
 80044f2:	4601      	mov	r1, r0
 80044f4:	428a      	cmp	r2, r1
 80044f6:	d100      	bne.n	80044fa <memmove+0x2a>
 80044f8:	bd10      	pop	{r4, pc}
 80044fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004502:	e7f7      	b.n	80044f4 <memmove+0x24>

08004504 <_free_r>:
 8004504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004506:	2900      	cmp	r1, #0
 8004508:	d044      	beq.n	8004594 <_free_r+0x90>
 800450a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800450e:	9001      	str	r0, [sp, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	f1a1 0404 	sub.w	r4, r1, #4
 8004516:	bfb8      	it	lt
 8004518:	18e4      	addlt	r4, r4, r3
 800451a:	f000 f913 	bl	8004744 <__malloc_lock>
 800451e:	4a1e      	ldr	r2, [pc, #120]	; (8004598 <_free_r+0x94>)
 8004520:	9801      	ldr	r0, [sp, #4]
 8004522:	6813      	ldr	r3, [r2, #0]
 8004524:	b933      	cbnz	r3, 8004534 <_free_r+0x30>
 8004526:	6063      	str	r3, [r4, #4]
 8004528:	6014      	str	r4, [r2, #0]
 800452a:	b003      	add	sp, #12
 800452c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004530:	f000 b90e 	b.w	8004750 <__malloc_unlock>
 8004534:	42a3      	cmp	r3, r4
 8004536:	d908      	bls.n	800454a <_free_r+0x46>
 8004538:	6825      	ldr	r5, [r4, #0]
 800453a:	1961      	adds	r1, r4, r5
 800453c:	428b      	cmp	r3, r1
 800453e:	bf01      	itttt	eq
 8004540:	6819      	ldreq	r1, [r3, #0]
 8004542:	685b      	ldreq	r3, [r3, #4]
 8004544:	1949      	addeq	r1, r1, r5
 8004546:	6021      	streq	r1, [r4, #0]
 8004548:	e7ed      	b.n	8004526 <_free_r+0x22>
 800454a:	461a      	mov	r2, r3
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	b10b      	cbz	r3, 8004554 <_free_r+0x50>
 8004550:	42a3      	cmp	r3, r4
 8004552:	d9fa      	bls.n	800454a <_free_r+0x46>
 8004554:	6811      	ldr	r1, [r2, #0]
 8004556:	1855      	adds	r5, r2, r1
 8004558:	42a5      	cmp	r5, r4
 800455a:	d10b      	bne.n	8004574 <_free_r+0x70>
 800455c:	6824      	ldr	r4, [r4, #0]
 800455e:	4421      	add	r1, r4
 8004560:	1854      	adds	r4, r2, r1
 8004562:	42a3      	cmp	r3, r4
 8004564:	6011      	str	r1, [r2, #0]
 8004566:	d1e0      	bne.n	800452a <_free_r+0x26>
 8004568:	681c      	ldr	r4, [r3, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	6053      	str	r3, [r2, #4]
 800456e:	4421      	add	r1, r4
 8004570:	6011      	str	r1, [r2, #0]
 8004572:	e7da      	b.n	800452a <_free_r+0x26>
 8004574:	d902      	bls.n	800457c <_free_r+0x78>
 8004576:	230c      	movs	r3, #12
 8004578:	6003      	str	r3, [r0, #0]
 800457a:	e7d6      	b.n	800452a <_free_r+0x26>
 800457c:	6825      	ldr	r5, [r4, #0]
 800457e:	1961      	adds	r1, r4, r5
 8004580:	428b      	cmp	r3, r1
 8004582:	bf04      	itt	eq
 8004584:	6819      	ldreq	r1, [r3, #0]
 8004586:	685b      	ldreq	r3, [r3, #4]
 8004588:	6063      	str	r3, [r4, #4]
 800458a:	bf04      	itt	eq
 800458c:	1949      	addeq	r1, r1, r5
 800458e:	6021      	streq	r1, [r4, #0]
 8004590:	6054      	str	r4, [r2, #4]
 8004592:	e7ca      	b.n	800452a <_free_r+0x26>
 8004594:	b003      	add	sp, #12
 8004596:	bd30      	pop	{r4, r5, pc}
 8004598:	200005ac 	.word	0x200005ac

0800459c <sbrk_aligned>:
 800459c:	b570      	push	{r4, r5, r6, lr}
 800459e:	4e0e      	ldr	r6, [pc, #56]	; (80045d8 <sbrk_aligned+0x3c>)
 80045a0:	460c      	mov	r4, r1
 80045a2:	6831      	ldr	r1, [r6, #0]
 80045a4:	4605      	mov	r5, r0
 80045a6:	b911      	cbnz	r1, 80045ae <sbrk_aligned+0x12>
 80045a8:	f000 f8bc 	bl	8004724 <_sbrk_r>
 80045ac:	6030      	str	r0, [r6, #0]
 80045ae:	4621      	mov	r1, r4
 80045b0:	4628      	mov	r0, r5
 80045b2:	f000 f8b7 	bl	8004724 <_sbrk_r>
 80045b6:	1c43      	adds	r3, r0, #1
 80045b8:	d00a      	beq.n	80045d0 <sbrk_aligned+0x34>
 80045ba:	1cc4      	adds	r4, r0, #3
 80045bc:	f024 0403 	bic.w	r4, r4, #3
 80045c0:	42a0      	cmp	r0, r4
 80045c2:	d007      	beq.n	80045d4 <sbrk_aligned+0x38>
 80045c4:	1a21      	subs	r1, r4, r0
 80045c6:	4628      	mov	r0, r5
 80045c8:	f000 f8ac 	bl	8004724 <_sbrk_r>
 80045cc:	3001      	adds	r0, #1
 80045ce:	d101      	bne.n	80045d4 <sbrk_aligned+0x38>
 80045d0:	f04f 34ff 	mov.w	r4, #4294967295
 80045d4:	4620      	mov	r0, r4
 80045d6:	bd70      	pop	{r4, r5, r6, pc}
 80045d8:	200005b0 	.word	0x200005b0

080045dc <_malloc_r>:
 80045dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045e0:	1ccd      	adds	r5, r1, #3
 80045e2:	f025 0503 	bic.w	r5, r5, #3
 80045e6:	3508      	adds	r5, #8
 80045e8:	2d0c      	cmp	r5, #12
 80045ea:	bf38      	it	cc
 80045ec:	250c      	movcc	r5, #12
 80045ee:	2d00      	cmp	r5, #0
 80045f0:	4607      	mov	r7, r0
 80045f2:	db01      	blt.n	80045f8 <_malloc_r+0x1c>
 80045f4:	42a9      	cmp	r1, r5
 80045f6:	d905      	bls.n	8004604 <_malloc_r+0x28>
 80045f8:	230c      	movs	r3, #12
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	2600      	movs	r6, #0
 80045fe:	4630      	mov	r0, r6
 8004600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004604:	4e2e      	ldr	r6, [pc, #184]	; (80046c0 <_malloc_r+0xe4>)
 8004606:	f000 f89d 	bl	8004744 <__malloc_lock>
 800460a:	6833      	ldr	r3, [r6, #0]
 800460c:	461c      	mov	r4, r3
 800460e:	bb34      	cbnz	r4, 800465e <_malloc_r+0x82>
 8004610:	4629      	mov	r1, r5
 8004612:	4638      	mov	r0, r7
 8004614:	f7ff ffc2 	bl	800459c <sbrk_aligned>
 8004618:	1c43      	adds	r3, r0, #1
 800461a:	4604      	mov	r4, r0
 800461c:	d14d      	bne.n	80046ba <_malloc_r+0xde>
 800461e:	6834      	ldr	r4, [r6, #0]
 8004620:	4626      	mov	r6, r4
 8004622:	2e00      	cmp	r6, #0
 8004624:	d140      	bne.n	80046a8 <_malloc_r+0xcc>
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	4631      	mov	r1, r6
 800462a:	4638      	mov	r0, r7
 800462c:	eb04 0803 	add.w	r8, r4, r3
 8004630:	f000 f878 	bl	8004724 <_sbrk_r>
 8004634:	4580      	cmp	r8, r0
 8004636:	d13a      	bne.n	80046ae <_malloc_r+0xd2>
 8004638:	6821      	ldr	r1, [r4, #0]
 800463a:	3503      	adds	r5, #3
 800463c:	1a6d      	subs	r5, r5, r1
 800463e:	f025 0503 	bic.w	r5, r5, #3
 8004642:	3508      	adds	r5, #8
 8004644:	2d0c      	cmp	r5, #12
 8004646:	bf38      	it	cc
 8004648:	250c      	movcc	r5, #12
 800464a:	4629      	mov	r1, r5
 800464c:	4638      	mov	r0, r7
 800464e:	f7ff ffa5 	bl	800459c <sbrk_aligned>
 8004652:	3001      	adds	r0, #1
 8004654:	d02b      	beq.n	80046ae <_malloc_r+0xd2>
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	442b      	add	r3, r5
 800465a:	6023      	str	r3, [r4, #0]
 800465c:	e00e      	b.n	800467c <_malloc_r+0xa0>
 800465e:	6822      	ldr	r2, [r4, #0]
 8004660:	1b52      	subs	r2, r2, r5
 8004662:	d41e      	bmi.n	80046a2 <_malloc_r+0xc6>
 8004664:	2a0b      	cmp	r2, #11
 8004666:	d916      	bls.n	8004696 <_malloc_r+0xba>
 8004668:	1961      	adds	r1, r4, r5
 800466a:	42a3      	cmp	r3, r4
 800466c:	6025      	str	r5, [r4, #0]
 800466e:	bf18      	it	ne
 8004670:	6059      	strne	r1, [r3, #4]
 8004672:	6863      	ldr	r3, [r4, #4]
 8004674:	bf08      	it	eq
 8004676:	6031      	streq	r1, [r6, #0]
 8004678:	5162      	str	r2, [r4, r5]
 800467a:	604b      	str	r3, [r1, #4]
 800467c:	4638      	mov	r0, r7
 800467e:	f104 060b 	add.w	r6, r4, #11
 8004682:	f000 f865 	bl	8004750 <__malloc_unlock>
 8004686:	f026 0607 	bic.w	r6, r6, #7
 800468a:	1d23      	adds	r3, r4, #4
 800468c:	1af2      	subs	r2, r6, r3
 800468e:	d0b6      	beq.n	80045fe <_malloc_r+0x22>
 8004690:	1b9b      	subs	r3, r3, r6
 8004692:	50a3      	str	r3, [r4, r2]
 8004694:	e7b3      	b.n	80045fe <_malloc_r+0x22>
 8004696:	6862      	ldr	r2, [r4, #4]
 8004698:	42a3      	cmp	r3, r4
 800469a:	bf0c      	ite	eq
 800469c:	6032      	streq	r2, [r6, #0]
 800469e:	605a      	strne	r2, [r3, #4]
 80046a0:	e7ec      	b.n	800467c <_malloc_r+0xa0>
 80046a2:	4623      	mov	r3, r4
 80046a4:	6864      	ldr	r4, [r4, #4]
 80046a6:	e7b2      	b.n	800460e <_malloc_r+0x32>
 80046a8:	4634      	mov	r4, r6
 80046aa:	6876      	ldr	r6, [r6, #4]
 80046ac:	e7b9      	b.n	8004622 <_malloc_r+0x46>
 80046ae:	230c      	movs	r3, #12
 80046b0:	603b      	str	r3, [r7, #0]
 80046b2:	4638      	mov	r0, r7
 80046b4:	f000 f84c 	bl	8004750 <__malloc_unlock>
 80046b8:	e7a1      	b.n	80045fe <_malloc_r+0x22>
 80046ba:	6025      	str	r5, [r4, #0]
 80046bc:	e7de      	b.n	800467c <_malloc_r+0xa0>
 80046be:	bf00      	nop
 80046c0:	200005ac 	.word	0x200005ac

080046c4 <_realloc_r>:
 80046c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046c8:	4680      	mov	r8, r0
 80046ca:	4614      	mov	r4, r2
 80046cc:	460e      	mov	r6, r1
 80046ce:	b921      	cbnz	r1, 80046da <_realloc_r+0x16>
 80046d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046d4:	4611      	mov	r1, r2
 80046d6:	f7ff bf81 	b.w	80045dc <_malloc_r>
 80046da:	b92a      	cbnz	r2, 80046e8 <_realloc_r+0x24>
 80046dc:	f7ff ff12 	bl	8004504 <_free_r>
 80046e0:	4625      	mov	r5, r4
 80046e2:	4628      	mov	r0, r5
 80046e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046e8:	f000 f838 	bl	800475c <_malloc_usable_size_r>
 80046ec:	4284      	cmp	r4, r0
 80046ee:	4607      	mov	r7, r0
 80046f0:	d802      	bhi.n	80046f8 <_realloc_r+0x34>
 80046f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80046f6:	d812      	bhi.n	800471e <_realloc_r+0x5a>
 80046f8:	4621      	mov	r1, r4
 80046fa:	4640      	mov	r0, r8
 80046fc:	f7ff ff6e 	bl	80045dc <_malloc_r>
 8004700:	4605      	mov	r5, r0
 8004702:	2800      	cmp	r0, #0
 8004704:	d0ed      	beq.n	80046e2 <_realloc_r+0x1e>
 8004706:	42bc      	cmp	r4, r7
 8004708:	4622      	mov	r2, r4
 800470a:	4631      	mov	r1, r6
 800470c:	bf28      	it	cs
 800470e:	463a      	movcs	r2, r7
 8004710:	f7ff fed0 	bl	80044b4 <memcpy>
 8004714:	4631      	mov	r1, r6
 8004716:	4640      	mov	r0, r8
 8004718:	f7ff fef4 	bl	8004504 <_free_r>
 800471c:	e7e1      	b.n	80046e2 <_realloc_r+0x1e>
 800471e:	4635      	mov	r5, r6
 8004720:	e7df      	b.n	80046e2 <_realloc_r+0x1e>
	...

08004724 <_sbrk_r>:
 8004724:	b538      	push	{r3, r4, r5, lr}
 8004726:	4d06      	ldr	r5, [pc, #24]	; (8004740 <_sbrk_r+0x1c>)
 8004728:	2300      	movs	r3, #0
 800472a:	4604      	mov	r4, r0
 800472c:	4608      	mov	r0, r1
 800472e:	602b      	str	r3, [r5, #0]
 8004730:	f7fd f818 	bl	8001764 <_sbrk>
 8004734:	1c43      	adds	r3, r0, #1
 8004736:	d102      	bne.n	800473e <_sbrk_r+0x1a>
 8004738:	682b      	ldr	r3, [r5, #0]
 800473a:	b103      	cbz	r3, 800473e <_sbrk_r+0x1a>
 800473c:	6023      	str	r3, [r4, #0]
 800473e:	bd38      	pop	{r3, r4, r5, pc}
 8004740:	200005b4 	.word	0x200005b4

08004744 <__malloc_lock>:
 8004744:	4801      	ldr	r0, [pc, #4]	; (800474c <__malloc_lock+0x8>)
 8004746:	f000 b811 	b.w	800476c <__retarget_lock_acquire_recursive>
 800474a:	bf00      	nop
 800474c:	200005b8 	.word	0x200005b8

08004750 <__malloc_unlock>:
 8004750:	4801      	ldr	r0, [pc, #4]	; (8004758 <__malloc_unlock+0x8>)
 8004752:	f000 b80c 	b.w	800476e <__retarget_lock_release_recursive>
 8004756:	bf00      	nop
 8004758:	200005b8 	.word	0x200005b8

0800475c <_malloc_usable_size_r>:
 800475c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004760:	1f18      	subs	r0, r3, #4
 8004762:	2b00      	cmp	r3, #0
 8004764:	bfbc      	itt	lt
 8004766:	580b      	ldrlt	r3, [r1, r0]
 8004768:	18c0      	addlt	r0, r0, r3
 800476a:	4770      	bx	lr

0800476c <__retarget_lock_acquire_recursive>:
 800476c:	4770      	bx	lr

0800476e <__retarget_lock_release_recursive>:
 800476e:	4770      	bx	lr

08004770 <_init>:
 8004770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004772:	bf00      	nop
 8004774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004776:	bc08      	pop	{r3}
 8004778:	469e      	mov	lr, r3
 800477a:	4770      	bx	lr

0800477c <_fini>:
 800477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477e:	bf00      	nop
 8004780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004782:	bc08      	pop	{r3}
 8004784:	469e      	mov	lr, r3
 8004786:	4770      	bx	lr
