
COM usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e78  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08008000  08008000  00018000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008094  08008094  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08008094  08008094  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008094  08008094  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008094  08008094  00018094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008098  08008098  00018098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800809c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f4  20000180  0800821c  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001374  0800821c  00021374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf65  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ca  00000000  00000000  0002d115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  0002f8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a0  00000000  00000000  000302b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d03c  00000000  00000000  00030b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0d6  00000000  00000000  0004db94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c3b1  00000000  00000000  0005bc6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f801b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002588  00000000  00000000  000f806c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007fe8 	.word	0x08007fe8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	08007fe8 	.word	0x08007fe8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b598      	push	{r3, r4, r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001dc:	f000 f934 	bl	8000448 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e0:	f000 f818 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e4:	f000 f872 	bl	80002cc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80001e8:	f007 fa2e 	bl	8007648 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  CDC_Transmit_FS((uint8_t *)data, strlen(data));
 80001ec:	4b08      	ldr	r3, [pc, #32]	; (8000210 <main+0x38>)
 80001ee:	681c      	ldr	r4, [r3, #0]
 80001f0:	4b07      	ldr	r3, [pc, #28]	; (8000210 <main+0x38>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4618      	mov	r0, r3
 80001f6:	f7ff ffe7 	bl	80001c8 <strlen>
 80001fa:	4603      	mov	r3, r0
 80001fc:	b29b      	uxth	r3, r3
 80001fe:	4619      	mov	r1, r3
 8000200:	4620      	mov	r0, r4
 8000202:	f007 fadf 	bl	80077c4 <CDC_Transmit_FS>
		  	  HAL_Delay (1000);
 8000206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800020a:	f000 f983 	bl	8000514 <HAL_Delay>
	  CDC_Transmit_FS((uint8_t *)data, strlen(data));
 800020e:	e7ed      	b.n	80001ec <main+0x14>
 8000210:	20000000 	.word	0x20000000

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b09c      	sub	sp, #112	; 0x70
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800021e:	2228      	movs	r2, #40	; 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f007 fed8 	bl	8007fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000238:	463b      	mov	r3, r7
 800023a:	2234      	movs	r2, #52	; 0x34
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f007 feca 	bl	8007fd8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000244:	2301      	movs	r3, #1
 8000246:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000248:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000252:	2301      	movs	r3, #1
 8000254:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000256:	2302      	movs	r3, #2
 8000258:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800025a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800025e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000260:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000264:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000266:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800026a:	4618      	mov	r0, r3
 800026c:	f001 ff4a 	bl	8002104 <HAL_RCC_OscConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000276:	f000 f84d 	bl	8000314 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027a:	230f      	movs	r3, #15
 800027c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027e:	2302      	movs	r3, #2
 8000280:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800028a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000290:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000294:	2102      	movs	r1, #2
 8000296:	4618      	mov	r0, r3
 8000298:	f002 ff72 	bl	8003180 <HAL_RCC_ClockConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002a2:	f000 f837 	bl	8000314 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80002aa:	603b      	str	r3, [r7, #0]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002ac:	2300      	movs	r3, #0
 80002ae:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b0:	463b      	mov	r3, r7
 80002b2:	4618      	mov	r0, r3
 80002b4:	f003 f94a 	bl	800354c <HAL_RCCEx_PeriphCLKConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002be:	f000 f829 	bl	8000314 <Error_Handler>
  }
}
 80002c2:	bf00      	nop
 80002c4:	3770      	adds	r7, #112	; 0x70
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
	...

080002cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002d2:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <MX_GPIO_Init+0x44>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	4a0e      	ldr	r2, [pc, #56]	; (8000310 <MX_GPIO_Init+0x44>)
 80002d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002dc:	6153      	str	r3, [r2, #20]
 80002de:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <MX_GPIO_Init+0x44>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002e6:	607b      	str	r3, [r7, #4]
 80002e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <MX_GPIO_Init+0x44>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	4a08      	ldr	r2, [pc, #32]	; (8000310 <MX_GPIO_Init+0x44>)
 80002f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002f4:	6153      	str	r3, [r2, #20]
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <MX_GPIO_Init+0x44>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002fe:	603b      	str	r3, [r7, #0]
 8000300:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000302:	bf00      	nop
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40021000 	.word	0x40021000

08000314 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000318:	b672      	cpsid	i
}
 800031a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800031c:	e7fe      	b.n	800031c <Error_Handler+0x8>
	...

08000320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000326:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <HAL_MspInit+0x44>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	4a0e      	ldr	r2, [pc, #56]	; (8000364 <HAL_MspInit+0x44>)
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6193      	str	r3, [r2, #24]
 8000332:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <HAL_MspInit+0x44>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	f003 0301 	and.w	r3, r3, #1
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800033e:	4b09      	ldr	r3, [pc, #36]	; (8000364 <HAL_MspInit+0x44>)
 8000340:	69db      	ldr	r3, [r3, #28]
 8000342:	4a08      	ldr	r2, [pc, #32]	; (8000364 <HAL_MspInit+0x44>)
 8000344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000348:	61d3      	str	r3, [r2, #28]
 800034a:	4b06      	ldr	r3, [pc, #24]	; (8000364 <HAL_MspInit+0x44>)
 800034c:	69db      	ldr	r3, [r3, #28]
 800034e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000352:	603b      	str	r3, [r7, #0]
 8000354:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000356:	2007      	movs	r0, #7
 8000358:	f000 f9d0 	bl	80006fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800035c:	bf00      	nop
 800035e:	3708      	adds	r7, #8
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	40021000 	.word	0x40021000

08000368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800036c:	e7fe      	b.n	800036c <NMI_Handler+0x4>

0800036e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000372:	e7fe      	b.n	8000372 <HardFault_Handler+0x4>

08000374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000378:	e7fe      	b.n	8000378 <MemManage_Handler+0x4>

0800037a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800037e:	e7fe      	b.n	800037e <BusFault_Handler+0x4>

08000380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000384:	e7fe      	b.n	8000384 <UsageFault_Handler+0x4>

08000386 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800038a:	bf00      	nop
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr

08000394 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr

080003a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003a2:	b480      	push	{r7}
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003a6:	bf00      	nop
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr

080003b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b4:	f000 f88e 	bl	80004d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}

080003bc <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003c0:	4802      	ldr	r0, [pc, #8]	; (80003cc <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80003c2:	f000 fad4 	bl	800096e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000e68 	.word	0x20000e68

080003d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <SystemInit+0x20>)
 80003d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003da:	4a05      	ldr	r2, [pc, #20]	; (80003f0 <SystemInit+0x20>)
 80003dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	e000ed00 	.word	0xe000ed00

080003f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800042c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80003f8:	f7ff ffea 	bl	80003d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003fc:	480c      	ldr	r0, [pc, #48]	; (8000430 <LoopForever+0x6>)
  ldr r1, =_edata
 80003fe:	490d      	ldr	r1, [pc, #52]	; (8000434 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000400:	4a0d      	ldr	r2, [pc, #52]	; (8000438 <LoopForever+0xe>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000404:	e002      	b.n	800040c <LoopCopyDataInit>

08000406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040a:	3304      	adds	r3, #4

0800040c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800040c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800040e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000410:	d3f9      	bcc.n	8000406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000412:	4a0a      	ldr	r2, [pc, #40]	; (800043c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000414:	4c0a      	ldr	r4, [pc, #40]	; (8000440 <LoopForever+0x16>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000418:	e001      	b.n	800041e <LoopFillZerobss>

0800041a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800041c:	3204      	adds	r2, #4

0800041e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800041e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000420:	d3fb      	bcc.n	800041a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000422:	f007 fdb5 	bl	8007f90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000426:	f7ff fed7 	bl	80001d8 <main>

0800042a <LoopForever>:

LoopForever:
    b LoopForever
 800042a:	e7fe      	b.n	800042a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800042c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000434:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000438:	0800809c 	.word	0x0800809c
  ldr r2, =_sbss
 800043c:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000440:	20001374 	.word	0x20001374

08000444 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000444:	e7fe      	b.n	8000444 <ADC1_IRQHandler>
	...

08000448 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800044c:	4b08      	ldr	r3, [pc, #32]	; (8000470 <HAL_Init+0x28>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a07      	ldr	r2, [pc, #28]	; (8000470 <HAL_Init+0x28>)
 8000452:	f043 0310 	orr.w	r3, r3, #16
 8000456:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000458:	2003      	movs	r0, #3
 800045a:	f000 f94f 	bl	80006fc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800045e:	2000      	movs	r0, #0
 8000460:	f000 f808 	bl	8000474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000464:	f7ff ff5c 	bl	8000320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000468:	2300      	movs	r3, #0
}
 800046a:	4618      	mov	r0, r3
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	40022000 	.word	0x40022000

08000474 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800047c:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <HAL_InitTick+0x54>)
 800047e:	681a      	ldr	r2, [r3, #0]
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <HAL_InitTick+0x58>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	4619      	mov	r1, r3
 8000486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800048a:	fbb3 f3f1 	udiv	r3, r3, r1
 800048e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000492:	4618      	mov	r0, r3
 8000494:	f000 f967 	bl	8000766 <HAL_SYSTICK_Config>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800049e:	2301      	movs	r3, #1
 80004a0:	e00e      	b.n	80004c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	2b0f      	cmp	r3, #15
 80004a6:	d80a      	bhi.n	80004be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004a8:	2200      	movs	r2, #0
 80004aa:	6879      	ldr	r1, [r7, #4]
 80004ac:	f04f 30ff 	mov.w	r0, #4294967295
 80004b0:	f000 f92f 	bl	8000712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004b4:	4a06      	ldr	r2, [pc, #24]	; (80004d0 <HAL_InitTick+0x5c>)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80004ba:	2300      	movs	r3, #0
 80004bc:	e000      	b.n	80004c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004be:	2301      	movs	r3, #1
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000004 	.word	0x20000004
 80004cc:	2000000c 	.word	0x2000000c
 80004d0:	20000008 	.word	0x20000008

080004d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <HAL_IncTick+0x20>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	461a      	mov	r2, r3
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <HAL_IncTick+0x24>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4413      	add	r3, r2
 80004e4:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <HAL_IncTick+0x24>)
 80004e6:	6013      	str	r3, [r2, #0]
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	2000000c 	.word	0x2000000c
 80004f8:	2000019c 	.word	0x2000019c

080004fc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  return uwTick;  
 8000500:	4b03      	ldr	r3, [pc, #12]	; (8000510 <HAL_GetTick+0x14>)
 8000502:	681b      	ldr	r3, [r3, #0]
}
 8000504:	4618      	mov	r0, r3
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	2000019c 	.word	0x2000019c

08000514 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800051c:	f7ff ffee 	bl	80004fc <HAL_GetTick>
 8000520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800052c:	d005      	beq.n	800053a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <HAL_Delay+0x44>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	461a      	mov	r2, r3
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4413      	add	r3, r2
 8000538:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800053a:	bf00      	nop
 800053c:	f7ff ffde 	bl	80004fc <HAL_GetTick>
 8000540:	4602      	mov	r2, r0
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	429a      	cmp	r2, r3
 800054a:	d8f7      	bhi.n	800053c <HAL_Delay+0x28>
  {
  }
}
 800054c:	bf00      	nop
 800054e:	bf00      	nop
 8000550:	3710      	adds	r7, #16
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	2000000c 	.word	0x2000000c

0800055c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f003 0307 	and.w	r3, r3, #7
 800056a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <__NVIC_SetPriorityGrouping+0x44>)
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000572:	68ba      	ldr	r2, [r7, #8]
 8000574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000578:	4013      	ands	r3, r2
 800057a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800058c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800058e:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	60d3      	str	r3, [r2, #12]
}
 8000594:	bf00      	nop
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	e000ed00 	.word	0xe000ed00

080005a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <__NVIC_GetPriorityGrouping+0x18>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	0a1b      	lsrs	r3, r3, #8
 80005ae:	f003 0307 	and.w	r3, r3, #7
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	db0b      	blt.n	80005ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	f003 021f 	and.w	r2, r3, #31
 80005d8:	4907      	ldr	r1, [pc, #28]	; (80005f8 <__NVIC_EnableIRQ+0x38>)
 80005da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005de:	095b      	lsrs	r3, r3, #5
 80005e0:	2001      	movs	r0, #1
 80005e2:	fa00 f202 	lsl.w	r2, r0, r2
 80005e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	e000e100 	.word	0xe000e100

080005fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	6039      	str	r1, [r7, #0]
 8000606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060c:	2b00      	cmp	r3, #0
 800060e:	db0a      	blt.n	8000626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	b2da      	uxtb	r2, r3
 8000614:	490c      	ldr	r1, [pc, #48]	; (8000648 <__NVIC_SetPriority+0x4c>)
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	0112      	lsls	r2, r2, #4
 800061c:	b2d2      	uxtb	r2, r2
 800061e:	440b      	add	r3, r1
 8000620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000624:	e00a      	b.n	800063c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4908      	ldr	r1, [pc, #32]	; (800064c <__NVIC_SetPriority+0x50>)
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	f003 030f 	and.w	r3, r3, #15
 8000632:	3b04      	subs	r3, #4
 8000634:	0112      	lsls	r2, r2, #4
 8000636:	b2d2      	uxtb	r2, r2
 8000638:	440b      	add	r3, r1
 800063a:	761a      	strb	r2, [r3, #24]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000e100 	.word	0xe000e100
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000650:	b480      	push	{r7}
 8000652:	b089      	sub	sp, #36	; 0x24
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	f003 0307 	and.w	r3, r3, #7
 8000662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000664:	69fb      	ldr	r3, [r7, #28]
 8000666:	f1c3 0307 	rsb	r3, r3, #7
 800066a:	2b04      	cmp	r3, #4
 800066c:	bf28      	it	cs
 800066e:	2304      	movcs	r3, #4
 8000670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	3304      	adds	r3, #4
 8000676:	2b06      	cmp	r3, #6
 8000678:	d902      	bls.n	8000680 <NVIC_EncodePriority+0x30>
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	3b03      	subs	r3, #3
 800067e:	e000      	b.n	8000682 <NVIC_EncodePriority+0x32>
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000684:	f04f 32ff 	mov.w	r2, #4294967295
 8000688:	69bb      	ldr	r3, [r7, #24]
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	43da      	mvns	r2, r3
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	401a      	ands	r2, r3
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000698:	f04f 31ff 	mov.w	r1, #4294967295
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	fa01 f303 	lsl.w	r3, r1, r3
 80006a2:	43d9      	mvns	r1, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a8:	4313      	orrs	r3, r2
         );
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3724      	adds	r7, #36	; 0x24
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
	...

080006b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3b01      	subs	r3, #1
 80006c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006c8:	d301      	bcc.n	80006ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ca:	2301      	movs	r3, #1
 80006cc:	e00f      	b.n	80006ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ce:	4a0a      	ldr	r2, [pc, #40]	; (80006f8 <SysTick_Config+0x40>)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006d6:	210f      	movs	r1, #15
 80006d8:	f04f 30ff 	mov.w	r0, #4294967295
 80006dc:	f7ff ff8e 	bl	80005fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <SysTick_Config+0x40>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e6:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <SysTick_Config+0x40>)
 80006e8:	2207      	movs	r2, #7
 80006ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	e000e010 	.word	0xe000e010

080006fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f7ff ff29 	bl	800055c <__NVIC_SetPriorityGrouping>
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b086      	sub	sp, #24
 8000716:	af00      	add	r7, sp, #0
 8000718:	4603      	mov	r3, r0
 800071a:	60b9      	str	r1, [r7, #8]
 800071c:	607a      	str	r2, [r7, #4]
 800071e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000724:	f7ff ff3e 	bl	80005a4 <__NVIC_GetPriorityGrouping>
 8000728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	68b9      	ldr	r1, [r7, #8]
 800072e:	6978      	ldr	r0, [r7, #20]
 8000730:	f7ff ff8e 	bl	8000650 <NVIC_EncodePriority>
 8000734:	4602      	mov	r2, r0
 8000736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800073a:	4611      	mov	r1, r2
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff5d 	bl	80005fc <__NVIC_SetPriority>
}
 8000742:	bf00      	nop
 8000744:	3718      	adds	r7, #24
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	4603      	mov	r3, r0
 8000752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff31 	bl	80005c0 <__NVIC_EnableIRQ>
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ffa2 	bl	80006b8 <SysTick_Config>
 8000774:	4603      	mov	r3, r0
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800077e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000780:	b08b      	sub	sp, #44	; 0x2c
 8000782:	af06      	add	r7, sp, #24
 8000784:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d101      	bne.n	8000790 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800078c:	2301      	movs	r3, #1
 800078e:	e0c4      	b.n	800091a <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000796:	b2db      	uxtb	r3, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	d106      	bne.n	80007aa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f007 f943 	bl	8007a30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2203      	movs	r2, #3
 80007ae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f003 f871 	bl	800389e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007bc:	2300      	movs	r3, #0
 80007be:	73fb      	strb	r3, [r7, #15]
 80007c0:	e040      	b.n	8000844 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	6879      	ldr	r1, [r7, #4]
 80007c6:	1c5a      	adds	r2, r3, #1
 80007c8:	4613      	mov	r3, r2
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	4413      	add	r3, r2
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	440b      	add	r3, r1
 80007d2:	3301      	adds	r3, #1
 80007d4:	2201      	movs	r2, #1
 80007d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	1c5a      	adds	r2, r3, #1
 80007de:	4613      	mov	r3, r2
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	440b      	add	r3, r1
 80007e8:	7bfa      	ldrb	r2, [r7, #15]
 80007ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	1c5a      	adds	r2, r3, #1
 80007f2:	4613      	mov	r3, r2
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	4413      	add	r3, r2
 80007f8:	00db      	lsls	r3, r3, #3
 80007fa:	440b      	add	r3, r1
 80007fc:	3303      	adds	r3, #3
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000802:	7bfa      	ldrb	r2, [r7, #15]
 8000804:	6879      	ldr	r1, [r7, #4]
 8000806:	4613      	mov	r3, r2
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	4413      	add	r3, r2
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	440b      	add	r3, r1
 8000810:	3338      	adds	r3, #56	; 0x38
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000816:	7bfa      	ldrb	r2, [r7, #15]
 8000818:	6879      	ldr	r1, [r7, #4]
 800081a:	4613      	mov	r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	4413      	add	r3, r2
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	440b      	add	r3, r1
 8000824:	333c      	adds	r3, #60	; 0x3c
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800082a:	7bfa      	ldrb	r2, [r7, #15]
 800082c:	6879      	ldr	r1, [r7, #4]
 800082e:	4613      	mov	r3, r2
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	4413      	add	r3, r2
 8000834:	00db      	lsls	r3, r3, #3
 8000836:	440b      	add	r3, r1
 8000838:	3340      	adds	r3, #64	; 0x40
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	3301      	adds	r3, #1
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	7bfa      	ldrb	r2, [r7, #15]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	429a      	cmp	r2, r3
 800084c:	d3b9      	bcc.n	80007c2 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800084e:	2300      	movs	r3, #0
 8000850:	73fb      	strb	r3, [r7, #15]
 8000852:	e044      	b.n	80008de <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000854:	7bfa      	ldrb	r2, [r7, #15]
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	4613      	mov	r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	4413      	add	r3, r2
 800085e:	00db      	lsls	r3, r3, #3
 8000860:	440b      	add	r3, r1
 8000862:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800086a:	7bfa      	ldrb	r2, [r7, #15]
 800086c:	6879      	ldr	r1, [r7, #4]
 800086e:	4613      	mov	r3, r2
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	440b      	add	r3, r1
 8000878:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800087c:	7bfa      	ldrb	r2, [r7, #15]
 800087e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000880:	7bfa      	ldrb	r2, [r7, #15]
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	4613      	mov	r3, r2
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	4413      	add	r3, r2
 800088a:	00db      	lsls	r3, r3, #3
 800088c:	440b      	add	r3, r1
 800088e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000896:	7bfa      	ldrb	r2, [r7, #15]
 8000898:	6879      	ldr	r1, [r7, #4]
 800089a:	4613      	mov	r3, r2
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	4413      	add	r3, r2
 80008a0:	00db      	lsls	r3, r3, #3
 80008a2:	440b      	add	r3, r1
 80008a4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80008ac:	7bfa      	ldrb	r2, [r7, #15]
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	4613      	mov	r3, r2
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	4413      	add	r3, r2
 80008b6:	00db      	lsls	r3, r3, #3
 80008b8:	440b      	add	r3, r1
 80008ba:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80008c2:	7bfa      	ldrb	r2, [r7, #15]
 80008c4:	6879      	ldr	r1, [r7, #4]
 80008c6:	4613      	mov	r3, r2
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	4413      	add	r3, r2
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	440b      	add	r3, r1
 80008d0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
 80008da:	3301      	adds	r3, #1
 80008dc:	73fb      	strb	r3, [r7, #15]
 80008de:	7bfa      	ldrb	r2, [r7, #15]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d3b5      	bcc.n	8000854 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	687e      	ldr	r6, [r7, #4]
 80008f0:	466d      	mov	r5, sp
 80008f2:	f106 0410 	add.w	r4, r6, #16
 80008f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008fa:	6823      	ldr	r3, [r4, #0]
 80008fc:	602b      	str	r3, [r5, #0]
 80008fe:	1d33      	adds	r3, r6, #4
 8000900:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000902:	6838      	ldr	r0, [r7, #0]
 8000904:	f002 ffe6 	bl	80038d4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2201      	movs	r2, #1
 8000914:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000922 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000930:	2b01      	cmp	r3, #1
 8000932:	d101      	bne.n	8000938 <HAL_PCD_Start+0x16>
 8000934:	2302      	movs	r3, #2
 8000936:	e016      	b.n	8000966 <HAL_PCD_Start+0x44>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2201      	movs	r2, #1
 800093c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f002 ff93 	bl	8003870 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800094a:	2101      	movs	r1, #1
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f007 fae7 	bl	8007f20 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4618      	mov	r0, r3
 8000958:	f005 fa53 	bl	8005e02 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2200      	movs	r2, #0
 8000960:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b084      	sub	sp, #16
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4618      	mov	r0, r3
 800097c:	f005 fa4c 	bl	8005e18 <USB_ReadInterrupts>
 8000980:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000988:	2b00      	cmp	r3, #0
 800098a:	d003      	beq.n	8000994 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f000 fab2 	bl	8000ef6 <PCD_EP_ISR_Handler>

    return;
 8000992:	e0bd      	b.n	8000b10 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800099a:	2b00      	cmp	r3, #0
 800099c:	d013      	beq.n	80009c6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80009b0:	b292      	uxth	r2, r2
 80009b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f007 f8b5 	bl	8007b26 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80009bc:	2100      	movs	r1, #0
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f000 f8a9 	bl	8000b16 <HAL_PCD_SetAddress>

    return;
 80009c4:	e0a4      	b.n	8000b10 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d00c      	beq.n	80009ea <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009d8:	b29a      	uxth	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80009e2:	b292      	uxth	r2, r2
 80009e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80009e8:	e092      	b.n	8000b10 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d00c      	beq.n	8000a0e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a06:	b292      	uxth	r2, r2
 8000a08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000a0c:	e080      	b.n	8000b10 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d027      	beq.n	8000a68 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f022 0204 	bic.w	r2, r2, #4
 8000a2a:	b292      	uxth	r2, r2
 8000a2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f022 0208 	bic.w	r2, r2, #8
 8000a42:	b292      	uxth	r2, r2
 8000a44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f007 f8a5 	bl	8007b98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a60:	b292      	uxth	r2, r2
 8000a62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000a66:	e053      	b.n	8000b10 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d027      	beq.n	8000ac2 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f042 0208 	orr.w	r2, r2, #8
 8000a84:	b292      	uxth	r2, r2
 8000a86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a9c:	b292      	uxth	r2, r2
 8000a9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f042 0204 	orr.w	r2, r2, #4
 8000ab4:	b292      	uxth	r2, r2
 8000ab6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f007 f852 	bl	8007b64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000ac0:	e026      	b.n	8000b10 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00f      	beq.n	8000aec <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ade:	b292      	uxth	r2, r2
 8000ae0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f007 f810 	bl	8007b0a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000aea:	e011      	b.n	8000b10 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d00c      	beq.n	8000b10 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b08:	b292      	uxth	r2, r2
 8000b0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000b0e:	bf00      	nop
  }
}
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d101      	bne.n	8000b30 <HAL_PCD_SetAddress+0x1a>
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	e013      	b.n	8000b58 <HAL_PCD_SetAddress+0x42>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2201      	movs	r2, #1
 8000b34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	78fa      	ldrb	r2, [r7, #3]
 8000b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	78fa      	ldrb	r2, [r7, #3]
 8000b46:	4611      	mov	r1, r2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f005 f946 	bl	8005dda <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	4608      	mov	r0, r1
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4603      	mov	r3, r0
 8000b70:	70fb      	strb	r3, [r7, #3]
 8000b72:	460b      	mov	r3, r1
 8000b74:	803b      	strh	r3, [r7, #0]
 8000b76:	4613      	mov	r3, r2
 8000b78:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000b7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	da0e      	bge.n	8000ba4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000b86:	78fb      	ldrb	r3, [r7, #3]
 8000b88:	f003 0307 	and.w	r3, r3, #7
 8000b8c:	1c5a      	adds	r2, r3, #1
 8000b8e:	4613      	mov	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	4413      	add	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	705a      	strb	r2, [r3, #1]
 8000ba2:	e00e      	b.n	8000bc2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000ba4:	78fb      	ldrb	r3, [r7, #3]
 8000ba6:	f003 0207 	and.w	r2, r3, #7
 8000baa:	4613      	mov	r3, r2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	4413      	add	r3, r2
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000bc2:	78fb      	ldrb	r3, [r7, #3]
 8000bc4:	f003 0307 	and.w	r3, r3, #7
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000bce:	883a      	ldrh	r2, [r7, #0]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	78ba      	ldrb	r2, [r7, #2]
 8000bd8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000bda:	78bb      	ldrb	r3, [r7, #2]
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d102      	bne.n	8000be6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	2200      	movs	r2, #0
 8000be4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d101      	bne.n	8000bf4 <HAL_PCD_EP_Open+0x94>
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	e00e      	b.n	8000c12 <HAL_PCD_EP_Open+0xb2>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	68f9      	ldr	r1, [r7, #12]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f002 fe88 	bl	8003918 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8000c10:	7afb      	ldrb	r3, [r7, #11]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b084      	sub	sp, #16
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	460b      	mov	r3, r1
 8000c24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	da0e      	bge.n	8000c4c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c2e:	78fb      	ldrb	r3, [r7, #3]
 8000c30:	f003 0307 	and.w	r3, r3, #7
 8000c34:	1c5a      	adds	r2, r3, #1
 8000c36:	4613      	mov	r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	4413      	add	r3, r2
 8000c3c:	00db      	lsls	r3, r3, #3
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	2201      	movs	r2, #1
 8000c48:	705a      	strb	r2, [r3, #1]
 8000c4a:	e00e      	b.n	8000c6a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c4c:	78fb      	ldrb	r3, [r7, #3]
 8000c4e:	f003 0207 	and.w	r2, r3, #7
 8000c52:	4613      	mov	r3, r2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	4413      	add	r3, r2
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2200      	movs	r2, #0
 8000c68:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8000c6a:	78fb      	ldrb	r3, [r7, #3]
 8000c6c:	f003 0307 	and.w	r3, r3, #7
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d101      	bne.n	8000c84 <HAL_PCD_EP_Close+0x6a>
 8000c80:	2302      	movs	r3, #2
 8000c82:	e00e      	b.n	8000ca2 <HAL_PCD_EP_Close+0x88>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2201      	movs	r2, #1
 8000c88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	68f9      	ldr	r1, [r7, #12]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f003 fa04 	bl	80040a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	60f8      	str	r0, [r7, #12]
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000cba:	7afb      	ldrb	r3, [r7, #11]
 8000cbc:	f003 0207 	and.w	r2, r3, #7
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	4413      	add	r3, r2
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000ccc:	68fa      	ldr	r2, [r7, #12]
 8000cce:	4413      	add	r3, r2
 8000cd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	683a      	ldr	r2, [r7, #0]
 8000cdc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000cea:	7afb      	ldrb	r3, [r7, #11]
 8000cec:	f003 0307 	and.w	r3, r3, #7
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	6979      	ldr	r1, [r7, #20]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f003 fbbc 	bl	800447a <USB_EPStartXfer>

  return HAL_OK;
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000d18:	78fb      	ldrb	r3, [r7, #3]
 8000d1a:	f003 0207 	and.w	r2, r3, #7
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	4613      	mov	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	440b      	add	r3, r1
 8000d2a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	607a      	str	r2, [r7, #4]
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d4c:	7afb      	ldrb	r3, [r7, #11]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	4613      	mov	r3, r2
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	4413      	add	r3, r2
 8000d60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	683a      	ldr	r2, [r7, #0]
 8000d6c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	2201      	movs	r2, #1
 8000d72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	2201      	movs	r2, #1
 8000d86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d88:	7afb      	ldrb	r3, [r7, #11]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	6979      	ldr	r1, [r7, #20]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f003 fb6d 	bl	800447a <USB_EPStartXfer>

  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b084      	sub	sp, #16
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	460b      	mov	r3, r1
 8000db4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000db6:	78fb      	ldrb	r3, [r7, #3]
 8000db8:	f003 0207 	and.w	r2, r3, #7
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d901      	bls.n	8000dc8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e03e      	b.n	8000e46 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000dc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	da0e      	bge.n	8000dee <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000dd0:	78fb      	ldrb	r3, [r7, #3]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	1c5a      	adds	r2, r3, #1
 8000dd8:	4613      	mov	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	4413      	add	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2201      	movs	r2, #1
 8000dea:	705a      	strb	r2, [r3, #1]
 8000dec:	e00c      	b.n	8000e08 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000dee:	78fa      	ldrb	r2, [r7, #3]
 8000df0:	4613      	mov	r3, r2
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	4413      	add	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2200      	movs	r2, #0
 8000e06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e0e:	78fb      	ldrb	r3, [r7, #3]
 8000e10:	f003 0307 	and.w	r3, r3, #7
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d101      	bne.n	8000e28 <HAL_PCD_EP_SetStall+0x7e>
 8000e24:	2302      	movs	r3, #2
 8000e26:	e00e      	b.n	8000e46 <HAL_PCD_EP_SetStall+0x9c>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	68f9      	ldr	r1, [r7, #12]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f004 fed0 	bl	8005bdc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b084      	sub	sp, #16
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	460b      	mov	r3, r1
 8000e58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000e5a:	78fb      	ldrb	r3, [r7, #3]
 8000e5c:	f003 020f 	and.w	r2, r3, #15
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d901      	bls.n	8000e6c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e040      	b.n	8000eee <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000e6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	da0e      	bge.n	8000e92 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e74:	78fb      	ldrb	r3, [r7, #3]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	1c5a      	adds	r2, r3, #1
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	4413      	add	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	705a      	strb	r2, [r3, #1]
 8000e90:	e00e      	b.n	8000eb0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000e92:	78fb      	ldrb	r3, [r7, #3]
 8000e94:	f003 0207 	and.w	r2, r3, #7
 8000e98:	4613      	mov	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2200      	movs	r2, #0
 8000eae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000eb6:	78fb      	ldrb	r3, [r7, #3]
 8000eb8:	f003 0307 	and.w	r3, r3, #7
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d101      	bne.n	8000ed0 <HAL_PCD_EP_ClrStall+0x82>
 8000ecc:	2302      	movs	r3, #2
 8000ece:	e00e      	b.n	8000eee <HAL_PCD_EP_ClrStall+0xa0>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	68f9      	ldr	r1, [r7, #12]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f004 fecd 	bl	8005c7e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b096      	sub	sp, #88	; 0x58
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000efe:	e3b1      	b.n	8001664 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f08:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000f0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8000f1a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f040 8173 	bne.w	800120a <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000f24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000f28:	f003 0310 	and.w	r3, r3, #16
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d150      	bne.n	8000fd2 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f40:	81fb      	strh	r3, [r7, #14]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	89fb      	ldrh	r3, [r7, #14]
 8000f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3328      	adds	r3, #40	; 0x28
 8000f58:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	461a      	mov	r2, r3
 8000f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	4413      	add	r3, r2
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	6812      	ldr	r2, [r2, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f80:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8000f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f84:	695a      	ldr	r2, [r3, #20]
 8000f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	441a      	add	r2, r3
 8000f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f8e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000f90:	2100      	movs	r1, #0
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f006 fd9f 	bl	8007ad6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 835f 	beq.w	8001664 <PCD_EP_ISR_Handler+0x76e>
 8000fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f040 835a 	bne.w	8001664 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	b292      	uxth	r2, r2
 8000fc4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000fd0:	e348      	b.n	8001664 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000fd8:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000fe4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d032      	beq.n	8001056 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	4413      	add	r3, r2
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	6812      	ldr	r2, [r2, #0]
 8001008:	4413      	add	r3, r2
 800100a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001016:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6818      	ldr	r0, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001024:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001028:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800102a:	b29b      	uxth	r3, r3
 800102c:	f004 ff46 	bl	8005ebc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	b29a      	uxth	r2, r3
 8001038:	f640 738f 	movw	r3, #3983	; 0xf8f
 800103c:	4013      	ands	r3, r2
 800103e:	823b      	strh	r3, [r7, #16]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	8a3a      	ldrh	r2, [r7, #16]
 8001046:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800104a:	b292      	uxth	r2, r2
 800104c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f006 fd14 	bl	8007a7c <HAL_PCD_SetupStageCallback>
 8001054:	e306      	b.n	8001664 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001056:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800105a:	2b00      	cmp	r3, #0
 800105c:	f280 8302 	bge.w	8001664 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	b29a      	uxth	r2, r3
 8001068:	f640 738f 	movw	r3, #3983	; 0xf8f
 800106c:	4013      	ands	r3, r2
 800106e:	83fb      	strh	r3, [r7, #30]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	8bfa      	ldrh	r2, [r7, #30]
 8001076:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800107a:	b292      	uxth	r2, r2
 800107c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001086:	b29b      	uxth	r3, r3
 8001088:	461a      	mov	r2, r3
 800108a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	4413      	add	r3, r2
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	6812      	ldr	r2, [r2, #0]
 8001096:	4413      	add	r3, r2
 8001098:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80010a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010a4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80010a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d019      	beq.n	80010e2 <PCD_EP_ISR_Handler+0x1ec>
 80010ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d015      	beq.n	80010e2 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010bc:	6959      	ldr	r1, [r3, #20]
 80010be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010c0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80010c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010c4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	f004 fef8 	bl	8005ebc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80010cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010ce:	695a      	ldr	r2, [r3, #20]
 80010d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010d2:	69db      	ldr	r3, [r3, #28]
 80010d4:	441a      	add	r2, r3
 80010d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010d8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80010da:	2100      	movs	r1, #0
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f006 fcdf 	bl	8007aa0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80010ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80010f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f040 82b5 	bne.w	8001664 <PCD_EP_ISR_Handler+0x76e>
 80010fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80010fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001102:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001106:	f000 82ad 	beq.w	8001664 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	61bb      	str	r3, [r7, #24]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001118:	b29b      	uxth	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	4413      	add	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	b29b      	uxth	r3, r3
 8001130:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001134:	b29a      	uxth	r2, r3
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	801a      	strh	r2, [r3, #0]
 800113a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	2b3e      	cmp	r3, #62	; 0x3e
 8001140:	d91d      	bls.n	800117e <PCD_EP_ISR_Handler+0x288>
 8001142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	095b      	lsrs	r3, r3, #5
 8001148:	647b      	str	r3, [r7, #68]	; 0x44
 800114a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	f003 031f 	and.w	r3, r3, #31
 8001152:	2b00      	cmp	r3, #0
 8001154:	d102      	bne.n	800115c <PCD_EP_ISR_Handler+0x266>
 8001156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001158:	3b01      	subs	r3, #1
 800115a:	647b      	str	r3, [r7, #68]	; 0x44
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	b29a      	uxth	r2, r3
 8001162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001164:	b29b      	uxth	r3, r3
 8001166:	029b      	lsls	r3, r3, #10
 8001168:	b29b      	uxth	r3, r3
 800116a:	4313      	orrs	r3, r2
 800116c:	b29b      	uxth	r3, r3
 800116e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001176:	b29a      	uxth	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	801a      	strh	r2, [r3, #0]
 800117c:	e026      	b.n	80011cc <PCD_EP_ISR_Handler+0x2d6>
 800117e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10a      	bne.n	800119c <PCD_EP_ISR_Handler+0x2a6>
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	b29b      	uxth	r3, r3
 800118c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001194:	b29a      	uxth	r2, r3
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	801a      	strh	r2, [r3, #0]
 800119a:	e017      	b.n	80011cc <PCD_EP_ISR_Handler+0x2d6>
 800119c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	085b      	lsrs	r3, r3, #1
 80011a2:	647b      	str	r3, [r7, #68]	; 0x44
 80011a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011a6:	691b      	ldr	r3, [r3, #16]
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d002      	beq.n	80011b6 <PCD_EP_ISR_Handler+0x2c0>
 80011b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011b2:	3301      	adds	r3, #1
 80011b4:	647b      	str	r3, [r7, #68]	; 0x44
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011be:	b29b      	uxth	r3, r3
 80011c0:	029b      	lsls	r3, r3, #10
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011dc:	827b      	strh	r3, [r7, #18]
 80011de:	8a7b      	ldrh	r3, [r7, #18]
 80011e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80011e4:	827b      	strh	r3, [r7, #18]
 80011e6:	8a7b      	ldrh	r3, [r7, #18]
 80011e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80011ec:	827b      	strh	r3, [r7, #18]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	8a7b      	ldrh	r3, [r7, #18]
 80011f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80011f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80011fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001204:	b29b      	uxth	r3, r3
 8001206:	8013      	strh	r3, [r2, #0]
 8001208:	e22c      	b.n	8001664 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800121e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001222:	2b00      	cmp	r3, #0
 8001224:	f280 80f6 	bge.w	8001414 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	b29a      	uxth	r2, r3
 800123a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800123e:	4013      	ands	r3, r2
 8001240:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001256:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800125a:	b292      	uxth	r2, r2
 800125c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800125e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001262:	4613      	mov	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001276:	7b1b      	ldrb	r3, [r3, #12]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d123      	bne.n	80012c4 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001284:	b29b      	uxth	r3, r3
 8001286:	461a      	mov	r2, r3
 8001288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	4413      	add	r3, r2
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	6812      	ldr	r2, [r2, #0]
 8001294:	4413      	add	r3, r2
 8001296:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012a0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80012a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 808e 	beq.w	80013ca <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012b4:	6959      	ldr	r1, [r3, #20]
 80012b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012b8:	88da      	ldrh	r2, [r3, #6]
 80012ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80012be:	f004 fdfd 	bl	8005ebc <USB_ReadPMA>
 80012c2:	e082      	b.n	80013ca <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80012c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012c6:	78db      	ldrb	r3, [r3, #3]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d10a      	bne.n	80012e2 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80012cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80012d0:	461a      	mov	r2, r3
 80012d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 f9d3 	bl	8001680 <HAL_PCD_EP_DB_Receive>
 80012da:	4603      	mov	r3, r0
 80012dc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80012e0:	e073      	b.n	80013ca <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80012f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012fc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	441a      	add	r2, r3
 800130e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800131a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800131e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001322:	b29b      	uxth	r3, r3
 8001324:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	b29b      	uxth	r3, r3
 8001338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d022      	beq.n	8001386 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001348:	b29b      	uxth	r3, r3
 800134a:	461a      	mov	r2, r3
 800134c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	4413      	add	r3, r2
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	6812      	ldr	r2, [r2, #0]
 8001358:	4413      	add	r3, r2
 800135a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001364:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001368:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800136c:	2b00      	cmp	r3, #0
 800136e:	d02c      	beq.n	80013ca <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6818      	ldr	r0, [r3, #0]
 8001374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001376:	6959      	ldr	r1, [r3, #20]
 8001378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800137a:	891a      	ldrh	r2, [r3, #8]
 800137c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001380:	f004 fd9c 	bl	8005ebc <USB_ReadPMA>
 8001384:	e021      	b.n	80013ca <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800138e:	b29b      	uxth	r3, r3
 8001390:	461a      	mov	r2, r3
 8001392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4413      	add	r3, r2
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	6812      	ldr	r2, [r2, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013aa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80013ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d009      	beq.n	80013ca <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6818      	ldr	r0, [r3, #0]
 80013ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013bc:	6959      	ldr	r1, [r3, #20]
 80013be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013c0:	895a      	ldrh	r2, [r3, #10]
 80013c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80013c6:	f004 fd79 	bl	8005ebc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80013ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013cc:	69da      	ldr	r2, [r3, #28]
 80013ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80013d2:	441a      	add	r2, r3
 80013d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013d6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80013d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013da:	695a      	ldr	r2, [r3, #20]
 80013dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80013e0:	441a      	add	r2, r3
 80013e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013e4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80013e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d005      	beq.n	80013fa <PCD_EP_ISR_Handler+0x504>
 80013ee:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80013f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d206      	bcs.n	8001408 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80013fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	4619      	mov	r1, r3
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f006 fb4d 	bl	8007aa0 <HAL_PCD_DataOutStageCallback>
 8001406:	e005      	b.n	8001414 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800140e:	4618      	mov	r0, r3
 8001410:	f003 f833 	bl	800447a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001414:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 8121 	beq.w	8001664 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8001422:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001426:	1c5a      	adds	r2, r3, #1
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	4413      	add	r3, r2
 8001434:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	b29b      	uxth	r3, r3
 8001448:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800144c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001450:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	441a      	add	r2, r3
 8001462:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800146a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800146e:	b29b      	uxth	r3, r3
 8001470:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001474:	78db      	ldrb	r3, [r3, #3]
 8001476:	2b01      	cmp	r3, #1
 8001478:	f040 80a2 	bne.w	80015c0 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 800147c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800147e:	2200      	movs	r2, #0
 8001480:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001484:	7b1b      	ldrb	r3, [r3, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 8093 	beq.w	80015b2 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800148c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001494:	2b00      	cmp	r3, #0
 8001496:	d046      	beq.n	8001526 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800149a:	785b      	ldrb	r3, [r3, #1]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d126      	bne.n	80014ee <PCD_EP_ISR_Handler+0x5f8>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	461a      	mov	r2, r3
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	4413      	add	r3, r2
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
 80014b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	00da      	lsls	r2, r3, #3
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	4413      	add	r3, r2
 80014c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80014c6:	623b      	str	r3, [r7, #32]
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	801a      	strh	r2, [r3, #0]
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80014e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	6a3b      	ldr	r3, [r7, #32]
 80014ea:	801a      	strh	r2, [r3, #0]
 80014ec:	e061      	b.n	80015b2 <PCD_EP_ISR_Handler+0x6bc>
 80014ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014f0:	785b      	ldrb	r3, [r3, #1]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d15d      	bne.n	80015b2 <PCD_EP_ISR_Handler+0x6bc>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001504:	b29b      	uxth	r3, r3
 8001506:	461a      	mov	r2, r3
 8001508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150a:	4413      	add	r3, r2
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800150e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	00da      	lsls	r2, r3, #3
 8001514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001516:	4413      	add	r3, r2
 8001518:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
 800151e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001520:	2200      	movs	r2, #0
 8001522:	801a      	strh	r2, [r3, #0]
 8001524:	e045      	b.n	80015b2 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800152c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800152e:	785b      	ldrb	r3, [r3, #1]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d126      	bne.n	8001582 <PCD_EP_ISR_Handler+0x68c>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	637b      	str	r3, [r7, #52]	; 0x34
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001542:	b29b      	uxth	r3, r3
 8001544:	461a      	mov	r2, r3
 8001546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001548:	4413      	add	r3, r2
 800154a:	637b      	str	r3, [r7, #52]	; 0x34
 800154c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	00da      	lsls	r2, r3, #3
 8001552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001554:	4413      	add	r3, r2
 8001556:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800155a:	633b      	str	r3, [r7, #48]	; 0x30
 800155c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	b29b      	uxth	r3, r3
 8001562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001566:	b29a      	uxth	r2, r3
 8001568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800156a:	801a      	strh	r2, [r3, #0]
 800156c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	b29b      	uxth	r3, r3
 8001572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800157a:	b29a      	uxth	r2, r3
 800157c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800157e:	801a      	strh	r2, [r3, #0]
 8001580:	e017      	b.n	80015b2 <PCD_EP_ISR_Handler+0x6bc>
 8001582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001584:	785b      	ldrb	r3, [r3, #1]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d113      	bne.n	80015b2 <PCD_EP_ISR_Handler+0x6bc>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001592:	b29b      	uxth	r3, r3
 8001594:	461a      	mov	r2, r3
 8001596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001598:	4413      	add	r3, r2
 800159a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800159c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	00da      	lsls	r2, r3, #3
 80015a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015a4:	4413      	add	r3, r2
 80015a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80015aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80015ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ae:	2200      	movs	r2, #0
 80015b0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80015b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	4619      	mov	r1, r3
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f006 fa8c 	bl	8007ad6 <HAL_PCD_DataInStageCallback>
 80015be:	e051      	b.n	8001664 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80015c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80015c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d144      	bne.n	8001656 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	461a      	mov	r2, r3
 80015d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	4413      	add	r3, r2
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	4413      	add	r3, r2
 80015e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80015f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015f6:	699a      	ldr	r2, [r3, #24]
 80015f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d907      	bls.n	8001610 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8001600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001602:	699a      	ldr	r2, [r3, #24]
 8001604:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001608:	1ad2      	subs	r2, r2, r3
 800160a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800160c:	619a      	str	r2, [r3, #24]
 800160e:	e002      	b.n	8001616 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8001610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d106      	bne.n	800162c <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800161e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	4619      	mov	r1, r3
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f006 fa56 	bl	8007ad6 <HAL_PCD_DataInStageCallback>
 800162a:	e01b      	b.n	8001664 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800162c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800162e:	695a      	ldr	r2, [r3, #20]
 8001630:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001634:	441a      	add	r2, r3
 8001636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001638:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800163a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800163c:	69da      	ldr	r2, [r3, #28]
 800163e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001642:	441a      	add	r2, r3
 8001644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001646:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800164e:	4618      	mov	r0, r3
 8001650:	f002 ff13 	bl	800447a <USB_EPStartXfer>
 8001654:	e006      	b.n	8001664 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001656:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800165a:	461a      	mov	r2, r3
 800165c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f917 	bl	8001892 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800166c:	b29b      	uxth	r3, r3
 800166e:	b21b      	sxth	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	f6ff ac45 	blt.w	8000f00 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3758      	adds	r7, #88	; 0x58
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	4613      	mov	r3, r2
 800168c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d07c      	beq.n	8001792 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	461a      	mov	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4413      	add	r3, r2
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	6812      	ldr	r2, [r2, #0]
 80016b0:	4413      	add	r3, r2
 80016b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016bc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	699a      	ldr	r2, [r3, #24]
 80016c2:	8b7b      	ldrh	r3, [r7, #26]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d306      	bcc.n	80016d6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	699a      	ldr	r2, [r3, #24]
 80016cc:	8b7b      	ldrh	r3, [r7, #26]
 80016ce:	1ad2      	subs	r2, r2, r3
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	619a      	str	r2, [r3, #24]
 80016d4:	e002      	b.n	80016dc <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d123      	bne.n	800172c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016fe:	833b      	strh	r3, [r7, #24]
 8001700:	8b3b      	ldrh	r3, [r7, #24]
 8001702:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001706:	833b      	strh	r3, [r7, #24]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	441a      	add	r2, r3
 8001716:	8b3b      	ldrh	r3, [r7, #24]
 8001718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800171c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001728:	b29b      	uxth	r3, r3
 800172a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001732:	2b00      	cmp	r3, #0
 8001734:	d01f      	beq.n	8001776 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	b29b      	uxth	r3, r3
 8001748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800174c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001750:	82fb      	strh	r3, [r7, #22]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	441a      	add	r2, r3
 8001760:	8afb      	ldrh	r3, [r7, #22]
 8001762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800176a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800176e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001772:	b29b      	uxth	r3, r3
 8001774:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001776:	8b7b      	ldrh	r3, [r7, #26]
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 8085 	beq.w	8001888 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6818      	ldr	r0, [r3, #0]
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	6959      	ldr	r1, [r3, #20]
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	891a      	ldrh	r2, [r3, #8]
 800178a:	8b7b      	ldrh	r3, [r7, #26]
 800178c:	f004 fb96 	bl	8005ebc <USB_ReadPMA>
 8001790:	e07a      	b.n	8001888 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800179a:	b29b      	uxth	r3, r3
 800179c:	461a      	mov	r2, r3
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4413      	add	r3, r2
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017b6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	699a      	ldr	r2, [r3, #24]
 80017bc:	8b7b      	ldrh	r3, [r7, #26]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d306      	bcc.n	80017d0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	699a      	ldr	r2, [r3, #24]
 80017c6:	8b7b      	ldrh	r3, [r7, #26]
 80017c8:	1ad2      	subs	r2, r2, r3
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	619a      	str	r2, [r3, #24]
 80017ce:	e002      	b.n	80017d6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2200      	movs	r2, #0
 80017d4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d123      	bne.n	8001826 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017f8:	83fb      	strh	r3, [r7, #30]
 80017fa:	8bfb      	ldrh	r3, [r7, #30]
 80017fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001800:	83fb      	strh	r3, [r7, #30]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	441a      	add	r2, r3
 8001810:	8bfb      	ldrh	r3, [r7, #30]
 8001812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800181a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800181e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001822:	b29b      	uxth	r3, r3
 8001824:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800182c:	2b00      	cmp	r3, #0
 800182e:	d11f      	bne.n	8001870 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	b29b      	uxth	r3, r3
 8001842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800184a:	83bb      	strh	r3, [r7, #28]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	441a      	add	r2, r3
 800185a:	8bbb      	ldrh	r3, [r7, #28]
 800185c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001868:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800186c:	b29b      	uxth	r3, r3
 800186e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001870:	8b7b      	ldrh	r3, [r7, #26]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d008      	beq.n	8001888 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6818      	ldr	r0, [r3, #0]
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	6959      	ldr	r1, [r3, #20]
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	895a      	ldrh	r2, [r3, #10]
 8001882:	8b7b      	ldrh	r3, [r7, #26]
 8001884:	f004 fb1a 	bl	8005ebc <USB_ReadPMA>
    }
  }

  return count;
 8001888:	8b7b      	ldrh	r3, [r7, #26]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3720      	adds	r7, #32
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b0a4      	sub	sp, #144	; 0x90
 8001896:	af00      	add	r7, sp, #0
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	4613      	mov	r3, r2
 800189e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 81db 	beq.w	8001c62 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	461a      	mov	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	4413      	add	r3, r2
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018d0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	699a      	ldr	r2, [r3, #24]
 80018d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80018dc:	429a      	cmp	r2, r3
 80018de:	d907      	bls.n	80018f0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	699a      	ldr	r2, [r3, #24]
 80018e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80018e8:	1ad2      	subs	r2, r2, r3
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	619a      	str	r2, [r3, #24]
 80018ee:	e002      	b.n	80018f6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	2200      	movs	r2, #0
 80018f4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f040 80b9 	bne.w	8001a72 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	785b      	ldrb	r3, [r3, #1]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d126      	bne.n	8001956 <HAL_PCD_EP_DB_Transmit+0xc4>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001916:	b29b      	uxth	r3, r3
 8001918:	461a      	mov	r2, r3
 800191a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191c:	4413      	add	r3, r2
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	00da      	lsls	r2, r3, #3
 8001926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001928:	4413      	add	r3, r2
 800192a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	b29b      	uxth	r3, r3
 8001936:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800193a:	b29a      	uxth	r2, r3
 800193c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193e:	801a      	strh	r2, [r3, #0]
 8001940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	b29b      	uxth	r3, r3
 8001946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800194a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800194e:	b29a      	uxth	r2, r3
 8001950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001952:	801a      	strh	r2, [r3, #0]
 8001954:	e01a      	b.n	800198c <HAL_PCD_EP_DB_Transmit+0xfa>
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	785b      	ldrb	r3, [r3, #1]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d116      	bne.n	800198c <HAL_PCD_EP_DB_Transmit+0xfa>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	637b      	str	r3, [r7, #52]	; 0x34
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800196c:	b29b      	uxth	r3, r3
 800196e:	461a      	mov	r2, r3
 8001970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001972:	4413      	add	r3, r2
 8001974:	637b      	str	r3, [r7, #52]	; 0x34
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	00da      	lsls	r2, r3, #3
 800197c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800197e:	4413      	add	r3, r2
 8001980:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
 8001986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001988:	2200      	movs	r2, #0
 800198a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	785b      	ldrb	r3, [r3, #1]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d126      	bne.n	80019e8 <HAL_PCD_EP_DB_Transmit+0x156>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	61fb      	str	r3, [r7, #28]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	461a      	mov	r2, r3
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	4413      	add	r3, r2
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	00da      	lsls	r2, r3, #3
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	4413      	add	r3, r2
 80019bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80019c0:	61bb      	str	r3, [r7, #24]
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	801a      	strh	r2, [r3, #0]
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	801a      	strh	r2, [r3, #0]
 80019e6:	e017      	b.n	8001a18 <HAL_PCD_EP_DB_Transmit+0x186>
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	785b      	ldrb	r3, [r3, #1]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d113      	bne.n	8001a18 <HAL_PCD_EP_DB_Transmit+0x186>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	461a      	mov	r2, r3
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	4413      	add	r3, r2
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	00da      	lsls	r2, r3, #3
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a10:	623b      	str	r3, [r7, #32]
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	2200      	movs	r2, #0
 8001a16:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f006 f859 	bl	8007ad6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a24:	88fb      	ldrh	r3, [r7, #6]
 8001a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 82fa 	beq.w	8002024 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a4a:	82fb      	strh	r3, [r7, #22]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	441a      	add	r2, r3
 8001a5a:	8afb      	ldrh	r3, [r7, #22]
 8001a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	8013      	strh	r3, [r2, #0]
 8001a70:	e2d8      	b.n	8002024 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d021      	beq.n	8001ac0 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a96:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	441a      	add	r2, r3
 8001aa8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ab4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	f040 82ac 	bne.w	8002024 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	695a      	ldr	r2, [r3, #20]
 8001ad0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001ad4:	441a      	add	r2, r3
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	69da      	ldr	r2, [r3, #28]
 8001ade:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001ae2:	441a      	add	r2, r3
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	6a1a      	ldr	r2, [r3, #32]
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d30b      	bcc.n	8001b0c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	6a1a      	ldr	r2, [r3, #32]
 8001b00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b04:	1ad2      	subs	r2, r2, r3
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	621a      	str	r2, [r3, #32]
 8001b0a:	e017      	b.n	8001b3c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d108      	bne.n	8001b26 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8001b14:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001b18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b24:	e00a      	b.n	8001b3c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	785b      	ldrb	r3, [r3, #1]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d165      	bne.n	8001c10 <HAL_PCD_EP_DB_Transmit+0x37e>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	461a      	mov	r2, r3
 8001b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b58:	4413      	add	r3, r2
 8001b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	00da      	lsls	r2, r3, #3
 8001b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b64:	4413      	add	r3, r2
 8001b66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b7a:	801a      	strh	r2, [r3, #0]
 8001b7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b80:	2b3e      	cmp	r3, #62	; 0x3e
 8001b82:	d91d      	bls.n	8001bc0 <HAL_PCD_EP_DB_Transmit+0x32e>
 8001b84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b88:	095b      	lsrs	r3, r3, #5
 8001b8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d102      	bne.n	8001b9e <HAL_PCD_EP_DB_Transmit+0x30c>
 8001b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	029b      	lsls	r3, r3, #10
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	4313      	orrs	r3, r2
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bbc:	801a      	strh	r2, [r3, #0]
 8001bbe:	e044      	b.n	8001c4a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001bc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10a      	bne.n	8001bde <HAL_PCD_EP_DB_Transmit+0x34c>
 8001bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bda:	801a      	strh	r2, [r3, #0]
 8001bdc:	e035      	b.n	8001c4a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001be2:	085b      	lsrs	r3, r3, #1
 8001be4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d002      	beq.n	8001bf8 <HAL_PCD_EP_DB_Transmit+0x366>
 8001bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	029b      	lsls	r3, r3, #10
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	4313      	orrs	r3, r2
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c0c:	801a      	strh	r2, [r3, #0]
 8001c0e:	e01c      	b.n	8001c4a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	785b      	ldrb	r3, [r3, #1]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d118      	bne.n	8001c4a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	647b      	str	r3, [r7, #68]	; 0x44
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	461a      	mov	r2, r3
 8001c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c2c:	4413      	add	r3, r2
 8001c2e:	647b      	str	r3, [r7, #68]	; 0x44
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	00da      	lsls	r2, r3, #3
 8001c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c38:	4413      	add	r3, r2
 8001c3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c3e:	643b      	str	r3, [r7, #64]	; 0x40
 8001c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c48:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	6959      	ldr	r1, [r3, #20]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	891a      	ldrh	r2, [r3, #8]
 8001c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	f004 f8ec 	bl	8005e38 <USB_WritePMA>
 8001c60:	e1e0      	b.n	8002024 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4413      	add	r3, r2
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	6812      	ldr	r2, [r2, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c86:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	699a      	ldr	r2, [r3, #24]
 8001c8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d307      	bcc.n	8001ca6 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	699a      	ldr	r2, [r3, #24]
 8001c9a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001c9e:	1ad2      	subs	r2, r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	619a      	str	r2, [r3, #24]
 8001ca4:	e002      	b.n	8001cac <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f040 80c0 	bne.w	8001e36 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	785b      	ldrb	r3, [r3, #1]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d126      	bne.n	8001d0c <HAL_PCD_EP_DB_Transmit+0x47a>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	461a      	mov	r2, r3
 8001cd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cd2:	4413      	add	r3, r2
 8001cd4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	00da      	lsls	r2, r3, #3
 8001cdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cde:	4413      	add	r3, r2
 8001ce0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ce4:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ce6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cf4:	801a      	strh	r2, [r3, #0]
 8001cf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d08:	801a      	strh	r2, [r3, #0]
 8001d0a:	e01a      	b.n	8001d42 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	785b      	ldrb	r3, [r3, #1]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d116      	bne.n	8001d42 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	667b      	str	r3, [r7, #100]	; 0x64
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d28:	4413      	add	r3, r2
 8001d2a:	667b      	str	r3, [r7, #100]	; 0x64
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	00da      	lsls	r2, r3, #3
 8001d32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d34:	4413      	add	r3, r2
 8001d36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d3a:	663b      	str	r3, [r7, #96]	; 0x60
 8001d3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d3e:	2200      	movs	r2, #0
 8001d40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	677b      	str	r3, [r7, #116]	; 0x74
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	785b      	ldrb	r3, [r3, #1]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d12b      	bne.n	8001da8 <HAL_PCD_EP_DB_Transmit+0x516>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	461a      	mov	r2, r3
 8001d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d64:	4413      	add	r3, r2
 8001d66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	00da      	lsls	r2, r3, #3
 8001d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d70:	4413      	add	r3, r2
 8001d72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d8c:	801a      	strh	r2, [r3, #0]
 8001d8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001da4:	801a      	strh	r2, [r3, #0]
 8001da6:	e017      	b.n	8001dd8 <HAL_PCD_EP_DB_Transmit+0x546>
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	785b      	ldrb	r3, [r3, #1]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d113      	bne.n	8001dd8 <HAL_PCD_EP_DB_Transmit+0x546>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	461a      	mov	r2, r3
 8001dbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dbe:	4413      	add	r3, r2
 8001dc0:	677b      	str	r3, [r7, #116]	; 0x74
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	00da      	lsls	r2, r3, #3
 8001dc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dca:	4413      	add	r3, r2
 8001dcc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001dd0:	673b      	str	r3, [r7, #112]	; 0x70
 8001dd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f005 fe79 	bl	8007ad6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f040 811a 	bne.w	8002024 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e0a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	441a      	add	r2, r3
 8001e1c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	8013      	strh	r3, [r2, #0]
 8001e34:	e0f6      	b.n	8002024 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001e36:	88fb      	ldrh	r3, [r7, #6]
 8001e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d121      	bne.n	8001e84 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e5a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	441a      	add	r2, r3
 8001e6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	f040 80ca 	bne.w	8002024 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	695a      	ldr	r2, [r3, #20]
 8001e94:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001e98:	441a      	add	r2, r3
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	69da      	ldr	r2, [r3, #28]
 8001ea2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001ea6:	441a      	add	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	6a1a      	ldr	r2, [r3, #32]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d30b      	bcc.n	8001ed0 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	6a1a      	ldr	r2, [r3, #32]
 8001ec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ec8:	1ad2      	subs	r2, r2, r3
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	621a      	str	r2, [r3, #32]
 8001ece:	e017      	b.n	8001f00 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d108      	bne.n	8001eea <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8001ed8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001edc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ee8:	e00a      	b.n	8001f00 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	657b      	str	r3, [r7, #84]	; 0x54
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	785b      	ldrb	r3, [r3, #1]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d165      	bne.n	8001fda <HAL_PCD_EP_DB_Transmit+0x748>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	461a      	mov	r2, r3
 8001f20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f22:	4413      	add	r3, r2
 8001f24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	00da      	lsls	r2, r3, #3
 8001f2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f2e:	4413      	add	r3, r2
 8001f30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f34:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f44:	801a      	strh	r2, [r3, #0]
 8001f46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f4a:	2b3e      	cmp	r3, #62	; 0x3e
 8001f4c:	d91d      	bls.n	8001f8a <HAL_PCD_EP_DB_Transmit+0x6f8>
 8001f4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d102      	bne.n	8001f68 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8001f62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f64:	3b01      	subs	r3, #1
 8001f66:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	029b      	lsls	r3, r3, #10
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	4313      	orrs	r3, r2
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f86:	801a      	strh	r2, [r3, #0]
 8001f88:	e041      	b.n	800200e <HAL_PCD_EP_DB_Transmit+0x77c>
 8001f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10a      	bne.n	8001fa8 <HAL_PCD_EP_DB_Transmit+0x716>
 8001f92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fa4:	801a      	strh	r2, [r3, #0]
 8001fa6:	e032      	b.n	800200e <HAL_PCD_EP_DB_Transmit+0x77c>
 8001fa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fac:	085b      	lsrs	r3, r3, #1
 8001fae:	66bb      	str	r3, [r7, #104]	; 0x68
 8001fb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <HAL_PCD_EP_DB_Transmit+0x730>
 8001fbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8001fc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	029b      	lsls	r3, r3, #10
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fd6:	801a      	strh	r2, [r3, #0]
 8001fd8:	e019      	b.n	800200e <HAL_PCD_EP_DB_Transmit+0x77c>
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	785b      	ldrb	r3, [r3, #1]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d115      	bne.n	800200e <HAL_PCD_EP_DB_Transmit+0x77c>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff0:	4413      	add	r3, r2
 8001ff2:	657b      	str	r3, [r7, #84]	; 0x54
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	00da      	lsls	r2, r3, #3
 8001ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002002:	653b      	str	r3, [r7, #80]	; 0x50
 8002004:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002008:	b29a      	uxth	r2, r3
 800200a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800200c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	6959      	ldr	r1, [r3, #20]
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	895a      	ldrh	r2, [r3, #10]
 800201a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800201e:	b29b      	uxth	r3, r3
 8002020:	f003 ff0a 	bl	8005e38 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	461a      	mov	r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	b29b      	uxth	r3, r3
 8002036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800203a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800203e:	82bb      	strh	r3, [r7, #20]
 8002040:	8abb      	ldrh	r3, [r7, #20]
 8002042:	f083 0310 	eor.w	r3, r3, #16
 8002046:	82bb      	strh	r3, [r7, #20]
 8002048:	8abb      	ldrh	r3, [r7, #20]
 800204a:	f083 0320 	eor.w	r3, r3, #32
 800204e:	82bb      	strh	r3, [r7, #20]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	441a      	add	r2, r3
 800205e:	8abb      	ldrh	r3, [r7, #20]
 8002060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	b29b      	uxth	r3, r3
 8002072:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3790      	adds	r7, #144	; 0x90
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800207e:	b480      	push	{r7}
 8002080:	b087      	sub	sp, #28
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	817b      	strh	r3, [r7, #10]
 800208c:	4613      	mov	r3, r2
 800208e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002090:	897b      	ldrh	r3, [r7, #10]
 8002092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002096:	b29b      	uxth	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00b      	beq.n	80020b4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800209c:	897b      	ldrh	r3, [r7, #10]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4413      	add	r3, r2
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	e009      	b.n	80020c8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020b4:	897a      	ldrh	r2, [r7, #10]
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4413      	add	r3, r2
 80020c6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80020c8:	893b      	ldrh	r3, [r7, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d107      	bne.n	80020de <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	2200      	movs	r2, #0
 80020d2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	80da      	strh	r2, [r3, #6]
 80020dc:	e00b      	b.n	80020f6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2201      	movs	r2, #1
 80020e2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	0c1b      	lsrs	r3, r3, #16
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	371c      	adds	r7, #28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800210a:	af00      	add	r7, sp, #0
 800210c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002110:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002114:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	f001 b823 	b.w	8003170 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 817d 	beq.w	800243a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002140:	4bbc      	ldr	r3, [pc, #752]	; (8002434 <HAL_RCC_OscConfig+0x330>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 030c 	and.w	r3, r3, #12
 8002148:	2b04      	cmp	r3, #4
 800214a:	d00c      	beq.n	8002166 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800214c:	4bb9      	ldr	r3, [pc, #740]	; (8002434 <HAL_RCC_OscConfig+0x330>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b08      	cmp	r3, #8
 8002156:	d15c      	bne.n	8002212 <HAL_RCC_OscConfig+0x10e>
 8002158:	4bb6      	ldr	r3, [pc, #728]	; (8002434 <HAL_RCC_OscConfig+0x330>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002164:	d155      	bne.n	8002212 <HAL_RCC_OscConfig+0x10e>
 8002166:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800216a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800217a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217e:	fab3 f383 	clz	r3, r3
 8002182:	b2db      	uxtb	r3, r3
 8002184:	095b      	lsrs	r3, r3, #5
 8002186:	b2db      	uxtb	r3, r3
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b01      	cmp	r3, #1
 8002190:	d102      	bne.n	8002198 <HAL_RCC_OscConfig+0x94>
 8002192:	4ba8      	ldr	r3, [pc, #672]	; (8002434 <HAL_RCC_OscConfig+0x330>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	e015      	b.n	80021c4 <HAL_RCC_OscConfig+0xc0>
 8002198:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800219c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80021a4:	fa93 f3a3 	rbit	r3, r3
 80021a8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80021ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021b0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80021b4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80021b8:	fa93 f3a3 	rbit	r3, r3
 80021bc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80021c0:	4b9c      	ldr	r3, [pc, #624]	; (8002434 <HAL_RCC_OscConfig+0x330>)
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021c8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80021cc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80021d0:	fa92 f2a2 	rbit	r2, r2
 80021d4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80021d8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80021dc:	fab2 f282 	clz	r2, r2
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	f042 0220 	orr.w	r2, r2, #32
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	f002 021f 	and.w	r2, r2, #31
 80021ec:	2101      	movs	r1, #1
 80021ee:	fa01 f202 	lsl.w	r2, r1, r2
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 811f 	beq.w	8002438 <HAL_RCC_OscConfig+0x334>
 80021fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	f040 8116 	bne.w	8002438 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	f000 bfaf 	b.w	8003170 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002216:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002222:	d106      	bne.n	8002232 <HAL_RCC_OscConfig+0x12e>
 8002224:	4b83      	ldr	r3, [pc, #524]	; (8002434 <HAL_RCC_OscConfig+0x330>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a82      	ldr	r2, [pc, #520]	; (8002434 <HAL_RCC_OscConfig+0x330>)
 800222a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	e036      	b.n	80022a0 <HAL_RCC_OscConfig+0x19c>
 8002232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002236:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10c      	bne.n	800225c <HAL_RCC_OscConfig+0x158>
 8002242:	4b7c      	ldr	r3, [pc, #496]	; (8002434 <HAL_RCC_OscConfig+0x330>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a7b      	ldr	r2, [pc, #492]	; (8002434 <HAL_RCC_OscConfig+0x330>)
 8002248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	4b79      	ldr	r3, [pc, #484]	; (8002434 <HAL_RCC_OscConfig+0x330>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a78      	ldr	r2, [pc, #480]	; (8002434 <HAL_RCC_OscConfig+0x330>)
 8002254:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	e021      	b.n	80022a0 <HAL_RCC_OscConfig+0x19c>
 800225c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002260:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0x184>
 800226e:	4b71      	ldr	r3, [pc, #452]	; (8002434 <HAL_RCC_OscConfig+0x330>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a70      	ldr	r2, [pc, #448]	; (8002434 <HAL_RCC_OscConfig+0x330>)
 8002274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b6e      	ldr	r3, [pc, #440]	; (8002434 <HAL_RCC_OscConfig+0x330>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a6d      	ldr	r2, [pc, #436]	; (8002434 <HAL_RCC_OscConfig+0x330>)
 8002280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	e00b      	b.n	80022a0 <HAL_RCC_OscConfig+0x19c>
 8002288:	4b6a      	ldr	r3, [pc, #424]	; (8002434 <HAL_RCC_OscConfig+0x330>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a69      	ldr	r2, [pc, #420]	; (8002434 <HAL_RCC_OscConfig+0x330>)
 800228e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	4b67      	ldr	r3, [pc, #412]	; (8002434 <HAL_RCC_OscConfig+0x330>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a66      	ldr	r2, [pc, #408]	; (8002434 <HAL_RCC_OscConfig+0x330>)
 800229a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800229e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022a0:	4b64      	ldr	r3, [pc, #400]	; (8002434 <HAL_RCC_OscConfig+0x330>)
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	f023 020f 	bic.w	r2, r3, #15
 80022a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	495f      	ldr	r1, [pc, #380]	; (8002434 <HAL_RCC_OscConfig+0x330>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d059      	beq.n	800237e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ca:	f7fe f917 	bl	80004fc <HAL_GetTick>
 80022ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d2:	e00a      	b.n	80022ea <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d4:	f7fe f912 	bl	80004fc <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b64      	cmp	r3, #100	; 0x64
 80022e2:	d902      	bls.n	80022ea <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	f000 bf43 	b.w	8003170 <HAL_RCC_OscConfig+0x106c>
 80022ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ee:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80022fe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	095b      	lsrs	r3, r3, #5
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b01      	cmp	r3, #1
 8002314:	d102      	bne.n	800231c <HAL_RCC_OscConfig+0x218>
 8002316:	4b47      	ldr	r3, [pc, #284]	; (8002434 <HAL_RCC_OscConfig+0x330>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	e015      	b.n	8002348 <HAL_RCC_OscConfig+0x244>
 800231c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002320:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002324:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002328:	fa93 f3a3 	rbit	r3, r3
 800232c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002330:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002334:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002338:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800233c:	fa93 f3a3 	rbit	r3, r3
 8002340:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002344:	4b3b      	ldr	r3, [pc, #236]	; (8002434 <HAL_RCC_OscConfig+0x330>)
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800234c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002350:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002354:	fa92 f2a2 	rbit	r2, r2
 8002358:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800235c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002360:	fab2 f282 	clz	r2, r2
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	f042 0220 	orr.w	r2, r2, #32
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	f002 021f 	and.w	r2, r2, #31
 8002370:	2101      	movs	r1, #1
 8002372:	fa01 f202 	lsl.w	r2, r1, r2
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0ab      	beq.n	80022d4 <HAL_RCC_OscConfig+0x1d0>
 800237c:	e05d      	b.n	800243a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237e:	f7fe f8bd 	bl	80004fc <HAL_GetTick>
 8002382:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002386:	e00a      	b.n	800239e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002388:	f7fe f8b8 	bl	80004fc <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b64      	cmp	r3, #100	; 0x64
 8002396:	d902      	bls.n	800239e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	f000 bee9 	b.w	8003170 <HAL_RCC_OscConfig+0x106c>
 800239e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023a2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80023b2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	095b      	lsrs	r3, r3, #5
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d102      	bne.n	80023d0 <HAL_RCC_OscConfig+0x2cc>
 80023ca:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <HAL_RCC_OscConfig+0x330>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	e015      	b.n	80023fc <HAL_RCC_OscConfig+0x2f8>
 80023d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023d4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80023dc:	fa93 f3a3 	rbit	r3, r3
 80023e0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80023e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023e8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80023ec:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80023f8:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <HAL_RCC_OscConfig+0x330>)
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002400:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002404:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002408:	fa92 f2a2 	rbit	r2, r2
 800240c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002410:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002414:	fab2 f282 	clz	r2, r2
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	f042 0220 	orr.w	r2, r2, #32
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	f002 021f 	and.w	r2, r2, #31
 8002424:	2101      	movs	r1, #1
 8002426:	fa01 f202 	lsl.w	r2, r1, r2
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1ab      	bne.n	8002388 <HAL_RCC_OscConfig+0x284>
 8002430:	e003      	b.n	800243a <HAL_RCC_OscConfig+0x336>
 8002432:	bf00      	nop
 8002434:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800243a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 817d 	beq.w	800274a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002450:	4ba6      	ldr	r3, [pc, #664]	; (80026ec <HAL_RCC_OscConfig+0x5e8>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00b      	beq.n	8002474 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800245c:	4ba3      	ldr	r3, [pc, #652]	; (80026ec <HAL_RCC_OscConfig+0x5e8>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 030c 	and.w	r3, r3, #12
 8002464:	2b08      	cmp	r3, #8
 8002466:	d172      	bne.n	800254e <HAL_RCC_OscConfig+0x44a>
 8002468:	4ba0      	ldr	r3, [pc, #640]	; (80026ec <HAL_RCC_OscConfig+0x5e8>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d16c      	bne.n	800254e <HAL_RCC_OscConfig+0x44a>
 8002474:	2302      	movs	r3, #2
 8002476:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002486:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	b2db      	uxtb	r3, r3
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b01      	cmp	r3, #1
 800249c:	d102      	bne.n	80024a4 <HAL_RCC_OscConfig+0x3a0>
 800249e:	4b93      	ldr	r3, [pc, #588]	; (80026ec <HAL_RCC_OscConfig+0x5e8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	e013      	b.n	80024cc <HAL_RCC_OscConfig+0x3c8>
 80024a4:	2302      	movs	r3, #2
 80024a6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80024ae:	fa93 f3a3 	rbit	r3, r3
 80024b2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80024b6:	2302      	movs	r3, #2
 80024b8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80024bc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80024c0:	fa93 f3a3 	rbit	r3, r3
 80024c4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80024c8:	4b88      	ldr	r3, [pc, #544]	; (80026ec <HAL_RCC_OscConfig+0x5e8>)
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	2202      	movs	r2, #2
 80024ce:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80024d2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80024d6:	fa92 f2a2 	rbit	r2, r2
 80024da:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80024de:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80024e2:	fab2 f282 	clz	r2, r2
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	f042 0220 	orr.w	r2, r2, #32
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	f002 021f 	and.w	r2, r2, #31
 80024f2:	2101      	movs	r1, #1
 80024f4:	fa01 f202 	lsl.w	r2, r1, r2
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00a      	beq.n	8002514 <HAL_RCC_OscConfig+0x410>
 80024fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002502:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d002      	beq.n	8002514 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	f000 be2e 	b.w	8003170 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002514:	4b75      	ldr	r3, [pc, #468]	; (80026ec <HAL_RCC_OscConfig+0x5e8>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800251c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002520:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	21f8      	movs	r1, #248	; 0xf8
 800252a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002532:	fa91 f1a1 	rbit	r1, r1
 8002536:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800253a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800253e:	fab1 f181 	clz	r1, r1
 8002542:	b2c9      	uxtb	r1, r1
 8002544:	408b      	lsls	r3, r1
 8002546:	4969      	ldr	r1, [pc, #420]	; (80026ec <HAL_RCC_OscConfig+0x5e8>)
 8002548:	4313      	orrs	r3, r2
 800254a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254c:	e0fd      	b.n	800274a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800254e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002552:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 8088 	beq.w	8002670 <HAL_RCC_OscConfig+0x56c>
 8002560:	2301      	movs	r3, #1
 8002562:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002572:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002576:	fab3 f383 	clz	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002580:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	461a      	mov	r2, r3
 8002588:	2301      	movs	r3, #1
 800258a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258c:	f7fd ffb6 	bl	80004fc <HAL_GetTick>
 8002590:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002594:	e00a      	b.n	80025ac <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002596:	f7fd ffb1 	bl	80004fc <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d902      	bls.n	80025ac <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	f000 bde2 	b.w	8003170 <HAL_RCC_OscConfig+0x106c>
 80025ac:	2302      	movs	r3, #2
 80025ae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80025be:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	095b      	lsrs	r3, r3, #5
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d102      	bne.n	80025dc <HAL_RCC_OscConfig+0x4d8>
 80025d6:	4b45      	ldr	r3, [pc, #276]	; (80026ec <HAL_RCC_OscConfig+0x5e8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	e013      	b.n	8002604 <HAL_RCC_OscConfig+0x500>
 80025dc:	2302      	movs	r3, #2
 80025de:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80025e6:	fa93 f3a3 	rbit	r3, r3
 80025ea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80025ee:	2302      	movs	r3, #2
 80025f0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80025f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002600:	4b3a      	ldr	r3, [pc, #232]	; (80026ec <HAL_RCC_OscConfig+0x5e8>)
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	2202      	movs	r2, #2
 8002606:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800260a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800260e:	fa92 f2a2 	rbit	r2, r2
 8002612:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002616:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800261a:	fab2 f282 	clz	r2, r2
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	f042 0220 	orr.w	r2, r2, #32
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	f002 021f 	and.w	r2, r2, #31
 800262a:	2101      	movs	r1, #1
 800262c:	fa01 f202 	lsl.w	r2, r1, r2
 8002630:	4013      	ands	r3, r2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0af      	beq.n	8002596 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002636:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <HAL_RCC_OscConfig+0x5e8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800263e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002642:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	21f8      	movs	r1, #248	; 0xf8
 800264c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002654:	fa91 f1a1 	rbit	r1, r1
 8002658:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800265c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002660:	fab1 f181 	clz	r1, r1
 8002664:	b2c9      	uxtb	r1, r1
 8002666:	408b      	lsls	r3, r1
 8002668:	4920      	ldr	r1, [pc, #128]	; (80026ec <HAL_RCC_OscConfig+0x5e8>)
 800266a:	4313      	orrs	r3, r2
 800266c:	600b      	str	r3, [r1, #0]
 800266e:	e06c      	b.n	800274a <HAL_RCC_OscConfig+0x646>
 8002670:	2301      	movs	r3, #1
 8002672:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800267a:	fa93 f3a3 	rbit	r3, r3
 800267e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002682:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002686:	fab3 f383 	clz	r3, r3
 800268a:	b2db      	uxtb	r3, r3
 800268c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002690:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	461a      	mov	r2, r3
 8002698:	2300      	movs	r3, #0
 800269a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269c:	f7fd ff2e 	bl	80004fc <HAL_GetTick>
 80026a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a4:	e00a      	b.n	80026bc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026a6:	f7fd ff29 	bl	80004fc <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d902      	bls.n	80026bc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	f000 bd5a 	b.w	8003170 <HAL_RCC_OscConfig+0x106c>
 80026bc:	2302      	movs	r3, #2
 80026be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80026c6:	fa93 f3a3 	rbit	r3, r3
 80026ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80026ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	095b      	lsrs	r3, r3, #5
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d104      	bne.n	80026f0 <HAL_RCC_OscConfig+0x5ec>
 80026e6:	4b01      	ldr	r3, [pc, #4]	; (80026ec <HAL_RCC_OscConfig+0x5e8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	e015      	b.n	8002718 <HAL_RCC_OscConfig+0x614>
 80026ec:	40021000 	.word	0x40021000
 80026f0:	2302      	movs	r3, #2
 80026f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002702:	2302      	movs	r3, #2
 8002704:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002708:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002714:	4bc8      	ldr	r3, [pc, #800]	; (8002a38 <HAL_RCC_OscConfig+0x934>)
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	2202      	movs	r2, #2
 800271a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800271e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002722:	fa92 f2a2 	rbit	r2, r2
 8002726:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800272a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800272e:	fab2 f282 	clz	r2, r2
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	f042 0220 	orr.w	r2, r2, #32
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	f002 021f 	and.w	r2, r2, #31
 800273e:	2101      	movs	r1, #1
 8002740:	fa01 f202 	lsl.w	r2, r1, r2
 8002744:	4013      	ands	r3, r2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1ad      	bne.n	80026a6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800274a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 8110 	beq.w	8002980 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002764:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d079      	beq.n	8002864 <HAL_RCC_OscConfig+0x760>
 8002770:	2301      	movs	r3, #1
 8002772:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800277a:	fa93 f3a3 	rbit	r3, r3
 800277e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002782:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002786:	fab3 f383 	clz	r3, r3
 800278a:	b2db      	uxtb	r3, r3
 800278c:	461a      	mov	r2, r3
 800278e:	4bab      	ldr	r3, [pc, #684]	; (8002a3c <HAL_RCC_OscConfig+0x938>)
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	461a      	mov	r2, r3
 8002796:	2301      	movs	r3, #1
 8002798:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279a:	f7fd feaf 	bl	80004fc <HAL_GetTick>
 800279e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a2:	e00a      	b.n	80027ba <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027a4:	f7fd feaa 	bl	80004fc <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d902      	bls.n	80027ba <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	f000 bcdb 	b.w	8003170 <HAL_RCC_OscConfig+0x106c>
 80027ba:	2302      	movs	r3, #2
 80027bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80027cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80027d4:	2202      	movs	r2, #2
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027dc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	fa93 f2a3 	rbit	r2, r3
 80027e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027f8:	2202      	movs	r2, #2
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	fa93 f2a3 	rbit	r2, r3
 800280a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002812:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002814:	4b88      	ldr	r3, [pc, #544]	; (8002a38 <HAL_RCC_OscConfig+0x934>)
 8002816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002820:	2102      	movs	r1, #2
 8002822:	6019      	str	r1, [r3, #0]
 8002824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002828:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	fa93 f1a3 	rbit	r1, r3
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800283a:	6019      	str	r1, [r3, #0]
  return result;
 800283c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002840:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f003 031f 	and.w	r3, r3, #31
 8002856:	2101      	movs	r1, #1
 8002858:	fa01 f303 	lsl.w	r3, r1, r3
 800285c:	4013      	ands	r3, r2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0a0      	beq.n	80027a4 <HAL_RCC_OscConfig+0x6a0>
 8002862:	e08d      	b.n	8002980 <HAL_RCC_OscConfig+0x87c>
 8002864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002868:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800286c:	2201      	movs	r2, #1
 800286e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002874:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	fa93 f2a3 	rbit	r2, r3
 800287e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002882:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002886:	601a      	str	r2, [r3, #0]
  return result;
 8002888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002890:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002892:	fab3 f383 	clz	r3, r3
 8002896:	b2db      	uxtb	r3, r3
 8002898:	461a      	mov	r2, r3
 800289a:	4b68      	ldr	r3, [pc, #416]	; (8002a3c <HAL_RCC_OscConfig+0x938>)
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	461a      	mov	r2, r3
 80028a2:	2300      	movs	r3, #0
 80028a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a6:	f7fd fe29 	bl	80004fc <HAL_GetTick>
 80028aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ae:	e00a      	b.n	80028c6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b0:	f7fd fe24 	bl	80004fc <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d902      	bls.n	80028c6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	f000 bc55 	b.w	8003170 <HAL_RCC_OscConfig+0x106c>
 80028c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80028ce:	2202      	movs	r2, #2
 80028d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	fa93 f2a3 	rbit	r2, r3
 80028e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80028f2:	2202      	movs	r2, #2
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	fa93 f2a3 	rbit	r2, r3
 8002904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002908:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002912:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002916:	2202      	movs	r2, #2
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	fa93 f2a3 	rbit	r2, r3
 8002928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002930:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002932:	4b41      	ldr	r3, [pc, #260]	; (8002a38 <HAL_RCC_OscConfig+0x934>)
 8002934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800293e:	2102      	movs	r1, #2
 8002940:	6019      	str	r1, [r3, #0]
 8002942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002946:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	fa93 f1a3 	rbit	r1, r3
 8002950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002954:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002958:	6019      	str	r1, [r3, #0]
  return result;
 800295a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	fab3 f383 	clz	r3, r3
 8002968:	b2db      	uxtb	r3, r3
 800296a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800296e:	b2db      	uxtb	r3, r3
 8002970:	f003 031f 	and.w	r3, r3, #31
 8002974:	2101      	movs	r1, #1
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	4013      	ands	r3, r2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d197      	bne.n	80028b0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002984:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 81a1 	beq.w	8002cd8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002996:	2300      	movs	r3, #0
 8002998:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299c:	4b26      	ldr	r3, [pc, #152]	; (8002a38 <HAL_RCC_OscConfig+0x934>)
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d116      	bne.n	80029d6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a8:	4b23      	ldr	r3, [pc, #140]	; (8002a38 <HAL_RCC_OscConfig+0x934>)
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	4a22      	ldr	r2, [pc, #136]	; (8002a38 <HAL_RCC_OscConfig+0x934>)
 80029ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b2:	61d3      	str	r3, [r2, #28]
 80029b4:	4b20      	ldr	r3, [pc, #128]	; (8002a38 <HAL_RCC_OscConfig+0x934>)
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80029bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ca:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80029ce:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80029d0:	2301      	movs	r3, #1
 80029d2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d6:	4b1a      	ldr	r3, [pc, #104]	; (8002a40 <HAL_RCC_OscConfig+0x93c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d11a      	bne.n	8002a18 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029e2:	4b17      	ldr	r3, [pc, #92]	; (8002a40 <HAL_RCC_OscConfig+0x93c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a16      	ldr	r2, [pc, #88]	; (8002a40 <HAL_RCC_OscConfig+0x93c>)
 80029e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ee:	f7fd fd85 	bl	80004fc <HAL_GetTick>
 80029f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f6:	e009      	b.n	8002a0c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f8:	f7fd fd80 	bl	80004fc <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b64      	cmp	r3, #100	; 0x64
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e3b1      	b.n	8003170 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <HAL_RCC_OscConfig+0x93c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0ef      	beq.n	80029f8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d10d      	bne.n	8002a44 <HAL_RCC_OscConfig+0x940>
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <HAL_RCC_OscConfig+0x934>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	4a02      	ldr	r2, [pc, #8]	; (8002a38 <HAL_RCC_OscConfig+0x934>)
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	6213      	str	r3, [r2, #32]
 8002a34:	e03c      	b.n	8002ab0 <HAL_RCC_OscConfig+0x9ac>
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	10908120 	.word	0x10908120
 8002a40:	40007000 	.word	0x40007000
 8002a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10c      	bne.n	8002a6e <HAL_RCC_OscConfig+0x96a>
 8002a54:	4bc1      	ldr	r3, [pc, #772]	; (8002d5c <HAL_RCC_OscConfig+0xc58>)
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	4ac0      	ldr	r2, [pc, #768]	; (8002d5c <HAL_RCC_OscConfig+0xc58>)
 8002a5a:	f023 0301 	bic.w	r3, r3, #1
 8002a5e:	6213      	str	r3, [r2, #32]
 8002a60:	4bbe      	ldr	r3, [pc, #760]	; (8002d5c <HAL_RCC_OscConfig+0xc58>)
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	4abd      	ldr	r2, [pc, #756]	; (8002d5c <HAL_RCC_OscConfig+0xc58>)
 8002a66:	f023 0304 	bic.w	r3, r3, #4
 8002a6a:	6213      	str	r3, [r2, #32]
 8002a6c:	e020      	b.n	8002ab0 <HAL_RCC_OscConfig+0x9ac>
 8002a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	2b05      	cmp	r3, #5
 8002a7c:	d10c      	bne.n	8002a98 <HAL_RCC_OscConfig+0x994>
 8002a7e:	4bb7      	ldr	r3, [pc, #732]	; (8002d5c <HAL_RCC_OscConfig+0xc58>)
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	4ab6      	ldr	r2, [pc, #728]	; (8002d5c <HAL_RCC_OscConfig+0xc58>)
 8002a84:	f043 0304 	orr.w	r3, r3, #4
 8002a88:	6213      	str	r3, [r2, #32]
 8002a8a:	4bb4      	ldr	r3, [pc, #720]	; (8002d5c <HAL_RCC_OscConfig+0xc58>)
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	4ab3      	ldr	r2, [pc, #716]	; (8002d5c <HAL_RCC_OscConfig+0xc58>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6213      	str	r3, [r2, #32]
 8002a96:	e00b      	b.n	8002ab0 <HAL_RCC_OscConfig+0x9ac>
 8002a98:	4bb0      	ldr	r3, [pc, #704]	; (8002d5c <HAL_RCC_OscConfig+0xc58>)
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	4aaf      	ldr	r2, [pc, #700]	; (8002d5c <HAL_RCC_OscConfig+0xc58>)
 8002a9e:	f023 0301 	bic.w	r3, r3, #1
 8002aa2:	6213      	str	r3, [r2, #32]
 8002aa4:	4bad      	ldr	r3, [pc, #692]	; (8002d5c <HAL_RCC_OscConfig+0xc58>)
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	4aac      	ldr	r2, [pc, #688]	; (8002d5c <HAL_RCC_OscConfig+0xc58>)
 8002aaa:	f023 0304 	bic.w	r3, r3, #4
 8002aae:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 8081 	beq.w	8002bc4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac2:	f7fd fd1b 	bl	80004fc <HAL_GetTick>
 8002ac6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aca:	e00b      	b.n	8002ae4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002acc:	f7fd fd16 	bl	80004fc <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e345      	b.n	8003170 <HAL_RCC_OscConfig+0x106c>
 8002ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002aec:	2202      	movs	r2, #2
 8002aee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	fa93 f2a3 	rbit	r2, r3
 8002afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b02:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002b10:	2202      	movs	r2, #2
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b18:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	fa93 f2a3 	rbit	r2, r3
 8002b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b26:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b2a:	601a      	str	r2, [r3, #0]
  return result;
 8002b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b30:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b34:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	095b      	lsrs	r3, r3, #5
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	f043 0302 	orr.w	r3, r3, #2
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d102      	bne.n	8002b50 <HAL_RCC_OscConfig+0xa4c>
 8002b4a:	4b84      	ldr	r3, [pc, #528]	; (8002d5c <HAL_RCC_OscConfig+0xc58>)
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	e013      	b.n	8002b78 <HAL_RCC_OscConfig+0xa74>
 8002b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b54:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002b58:	2202      	movs	r2, #2
 8002b5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b60:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	fa93 f2a3 	rbit	r2, r3
 8002b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	4b79      	ldr	r3, [pc, #484]	; (8002d5c <HAL_RCC_OscConfig+0xc58>)
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b7c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002b80:	2102      	movs	r1, #2
 8002b82:	6011      	str	r1, [r2, #0]
 8002b84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b88:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002b8c:	6812      	ldr	r2, [r2, #0]
 8002b8e:	fa92 f1a2 	rbit	r1, r2
 8002b92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b96:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002b9a:	6011      	str	r1, [r2, #0]
  return result;
 8002b9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ba0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002ba4:	6812      	ldr	r2, [r2, #0]
 8002ba6:	fab2 f282 	clz	r2, r2
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	f002 021f 	and.w	r2, r2, #31
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d084      	beq.n	8002acc <HAL_RCC_OscConfig+0x9c8>
 8002bc2:	e07f      	b.n	8002cc4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc4:	f7fd fc9a 	bl	80004fc <HAL_GetTick>
 8002bc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bcc:	e00b      	b.n	8002be6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bce:	f7fd fc95 	bl	80004fc <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e2c4      	b.n	8003170 <HAL_RCC_OscConfig+0x106c>
 8002be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bea:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002bee:	2202      	movs	r2, #2
 8002bf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	fa93 f2a3 	rbit	r2, r3
 8002c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c04:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c12:	2202      	movs	r2, #2
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	fa93 f2a3 	rbit	r2, r3
 8002c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c28:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002c2c:	601a      	str	r2, [r3, #0]
  return result;
 8002c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c32:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002c36:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c38:	fab3 f383 	clz	r3, r3
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f043 0302 	orr.w	r3, r3, #2
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d102      	bne.n	8002c52 <HAL_RCC_OscConfig+0xb4e>
 8002c4c:	4b43      	ldr	r3, [pc, #268]	; (8002d5c <HAL_RCC_OscConfig+0xc58>)
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	e013      	b.n	8002c7a <HAL_RCC_OscConfig+0xb76>
 8002c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c56:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c62:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	fa93 f2a3 	rbit	r2, r3
 8002c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c70:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	4b39      	ldr	r3, [pc, #228]	; (8002d5c <HAL_RCC_OscConfig+0xc58>)
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c7e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002c82:	2102      	movs	r1, #2
 8002c84:	6011      	str	r1, [r2, #0]
 8002c86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c8a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	fa92 f1a2 	rbit	r1, r2
 8002c94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c98:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002c9c:	6011      	str	r1, [r2, #0]
  return result;
 8002c9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ca2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	fab2 f282 	clz	r2, r2
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	f002 021f 	and.w	r2, r2, #31
 8002cb8:	2101      	movs	r1, #1
 8002cba:	fa01 f202 	lsl.w	r2, r1, r2
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d184      	bne.n	8002bce <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cc4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d105      	bne.n	8002cd8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ccc:	4b23      	ldr	r3, [pc, #140]	; (8002d5c <HAL_RCC_OscConfig+0xc58>)
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	4a22      	ldr	r2, [pc, #136]	; (8002d5c <HAL_RCC_OscConfig+0xc58>)
 8002cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cdc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 8242 	beq.w	800316e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cea:	4b1c      	ldr	r3, [pc, #112]	; (8002d5c <HAL_RCC_OscConfig+0xc58>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	f000 8213 	beq.w	800311e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	f040 8162 	bne.w	8002fce <HAL_RCC_OscConfig+0xeca>
 8002d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002d12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	fa93 f2a3 	rbit	r2, r3
 8002d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d2e:	601a      	str	r2, [r3, #0]
  return result;
 8002d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d34:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d38:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7fd fbd4 	bl	80004fc <HAL_GetTick>
 8002d54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d58:	e00c      	b.n	8002d74 <HAL_RCC_OscConfig+0xc70>
 8002d5a:	bf00      	nop
 8002d5c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d60:	f7fd fbcc 	bl	80004fc <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e1fd      	b.n	8003170 <HAL_RCC_OscConfig+0x106c>
 8002d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d78:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d86:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	fa93 f2a3 	rbit	r2, r3
 8002d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d94:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002d98:	601a      	str	r2, [r3, #0]
  return result;
 8002d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002da2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da4:	fab3 f383 	clz	r3, r3
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d102      	bne.n	8002dbe <HAL_RCC_OscConfig+0xcba>
 8002db8:	4bb0      	ldr	r3, [pc, #704]	; (800307c <HAL_RCC_OscConfig+0xf78>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	e027      	b.n	8002e0e <HAL_RCC_OscConfig+0xd0a>
 8002dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002dc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	fa93 f2a3 	rbit	r2, r3
 8002dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dde:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002dec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	fa93 f2a3 	rbit	r2, r3
 8002e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e04:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	4b9c      	ldr	r3, [pc, #624]	; (800307c <HAL_RCC_OscConfig+0xf78>)
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e12:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002e16:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e1a:	6011      	str	r1, [r2, #0]
 8002e1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e20:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	fa92 f1a2 	rbit	r1, r2
 8002e2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e2e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002e32:	6011      	str	r1, [r2, #0]
  return result;
 8002e34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e38:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002e3c:	6812      	ldr	r2, [r2, #0]
 8002e3e:	fab2 f282 	clz	r2, r2
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	f042 0220 	orr.w	r2, r2, #32
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	f002 021f 	and.w	r2, r2, #31
 8002e4e:	2101      	movs	r1, #1
 8002e50:	fa01 f202 	lsl.w	r2, r1, r2
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d182      	bne.n	8002d60 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e5a:	4b88      	ldr	r3, [pc, #544]	; (800307c <HAL_RCC_OscConfig+0xf78>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	430b      	orrs	r3, r1
 8002e7c:	497f      	ldr	r1, [pc, #508]	; (800307c <HAL_RCC_OscConfig+0xf78>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	604b      	str	r3, [r1, #4]
 8002e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e86:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002e8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e94:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	fa93 f2a3 	rbit	r2, r3
 8002e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ea6:	601a      	str	r2, [r3, #0]
  return result;
 8002ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eac:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002eb0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb2:	fab3 f383 	clz	r3, r3
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ebc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fd fb18 	bl	80004fc <HAL_GetTick>
 8002ecc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ed0:	e009      	b.n	8002ee6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed2:	f7fd fb13 	bl	80004fc <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e144      	b.n	8003170 <HAL_RCC_OscConfig+0x106c>
 8002ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eea:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002eee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ef2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	fa93 f2a3 	rbit	r2, r3
 8002f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f06:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002f0a:	601a      	str	r2, [r3, #0]
  return result;
 8002f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f10:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002f14:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	095b      	lsrs	r3, r3, #5
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d102      	bne.n	8002f30 <HAL_RCC_OscConfig+0xe2c>
 8002f2a:	4b54      	ldr	r3, [pc, #336]	; (800307c <HAL_RCC_OscConfig+0xf78>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	e027      	b.n	8002f80 <HAL_RCC_OscConfig+0xe7c>
 8002f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f34:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002f38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f42:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	fa93 f2a3 	rbit	r2, r3
 8002f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f50:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002f5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f68:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	fa93 f2a3 	rbit	r2, r3
 8002f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f76:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	4b3f      	ldr	r3, [pc, #252]	; (800307c <HAL_RCC_OscConfig+0xf78>)
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f84:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002f88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f8c:	6011      	str	r1, [r2, #0]
 8002f8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f92:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	fa92 f1a2 	rbit	r1, r2
 8002f9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fa0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002fa4:	6011      	str	r1, [r2, #0]
  return result;
 8002fa6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002faa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	fab2 f282 	clz	r2, r2
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	f042 0220 	orr.w	r2, r2, #32
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	f002 021f 	and.w	r2, r2, #31
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d082      	beq.n	8002ed2 <HAL_RCC_OscConfig+0xdce>
 8002fcc:	e0cf      	b.n	800316e <HAL_RCC_OscConfig+0x106a>
 8002fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002fd6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	fa93 f2a3 	rbit	r2, r3
 8002fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fee:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ff2:	601a      	str	r2, [r3, #0]
  return result;
 8002ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ffc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffe:	fab3 f383 	clz	r3, r3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003008:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	461a      	mov	r2, r3
 8003010:	2300      	movs	r3, #0
 8003012:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003014:	f7fd fa72 	bl	80004fc <HAL_GetTick>
 8003018:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800301c:	e009      	b.n	8003032 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301e:	f7fd fa6d 	bl	80004fc <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e09e      	b.n	8003170 <HAL_RCC_OscConfig+0x106c>
 8003032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003036:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800303a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800303e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003044:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	fa93 f2a3 	rbit	r2, r3
 800304e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003052:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003056:	601a      	str	r2, [r3, #0]
  return result;
 8003058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003060:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	095b      	lsrs	r3, r3, #5
 800306a:	b2db      	uxtb	r3, r3
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b01      	cmp	r3, #1
 8003074:	d104      	bne.n	8003080 <HAL_RCC_OscConfig+0xf7c>
 8003076:	4b01      	ldr	r3, [pc, #4]	; (800307c <HAL_RCC_OscConfig+0xf78>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	e029      	b.n	80030d0 <HAL_RCC_OscConfig+0xfcc>
 800307c:	40021000 	.word	0x40021000
 8003080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003084:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003088:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800308c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003092:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	fa93 f2a3 	rbit	r2, r3
 800309c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030aa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80030ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	fa93 f2a3 	rbit	r2, r3
 80030c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	4b2b      	ldr	r3, [pc, #172]	; (800317c <HAL_RCC_OscConfig+0x1078>)
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030d4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80030d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030dc:	6011      	str	r1, [r2, #0]
 80030de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030e2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	fa92 f1a2 	rbit	r1, r2
 80030ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030f0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80030f4:	6011      	str	r1, [r2, #0]
  return result;
 80030f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030fa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	fab2 f282 	clz	r2, r2
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	f042 0220 	orr.w	r2, r2, #32
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	f002 021f 	and.w	r2, r2, #31
 8003110:	2101      	movs	r1, #1
 8003112:	fa01 f202 	lsl.w	r2, r1, r2
 8003116:	4013      	ands	r3, r2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d180      	bne.n	800301e <HAL_RCC_OscConfig+0xf1a>
 800311c:	e027      	b.n	800316e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800311e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003122:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e01e      	b.n	8003170 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003132:	4b12      	ldr	r3, [pc, #72]	; (800317c <HAL_RCC_OscConfig+0x1078>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800313a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800313e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003146:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	429a      	cmp	r2, r3
 8003150:	d10b      	bne.n	800316a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003152:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003156:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800315a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003166:	429a      	cmp	r2, r3
 8003168:	d001      	beq.n	800316e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40021000 	.word	0x40021000

08003180 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b09e      	sub	sp, #120	; 0x78
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e162      	b.n	800345e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003198:	4b90      	ldr	r3, [pc, #576]	; (80033dc <HAL_RCC_ClockConfig+0x25c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d910      	bls.n	80031c8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a6:	4b8d      	ldr	r3, [pc, #564]	; (80033dc <HAL_RCC_ClockConfig+0x25c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 0207 	bic.w	r2, r3, #7
 80031ae:	498b      	ldr	r1, [pc, #556]	; (80033dc <HAL_RCC_ClockConfig+0x25c>)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b6:	4b89      	ldr	r3, [pc, #548]	; (80033dc <HAL_RCC_ClockConfig+0x25c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e14a      	b.n	800345e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d008      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d4:	4b82      	ldr	r3, [pc, #520]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	497f      	ldr	r1, [pc, #508]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 80dc 	beq.w	80033ac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d13c      	bne.n	8003276 <HAL_RCC_ClockConfig+0xf6>
 80031fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003200:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003204:	fa93 f3a3 	rbit	r3, r3
 8003208:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800320a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320c:	fab3 f383 	clz	r3, r3
 8003210:	b2db      	uxtb	r3, r3
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	b2db      	uxtb	r3, r3
 8003216:	f043 0301 	orr.w	r3, r3, #1
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b01      	cmp	r3, #1
 800321e:	d102      	bne.n	8003226 <HAL_RCC_ClockConfig+0xa6>
 8003220:	4b6f      	ldr	r3, [pc, #444]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	e00f      	b.n	8003246 <HAL_RCC_ClockConfig+0xc6>
 8003226:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800322a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	667b      	str	r3, [r7, #100]	; 0x64
 8003234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003238:	663b      	str	r3, [r7, #96]	; 0x60
 800323a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800323c:	fa93 f3a3 	rbit	r3, r3
 8003240:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003242:	4b67      	ldr	r3, [pc, #412]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800324a:	65ba      	str	r2, [r7, #88]	; 0x58
 800324c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800324e:	fa92 f2a2 	rbit	r2, r2
 8003252:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003254:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003256:	fab2 f282 	clz	r2, r2
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	f042 0220 	orr.w	r2, r2, #32
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	f002 021f 	and.w	r2, r2, #31
 8003266:	2101      	movs	r1, #1
 8003268:	fa01 f202 	lsl.w	r2, r1, r2
 800326c:	4013      	ands	r3, r2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d17b      	bne.n	800336a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e0f3      	b.n	800345e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d13c      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x178>
 800327e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003282:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003286:	fa93 f3a3 	rbit	r3, r3
 800328a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800328c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328e:	fab3 f383 	clz	r3, r3
 8003292:	b2db      	uxtb	r3, r3
 8003294:	095b      	lsrs	r3, r3, #5
 8003296:	b2db      	uxtb	r3, r3
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d102      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x128>
 80032a2:	4b4f      	ldr	r3, [pc, #316]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	e00f      	b.n	80032c8 <HAL_RCC_ClockConfig+0x148>
 80032a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032b0:	fa93 f3a3 	rbit	r3, r3
 80032b4:	647b      	str	r3, [r7, #68]	; 0x44
 80032b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032ba:	643b      	str	r3, [r7, #64]	; 0x40
 80032bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032c4:	4b46      	ldr	r3, [pc, #280]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032cc:	63ba      	str	r2, [r7, #56]	; 0x38
 80032ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032d0:	fa92 f2a2 	rbit	r2, r2
 80032d4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80032d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032d8:	fab2 f282 	clz	r2, r2
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	f042 0220 	orr.w	r2, r2, #32
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	f002 021f 	and.w	r2, r2, #31
 80032e8:	2101      	movs	r1, #1
 80032ea:	fa01 f202 	lsl.w	r2, r1, r2
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d13a      	bne.n	800336a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e0b2      	b.n	800345e <HAL_RCC_ClockConfig+0x2de>
 80032f8:	2302      	movs	r3, #2
 80032fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fe:	fa93 f3a3 	rbit	r3, r3
 8003302:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003306:	fab3 f383 	clz	r3, r3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b01      	cmp	r3, #1
 8003318:	d102      	bne.n	8003320 <HAL_RCC_ClockConfig+0x1a0>
 800331a:	4b31      	ldr	r3, [pc, #196]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	e00d      	b.n	800333c <HAL_RCC_ClockConfig+0x1bc>
 8003320:	2302      	movs	r3, #2
 8003322:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003326:	fa93 f3a3 	rbit	r3, r3
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
 800332c:	2302      	movs	r3, #2
 800332e:	623b      	str	r3, [r7, #32]
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	fa93 f3a3 	rbit	r3, r3
 8003336:	61fb      	str	r3, [r7, #28]
 8003338:	4b29      	ldr	r3, [pc, #164]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	2202      	movs	r2, #2
 800333e:	61ba      	str	r2, [r7, #24]
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	fa92 f2a2 	rbit	r2, r2
 8003346:	617a      	str	r2, [r7, #20]
  return result;
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	fab2 f282 	clz	r2, r2
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	f042 0220 	orr.w	r2, r2, #32
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	f002 021f 	and.w	r2, r2, #31
 800335a:	2101      	movs	r1, #1
 800335c:	fa01 f202 	lsl.w	r2, r1, r2
 8003360:	4013      	ands	r3, r2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e079      	b.n	800345e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800336a:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f023 0203 	bic.w	r2, r3, #3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	491a      	ldr	r1, [pc, #104]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 8003378:	4313      	orrs	r3, r2
 800337a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800337c:	f7fd f8be 	bl	80004fc <HAL_GetTick>
 8003380:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003382:	e00a      	b.n	800339a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003384:	f7fd f8ba 	bl	80004fc <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003392:	4293      	cmp	r3, r2
 8003394:	d901      	bls.n	800339a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e061      	b.n	800345e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339a:	4b11      	ldr	r3, [pc, #68]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 020c 	and.w	r2, r3, #12
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d1eb      	bne.n	8003384 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_RCC_ClockConfig+0x25c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d214      	bcs.n	80033e4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ba:	4b08      	ldr	r3, [pc, #32]	; (80033dc <HAL_RCC_ClockConfig+0x25c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f023 0207 	bic.w	r2, r3, #7
 80033c2:	4906      	ldr	r1, [pc, #24]	; (80033dc <HAL_RCC_ClockConfig+0x25c>)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ca:	4b04      	ldr	r3, [pc, #16]	; (80033dc <HAL_RCC_ClockConfig+0x25c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e040      	b.n	800345e <HAL_RCC_ClockConfig+0x2de>
 80033dc:	40022000 	.word	0x40022000
 80033e0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033f0:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <HAL_RCC_ClockConfig+0x2e8>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	491a      	ldr	r1, [pc, #104]	; (8003468 <HAL_RCC_ClockConfig+0x2e8>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d009      	beq.n	8003422 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800340e:	4b16      	ldr	r3, [pc, #88]	; (8003468 <HAL_RCC_ClockConfig+0x2e8>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4912      	ldr	r1, [pc, #72]	; (8003468 <HAL_RCC_ClockConfig+0x2e8>)
 800341e:	4313      	orrs	r3, r2
 8003420:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003422:	f000 f829 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8003426:	4601      	mov	r1, r0
 8003428:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <HAL_RCC_ClockConfig+0x2e8>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003430:	22f0      	movs	r2, #240	; 0xf0
 8003432:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	fa92 f2a2 	rbit	r2, r2
 800343a:	60fa      	str	r2, [r7, #12]
  return result;
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	fab2 f282 	clz	r2, r2
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	40d3      	lsrs	r3, r2
 8003446:	4a09      	ldr	r2, [pc, #36]	; (800346c <HAL_RCC_ClockConfig+0x2ec>)
 8003448:	5cd3      	ldrb	r3, [r2, r3]
 800344a:	fa21 f303 	lsr.w	r3, r1, r3
 800344e:	4a08      	ldr	r2, [pc, #32]	; (8003470 <HAL_RCC_ClockConfig+0x2f0>)
 8003450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003452:	4b08      	ldr	r3, [pc, #32]	; (8003474 <HAL_RCC_ClockConfig+0x2f4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f7fd f80c 	bl	8000474 <HAL_InitTick>
  
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3778      	adds	r7, #120	; 0x78
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000
 800346c:	08008064 	.word	0x08008064
 8003470:	20000004 	.word	0x20000004
 8003474:	20000008 	.word	0x20000008

08003478 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003478:	b480      	push	{r7}
 800347a:	b08b      	sub	sp, #44	; 0x2c
 800347c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]
 8003482:	2300      	movs	r3, #0
 8003484:	61bb      	str	r3, [r7, #24]
 8003486:	2300      	movs	r3, #0
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003492:	4b29      	ldr	r3, [pc, #164]	; (8003538 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d002      	beq.n	80034a8 <HAL_RCC_GetSysClockFreq+0x30>
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d003      	beq.n	80034ae <HAL_RCC_GetSysClockFreq+0x36>
 80034a6:	e03c      	b.n	8003522 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034a8:	4b24      	ldr	r3, [pc, #144]	; (800353c <HAL_RCC_GetSysClockFreq+0xc4>)
 80034aa:	623b      	str	r3, [r7, #32]
      break;
 80034ac:	e03c      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80034b4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80034b8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	fa92 f2a2 	rbit	r2, r2
 80034c0:	607a      	str	r2, [r7, #4]
  return result;
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	fab2 f282 	clz	r2, r2
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	40d3      	lsrs	r3, r2
 80034cc:	4a1c      	ldr	r2, [pc, #112]	; (8003540 <HAL_RCC_GetSysClockFreq+0xc8>)
 80034ce:	5cd3      	ldrb	r3, [r2, r3]
 80034d0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80034d2:	4b19      	ldr	r3, [pc, #100]	; (8003538 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	220f      	movs	r2, #15
 80034dc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	fa92 f2a2 	rbit	r2, r2
 80034e4:	60fa      	str	r2, [r7, #12]
  return result;
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	fab2 f282 	clz	r2, r2
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	40d3      	lsrs	r3, r2
 80034f0:	4a14      	ldr	r2, [pc, #80]	; (8003544 <HAL_RCC_GetSysClockFreq+0xcc>)
 80034f2:	5cd3      	ldrb	r3, [r2, r3]
 80034f4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003500:	4a0e      	ldr	r2, [pc, #56]	; (800353c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	fbb2 f2f3 	udiv	r2, r2, r3
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	fb02 f303 	mul.w	r3, r2, r3
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
 8003510:	e004      	b.n	800351c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	4a0c      	ldr	r2, [pc, #48]	; (8003548 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003516:	fb02 f303 	mul.w	r3, r2, r3
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	623b      	str	r3, [r7, #32]
      break;
 8003520:	e002      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003522:	4b06      	ldr	r3, [pc, #24]	; (800353c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003524:	623b      	str	r3, [r7, #32]
      break;
 8003526:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003528:	6a3b      	ldr	r3, [r7, #32]
}
 800352a:	4618      	mov	r0, r3
 800352c:	372c      	adds	r7, #44	; 0x2c
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40021000 	.word	0x40021000
 800353c:	007a1200 	.word	0x007a1200
 8003540:	08008074 	.word	0x08008074
 8003544:	08008084 	.word	0x08008084
 8003548:	003d0900 	.word	0x003d0900

0800354c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b092      	sub	sp, #72	; 0x48
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800355c:	2300      	movs	r3, #0
 800355e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 80d4 	beq.w	8003718 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003570:	4b4e      	ldr	r3, [pc, #312]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10e      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357c:	4b4b      	ldr	r3, [pc, #300]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	4a4a      	ldr	r2, [pc, #296]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003586:	61d3      	str	r3, [r2, #28]
 8003588:	4b48      	ldr	r3, [pc, #288]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003594:	2301      	movs	r3, #1
 8003596:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359a:	4b45      	ldr	r3, [pc, #276]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d118      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035a6:	4b42      	ldr	r3, [pc, #264]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a41      	ldr	r2, [pc, #260]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b2:	f7fc ffa3 	bl	80004fc <HAL_GetTick>
 80035b6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b8:	e008      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ba:	f7fc ff9f 	bl	80004fc <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b64      	cmp	r3, #100	; 0x64
 80035c6:	d901      	bls.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e14b      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035cc:	4b38      	ldr	r3, [pc, #224]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f0      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035d8:	4b34      	ldr	r3, [pc, #208]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 8084 	beq.w	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d07c      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035f8:	4b2c      	ldr	r3, [pc, #176]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003600:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003602:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003606:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360a:	fa93 f3a3 	rbit	r3, r3
 800360e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003612:	fab3 f383 	clz	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	461a      	mov	r2, r3
 800361a:	4b26      	ldr	r3, [pc, #152]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	461a      	mov	r2, r3
 8003622:	2301      	movs	r3, #1
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800362a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362e:	fa93 f3a3 	rbit	r3, r3
 8003632:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003636:	fab3 f383 	clz	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	461a      	mov	r2, r3
 800363e:	4b1d      	ldr	r3, [pc, #116]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	461a      	mov	r2, r3
 8003646:	2300      	movs	r3, #0
 8003648:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800364a:	4a18      	ldr	r2, [pc, #96]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800364e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d04b      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365a:	f7fc ff4f 	bl	80004fc <HAL_GetTick>
 800365e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003660:	e00a      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003662:	f7fc ff4b 	bl	80004fc <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003670:	4293      	cmp	r3, r2
 8003672:	d901      	bls.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e0f5      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003678:	2302      	movs	r3, #2
 800367a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367e:	fa93 f3a3 	rbit	r3, r3
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
 8003684:	2302      	movs	r3, #2
 8003686:	623b      	str	r3, [r7, #32]
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	fa93 f3a3 	rbit	r3, r3
 800368e:	61fb      	str	r3, [r7, #28]
  return result;
 8003690:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003692:	fab3 f383 	clz	r3, r3
 8003696:	b2db      	uxtb	r3, r3
 8003698:	095b      	lsrs	r3, r3, #5
 800369a:	b2db      	uxtb	r3, r3
 800369c:	f043 0302 	orr.w	r3, r3, #2
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d108      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80036a6:	4b01      	ldr	r3, [pc, #4]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	e00d      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80036ac:	40021000 	.word	0x40021000
 80036b0:	40007000 	.word	0x40007000
 80036b4:	10908100 	.word	0x10908100
 80036b8:	2302      	movs	r3, #2
 80036ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	fa93 f3a3 	rbit	r3, r3
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	4b69      	ldr	r3, [pc, #420]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	2202      	movs	r2, #2
 80036ca:	613a      	str	r2, [r7, #16]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	fa92 f2a2 	rbit	r2, r2
 80036d2:	60fa      	str	r2, [r7, #12]
  return result;
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	fab2 f282 	clz	r2, r2
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	f002 021f 	and.w	r2, r2, #31
 80036e6:	2101      	movs	r1, #1
 80036e8:	fa01 f202 	lsl.w	r2, r1, r2
 80036ec:	4013      	ands	r3, r2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0b7      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80036f2:	4b5e      	ldr	r3, [pc, #376]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	495b      	ldr	r1, [pc, #364]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003700:	4313      	orrs	r3, r2
 8003702:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003704:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003708:	2b01      	cmp	r3, #1
 800370a:	d105      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800370c:	4b57      	ldr	r3, [pc, #348]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	4a56      	ldr	r2, [pc, #344]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003716:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003724:	4b51      	ldr	r3, [pc, #324]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	f023 0203 	bic.w	r2, r3, #3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	494e      	ldr	r1, [pc, #312]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003732:	4313      	orrs	r3, r2
 8003734:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b00      	cmp	r3, #0
 8003740:	d008      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003742:	4b4a      	ldr	r3, [pc, #296]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	f023 0210 	bic.w	r2, r3, #16
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	4947      	ldr	r1, [pc, #284]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003750:	4313      	orrs	r3, r2
 8003752:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003760:	4b42      	ldr	r3, [pc, #264]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376c:	493f      	ldr	r1, [pc, #252]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800376e:	4313      	orrs	r3, r2
 8003770:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d008      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800377e:	4b3b      	ldr	r3, [pc, #236]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	f023 0220 	bic.w	r2, r3, #32
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	4938      	ldr	r1, [pc, #224]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800378c:	4313      	orrs	r3, r2
 800378e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800379c:	4b33      	ldr	r3, [pc, #204]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	4930      	ldr	r1, [pc, #192]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d008      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037ba:	4b2c      	ldr	r3, [pc, #176]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	4929      	ldr	r1, [pc, #164]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80037d8:	4b24      	ldr	r3, [pc, #144]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	4921      	ldr	r1, [pc, #132]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d008      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80037f6:	4b1d      	ldr	r3, [pc, #116]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	491a      	ldr	r1, [pc, #104]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003804:	4313      	orrs	r3, r2
 8003806:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003814:	4b15      	ldr	r3, [pc, #84]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	4912      	ldr	r1, [pc, #72]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003822:	4313      	orrs	r3, r2
 8003824:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d008      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003832:	4b0e      	ldr	r3, [pc, #56]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	490b      	ldr	r1, [pc, #44]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003840:	4313      	orrs	r3, r2
 8003842:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d008      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003850:	4b06      	ldr	r3, [pc, #24]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	4903      	ldr	r1, [pc, #12]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800385e:	4313      	orrs	r3, r2
 8003860:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3748      	adds	r7, #72	; 0x48
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40021000 	.word	0x40021000

08003870 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003880:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003884:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	b29a      	uxth	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800389e:	b480      	push	{r7}
 80038a0:	b085      	sub	sp, #20
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80038a6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80038aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	4013      	ands	r3, r2
 80038be:	b29a      	uxth	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80038d4:	b084      	sub	sp, #16
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	f107 0014 	add.w	r0, r7, #20
 80038e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	b004      	add	sp, #16
 8003914:	4770      	bx	lr
	...

08003918 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003918:	b480      	push	{r7}
 800391a:	b09d      	sub	sp, #116	; 0x74
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	b29b      	uxth	r3, r3
 8003936:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800393a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	78db      	ldrb	r3, [r3, #3]
 8003946:	2b03      	cmp	r3, #3
 8003948:	d81f      	bhi.n	800398a <USB_ActivateEndpoint+0x72>
 800394a:	a201      	add	r2, pc, #4	; (adr r2, 8003950 <USB_ActivateEndpoint+0x38>)
 800394c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003950:	08003961 	.word	0x08003961
 8003954:	0800397d 	.word	0x0800397d
 8003958:	08003993 	.word	0x08003993
 800395c:	0800396f 	.word	0x0800396f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003960:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003964:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003968:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800396c:	e012      	b.n	8003994 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800396e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003972:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003976:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800397a:	e00b      	b.n	8003994 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800397c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003980:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003984:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003988:	e004      	b.n	8003994 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8003990:	e000      	b.n	8003994 <USB_ActivateEndpoint+0x7c>
      break;
 8003992:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	441a      	add	r2, r3
 800399e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80039a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	b21b      	sxth	r3, r3
 80039c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ce:	b21a      	sxth	r2, r3
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	b21b      	sxth	r3, r3
 80039d6:	4313      	orrs	r3, r2
 80039d8:	b21b      	sxth	r3, r3
 80039da:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	441a      	add	r2, r3
 80039e8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80039ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	7b1b      	ldrb	r3, [r3, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f040 8178 	bne.w	8003cfa <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	785b      	ldrb	r3, [r3, #1]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 8084 	beq.w	8003b1c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	61bb      	str	r3, [r7, #24]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	461a      	mov	r2, r3
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	4413      	add	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	00da      	lsls	r2, r3, #3
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	88db      	ldrh	r3, [r3, #6]
 8003a3c:	085b      	lsrs	r3, r3, #1
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	827b      	strh	r3, [r7, #18]
 8003a56:	8a7b      	ldrh	r3, [r7, #18]
 8003a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d01b      	beq.n	8003a98 <USB_ActivateEndpoint+0x180>
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a76:	823b      	strh	r3, [r7, #16]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	441a      	add	r2, r3
 8003a82:	8a3b      	ldrh	r3, [r7, #16]
 8003a84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	78db      	ldrb	r3, [r3, #3]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d020      	beq.n	8003ae2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ab6:	81bb      	strh	r3, [r7, #12]
 8003ab8:	89bb      	ldrh	r3, [r7, #12]
 8003aba:	f083 0320 	eor.w	r3, r3, #32
 8003abe:	81bb      	strh	r3, [r7, #12]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	441a      	add	r2, r3
 8003aca:	89bb      	ldrh	r3, [r7, #12]
 8003acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	8013      	strh	r3, [r2, #0]
 8003ae0:	e2d5      	b.n	800408e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003af8:	81fb      	strh	r3, [r7, #14]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	441a      	add	r2, r3
 8003b04:	89fb      	ldrh	r3, [r7, #14]
 8003b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	8013      	strh	r3, [r2, #0]
 8003b1a:	e2b8      	b.n	800408e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	633b      	str	r3, [r7, #48]	; 0x30
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	461a      	mov	r2, r3
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2c:	4413      	add	r3, r2
 8003b2e:	633b      	str	r3, [r7, #48]	; 0x30
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	00da      	lsls	r2, r3, #3
 8003b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b38:	4413      	add	r3, r2
 8003b3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	88db      	ldrh	r3, [r3, #6]
 8003b44:	085b      	lsrs	r3, r3, #1
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b60:	4413      	add	r3, r2
 8003b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	00da      	lsls	r2, r3, #3
 8003b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	801a      	strh	r2, [r3, #0]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	2b3e      	cmp	r3, #62	; 0x3e
 8003b8a:	d91d      	bls.n	8003bc8 <USB_ActivateEndpoint+0x2b0>
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	095b      	lsrs	r3, r3, #5
 8003b92:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	f003 031f 	and.w	r3, r3, #31
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d102      	bne.n	8003ba6 <USB_ActivateEndpoint+0x28e>
 8003ba0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	029b      	lsls	r3, r3, #10
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	801a      	strh	r2, [r3, #0]
 8003bc6:	e026      	b.n	8003c16 <USB_ActivateEndpoint+0x2fe>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10a      	bne.n	8003be6 <USB_ActivateEndpoint+0x2ce>
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	801a      	strh	r2, [r3, #0]
 8003be4:	e017      	b.n	8003c16 <USB_ActivateEndpoint+0x2fe>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	085b      	lsrs	r3, r3, #1
 8003bec:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d002      	beq.n	8003c00 <USB_ActivateEndpoint+0x2e8>
 8003bfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	029b      	lsls	r3, r3, #10
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	847b      	strh	r3, [r7, #34]	; 0x22
 8003c24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d01b      	beq.n	8003c66 <USB_ActivateEndpoint+0x34e>
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c44:	843b      	strh	r3, [r7, #32]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	441a      	add	r2, r3
 8003c50:	8c3b      	ldrh	r3, [r7, #32]
 8003c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d124      	bne.n	8003cb8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c84:	83bb      	strh	r3, [r7, #28]
 8003c86:	8bbb      	ldrh	r3, [r7, #28]
 8003c88:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003c8c:	83bb      	strh	r3, [r7, #28]
 8003c8e:	8bbb      	ldrh	r3, [r7, #28]
 8003c90:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c94:	83bb      	strh	r3, [r7, #28]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	441a      	add	r2, r3
 8003ca0:	8bbb      	ldrh	r3, [r7, #28]
 8003ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	8013      	strh	r3, [r2, #0]
 8003cb6:	e1ea      	b.n	800408e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cce:	83fb      	strh	r3, [r7, #30]
 8003cd0:	8bfb      	ldrh	r3, [r7, #30]
 8003cd2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003cd6:	83fb      	strh	r3, [r7, #30]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	441a      	add	r2, r3
 8003ce2:	8bfb      	ldrh	r3, [r7, #30]
 8003ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	8013      	strh	r3, [r2, #0]
 8003cf8:	e1c9      	b.n	800408e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	78db      	ldrb	r3, [r3, #3]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d11e      	bne.n	8003d40 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d18:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	441a      	add	r2, r3
 8003d26:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d32:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	8013      	strh	r3, [r2, #0]
 8003d3e:	e01d      	b.n	8003d7c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d56:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	441a      	add	r2, r3
 8003d64:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	461a      	mov	r2, r3
 8003d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d8c:	4413      	add	r3, r2
 8003d8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	00da      	lsls	r2, r3, #3
 8003d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	891b      	ldrh	r3, [r3, #8]
 8003da4:	085b      	lsrs	r3, r3, #1
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dae:	801a      	strh	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	657b      	str	r3, [r7, #84]	; 0x54
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc0:	4413      	add	r3, r2
 8003dc2:	657b      	str	r3, [r7, #84]	; 0x54
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	00da      	lsls	r2, r3, #3
 8003dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dcc:	4413      	add	r3, r2
 8003dce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003dd2:	653b      	str	r3, [r7, #80]	; 0x50
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	895b      	ldrh	r3, [r3, #10]
 8003dd8:	085b      	lsrs	r3, r3, #1
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003de2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	785b      	ldrb	r3, [r3, #1]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f040 8093 	bne.w	8003f14 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003dfe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d01b      	beq.n	8003e42 <USB_ActivateEndpoint+0x52a>
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e20:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	441a      	add	r2, r3
 8003e2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003e50:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d01b      	beq.n	8003e92 <USB_ActivateEndpoint+0x57a>
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e70:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	441a      	add	r2, r3
 8003e7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea8:	873b      	strh	r3, [r7, #56]	; 0x38
 8003eaa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003eac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003eb0:	873b      	strh	r3, [r7, #56]	; 0x38
 8003eb2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003eb4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003eb8:	873b      	strh	r3, [r7, #56]	; 0x38
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	441a      	add	r2, r3
 8003ec4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	441a      	add	r2, r3
 8003efc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	8013      	strh	r3, [r2, #0]
 8003f12:	e0bc      	b.n	800408e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003f24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01d      	beq.n	8003f6c <USB_ActivateEndpoint+0x654>
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f46:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	441a      	add	r2, r3
 8003f54:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003f7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d01d      	beq.n	8003fc4 <USB_ActivateEndpoint+0x6ac>
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	441a      	add	r2, r3
 8003fac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003fb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	78db      	ldrb	r3, [r3, #3]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d024      	beq.n	8004016 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fe2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003fe6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003fea:	f083 0320 	eor.w	r3, r3, #32
 8003fee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	441a      	add	r2, r3
 8003ffc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800400c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004010:	b29b      	uxth	r3, r3
 8004012:	8013      	strh	r3, [r2, #0]
 8004014:	e01d      	b.n	8004052 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	b29b      	uxth	r3, r3
 8004024:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800402c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	441a      	add	r2, r3
 800403a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800403e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800404a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800404e:	b29b      	uxth	r3, r3
 8004050:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	b29b      	uxth	r3, r3
 8004060:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004068:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	441a      	add	r2, r3
 8004076:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800407a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800407e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800408a:	b29b      	uxth	r3, r3
 800408c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800408e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004092:	4618      	mov	r0, r3
 8004094:	3774      	adds	r7, #116	; 0x74
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop

080040a0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b08d      	sub	sp, #52	; 0x34
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	7b1b      	ldrb	r3, [r3, #12]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f040 808e 	bne.w	80041d0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	785b      	ldrb	r3, [r3, #1]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d044      	beq.n	8004146 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	81bb      	strh	r3, [r7, #12]
 80040ca:	89bb      	ldrh	r3, [r7, #12]
 80040cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d01b      	beq.n	800410c <USB_DeactivateEndpoint+0x6c>
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ea:	817b      	strh	r3, [r7, #10]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	441a      	add	r2, r3
 80040f6:	897b      	ldrh	r3, [r7, #10]
 80040f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004100:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004104:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004108:	b29b      	uxth	r3, r3
 800410a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	b29b      	uxth	r3, r3
 800411a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800411e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004122:	813b      	strh	r3, [r7, #8]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	441a      	add	r2, r3
 800412e:	893b      	ldrh	r3, [r7, #8]
 8004130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800413c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004140:	b29b      	uxth	r3, r3
 8004142:	8013      	strh	r3, [r2, #0]
 8004144:	e192      	b.n	800446c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	827b      	strh	r3, [r7, #18]
 8004154:	8a7b      	ldrh	r3, [r7, #18]
 8004156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d01b      	beq.n	8004196 <USB_DeactivateEndpoint+0xf6>
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	b29b      	uxth	r3, r3
 800416c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004174:	823b      	strh	r3, [r7, #16]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	441a      	add	r2, r3
 8004180:	8a3b      	ldrh	r3, [r7, #16]
 8004182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800418a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800418e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004192:	b29b      	uxth	r3, r3
 8004194:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ac:	81fb      	strh	r3, [r7, #14]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	441a      	add	r2, r3
 80041b8:	89fb      	ldrh	r3, [r7, #14]
 80041ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	8013      	strh	r3, [r2, #0]
 80041ce:	e14d      	b.n	800446c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	785b      	ldrb	r3, [r3, #1]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f040 80a5 	bne.w	8004324 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	843b      	strh	r3, [r7, #32]
 80041e8:	8c3b      	ldrh	r3, [r7, #32]
 80041ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d01b      	beq.n	800422a <USB_DeactivateEndpoint+0x18a>
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004208:	83fb      	strh	r3, [r7, #30]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	441a      	add	r2, r3
 8004214:	8bfb      	ldrh	r3, [r7, #30]
 8004216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800421a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800421e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004226:	b29b      	uxth	r3, r3
 8004228:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	83bb      	strh	r3, [r7, #28]
 8004238:	8bbb      	ldrh	r3, [r7, #28]
 800423a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423e:	2b00      	cmp	r3, #0
 8004240:	d01b      	beq.n	800427a <USB_DeactivateEndpoint+0x1da>
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	b29b      	uxth	r3, r3
 8004250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004258:	837b      	strh	r3, [r7, #26]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	441a      	add	r2, r3
 8004264:	8b7b      	ldrh	r3, [r7, #26]
 8004266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800426a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800426e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004272:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004276:	b29b      	uxth	r3, r3
 8004278:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	b29b      	uxth	r3, r3
 8004288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800428c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004290:	833b      	strh	r3, [r7, #24]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	441a      	add	r2, r3
 800429c:	8b3b      	ldrh	r3, [r7, #24]
 800429e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c8:	82fb      	strh	r3, [r7, #22]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	441a      	add	r2, r3
 80042d4:	8afb      	ldrh	r3, [r7, #22]
 80042d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004300:	82bb      	strh	r3, [r7, #20]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	441a      	add	r2, r3
 800430c:	8abb      	ldrh	r3, [r7, #20]
 800430e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800431a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800431e:	b29b      	uxth	r3, r3
 8004320:	8013      	strh	r3, [r2, #0]
 8004322:	e0a3      	b.n	800446c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004332:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d01b      	beq.n	8004374 <USB_DeactivateEndpoint+0x2d4>
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	b29b      	uxth	r3, r3
 800434a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004352:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	441a      	add	r2, r3
 800435e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004368:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800436c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004370:	b29b      	uxth	r3, r3
 8004372:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004382:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01b      	beq.n	80043c4 <USB_DeactivateEndpoint+0x324>
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	b29b      	uxth	r3, r3
 800439a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800439e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a2:	853b      	strh	r3, [r7, #40]	; 0x28
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	441a      	add	r2, r3
 80043ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80043b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043da:	84fb      	strh	r3, [r7, #38]	; 0x26
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	441a      	add	r2, r3
 80043e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	881b      	ldrh	r3, [r3, #0]
 8004408:	b29b      	uxth	r3, r3
 800440a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800440e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004412:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	441a      	add	r2, r3
 800441e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800442c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004430:	b29b      	uxth	r3, r3
 8004432:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	b29b      	uxth	r3, r3
 8004442:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444a:	847b      	strh	r3, [r7, #34]	; 0x22
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	441a      	add	r2, r3
 8004456:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800445c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004468:	b29b      	uxth	r3, r3
 800446a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3734      	adds	r7, #52	; 0x34
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b0c2      	sub	sp, #264	; 0x108
 800447e:	af00      	add	r7, sp, #0
 8004480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004484:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004488:	6018      	str	r0, [r3, #0]
 800448a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800448e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004492:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	785b      	ldrb	r3, [r3, #1]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	f040 86b7 	bne.w	8005214 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80044a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699a      	ldr	r2, [r3, #24]
 80044b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d908      	bls.n	80044d4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80044c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80044d2:	e007      	b.n	80044e4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80044d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80044e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	7b1b      	ldrb	r3, [r3, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d13a      	bne.n	800456a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80044f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6959      	ldr	r1, [r3, #20]
 8004500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	88da      	ldrh	r2, [r3, #6]
 800450c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004510:	b29b      	uxth	r3, r3
 8004512:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004516:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800451a:	6800      	ldr	r0, [r0, #0]
 800451c:	f001 fc8c 	bl	8005e38 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004524:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	613b      	str	r3, [r7, #16]
 800452c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004530:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800453a:	b29b      	uxth	r3, r3
 800453c:	461a      	mov	r2, r3
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	4413      	add	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
 8004544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	00da      	lsls	r2, r3, #3
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4413      	add	r3, r2
 8004556:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	801a      	strh	r2, [r3, #0]
 8004566:	f000 be1f 	b.w	80051a8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800456a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800456e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	78db      	ldrb	r3, [r3, #3]
 8004576:	2b02      	cmp	r3, #2
 8004578:	f040 8462 	bne.w	8004e40 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800457c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6a1a      	ldr	r2, [r3, #32]
 8004588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800458c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	429a      	cmp	r2, r3
 8004596:	f240 83df 	bls.w	8004d58 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800459a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800459e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80045c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	441a      	add	r2, r3
 80045de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80045e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80045ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80045f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6a1a      	ldr	r2, [r3, #32]
 8004602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004606:	1ad2      	subs	r2, r2, r3
 8004608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800460c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004618:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	881b      	ldrh	r3, [r3, #0]
 8004630:	b29b      	uxth	r3, r3
 8004632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 81c7 	beq.w	80049ca <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800463c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004640:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	633b      	str	r3, [r7, #48]	; 0x30
 8004648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800464c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	785b      	ldrb	r3, [r3, #1]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d177      	bne.n	8004748 <USB_EPStartXfer+0x2ce>
 8004658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800465c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	62bb      	str	r3, [r7, #40]	; 0x28
 8004664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004668:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004672:	b29b      	uxth	r3, r3
 8004674:	461a      	mov	r2, r3
 8004676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004678:	4413      	add	r3, r2
 800467a:	62bb      	str	r3, [r7, #40]	; 0x28
 800467c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	00da      	lsls	r2, r3, #3
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468c:	4413      	add	r3, r2
 800468e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004692:	627b      	str	r3, [r7, #36]	; 0x24
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	b29b      	uxth	r3, r3
 800469a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800469e:	b29a      	uxth	r2, r3
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	801a      	strh	r2, [r3, #0]
 80046a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046a8:	2b3e      	cmp	r3, #62	; 0x3e
 80046aa:	d921      	bls.n	80046f0 <USB_EPStartXfer+0x276>
 80046ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046b0:	095b      	lsrs	r3, r3, #5
 80046b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046ba:	f003 031f 	and.w	r3, r3, #31
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d104      	bne.n	80046cc <USB_EPStartXfer+0x252>
 80046c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80046c6:	3b01      	subs	r3, #1
 80046c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	029b      	lsls	r3, r3, #10
 80046da:	b29b      	uxth	r3, r3
 80046dc:	4313      	orrs	r3, r2
 80046de:	b29b      	uxth	r3, r3
 80046e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	801a      	strh	r2, [r3, #0]
 80046ee:	e050      	b.n	8004792 <USB_EPStartXfer+0x318>
 80046f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10a      	bne.n	800470e <USB_EPStartXfer+0x294>
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004706:	b29a      	uxth	r2, r3
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	801a      	strh	r2, [r3, #0]
 800470c:	e041      	b.n	8004792 <USB_EPStartXfer+0x318>
 800470e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004712:	085b      	lsrs	r3, r3, #1
 8004714:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d004      	beq.n	800472e <USB_EPStartXfer+0x2b4>
 8004724:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004728:	3301      	adds	r3, #1
 800472a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	b29a      	uxth	r2, r3
 8004734:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004738:	b29b      	uxth	r3, r3
 800473a:	029b      	lsls	r3, r3, #10
 800473c:	b29b      	uxth	r3, r3
 800473e:	4313      	orrs	r3, r2
 8004740:	b29a      	uxth	r2, r3
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	801a      	strh	r2, [r3, #0]
 8004746:	e024      	b.n	8004792 <USB_EPStartXfer+0x318>
 8004748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800474c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	785b      	ldrb	r3, [r3, #1]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d11c      	bne.n	8004792 <USB_EPStartXfer+0x318>
 8004758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800475c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004766:	b29b      	uxth	r3, r3
 8004768:	461a      	mov	r2, r3
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	4413      	add	r3, r2
 800476e:	633b      	str	r3, [r7, #48]	; 0x30
 8004770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	00da      	lsls	r2, r3, #3
 800477e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004780:	4413      	add	r3, r2
 8004782:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800478c:	b29a      	uxth	r2, r3
 800478e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004790:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	895b      	ldrh	r3, [r3, #10]
 800479e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6959      	ldr	r1, [r3, #20]
 80047ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80047b8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80047bc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80047c0:	6800      	ldr	r0, [r0, #0]
 80047c2:	f001 fb39 	bl	8005e38 <USB_WritePMA>
            ep->xfer_buff += len;
 80047c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695a      	ldr	r2, [r3, #20]
 80047d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047d6:	441a      	add	r2, r3
 80047d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80047e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6a1a      	ldr	r2, [r3, #32]
 80047f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d90f      	bls.n	8004820 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6a1a      	ldr	r2, [r3, #32]
 800480c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004810:	1ad2      	subs	r2, r2, r3
 8004812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	621a      	str	r2, [r3, #32]
 800481e:	e00e      	b.n	800483e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2200      	movs	r2, #0
 800483c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800483e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	785b      	ldrb	r3, [r3, #1]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d177      	bne.n	800493e <USB_EPStartXfer+0x4c4>
 800484e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004852:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	61bb      	str	r3, [r7, #24]
 800485a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800485e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004868:	b29b      	uxth	r3, r3
 800486a:	461a      	mov	r2, r3
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	4413      	add	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
 8004872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	00da      	lsls	r2, r3, #3
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	4413      	add	r3, r2
 8004884:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	b29b      	uxth	r3, r3
 8004890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004894:	b29a      	uxth	r2, r3
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	801a      	strh	r2, [r3, #0]
 800489a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800489e:	2b3e      	cmp	r3, #62	; 0x3e
 80048a0:	d921      	bls.n	80048e6 <USB_EPStartXfer+0x46c>
 80048a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80048ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048b0:	f003 031f 	and.w	r3, r3, #31
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d104      	bne.n	80048c2 <USB_EPStartXfer+0x448>
 80048b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048bc:	3b01      	subs	r3, #1
 80048be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	029b      	lsls	r3, r3, #10
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	4313      	orrs	r3, r2
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048de:	b29a      	uxth	r2, r3
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	801a      	strh	r2, [r3, #0]
 80048e4:	e056      	b.n	8004994 <USB_EPStartXfer+0x51a>
 80048e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10a      	bne.n	8004904 <USB_EPStartXfer+0x48a>
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	801a      	strh	r2, [r3, #0]
 8004902:	e047      	b.n	8004994 <USB_EPStartXfer+0x51a>
 8004904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004908:	085b      	lsrs	r3, r3, #1
 800490a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800490e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d004      	beq.n	8004924 <USB_EPStartXfer+0x4aa>
 800491a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800491e:	3301      	adds	r3, #1
 8004920:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	881b      	ldrh	r3, [r3, #0]
 8004928:	b29a      	uxth	r2, r3
 800492a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800492e:	b29b      	uxth	r3, r3
 8004930:	029b      	lsls	r3, r3, #10
 8004932:	b29b      	uxth	r3, r3
 8004934:	4313      	orrs	r3, r2
 8004936:	b29a      	uxth	r2, r3
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	801a      	strh	r2, [r3, #0]
 800493c:	e02a      	b.n	8004994 <USB_EPStartXfer+0x51a>
 800493e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	785b      	ldrb	r3, [r3, #1]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d122      	bne.n	8004994 <USB_EPStartXfer+0x51a>
 800494e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004952:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	623b      	str	r3, [r7, #32]
 800495a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800495e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004968:	b29b      	uxth	r3, r3
 800496a:	461a      	mov	r2, r3
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	4413      	add	r3, r2
 8004970:	623b      	str	r3, [r7, #32]
 8004972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	00da      	lsls	r2, r3, #3
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	4413      	add	r3, r2
 8004984:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004988:	61fb      	str	r3, [r7, #28]
 800498a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800498e:	b29a      	uxth	r2, r3
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	891b      	ldrh	r3, [r3, #8]
 80049a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80049a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6959      	ldr	r1, [r3, #20]
 80049b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80049ba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80049be:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80049c2:	6800      	ldr	r0, [r0, #0]
 80049c4:	f001 fa38 	bl	8005e38 <USB_WritePMA>
 80049c8:	e3ee      	b.n	80051a8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80049ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	785b      	ldrb	r3, [r3, #1]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d177      	bne.n	8004aca <USB_EPStartXfer+0x650>
 80049da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80049e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	461a      	mov	r2, r3
 80049f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049fa:	4413      	add	r3, r2
 80049fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80049fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	00da      	lsls	r2, r3, #3
 8004a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a0e:	4413      	add	r3, r2
 8004a10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a14:	647b      	str	r3, [r7, #68]	; 0x44
 8004a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a24:	801a      	strh	r2, [r3, #0]
 8004a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a2a:	2b3e      	cmp	r3, #62	; 0x3e
 8004a2c:	d921      	bls.n	8004a72 <USB_EPStartXfer+0x5f8>
 8004a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a32:	095b      	lsrs	r3, r3, #5
 8004a34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a3c:	f003 031f 	and.w	r3, r3, #31
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d104      	bne.n	8004a4e <USB_EPStartXfer+0x5d4>
 8004a44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	029b      	lsls	r3, r3, #10
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a6e:	801a      	strh	r2, [r3, #0]
 8004a70:	e056      	b.n	8004b20 <USB_EPStartXfer+0x6a6>
 8004a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10a      	bne.n	8004a90 <USB_EPStartXfer+0x616>
 8004a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a7c:	881b      	ldrh	r3, [r3, #0]
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a8c:	801a      	strh	r2, [r3, #0]
 8004a8e:	e047      	b.n	8004b20 <USB_EPStartXfer+0x6a6>
 8004a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a94:	085b      	lsrs	r3, r3, #1
 8004a96:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d004      	beq.n	8004ab0 <USB_EPStartXfer+0x636>
 8004aa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004aaa:	3301      	adds	r3, #1
 8004aac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	029b      	lsls	r3, r3, #10
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ac6:	801a      	strh	r2, [r3, #0]
 8004ac8:	e02a      	b.n	8004b20 <USB_EPStartXfer+0x6a6>
 8004aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	785b      	ldrb	r3, [r3, #1]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d122      	bne.n	8004b20 <USB_EPStartXfer+0x6a6>
 8004ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ade:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	653b      	str	r3, [r7, #80]	; 0x50
 8004ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	461a      	mov	r2, r3
 8004af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004afa:	4413      	add	r3, r2
 8004afc:	653b      	str	r3, [r7, #80]	; 0x50
 8004afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	00da      	lsls	r2, r3, #3
 8004b0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b0e:	4413      	add	r3, r2
 8004b10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b1e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	891b      	ldrh	r3, [r3, #8]
 8004b2c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6959      	ldr	r1, [r3, #20]
 8004b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004b46:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004b4a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004b4e:	6800      	ldr	r0, [r0, #0]
 8004b50:	f001 f972 	bl	8005e38 <USB_WritePMA>
            ep->xfer_buff += len;
 8004b54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695a      	ldr	r2, [r3, #20]
 8004b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b64:	441a      	add	r2, r3
 8004b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6a1a      	ldr	r2, [r3, #32]
 8004b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d90f      	bls.n	8004bae <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6a1a      	ldr	r2, [r3, #32]
 8004b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b9e:	1ad2      	subs	r2, r2, r3
 8004ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	621a      	str	r2, [r3, #32]
 8004bac:	e00e      	b.n	8004bcc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8004bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	643b      	str	r3, [r7, #64]	; 0x40
 8004bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	785b      	ldrb	r3, [r3, #1]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d177      	bne.n	8004cd8 <USB_EPStartXfer+0x85e>
 8004be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c08:	4413      	add	r3, r2
 8004c0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	00da      	lsls	r2, r3, #3
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c22:	637b      	str	r3, [r7, #52]	; 0x34
 8004c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c32:	801a      	strh	r2, [r3, #0]
 8004c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c38:	2b3e      	cmp	r3, #62	; 0x3e
 8004c3a:	d921      	bls.n	8004c80 <USB_EPStartXfer+0x806>
 8004c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c4a:	f003 031f 	and.w	r3, r3, #31
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d104      	bne.n	8004c5c <USB_EPStartXfer+0x7e2>
 8004c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c56:	3b01      	subs	r3, #1
 8004c58:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	029b      	lsls	r3, r3, #10
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7c:	801a      	strh	r2, [r3, #0]
 8004c7e:	e050      	b.n	8004d22 <USB_EPStartXfer+0x8a8>
 8004c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10a      	bne.n	8004c9e <USB_EPStartXfer+0x824>
 8004c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c9a:	801a      	strh	r2, [r3, #0]
 8004c9c:	e041      	b.n	8004d22 <USB_EPStartXfer+0x8a8>
 8004c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ca2:	085b      	lsrs	r3, r3, #1
 8004ca4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d004      	beq.n	8004cbe <USB_EPStartXfer+0x844>
 8004cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb8:	3301      	adds	r3, #1
 8004cba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	029b      	lsls	r3, r3, #10
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd4:	801a      	strh	r2, [r3, #0]
 8004cd6:	e024      	b.n	8004d22 <USB_EPStartXfer+0x8a8>
 8004cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	785b      	ldrb	r3, [r3, #1]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d11c      	bne.n	8004d22 <USB_EPStartXfer+0x8a8>
 8004ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cfc:	4413      	add	r3, r2
 8004cfe:	643b      	str	r3, [r7, #64]	; 0x40
 8004d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	00da      	lsls	r2, r3, #3
 8004d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d10:	4413      	add	r3, r2
 8004d12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	895b      	ldrh	r3, [r3, #10]
 8004d2e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6959      	ldr	r1, [r3, #20]
 8004d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004d48:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004d4c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004d50:	6800      	ldr	r0, [r0, #0]
 8004d52:	f001 f871 	bl	8005e38 <USB_WritePMA>
 8004d56:	e227      	b.n	80051a8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	441a      	add	r2, r3
 8004dac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004db0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004db4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	461a      	mov	r2, r3
 8004de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004de4:	4413      	add	r3, r2
 8004de6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	00da      	lsls	r2, r3, #3
 8004df6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004df8:	4413      	add	r3, r2
 8004dfa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004dfe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e08:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	891b      	ldrh	r3, [r3, #8]
 8004e16:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6959      	ldr	r1, [r3, #20]
 8004e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004e30:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004e34:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004e38:	6800      	ldr	r0, [r0, #0]
 8004e3a:	f000 fffd 	bl	8005e38 <USB_WritePMA>
 8004e3e:	e1b3      	b.n	80051a8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6a1a      	ldr	r2, [r3, #32]
 8004e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e50:	1ad2      	subs	r2, r2, r3
 8004e52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 80c6 	beq.w	8005012 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	673b      	str	r3, [r7, #112]	; 0x70
 8004e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	785b      	ldrb	r3, [r3, #1]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d177      	bne.n	8004f92 <USB_EPStartXfer+0xb18>
 8004ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ea6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ec2:	4413      	add	r3, r2
 8004ec4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	00da      	lsls	r2, r3, #3
 8004ed4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004edc:	667b      	str	r3, [r7, #100]	; 0x64
 8004ede:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eec:	801a      	strh	r2, [r3, #0]
 8004eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ef2:	2b3e      	cmp	r3, #62	; 0x3e
 8004ef4:	d921      	bls.n	8004f3a <USB_EPStartXfer+0xac0>
 8004ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004efa:	095b      	lsrs	r3, r3, #5
 8004efc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f04:	f003 031f 	and.w	r3, r3, #31
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d104      	bne.n	8004f16 <USB_EPStartXfer+0xa9c>
 8004f0c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004f10:	3b01      	subs	r3, #1
 8004f12:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004f16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	029b      	lsls	r3, r3, #10
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	4313      	orrs	r3, r2
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f36:	801a      	strh	r2, [r3, #0]
 8004f38:	e050      	b.n	8004fdc <USB_EPStartXfer+0xb62>
 8004f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10a      	bne.n	8004f58 <USB_EPStartXfer+0xade>
 8004f42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f54:	801a      	strh	r2, [r3, #0]
 8004f56:	e041      	b.n	8004fdc <USB_EPStartXfer+0xb62>
 8004f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f5c:	085b      	lsrs	r3, r3, #1
 8004f5e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d004      	beq.n	8004f78 <USB_EPStartXfer+0xafe>
 8004f6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004f72:	3301      	adds	r3, #1
 8004f74:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004f78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	029b      	lsls	r3, r3, #10
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f8e:	801a      	strh	r2, [r3, #0]
 8004f90:	e024      	b.n	8004fdc <USB_EPStartXfer+0xb62>
 8004f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	785b      	ldrb	r3, [r3, #1]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d11c      	bne.n	8004fdc <USB_EPStartXfer+0xb62>
 8004fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fb6:	4413      	add	r3, r2
 8004fb8:	673b      	str	r3, [r7, #112]	; 0x70
 8004fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	00da      	lsls	r2, r3, #3
 8004fc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fca:	4413      	add	r3, r2
 8004fcc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004fd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fda:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	895b      	ldrh	r3, [r3, #10]
 8004fe8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6959      	ldr	r1, [r3, #20]
 8004ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005002:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005006:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800500a:	6800      	ldr	r0, [r0, #0]
 800500c:	f000 ff14 	bl	8005e38 <USB_WritePMA>
 8005010:	e0ca      	b.n	80051a8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	785b      	ldrb	r3, [r3, #1]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d177      	bne.n	8005112 <USB_EPStartXfer+0xc98>
 8005022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005026:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800502e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005032:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800503c:	b29b      	uxth	r3, r3
 800503e:	461a      	mov	r2, r3
 8005040:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005042:	4413      	add	r3, r2
 8005044:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800504a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	00da      	lsls	r2, r3, #3
 8005054:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005056:	4413      	add	r3, r2
 8005058:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800505c:	67bb      	str	r3, [r7, #120]	; 0x78
 800505e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	b29b      	uxth	r3, r3
 8005064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005068:	b29a      	uxth	r2, r3
 800506a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800506c:	801a      	strh	r2, [r3, #0]
 800506e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005072:	2b3e      	cmp	r3, #62	; 0x3e
 8005074:	d921      	bls.n	80050ba <USB_EPStartXfer+0xc40>
 8005076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005084:	f003 031f 	and.w	r3, r3, #31
 8005088:	2b00      	cmp	r3, #0
 800508a:	d104      	bne.n	8005096 <USB_EPStartXfer+0xc1c>
 800508c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005090:	3b01      	subs	r3, #1
 8005092:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005096:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	b29a      	uxth	r2, r3
 800509c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	029b      	lsls	r3, r3, #10
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	4313      	orrs	r3, r2
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050b6:	801a      	strh	r2, [r3, #0]
 80050b8:	e05c      	b.n	8005174 <USB_EPStartXfer+0xcfa>
 80050ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10a      	bne.n	80050d8 <USB_EPStartXfer+0xc5e>
 80050c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050c4:	881b      	ldrh	r3, [r3, #0]
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050d4:	801a      	strh	r2, [r3, #0]
 80050d6:	e04d      	b.n	8005174 <USB_EPStartXfer+0xcfa>
 80050d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050dc:	085b      	lsrs	r3, r3, #1
 80050de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80050e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d004      	beq.n	80050f8 <USB_EPStartXfer+0xc7e>
 80050ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80050f2:	3301      	adds	r3, #1
 80050f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80050f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005102:	b29b      	uxth	r3, r3
 8005104:	029b      	lsls	r3, r3, #10
 8005106:	b29b      	uxth	r3, r3
 8005108:	4313      	orrs	r3, r2
 800510a:	b29a      	uxth	r2, r3
 800510c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800510e:	801a      	strh	r2, [r3, #0]
 8005110:	e030      	b.n	8005174 <USB_EPStartXfer+0xcfa>
 8005112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	785b      	ldrb	r3, [r3, #1]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d128      	bne.n	8005174 <USB_EPStartXfer+0xcfa>
 8005122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005126:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005134:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800513e:	b29b      	uxth	r3, r3
 8005140:	461a      	mov	r2, r3
 8005142:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005146:	4413      	add	r3, r2
 8005148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800514c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	00da      	lsls	r2, r3, #3
 800515a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800515e:	4413      	add	r3, r2
 8005160:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005164:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800516c:	b29a      	uxth	r2, r3
 800516e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005172:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	891b      	ldrh	r3, [r3, #8]
 8005180:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6959      	ldr	r1, [r3, #20]
 8005190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005194:	b29b      	uxth	r3, r3
 8005196:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800519a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800519e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80051a2:	6800      	ldr	r0, [r0, #0]
 80051a4:	f000 fe48 	bl	8005e38 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80051a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ce:	817b      	strh	r3, [r7, #10]
 80051d0:	897b      	ldrh	r3, [r7, #10]
 80051d2:	f083 0310 	eor.w	r3, r3, #16
 80051d6:	817b      	strh	r3, [r7, #10]
 80051d8:	897b      	ldrh	r3, [r7, #10]
 80051da:	f083 0320 	eor.w	r3, r3, #32
 80051de:	817b      	strh	r3, [r7, #10]
 80051e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	441a      	add	r2, r3
 80051fa:	897b      	ldrh	r3, [r7, #10]
 80051fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800520c:	b29b      	uxth	r3, r3
 800520e:	8013      	strh	r3, [r2, #0]
 8005210:	f000 bcde 	b.w	8005bd0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	7b1b      	ldrb	r3, [r3, #12]
 8005220:	2b00      	cmp	r3, #0
 8005222:	f040 80bb 	bne.w	800539c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800522a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699a      	ldr	r2, [r3, #24]
 8005232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	429a      	cmp	r2, r3
 8005240:	d917      	bls.n	8005272 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699a      	ldr	r2, [r3, #24]
 800525e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005262:	1ad2      	subs	r2, r2, r3
 8005264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	619a      	str	r2, [r3, #24]
 8005270:	e00e      	b.n	8005290 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2200      	movs	r2, #0
 800528e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005294:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800529e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	461a      	mov	r2, r3
 80052b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052b4:	4413      	add	r3, r2
 80052b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	00da      	lsls	r2, r3, #3
 80052c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052cc:	4413      	add	r3, r2
 80052ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80052d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052da:	881b      	ldrh	r3, [r3, #0]
 80052dc:	b29b      	uxth	r3, r3
 80052de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052e8:	801a      	strh	r2, [r3, #0]
 80052ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ee:	2b3e      	cmp	r3, #62	; 0x3e
 80052f0:	d924      	bls.n	800533c <USB_EPStartXfer+0xec2>
 80052f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005300:	f003 031f 	and.w	r3, r3, #31
 8005304:	2b00      	cmp	r3, #0
 8005306:	d104      	bne.n	8005312 <USB_EPStartXfer+0xe98>
 8005308:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800530c:	3b01      	subs	r3, #1
 800530e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005312:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005316:	881b      	ldrh	r3, [r3, #0]
 8005318:	b29a      	uxth	r2, r3
 800531a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800531e:	b29b      	uxth	r3, r3
 8005320:	029b      	lsls	r3, r3, #10
 8005322:	b29b      	uxth	r3, r3
 8005324:	4313      	orrs	r3, r2
 8005326:	b29b      	uxth	r3, r3
 8005328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800532c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005330:	b29a      	uxth	r2, r3
 8005332:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005336:	801a      	strh	r2, [r3, #0]
 8005338:	f000 bc10 	b.w	8005b5c <USB_EPStartXfer+0x16e2>
 800533c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10c      	bne.n	800535e <USB_EPStartXfer+0xee4>
 8005344:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	b29b      	uxth	r3, r3
 800534c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005354:	b29a      	uxth	r2, r3
 8005356:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800535a:	801a      	strh	r2, [r3, #0]
 800535c:	e3fe      	b.n	8005b5c <USB_EPStartXfer+0x16e2>
 800535e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005362:	085b      	lsrs	r3, r3, #1
 8005364:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b00      	cmp	r3, #0
 8005372:	d004      	beq.n	800537e <USB_EPStartXfer+0xf04>
 8005374:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005378:	3301      	adds	r3, #1
 800537a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800537e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	b29a      	uxth	r2, r3
 8005386:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800538a:	b29b      	uxth	r3, r3
 800538c:	029b      	lsls	r3, r3, #10
 800538e:	b29b      	uxth	r3, r3
 8005390:	4313      	orrs	r3, r2
 8005392:	b29a      	uxth	r2, r3
 8005394:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005398:	801a      	strh	r2, [r3, #0]
 800539a:	e3df      	b.n	8005b5c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800539c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	78db      	ldrb	r3, [r3, #3]
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	f040 8218 	bne.w	80057de <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80053ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	785b      	ldrb	r3, [r3, #1]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f040 809d 	bne.w	80054fa <USB_EPStartXfer+0x1080>
 80053c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053dc:	b29b      	uxth	r3, r3
 80053de:	461a      	mov	r2, r3
 80053e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053e4:	4413      	add	r3, r2
 80053e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	00da      	lsls	r2, r3, #3
 80053f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053fc:	4413      	add	r3, r2
 80053fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005402:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005406:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800540a:	881b      	ldrh	r3, [r3, #0]
 800540c:	b29b      	uxth	r3, r3
 800540e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005412:	b29a      	uxth	r2, r3
 8005414:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005418:	801a      	strh	r2, [r3, #0]
 800541a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800541e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	2b3e      	cmp	r3, #62	; 0x3e
 8005428:	d92b      	bls.n	8005482 <USB_EPStartXfer+0x1008>
 800542a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800542e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	095b      	lsrs	r3, r3, #5
 8005438:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800543c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	f003 031f 	and.w	r3, r3, #31
 800544c:	2b00      	cmp	r3, #0
 800544e:	d104      	bne.n	800545a <USB_EPStartXfer+0xfe0>
 8005450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005454:	3b01      	subs	r3, #1
 8005456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800545a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800545e:	881b      	ldrh	r3, [r3, #0]
 8005460:	b29a      	uxth	r2, r3
 8005462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005466:	b29b      	uxth	r3, r3
 8005468:	029b      	lsls	r3, r3, #10
 800546a:	b29b      	uxth	r3, r3
 800546c:	4313      	orrs	r3, r2
 800546e:	b29b      	uxth	r3, r3
 8005470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005478:	b29a      	uxth	r2, r3
 800547a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800547e:	801a      	strh	r2, [r3, #0]
 8005480:	e070      	b.n	8005564 <USB_EPStartXfer+0x10ea>
 8005482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10c      	bne.n	80054ac <USB_EPStartXfer+0x1032>
 8005492:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	b29b      	uxth	r3, r3
 800549a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800549e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80054a8:	801a      	strh	r2, [r3, #0]
 80054aa:	e05b      	b.n	8005564 <USB_EPStartXfer+0x10ea>
 80054ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	085b      	lsrs	r3, r3, #1
 80054ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80054be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d004      	beq.n	80054dc <USB_EPStartXfer+0x1062>
 80054d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d6:	3301      	adds	r3, #1
 80054d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80054dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	029b      	lsls	r3, r3, #10
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	4313      	orrs	r3, r2
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80054f6:	801a      	strh	r2, [r3, #0]
 80054f8:	e034      	b.n	8005564 <USB_EPStartXfer+0x10ea>
 80054fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	785b      	ldrb	r3, [r3, #1]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d12c      	bne.n	8005564 <USB_EPStartXfer+0x10ea>
 800550a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800550e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800551c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005526:	b29b      	uxth	r3, r3
 8005528:	461a      	mov	r2, r3
 800552a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800552e:	4413      	add	r3, r2
 8005530:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	00da      	lsls	r2, r3, #3
 8005542:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005546:	4413      	add	r3, r2
 8005548:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800554c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	b29a      	uxth	r2, r3
 800555e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005562:	801a      	strh	r2, [r3, #0]
 8005564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005568:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	785b      	ldrb	r3, [r3, #1]
 800557e:	2b00      	cmp	r3, #0
 8005580:	f040 809d 	bne.w	80056be <USB_EPStartXfer+0x1244>
 8005584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005588:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005596:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	461a      	mov	r2, r3
 80055a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055a8:	4413      	add	r3, r2
 80055aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	00da      	lsls	r2, r3, #3
 80055bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055c0:	4413      	add	r3, r2
 80055c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055dc:	801a      	strh	r2, [r3, #0]
 80055de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	2b3e      	cmp	r3, #62	; 0x3e
 80055ec:	d92b      	bls.n	8005646 <USB_EPStartXfer+0x11cc>
 80055ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	f003 031f 	and.w	r3, r3, #31
 8005610:	2b00      	cmp	r3, #0
 8005612:	d104      	bne.n	800561e <USB_EPStartXfer+0x11a4>
 8005614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005618:	3b01      	subs	r3, #1
 800561a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800561e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	b29a      	uxth	r2, r3
 8005626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800562a:	b29b      	uxth	r3, r3
 800562c:	029b      	lsls	r3, r3, #10
 800562e:	b29b      	uxth	r3, r3
 8005630:	4313      	orrs	r3, r2
 8005632:	b29b      	uxth	r3, r3
 8005634:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005638:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800563c:	b29a      	uxth	r2, r3
 800563e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005642:	801a      	strh	r2, [r3, #0]
 8005644:	e069      	b.n	800571a <USB_EPStartXfer+0x12a0>
 8005646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800564a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10c      	bne.n	8005670 <USB_EPStartXfer+0x11f6>
 8005656:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	b29b      	uxth	r3, r3
 800565e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005666:	b29a      	uxth	r2, r3
 8005668:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800566c:	801a      	strh	r2, [r3, #0]
 800566e:	e054      	b.n	800571a <USB_EPStartXfer+0x12a0>
 8005670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	085b      	lsrs	r3, r3, #1
 800567e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d004      	beq.n	80056a0 <USB_EPStartXfer+0x1226>
 8005696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800569a:	3301      	adds	r3, #1
 800569c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	029b      	lsls	r3, r3, #10
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	4313      	orrs	r3, r2
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056ba:	801a      	strh	r2, [r3, #0]
 80056bc:	e02d      	b.n	800571a <USB_EPStartXfer+0x12a0>
 80056be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	785b      	ldrb	r3, [r3, #1]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d125      	bne.n	800571a <USB_EPStartXfer+0x12a0>
 80056ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056dc:	b29b      	uxth	r3, r3
 80056de:	461a      	mov	r2, r3
 80056e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80056e4:	4413      	add	r3, r2
 80056e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80056ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	00da      	lsls	r2, r3, #3
 80056f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80056fc:	4413      	add	r3, r2
 80056fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005702:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800570a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	b29a      	uxth	r2, r3
 8005714:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005718:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800571a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800571e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 8218 	beq.w	8005b5c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800572c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005730:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800573a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	881b      	ldrh	r3, [r3, #0]
 8005748:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800574c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d005      	beq.n	8005764 <USB_EPStartXfer+0x12ea>
 8005758:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800575c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10d      	bne.n	8005780 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005764:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800576c:	2b00      	cmp	r3, #0
 800576e:	f040 81f5 	bne.w	8005b5c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005772:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577a:	2b00      	cmp	r3, #0
 800577c:	f040 81ee 	bne.w	8005b5c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005784:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800578e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	b29b      	uxth	r3, r3
 800579e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80057aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	441a      	add	r2, r3
 80057c4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80057c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057d8:	b29b      	uxth	r3, r3
 80057da:	8013      	strh	r3, [r2, #0]
 80057dc:	e1be      	b.n	8005b5c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80057de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	78db      	ldrb	r3, [r3, #3]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	f040 81b4 	bne.w	8005b58 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80057f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	699a      	ldr	r2, [r3, #24]
 80057fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	429a      	cmp	r2, r3
 800580a:	d917      	bls.n	800583c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800580c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800581c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	699a      	ldr	r2, [r3, #24]
 8005828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800582c:	1ad2      	subs	r2, r2, r3
 800582e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	619a      	str	r2, [r3, #24]
 800583a:	e00e      	b.n	800585a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800583c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800584c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2200      	movs	r2, #0
 8005858:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800585a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800585e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	785b      	ldrb	r3, [r3, #1]
 8005866:	2b00      	cmp	r3, #0
 8005868:	f040 8085 	bne.w	8005976 <USB_EPStartXfer+0x14fc>
 800586c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005870:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800587a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800587e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005888:	b29b      	uxth	r3, r3
 800588a:	461a      	mov	r2, r3
 800588c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005890:	4413      	add	r3, r2
 8005892:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800589a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	00da      	lsls	r2, r3, #3
 80058a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058a8:	4413      	add	r3, r2
 80058aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80058ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058be:	b29a      	uxth	r2, r3
 80058c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058c4:	801a      	strh	r2, [r3, #0]
 80058c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ca:	2b3e      	cmp	r3, #62	; 0x3e
 80058cc:	d923      	bls.n	8005916 <USB_EPStartXfer+0x149c>
 80058ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058d2:	095b      	lsrs	r3, r3, #5
 80058d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80058d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058dc:	f003 031f 	and.w	r3, r3, #31
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d104      	bne.n	80058ee <USB_EPStartXfer+0x1474>
 80058e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058e8:	3b01      	subs	r3, #1
 80058ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80058ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	029b      	lsls	r3, r3, #10
 80058fe:	b29b      	uxth	r3, r3
 8005900:	4313      	orrs	r3, r2
 8005902:	b29b      	uxth	r3, r3
 8005904:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005908:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800590c:	b29a      	uxth	r2, r3
 800590e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005912:	801a      	strh	r2, [r3, #0]
 8005914:	e060      	b.n	80059d8 <USB_EPStartXfer+0x155e>
 8005916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10c      	bne.n	8005938 <USB_EPStartXfer+0x14be>
 800591e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	b29b      	uxth	r3, r3
 8005926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800592a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800592e:	b29a      	uxth	r2, r3
 8005930:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005934:	801a      	strh	r2, [r3, #0]
 8005936:	e04f      	b.n	80059d8 <USB_EPStartXfer+0x155e>
 8005938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800593c:	085b      	lsrs	r3, r3, #1
 800593e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d004      	beq.n	8005958 <USB_EPStartXfer+0x14de>
 800594e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005952:	3301      	adds	r3, #1
 8005954:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005958:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	b29a      	uxth	r2, r3
 8005960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005964:	b29b      	uxth	r3, r3
 8005966:	029b      	lsls	r3, r3, #10
 8005968:	b29b      	uxth	r3, r3
 800596a:	4313      	orrs	r3, r2
 800596c:	b29a      	uxth	r2, r3
 800596e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005972:	801a      	strh	r2, [r3, #0]
 8005974:	e030      	b.n	80059d8 <USB_EPStartXfer+0x155e>
 8005976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800597a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	785b      	ldrb	r3, [r3, #1]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d128      	bne.n	80059d8 <USB_EPStartXfer+0x155e>
 8005986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800598a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005998:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	461a      	mov	r2, r3
 80059a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059aa:	4413      	add	r3, r2
 80059ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80059b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	00da      	lsls	r2, r3, #3
 80059be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059c2:	4413      	add	r3, r2
 80059c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80059d6:	801a      	strh	r2, [r3, #0]
 80059d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	785b      	ldrb	r3, [r3, #1]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f040 8085 	bne.w	8005b02 <USB_EPStartXfer+0x1688>
 80059f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	461a      	mov	r2, r3
 8005a18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	00da      	lsls	r2, r3, #3
 8005a30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a34:	4413      	add	r3, r2
 8005a36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a50:	801a      	strh	r2, [r3, #0]
 8005a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a56:	2b3e      	cmp	r3, #62	; 0x3e
 8005a58:	d923      	bls.n	8005aa2 <USB_EPStartXfer+0x1628>
 8005a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a68:	f003 031f 	and.w	r3, r3, #31
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d104      	bne.n	8005a7a <USB_EPStartXfer+0x1600>
 8005a70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a74:	3b01      	subs	r3, #1
 8005a76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	029b      	lsls	r3, r3, #10
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a9e:	801a      	strh	r2, [r3, #0]
 8005aa0:	e05c      	b.n	8005b5c <USB_EPStartXfer+0x16e2>
 8005aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10c      	bne.n	8005ac4 <USB_EPStartXfer+0x164a>
 8005aaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ac0:	801a      	strh	r2, [r3, #0]
 8005ac2:	e04b      	b.n	8005b5c <USB_EPStartXfer+0x16e2>
 8005ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ac8:	085b      	lsrs	r3, r3, #1
 8005aca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d004      	beq.n	8005ae4 <USB_EPStartXfer+0x166a>
 8005ada:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ade:	3301      	adds	r3, #1
 8005ae0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ae4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	029b      	lsls	r3, r3, #10
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	4313      	orrs	r3, r2
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005afe:	801a      	strh	r2, [r3, #0]
 8005b00:	e02c      	b.n	8005b5c <USB_EPStartXfer+0x16e2>
 8005b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	785b      	ldrb	r3, [r3, #1]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d124      	bne.n	8005b5c <USB_EPStartXfer+0x16e2>
 8005b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	461a      	mov	r2, r3
 8005b24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b28:	4413      	add	r3, r2
 8005b2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	00da      	lsls	r2, r3, #3
 8005b3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b40:	4413      	add	r3, r2
 8005b42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b54:	801a      	strh	r2, [r3, #0]
 8005b56:	e001      	b.n	8005b5c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e03a      	b.n	8005bd2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b82:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005b86:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005b8a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b8e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005b92:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005b96:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b9a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	441a      	add	r2, r3
 8005bb8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005bbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	785b      	ldrb	r3, [r3, #1]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d020      	beq.n	8005c30 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c04:	81bb      	strh	r3, [r7, #12]
 8005c06:	89bb      	ldrh	r3, [r7, #12]
 8005c08:	f083 0310 	eor.w	r3, r3, #16
 8005c0c:	81bb      	strh	r3, [r7, #12]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	441a      	add	r2, r3
 8005c18:	89bb      	ldrh	r3, [r7, #12]
 8005c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	8013      	strh	r3, [r2, #0]
 8005c2e:	e01f      	b.n	8005c70 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c46:	81fb      	strh	r3, [r7, #14]
 8005c48:	89fb      	ldrh	r3, [r7, #14]
 8005c4a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c4e:	81fb      	strh	r3, [r7, #14]
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	441a      	add	r2, r3
 8005c5a:	89fb      	ldrh	r3, [r7, #14]
 8005c5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b087      	sub	sp, #28
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
 8005c86:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	7b1b      	ldrb	r3, [r3, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f040 809d 	bne.w	8005dcc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	785b      	ldrb	r3, [r3, #1]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d04c      	beq.n	8005d34 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	823b      	strh	r3, [r7, #16]
 8005ca8:	8a3b      	ldrh	r3, [r7, #16]
 8005caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d01b      	beq.n	8005cea <USB_EPClearStall+0x6c>
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc8:	81fb      	strh	r3, [r7, #14]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	441a      	add	r2, r3
 8005cd4:	89fb      	ldrh	r3, [r7, #14]
 8005cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ce2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	78db      	ldrb	r3, [r3, #3]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d06c      	beq.n	8005dcc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d08:	81bb      	strh	r3, [r7, #12]
 8005d0a:	89bb      	ldrh	r3, [r7, #12]
 8005d0c:	f083 0320 	eor.w	r3, r3, #32
 8005d10:	81bb      	strh	r3, [r7, #12]
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	441a      	add	r2, r3
 8005d1c:	89bb      	ldrh	r3, [r7, #12]
 8005d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	8013      	strh	r3, [r2, #0]
 8005d32:	e04b      	b.n	8005dcc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	82fb      	strh	r3, [r7, #22]
 8005d42:	8afb      	ldrh	r3, [r7, #22]
 8005d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d01b      	beq.n	8005d84 <USB_EPClearStall+0x106>
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d62:	82bb      	strh	r3, [r7, #20]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	441a      	add	r2, r3
 8005d6e:	8abb      	ldrh	r3, [r7, #20]
 8005d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9a:	827b      	strh	r3, [r7, #18]
 8005d9c:	8a7b      	ldrh	r3, [r7, #18]
 8005d9e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005da2:	827b      	strh	r3, [r7, #18]
 8005da4:	8a7b      	ldrh	r3, [r7, #18]
 8005da6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005daa:	827b      	strh	r3, [r7, #18]
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	441a      	add	r2, r3
 8005db6:	8a7b      	ldrh	r3, [r7, #18]
 8005db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	371c      	adds	r7, #28
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b083      	sub	sp, #12
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	460b      	mov	r3, r1
 8005de4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005de6:	78fb      	ldrb	r3, [r7, #3]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d103      	bne.n	8005df4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2280      	movs	r2, #128	; 0x80
 8005df0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b08b      	sub	sp, #44	; 0x2c
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	4611      	mov	r1, r2
 8005e44:	461a      	mov	r2, r3
 8005e46:	460b      	mov	r3, r1
 8005e48:	80fb      	strh	r3, [r7, #6]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005e4e:	88bb      	ldrh	r3, [r7, #4]
 8005e50:	3301      	adds	r3, #1
 8005e52:	085b      	lsrs	r3, r3, #1
 8005e54:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005e5e:	88fa      	ldrh	r2, [r7, #6]
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e68:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e6e:	e01b      	b.n	8005ea8 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	021b      	lsls	r3, r3, #8
 8005e7e:	b21a      	sxth	r2, r3
 8005e80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	b21b      	sxth	r3, r3
 8005e88:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	8a7a      	ldrh	r2, [r7, #18]
 8005e8e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	3302      	adds	r3, #2
 8005e94:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1e0      	bne.n	8005e70 <USB_WritePMA+0x38>
  }
}
 8005eae:	bf00      	nop
 8005eb0:	bf00      	nop
 8005eb2:	372c      	adds	r7, #44	; 0x2c
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b08b      	sub	sp, #44	; 0x2c
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	4611      	mov	r1, r2
 8005ec8:	461a      	mov	r2, r3
 8005eca:	460b      	mov	r3, r1
 8005ecc:	80fb      	strh	r3, [r7, #6]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005ed2:	88bb      	ldrh	r3, [r7, #4]
 8005ed4:	085b      	lsrs	r3, r3, #1
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ee2:	88fa      	ldrh	r2, [r7, #6]
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eec:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ef2:	e018      	b.n	8005f26 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	3302      	adds	r3, #2
 8005f00:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	0a1b      	lsrs	r3, r3, #8
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	3b01      	subs	r3, #1
 8005f24:	627b      	str	r3, [r7, #36]	; 0x24
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1e3      	bne.n	8005ef4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005f2c:	88bb      	ldrh	r3, [r7, #4]
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d007      	beq.n	8005f48 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	701a      	strb	r2, [r3, #0]
  }
}
 8005f48:	bf00      	nop
 8005f4a:	372c      	adds	r7, #44	; 0x2c
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	7c1b      	ldrb	r3, [r3, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d115      	bne.n	8005f98 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f70:	2202      	movs	r2, #2
 8005f72:	2181      	movs	r1, #129	; 0x81
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f001 fe92 	bl	8007c9e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f84:	2202      	movs	r2, #2
 8005f86:	2101      	movs	r1, #1
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f001 fe88 	bl	8007c9e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005f96:	e012      	b.n	8005fbe <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f98:	2340      	movs	r3, #64	; 0x40
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	2181      	movs	r1, #129	; 0x81
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f001 fe7d 	bl	8007c9e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005faa:	2340      	movs	r3, #64	; 0x40
 8005fac:	2202      	movs	r2, #2
 8005fae:	2101      	movs	r1, #1
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f001 fe74 	bl	8007c9e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005fbe:	2308      	movs	r3, #8
 8005fc0:	2203      	movs	r2, #3
 8005fc2:	2182      	movs	r1, #130	; 0x82
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f001 fe6a 	bl	8007c9e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005fd0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005fd4:	f001 ff8c 	bl	8007ef0 <USBD_static_malloc>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d102      	bne.n	8005ff0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005fea:	2301      	movs	r3, #1
 8005fec:	73fb      	strb	r3, [r7, #15]
 8005fee:	e026      	b.n	800603e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2200      	movs	r2, #0
 8006006:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2200      	movs	r2, #0
 800600e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	7c1b      	ldrb	r3, [r3, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d109      	bne.n	800602e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006024:	2101      	movs	r1, #1
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f001 ff2b 	bl	8007e82 <USBD_LL_PrepareReceive>
 800602c:	e007      	b.n	800603e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006034:	2340      	movs	r3, #64	; 0x40
 8006036:	2101      	movs	r1, #1
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f001 ff22 	bl	8007e82 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800603e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006040:	4618      	mov	r0, r3
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	460b      	mov	r3, r1
 8006052:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006058:	2181      	movs	r1, #129	; 0x81
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f001 fe45 	bl	8007cea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006066:	2101      	movs	r1, #1
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f001 fe3e 	bl	8007cea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006076:	2182      	movs	r1, #130	; 0x82
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f001 fe36 	bl	8007cea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00e      	beq.n	80060ac <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800609e:	4618      	mov	r0, r3
 80060a0:	f001 ff34 	bl	8007f0c <USBD_static_free>
    pdev->pClassData = NULL;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b086      	sub	sp, #24
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060c6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80060c8:	2300      	movs	r3, #0
 80060ca:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80060d0:	2300      	movs	r3, #0
 80060d2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d039      	beq.n	8006154 <USBD_CDC_Setup+0x9e>
 80060e0:	2b20      	cmp	r3, #32
 80060e2:	d17f      	bne.n	80061e4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	88db      	ldrh	r3, [r3, #6]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d029      	beq.n	8006140 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	b25b      	sxtb	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	da11      	bge.n	800611a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006102:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	88d2      	ldrh	r2, [r2, #6]
 8006108:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800610a:	6939      	ldr	r1, [r7, #16]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	88db      	ldrh	r3, [r3, #6]
 8006110:	461a      	mov	r2, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f001 fa13 	bl	800753e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006118:	e06b      	b.n	80061f2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	785a      	ldrb	r2, [r3, #1]
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	88db      	ldrh	r3, [r3, #6]
 8006128:	b2da      	uxtb	r2, r3
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006130:	6939      	ldr	r1, [r7, #16]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	88db      	ldrh	r3, [r3, #6]
 8006136:	461a      	mov	r2, r3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f001 fa2e 	bl	800759a <USBD_CtlPrepareRx>
      break;
 800613e:	e058      	b.n	80061f2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	7850      	ldrb	r0, [r2, #1]
 800614c:	2200      	movs	r2, #0
 800614e:	6839      	ldr	r1, [r7, #0]
 8006150:	4798      	blx	r3
      break;
 8006152:	e04e      	b.n	80061f2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	785b      	ldrb	r3, [r3, #1]
 8006158:	2b0b      	cmp	r3, #11
 800615a:	d02e      	beq.n	80061ba <USBD_CDC_Setup+0x104>
 800615c:	2b0b      	cmp	r3, #11
 800615e:	dc38      	bgt.n	80061d2 <USBD_CDC_Setup+0x11c>
 8006160:	2b00      	cmp	r3, #0
 8006162:	d002      	beq.n	800616a <USBD_CDC_Setup+0xb4>
 8006164:	2b0a      	cmp	r3, #10
 8006166:	d014      	beq.n	8006192 <USBD_CDC_Setup+0xdc>
 8006168:	e033      	b.n	80061d2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006170:	2b03      	cmp	r3, #3
 8006172:	d107      	bne.n	8006184 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006174:	f107 030c 	add.w	r3, r7, #12
 8006178:	2202      	movs	r2, #2
 800617a:	4619      	mov	r1, r3
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f001 f9de 	bl	800753e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006182:	e02e      	b.n	80061e2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006184:	6839      	ldr	r1, [r7, #0]
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f001 f96e 	bl	8007468 <USBD_CtlError>
            ret = USBD_FAIL;
 800618c:	2302      	movs	r3, #2
 800618e:	75fb      	strb	r3, [r7, #23]
          break;
 8006190:	e027      	b.n	80061e2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006198:	2b03      	cmp	r3, #3
 800619a:	d107      	bne.n	80061ac <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800619c:	f107 030f 	add.w	r3, r7, #15
 80061a0:	2201      	movs	r2, #1
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f001 f9ca 	bl	800753e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061aa:	e01a      	b.n	80061e2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80061ac:	6839      	ldr	r1, [r7, #0]
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f001 f95a 	bl	8007468 <USBD_CtlError>
            ret = USBD_FAIL;
 80061b4:	2302      	movs	r3, #2
 80061b6:	75fb      	strb	r3, [r7, #23]
          break;
 80061b8:	e013      	b.n	80061e2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d00d      	beq.n	80061e0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80061c4:	6839      	ldr	r1, [r7, #0]
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f001 f94e 	bl	8007468 <USBD_CtlError>
            ret = USBD_FAIL;
 80061cc:	2302      	movs	r3, #2
 80061ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80061d0:	e006      	b.n	80061e0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80061d2:	6839      	ldr	r1, [r7, #0]
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f001 f947 	bl	8007468 <USBD_CtlError>
          ret = USBD_FAIL;
 80061da:	2302      	movs	r3, #2
 80061dc:	75fb      	strb	r3, [r7, #23]
          break;
 80061de:	e000      	b.n	80061e2 <USBD_CDC_Setup+0x12c>
          break;
 80061e0:	bf00      	nop
      }
      break;
 80061e2:	e006      	b.n	80061f2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80061e4:	6839      	ldr	r1, [r7, #0]
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f001 f93e 	bl	8007468 <USBD_CtlError>
      ret = USBD_FAIL;
 80061ec:	2302      	movs	r3, #2
 80061ee:	75fb      	strb	r3, [r7, #23]
      break;
 80061f0:	bf00      	nop
  }

  return ret;
 80061f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3718      	adds	r7, #24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800620e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006216:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800621e:	2b00      	cmp	r3, #0
 8006220:	d03a      	beq.n	8006298 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006222:	78fa      	ldrb	r2, [r7, #3]
 8006224:	6879      	ldr	r1, [r7, #4]
 8006226:	4613      	mov	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	440b      	add	r3, r1
 8006230:	331c      	adds	r3, #28
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d029      	beq.n	800628c <USBD_CDC_DataIn+0x90>
 8006238:	78fa      	ldrb	r2, [r7, #3]
 800623a:	6879      	ldr	r1, [r7, #4]
 800623c:	4613      	mov	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	440b      	add	r3, r1
 8006246:	331c      	adds	r3, #28
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	78f9      	ldrb	r1, [r7, #3]
 800624c:	68b8      	ldr	r0, [r7, #8]
 800624e:	460b      	mov	r3, r1
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	440b      	add	r3, r1
 8006254:	00db      	lsls	r3, r3, #3
 8006256:	4403      	add	r3, r0
 8006258:	3338      	adds	r3, #56	; 0x38
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006260:	fb01 f303 	mul.w	r3, r1, r3
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d110      	bne.n	800628c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800626a:	78fa      	ldrb	r2, [r7, #3]
 800626c:	6879      	ldr	r1, [r7, #4]
 800626e:	4613      	mov	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	440b      	add	r3, r1
 8006278:	331c      	adds	r3, #28
 800627a:	2200      	movs	r2, #0
 800627c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800627e:	78f9      	ldrb	r1, [r7, #3]
 8006280:	2300      	movs	r3, #0
 8006282:	2200      	movs	r2, #0
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f001 fdd9 	bl	8007e3c <USBD_LL_Transmit>
 800628a:	e003      	b.n	8006294 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	e000      	b.n	800629a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006298:	2302      	movs	r3, #2
  }
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
 80062aa:	460b      	mov	r3, r1
 80062ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80062b6:	78fb      	ldrb	r3, [r7, #3]
 80062b8:	4619      	mov	r1, r3
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f001 fe04 	bl	8007ec8 <USBD_LL_GetRxDataSize>
 80062c0:	4602      	mov	r2, r0
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00d      	beq.n	80062ee <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80062e6:	4611      	mov	r1, r2
 80062e8:	4798      	blx	r3

    return USBD_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	e000      	b.n	80062f0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80062ee:	2302      	movs	r3, #2
  }
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006306:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800630e:	2b00      	cmp	r3, #0
 8006310:	d015      	beq.n	800633e <USBD_CDC_EP0_RxReady+0x46>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006318:	2bff      	cmp	r3, #255	; 0xff
 800631a:	d010      	beq.n	800633e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800632a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006332:	b292      	uxth	r2, r2
 8006334:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	22ff      	movs	r2, #255	; 0xff
 800633a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2243      	movs	r2, #67	; 0x43
 8006354:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006356:	4b03      	ldr	r3, [pc, #12]	; (8006364 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006358:	4618      	mov	r0, r3
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	20000098 	.word	0x20000098

08006368 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2243      	movs	r2, #67	; 0x43
 8006374:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006376:	4b03      	ldr	r3, [pc, #12]	; (8006384 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006378:	4618      	mov	r0, r3
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	20000054 	.word	0x20000054

08006388 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2243      	movs	r2, #67	; 0x43
 8006394:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006396:	4b03      	ldr	r3, [pc, #12]	; (80063a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	200000dc 	.word	0x200000dc

080063a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	220a      	movs	r2, #10
 80063b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80063b6:	4b03      	ldr	r3, [pc, #12]	; (80063c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr
 80063c4:	20000010 	.word	0x20000010

080063c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80063d2:	2302      	movs	r3, #2
 80063d4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d005      	beq.n	80063e8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b087      	sub	sp, #28
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	60f8      	str	r0, [r7, #12]
 80063fe:	60b9      	str	r1, [r7, #8]
 8006400:	4613      	mov	r3, r2
 8006402:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800640a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006414:	88fa      	ldrh	r2, [r7, #6]
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	371c      	adds	r7, #28
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800642a:	b480      	push	{r7}
 800642c:	b085      	sub	sp, #20
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
 8006432:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800643a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	683a      	ldr	r2, [r7, #0]
 8006440:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3714      	adds	r7, #20
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b084      	sub	sp, #16
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006460:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006468:	2b00      	cmp	r3, #0
 800646a:	d01c      	beq.n	80064a6 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006472:	2b00      	cmp	r3, #0
 8006474:	d115      	bne.n	80064a2 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2201      	movs	r2, #1
 800647a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006494:	b29b      	uxth	r3, r3
 8006496:	2181      	movs	r1, #129	; 0x81
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f001 fccf 	bl	8007e3c <USBD_LL_Transmit>

      return USBD_OK;
 800649e:	2300      	movs	r3, #0
 80064a0:	e002      	b.n	80064a8 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e000      	b.n	80064a8 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80064a6:	2302      	movs	r3, #2
  }
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064be:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d017      	beq.n	80064fa <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	7c1b      	ldrb	r3, [r3, #16]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d109      	bne.n	80064e6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064dc:	2101      	movs	r1, #1
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f001 fccf 	bl	8007e82 <USBD_LL_PrepareReceive>
 80064e4:	e007      	b.n	80064f6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064ec:	2340      	movs	r3, #64	; 0x40
 80064ee:	2101      	movs	r1, #1
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f001 fcc6 	bl	8007e82 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	e000      	b.n	80064fc <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80064fa:	2302      	movs	r3, #2
  }
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	4613      	mov	r3, r2
 8006510:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006518:	2302      	movs	r3, #2
 800651a:	e01a      	b.n	8006552 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	79fa      	ldrb	r2, [r7, #7]
 8006548:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f001 fb32 	bl	8007bb4 <USBD_LL_Init>

  return USBD_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800655a:	b480      	push	{r7}
 800655c:	b085      	sub	sp, #20
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006564:	2300      	movs	r3, #0
 8006566:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d006      	beq.n	800657c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	73fb      	strb	r3, [r7, #15]
 800657a:	e001      	b.n	8006580 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800657c:	2302      	movs	r3, #2
 800657e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006580:	7bfb      	ldrb	r3, [r7, #15]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b082      	sub	sp, #8
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f001 fb66 	bl	8007c68 <USBD_LL_Start>

  return USBD_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b083      	sub	sp, #12
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80065c8:	2302      	movs	r3, #2
 80065ca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00c      	beq.n	80065f0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	78fa      	ldrb	r2, [r7, #3]
 80065e0:	4611      	mov	r1, r2
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	4798      	blx	r3
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b082      	sub	sp, #8
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	460b      	mov	r3, r1
 8006604:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	78fa      	ldrb	r2, [r7, #3]
 8006610:	4611      	mov	r1, r2
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	4798      	blx	r3

  return USBD_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3708      	adds	r7, #8
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006630:	6839      	ldr	r1, [r7, #0]
 8006632:	4618      	mov	r0, r3
 8006634:	f000 fedb 	bl	80073ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006646:	461a      	mov	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006654:	f003 031f 	and.w	r3, r3, #31
 8006658:	2b02      	cmp	r3, #2
 800665a:	d016      	beq.n	800668a <USBD_LL_SetupStage+0x6a>
 800665c:	2b02      	cmp	r3, #2
 800665e:	d81c      	bhi.n	800669a <USBD_LL_SetupStage+0x7a>
 8006660:	2b00      	cmp	r3, #0
 8006662:	d002      	beq.n	800666a <USBD_LL_SetupStage+0x4a>
 8006664:	2b01      	cmp	r3, #1
 8006666:	d008      	beq.n	800667a <USBD_LL_SetupStage+0x5a>
 8006668:	e017      	b.n	800669a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006670:	4619      	mov	r1, r3
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f9ce 	bl	8006a14 <USBD_StdDevReq>
      break;
 8006678:	e01a      	b.n	80066b0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006680:	4619      	mov	r1, r3
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fa30 	bl	8006ae8 <USBD_StdItfReq>
      break;
 8006688:	e012      	b.n	80066b0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006690:	4619      	mov	r1, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fa70 	bl	8006b78 <USBD_StdEPReq>
      break;
 8006698:	e00a      	b.n	80066b0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80066a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	4619      	mov	r1, r3
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f001 fb3d 	bl	8007d28 <USBD_LL_StallEP>
      break;
 80066ae:	bf00      	nop
  }

  return USBD_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b086      	sub	sp, #24
 80066be:	af00      	add	r7, sp, #0
 80066c0:	60f8      	str	r0, [r7, #12]
 80066c2:	460b      	mov	r3, r1
 80066c4:	607a      	str	r2, [r7, #4]
 80066c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80066c8:	7afb      	ldrb	r3, [r7, #11]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d14b      	bne.n	8006766 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80066d4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066dc:	2b03      	cmp	r3, #3
 80066de:	d134      	bne.n	800674a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	68da      	ldr	r2, [r3, #12]
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d919      	bls.n	8006720 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	68da      	ldr	r2, [r3, #12]
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	1ad2      	subs	r2, r2, r3
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	68da      	ldr	r2, [r3, #12]
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006702:	429a      	cmp	r2, r3
 8006704:	d203      	bcs.n	800670e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800670a:	b29b      	uxth	r3, r3
 800670c:	e002      	b.n	8006714 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006712:	b29b      	uxth	r3, r3
 8006714:	461a      	mov	r2, r3
 8006716:	6879      	ldr	r1, [r7, #4]
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f000 ff5c 	bl	80075d6 <USBD_CtlContinueRx>
 800671e:	e038      	b.n	8006792 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00a      	beq.n	8006742 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006732:	2b03      	cmp	r3, #3
 8006734:	d105      	bne.n	8006742 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 ff59 	bl	80075fa <USBD_CtlSendStatus>
 8006748:	e023      	b.n	8006792 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006750:	2b05      	cmp	r3, #5
 8006752:	d11e      	bne.n	8006792 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800675c:	2100      	movs	r1, #0
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f001 fae2 	bl	8007d28 <USBD_LL_StallEP>
 8006764:	e015      	b.n	8006792 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00d      	beq.n	800678e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006778:	2b03      	cmp	r3, #3
 800677a:	d108      	bne.n	800678e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	7afa      	ldrb	r2, [r7, #11]
 8006786:	4611      	mov	r1, r2
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	4798      	blx	r3
 800678c:	e001      	b.n	8006792 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800678e:	2302      	movs	r3, #2
 8006790:	e000      	b.n	8006794 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3718      	adds	r7, #24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	460b      	mov	r3, r1
 80067a6:	607a      	str	r2, [r7, #4]
 80067a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80067aa:	7afb      	ldrb	r3, [r7, #11]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d17f      	bne.n	80068b0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3314      	adds	r3, #20
 80067b4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d15c      	bne.n	800687a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	68da      	ldr	r2, [r3, #12]
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d915      	bls.n	80067f8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	68da      	ldr	r2, [r3, #12]
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	1ad2      	subs	r2, r2, r3
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	b29b      	uxth	r3, r3
 80067e0:	461a      	mov	r2, r3
 80067e2:	6879      	ldr	r1, [r7, #4]
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f000 fec6 	bl	8007576 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067ea:	2300      	movs	r3, #0
 80067ec:	2200      	movs	r2, #0
 80067ee:	2100      	movs	r1, #0
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f001 fb46 	bl	8007e82 <USBD_LL_PrepareReceive>
 80067f6:	e04e      	b.n	8006896 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	6912      	ldr	r2, [r2, #16]
 8006800:	fbb3 f1f2 	udiv	r1, r3, r2
 8006804:	fb01 f202 	mul.w	r2, r1, r2
 8006808:	1a9b      	subs	r3, r3, r2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d11c      	bne.n	8006848 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	689a      	ldr	r2, [r3, #8]
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006816:	429a      	cmp	r2, r3
 8006818:	d316      	bcc.n	8006848 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	689a      	ldr	r2, [r3, #8]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006824:	429a      	cmp	r2, r3
 8006826:	d20f      	bcs.n	8006848 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006828:	2200      	movs	r2, #0
 800682a:	2100      	movs	r1, #0
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f000 fea2 	bl	8007576 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800683a:	2300      	movs	r3, #0
 800683c:	2200      	movs	r2, #0
 800683e:	2100      	movs	r1, #0
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f001 fb1e 	bl	8007e82 <USBD_LL_PrepareReceive>
 8006846:	e026      	b.n	8006896 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00a      	beq.n	800686a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800685a:	2b03      	cmp	r3, #3
 800685c:	d105      	bne.n	800686a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800686a:	2180      	movs	r1, #128	; 0x80
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f001 fa5b 	bl	8007d28 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f000 fed4 	bl	8007620 <USBD_CtlReceiveStatus>
 8006878:	e00d      	b.n	8006896 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006880:	2b04      	cmp	r3, #4
 8006882:	d004      	beq.n	800688e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800688a:	2b00      	cmp	r3, #0
 800688c:	d103      	bne.n	8006896 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800688e:	2180      	movs	r1, #128	; 0x80
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f001 fa49 	bl	8007d28 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800689c:	2b01      	cmp	r3, #1
 800689e:	d11d      	bne.n	80068dc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f7ff fe80 	bl	80065a6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80068ae:	e015      	b.n	80068dc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00d      	beq.n	80068d8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80068c2:	2b03      	cmp	r3, #3
 80068c4:	d108      	bne.n	80068d8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	7afa      	ldrb	r2, [r7, #11]
 80068d0:	4611      	mov	r1, r2
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	4798      	blx	r3
 80068d6:	e001      	b.n	80068dc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80068d8:	2302      	movs	r3, #2
 80068da:	e000      	b.n	80068de <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3718      	adds	r7, #24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b082      	sub	sp, #8
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068ee:	2340      	movs	r3, #64	; 0x40
 80068f0:	2200      	movs	r2, #0
 80068f2:	2100      	movs	r1, #0
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f001 f9d2 	bl	8007c9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2240      	movs	r2, #64	; 0x40
 8006906:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800690a:	2340      	movs	r3, #64	; 0x40
 800690c:	2200      	movs	r2, #0
 800690e:	2180      	movs	r1, #128	; 0x80
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f001 f9c4 	bl	8007c9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2240      	movs	r2, #64	; 0x40
 8006920:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006946:	2b00      	cmp	r3, #0
 8006948:	d009      	beq.n	800695e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	6852      	ldr	r2, [r2, #4]
 8006956:	b2d2      	uxtb	r2, r2
 8006958:	4611      	mov	r1, r2
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	4798      	blx	r3
  }

  return USBD_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	460b      	mov	r3, r1
 8006972:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	78fa      	ldrb	r2, [r7, #3]
 8006978:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2204      	movs	r2, #4
 80069a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069c0:	2b04      	cmp	r3, #4
 80069c2:	d105      	bne.n	80069d0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b082      	sub	sp, #8
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ec:	2b03      	cmp	r3, #3
 80069ee:	d10b      	bne.n	8006a08 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d005      	beq.n	8006a08 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a02:	69db      	ldr	r3, [r3, #28]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
	...

08006a14 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a2a:	2b40      	cmp	r3, #64	; 0x40
 8006a2c:	d005      	beq.n	8006a3a <USBD_StdDevReq+0x26>
 8006a2e:	2b40      	cmp	r3, #64	; 0x40
 8006a30:	d84f      	bhi.n	8006ad2 <USBD_StdDevReq+0xbe>
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d009      	beq.n	8006a4a <USBD_StdDevReq+0x36>
 8006a36:	2b20      	cmp	r3, #32
 8006a38:	d14b      	bne.n	8006ad2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	6839      	ldr	r1, [r7, #0]
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	4798      	blx	r3
      break;
 8006a48:	e048      	b.n	8006adc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	785b      	ldrb	r3, [r3, #1]
 8006a4e:	2b09      	cmp	r3, #9
 8006a50:	d839      	bhi.n	8006ac6 <USBD_StdDevReq+0xb2>
 8006a52:	a201      	add	r2, pc, #4	; (adr r2, 8006a58 <USBD_StdDevReq+0x44>)
 8006a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a58:	08006aa9 	.word	0x08006aa9
 8006a5c:	08006abd 	.word	0x08006abd
 8006a60:	08006ac7 	.word	0x08006ac7
 8006a64:	08006ab3 	.word	0x08006ab3
 8006a68:	08006ac7 	.word	0x08006ac7
 8006a6c:	08006a8b 	.word	0x08006a8b
 8006a70:	08006a81 	.word	0x08006a81
 8006a74:	08006ac7 	.word	0x08006ac7
 8006a78:	08006a9f 	.word	0x08006a9f
 8006a7c:	08006a95 	.word	0x08006a95
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a80:	6839      	ldr	r1, [r7, #0]
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f9dc 	bl	8006e40 <USBD_GetDescriptor>
          break;
 8006a88:	e022      	b.n	8006ad0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fb3f 	bl	8007110 <USBD_SetAddress>
          break;
 8006a92:	e01d      	b.n	8006ad0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fb7e 	bl	8007198 <USBD_SetConfig>
          break;
 8006a9c:	e018      	b.n	8006ad0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a9e:	6839      	ldr	r1, [r7, #0]
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fc07 	bl	80072b4 <USBD_GetConfig>
          break;
 8006aa6:	e013      	b.n	8006ad0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fc37 	bl	800731e <USBD_GetStatus>
          break;
 8006ab0:	e00e      	b.n	8006ad0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 fc65 	bl	8007384 <USBD_SetFeature>
          break;
 8006aba:	e009      	b.n	8006ad0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fc74 	bl	80073ac <USBD_ClrFeature>
          break;
 8006ac4:	e004      	b.n	8006ad0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fccd 	bl	8007468 <USBD_CtlError>
          break;
 8006ace:	bf00      	nop
      }
      break;
 8006ad0:	e004      	b.n	8006adc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fcc7 	bl	8007468 <USBD_CtlError>
      break;
 8006ada:	bf00      	nop
  }

  return ret;
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop

08006ae8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006af2:	2300      	movs	r3, #0
 8006af4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006afe:	2b40      	cmp	r3, #64	; 0x40
 8006b00:	d005      	beq.n	8006b0e <USBD_StdItfReq+0x26>
 8006b02:	2b40      	cmp	r3, #64	; 0x40
 8006b04:	d82e      	bhi.n	8006b64 <USBD_StdItfReq+0x7c>
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d001      	beq.n	8006b0e <USBD_StdItfReq+0x26>
 8006b0a:	2b20      	cmp	r3, #32
 8006b0c:	d12a      	bne.n	8006b64 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b14:	3b01      	subs	r3, #1
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d81d      	bhi.n	8006b56 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	889b      	ldrh	r3, [r3, #4]
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d813      	bhi.n	8006b4c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	4798      	blx	r3
 8006b32:	4603      	mov	r3, r0
 8006b34:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	88db      	ldrh	r3, [r3, #6]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d110      	bne.n	8006b60 <USBD_StdItfReq+0x78>
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10d      	bne.n	8006b60 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fd58 	bl	80075fa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b4a:	e009      	b.n	8006b60 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006b4c:	6839      	ldr	r1, [r7, #0]
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fc8a 	bl	8007468 <USBD_CtlError>
          break;
 8006b54:	e004      	b.n	8006b60 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006b56:	6839      	ldr	r1, [r7, #0]
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fc85 	bl	8007468 <USBD_CtlError>
          break;
 8006b5e:	e000      	b.n	8006b62 <USBD_StdItfReq+0x7a>
          break;
 8006b60:	bf00      	nop
      }
      break;
 8006b62:	e004      	b.n	8006b6e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fc7e 	bl	8007468 <USBD_CtlError>
      break;
 8006b6c:	bf00      	nop
  }

  return USBD_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b82:	2300      	movs	r3, #0
 8006b84:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	889b      	ldrh	r3, [r3, #4]
 8006b8a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b94:	2b40      	cmp	r3, #64	; 0x40
 8006b96:	d007      	beq.n	8006ba8 <USBD_StdEPReq+0x30>
 8006b98:	2b40      	cmp	r3, #64	; 0x40
 8006b9a:	f200 8146 	bhi.w	8006e2a <USBD_StdEPReq+0x2b2>
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00a      	beq.n	8006bb8 <USBD_StdEPReq+0x40>
 8006ba2:	2b20      	cmp	r3, #32
 8006ba4:	f040 8141 	bne.w	8006e2a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	6839      	ldr	r1, [r7, #0]
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	4798      	blx	r3
      break;
 8006bb6:	e13d      	b.n	8006e34 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	d10a      	bne.n	8006bda <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	4798      	blx	r3
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006bd6:	7bfb      	ldrb	r3, [r7, #15]
 8006bd8:	e12d      	b.n	8006e36 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	785b      	ldrb	r3, [r3, #1]
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d007      	beq.n	8006bf2 <USBD_StdEPReq+0x7a>
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	f300 811b 	bgt.w	8006e1e <USBD_StdEPReq+0x2a6>
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d072      	beq.n	8006cd2 <USBD_StdEPReq+0x15a>
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d03a      	beq.n	8006c66 <USBD_StdEPReq+0xee>
 8006bf0:	e115      	b.n	8006e1e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d002      	beq.n	8006c02 <USBD_StdEPReq+0x8a>
 8006bfc:	2b03      	cmp	r3, #3
 8006bfe:	d015      	beq.n	8006c2c <USBD_StdEPReq+0xb4>
 8006c00:	e02b      	b.n	8006c5a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c02:	7bbb      	ldrb	r3, [r7, #14]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00c      	beq.n	8006c22 <USBD_StdEPReq+0xaa>
 8006c08:	7bbb      	ldrb	r3, [r7, #14]
 8006c0a:	2b80      	cmp	r3, #128	; 0x80
 8006c0c:	d009      	beq.n	8006c22 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006c0e:	7bbb      	ldrb	r3, [r7, #14]
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f001 f888 	bl	8007d28 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006c18:	2180      	movs	r1, #128	; 0x80
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f001 f884 	bl	8007d28 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c20:	e020      	b.n	8006c64 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fc1f 	bl	8007468 <USBD_CtlError>
              break;
 8006c2a:	e01b      	b.n	8006c64 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	885b      	ldrh	r3, [r3, #2]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10e      	bne.n	8006c52 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006c34:	7bbb      	ldrb	r3, [r7, #14]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00b      	beq.n	8006c52 <USBD_StdEPReq+0xda>
 8006c3a:	7bbb      	ldrb	r3, [r7, #14]
 8006c3c:	2b80      	cmp	r3, #128	; 0x80
 8006c3e:	d008      	beq.n	8006c52 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	88db      	ldrh	r3, [r3, #6]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d104      	bne.n	8006c52 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006c48:	7bbb      	ldrb	r3, [r7, #14]
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f001 f86b 	bl	8007d28 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fcd1 	bl	80075fa <USBD_CtlSendStatus>

              break;
 8006c58:	e004      	b.n	8006c64 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006c5a:	6839      	ldr	r1, [r7, #0]
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fc03 	bl	8007468 <USBD_CtlError>
              break;
 8006c62:	bf00      	nop
          }
          break;
 8006c64:	e0e0      	b.n	8006e28 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d002      	beq.n	8006c76 <USBD_StdEPReq+0xfe>
 8006c70:	2b03      	cmp	r3, #3
 8006c72:	d015      	beq.n	8006ca0 <USBD_StdEPReq+0x128>
 8006c74:	e026      	b.n	8006cc4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c76:	7bbb      	ldrb	r3, [r7, #14]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00c      	beq.n	8006c96 <USBD_StdEPReq+0x11e>
 8006c7c:	7bbb      	ldrb	r3, [r7, #14]
 8006c7e:	2b80      	cmp	r3, #128	; 0x80
 8006c80:	d009      	beq.n	8006c96 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006c82:	7bbb      	ldrb	r3, [r7, #14]
 8006c84:	4619      	mov	r1, r3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f001 f84e 	bl	8007d28 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006c8c:	2180      	movs	r1, #128	; 0x80
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f001 f84a 	bl	8007d28 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c94:	e01c      	b.n	8006cd0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006c96:	6839      	ldr	r1, [r7, #0]
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 fbe5 	bl	8007468 <USBD_CtlError>
              break;
 8006c9e:	e017      	b.n	8006cd0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	885b      	ldrh	r3, [r3, #2]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d112      	bne.n	8006cce <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006ca8:	7bbb      	ldrb	r3, [r7, #14]
 8006caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d004      	beq.n	8006cbc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006cb2:	7bbb      	ldrb	r3, [r7, #14]
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f001 f855 	bl	8007d66 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 fc9c 	bl	80075fa <USBD_CtlSendStatus>
              }
              break;
 8006cc2:	e004      	b.n	8006cce <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fbce 	bl	8007468 <USBD_CtlError>
              break;
 8006ccc:	e000      	b.n	8006cd0 <USBD_StdEPReq+0x158>
              break;
 8006cce:	bf00      	nop
          }
          break;
 8006cd0:	e0aa      	b.n	8006e28 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d002      	beq.n	8006ce2 <USBD_StdEPReq+0x16a>
 8006cdc:	2b03      	cmp	r3, #3
 8006cde:	d032      	beq.n	8006d46 <USBD_StdEPReq+0x1ce>
 8006ce0:	e097      	b.n	8006e12 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ce2:	7bbb      	ldrb	r3, [r7, #14]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d007      	beq.n	8006cf8 <USBD_StdEPReq+0x180>
 8006ce8:	7bbb      	ldrb	r3, [r7, #14]
 8006cea:	2b80      	cmp	r3, #128	; 0x80
 8006cec:	d004      	beq.n	8006cf8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fbb9 	bl	8007468 <USBD_CtlError>
                break;
 8006cf6:	e091      	b.n	8006e1c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	da0b      	bge.n	8006d18 <USBD_StdEPReq+0x1a0>
 8006d00:	7bbb      	ldrb	r3, [r7, #14]
 8006d02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d06:	4613      	mov	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4413      	add	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	3310      	adds	r3, #16
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	4413      	add	r3, r2
 8006d14:	3304      	adds	r3, #4
 8006d16:	e00b      	b.n	8006d30 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d18:	7bbb      	ldrb	r3, [r7, #14]
 8006d1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d1e:	4613      	mov	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	4413      	add	r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	3304      	adds	r3, #4
 8006d30:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2200      	movs	r2, #0
 8006d36:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fbfd 	bl	800753e <USBD_CtlSendData>
              break;
 8006d44:	e06a      	b.n	8006e1c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006d46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	da11      	bge.n	8006d72 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d4e:	7bbb      	ldrb	r3, [r7, #14]
 8006d50:	f003 020f 	and.w	r2, r3, #15
 8006d54:	6879      	ldr	r1, [r7, #4]
 8006d56:	4613      	mov	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	440b      	add	r3, r1
 8006d60:	3318      	adds	r3, #24
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d117      	bne.n	8006d98 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006d68:	6839      	ldr	r1, [r7, #0]
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fb7c 	bl	8007468 <USBD_CtlError>
                  break;
 8006d70:	e054      	b.n	8006e1c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d72:	7bbb      	ldrb	r3, [r7, #14]
 8006d74:	f003 020f 	and.w	r2, r3, #15
 8006d78:	6879      	ldr	r1, [r7, #4]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	440b      	add	r3, r1
 8006d84:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d104      	bne.n	8006d98 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fb69 	bl	8007468 <USBD_CtlError>
                  break;
 8006d96:	e041      	b.n	8006e1c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	da0b      	bge.n	8006db8 <USBD_StdEPReq+0x240>
 8006da0:	7bbb      	ldrb	r3, [r7, #14]
 8006da2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006da6:	4613      	mov	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	3310      	adds	r3, #16
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	4413      	add	r3, r2
 8006db4:	3304      	adds	r3, #4
 8006db6:	e00b      	b.n	8006dd0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006db8:	7bbb      	ldrb	r3, [r7, #14]
 8006dba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	4413      	add	r3, r2
 8006dce:	3304      	adds	r3, #4
 8006dd0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006dd2:	7bbb      	ldrb	r3, [r7, #14]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d002      	beq.n	8006dde <USBD_StdEPReq+0x266>
 8006dd8:	7bbb      	ldrb	r3, [r7, #14]
 8006dda:	2b80      	cmp	r3, #128	; 0x80
 8006ddc:	d103      	bne.n	8006de6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	2200      	movs	r2, #0
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	e00e      	b.n	8006e04 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006de6:	7bbb      	ldrb	r3, [r7, #14]
 8006de8:	4619      	mov	r1, r3
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 ffda 	bl	8007da4 <USBD_LL_IsStallEP>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d003      	beq.n	8006dfe <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	e002      	b.n	8006e04 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	2200      	movs	r2, #0
 8006e02:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	2202      	movs	r2, #2
 8006e08:	4619      	mov	r1, r3
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fb97 	bl	800753e <USBD_CtlSendData>
              break;
 8006e10:	e004      	b.n	8006e1c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006e12:	6839      	ldr	r1, [r7, #0]
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fb27 	bl	8007468 <USBD_CtlError>
              break;
 8006e1a:	bf00      	nop
          }
          break;
 8006e1c:	e004      	b.n	8006e28 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fb21 	bl	8007468 <USBD_CtlError>
          break;
 8006e26:	bf00      	nop
      }
      break;
 8006e28:	e004      	b.n	8006e34 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006e2a:	6839      	ldr	r1, [r7, #0]
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 fb1b 	bl	8007468 <USBD_CtlError>
      break;
 8006e32:	bf00      	nop
  }

  return ret;
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
	...

08006e40 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006e52:	2300      	movs	r3, #0
 8006e54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	885b      	ldrh	r3, [r3, #2]
 8006e5a:	0a1b      	lsrs	r3, r3, #8
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	2b06      	cmp	r3, #6
 8006e62:	f200 8128 	bhi.w	80070b6 <USBD_GetDescriptor+0x276>
 8006e66:	a201      	add	r2, pc, #4	; (adr r2, 8006e6c <USBD_GetDescriptor+0x2c>)
 8006e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6c:	08006e89 	.word	0x08006e89
 8006e70:	08006ea1 	.word	0x08006ea1
 8006e74:	08006ee1 	.word	0x08006ee1
 8006e78:	080070b7 	.word	0x080070b7
 8006e7c:	080070b7 	.word	0x080070b7
 8006e80:	08007057 	.word	0x08007057
 8006e84:	08007083 	.word	0x08007083
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	7c12      	ldrb	r2, [r2, #16]
 8006e94:	f107 0108 	add.w	r1, r7, #8
 8006e98:	4610      	mov	r0, r2
 8006e9a:	4798      	blx	r3
 8006e9c:	60f8      	str	r0, [r7, #12]
      break;
 8006e9e:	e112      	b.n	80070c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	7c1b      	ldrb	r3, [r3, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10d      	bne.n	8006ec4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb0:	f107 0208 	add.w	r2, r7, #8
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	4798      	blx	r3
 8006eb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006ec2:	e100      	b.n	80070c6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ecc:	f107 0208 	add.w	r2, r7, #8
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	4798      	blx	r3
 8006ed4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	2202      	movs	r2, #2
 8006edc:	701a      	strb	r2, [r3, #0]
      break;
 8006ede:	e0f2      	b.n	80070c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	885b      	ldrh	r3, [r3, #2]
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b05      	cmp	r3, #5
 8006ee8:	f200 80ac 	bhi.w	8007044 <USBD_GetDescriptor+0x204>
 8006eec:	a201      	add	r2, pc, #4	; (adr r2, 8006ef4 <USBD_GetDescriptor+0xb4>)
 8006eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef2:	bf00      	nop
 8006ef4:	08006f0d 	.word	0x08006f0d
 8006ef8:	08006f41 	.word	0x08006f41
 8006efc:	08006f75 	.word	0x08006f75
 8006f00:	08006fa9 	.word	0x08006fa9
 8006f04:	08006fdd 	.word	0x08006fdd
 8006f08:	08007011 	.word	0x08007011
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00b      	beq.n	8006f30 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	7c12      	ldrb	r2, [r2, #16]
 8006f24:	f107 0108 	add.w	r1, r7, #8
 8006f28:	4610      	mov	r0, r2
 8006f2a:	4798      	blx	r3
 8006f2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f2e:	e091      	b.n	8007054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fa98 	bl	8007468 <USBD_CtlError>
            err++;
 8006f38:	7afb      	ldrb	r3, [r7, #11]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f3e:	e089      	b.n	8007054 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00b      	beq.n	8006f64 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	7c12      	ldrb	r2, [r2, #16]
 8006f58:	f107 0108 	add.w	r1, r7, #8
 8006f5c:	4610      	mov	r0, r2
 8006f5e:	4798      	blx	r3
 8006f60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f62:	e077      	b.n	8007054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f64:	6839      	ldr	r1, [r7, #0]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fa7e 	bl	8007468 <USBD_CtlError>
            err++;
 8006f6c:	7afb      	ldrb	r3, [r7, #11]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	72fb      	strb	r3, [r7, #11]
          break;
 8006f72:	e06f      	b.n	8007054 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00b      	beq.n	8006f98 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	7c12      	ldrb	r2, [r2, #16]
 8006f8c:	f107 0108 	add.w	r1, r7, #8
 8006f90:	4610      	mov	r0, r2
 8006f92:	4798      	blx	r3
 8006f94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f96:	e05d      	b.n	8007054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fa64 	bl	8007468 <USBD_CtlError>
            err++;
 8006fa0:	7afb      	ldrb	r3, [r7, #11]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	72fb      	strb	r3, [r7, #11]
          break;
 8006fa6:	e055      	b.n	8007054 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00b      	beq.n	8006fcc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	7c12      	ldrb	r2, [r2, #16]
 8006fc0:	f107 0108 	add.w	r1, r7, #8
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	4798      	blx	r3
 8006fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fca:	e043      	b.n	8007054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fa4a 	bl	8007468 <USBD_CtlError>
            err++;
 8006fd4:	7afb      	ldrb	r3, [r7, #11]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8006fda:	e03b      	b.n	8007054 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00b      	beq.n	8007000 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fee:	695b      	ldr	r3, [r3, #20]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	7c12      	ldrb	r2, [r2, #16]
 8006ff4:	f107 0108 	add.w	r1, r7, #8
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	4798      	blx	r3
 8006ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ffe:	e029      	b.n	8007054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fa30 	bl	8007468 <USBD_CtlError>
            err++;
 8007008:	7afb      	ldrb	r3, [r7, #11]
 800700a:	3301      	adds	r3, #1
 800700c:	72fb      	strb	r3, [r7, #11]
          break;
 800700e:	e021      	b.n	8007054 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00b      	beq.n	8007034 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	7c12      	ldrb	r2, [r2, #16]
 8007028:	f107 0108 	add.w	r1, r7, #8
 800702c:	4610      	mov	r0, r2
 800702e:	4798      	blx	r3
 8007030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007032:	e00f      	b.n	8007054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fa16 	bl	8007468 <USBD_CtlError>
            err++;
 800703c:	7afb      	ldrb	r3, [r7, #11]
 800703e:	3301      	adds	r3, #1
 8007040:	72fb      	strb	r3, [r7, #11]
          break;
 8007042:	e007      	b.n	8007054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fa0e 	bl	8007468 <USBD_CtlError>
          err++;
 800704c:	7afb      	ldrb	r3, [r7, #11]
 800704e:	3301      	adds	r3, #1
 8007050:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007052:	e038      	b.n	80070c6 <USBD_GetDescriptor+0x286>
 8007054:	e037      	b.n	80070c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	7c1b      	ldrb	r3, [r3, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d109      	bne.n	8007072 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007066:	f107 0208 	add.w	r2, r7, #8
 800706a:	4610      	mov	r0, r2
 800706c:	4798      	blx	r3
 800706e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007070:	e029      	b.n	80070c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f9f7 	bl	8007468 <USBD_CtlError>
        err++;
 800707a:	7afb      	ldrb	r3, [r7, #11]
 800707c:	3301      	adds	r3, #1
 800707e:	72fb      	strb	r3, [r7, #11]
      break;
 8007080:	e021      	b.n	80070c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	7c1b      	ldrb	r3, [r3, #16]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10d      	bne.n	80070a6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007092:	f107 0208 	add.w	r2, r7, #8
 8007096:	4610      	mov	r0, r2
 8007098:	4798      	blx	r3
 800709a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	3301      	adds	r3, #1
 80070a0:	2207      	movs	r2, #7
 80070a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070a4:	e00f      	b.n	80070c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 f9dd 	bl	8007468 <USBD_CtlError>
        err++;
 80070ae:	7afb      	ldrb	r3, [r7, #11]
 80070b0:	3301      	adds	r3, #1
 80070b2:	72fb      	strb	r3, [r7, #11]
      break;
 80070b4:	e007      	b.n	80070c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f9d5 	bl	8007468 <USBD_CtlError>
      err++;
 80070be:	7afb      	ldrb	r3, [r7, #11]
 80070c0:	3301      	adds	r3, #1
 80070c2:	72fb      	strb	r3, [r7, #11]
      break;
 80070c4:	bf00      	nop
  }

  if (err != 0U)
 80070c6:	7afb      	ldrb	r3, [r7, #11]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d11c      	bne.n	8007106 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80070cc:	893b      	ldrh	r3, [r7, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d011      	beq.n	80070f6 <USBD_GetDescriptor+0x2b6>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	88db      	ldrh	r3, [r3, #6]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00d      	beq.n	80070f6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	88da      	ldrh	r2, [r3, #6]
 80070de:	893b      	ldrh	r3, [r7, #8]
 80070e0:	4293      	cmp	r3, r2
 80070e2:	bf28      	it	cs
 80070e4:	4613      	movcs	r3, r2
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80070ea:	893b      	ldrh	r3, [r7, #8]
 80070ec:	461a      	mov	r2, r3
 80070ee:	68f9      	ldr	r1, [r7, #12]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fa24 	bl	800753e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	88db      	ldrh	r3, [r3, #6]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d104      	bne.n	8007108 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fa7b 	bl	80075fa <USBD_CtlSendStatus>
 8007104:	e000      	b.n	8007108 <USBD_GetDescriptor+0x2c8>
    return;
 8007106:	bf00      	nop
    }
  }
}
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop

08007110 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	889b      	ldrh	r3, [r3, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d130      	bne.n	8007184 <USBD_SetAddress+0x74>
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	88db      	ldrh	r3, [r3, #6]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d12c      	bne.n	8007184 <USBD_SetAddress+0x74>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	885b      	ldrh	r3, [r3, #2]
 800712e:	2b7f      	cmp	r3, #127	; 0x7f
 8007130:	d828      	bhi.n	8007184 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	885b      	ldrh	r3, [r3, #2]
 8007136:	b2db      	uxtb	r3, r3
 8007138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800713c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007144:	2b03      	cmp	r3, #3
 8007146:	d104      	bne.n	8007152 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f98c 	bl	8007468 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007150:	e01d      	b.n	800718e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	7bfa      	ldrb	r2, [r7, #15]
 8007156:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800715a:	7bfb      	ldrb	r3, [r7, #15]
 800715c:	4619      	mov	r1, r3
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fe4d 	bl	8007dfe <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fa48 	bl	80075fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800716a:	7bfb      	ldrb	r3, [r7, #15]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d004      	beq.n	800717a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2202      	movs	r2, #2
 8007174:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007178:	e009      	b.n	800718e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007182:	e004      	b.n	800718e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f96e 	bl	8007468 <USBD_CtlError>
  }
}
 800718c:	bf00      	nop
 800718e:	bf00      	nop
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
	...

08007198 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	885b      	ldrh	r3, [r3, #2]
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	4b41      	ldr	r3, [pc, #260]	; (80072b0 <USBD_SetConfig+0x118>)
 80071aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80071ac:	4b40      	ldr	r3, [pc, #256]	; (80072b0 <USBD_SetConfig+0x118>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d904      	bls.n	80071be <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f956 	bl	8007468 <USBD_CtlError>
 80071bc:	e075      	b.n	80072aa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d002      	beq.n	80071ce <USBD_SetConfig+0x36>
 80071c8:	2b03      	cmp	r3, #3
 80071ca:	d023      	beq.n	8007214 <USBD_SetConfig+0x7c>
 80071cc:	e062      	b.n	8007294 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80071ce:	4b38      	ldr	r3, [pc, #224]	; (80072b0 <USBD_SetConfig+0x118>)
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d01a      	beq.n	800720c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80071d6:	4b36      	ldr	r3, [pc, #216]	; (80072b0 <USBD_SetConfig+0x118>)
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2203      	movs	r2, #3
 80071e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80071e8:	4b31      	ldr	r3, [pc, #196]	; (80072b0 <USBD_SetConfig+0x118>)
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	4619      	mov	r1, r3
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f7ff f9e4 	bl	80065bc <USBD_SetClassConfig>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d104      	bne.n	8007204 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f933 	bl	8007468 <USBD_CtlError>
            return;
 8007202:	e052      	b.n	80072aa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f9f8 	bl	80075fa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800720a:	e04e      	b.n	80072aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f9f4 	bl	80075fa <USBD_CtlSendStatus>
        break;
 8007212:	e04a      	b.n	80072aa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007214:	4b26      	ldr	r3, [pc, #152]	; (80072b0 <USBD_SetConfig+0x118>)
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d112      	bne.n	8007242 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2202      	movs	r2, #2
 8007220:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007224:	4b22      	ldr	r3, [pc, #136]	; (80072b0 <USBD_SetConfig+0x118>)
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	461a      	mov	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800722e:	4b20      	ldr	r3, [pc, #128]	; (80072b0 <USBD_SetConfig+0x118>)
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7ff f9e0 	bl	80065fa <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f9dd 	bl	80075fa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007240:	e033      	b.n	80072aa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007242:	4b1b      	ldr	r3, [pc, #108]	; (80072b0 <USBD_SetConfig+0x118>)
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	461a      	mov	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	429a      	cmp	r2, r3
 800724e:	d01d      	beq.n	800728c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	b2db      	uxtb	r3, r3
 8007256:	4619      	mov	r1, r3
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7ff f9ce 	bl	80065fa <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800725e:	4b14      	ldr	r3, [pc, #80]	; (80072b0 <USBD_SetConfig+0x118>)
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	461a      	mov	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007268:	4b11      	ldr	r3, [pc, #68]	; (80072b0 <USBD_SetConfig+0x118>)
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7ff f9a4 	bl	80065bc <USBD_SetClassConfig>
 8007274:	4603      	mov	r3, r0
 8007276:	2b02      	cmp	r3, #2
 8007278:	d104      	bne.n	8007284 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800727a:	6839      	ldr	r1, [r7, #0]
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f8f3 	bl	8007468 <USBD_CtlError>
            return;
 8007282:	e012      	b.n	80072aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f9b8 	bl	80075fa <USBD_CtlSendStatus>
        break;
 800728a:	e00e      	b.n	80072aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f9b4 	bl	80075fa <USBD_CtlSendStatus>
        break;
 8007292:	e00a      	b.n	80072aa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f8e6 	bl	8007468 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800729c:	4b04      	ldr	r3, [pc, #16]	; (80072b0 <USBD_SetConfig+0x118>)
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	4619      	mov	r1, r3
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7ff f9a9 	bl	80065fa <USBD_ClrClassConfig>
        break;
 80072a8:	bf00      	nop
    }
  }
}
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	200001a0 	.word	0x200001a0

080072b4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	88db      	ldrh	r3, [r3, #6]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d004      	beq.n	80072d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f8cd 	bl	8007468 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80072ce:	e022      	b.n	8007316 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	dc02      	bgt.n	80072e0 <USBD_GetConfig+0x2c>
 80072da:	2b00      	cmp	r3, #0
 80072dc:	dc03      	bgt.n	80072e6 <USBD_GetConfig+0x32>
 80072de:	e015      	b.n	800730c <USBD_GetConfig+0x58>
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d00b      	beq.n	80072fc <USBD_GetConfig+0x48>
 80072e4:	e012      	b.n	800730c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3308      	adds	r3, #8
 80072f0:	2201      	movs	r2, #1
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f922 	bl	800753e <USBD_CtlSendData>
        break;
 80072fa:	e00c      	b.n	8007316 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	3304      	adds	r3, #4
 8007300:	2201      	movs	r2, #1
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f91a 	bl	800753e <USBD_CtlSendData>
        break;
 800730a:	e004      	b.n	8007316 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800730c:	6839      	ldr	r1, [r7, #0]
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f8aa 	bl	8007468 <USBD_CtlError>
        break;
 8007314:	bf00      	nop
}
 8007316:	bf00      	nop
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b082      	sub	sp, #8
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800732e:	3b01      	subs	r3, #1
 8007330:	2b02      	cmp	r3, #2
 8007332:	d81e      	bhi.n	8007372 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	88db      	ldrh	r3, [r3, #6]
 8007338:	2b02      	cmp	r3, #2
 800733a:	d004      	beq.n	8007346 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800733c:	6839      	ldr	r1, [r7, #0]
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f892 	bl	8007468 <USBD_CtlError>
        break;
 8007344:	e01a      	b.n	800737c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2201      	movs	r2, #1
 800734a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007352:	2b00      	cmp	r3, #0
 8007354:	d005      	beq.n	8007362 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	f043 0202 	orr.w	r2, r3, #2
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	330c      	adds	r3, #12
 8007366:	2202      	movs	r2, #2
 8007368:	4619      	mov	r1, r3
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f8e7 	bl	800753e <USBD_CtlSendData>
      break;
 8007370:	e004      	b.n	800737c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007372:	6839      	ldr	r1, [r7, #0]
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f877 	bl	8007468 <USBD_CtlError>
      break;
 800737a:	bf00      	nop
  }
}
 800737c:	bf00      	nop
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	885b      	ldrh	r3, [r3, #2]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d106      	bne.n	80073a4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2201      	movs	r2, #1
 800739a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f92b 	bl	80075fa <USBD_CtlSendStatus>
  }
}
 80073a4:	bf00      	nop
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073bc:	3b01      	subs	r3, #1
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d80b      	bhi.n	80073da <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	885b      	ldrh	r3, [r3, #2]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d10c      	bne.n	80073e4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f911 	bl	80075fa <USBD_CtlSendStatus>
      }
      break;
 80073d8:	e004      	b.n	80073e4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f843 	bl	8007468 <USBD_CtlError>
      break;
 80073e2:	e000      	b.n	80073e6 <USBD_ClrFeature+0x3a>
      break;
 80073e4:	bf00      	nop
  }
}
 80073e6:	bf00      	nop
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b083      	sub	sp, #12
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	781a      	ldrb	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	785a      	ldrb	r2, [r3, #1]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	3302      	adds	r3, #2
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	b29a      	uxth	r2, r3
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	3303      	adds	r3, #3
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	b29b      	uxth	r3, r3
 8007418:	021b      	lsls	r3, r3, #8
 800741a:	b29b      	uxth	r3, r3
 800741c:	4413      	add	r3, r2
 800741e:	b29a      	uxth	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	3304      	adds	r3, #4
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	b29a      	uxth	r2, r3
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	3305      	adds	r3, #5
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	b29b      	uxth	r3, r3
 8007434:	021b      	lsls	r3, r3, #8
 8007436:	b29b      	uxth	r3, r3
 8007438:	4413      	add	r3, r2
 800743a:	b29a      	uxth	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	3306      	adds	r3, #6
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	b29a      	uxth	r2, r3
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	3307      	adds	r3, #7
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	b29b      	uxth	r3, r3
 8007450:	021b      	lsls	r3, r3, #8
 8007452:	b29b      	uxth	r3, r3
 8007454:	4413      	add	r3, r2
 8007456:	b29a      	uxth	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	80da      	strh	r2, [r3, #6]

}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007472:	2180      	movs	r1, #128	; 0x80
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fc57 	bl	8007d28 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800747a:	2100      	movs	r1, #0
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fc53 	bl	8007d28 <USBD_LL_StallEP>
}
 8007482:	bf00      	nop
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b086      	sub	sp, #24
 800748e:	af00      	add	r7, sp, #0
 8007490:	60f8      	str	r0, [r7, #12]
 8007492:	60b9      	str	r1, [r7, #8]
 8007494:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d032      	beq.n	8007506 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f000 f834 	bl	800750e <USBD_GetLen>
 80074a6:	4603      	mov	r3, r0
 80074a8:	3301      	adds	r3, #1
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	005b      	lsls	r3, r3, #1
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80074b4:	7dfb      	ldrb	r3, [r7, #23]
 80074b6:	1c5a      	adds	r2, r3, #1
 80074b8:	75fa      	strb	r2, [r7, #23]
 80074ba:	461a      	mov	r2, r3
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	4413      	add	r3, r2
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	7812      	ldrb	r2, [r2, #0]
 80074c4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80074c6:	7dfb      	ldrb	r3, [r7, #23]
 80074c8:	1c5a      	adds	r2, r3, #1
 80074ca:	75fa      	strb	r2, [r7, #23]
 80074cc:	461a      	mov	r2, r3
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	4413      	add	r3, r2
 80074d2:	2203      	movs	r2, #3
 80074d4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80074d6:	e012      	b.n	80074fe <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	1c5a      	adds	r2, r3, #1
 80074dc:	60fa      	str	r2, [r7, #12]
 80074de:	7dfa      	ldrb	r2, [r7, #23]
 80074e0:	1c51      	adds	r1, r2, #1
 80074e2:	75f9      	strb	r1, [r7, #23]
 80074e4:	4611      	mov	r1, r2
 80074e6:	68ba      	ldr	r2, [r7, #8]
 80074e8:	440a      	add	r2, r1
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80074ee:	7dfb      	ldrb	r3, [r7, #23]
 80074f0:	1c5a      	adds	r2, r3, #1
 80074f2:	75fa      	strb	r2, [r7, #23]
 80074f4:	461a      	mov	r2, r3
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	4413      	add	r3, r2
 80074fa:	2200      	movs	r2, #0
 80074fc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1e8      	bne.n	80074d8 <USBD_GetString+0x4e>
    }
  }
}
 8007506:	bf00      	nop
 8007508:	3718      	adds	r7, #24
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800750e:	b480      	push	{r7}
 8007510:	b085      	sub	sp, #20
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007516:	2300      	movs	r3, #0
 8007518:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800751a:	e005      	b.n	8007528 <USBD_GetLen+0x1a>
  {
    len++;
 800751c:	7bfb      	ldrb	r3, [r7, #15]
 800751e:	3301      	adds	r3, #1
 8007520:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	3301      	adds	r3, #1
 8007526:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1f5      	bne.n	800751c <USBD_GetLen+0xe>
  }

  return len;
 8007530:	7bfb      	ldrb	r3, [r7, #15]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	60f8      	str	r0, [r7, #12]
 8007546:	60b9      	str	r1, [r7, #8]
 8007548:	4613      	mov	r3, r2
 800754a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2202      	movs	r2, #2
 8007550:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007554:	88fa      	ldrh	r2, [r7, #6]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800755a:	88fa      	ldrh	r2, [r7, #6]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007560:	88fb      	ldrh	r3, [r7, #6]
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	2100      	movs	r1, #0
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 fc68 	bl	8007e3c <USBD_LL_Transmit>

  return USBD_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b084      	sub	sp, #16
 800757a:	af00      	add	r7, sp, #0
 800757c:	60f8      	str	r0, [r7, #12]
 800757e:	60b9      	str	r1, [r7, #8]
 8007580:	4613      	mov	r3, r2
 8007582:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007584:	88fb      	ldrh	r3, [r7, #6]
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	2100      	movs	r1, #0
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f000 fc56 	bl	8007e3c <USBD_LL_Transmit>

  return USBD_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b084      	sub	sp, #16
 800759e:	af00      	add	r7, sp, #0
 80075a0:	60f8      	str	r0, [r7, #12]
 80075a2:	60b9      	str	r1, [r7, #8]
 80075a4:	4613      	mov	r3, r2
 80075a6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2203      	movs	r2, #3
 80075ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80075b0:	88fa      	ldrh	r2, [r7, #6]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80075b8:	88fa      	ldrh	r2, [r7, #6]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075c0:	88fb      	ldrh	r3, [r7, #6]
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	2100      	movs	r1, #0
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 fc5b 	bl	8007e82 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	4613      	mov	r3, r2
 80075e2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075e4:	88fb      	ldrh	r3, [r7, #6]
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	2100      	movs	r1, #0
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f000 fc49 	bl	8007e82 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b082      	sub	sp, #8
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2204      	movs	r2, #4
 8007606:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800760a:	2300      	movs	r3, #0
 800760c:	2200      	movs	r2, #0
 800760e:	2100      	movs	r1, #0
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fc13 	bl	8007e3c <USBD_LL_Transmit>

  return USBD_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2205      	movs	r2, #5
 800762c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007630:	2300      	movs	r3, #0
 8007632:	2200      	movs	r2, #0
 8007634:	2100      	movs	r1, #0
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fc23 	bl	8007e82 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
	...

08007648 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800764c:	2200      	movs	r2, #0
 800764e:	4912      	ldr	r1, [pc, #72]	; (8007698 <MX_USB_DEVICE_Init+0x50>)
 8007650:	4812      	ldr	r0, [pc, #72]	; (800769c <MX_USB_DEVICE_Init+0x54>)
 8007652:	f7fe ff57 	bl	8006504 <USBD_Init>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d001      	beq.n	8007660 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800765c:	f7f8 fe5a 	bl	8000314 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007660:	490f      	ldr	r1, [pc, #60]	; (80076a0 <MX_USB_DEVICE_Init+0x58>)
 8007662:	480e      	ldr	r0, [pc, #56]	; (800769c <MX_USB_DEVICE_Init+0x54>)
 8007664:	f7fe ff79 	bl	800655a <USBD_RegisterClass>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d001      	beq.n	8007672 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800766e:	f7f8 fe51 	bl	8000314 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007672:	490c      	ldr	r1, [pc, #48]	; (80076a4 <MX_USB_DEVICE_Init+0x5c>)
 8007674:	4809      	ldr	r0, [pc, #36]	; (800769c <MX_USB_DEVICE_Init+0x54>)
 8007676:	f7fe fea7 	bl	80063c8 <USBD_CDC_RegisterInterface>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d001      	beq.n	8007684 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007680:	f7f8 fe48 	bl	8000314 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007684:	4805      	ldr	r0, [pc, #20]	; (800769c <MX_USB_DEVICE_Init+0x54>)
 8007686:	f7fe ff82 	bl	800658e <USBD_Start>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007690:	f7f8 fe40 	bl	8000314 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007694:	bf00      	nop
 8007696:	bd80      	pop	{r7, pc}
 8007698:	20000130 	.word	0x20000130
 800769c:	200001a4 	.word	0x200001a4
 80076a0:	2000001c 	.word	0x2000001c
 80076a4:	20000120 	.word	0x20000120

080076a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80076ac:	2200      	movs	r2, #0
 80076ae:	4905      	ldr	r1, [pc, #20]	; (80076c4 <CDC_Init_FS+0x1c>)
 80076b0:	4805      	ldr	r0, [pc, #20]	; (80076c8 <CDC_Init_FS+0x20>)
 80076b2:	f7fe fea0 	bl	80063f6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80076b6:	4905      	ldr	r1, [pc, #20]	; (80076cc <CDC_Init_FS+0x24>)
 80076b8:	4803      	ldr	r0, [pc, #12]	; (80076c8 <CDC_Init_FS+0x20>)
 80076ba:	f7fe feb6 	bl	800642a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80076be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	20000868 	.word	0x20000868
 80076c8:	200001a4 	.word	0x200001a4
 80076cc:	20000468 	.word	0x20000468

080076d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80076d0:	b480      	push	{r7}
 80076d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80076d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	4603      	mov	r3, r0
 80076e8:	6039      	str	r1, [r7, #0]
 80076ea:	71fb      	strb	r3, [r7, #7]
 80076ec:	4613      	mov	r3, r2
 80076ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80076f0:	79fb      	ldrb	r3, [r7, #7]
 80076f2:	2b23      	cmp	r3, #35	; 0x23
 80076f4:	d84a      	bhi.n	800778c <CDC_Control_FS+0xac>
 80076f6:	a201      	add	r2, pc, #4	; (adr r2, 80076fc <CDC_Control_FS+0x1c>)
 80076f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fc:	0800778d 	.word	0x0800778d
 8007700:	0800778d 	.word	0x0800778d
 8007704:	0800778d 	.word	0x0800778d
 8007708:	0800778d 	.word	0x0800778d
 800770c:	0800778d 	.word	0x0800778d
 8007710:	0800778d 	.word	0x0800778d
 8007714:	0800778d 	.word	0x0800778d
 8007718:	0800778d 	.word	0x0800778d
 800771c:	0800778d 	.word	0x0800778d
 8007720:	0800778d 	.word	0x0800778d
 8007724:	0800778d 	.word	0x0800778d
 8007728:	0800778d 	.word	0x0800778d
 800772c:	0800778d 	.word	0x0800778d
 8007730:	0800778d 	.word	0x0800778d
 8007734:	0800778d 	.word	0x0800778d
 8007738:	0800778d 	.word	0x0800778d
 800773c:	0800778d 	.word	0x0800778d
 8007740:	0800778d 	.word	0x0800778d
 8007744:	0800778d 	.word	0x0800778d
 8007748:	0800778d 	.word	0x0800778d
 800774c:	0800778d 	.word	0x0800778d
 8007750:	0800778d 	.word	0x0800778d
 8007754:	0800778d 	.word	0x0800778d
 8007758:	0800778d 	.word	0x0800778d
 800775c:	0800778d 	.word	0x0800778d
 8007760:	0800778d 	.word	0x0800778d
 8007764:	0800778d 	.word	0x0800778d
 8007768:	0800778d 	.word	0x0800778d
 800776c:	0800778d 	.word	0x0800778d
 8007770:	0800778d 	.word	0x0800778d
 8007774:	0800778d 	.word	0x0800778d
 8007778:	0800778d 	.word	0x0800778d
 800777c:	0800778d 	.word	0x0800778d
 8007780:	0800778d 	.word	0x0800778d
 8007784:	0800778d 	.word	0x0800778d
 8007788:	0800778d 	.word	0x0800778d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800778c:	bf00      	nop
  }

  return (USBD_OK);
 800778e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007790:	4618      	mov	r0, r3
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80077a6:	6879      	ldr	r1, [r7, #4]
 80077a8:	4805      	ldr	r0, [pc, #20]	; (80077c0 <CDC_Receive_FS+0x24>)
 80077aa:	f7fe fe3e 	bl	800642a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80077ae:	4804      	ldr	r0, [pc, #16]	; (80077c0 <CDC_Receive_FS+0x24>)
 80077b0:	f7fe fe7e 	bl	80064b0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80077b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	200001a4 	.word	0x200001a4

080077c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	460b      	mov	r3, r1
 80077ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80077d0:	2300      	movs	r3, #0
 80077d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80077d4:	4b0d      	ldr	r3, [pc, #52]	; (800780c <CDC_Transmit_FS+0x48>)
 80077d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e00b      	b.n	8007802 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80077ea:	887b      	ldrh	r3, [r7, #2]
 80077ec:	461a      	mov	r2, r3
 80077ee:	6879      	ldr	r1, [r7, #4]
 80077f0:	4806      	ldr	r0, [pc, #24]	; (800780c <CDC_Transmit_FS+0x48>)
 80077f2:	f7fe fe00 	bl	80063f6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80077f6:	4805      	ldr	r0, [pc, #20]	; (800780c <CDC_Transmit_FS+0x48>)
 80077f8:	f7fe fe2b 	bl	8006452 <USBD_CDC_TransmitPacket>
 80077fc:	4603      	mov	r3, r0
 80077fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007800:	7bfb      	ldrb	r3, [r7, #15]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	200001a4 	.word	0x200001a4

08007810 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	4603      	mov	r3, r0
 8007818:	6039      	str	r1, [r7, #0]
 800781a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	2212      	movs	r2, #18
 8007820:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007822:	4b03      	ldr	r3, [pc, #12]	; (8007830 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007824:	4618      	mov	r0, r3
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	2000014c 	.word	0x2000014c

08007834 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	4603      	mov	r3, r0
 800783c:	6039      	str	r1, [r7, #0]
 800783e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	2204      	movs	r2, #4
 8007844:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007846:	4b03      	ldr	r3, [pc, #12]	; (8007854 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007848:	4618      	mov	r0, r3
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr
 8007854:	20000160 	.word	0x20000160

08007858 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	4603      	mov	r3, r0
 8007860:	6039      	str	r1, [r7, #0]
 8007862:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007864:	79fb      	ldrb	r3, [r7, #7]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d105      	bne.n	8007876 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800786a:	683a      	ldr	r2, [r7, #0]
 800786c:	4907      	ldr	r1, [pc, #28]	; (800788c <USBD_FS_ProductStrDescriptor+0x34>)
 800786e:	4808      	ldr	r0, [pc, #32]	; (8007890 <USBD_FS_ProductStrDescriptor+0x38>)
 8007870:	f7ff fe0b 	bl	800748a <USBD_GetString>
 8007874:	e004      	b.n	8007880 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007876:	683a      	ldr	r2, [r7, #0]
 8007878:	4904      	ldr	r1, [pc, #16]	; (800788c <USBD_FS_ProductStrDescriptor+0x34>)
 800787a:	4805      	ldr	r0, [pc, #20]	; (8007890 <USBD_FS_ProductStrDescriptor+0x38>)
 800787c:	f7ff fe05 	bl	800748a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007880:	4b02      	ldr	r3, [pc, #8]	; (800788c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	20000c68 	.word	0x20000c68
 8007890:	0800801c 	.word	0x0800801c

08007894 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	4603      	mov	r3, r0
 800789c:	6039      	str	r1, [r7, #0]
 800789e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80078a0:	683a      	ldr	r2, [r7, #0]
 80078a2:	4904      	ldr	r1, [pc, #16]	; (80078b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80078a4:	4804      	ldr	r0, [pc, #16]	; (80078b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80078a6:	f7ff fdf0 	bl	800748a <USBD_GetString>
  return USBD_StrDesc;
 80078aa:	4b02      	ldr	r3, [pc, #8]	; (80078b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	20000c68 	.word	0x20000c68
 80078b8:	08008034 	.word	0x08008034

080078bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	4603      	mov	r3, r0
 80078c4:	6039      	str	r1, [r7, #0]
 80078c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	221a      	movs	r2, #26
 80078cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80078ce:	f000 f843 	bl	8007958 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80078d2:	4b02      	ldr	r3, [pc, #8]	; (80078dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3708      	adds	r7, #8
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	20000164 	.word	0x20000164

080078e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	4603      	mov	r3, r0
 80078e8:	6039      	str	r1, [r7, #0]
 80078ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80078ec:	79fb      	ldrb	r3, [r7, #7]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d105      	bne.n	80078fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	4907      	ldr	r1, [pc, #28]	; (8007914 <USBD_FS_ConfigStrDescriptor+0x34>)
 80078f6:	4808      	ldr	r0, [pc, #32]	; (8007918 <USBD_FS_ConfigStrDescriptor+0x38>)
 80078f8:	f7ff fdc7 	bl	800748a <USBD_GetString>
 80078fc:	e004      	b.n	8007908 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078fe:	683a      	ldr	r2, [r7, #0]
 8007900:	4904      	ldr	r1, [pc, #16]	; (8007914 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007902:	4805      	ldr	r0, [pc, #20]	; (8007918 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007904:	f7ff fdc1 	bl	800748a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007908:	4b02      	ldr	r3, [pc, #8]	; (8007914 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800790a:	4618      	mov	r0, r3
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	20000c68 	.word	0x20000c68
 8007918:	08008048 	.word	0x08008048

0800791c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	4603      	mov	r3, r0
 8007924:	6039      	str	r1, [r7, #0]
 8007926:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007928:	79fb      	ldrb	r3, [r7, #7]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d105      	bne.n	800793a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800792e:	683a      	ldr	r2, [r7, #0]
 8007930:	4907      	ldr	r1, [pc, #28]	; (8007950 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007932:	4808      	ldr	r0, [pc, #32]	; (8007954 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007934:	f7ff fda9 	bl	800748a <USBD_GetString>
 8007938:	e004      	b.n	8007944 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800793a:	683a      	ldr	r2, [r7, #0]
 800793c:	4904      	ldr	r1, [pc, #16]	; (8007950 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800793e:	4805      	ldr	r0, [pc, #20]	; (8007954 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007940:	f7ff fda3 	bl	800748a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007944:	4b02      	ldr	r3, [pc, #8]	; (8007950 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007946:	4618      	mov	r0, r3
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	20000c68 	.word	0x20000c68
 8007954:	08008054 	.word	0x08008054

08007958 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800795e:	4b0f      	ldr	r3, [pc, #60]	; (800799c <Get_SerialNum+0x44>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007964:	4b0e      	ldr	r3, [pc, #56]	; (80079a0 <Get_SerialNum+0x48>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800796a:	4b0e      	ldr	r3, [pc, #56]	; (80079a4 <Get_SerialNum+0x4c>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4413      	add	r3, r2
 8007976:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d009      	beq.n	8007992 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800797e:	2208      	movs	r2, #8
 8007980:	4909      	ldr	r1, [pc, #36]	; (80079a8 <Get_SerialNum+0x50>)
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 f814 	bl	80079b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007988:	2204      	movs	r2, #4
 800798a:	4908      	ldr	r1, [pc, #32]	; (80079ac <Get_SerialNum+0x54>)
 800798c:	68b8      	ldr	r0, [r7, #8]
 800798e:	f000 f80f 	bl	80079b0 <IntToUnicode>
  }
}
 8007992:	bf00      	nop
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	1ffff7ac 	.word	0x1ffff7ac
 80079a0:	1ffff7b0 	.word	0x1ffff7b0
 80079a4:	1ffff7b4 	.word	0x1ffff7b4
 80079a8:	20000166 	.word	0x20000166
 80079ac:	20000176 	.word	0x20000176

080079b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b087      	sub	sp, #28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	4613      	mov	r3, r2
 80079bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80079be:	2300      	movs	r3, #0
 80079c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80079c2:	2300      	movs	r3, #0
 80079c4:	75fb      	strb	r3, [r7, #23]
 80079c6:	e027      	b.n	8007a18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	0f1b      	lsrs	r3, r3, #28
 80079cc:	2b09      	cmp	r3, #9
 80079ce:	d80b      	bhi.n	80079e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	0f1b      	lsrs	r3, r3, #28
 80079d4:	b2da      	uxtb	r2, r3
 80079d6:	7dfb      	ldrb	r3, [r7, #23]
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	4619      	mov	r1, r3
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	440b      	add	r3, r1
 80079e0:	3230      	adds	r2, #48	; 0x30
 80079e2:	b2d2      	uxtb	r2, r2
 80079e4:	701a      	strb	r2, [r3, #0]
 80079e6:	e00a      	b.n	80079fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	0f1b      	lsrs	r3, r3, #28
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	7dfb      	ldrb	r3, [r7, #23]
 80079f0:	005b      	lsls	r3, r3, #1
 80079f2:	4619      	mov	r1, r3
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	440b      	add	r3, r1
 80079f8:	3237      	adds	r2, #55	; 0x37
 80079fa:	b2d2      	uxtb	r2, r2
 80079fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	011b      	lsls	r3, r3, #4
 8007a02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a04:	7dfb      	ldrb	r3, [r7, #23]
 8007a06:	005b      	lsls	r3, r3, #1
 8007a08:	3301      	adds	r3, #1
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	2200      	movs	r2, #0
 8007a10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a12:	7dfb      	ldrb	r3, [r7, #23]
 8007a14:	3301      	adds	r3, #1
 8007a16:	75fb      	strb	r3, [r7, #23]
 8007a18:	7dfa      	ldrb	r2, [r7, #23]
 8007a1a:	79fb      	ldrb	r3, [r7, #7]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d3d3      	bcc.n	80079c8 <IntToUnicode+0x18>
  }
}
 8007a20:	bf00      	nop
 8007a22:	bf00      	nop
 8007a24:	371c      	adds	r7, #28
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
	...

08007a30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a0d      	ldr	r2, [pc, #52]	; (8007a74 <HAL_PCD_MspInit+0x44>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d113      	bne.n	8007a6a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007a42:	4b0d      	ldr	r3, [pc, #52]	; (8007a78 <HAL_PCD_MspInit+0x48>)
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	4a0c      	ldr	r2, [pc, #48]	; (8007a78 <HAL_PCD_MspInit+0x48>)
 8007a48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a4c:	61d3      	str	r3, [r2, #28]
 8007a4e:	4b0a      	ldr	r3, [pc, #40]	; (8007a78 <HAL_PCD_MspInit+0x48>)
 8007a50:	69db      	ldr	r3, [r3, #28]
 8007a52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a56:	60fb      	str	r3, [r7, #12]
 8007a58:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	2014      	movs	r0, #20
 8007a60:	f7f8 fe57 	bl	8000712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8007a64:	2014      	movs	r0, #20
 8007a66:	f7f8 fe70 	bl	800074a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007a6a:	bf00      	nop
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	40005c00 	.word	0x40005c00
 8007a78:	40021000 	.word	0x40021000

08007a7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007a90:	4619      	mov	r1, r3
 8007a92:	4610      	mov	r0, r2
 8007a94:	f7fe fdc4 	bl	8006620 <USBD_LL_SetupStage>
}
 8007a98:	bf00      	nop
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007ab2:	78fa      	ldrb	r2, [r7, #3]
 8007ab4:	6879      	ldr	r1, [r7, #4]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	4413      	add	r3, r2
 8007abc:	00db      	lsls	r3, r3, #3
 8007abe:	440b      	add	r3, r1
 8007ac0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	78fb      	ldrb	r3, [r7, #3]
 8007ac8:	4619      	mov	r1, r3
 8007aca:	f7fe fdf6 	bl	80066ba <USBD_LL_DataOutStage>
}
 8007ace:	bf00      	nop
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b082      	sub	sp, #8
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	460b      	mov	r3, r1
 8007ae0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007ae8:	78fa      	ldrb	r2, [r7, #3]
 8007aea:	6879      	ldr	r1, [r7, #4]
 8007aec:	4613      	mov	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	00db      	lsls	r3, r3, #3
 8007af4:	440b      	add	r3, r1
 8007af6:	333c      	adds	r3, #60	; 0x3c
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	78fb      	ldrb	r3, [r7, #3]
 8007afc:	4619      	mov	r1, r3
 8007afe:	f7fe fe4d 	bl	800679c <USBD_LL_DataInStage>
}
 8007b02:	bf00      	nop
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b082      	sub	sp, #8
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fe ff60 	bl	80069de <USBD_LL_SOF>
}
 8007b1e:	bf00      	nop
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b084      	sub	sp, #16
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d001      	beq.n	8007b3e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007b3a:	f7f8 fbeb 	bl	8000314 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007b44:	7bfa      	ldrb	r2, [r7, #15]
 8007b46:	4611      	mov	r1, r2
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fe ff0d 	bl	8006968 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7fe fec6 	bl	80068e6 <USBD_LL_Reset>
}
 8007b5a:	bf00      	nop
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
	...

08007b64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fe ff08 	bl	8006988 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d005      	beq.n	8007b8c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b80:	4b04      	ldr	r3, [pc, #16]	; (8007b94 <HAL_PCD_SuspendCallback+0x30>)
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	4a03      	ldr	r2, [pc, #12]	; (8007b94 <HAL_PCD_SuspendCallback+0x30>)
 8007b86:	f043 0306 	orr.w	r3, r3, #6
 8007b8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007b8c:	bf00      	nop
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	e000ed00 	.word	0xe000ed00

08007b98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fe ff03 	bl	80069b2 <USBD_LL_Resume>
}
 8007bac:	bf00      	nop
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007bbc:	4a28      	ldr	r2, [pc, #160]	; (8007c60 <USBD_LL_Init+0xac>)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a26      	ldr	r2, [pc, #152]	; (8007c60 <USBD_LL_Init+0xac>)
 8007bc8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007bcc:	4b24      	ldr	r3, [pc, #144]	; (8007c60 <USBD_LL_Init+0xac>)
 8007bce:	4a25      	ldr	r2, [pc, #148]	; (8007c64 <USBD_LL_Init+0xb0>)
 8007bd0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007bd2:	4b23      	ldr	r3, [pc, #140]	; (8007c60 <USBD_LL_Init+0xac>)
 8007bd4:	2208      	movs	r2, #8
 8007bd6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007bd8:	4b21      	ldr	r3, [pc, #132]	; (8007c60 <USBD_LL_Init+0xac>)
 8007bda:	2202      	movs	r2, #2
 8007bdc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007bde:	4b20      	ldr	r3, [pc, #128]	; (8007c60 <USBD_LL_Init+0xac>)
 8007be0:	2202      	movs	r2, #2
 8007be2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007be4:	4b1e      	ldr	r3, [pc, #120]	; (8007c60 <USBD_LL_Init+0xac>)
 8007be6:	2200      	movs	r2, #0
 8007be8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007bea:	4b1d      	ldr	r3, [pc, #116]	; (8007c60 <USBD_LL_Init+0xac>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007bf0:	481b      	ldr	r0, [pc, #108]	; (8007c60 <USBD_LL_Init+0xac>)
 8007bf2:	f7f8 fdc4 	bl	800077e <HAL_PCD_Init>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007bfc:	f7f8 fb8a 	bl	8000314 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c06:	2318      	movs	r3, #24
 8007c08:	2200      	movs	r2, #0
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	f7fa fa37 	bl	800207e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c16:	2358      	movs	r3, #88	; 0x58
 8007c18:	2200      	movs	r2, #0
 8007c1a:	2180      	movs	r1, #128	; 0x80
 8007c1c:	f7fa fa2f 	bl	800207e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c26:	23c0      	movs	r3, #192	; 0xc0
 8007c28:	2200      	movs	r2, #0
 8007c2a:	2181      	movs	r1, #129	; 0x81
 8007c2c:	f7fa fa27 	bl	800207e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c36:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2101      	movs	r1, #1
 8007c3e:	f7fa fa1e 	bl	800207e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	2182      	movs	r1, #130	; 0x82
 8007c50:	f7fa fa15 	bl	800207e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	20000e68 	.word	0x20000e68
 8007c64:	40005c00 	.word	0x40005c00

08007c68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c74:	2300      	movs	r3, #0
 8007c76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7f8 fe4f 	bl	8000922 <HAL_PCD_Start>
 8007c84:	4603      	mov	r3, r0
 8007c86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f000 f954 	bl	8007f38 <USBD_Get_USB_Status>
 8007c90:	4603      	mov	r3, r0
 8007c92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c94:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b084      	sub	sp, #16
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	4608      	mov	r0, r1
 8007ca8:	4611      	mov	r1, r2
 8007caa:	461a      	mov	r2, r3
 8007cac:	4603      	mov	r3, r0
 8007cae:	70fb      	strb	r3, [r7, #3]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	70bb      	strb	r3, [r7, #2]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007cc6:	78bb      	ldrb	r3, [r7, #2]
 8007cc8:	883a      	ldrh	r2, [r7, #0]
 8007cca:	78f9      	ldrb	r1, [r7, #3]
 8007ccc:	f7f8 ff48 	bl	8000b60 <HAL_PCD_EP_Open>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 f92e 	bl	8007f38 <USBD_Get_USB_Status>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ce0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b084      	sub	sp, #16
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d04:	78fa      	ldrb	r2, [r7, #3]
 8007d06:	4611      	mov	r1, r2
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7f8 ff86 	bl	8000c1a <HAL_PCD_EP_Close>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
 8007d14:	4618      	mov	r0, r3
 8007d16:	f000 f90f 	bl	8007f38 <USBD_Get_USB_Status>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d42:	78fa      	ldrb	r2, [r7, #3]
 8007d44:	4611      	mov	r1, r2
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7f9 f82f 	bl	8000daa <HAL_PCD_EP_SetStall>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d50:	7bfb      	ldrb	r3, [r7, #15]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 f8f0 	bl	8007f38 <USBD_Get_USB_Status>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d76:	2300      	movs	r3, #0
 8007d78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d80:	78fa      	ldrb	r2, [r7, #3]
 8007d82:	4611      	mov	r1, r2
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7f9 f862 	bl	8000e4e <HAL_PCD_EP_ClrStall>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 f8d1 	bl	8007f38 <USBD_Get_USB_Status>
 8007d96:	4603      	mov	r3, r0
 8007d98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	460b      	mov	r3, r1
 8007dae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007db6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007db8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	da0c      	bge.n	8007dda <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007dc0:	78fb      	ldrb	r3, [r7, #3]
 8007dc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dc6:	68f9      	ldr	r1, [r7, #12]
 8007dc8:	1c5a      	adds	r2, r3, #1
 8007dca:	4613      	mov	r3, r2
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	4413      	add	r3, r2
 8007dd0:	00db      	lsls	r3, r3, #3
 8007dd2:	440b      	add	r3, r1
 8007dd4:	3302      	adds	r3, #2
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	e00b      	b.n	8007df2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007dda:	78fb      	ldrb	r3, [r7, #3]
 8007ddc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007de0:	68f9      	ldr	r1, [r7, #12]
 8007de2:	4613      	mov	r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4413      	add	r3, r2
 8007de8:	00db      	lsls	r3, r3, #3
 8007dea:	440b      	add	r3, r1
 8007dec:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007df0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b084      	sub	sp, #16
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	460b      	mov	r3, r1
 8007e08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e18:	78fa      	ldrb	r2, [r7, #3]
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7f8 fe7a 	bl	8000b16 <HAL_PCD_SetAddress>
 8007e22:	4603      	mov	r3, r0
 8007e24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e26:	7bfb      	ldrb	r3, [r7, #15]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 f885 	bl	8007f38 <USBD_Get_USB_Status>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e32:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	607a      	str	r2, [r7, #4]
 8007e46:	461a      	mov	r2, r3
 8007e48:	460b      	mov	r3, r1
 8007e4a:	72fb      	strb	r3, [r7, #11]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e5e:	893b      	ldrh	r3, [r7, #8]
 8007e60:	7af9      	ldrb	r1, [r7, #11]
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	f7f8 ff6a 	bl	8000d3c <HAL_PCD_EP_Transmit>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e6c:	7dfb      	ldrb	r3, [r7, #23]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 f862 	bl	8007f38 <USBD_Get_USB_Status>
 8007e74:	4603      	mov	r3, r0
 8007e76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e78:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3718      	adds	r7, #24
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b086      	sub	sp, #24
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	60f8      	str	r0, [r7, #12]
 8007e8a:	607a      	str	r2, [r7, #4]
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	460b      	mov	r3, r1
 8007e90:	72fb      	strb	r3, [r7, #11]
 8007e92:	4613      	mov	r3, r2
 8007e94:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e96:	2300      	movs	r3, #0
 8007e98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ea4:	893b      	ldrh	r3, [r7, #8]
 8007ea6:	7af9      	ldrb	r1, [r7, #11]
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	f7f8 fefe 	bl	8000caa <HAL_PCD_EP_Receive>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eb2:	7dfb      	ldrb	r3, [r7, #23]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f000 f83f 	bl	8007f38 <USBD_Get_USB_Status>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ebe:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3718      	adds	r7, #24
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007eda:	78fa      	ldrb	r2, [r7, #3]
 8007edc:	4611      	mov	r1, r2
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7f8 ff14 	bl	8000d0c <HAL_PCD_EP_GetRxCount>
 8007ee4:	4603      	mov	r3, r0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
	...

08007ef0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007ef8:	4b03      	ldr	r3, [pc, #12]	; (8007f08 <USBD_static_malloc+0x18>)
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	370c      	adds	r7, #12
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	20001154 	.word	0x20001154

08007f0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]

}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	4603      	mov	r3, r0
 8007f40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f42:	2300      	movs	r3, #0
 8007f44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f46:	79fb      	ldrb	r3, [r7, #7]
 8007f48:	2b03      	cmp	r3, #3
 8007f4a:	d817      	bhi.n	8007f7c <USBD_Get_USB_Status+0x44>
 8007f4c:	a201      	add	r2, pc, #4	; (adr r2, 8007f54 <USBD_Get_USB_Status+0x1c>)
 8007f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f52:	bf00      	nop
 8007f54:	08007f65 	.word	0x08007f65
 8007f58:	08007f6b 	.word	0x08007f6b
 8007f5c:	08007f71 	.word	0x08007f71
 8007f60:	08007f77 	.word	0x08007f77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007f64:	2300      	movs	r3, #0
 8007f66:	73fb      	strb	r3, [r7, #15]
    break;
 8007f68:	e00b      	b.n	8007f82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f6a:	2302      	movs	r3, #2
 8007f6c:	73fb      	strb	r3, [r7, #15]
    break;
 8007f6e:	e008      	b.n	8007f82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f70:	2301      	movs	r3, #1
 8007f72:	73fb      	strb	r3, [r7, #15]
    break;
 8007f74:	e005      	b.n	8007f82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f76:	2302      	movs	r3, #2
 8007f78:	73fb      	strb	r3, [r7, #15]
    break;
 8007f7a:	e002      	b.n	8007f82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f80:	bf00      	nop
  }
  return usb_status;
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3714      	adds	r7, #20
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <__libc_init_array>:
 8007f90:	b570      	push	{r4, r5, r6, lr}
 8007f92:	4d0d      	ldr	r5, [pc, #52]	; (8007fc8 <__libc_init_array+0x38>)
 8007f94:	4c0d      	ldr	r4, [pc, #52]	; (8007fcc <__libc_init_array+0x3c>)
 8007f96:	1b64      	subs	r4, r4, r5
 8007f98:	10a4      	asrs	r4, r4, #2
 8007f9a:	2600      	movs	r6, #0
 8007f9c:	42a6      	cmp	r6, r4
 8007f9e:	d109      	bne.n	8007fb4 <__libc_init_array+0x24>
 8007fa0:	4d0b      	ldr	r5, [pc, #44]	; (8007fd0 <__libc_init_array+0x40>)
 8007fa2:	4c0c      	ldr	r4, [pc, #48]	; (8007fd4 <__libc_init_array+0x44>)
 8007fa4:	f000 f820 	bl	8007fe8 <_init>
 8007fa8:	1b64      	subs	r4, r4, r5
 8007faa:	10a4      	asrs	r4, r4, #2
 8007fac:	2600      	movs	r6, #0
 8007fae:	42a6      	cmp	r6, r4
 8007fb0:	d105      	bne.n	8007fbe <__libc_init_array+0x2e>
 8007fb2:	bd70      	pop	{r4, r5, r6, pc}
 8007fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fb8:	4798      	blx	r3
 8007fba:	3601      	adds	r6, #1
 8007fbc:	e7ee      	b.n	8007f9c <__libc_init_array+0xc>
 8007fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fc2:	4798      	blx	r3
 8007fc4:	3601      	adds	r6, #1
 8007fc6:	e7f2      	b.n	8007fae <__libc_init_array+0x1e>
 8007fc8:	08008094 	.word	0x08008094
 8007fcc:	08008094 	.word	0x08008094
 8007fd0:	08008094 	.word	0x08008094
 8007fd4:	08008098 	.word	0x08008098

08007fd8 <memset>:
 8007fd8:	4402      	add	r2, r0
 8007fda:	4603      	mov	r3, r0
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d100      	bne.n	8007fe2 <memset+0xa>
 8007fe0:	4770      	bx	lr
 8007fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8007fe6:	e7f9      	b.n	8007fdc <memset+0x4>

08007fe8 <_init>:
 8007fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fea:	bf00      	nop
 8007fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fee:	bc08      	pop	{r3}
 8007ff0:	469e      	mov	lr, r3
 8007ff2:	4770      	bx	lr

08007ff4 <_fini>:
 8007ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff6:	bf00      	nop
 8007ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ffa:	bc08      	pop	{r3}
 8007ffc:	469e      	mov	lr, r3
 8007ffe:	4770      	bx	lr
