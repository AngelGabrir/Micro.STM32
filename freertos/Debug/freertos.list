
freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08005fe0  08005fe0  00015fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006170  08006170  000204a4  2**0
                  CONTENTS
  4 .ARM          00000000  08006170  08006170  000204a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006170  08006170  000204a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006170  08006170  00016170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006174  08006174  00016174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a4  20000000  08006178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012c8  200004a4  0800661c  000204a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000176c  0800661c  0002176c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017877  00000000  00000000  000204d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033ec  00000000  00000000  00037d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  0003b138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  0003c3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d6cb  00000000  00000000  0003d4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016799  00000000  00000000  0005abab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000adfa3  00000000  00000000  00071344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f2e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f2c  00000000  00000000  0011f338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004a4 	.word	0x200004a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005fc8 	.word	0x08005fc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004a8 	.word	0x200004a8
 80001cc:	08005fc8 	.word	0x08005fc8

080001d0 <stepper_half_drive>:
#include "stm32f3xx_hal.h"
#include "StepMotor.h"

float anglePerSequence = 0.703125;
//funcion activacion de las bobinas stepper
void stepper_half_drive(int Paso) {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b0a2      	sub	sp, #136	; 0x88
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
    const int pinValues[][4] = {
 80001d8:	4a23      	ldr	r2, [pc, #140]	; (8000268 <stepper_half_drive+0x98>)
 80001da:	f107 0308 	add.w	r3, r7, #8
 80001de:	4611      	mov	r1, r2
 80001e0:	2280      	movs	r2, #128	; 0x80
 80001e2:	4618      	mov	r0, r3
 80001e4:	f005 fe18 	bl	8005e18 <memcpy>
        {0, 0, 1, 1}, // Paso 5
        {0, 0, 0, 1}, // Paso 6
        {1, 0, 0, 1}  // Paso 7
    };

    if (Paso >= 0 && Paso < 8) {
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	db37      	blt.n	800025e <stepper_half_drive+0x8e>
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	2b07      	cmp	r3, #7
 80001f2:	dc34      	bgt.n	800025e <stepper_half_drive+0x8e>
        HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, pinValues[Paso][0]);
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	011b      	lsls	r3, r3, #4
 80001f8:	3388      	adds	r3, #136	; 0x88
 80001fa:	443b      	add	r3, r7
 80001fc:	3b80      	subs	r3, #128	; 0x80
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	b2db      	uxtb	r3, r3
 8000202:	461a      	mov	r2, r3
 8000204:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800020c:	f001 fba2 	bl	8001954 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, pinValues[Paso][1]);
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	011b      	lsls	r3, r3, #4
 8000214:	3388      	adds	r3, #136	; 0x88
 8000216:	443b      	add	r3, r7
 8000218:	3b7c      	subs	r3, #124	; 0x7c
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	b2db      	uxtb	r3, r3
 800021e:	461a      	mov	r2, r3
 8000220:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000224:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000228:	f001 fb94 	bl	8001954 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, pinValues[Paso][2]);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	011b      	lsls	r3, r3, #4
 8000230:	3388      	adds	r3, #136	; 0x88
 8000232:	443b      	add	r3, r7
 8000234:	3b78      	subs	r3, #120	; 0x78
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	b2db      	uxtb	r3, r3
 800023a:	461a      	mov	r2, r3
 800023c:	2101      	movs	r1, #1
 800023e:	480b      	ldr	r0, [pc, #44]	; (800026c <stepper_half_drive+0x9c>)
 8000240:	f001 fb88 	bl	8001954 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, pinValues[Paso][3]);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	011b      	lsls	r3, r3, #4
 8000248:	3388      	adds	r3, #136	; 0x88
 800024a:	443b      	add	r3, r7
 800024c:	3b74      	subs	r3, #116	; 0x74
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	b2db      	uxtb	r3, r3
 8000252:	461a      	mov	r2, r3
 8000254:	2120      	movs	r1, #32
 8000256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800025a:	f001 fb7b 	bl	8001954 <HAL_GPIO_WritePin>
    }
}
 800025e:	bf00      	nop
 8000260:	3788      	adds	r7, #136	; 0x88
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	08005fe0 	.word	0x08005fe0
 800026c:	48000400 	.word	0x48000400

08000270 <stepper_set_rpm>:

//funcion velocidad
void stepper_set_rpm (int rpm)  //rpm maximo 13 y minimo 5
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	delay(60000000/stepsperrev/rpm);
 8000278:	f643 1238 	movw	r2, #14648	; 0x3938
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000282:	4618      	mov	r0, r3
 8000284:	f000 f86a 	bl	800035c <delay>
}
 8000288:	bf00      	nop
 800028a:	3708      	adds	r7, #8
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}

08000290 <stepper_step_angle>:



// funcion cambio de direccion
void stepper_step_angle(float angleE, int direction, int rpm) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b08a      	sub	sp, #40	; 0x28
 8000294:	af00      	add	r7, sp, #0
 8000296:	ed87 0a03 	vstr	s0, [r7, #12]
 800029a:	60b8      	str	r0, [r7, #8]
 800029c:	6079      	str	r1, [r7, #4]
    int numberOfSequences = (int)(angleE / anglePerSequence);
 800029e:	4b21      	ldr	r3, [pc, #132]	; (8000324 <stepper_step_angle+0x94>)
 80002a0:	ed93 7a00 	vldr	s14, [r3]
 80002a4:	edd7 6a03 	vldr	s13, [r7, #12]
 80002a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80002ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80002b0:	ee17 3a90 	vmov	r3, s15
 80002b4:	61fb      	str	r3, [r7, #28]

    for (int seq = 0; seq < numberOfSequences; seq++) {
 80002b6:	2300      	movs	r3, #0
 80002b8:	627b      	str	r3, [r7, #36]	; 0x24
 80002ba:	e02a      	b.n	8000312 <stepper_step_angle+0x82>
        int startStep = (direction == 0) ? 7 : 0;
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d101      	bne.n	80002c6 <stepper_step_angle+0x36>
 80002c2:	2307      	movs	r3, #7
 80002c4:	e000      	b.n	80002c8 <stepper_step_angle+0x38>
 80002c6:	2300      	movs	r3, #0
 80002c8:	61bb      	str	r3, [r7, #24]
        int endStep = (direction == 0) ? -1 : 8;
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d102      	bne.n	80002d6 <stepper_step_angle+0x46>
 80002d0:	f04f 33ff 	mov.w	r3, #4294967295
 80002d4:	e000      	b.n	80002d8 <stepper_step_angle+0x48>
 80002d6:	2308      	movs	r3, #8
 80002d8:	617b      	str	r3, [r7, #20]
        int stepIncrement = (direction == 0) ? -1 : 1;
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d102      	bne.n	80002e6 <stepper_step_angle+0x56>
 80002e0:	f04f 33ff 	mov.w	r3, #4294967295
 80002e4:	e000      	b.n	80002e8 <stepper_step_angle+0x58>
 80002e6:	2301      	movs	r3, #1
 80002e8:	613b      	str	r3, [r7, #16]

        for (int step = startStep; step != endStep; step += stepIncrement) {
 80002ea:	69bb      	ldr	r3, [r7, #24]
 80002ec:	623b      	str	r3, [r7, #32]
 80002ee:	e009      	b.n	8000304 <stepper_step_angle+0x74>
            stepper_half_drive(step);
 80002f0:	6a38      	ldr	r0, [r7, #32]
 80002f2:	f7ff ff6d 	bl	80001d0 <stepper_half_drive>
            stepper_set_rpm(rpm);
 80002f6:	6878      	ldr	r0, [r7, #4]
 80002f8:	f7ff ffba 	bl	8000270 <stepper_set_rpm>
        for (int step = startStep; step != endStep; step += stepIncrement) {
 80002fc:	6a3a      	ldr	r2, [r7, #32]
 80002fe:	693b      	ldr	r3, [r7, #16]
 8000300:	4413      	add	r3, r2
 8000302:	623b      	str	r3, [r7, #32]
 8000304:	6a3a      	ldr	r2, [r7, #32]
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	429a      	cmp	r2, r3
 800030a:	d1f1      	bne.n	80002f0 <stepper_step_angle+0x60>
    for (int seq = 0; seq < numberOfSequences; seq++) {
 800030c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800030e:	3301      	adds	r3, #1
 8000310:	627b      	str	r3, [r7, #36]	; 0x24
 8000312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	429a      	cmp	r2, r3
 8000318:	dbd0      	blt.n	80002bc <stepper_step_angle+0x2c>
        }
    }
}
 800031a:	bf00      	nop
 800031c:	bf00      	nop
 800031e:	3728      	adds	r7, #40	; 0x28
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	20000000 	.word	0x20000000

08000328 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000328:	b480      	push	{r7}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
 800032e:	60f8      	str	r0, [r7, #12]
 8000330:	60b9      	str	r1, [r7, #8]
 8000332:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	4a07      	ldr	r2, [pc, #28]	; (8000354 <vApplicationGetIdleTaskMemory+0x2c>)
 8000338:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	4a06      	ldr	r2, [pc, #24]	; (8000358 <vApplicationGetIdleTaskMemory+0x30>)
 800033e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2280      	movs	r2, #128	; 0x80
 8000344:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000346:	bf00      	nop
 8000348:	3714      	adds	r7, #20
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	200004c0 	.word	0x200004c0
 8000358:	20000574 	.word	0x20000574

0800035c <delay>:
#define DIR_PIN GPIO_PIN_7  // for motor1
#define DIR_PORT GPIOB     // for motor1
#define STEP_PIN GPIO_PIN_1 // for motor1
#define STEP_PORT GPIOA   // for motor1

void delay(uint16_t us) {
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000366:	4b09      	ldr	r3, [pc, #36]	; (800038c <delay+0x30>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2200      	movs	r2, #0
 800036c:	625a      	str	r2, [r3, #36]	; 0x24

	while (__HAL_TIM_GET_COUNTER(&htim1) < us)
 800036e:	bf00      	nop
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <delay+0x30>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000376:	88fb      	ldrh	r3, [r7, #6]
 8000378:	429a      	cmp	r2, r3
 800037a:	d3f9      	bcc.n	8000370 <delay+0x14>
		;
}
 800037c:	bf00      	nop
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	20000774 	.word	0x20000774

08000390 <microDelay1>:

#define stepsperrev 4096

// micro seconds delay for motor1
void microDelay1(uint16_t delayy) {
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800039a:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <microDelay1+0x30>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2200      	movs	r2, #0
 80003a0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delayy)
 80003a2:	bf00      	nop
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <microDelay1+0x30>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003aa:	88fb      	ldrh	r3, [r7, #6]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d3f9      	bcc.n	80003a4 <microDelay1+0x14>
		;
}
 80003b0:	bf00      	nop
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	20000774 	.word	0x20000774

080003c4 <step>:

// motor1 for both directions
void step(int stepss, uint8_t directionN, uint16_t delayyy) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	460b      	mov	r3, r1
 80003ce:	70fb      	strb	r3, [r7, #3]
 80003d0:	4613      	mov	r3, r2
 80003d2:	803b      	strh	r3, [r7, #0]
	int x;
	if (directionN == 0)
 80003d4:	78fb      	ldrb	r3, [r7, #3]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d105      	bne.n	80003e6 <step+0x22>
		HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_SET);
 80003da:	2201      	movs	r2, #1
 80003dc:	2180      	movs	r1, #128	; 0x80
 80003de:	4816      	ldr	r0, [pc, #88]	; (8000438 <step+0x74>)
 80003e0:	f001 fab8 	bl	8001954 <HAL_GPIO_WritePin>
 80003e4:	e004      	b.n	80003f0 <step+0x2c>
	else
		HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	2180      	movs	r1, #128	; 0x80
 80003ea:	4813      	ldr	r0, [pc, #76]	; (8000438 <step+0x74>)
 80003ec:	f001 fab2 	bl	8001954 <HAL_GPIO_WritePin>
	for (x = 0; x < stepss; x = x + 1) {
 80003f0:	2300      	movs	r3, #0
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	e016      	b.n	8000424 <step+0x60>
		HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_SET);
 80003f6:	2201      	movs	r2, #1
 80003f8:	2102      	movs	r1, #2
 80003fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003fe:	f001 faa9 	bl	8001954 <HAL_GPIO_WritePin>
		microDelay1(delayyy);
 8000402:	883b      	ldrh	r3, [r7, #0]
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ffc3 	bl	8000390 <microDelay1>
		HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_RESET);
 800040a:	2200      	movs	r2, #0
 800040c:	2102      	movs	r1, #2
 800040e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000412:	f001 fa9f 	bl	8001954 <HAL_GPIO_WritePin>
		microDelay1(delayyy);
 8000416:	883b      	ldrh	r3, [r7, #0]
 8000418:	4618      	mov	r0, r3
 800041a:	f7ff ffb9 	bl	8000390 <microDelay1>
	for (x = 0; x < stepss; x = x + 1) {
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	3301      	adds	r3, #1
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fa      	ldr	r2, [r7, #12]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	429a      	cmp	r2, r3
 800042a:	dbe4      	blt.n	80003f6 <step+0x32>
	}
}
 800042c:	bf00      	nop
 800042e:	bf00      	nop
 8000430:	3710      	adds	r7, #16
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	48000400 	.word	0x48000400

0800043c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800043c:	b5b0      	push	{r4, r5, r7, lr}
 800043e:	b096      	sub	sp, #88	; 0x58
 8000440:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000442:	f000 ff49 	bl	80012d8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000446:	f000 f85d 	bl	8000504 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800044a:	f000 f9bb 	bl	80007c4 <MX_GPIO_Init>
	MX_TIM2_Init();
 800044e:	f000 f90b 	bl	8000668 <MX_TIM2_Init>
	MX_TIM1_Init();
 8000452:	f000 f8b5 	bl	80005c0 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 8000456:	f000 f955 	bl	8000704 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800045a:	f000 f983 	bl	8000764 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 800045e:	4821      	ldr	r0, [pc, #132]	; (80004e4 <main+0xa8>)
 8000460:	f002 ff20 	bl	80032a4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim1);
 8000464:	4820      	ldr	r0, [pc, #128]	; (80004e8 <main+0xac>)
 8000466:	f002 ff1d 	bl	80032a4 <HAL_TIM_Base_Start>
	max_init(0x02);
 800046a:	2002      	movs	r0, #2
 800046c:	f000 fd4c 	bl	8000f08 <max_init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of Servo */
	osThreadDef(Servo, StartServo, osPriorityNormal, 0, 128);
 8000470:	4b1e      	ldr	r3, [pc, #120]	; (80004ec <main+0xb0>)
 8000472:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000476:	461d      	mov	r5, r3
 8000478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800047a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800047c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000480:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ServoHandle = osThreadCreate(osThread(Servo), NULL);
 8000484:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000488:	2100      	movs	r1, #0
 800048a:	4618      	mov	r0, r3
 800048c:	f004 fa4e 	bl	800492c <osThreadCreate>
 8000490:	4603      	mov	r3, r0
 8000492:	4a17      	ldr	r2, [pc, #92]	; (80004f0 <main+0xb4>)
 8000494:	6013      	str	r3, [r2, #0]

	/* definition and creation of Stepper */
	osThreadDef(Stepper, StartStepper, osPriorityNormal, 0, 128);
 8000496:	4b17      	ldr	r3, [pc, #92]	; (80004f4 <main+0xb8>)
 8000498:	f107 0420 	add.w	r4, r7, #32
 800049c:	461d      	mov	r5, r3
 800049e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	StepperHandle = osThreadCreate(osThread(Stepper), NULL);
 80004aa:	f107 0320 	add.w	r3, r7, #32
 80004ae:	2100      	movs	r1, #0
 80004b0:	4618      	mov	r0, r3
 80004b2:	f004 fa3b 	bl	800492c <osThreadCreate>
 80004b6:	4603      	mov	r3, r0
 80004b8:	4a0f      	ldr	r2, [pc, #60]	; (80004f8 <main+0xbc>)
 80004ba:	6013      	str	r3, [r2, #0]

	/* definition and creation of Interrumpir */
	osThreadDef(Interrumpir, StartInterrumpir, osPriorityNormal, 0, 128);
 80004bc:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <main+0xc0>)
 80004be:	1d3c      	adds	r4, r7, #4
 80004c0:	461d      	mov	r5, r3
 80004c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	InterrumpirHandle = osThreadCreate(osThread(Interrumpir), NULL);
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2100      	movs	r1, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f004 fa2a 	bl	800492c <osThreadCreate>
 80004d8:	4603      	mov	r3, r0
 80004da:	4a09      	ldr	r2, [pc, #36]	; (8000500 <main+0xc4>)
 80004dc:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80004de:	f004 fa1e 	bl	800491e <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80004e2:	e7fe      	b.n	80004e2 <main+0xa6>
 80004e4:	200007c0 	.word	0x200007c0
 80004e8:	20000774 	.word	0x20000774
 80004ec:	0800607c 	.word	0x0800607c
 80004f0:	2000091c 	.word	0x2000091c
 80004f4:	08006098 	.word	0x08006098
 80004f8:	20000920 	.word	0x20000920
 80004fc:	080060b4 	.word	0x080060b4
 8000500:	20000924 	.word	0x20000924

08000504 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b09c      	sub	sp, #112	; 0x70
 8000508:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800050a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800050e:	2228      	movs	r2, #40	; 0x28
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f005 fc8e 	bl	8005e34 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000518:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000528:	463b      	mov	r3, r7
 800052a:	2234      	movs	r2, #52	; 0x34
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f005 fc80 	bl	8005e34 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000534:	2301      	movs	r3, #1
 8000536:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000538:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800053c:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000542:	2301      	movs	r3, #1
 8000544:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000546:	2302      	movs	r3, #2
 8000548:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800054e:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000550:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000554:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000556:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800055a:	4618      	mov	r0, r3
 800055c:	f001 fa12 	bl	8001984 <HAL_RCC_OscConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x66>
		Error_Handler();
 8000566:	f000 fa65 	bl	8000a34 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800056a:	230f      	movs	r3, #15
 800056c:	637b      	str	r3, [r7, #52]	; 0x34
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	647b      	str	r3, [r7, #68]	; 0x44

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000580:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000584:	2102      	movs	r1, #2
 8000586:	4618      	mov	r0, r3
 8000588:	f002 fa3a 	bl	8002a00 <HAL_RCC_ClockConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x92>
		Error_Handler();
 8000592:	f000 fa4f 	bl	8000a34 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8000596:	f241 0301 	movw	r3, #4097	; 0x1001
 800059a:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_TIM1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80005a0:	2300      	movs	r3, #0
 80005a2:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80005a4:	463b      	mov	r3, r7
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 fc92 	bl	8002ed0 <HAL_RCCEx_PeriphCLKConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xb2>
		Error_Handler();
 80005b2:	f000 fa3f 	bl	8000a34 <Error_Handler>
	}
}
 80005b6:	bf00      	nop
 80005b8:	3770      	adds	r7, #112	; 0x70
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80005c6:	f107 0310 	add.w	r3, r7, #16
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80005de:	4b20      	ldr	r3, [pc, #128]	; (8000660 <MX_TIM1_Init+0xa0>)
 80005e0:	4a20      	ldr	r2, [pc, #128]	; (8000664 <MX_TIM1_Init+0xa4>)
 80005e2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 71;
 80005e4:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <MX_TIM1_Init+0xa0>)
 80005e6:	2247      	movs	r2, #71	; 0x47
 80005e8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <MX_TIM1_Init+0xa0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80005f0:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <MX_TIM1_Init+0xa0>)
 80005f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005f6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f8:	4b19      	ldr	r3, [pc, #100]	; (8000660 <MX_TIM1_Init+0xa0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80005fe:	4b18      	ldr	r3, [pc, #96]	; (8000660 <MX_TIM1_Init+0xa0>)
 8000600:	2200      	movs	r2, #0
 8000602:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000604:	4b16      	ldr	r3, [pc, #88]	; (8000660 <MX_TIM1_Init+0xa0>)
 8000606:	2200      	movs	r2, #0
 8000608:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800060a:	4815      	ldr	r0, [pc, #84]	; (8000660 <MX_TIM1_Init+0xa0>)
 800060c:	f002 fdf2 	bl	80031f4 <HAL_TIM_Base_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_TIM1_Init+0x5a>
		Error_Handler();
 8000616:	f000 fa0d 	bl	8000a34 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800061a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	4619      	mov	r1, r3
 8000626:	480e      	ldr	r0, [pc, #56]	; (8000660 <MX_TIM1_Init+0xa0>)
 8000628:	f002 fffb 	bl	8003622 <HAL_TIM_ConfigClockSource>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_TIM1_Init+0x76>
		Error_Handler();
 8000632:	f000 f9ff 	bl	8000a34 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	4619      	mov	r1, r3
 8000646:	4806      	ldr	r0, [pc, #24]	; (8000660 <MX_TIM1_Init+0xa0>)
 8000648:	f003 f9e4 	bl	8003a14 <HAL_TIMEx_MasterConfigSynchronization>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8000652:	f000 f9ef 	bl	8000a34 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	3720      	adds	r7, #32
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000774 	.word	0x20000774
 8000664:	40012c00 	.word	0x40012c00

08000668 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800066e:	f107 0310 	add.w	r3, r7, #16
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000686:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <MX_TIM2_Init+0x98>)
 8000688:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800068c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72 - 1;
 800068e:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <MX_TIM2_Init+0x98>)
 8000690:	2247      	movs	r2, #71	; 0x47
 8000692:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000694:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <MX_TIM2_Init+0x98>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 800069a:	4b19      	ldr	r3, [pc, #100]	; (8000700 <MX_TIM2_Init+0x98>)
 800069c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006a0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <MX_TIM2_Init+0x98>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <MX_TIM2_Init+0x98>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80006ae:	4814      	ldr	r0, [pc, #80]	; (8000700 <MX_TIM2_Init+0x98>)
 80006b0:	f002 fda0 	bl	80031f4 <HAL_TIM_Base_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM2_Init+0x56>
		Error_Handler();
 80006ba:	f000 f9bb 	bl	8000a34 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	4619      	mov	r1, r3
 80006ca:	480d      	ldr	r0, [pc, #52]	; (8000700 <MX_TIM2_Init+0x98>)
 80006cc:	f002 ffa9 	bl	8003622 <HAL_TIM_ConfigClockSource>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM2_Init+0x72>
		Error_Handler();
 80006d6:	f000 f9ad 	bl	8000a34 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	4806      	ldr	r0, [pc, #24]	; (8000700 <MX_TIM2_Init+0x98>)
 80006e8:	f003 f994 	bl	8003a14 <HAL_TIMEx_MasterConfigSynchronization>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 80006f2:	f000 f99f 	bl	8000a34 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	3720      	adds	r7, #32
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200007c0 	.word	0x200007c0

08000704 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_USART1_UART_Init+0x58>)
 800070a:	4a15      	ldr	r2, [pc, #84]	; (8000760 <MX_USART1_UART_Init+0x5c>)
 800070c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_USART1_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_USART1_UART_Init+0x58>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_USART1_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000748:	f003 f9e8 	bl	8003b1c <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000752:	f000 f96f 	bl	8000a34 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	2000080c 	.word	0x2000080c
 8000760:	40013800 	.word	0x40013800

08000764 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_USART2_UART_Init+0x58>)
 800076a:	4a15      	ldr	r2, [pc, #84]	; (80007c0 <MX_USART2_UART_Init+0x5c>)
 800076c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_USART2_UART_Init+0x58>)
 8000770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000774:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_USART2_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_USART2_UART_Init+0x58>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_USART2_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_USART2_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_USART2_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_USART2_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_USART2_UART_Init+0x58>)
 80007a8:	f003 f9b8 	bl	8003b1c <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80007b2:	f000 f93f 	bl	8000a34 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000894 	.word	0x20000894
 80007c0:	40004400 	.word	0x40004400

080007c4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	4b46      	ldr	r3, [pc, #280]	; (80008f4 <MX_GPIO_Init+0x130>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	4a45      	ldr	r2, [pc, #276]	; (80008f4 <MX_GPIO_Init+0x130>)
 80007e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007e4:	6153      	str	r3, [r2, #20]
 80007e6:	4b43      	ldr	r3, [pc, #268]	; (80008f4 <MX_GPIO_Init+0x130>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80007f2:	4b40      	ldr	r3, [pc, #256]	; (80008f4 <MX_GPIO_Init+0x130>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	4a3f      	ldr	r2, [pc, #252]	; (80008f4 <MX_GPIO_Init+0x130>)
 80007f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007fc:	6153      	str	r3, [r2, #20]
 80007fe:	4b3d      	ldr	r3, [pc, #244]	; (80008f4 <MX_GPIO_Init+0x130>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b3a      	ldr	r3, [pc, #232]	; (80008f4 <MX_GPIO_Init+0x130>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	4a39      	ldr	r2, [pc, #228]	; (80008f4 <MX_GPIO_Init+0x130>)
 8000810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000814:	6153      	str	r3, [r2, #20]
 8000816:	4b37      	ldr	r3, [pc, #220]	; (80008f4 <MX_GPIO_Init+0x130>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b34      	ldr	r3, [pc, #208]	; (80008f4 <MX_GPIO_Init+0x130>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	4a33      	ldr	r2, [pc, #204]	; (80008f4 <MX_GPIO_Init+0x130>)
 8000828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800082c:	6153      	str	r3, [r2, #20]
 800082e:	4b31      	ldr	r3, [pc, #196]	; (80008f4 <MX_GPIO_Init+0x130>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2101      	movs	r1, #1
 800083e:	482e      	ldr	r0, [pc, #184]	; (80008f8 <MX_GPIO_Init+0x134>)
 8000840:	f001 f888 	bl	8001954 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | IN4_Pin | IN1_Pin | IN2_Pin,
 8000844:	2200      	movs	r2, #0
 8000846:	f249 0122 	movw	r1, #36898	; 0x9022
 800084a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084e:	f001 f881 	bl	8001954 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000852:	2200      	movs	r2, #0
 8000854:	f24c 01c1 	movw	r1, #49345	; 0xc0c1
 8000858:	4828      	ldr	r0, [pc, #160]	; (80008fc <MX_GPIO_Init+0x138>)
 800085a:	f001 f87b 	bl	8001954 <HAL_GPIO_WritePin>
			IN3_Pin | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_6 | GPIO_PIN_7,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PC13 PC7 PC10 PC11
	 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_7 | GPIO_PIN_10 | GPIO_PIN_11
 800085e:	f44f 5372 	mov.w	r3, #15488	; 0x3c80
 8000862:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	4821      	ldr	r0, [pc, #132]	; (80008f8 <MX_GPIO_Init+0x134>)
 8000874:	f000 fee4 	bl	8001640 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000878:	2301      	movs	r3, #1
 800087a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	481a      	ldr	r0, [pc, #104]	; (80008f8 <MX_GPIO_Init+0x134>)
 8000890:	f000 fed6 	bl	8001640 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 IN4_Pin IN1_Pin IN2_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | IN4_Pin | IN1_Pin | IN2_Pin;
 8000894:	f249 0322 	movw	r3, #36898	; 0x9022
 8000898:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b0:	f000 fec6 	bl	8001640 <HAL_GPIO_Init>

	/*Configure GPIO pins : IN3_Pin PB14 PB15 PB6
	 PB7 */
	GPIO_InitStruct.Pin = IN3_Pin | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_6
 80008b4:	f24c 03c1 	movw	r3, #49345	; 0xc0c1
 80008b8:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	480b      	ldr	r0, [pc, #44]	; (80008fc <MX_GPIO_Init+0x138>)
 80008ce:	f000 feb7 	bl	8001640 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB13 PB3 PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 80008d2:	f242 0338 	movw	r3, #8248	; 0x2038
 80008d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_GPIO_Init+0x138>)
 80008e8:	f000 feaa 	bl	8001640 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80008ec:	bf00      	nop
 80008ee:	3728      	adds	r7, #40	; 0x28
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40021000 	.word	0x40021000
 80008f8:	48000800 	.word	0x48000800
 80008fc:	48000400 	.word	0x48000400

08000900 <StartServo>:
 * @brief  Function implementing the Servo thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartServo */
void StartServo(void const *argument) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	/* Infinite loop */
	for (;;) {

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)== GPIO_PIN_RESET) {
 8000908:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800090c:	4822      	ldr	r0, [pc, #136]	; (8000998 <StartServo+0x98>)
 800090e:	f001 f809 	bl	8001924 <HAL_GPIO_ReadPin>
 8000912:	4603      	mov	r3, r0
 8000914:	2b01      	cmp	r3, #1
 8000916:	d121      	bne.n	800095c <StartServo+0x5c>
 8000918:	2120      	movs	r1, #32
 800091a:	481f      	ldr	r0, [pc, #124]	; (8000998 <StartServo+0x98>)
 800091c:	f001 f802 	bl	8001924 <HAL_GPIO_ReadPin>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d11a      	bne.n	800095c <StartServo+0x5c>
			step(300, 0, 1500);
 8000926:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800092a:	2100      	movs	r1, #0
 800092c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000930:	f7ff fd48 	bl	80003c4 <step>
			osDelay(5000);
 8000934:	f241 3088 	movw	r0, #5000	; 0x1388
 8000938:	f004 f844 	bl	80049c4 <osDelay>
			stepper_step_angle(290, 0, 13);
 800093c:	210d      	movs	r1, #13
 800093e:	2000      	movs	r0, #0
 8000940:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800099c <StartServo+0x9c>
 8000944:	f7ff fca4 	bl	8000290 <stepper_step_angle>
			osDelay(5000);
 8000948:	f241 3088 	movw	r0, #5000	; 0x1388
 800094c:	f004 f83a 	bl	80049c4 <osDelay>
			stepper_step_angle(250, 1, 13);
 8000950:	210d      	movs	r1, #13
 8000952:	2001      	movs	r0, #1
 8000954:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80009a0 <StartServo+0xa0>
 8000958:	f7ff fc9a 	bl	8000290 <stepper_step_angle>
		}


		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == GPIO_PIN_SET) {
 800095c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000960:	4810      	ldr	r0, [pc, #64]	; (80009a4 <StartServo+0xa4>)
 8000962:	f000 ffdf 	bl	8001924 <HAL_GPIO_ReadPin>
 8000966:	4603      	mov	r3, r0
 8000968:	2b01      	cmp	r3, #1
 800096a:	d105      	bne.n	8000978 <StartServo+0x78>
			step(50, 0, 1500);
 800096c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000970:	2100      	movs	r1, #0
 8000972:	2032      	movs	r0, #50	; 0x32
 8000974:	f7ff fd26 	bl	80003c4 <step>

		}

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == GPIO_PIN_SET) {
 8000978:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800097c:	4809      	ldr	r0, [pc, #36]	; (80009a4 <StartServo+0xa4>)
 800097e:	f000 ffd1 	bl	8001924 <HAL_GPIO_ReadPin>
 8000982:	4603      	mov	r3, r0
 8000984:	2b01      	cmp	r3, #1
 8000986:	d1bf      	bne.n	8000908 <StartServo+0x8>
					step(10900, 1, 1500);
 8000988:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800098c:	2101      	movs	r1, #1
 800098e:	f642 2094 	movw	r0, #10900	; 0x2a94
 8000992:	f7ff fd17 	bl	80003c4 <step>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)== GPIO_PIN_RESET) {
 8000996:	e7b7      	b.n	8000908 <StartServo+0x8>
 8000998:	48000400 	.word	0x48000400
 800099c:	43910000 	.word	0x43910000
 80009a0:	437a0000 	.word	0x437a0000
 80009a4:	48000800 	.word	0x48000800

080009a8 <StartStepper>:
 * @brief Function implementing the Stepper thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartStepper */
void StartStepper(void const *argument) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartStepper */

	/* Infinite loop */
	for (;;) {
             if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) == GPIO_PIN_RESET) {
 80009b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b4:	4811      	ldr	r0, [pc, #68]	; (80009fc <StartStepper+0x54>)
 80009b6:	f000 ffb5 	bl	8001924 <HAL_GPIO_ReadPin>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d10e      	bne.n	80009de <StartStepper+0x36>
 80009c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c4:	480e      	ldr	r0, [pc, #56]	; (8000a00 <StartStepper+0x58>)
 80009c6:	f000 ffad 	bl	8001924 <HAL_GPIO_ReadPin>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d106      	bne.n	80009de <StartStepper+0x36>
            	 max_clear();
 80009d0:	f000 f9fe 	bl	8000dd0 <max_clear>
            	 scroll_char(27, 200, left);
 80009d4:	224c      	movs	r2, #76	; 0x4c
 80009d6:	21c8      	movs	r1, #200	; 0xc8
 80009d8:	201b      	movs	r0, #27
 80009da:	f000 f989 	bl	8000cf0 <scroll_char>

				}
             if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET) {
 80009de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e2:	4806      	ldr	r0, [pc, #24]	; (80009fc <StartStepper+0x54>)
 80009e4:	f000 ff9e 	bl	8001924 <HAL_GPIO_ReadPin>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d1e0      	bne.n	80009b0 <StartStepper+0x8>
            	 max_clear();
 80009ee:	f000 f9ef 	bl	8000dd0 <max_clear>
            	 write_char(127, 1);
 80009f2:	2101      	movs	r1, #1
 80009f4:	207f      	movs	r0, #127	; 0x7f
 80009f6:	f000 f941 	bl	8000c7c <write_char>
             if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) == GPIO_PIN_RESET) {
 80009fa:	e7d9      	b.n	80009b0 <StartStepper+0x8>
 80009fc:	48000400 	.word	0x48000400
 8000a00:	48000800 	.word	0x48000800

08000a04 <StartInterrumpir>:
 * @brief Function implementing the Interrumpir thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInterrumpir */
void StartInterrumpir(void const *argument) {
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartInterrumpir */
	/* Infinite loop */
	for (;;) {
 8000a0c:	e7fe      	b.n	8000a0c <StartInterrumpir+0x8>
	...

08000a10 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d101      	bne.n	8000a26 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000a22:	f000 fc6f 	bl	8001304 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40001000 	.word	0x40001000

08000a34 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a38:	b672      	cpsid	i
}
 8000a3a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a3c:	e7fe      	b.n	8000a3c <Error_Handler+0x8>
	...

08000a40 <write_byte>:
};



void write_byte (uint8_t byte)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	e01a      	b.n	8000a86 <write_byte+0x46>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a56:	4810      	ldr	r0, [pc, #64]	; (8000a98 <write_byte+0x58>)
 8000a58:	f000 ff7c 	bl	8001954 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	461a      	mov	r2, r3
 8000a66:	2140      	movs	r1, #64	; 0x40
 8000a68:	480b      	ldr	r0, [pc, #44]	; (8000a98 <write_byte+0x58>)
 8000a6a:	f000 ff73 	bl	8001954 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 8000a74:	2201      	movs	r2, #1
 8000a76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a7a:	4807      	ldr	r0, [pc, #28]	; (8000a98 <write_byte+0x58>)
 8000a7c:	f000 ff6a 	bl	8001954 <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	3301      	adds	r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	2b07      	cmp	r3, #7
 8000a8a:	dde1      	ble.n	8000a50 <write_byte+0x10>
	}
}
 8000a8c:	bf00      	nop
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	48000400 	.word	0x48000400

08000a9c <write_max_cmd>:


void write_max_cmd (uint8_t address, uint8_t cmd)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	460a      	mov	r2, r1
 8000aa6:	71fb      	strb	r3, [r7, #7]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8000aac:	2200      	movs	r2, #0
 8000aae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ab2:	4812      	ldr	r0, [pc, #72]	; (8000afc <write_max_cmd+0x60>)
 8000ab4:	f000 ff4e 	bl	8001954 <HAL_GPIO_WritePin>
	for (int i=0;i<num; i++)
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	e00a      	b.n	8000ad4 <write_max_cmd+0x38>
	{
		write_byte (address);
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ffbd 	bl	8000a40 <write_byte>
		write_byte (cmd); 
 8000ac6:	79bb      	ldrb	r3, [r7, #6]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ffb9 	bl	8000a40 <write_byte>
	for (int i=0;i<num; i++)
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	ddf1      	ble.n	8000abe <write_max_cmd+0x22>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ae0:	4806      	ldr	r0, [pc, #24]	; (8000afc <write_max_cmd+0x60>)
 8000ae2:	f000 ff37 	bl	8001954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aec:	4803      	ldr	r0, [pc, #12]	; (8000afc <write_max_cmd+0x60>)
 8000aee:	f000 ff31 	bl	8001954 <HAL_GPIO_WritePin>
}
 8000af2:	bf00      	nop
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	48000400 	.word	0x48000400

08000b00 <setled>:


void setled(uint8_t row, uint8_t col, uint8_t value)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	71bb      	strb	r3, [r7, #6]
 8000b0e:	4613      	mov	r3, r2
 8000b10:	717b      	strb	r3, [r7, #5]
  bitWrite(bufferr[col], row, value);
 8000b12:	797b      	ldrb	r3, [r7, #5]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d00d      	beq.n	8000b34 <setled+0x34>
 8000b18:	79bb      	ldrb	r3, [r7, #6]
 8000b1a:	4a2e      	ldr	r2, [pc, #184]	; (8000bd4 <setled+0xd4>)
 8000b1c:	5cd1      	ldrb	r1, [r2, r3]
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2201      	movs	r2, #1
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	79bb      	ldrb	r3, [r7, #6]
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	b2d1      	uxtb	r1, r2
 8000b2e:	4a29      	ldr	r2, [pc, #164]	; (8000bd4 <setled+0xd4>)
 8000b30:	54d1      	strb	r1, [r2, r3]
 8000b32:	e00e      	b.n	8000b52 <setled+0x52>
 8000b34:	79bb      	ldrb	r3, [r7, #6]
 8000b36:	4a27      	ldr	r2, [pc, #156]	; (8000bd4 <setled+0xd4>)
 8000b38:	5cd1      	ldrb	r1, [r2, r3]
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	43db      	mvns	r3, r3
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	79bb      	ldrb	r3, [r7, #6]
 8000b4a:	400a      	ands	r2, r1
 8000b4c:	b2d1      	uxtb	r1, r2
 8000b4e:	4a21      	ldr	r2, [pc, #132]	; (8000bd4 <setled+0xd4>)
 8000b50:	54d1      	strb	r1, [r2, r3]

	int n = col / 8;
 8000b52:	79bb      	ldrb	r3, [r7, #6]
 8000b54:	08db      	lsrs	r3, r3, #3
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	613b      	str	r3, [r7, #16]
	int c = col % 8;
 8000b5a:	79bb      	ldrb	r3, [r7, #6]
 8000b5c:	f003 0307 	and.w	r3, r3, #7
 8000b60:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW    
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b68:	481b      	ldr	r0, [pc, #108]	; (8000bd8 <setled+0xd8>)
 8000b6a:	f000 fef3 	bl	8001954 <HAL_GPIO_WritePin>
	for (int i=0; i<num; i++) 
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	e01b      	b.n	8000bac <setled+0xac>
	{
		if (i == (num-(n+1)))
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	425b      	negs	r3, r3
 8000b78:	697a      	ldr	r2, [r7, #20]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d10d      	bne.n	8000b9a <setled+0x9a>
		{
			write_byte (((c+1)));
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	3301      	adds	r3, #1
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff ff5a 	bl	8000a40 <write_byte>
			write_byte (bufferr[col]);
 8000b8c:	79bb      	ldrb	r3, [r7, #6]
 8000b8e:	4a11      	ldr	r2, [pc, #68]	; (8000bd4 <setled+0xd4>)
 8000b90:	5cd3      	ldrb	r3, [r2, r3]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ff54 	bl	8000a40 <write_byte>
 8000b98:	e005      	b.n	8000ba6 <setled+0xa6>
		}
		else
		{
			write_byte (0);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f7ff ff50 	bl	8000a40 <write_byte>
			write_byte (0);
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f7ff ff4d 	bl	8000a40 <write_byte>
	for (int i=0; i<num; i++) 
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	dde0      	ble.n	8000b74 <setled+0x74>
		}
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW 
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bb8:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <setled+0xd8>)
 8000bba:	f000 fecb 	bl	8001954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH 
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bc4:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <setled+0xd8>)
 8000bc6:	f000 fec5 	bl	8001954 <HAL_GPIO_WritePin>
}
 8000bca:	bf00      	nop
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000928 	.word	0x20000928
 8000bd8:	48000400 	.word	0x48000400

08000bdc <setrow>:


void setrow(uint8_t row, uint8_t value)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	460a      	mov	r2, r1
 8000be6:	71fb      	strb	r3, [r7, #7]
 8000be8:	4613      	mov	r3, r2
 8000bea:	71bb      	strb	r3, [r7, #6]
	int n = row / 8;
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	08db      	lsrs	r3, r3, #3
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	617b      	str	r3, [r7, #20]
	int r = row % 8;
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	613b      	str	r3, [r7, #16]
	
	uint8_t store = value;
 8000bfc:	79bb      	ldrb	r3, [r7, #6]
 8000bfe:	73fb      	strb	r3, [r7, #15]
	for (int i=0; i<num; i++) 
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
 8000c04:	e02d      	b.n	8000c62 <setrow+0x86>
	{
		if (i == ((n)))
 8000c06:	69fa      	ldr	r2, [r7, #28]
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d120      	bne.n	8000c50 <setrow+0x74>
		{
			//for (int col=0+(8*n); col<8+(8*n); col++)  // uncomment this if the character looks inverted about X axis
	for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	3307      	adds	r3, #7
 8000c14:	61bb      	str	r3, [r7, #24]
 8000c16:	e015      	b.n	8000c44 <setrow+0x68>
			{
				bool b = value&0x80;
 8000c18:	79bb      	ldrb	r3, [r7, #6]
 8000c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	bf14      	ite	ne
 8000c22:	2301      	movne	r3, #1
 8000c24:	2300      	moveq	r3, #0
 8000c26:	73bb      	strb	r3, [r7, #14]
				setled (r, col, b);
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	b2d1      	uxtb	r1, r2
 8000c30:	7bba      	ldrb	r2, [r7, #14]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff ff64 	bl	8000b00 <setled>
				value<<=1;
 8000c38:	79bb      	ldrb	r3, [r7, #6]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	71bb      	strb	r3, [r7, #6]
	for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	3b01      	subs	r3, #1
 8000c42:	61bb      	str	r3, [r7, #24]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	00db      	lsls	r3, r3, #3
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	dae4      	bge.n	8000c18 <setrow+0x3c>
 8000c4e:	e005      	b.n	8000c5c <setrow+0x80>
			}
		}
		else
		{
			write_byte (0);
 8000c50:	2000      	movs	r0, #0
 8000c52:	f7ff fef5 	bl	8000a40 <write_byte>
			write_byte (0);
 8000c56:	2000      	movs	r0, #0
 8000c58:	f7ff fef2 	bl	8000a40 <write_byte>
	for (int i=0; i<num; i++) 
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	61fb      	str	r3, [r7, #28]
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	ddce      	ble.n	8000c06 <setrow+0x2a>
		}
	}
	buffer_row[row] = store;
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	4903      	ldr	r1, [pc, #12]	; (8000c78 <setrow+0x9c>)
 8000c6c:	7bfa      	ldrb	r2, [r7, #15]
 8000c6e:	54ca      	strb	r2, [r1, r3]
}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000978 	.word	0x20000978

08000c7c <write_char>:
		


void write_char (char c, uint8_t max)  
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	460a      	mov	r2, r1
 8000c86:	71fb      	strb	r3, [r7, #7]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	71bb      	strb	r3, [r7, #6]
	int width = CH[8*c];
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	4a16      	ldr	r2, [pc, #88]	; (8000cec <write_char+0x70>)
 8000c92:	5cd3      	ldrb	r3, [r2, r3]
 8000c94:	60fb      	str	r3, [r7, #12]
	int start= (8*c)+1;
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	60bb      	str	r3, [r7, #8]
	int row =6;
 8000c9e:	2306      	movs	r3, #6
 8000ca0:	617b      	str	r3, [r7, #20]
	for (int j=start; j<(start+width); j++)
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	e016      	b.n	8000cd6 <write_char+0x5a>
	 //for (int j=start+7; j>=(start); j--)   // uncomment this if the character looks inverted about Y axis
	{
		setrow (row+(8*(max-1)), CH[j]);
 8000ca8:	79bb      	ldrb	r3, [r7, #6]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	4413      	add	r3, r2
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	490c      	ldr	r1, [pc, #48]	; (8000cec <write_char+0x70>)
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	440b      	add	r3, r1
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	f7ff ff89 	bl	8000bdc <setrow>
		row--;
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
	for (int j=start; j<(start+width); j++)
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	4413      	add	r3, r2
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	dbe2      	blt.n	8000ca8 <write_char+0x2c>
	}
}
 8000ce2:	bf00      	nop
 8000ce4:	bf00      	nop
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000004 	.word	0x20000004

08000cf0 <scroll_char>:



void scroll_char (char c,uint32_t speed, char direction)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	71bb      	strb	r3, [r7, #6]
	int width = CH[8*c];
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	4a31      	ldr	r2, [pc, #196]	; (8000dcc <scroll_char+0xdc>)
 8000d06:	5cd3      	ldrb	r3, [r2, r3]
 8000d08:	613b      	str	r3, [r7, #16]
	int start= (8*c)+1;	
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	3301      	adds	r3, #1
 8000d10:	60fb      	str	r3, [r7, #12]
	int row =7;
 8000d12:	2307      	movs	r3, #7
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
		switch (direction)
 8000d16:	79bb      	ldrb	r3, [r7, #6]
 8000d18:	2b4c      	cmp	r3, #76	; 0x4c
 8000d1a:	d002      	beq.n	8000d22 <scroll_char+0x32>
 8000d1c:	2b52      	cmp	r3, #82	; 0x52
 8000d1e:	d028      	beq.n	8000d72 <scroll_char+0x82>
						HAL_Delay (speed);
					}
					break;
			
				default :
					break;
 8000d20:	e04f      	b.n	8000dc2 <scroll_char+0xd2>
					for (int j=start; j<(start+width+1); j++)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	623b      	str	r3, [r7, #32]
 8000d26:	e00f      	b.n	8000d48 <scroll_char+0x58>
						setrow (row, CH[j]);
 8000d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	4927      	ldr	r1, [pc, #156]	; (8000dcc <scroll_char+0xdc>)
 8000d2e:	6a3b      	ldr	r3, [r7, #32]
 8000d30:	440b      	add	r3, r1
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4619      	mov	r1, r3
 8000d36:	4610      	mov	r0, r2
 8000d38:	f7ff ff50 	bl	8000bdc <setrow>
						row--;
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
					for (int j=start; j<(start+width+1); j++)
 8000d42:	6a3b      	ldr	r3, [r7, #32]
 8000d44:	3301      	adds	r3, #1
 8000d46:	623b      	str	r3, [r7, #32]
 8000d48:	68fa      	ldr	r2, [r7, #12]
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	6a3a      	ldr	r2, [r7, #32]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	dde9      	ble.n	8000d28 <scroll_char+0x38>
					for (int i=0;i<(num*8);i++)
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
 8000d58:	e007      	b.n	8000d6a <scroll_char+0x7a>
						shiftleft();
 8000d5a:	f000 f867 	bl	8000e2c <shiftleft>
						HAL_Delay (speed);
 8000d5e:	6838      	ldr	r0, [r7, #0]
 8000d60:	f000 faf0 	bl	8001344 <HAL_Delay>
					for (int i=0;i<(num*8);i++)
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	3301      	adds	r3, #1
 8000d68:	61fb      	str	r3, [r7, #28]
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	2b07      	cmp	r3, #7
 8000d6e:	ddf4      	ble.n	8000d5a <scroll_char+0x6a>
						break;
 8000d70:	e027      	b.n	8000dc2 <scroll_char+0xd2>
					for (int j=start; j<(start+width+1); j++)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	61bb      	str	r3, [r7, #24]
 8000d76:	e00f      	b.n	8000d98 <scroll_char+0xa8>
						setrow (row+((num-1)*8), CH[j]);
 8000d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	4913      	ldr	r1, [pc, #76]	; (8000dcc <scroll_char+0xdc>)
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	440b      	add	r3, r1
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	4610      	mov	r0, r2
 8000d88:	f7ff ff28 	bl	8000bdc <setrow>
						row--;
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
					for (int j=start; j<(start+width+1); j++)
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	3301      	adds	r3, #1
 8000d96:	61bb      	str	r3, [r7, #24]
 8000d98:	68fa      	ldr	r2, [r7, #12]
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	dde9      	ble.n	8000d78 <scroll_char+0x88>
					for (int i=0;i<(num*8);i++)
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	e007      	b.n	8000dba <scroll_char+0xca>
						shiftright();
 8000daa:	f000 f877 	bl	8000e9c <shiftright>
						HAL_Delay (speed);
 8000dae:	6838      	ldr	r0, [r7, #0]
 8000db0:	f000 fac8 	bl	8001344 <HAL_Delay>
					for (int i=0;i<(num*8);i++)
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	3301      	adds	r3, #1
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	2b07      	cmp	r3, #7
 8000dbe:	ddf4      	ble.n	8000daa <scroll_char+0xba>
					break;
 8000dc0:	bf00      	nop
			}			
}	
 8000dc2:	bf00      	nop
 8000dc4:	3728      	adds	r7, #40	; 0x28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000004 	.word	0x20000004

08000dd0 <max_clear>:
}



void max_clear(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
	for (int i=0; i<num*8; i++) 
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	e008      	b.n	8000dee <max_clear+0x1e>
		setrow(i,0);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fefa 	bl	8000bdc <setrow>
	for (int i=0; i<num*8; i++) 
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3301      	adds	r3, #1
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b07      	cmp	r3, #7
 8000df2:	ddf3      	ble.n	8000ddc <max_clear+0xc>
		
	for (int i=0; i<80; i++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	e00c      	b.n	8000e14 <max_clear+0x44>
	{
		bufferr[i] = 0;
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <max_clear+0x54>)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
	  buffer_row[i] = 0;
 8000e04:	4a08      	ldr	r2, [pc, #32]	; (8000e28 <max_clear+0x58>)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	4413      	add	r3, r2
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	3301      	adds	r3, #1
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	2b4f      	cmp	r3, #79	; 0x4f
 8000e18:	ddef      	ble.n	8000dfa <max_clear+0x2a>
	}
}
 8000e1a:	bf00      	nop
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000928 	.word	0x20000928
 8000e28:	20000978 	.word	0x20000978

08000e2c <shiftleft>:



void shiftleft(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
	int last = num*8-1;
 8000e32:	2307      	movs	r3, #7
 8000e34:	60bb      	str	r3, [r7, #8]
	uint8_t old = buffer_row[last];
 8000e36:	4a18      	ldr	r2, [pc, #96]	; (8000e98 <shiftleft+0x6c>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	71fb      	strb	r3, [r7, #7]
	int i;
	for (i=0; i<num*8; i++)
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	e00c      	b.n	8000e60 <shiftleft+0x34>
	{
		setrow(i, buffer_row[i]);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4913      	ldr	r1, [pc, #76]	; (8000e98 <shiftleft+0x6c>)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	440b      	add	r3, r1
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	4619      	mov	r1, r3
 8000e54:	4610      	mov	r0, r2
 8000e56:	f7ff fec1 	bl	8000bdc <setrow>
	for (i=0; i<num*8; i++)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2b07      	cmp	r3, #7
 8000e64:	ddef      	ble.n	8000e46 <shiftleft+0x1a>
	}
	for (i=79; i>0; i--)
 8000e66:	234f      	movs	r3, #79	; 0x4f
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	e00b      	b.n	8000e84 <shiftleft+0x58>
	{
 		buffer_row[i] = buffer_row[i-1];
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <shiftleft+0x6c>)
 8000e72:	5cd1      	ldrb	r1, [r2, r3]
 8000e74:	4a08      	ldr	r2, [pc, #32]	; (8000e98 <shiftleft+0x6c>)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	4413      	add	r3, r2
 8000e7a:	460a      	mov	r2, r1
 8000e7c:	701a      	strb	r2, [r3, #0]
	for (i=79; i>0; i--)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	dcf0      	bgt.n	8000e6c <shiftleft+0x40>
	}
	
	buffer_row[0] = old;
 8000e8a:	4a03      	ldr	r2, [pc, #12]	; (8000e98 <shiftleft+0x6c>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	7013      	strb	r3, [r2, #0]
}
 8000e90:	bf00      	nop
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000978 	.word	0x20000978

08000e9c <shiftright>:


void shiftright(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
	int last = num*8-1;	
 8000ea2:	2307      	movs	r3, #7
 8000ea4:	607b      	str	r3, [r7, #4]
	uint8_t old = buffer_row[0];
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <shiftright+0x68>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	70fb      	strb	r3, [r7, #3]
	
	for (int i=last; i>=0; i--)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	e00c      	b.n	8000ecc <shiftright+0x30>
	{
		setrow (i, buffer_row[i]);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4913      	ldr	r1, [pc, #76]	; (8000f04 <shiftright+0x68>)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	440b      	add	r3, r1
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	f7ff fe8b 	bl	8000bdc <setrow>
	for (int i=last; i>=0; i--)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	daef      	bge.n	8000eb2 <shiftright+0x16>
	}
	
	for (int i=0; i<80; i++)
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	e00b      	b.n	8000ef0 <shiftright+0x54>
	{
		buffer_row[i] = buffer_row[i+1];
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	3301      	adds	r3, #1
 8000edc:	4a09      	ldr	r2, [pc, #36]	; (8000f04 <shiftright+0x68>)
 8000ede:	5cd1      	ldrb	r1, [r2, r3]
 8000ee0:	4a08      	ldr	r2, [pc, #32]	; (8000f04 <shiftright+0x68>)
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	460a      	mov	r2, r1
 8000ee8:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	3301      	adds	r3, #1
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	2b4f      	cmp	r3, #79	; 0x4f
 8000ef4:	ddf0      	ble.n	8000ed8 <shiftright+0x3c>
	}
	
	buffer_row[num*8-1] = old;
 8000ef6:	4a03      	ldr	r2, [pc, #12]	; (8000f04 <shiftright+0x68>)
 8000ef8:	78fb      	ldrb	r3, [r7, #3]
 8000efa:	71d3      	strb	r3, [r2, #7]
}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000978 	.word	0x20000978

08000f08 <max_init>:



void max_init (uint8_t brightness)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
	write_max_cmd(0x09, 0x00);       //  no decoding
 8000f12:	2100      	movs	r1, #0
 8000f14:	2009      	movs	r0, #9
 8000f16:	f7ff fdc1 	bl	8000a9c <write_max_cmd>
	write_max_cmd(0x0b, 0x07);       //  scan limit = 8 LEDs
 8000f1a:	2107      	movs	r1, #7
 8000f1c:	200b      	movs	r0, #11
 8000f1e:	f7ff fdbd 	bl	8000a9c <write_max_cmd>
	write_max_cmd(0x0c, 0x01);       //  power down =0,normal mode = 1
 8000f22:	2101      	movs	r1, #1
 8000f24:	200c      	movs	r0, #12
 8000f26:	f7ff fdb9 	bl	8000a9c <write_max_cmd>
	write_max_cmd(0x0f, 0x00);       //  no test display
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	200f      	movs	r0, #15
 8000f2e:	f7ff fdb5 	bl	8000a9c <write_max_cmd>
	
	max_clear ();
 8000f32:	f7ff ff4d 	bl	8000dd0 <max_clear>
	
	write_max_cmd(0x0a, brightness);       //  brightness intensity
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	200a      	movs	r0, #10
 8000f3c:	f7ff fdae 	bl	8000a9c <write_max_cmd>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	4a10      	ldr	r2, [pc, #64]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6193      	str	r3, [r2, #24]
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f70:	61d3      	str	r3, [r2, #28]
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <HAL_MspInit+0x4c>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	210f      	movs	r1, #15
 8000f82:	f06f 0001 	mvn.w	r0, #1
 8000f86:	f000 fab9 	bl	80014fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40021000 	.word	0x40021000

08000f98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a13      	ldr	r2, [pc, #76]	; (8000ff4 <HAL_TIM_Base_MspInit+0x5c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d10c      	bne.n	8000fc4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000faa:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <HAL_TIM_Base_MspInit+0x60>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <HAL_TIM_Base_MspInit+0x60>)
 8000fb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fb4:	6193      	str	r3, [r2, #24]
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <HAL_TIM_Base_MspInit+0x60>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fc2:	e010      	b.n	8000fe6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fcc:	d10b      	bne.n	8000fe6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <HAL_TIM_Base_MspInit+0x60>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	4a09      	ldr	r2, [pc, #36]	; (8000ff8 <HAL_TIM_Base_MspInit+0x60>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	61d3      	str	r3, [r2, #28]
 8000fda:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <HAL_TIM_Base_MspInit+0x60>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
}
 8000fe6:	bf00      	nop
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40012c00 	.word	0x40012c00
 8000ff8:	40021000 	.word	0x40021000

08000ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08c      	sub	sp, #48	; 0x30
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a37      	ldr	r2, [pc, #220]	; (80010f8 <HAL_UART_MspInit+0xfc>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d132      	bne.n	8001084 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800101e:	4b37      	ldr	r3, [pc, #220]	; (80010fc <HAL_UART_MspInit+0x100>)
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	4a36      	ldr	r2, [pc, #216]	; (80010fc <HAL_UART_MspInit+0x100>)
 8001024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001028:	6193      	str	r3, [r2, #24]
 800102a:	4b34      	ldr	r3, [pc, #208]	; (80010fc <HAL_UART_MspInit+0x100>)
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001032:	61bb      	str	r3, [r7, #24]
 8001034:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	4b31      	ldr	r3, [pc, #196]	; (80010fc <HAL_UART_MspInit+0x100>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	4a30      	ldr	r2, [pc, #192]	; (80010fc <HAL_UART_MspInit+0x100>)
 800103c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001040:	6153      	str	r3, [r2, #20]
 8001042:	4b2e      	ldr	r3, [pc, #184]	; (80010fc <HAL_UART_MspInit+0x100>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800104e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001060:	2307      	movs	r3, #7
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	4619      	mov	r1, r3
 800106a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106e:	f000 fae7 	bl	8001640 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2105      	movs	r1, #5
 8001076:	2025      	movs	r0, #37	; 0x25
 8001078:	f000 fa40 	bl	80014fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800107c:	2025      	movs	r0, #37	; 0x25
 800107e:	f000 fa59 	bl	8001534 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001082:	e035      	b.n	80010f0 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART2)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a1d      	ldr	r2, [pc, #116]	; (8001100 <HAL_UART_MspInit+0x104>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d130      	bne.n	80010f0 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 800108e:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <HAL_UART_MspInit+0x100>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	4a1a      	ldr	r2, [pc, #104]	; (80010fc <HAL_UART_MspInit+0x100>)
 8001094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001098:	61d3      	str	r3, [r2, #28]
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <HAL_UART_MspInit+0x100>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <HAL_UART_MspInit+0x100>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	4a14      	ldr	r2, [pc, #80]	; (80010fc <HAL_UART_MspInit+0x100>)
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b0:	6153      	str	r3, [r2, #20]
 80010b2:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_UART_MspInit+0x100>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010be:	230c      	movs	r3, #12
 80010c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ce:	2307      	movs	r3, #7
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010dc:	f000 fab0 	bl	8001640 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2105      	movs	r1, #5
 80010e4:	2026      	movs	r0, #38	; 0x26
 80010e6:	f000 fa09 	bl	80014fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010ea:	2026      	movs	r0, #38	; 0x26
 80010ec:	f000 fa22 	bl	8001534 <HAL_NVIC_EnableIRQ>
}
 80010f0:	bf00      	nop
 80010f2:	3730      	adds	r7, #48	; 0x30
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40013800 	.word	0x40013800
 80010fc:	40021000 	.word	0x40021000
 8001100:	40004400 	.word	0x40004400

08001104 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08e      	sub	sp, #56	; 0x38
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800110c:	2300      	movs	r3, #0
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001110:	2300      	movs	r3, #0
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001114:	4b33      	ldr	r3, [pc, #204]	; (80011e4 <HAL_InitTick+0xe0>)
 8001116:	69db      	ldr	r3, [r3, #28]
 8001118:	4a32      	ldr	r2, [pc, #200]	; (80011e4 <HAL_InitTick+0xe0>)
 800111a:	f043 0310 	orr.w	r3, r3, #16
 800111e:	61d3      	str	r3, [r2, #28]
 8001120:	4b30      	ldr	r3, [pc, #192]	; (80011e4 <HAL_InitTick+0xe0>)
 8001122:	69db      	ldr	r3, [r3, #28]
 8001124:	f003 0310 	and.w	r3, r3, #16
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800112c:	f107 0210 	add.w	r2, r7, #16
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4611      	mov	r1, r2
 8001136:	4618      	mov	r0, r3
 8001138:	f001 fe98 	bl	8002e6c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800113c:	6a3b      	ldr	r3, [r7, #32]
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001142:	2b00      	cmp	r3, #0
 8001144:	d103      	bne.n	800114e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001146:	f001 fe4d 	bl	8002de4 <HAL_RCC_GetPCLK1Freq>
 800114a:	6378      	str	r0, [r7, #52]	; 0x34
 800114c:	e004      	b.n	8001158 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800114e:	f001 fe49 	bl	8002de4 <HAL_RCC_GetPCLK1Freq>
 8001152:	4603      	mov	r3, r0
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800115a:	4a23      	ldr	r2, [pc, #140]	; (80011e8 <HAL_InitTick+0xe4>)
 800115c:	fba2 2303 	umull	r2, r3, r2, r3
 8001160:	0c9b      	lsrs	r3, r3, #18
 8001162:	3b01      	subs	r3, #1
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001166:	4b21      	ldr	r3, [pc, #132]	; (80011ec <HAL_InitTick+0xe8>)
 8001168:	4a21      	ldr	r2, [pc, #132]	; (80011f0 <HAL_InitTick+0xec>)
 800116a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800116c:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <HAL_InitTick+0xe8>)
 800116e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001172:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001174:	4a1d      	ldr	r2, [pc, #116]	; (80011ec <HAL_InitTick+0xe8>)
 8001176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001178:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800117a:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <HAL_InitTick+0xe8>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <HAL_InitTick+0xe8>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001186:	4b19      	ldr	r3, [pc, #100]	; (80011ec <HAL_InitTick+0xe8>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800118c:	4817      	ldr	r0, [pc, #92]	; (80011ec <HAL_InitTick+0xe8>)
 800118e:	f002 f831 	bl	80031f4 <HAL_TIM_Base_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001198:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800119c:	2b00      	cmp	r3, #0
 800119e:	d11b      	bne.n	80011d8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80011a0:	4812      	ldr	r0, [pc, #72]	; (80011ec <HAL_InitTick+0xe8>)
 80011a2:	f002 f8cb 	bl	800333c <HAL_TIM_Base_Start_IT>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80011ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d111      	bne.n	80011d8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011b4:	2036      	movs	r0, #54	; 0x36
 80011b6:	f000 f9bd 	bl	8001534 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b0f      	cmp	r3, #15
 80011be:	d808      	bhi.n	80011d2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80011c0:	2200      	movs	r2, #0
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	2036      	movs	r0, #54	; 0x36
 80011c6:	f000 f999 	bl	80014fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011ca:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <HAL_InitTick+0xf0>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	e002      	b.n	80011d8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80011d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3738      	adds	r7, #56	; 0x38
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40021000 	.word	0x40021000
 80011e8:	431bde83 	.word	0x431bde83
 80011ec:	200009c8 	.word	0x200009c8
 80011f0:	40001000 	.word	0x40001000
 80011f4:	20000434 	.word	0x20000434

080011f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <NMI_Handler+0x4>

080011fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <HardFault_Handler+0x4>

08001204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <MemManage_Handler+0x4>

0800120a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <BusFault_Handler+0x4>

08001210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <UsageFault_Handler+0x4>

08001216 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <USART1_IRQHandler+0x10>)
 800122a:	f002 fcc5 	bl	8003bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000080c 	.word	0x2000080c

08001238 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <USART2_IRQHandler+0x10>)
 800123e:	f002 fcbb 	bl	8003bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000894 	.word	0x20000894

0800124c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <TIM6_DAC_IRQHandler+0x10>)
 8001252:	f002 f8c7 	bl	80033e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200009c8 	.word	0x200009c8

08001260 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <SystemInit+0x20>)
 8001266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800126a:	4a05      	ldr	r2, [pc, #20]	; (8001280 <SystemInit+0x20>)
 800126c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001270:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001284:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012bc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001288:	f7ff ffea 	bl	8001260 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800128c:	480c      	ldr	r0, [pc, #48]	; (80012c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800128e:	490d      	ldr	r1, [pc, #52]	; (80012c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001290:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <LoopForever+0xe>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001294:	e002      	b.n	800129c <LoopCopyDataInit>

08001296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129a:	3304      	adds	r3, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800129c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a0:	d3f9      	bcc.n	8001296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a2:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80012a4:	4c0a      	ldr	r4, [pc, #40]	; (80012d0 <LoopForever+0x16>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a8:	e001      	b.n	80012ae <LoopFillZerobss>

080012aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ac:	3204      	adds	r2, #4

080012ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b0:	d3fb      	bcc.n	80012aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012b2:	f004 fd8b 	bl	8005dcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012b6:	f7ff f8c1 	bl	800043c <main>

080012ba <LoopForever>:

LoopForever:
    b LoopForever
 80012ba:	e7fe      	b.n	80012ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012bc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80012c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c4:	200004a4 	.word	0x200004a4
  ldr r2, =_sidata
 80012c8:	08006178 	.word	0x08006178
  ldr r2, =_sbss
 80012cc:	200004a4 	.word	0x200004a4
  ldr r4, =_ebss
 80012d0:	2000176c 	.word	0x2000176c

080012d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012d4:	e7fe      	b.n	80012d4 <ADC1_IRQHandler>
	...

080012d8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <HAL_Init+0x28>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a07      	ldr	r2, [pc, #28]	; (8001300 <HAL_Init+0x28>)
 80012e2:	f043 0310 	orr.w	r3, r3, #16
 80012e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e8:	2003      	movs	r0, #3
 80012ea:	f000 f8fc 	bl	80014e6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ee:	200f      	movs	r0, #15
 80012f0:	f7ff ff08 	bl	8001104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f4:	f7ff fe28 	bl	8000f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40022000 	.word	0x40022000

08001304 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_IncTick+0x20>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_IncTick+0x24>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4413      	add	r3, r2
 8001314:	4a04      	ldr	r2, [pc, #16]	; (8001328 <HAL_IncTick+0x24>)
 8001316:	6013      	str	r3, [r2, #0]
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000438 	.word	0x20000438
 8001328:	20000a14 	.word	0x20000a14

0800132c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001330:	4b03      	ldr	r3, [pc, #12]	; (8001340 <HAL_GetTick+0x14>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000a14 	.word	0x20000a14

08001344 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800134c:	f7ff ffee 	bl	800132c <HAL_GetTick>
 8001350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800135c:	d005      	beq.n	800136a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800135e:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <HAL_Delay+0x44>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4413      	add	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800136a:	bf00      	nop
 800136c:	f7ff ffde 	bl	800132c <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	429a      	cmp	r2, r3
 800137a:	d8f7      	bhi.n	800136c <HAL_Delay+0x28>
  {
  }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000438 	.word	0x20000438

0800138c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013be:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	60d3      	str	r3, [r2, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <__NVIC_GetPriorityGrouping+0x18>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	f003 0307 	and.w	r3, r3, #7
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	db0b      	blt.n	800141a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	f003 021f 	and.w	r2, r3, #31
 8001408:	4907      	ldr	r1, [pc, #28]	; (8001428 <__NVIC_EnableIRQ+0x38>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	095b      	lsrs	r3, r3, #5
 8001410:	2001      	movs	r0, #1
 8001412:	fa00 f202 	lsl.w	r2, r0, r2
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000e100 	.word	0xe000e100

0800142c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	2b00      	cmp	r3, #0
 800143e:	db0a      	blt.n	8001456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	490c      	ldr	r1, [pc, #48]	; (8001478 <__NVIC_SetPriority+0x4c>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	0112      	lsls	r2, r2, #4
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	440b      	add	r3, r1
 8001450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001454:	e00a      	b.n	800146c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4908      	ldr	r1, [pc, #32]	; (800147c <__NVIC_SetPriority+0x50>)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	3b04      	subs	r3, #4
 8001464:	0112      	lsls	r2, r2, #4
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	440b      	add	r3, r1
 800146a:	761a      	strb	r2, [r3, #24]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000e100 	.word	0xe000e100
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	; 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f1c3 0307 	rsb	r3, r3, #7
 800149a:	2b04      	cmp	r3, #4
 800149c:	bf28      	it	cs
 800149e:	2304      	movcs	r3, #4
 80014a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3304      	adds	r3, #4
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d902      	bls.n	80014b0 <NVIC_EncodePriority+0x30>
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3b03      	subs	r3, #3
 80014ae:	e000      	b.n	80014b2 <NVIC_EncodePriority+0x32>
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	401a      	ands	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	43d9      	mvns	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	4313      	orrs	r3, r2
         );
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3724      	adds	r7, #36	; 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ff4c 	bl	800138c <__NVIC_SetPriorityGrouping>
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
 8001508:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800150e:	f7ff ff61 	bl	80013d4 <__NVIC_GetPriorityGrouping>
 8001512:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	68b9      	ldr	r1, [r7, #8]
 8001518:	6978      	ldr	r0, [r7, #20]
 800151a:	f7ff ffb1 	bl	8001480 <NVIC_EncodePriority>
 800151e:	4602      	mov	r2, r0
 8001520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001524:	4611      	mov	r1, r2
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ff80 	bl	800142c <__NVIC_SetPriority>
}
 800152c:	bf00      	nop
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff ff54 	bl	80013f0 <__NVIC_EnableIRQ>
}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800155e:	2b02      	cmp	r3, #2
 8001560:	d008      	beq.n	8001574 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2204      	movs	r2, #4
 8001566:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e020      	b.n	80015b6 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 020e 	bic.w	r2, r2, #14
 8001582:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0201 	bic.w	r2, r2, #1
 8001592:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159c:	2101      	movs	r1, #1
 800159e:	fa01 f202 	lsl.w	r2, r1, r2
 80015a2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b084      	sub	sp, #16
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d005      	beq.n	80015e4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2204      	movs	r2, #4
 80015dc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	73fb      	strb	r3, [r7, #15]
 80015e2:	e027      	b.n	8001634 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 020e 	bic.w	r2, r2, #14
 80015f2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0201 	bic.w	r2, r2, #1
 8001602:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800160c:	2101      	movs	r1, #1
 800160e:	fa01 f202 	lsl.w	r2, r1, r2
 8001612:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	4798      	blx	r3
    } 
  }
  return status;
 8001634:	7bfb      	ldrb	r3, [r7, #15]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001640:	b480      	push	{r7}
 8001642:	b087      	sub	sp, #28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800164e:	e14e      	b.n	80018ee <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	2101      	movs	r1, #1
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	fa01 f303 	lsl.w	r3, r1, r3
 800165c:	4013      	ands	r3, r2
 800165e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 8140 	beq.w	80018e8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	2b01      	cmp	r3, #1
 8001672:	d005      	beq.n	8001680 <HAL_GPIO_Init+0x40>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d130      	bne.n	80016e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	2203      	movs	r2, #3
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016b6:	2201      	movs	r2, #1
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	091b      	lsrs	r3, r3, #4
 80016cc:	f003 0201 	and.w	r2, r3, #1
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d017      	beq.n	800171e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	2203      	movs	r2, #3
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d123      	bne.n	8001772 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	08da      	lsrs	r2, r3, #3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3208      	adds	r2, #8
 8001732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001736:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	220f      	movs	r2, #15
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	691a      	ldr	r2, [r3, #16]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	08da      	lsrs	r2, r3, #3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3208      	adds	r2, #8
 800176c:	6939      	ldr	r1, [r7, #16]
 800176e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	2203      	movs	r2, #3
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 0203 	and.w	r2, r3, #3
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f000 809a 	beq.w	80018e8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b4:	4b55      	ldr	r3, [pc, #340]	; (800190c <HAL_GPIO_Init+0x2cc>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4a54      	ldr	r2, [pc, #336]	; (800190c <HAL_GPIO_Init+0x2cc>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6193      	str	r3, [r2, #24]
 80017c0:	4b52      	ldr	r3, [pc, #328]	; (800190c <HAL_GPIO_Init+0x2cc>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017cc:	4a50      	ldr	r2, [pc, #320]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	089b      	lsrs	r3, r3, #2
 80017d2:	3302      	adds	r3, #2
 80017d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	220f      	movs	r2, #15
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4013      	ands	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017f6:	d013      	beq.n	8001820 <HAL_GPIO_Init+0x1e0>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a46      	ldr	r2, [pc, #280]	; (8001914 <HAL_GPIO_Init+0x2d4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d00d      	beq.n	800181c <HAL_GPIO_Init+0x1dc>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a45      	ldr	r2, [pc, #276]	; (8001918 <HAL_GPIO_Init+0x2d8>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d007      	beq.n	8001818 <HAL_GPIO_Init+0x1d8>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a44      	ldr	r2, [pc, #272]	; (800191c <HAL_GPIO_Init+0x2dc>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d101      	bne.n	8001814 <HAL_GPIO_Init+0x1d4>
 8001810:	2303      	movs	r3, #3
 8001812:	e006      	b.n	8001822 <HAL_GPIO_Init+0x1e2>
 8001814:	2305      	movs	r3, #5
 8001816:	e004      	b.n	8001822 <HAL_GPIO_Init+0x1e2>
 8001818:	2302      	movs	r3, #2
 800181a:	e002      	b.n	8001822 <HAL_GPIO_Init+0x1e2>
 800181c:	2301      	movs	r3, #1
 800181e:	e000      	b.n	8001822 <HAL_GPIO_Init+0x1e2>
 8001820:	2300      	movs	r3, #0
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	f002 0203 	and.w	r2, r2, #3
 8001828:	0092      	lsls	r2, r2, #2
 800182a:	4093      	lsls	r3, r2
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	4313      	orrs	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001832:	4937      	ldr	r1, [pc, #220]	; (8001910 <HAL_GPIO_Init+0x2d0>)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	089b      	lsrs	r3, r3, #2
 8001838:	3302      	adds	r3, #2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001840:	4b37      	ldr	r3, [pc, #220]	; (8001920 <HAL_GPIO_Init+0x2e0>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	43db      	mvns	r3, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001864:	4a2e      	ldr	r2, [pc, #184]	; (8001920 <HAL_GPIO_Init+0x2e0>)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800186a:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <HAL_GPIO_Init+0x2e0>)
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	43db      	mvns	r3, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4313      	orrs	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800188e:	4a24      	ldr	r2, [pc, #144]	; (8001920 <HAL_GPIO_Init+0x2e0>)
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001894:	4b22      	ldr	r3, [pc, #136]	; (8001920 <HAL_GPIO_Init+0x2e0>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	43db      	mvns	r3, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018b8:	4a19      	ldr	r2, [pc, #100]	; (8001920 <HAL_GPIO_Init+0x2e0>)
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018be:	4b18      	ldr	r3, [pc, #96]	; (8001920 <HAL_GPIO_Init+0x2e0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018e2:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <HAL_GPIO_Init+0x2e0>)
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	3301      	adds	r3, #1
 80018ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	fa22 f303 	lsr.w	r3, r2, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f47f aea9 	bne.w	8001650 <HAL_GPIO_Init+0x10>
  }
}
 80018fe:	bf00      	nop
 8001900:	bf00      	nop
 8001902:	371c      	adds	r7, #28
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	40021000 	.word	0x40021000
 8001910:	40010000 	.word	0x40010000
 8001914:	48000400 	.word	0x48000400
 8001918:	48000800 	.word	0x48000800
 800191c:	48000c00 	.word	0x48000c00
 8001920:	40010400 	.word	0x40010400

08001924 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691a      	ldr	r2, [r3, #16]
 8001934:	887b      	ldrh	r3, [r7, #2]
 8001936:	4013      	ands	r3, r2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d002      	beq.n	8001942 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800193c:	2301      	movs	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
 8001940:	e001      	b.n	8001946 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001946:	7bfb      	ldrb	r3, [r7, #15]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	807b      	strh	r3, [r7, #2]
 8001960:	4613      	mov	r3, r2
 8001962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001964:	787b      	ldrb	r3, [r7, #1]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800196a:	887a      	ldrh	r2, [r7, #2]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001970:	e002      	b.n	8001978 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001972:	887a      	ldrh	r2, [r7, #2]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800198a:	af00      	add	r7, sp, #0
 800198c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001990:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001994:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	f001 b823 	b.w	80029f0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 817d 	beq.w	8001cba <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019c0:	4bbc      	ldr	r3, [pc, #752]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 030c 	and.w	r3, r3, #12
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d00c      	beq.n	80019e6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019cc:	4bb9      	ldr	r3, [pc, #740]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d15c      	bne.n	8001a92 <HAL_RCC_OscConfig+0x10e>
 80019d8:	4bb6      	ldr	r3, [pc, #728]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e4:	d155      	bne.n	8001a92 <HAL_RCC_OscConfig+0x10e>
 80019e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ea:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80019f2:	fa93 f3a3 	rbit	r3, r3
 80019f6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fe:	fab3 f383 	clz	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	095b      	lsrs	r3, r3, #5
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d102      	bne.n	8001a18 <HAL_RCC_OscConfig+0x94>
 8001a12:	4ba8      	ldr	r3, [pc, #672]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	e015      	b.n	8001a44 <HAL_RCC_OscConfig+0xc0>
 8001a18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a1c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a20:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a24:	fa93 f3a3 	rbit	r3, r3
 8001a28:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001a2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a30:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001a34:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001a38:	fa93 f3a3 	rbit	r3, r3
 8001a3c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001a40:	4b9c      	ldr	r3, [pc, #624]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a48:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001a4c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001a50:	fa92 f2a2 	rbit	r2, r2
 8001a54:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001a58:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001a5c:	fab2 f282 	clz	r2, r2
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	f042 0220 	orr.w	r2, r2, #32
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	f002 021f 	and.w	r2, r2, #31
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 811f 	beq.w	8001cb8 <HAL_RCC_OscConfig+0x334>
 8001a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f040 8116 	bne.w	8001cb8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	f000 bfaf 	b.w	80029f0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa2:	d106      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x12e>
 8001aa4:	4b83      	ldr	r3, [pc, #524]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a82      	ldr	r2, [pc, #520]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	e036      	b.n	8001b20 <HAL_RCC_OscConfig+0x19c>
 8001ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0x158>
 8001ac2:	4b7c      	ldr	r3, [pc, #496]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a7b      	ldr	r2, [pc, #492]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b79      	ldr	r3, [pc, #484]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a78      	ldr	r2, [pc, #480]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001ad4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e021      	b.n	8001b20 <HAL_RCC_OscConfig+0x19c>
 8001adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aec:	d10c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x184>
 8001aee:	4b71      	ldr	r3, [pc, #452]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a70      	ldr	r2, [pc, #448]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b6e      	ldr	r3, [pc, #440]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a6d      	ldr	r2, [pc, #436]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	e00b      	b.n	8001b20 <HAL_RCC_OscConfig+0x19c>
 8001b08:	4b6a      	ldr	r3, [pc, #424]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a69      	ldr	r2, [pc, #420]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b67      	ldr	r3, [pc, #412]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a66      	ldr	r2, [pc, #408]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b1e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b20:	4b64      	ldr	r3, [pc, #400]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	f023 020f 	bic.w	r2, r3, #15
 8001b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	495f      	ldr	r1, [pc, #380]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d059      	beq.n	8001bfe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4a:	f7ff fbef 	bl	800132c <HAL_GetTick>
 8001b4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b52:	e00a      	b.n	8001b6a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b54:	f7ff fbea 	bl	800132c <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b64      	cmp	r3, #100	; 0x64
 8001b62:	d902      	bls.n	8001b6a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	f000 bf43 	b.w	80029f0 <HAL_RCC_OscConfig+0x106c>
 8001b6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b6e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b72:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001b76:	fa93 f3a3 	rbit	r3, r3
 8001b7a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001b7e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b82:	fab3 f383 	clz	r3, r3
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	095b      	lsrs	r3, r3, #5
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d102      	bne.n	8001b9c <HAL_RCC_OscConfig+0x218>
 8001b96:	4b47      	ldr	r3, [pc, #284]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	e015      	b.n	8001bc8 <HAL_RCC_OscConfig+0x244>
 8001b9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ba0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001ba8:	fa93 f3a3 	rbit	r3, r3
 8001bac:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001bb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bb4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001bb8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001bbc:	fa93 f3a3 	rbit	r3, r3
 8001bc0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001bc4:	4b3b      	ldr	r3, [pc, #236]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bcc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001bd0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001bd4:	fa92 f2a2 	rbit	r2, r2
 8001bd8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001bdc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001be0:	fab2 f282 	clz	r2, r2
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	f042 0220 	orr.w	r2, r2, #32
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	f002 021f 	and.w	r2, r2, #31
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0ab      	beq.n	8001b54 <HAL_RCC_OscConfig+0x1d0>
 8001bfc:	e05d      	b.n	8001cba <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7ff fb95 	bl	800132c <HAL_GetTick>
 8001c02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c06:	e00a      	b.n	8001c1e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c08:	f7ff fb90 	bl	800132c <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b64      	cmp	r3, #100	; 0x64
 8001c16:	d902      	bls.n	8001c1e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	f000 bee9 	b.w	80029f0 <HAL_RCC_OscConfig+0x106c>
 8001c1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c22:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c26:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001c2a:	fa93 f3a3 	rbit	r3, r3
 8001c2e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001c32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c36:	fab3 f383 	clz	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	095b      	lsrs	r3, r3, #5
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d102      	bne.n	8001c50 <HAL_RCC_OscConfig+0x2cc>
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	e015      	b.n	8001c7c <HAL_RCC_OscConfig+0x2f8>
 8001c50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c54:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001c5c:	fa93 f3a3 	rbit	r3, r3
 8001c60:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001c64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c68:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c6c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001c70:	fa93 f3a3 	rbit	r3, r3
 8001c74:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001c78:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <HAL_RCC_OscConfig+0x330>)
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c80:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001c84:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001c88:	fa92 f2a2 	rbit	r2, r2
 8001c8c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001c90:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001c94:	fab2 f282 	clz	r2, r2
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	f042 0220 	orr.w	r2, r2, #32
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	f002 021f 	and.w	r2, r2, #31
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1ab      	bne.n	8001c08 <HAL_RCC_OscConfig+0x284>
 8001cb0:	e003      	b.n	8001cba <HAL_RCC_OscConfig+0x336>
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 817d 	beq.w	8001fca <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cd0:	4ba6      	ldr	r3, [pc, #664]	; (8001f6c <HAL_RCC_OscConfig+0x5e8>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 030c 	and.w	r3, r3, #12
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00b      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cdc:	4ba3      	ldr	r3, [pc, #652]	; (8001f6c <HAL_RCC_OscConfig+0x5e8>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 030c 	and.w	r3, r3, #12
 8001ce4:	2b08      	cmp	r3, #8
 8001ce6:	d172      	bne.n	8001dce <HAL_RCC_OscConfig+0x44a>
 8001ce8:	4ba0      	ldr	r3, [pc, #640]	; (8001f6c <HAL_RCC_OscConfig+0x5e8>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d16c      	bne.n	8001dce <HAL_RCC_OscConfig+0x44a>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001cfe:	fa93 f3a3 	rbit	r3, r3
 8001d02:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001d06:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0a:	fab3 f383 	clz	r3, r3
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	095b      	lsrs	r3, r3, #5
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d102      	bne.n	8001d24 <HAL_RCC_OscConfig+0x3a0>
 8001d1e:	4b93      	ldr	r3, [pc, #588]	; (8001f6c <HAL_RCC_OscConfig+0x5e8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	e013      	b.n	8001d4c <HAL_RCC_OscConfig+0x3c8>
 8001d24:	2302      	movs	r3, #2
 8001d26:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001d2e:	fa93 f3a3 	rbit	r3, r3
 8001d32:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001d36:	2302      	movs	r3, #2
 8001d38:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001d3c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001d40:	fa93 f3a3 	rbit	r3, r3
 8001d44:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001d48:	4b88      	ldr	r3, [pc, #544]	; (8001f6c <HAL_RCC_OscConfig+0x5e8>)
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001d52:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001d56:	fa92 f2a2 	rbit	r2, r2
 8001d5a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001d5e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001d62:	fab2 f282 	clz	r2, r2
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	f042 0220 	orr.w	r2, r2, #32
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	f002 021f 	and.w	r2, r2, #31
 8001d72:	2101      	movs	r1, #1
 8001d74:	fa01 f202 	lsl.w	r2, r1, r2
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00a      	beq.n	8001d94 <HAL_RCC_OscConfig+0x410>
 8001d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d002      	beq.n	8001d94 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	f000 be2e 	b.w	80029f0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d94:	4b75      	ldr	r3, [pc, #468]	; (8001f6c <HAL_RCC_OscConfig+0x5e8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	21f8      	movs	r1, #248	; 0xf8
 8001daa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dae:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001db2:	fa91 f1a1 	rbit	r1, r1
 8001db6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001dba:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001dbe:	fab1 f181 	clz	r1, r1
 8001dc2:	b2c9      	uxtb	r1, r1
 8001dc4:	408b      	lsls	r3, r1
 8001dc6:	4969      	ldr	r1, [pc, #420]	; (8001f6c <HAL_RCC_OscConfig+0x5e8>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dcc:	e0fd      	b.n	8001fca <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 8088 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x56c>
 8001de0:	2301      	movs	r3, #1
 8001de2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001dea:	fa93 f3a3 	rbit	r3, r3
 8001dee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001df2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	461a      	mov	r2, r3
 8001e08:	2301      	movs	r3, #1
 8001e0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0c:	f7ff fa8e 	bl	800132c <HAL_GetTick>
 8001e10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e16:	f7ff fa89 	bl	800132c <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d902      	bls.n	8001e2c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	f000 bde2 	b.w	80029f0 <HAL_RCC_OscConfig+0x106c>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001e36:	fa93 f3a3 	rbit	r3, r3
 8001e3a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001e3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e42:	fab3 f383 	clz	r3, r3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	095b      	lsrs	r3, r3, #5
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d102      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4d8>
 8001e56:	4b45      	ldr	r3, [pc, #276]	; (8001f6c <HAL_RCC_OscConfig+0x5e8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	e013      	b.n	8001e84 <HAL_RCC_OscConfig+0x500>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001e66:	fa93 f3a3 	rbit	r3, r3
 8001e6a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001e6e:	2302      	movs	r3, #2
 8001e70:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001e74:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001e78:	fa93 f3a3 	rbit	r3, r3
 8001e7c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e80:	4b3a      	ldr	r3, [pc, #232]	; (8001f6c <HAL_RCC_OscConfig+0x5e8>)
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	2202      	movs	r2, #2
 8001e86:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001e8a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001e8e:	fa92 f2a2 	rbit	r2, r2
 8001e92:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001e96:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001e9a:	fab2 f282 	clz	r2, r2
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	f042 0220 	orr.w	r2, r2, #32
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	f002 021f 	and.w	r2, r2, #31
 8001eaa:	2101      	movs	r1, #1
 8001eac:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0af      	beq.n	8001e16 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb6:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <HAL_RCC_OscConfig+0x5e8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	21f8      	movs	r1, #248	; 0xf8
 8001ecc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001ed4:	fa91 f1a1 	rbit	r1, r1
 8001ed8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001edc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001ee0:	fab1 f181 	clz	r1, r1
 8001ee4:	b2c9      	uxtb	r1, r1
 8001ee6:	408b      	lsls	r3, r1
 8001ee8:	4920      	ldr	r1, [pc, #128]	; (8001f6c <HAL_RCC_OscConfig+0x5e8>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]
 8001eee:	e06c      	b.n	8001fca <HAL_RCC_OscConfig+0x646>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001f02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f06:	fab3 f383 	clz	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	461a      	mov	r2, r3
 8001f18:	2300      	movs	r3, #0
 8001f1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7ff fa06 	bl	800132c <HAL_GetTick>
 8001f20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f24:	e00a      	b.n	8001f3c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f26:	f7ff fa01 	bl	800132c <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d902      	bls.n	8001f3c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	f000 bd5a 	b.w	80029f0 <HAL_RCC_OscConfig+0x106c>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001f46:	fa93 f3a3 	rbit	r3, r3
 8001f4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	095b      	lsrs	r3, r3, #5
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d104      	bne.n	8001f70 <HAL_RCC_OscConfig+0x5ec>
 8001f66:	4b01      	ldr	r3, [pc, #4]	; (8001f6c <HAL_RCC_OscConfig+0x5e8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	e015      	b.n	8001f98 <HAL_RCC_OscConfig+0x614>
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	2302      	movs	r3, #2
 8001f72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f82:	2302      	movs	r3, #2
 8001f84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f88:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f8c:	fa93 f3a3 	rbit	r3, r3
 8001f90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001f94:	4bc8      	ldr	r3, [pc, #800]	; (80022b8 <HAL_RCC_OscConfig+0x934>)
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	2202      	movs	r2, #2
 8001f9a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001f9e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001fa2:	fa92 f2a2 	rbit	r2, r2
 8001fa6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001faa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001fae:	fab2 f282 	clz	r2, r2
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	f042 0220 	orr.w	r2, r2, #32
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	f002 021f 	and.w	r2, r2, #31
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1ad      	bne.n	8001f26 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 8110 	beq.w	8002200 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d079      	beq.n	80020e4 <HAL_RCC_OscConfig+0x760>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002002:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	4bab      	ldr	r3, [pc, #684]	; (80022bc <HAL_RCC_OscConfig+0x938>)
 8002010:	4413      	add	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	461a      	mov	r2, r3
 8002016:	2301      	movs	r3, #1
 8002018:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201a:	f7ff f987 	bl	800132c <HAL_GetTick>
 800201e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002022:	e00a      	b.n	800203a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002024:	f7ff f982 	bl	800132c <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d902      	bls.n	800203a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	f000 bcdb 	b.w	80029f0 <HAL_RCC_OscConfig+0x106c>
 800203a:	2302      	movs	r3, #2
 800203c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002044:	fa93 f3a3 	rbit	r3, r3
 8002048:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800204c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002050:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002054:	2202      	movs	r2, #2
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	fa93 f2a3 	rbit	r2, r3
 8002066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002078:	2202      	movs	r2, #2
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	fa93 f2a3 	rbit	r2, r3
 800208a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002092:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002094:	4b88      	ldr	r3, [pc, #544]	; (80022b8 <HAL_RCC_OscConfig+0x934>)
 8002096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020a0:	2102      	movs	r1, #2
 80020a2:	6019      	str	r1, [r3, #0]
 80020a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	fa93 f1a3 	rbit	r1, r3
 80020b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80020ba:	6019      	str	r1, [r3, #0]
  return result;
 80020bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	f003 031f 	and.w	r3, r3, #31
 80020d6:	2101      	movs	r1, #1
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0a0      	beq.n	8002024 <HAL_RCC_OscConfig+0x6a0>
 80020e2:	e08d      	b.n	8002200 <HAL_RCC_OscConfig+0x87c>
 80020e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80020ec:	2201      	movs	r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	fa93 f2a3 	rbit	r2, r3
 80020fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002102:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002106:	601a      	str	r2, [r3, #0]
  return result;
 8002108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002110:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002112:	fab3 f383 	clz	r3, r3
 8002116:	b2db      	uxtb	r3, r3
 8002118:	461a      	mov	r2, r3
 800211a:	4b68      	ldr	r3, [pc, #416]	; (80022bc <HAL_RCC_OscConfig+0x938>)
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	461a      	mov	r2, r3
 8002122:	2300      	movs	r3, #0
 8002124:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002126:	f7ff f901 	bl	800132c <HAL_GetTick>
 800212a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212e:	e00a      	b.n	8002146 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002130:	f7ff f8fc 	bl	800132c <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d902      	bls.n	8002146 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	f000 bc55 	b.w	80029f0 <HAL_RCC_OscConfig+0x106c>
 8002146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800214e:	2202      	movs	r2, #2
 8002150:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002156:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	fa93 f2a3 	rbit	r2, r3
 8002160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002164:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002172:	2202      	movs	r2, #2
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	fa93 f2a3 	rbit	r2, r3
 8002184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002188:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002192:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002196:	2202      	movs	r2, #2
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	fa93 f2a3 	rbit	r2, r3
 80021a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80021b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b2:	4b41      	ldr	r3, [pc, #260]	; (80022b8 <HAL_RCC_OscConfig+0x934>)
 80021b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80021be:	2102      	movs	r1, #2
 80021c0:	6019      	str	r1, [r3, #0]
 80021c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	fa93 f1a3 	rbit	r1, r3
 80021d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80021d8:	6019      	str	r1, [r3, #0]
  return result;
 80021da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021de:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	fab3 f383 	clz	r3, r3
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	2101      	movs	r1, #1
 80021f6:	fa01 f303 	lsl.w	r3, r1, r3
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d197      	bne.n	8002130 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002204:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 81a1 	beq.w	8002558 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800221c:	4b26      	ldr	r3, [pc, #152]	; (80022b8 <HAL_RCC_OscConfig+0x934>)
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d116      	bne.n	8002256 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002228:	4b23      	ldr	r3, [pc, #140]	; (80022b8 <HAL_RCC_OscConfig+0x934>)
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	4a22      	ldr	r2, [pc, #136]	; (80022b8 <HAL_RCC_OscConfig+0x934>)
 800222e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002232:	61d3      	str	r3, [r2, #28]
 8002234:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <HAL_RCC_OscConfig+0x934>)
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800223c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002240:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800224e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002250:	2301      	movs	r3, #1
 8002252:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002256:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <HAL_RCC_OscConfig+0x93c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d11a      	bne.n	8002298 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002262:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <HAL_RCC_OscConfig+0x93c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a16      	ldr	r2, [pc, #88]	; (80022c0 <HAL_RCC_OscConfig+0x93c>)
 8002268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226e:	f7ff f85d 	bl	800132c <HAL_GetTick>
 8002272:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002276:	e009      	b.n	800228c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002278:	f7ff f858 	bl	800132c <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b64      	cmp	r3, #100	; 0x64
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e3b1      	b.n	80029f0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228c:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <HAL_RCC_OscConfig+0x93c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0ef      	beq.n	8002278 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d10d      	bne.n	80022c4 <HAL_RCC_OscConfig+0x940>
 80022a8:	4b03      	ldr	r3, [pc, #12]	; (80022b8 <HAL_RCC_OscConfig+0x934>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	4a02      	ldr	r2, [pc, #8]	; (80022b8 <HAL_RCC_OscConfig+0x934>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6213      	str	r3, [r2, #32]
 80022b4:	e03c      	b.n	8002330 <HAL_RCC_OscConfig+0x9ac>
 80022b6:	bf00      	nop
 80022b8:	40021000 	.word	0x40021000
 80022bc:	10908120 	.word	0x10908120
 80022c0:	40007000 	.word	0x40007000
 80022c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10c      	bne.n	80022ee <HAL_RCC_OscConfig+0x96a>
 80022d4:	4bc1      	ldr	r3, [pc, #772]	; (80025dc <HAL_RCC_OscConfig+0xc58>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	4ac0      	ldr	r2, [pc, #768]	; (80025dc <HAL_RCC_OscConfig+0xc58>)
 80022da:	f023 0301 	bic.w	r3, r3, #1
 80022de:	6213      	str	r3, [r2, #32]
 80022e0:	4bbe      	ldr	r3, [pc, #760]	; (80025dc <HAL_RCC_OscConfig+0xc58>)
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	4abd      	ldr	r2, [pc, #756]	; (80025dc <HAL_RCC_OscConfig+0xc58>)
 80022e6:	f023 0304 	bic.w	r3, r3, #4
 80022ea:	6213      	str	r3, [r2, #32]
 80022ec:	e020      	b.n	8002330 <HAL_RCC_OscConfig+0x9ac>
 80022ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2b05      	cmp	r3, #5
 80022fc:	d10c      	bne.n	8002318 <HAL_RCC_OscConfig+0x994>
 80022fe:	4bb7      	ldr	r3, [pc, #732]	; (80025dc <HAL_RCC_OscConfig+0xc58>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	4ab6      	ldr	r2, [pc, #728]	; (80025dc <HAL_RCC_OscConfig+0xc58>)
 8002304:	f043 0304 	orr.w	r3, r3, #4
 8002308:	6213      	str	r3, [r2, #32]
 800230a:	4bb4      	ldr	r3, [pc, #720]	; (80025dc <HAL_RCC_OscConfig+0xc58>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4ab3      	ldr	r2, [pc, #716]	; (80025dc <HAL_RCC_OscConfig+0xc58>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6213      	str	r3, [r2, #32]
 8002316:	e00b      	b.n	8002330 <HAL_RCC_OscConfig+0x9ac>
 8002318:	4bb0      	ldr	r3, [pc, #704]	; (80025dc <HAL_RCC_OscConfig+0xc58>)
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	4aaf      	ldr	r2, [pc, #700]	; (80025dc <HAL_RCC_OscConfig+0xc58>)
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	6213      	str	r3, [r2, #32]
 8002324:	4bad      	ldr	r3, [pc, #692]	; (80025dc <HAL_RCC_OscConfig+0xc58>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	4aac      	ldr	r2, [pc, #688]	; (80025dc <HAL_RCC_OscConfig+0xc58>)
 800232a:	f023 0304 	bic.w	r3, r3, #4
 800232e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002334:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 8081 	beq.w	8002444 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002342:	f7fe fff3 	bl	800132c <HAL_GetTick>
 8002346:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234a:	e00b      	b.n	8002364 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800234c:	f7fe ffee 	bl	800132c <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	f241 3288 	movw	r2, #5000	; 0x1388
 800235c:	4293      	cmp	r3, r2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e345      	b.n	80029f0 <HAL_RCC_OscConfig+0x106c>
 8002364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002368:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800236c:	2202      	movs	r2, #2
 800236e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002374:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	fa93 f2a3 	rbit	r2, r3
 800237e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002382:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002390:	2202      	movs	r2, #2
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002398:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	fa93 f2a3 	rbit	r2, r3
 80023a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80023aa:	601a      	str	r2, [r3, #0]
  return result;
 80023ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80023b4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	095b      	lsrs	r3, r3, #5
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f043 0302 	orr.w	r3, r3, #2
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d102      	bne.n	80023d0 <HAL_RCC_OscConfig+0xa4c>
 80023ca:	4b84      	ldr	r3, [pc, #528]	; (80025dc <HAL_RCC_OscConfig+0xc58>)
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	e013      	b.n	80023f8 <HAL_RCC_OscConfig+0xa74>
 80023d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80023d8:	2202      	movs	r2, #2
 80023da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	fa93 f2a3 	rbit	r2, r3
 80023ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	4b79      	ldr	r3, [pc, #484]	; (80025dc <HAL_RCC_OscConfig+0xc58>)
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023fc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002400:	2102      	movs	r1, #2
 8002402:	6011      	str	r1, [r2, #0]
 8002404:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002408:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	fa92 f1a2 	rbit	r1, r2
 8002412:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002416:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800241a:	6011      	str	r1, [r2, #0]
  return result;
 800241c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002420:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	fab2 f282 	clz	r2, r2
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	f002 021f 	and.w	r2, r2, #31
 8002436:	2101      	movs	r1, #1
 8002438:	fa01 f202 	lsl.w	r2, r1, r2
 800243c:	4013      	ands	r3, r2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d084      	beq.n	800234c <HAL_RCC_OscConfig+0x9c8>
 8002442:	e07f      	b.n	8002544 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002444:	f7fe ff72 	bl	800132c <HAL_GetTick>
 8002448:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800244c:	e00b      	b.n	8002466 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7fe ff6d 	bl	800132c <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3288 	movw	r2, #5000	; 0x1388
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e2c4      	b.n	80029f0 <HAL_RCC_OscConfig+0x106c>
 8002466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800246e:	2202      	movs	r2, #2
 8002470:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002476:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	fa93 f2a3 	rbit	r2, r3
 8002480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002484:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002492:	2202      	movs	r2, #2
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	fa93 f2a3 	rbit	r2, r3
 80024a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80024ac:	601a      	str	r2, [r3, #0]
  return result;
 80024ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80024b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f043 0302 	orr.w	r3, r3, #2
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d102      	bne.n	80024d2 <HAL_RCC_OscConfig+0xb4e>
 80024cc:	4b43      	ldr	r3, [pc, #268]	; (80025dc <HAL_RCC_OscConfig+0xc58>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	e013      	b.n	80024fa <HAL_RCC_OscConfig+0xb76>
 80024d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80024da:	2202      	movs	r2, #2
 80024dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	fa93 f2a3 	rbit	r2, r3
 80024ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	4b39      	ldr	r3, [pc, #228]	; (80025dc <HAL_RCC_OscConfig+0xc58>)
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024fe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002502:	2102      	movs	r1, #2
 8002504:	6011      	str	r1, [r2, #0]
 8002506:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800250a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	fa92 f1a2 	rbit	r1, r2
 8002514:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002518:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800251c:	6011      	str	r1, [r2, #0]
  return result;
 800251e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002522:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	fab2 f282 	clz	r2, r2
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	f002 021f 	and.w	r2, r2, #31
 8002538:	2101      	movs	r1, #1
 800253a:	fa01 f202 	lsl.w	r2, r1, r2
 800253e:	4013      	ands	r3, r2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d184      	bne.n	800244e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002544:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002548:	2b01      	cmp	r3, #1
 800254a:	d105      	bne.n	8002558 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800254c:	4b23      	ldr	r3, [pc, #140]	; (80025dc <HAL_RCC_OscConfig+0xc58>)
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	4a22      	ldr	r2, [pc, #136]	; (80025dc <HAL_RCC_OscConfig+0xc58>)
 8002552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002556:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 8242 	beq.w	80029ee <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800256a:	4b1c      	ldr	r3, [pc, #112]	; (80025dc <HAL_RCC_OscConfig+0xc58>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b08      	cmp	r3, #8
 8002574:	f000 8213 	beq.w	800299e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	2b02      	cmp	r3, #2
 8002586:	f040 8162 	bne.w	800284e <HAL_RCC_OscConfig+0xeca>
 800258a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002592:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002596:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	fa93 f2a3 	rbit	r2, r3
 80025a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025aa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80025ae:	601a      	str	r2, [r3, #0]
  return result;
 80025b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80025b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	461a      	mov	r2, r3
 80025cc:	2300      	movs	r3, #0
 80025ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7fe feac 	bl	800132c <HAL_GetTick>
 80025d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d8:	e00c      	b.n	80025f4 <HAL_RCC_OscConfig+0xc70>
 80025da:	bf00      	nop
 80025dc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e0:	f7fe fea4 	bl	800132c <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e1fd      	b.n	80029f0 <HAL_RCC_OscConfig+0x106c>
 80025f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80025fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002600:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002606:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	fa93 f2a3 	rbit	r2, r3
 8002610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002614:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002618:	601a      	str	r2, [r3, #0]
  return result;
 800261a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002622:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002624:	fab3 f383 	clz	r3, r3
 8002628:	b2db      	uxtb	r3, r3
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	b2db      	uxtb	r3, r3
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	d102      	bne.n	800263e <HAL_RCC_OscConfig+0xcba>
 8002638:	4bb0      	ldr	r3, [pc, #704]	; (80028fc <HAL_RCC_OscConfig+0xf78>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	e027      	b.n	800268e <HAL_RCC_OscConfig+0xd0a>
 800263e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002642:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002646:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800264a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002650:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	fa93 f2a3 	rbit	r2, r3
 800265a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002668:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800266c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002676:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	fa93 f2a3 	rbit	r2, r3
 8002680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002684:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	4b9c      	ldr	r3, [pc, #624]	; (80028fc <HAL_RCC_OscConfig+0xf78>)
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002692:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002696:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800269a:	6011      	str	r1, [r2, #0]
 800269c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026a0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	fa92 f1a2 	rbit	r1, r2
 80026aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026ae:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80026b2:	6011      	str	r1, [r2, #0]
  return result;
 80026b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026b8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80026bc:	6812      	ldr	r2, [r2, #0]
 80026be:	fab2 f282 	clz	r2, r2
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	f042 0220 	orr.w	r2, r2, #32
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	f002 021f 	and.w	r2, r2, #31
 80026ce:	2101      	movs	r1, #1
 80026d0:	fa01 f202 	lsl.w	r2, r1, r2
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d182      	bne.n	80025e0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026da:	4b88      	ldr	r3, [pc, #544]	; (80028fc <HAL_RCC_OscConfig+0xf78>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80026ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	430b      	orrs	r3, r1
 80026fc:	497f      	ldr	r1, [pc, #508]	; (80028fc <HAL_RCC_OscConfig+0xf78>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	604b      	str	r3, [r1, #4]
 8002702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002706:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800270a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800270e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002714:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	fa93 f2a3 	rbit	r2, r3
 800271e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002722:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002726:	601a      	str	r2, [r3, #0]
  return result;
 8002728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002730:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800273c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	461a      	mov	r2, r3
 8002744:	2301      	movs	r3, #1
 8002746:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002748:	f7fe fdf0 	bl	800132c <HAL_GetTick>
 800274c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002750:	e009      	b.n	8002766 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002752:	f7fe fdeb 	bl	800132c <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e144      	b.n	80029f0 <HAL_RCC_OscConfig+0x106c>
 8002766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800276e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002772:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002778:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	fa93 f2a3 	rbit	r2, r3
 8002782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002786:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800278a:	601a      	str	r2, [r3, #0]
  return result;
 800278c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002790:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002794:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	095b      	lsrs	r3, r3, #5
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d102      	bne.n	80027b0 <HAL_RCC_OscConfig+0xe2c>
 80027aa:	4b54      	ldr	r3, [pc, #336]	; (80028fc <HAL_RCC_OscConfig+0xf78>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	e027      	b.n	8002800 <HAL_RCC_OscConfig+0xe7c>
 80027b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80027b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	fa93 f2a3 	rbit	r2, r3
 80027cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027da:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80027de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	fa93 f2a3 	rbit	r2, r3
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	4b3f      	ldr	r3, [pc, #252]	; (80028fc <HAL_RCC_OscConfig+0xf78>)
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002804:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002808:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800280c:	6011      	str	r1, [r2, #0]
 800280e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002812:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	fa92 f1a2 	rbit	r1, r2
 800281c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002820:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002824:	6011      	str	r1, [r2, #0]
  return result;
 8002826:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800282a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	fab2 f282 	clz	r2, r2
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	f042 0220 	orr.w	r2, r2, #32
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	f002 021f 	and.w	r2, r2, #31
 8002840:	2101      	movs	r1, #1
 8002842:	fa01 f202 	lsl.w	r2, r1, r2
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d082      	beq.n	8002752 <HAL_RCC_OscConfig+0xdce>
 800284c:	e0cf      	b.n	80029ee <HAL_RCC_OscConfig+0x106a>
 800284e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002852:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002856:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800285a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002860:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	fa93 f2a3 	rbit	r2, r3
 800286a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002872:	601a      	str	r2, [r3, #0]
  return result;
 8002874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002878:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800287c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002888:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	461a      	mov	r2, r3
 8002890:	2300      	movs	r3, #0
 8002892:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7fe fd4a 	bl	800132c <HAL_GetTick>
 8002898:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800289c:	e009      	b.n	80028b2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800289e:	f7fe fd45 	bl	800132c <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e09e      	b.n	80029f0 <HAL_RCC_OscConfig+0x106c>
 80028b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80028ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	fa93 f2a3 	rbit	r2, r3
 80028ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80028d6:	601a      	str	r2, [r3, #0]
  return result;
 80028d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028dc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80028e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e2:	fab3 f383 	clz	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	095b      	lsrs	r3, r3, #5
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d104      	bne.n	8002900 <HAL_RCC_OscConfig+0xf7c>
 80028f6:	4b01      	ldr	r3, [pc, #4]	; (80028fc <HAL_RCC_OscConfig+0xf78>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	e029      	b.n	8002950 <HAL_RCC_OscConfig+0xfcc>
 80028fc:	40021000 	.word	0x40021000
 8002900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002904:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002908:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800290c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002912:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	fa93 f2a3 	rbit	r2, r3
 800291c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002920:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800292e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002938:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	fa93 f2a3 	rbit	r2, r3
 8002942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002946:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	4b2b      	ldr	r3, [pc, #172]	; (80029fc <HAL_RCC_OscConfig+0x1078>)
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002954:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002958:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800295c:	6011      	str	r1, [r2, #0]
 800295e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002962:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	fa92 f1a2 	rbit	r1, r2
 800296c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002970:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002974:	6011      	str	r1, [r2, #0]
  return result;
 8002976:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800297a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	fab2 f282 	clz	r2, r2
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	f042 0220 	orr.w	r2, r2, #32
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	f002 021f 	and.w	r2, r2, #31
 8002990:	2101      	movs	r1, #1
 8002992:	fa01 f202 	lsl.w	r2, r1, r2
 8002996:	4013      	ands	r3, r2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d180      	bne.n	800289e <HAL_RCC_OscConfig+0xf1a>
 800299c:	e027      	b.n	80029ee <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800299e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e01e      	b.n	80029f0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029b2:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_RCC_OscConfig+0x1078>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80029be:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d10b      	bne.n	80029ea <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80029d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80029d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d001      	beq.n	80029ee <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40021000 	.word	0x40021000

08002a00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b09e      	sub	sp, #120	; 0x78
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e162      	b.n	8002cde <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a18:	4b90      	ldr	r3, [pc, #576]	; (8002c5c <HAL_RCC_ClockConfig+0x25c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d910      	bls.n	8002a48 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	4b8d      	ldr	r3, [pc, #564]	; (8002c5c <HAL_RCC_ClockConfig+0x25c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 0207 	bic.w	r2, r3, #7
 8002a2e:	498b      	ldr	r1, [pc, #556]	; (8002c5c <HAL_RCC_ClockConfig+0x25c>)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a36:	4b89      	ldr	r3, [pc, #548]	; (8002c5c <HAL_RCC_ClockConfig+0x25c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e14a      	b.n	8002cde <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a54:	4b82      	ldr	r3, [pc, #520]	; (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	497f      	ldr	r1, [pc, #508]	; (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 80dc 	beq.w	8002c2c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d13c      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xf6>
 8002a7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a80:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a84:	fa93 f3a3 	rbit	r3, r3
 8002a88:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8c:	fab3 f383 	clz	r3, r3
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d102      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xa6>
 8002aa0:	4b6f      	ldr	r3, [pc, #444]	; (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	e00f      	b.n	8002ac6 <HAL_RCC_ClockConfig+0xc6>
 8002aa6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aaa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	667b      	str	r3, [r7, #100]	; 0x64
 8002ab4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ab8:	663b      	str	r3, [r7, #96]	; 0x60
 8002aba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ac2:	4b67      	ldr	r3, [pc, #412]	; (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002aca:	65ba      	str	r2, [r7, #88]	; 0x58
 8002acc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ace:	fa92 f2a2 	rbit	r2, r2
 8002ad2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002ad4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ad6:	fab2 f282 	clz	r2, r2
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	f042 0220 	orr.w	r2, r2, #32
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	f002 021f 	and.w	r2, r2, #31
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d17b      	bne.n	8002bea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e0f3      	b.n	8002cde <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d13c      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x178>
 8002afe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0e:	fab3 f383 	clz	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d102      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x128>
 8002b22:	4b4f      	ldr	r3, [pc, #316]	; (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	e00f      	b.n	8002b48 <HAL_RCC_ClockConfig+0x148>
 8002b28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b2c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b30:	fa93 f3a3 	rbit	r3, r3
 8002b34:	647b      	str	r3, [r7, #68]	; 0x44
 8002b36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b3a:	643b      	str	r3, [r7, #64]	; 0x40
 8002b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b3e:	fa93 f3a3 	rbit	r3, r3
 8002b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b44:	4b46      	ldr	r3, [pc, #280]	; (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b4c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002b4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b50:	fa92 f2a2 	rbit	r2, r2
 8002b54:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b58:	fab2 f282 	clz	r2, r2
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	f042 0220 	orr.w	r2, r2, #32
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	f002 021f 	and.w	r2, r2, #31
 8002b68:	2101      	movs	r1, #1
 8002b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d13a      	bne.n	8002bea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0b2      	b.n	8002cde <HAL_RCC_ClockConfig+0x2de>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7e:	fa93 f3a3 	rbit	r3, r3
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b86:	fab3 f383 	clz	r3, r3
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	095b      	lsrs	r3, r3, #5
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d102      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0x1a0>
 8002b9a:	4b31      	ldr	r3, [pc, #196]	; (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	e00d      	b.n	8002bbc <HAL_RCC_ClockConfig+0x1bc>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
 8002bac:	2302      	movs	r3, #2
 8002bae:	623b      	str	r3, [r7, #32]
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	61fb      	str	r3, [r7, #28]
 8002bb8:	4b29      	ldr	r3, [pc, #164]	; (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	61ba      	str	r2, [r7, #24]
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	fa92 f2a2 	rbit	r2, r2
 8002bc6:	617a      	str	r2, [r7, #20]
  return result;
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	fab2 f282 	clz	r2, r2
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	f042 0220 	orr.w	r2, r2, #32
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	f002 021f 	and.w	r2, r2, #31
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e079      	b.n	8002cde <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bea:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f023 0203 	bic.w	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	491a      	ldr	r1, [pc, #104]	; (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bfc:	f7fe fb96 	bl	800132c <HAL_GetTick>
 8002c00:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c02:	e00a      	b.n	8002c1a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c04:	f7fe fb92 	bl	800132c <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e061      	b.n	8002cde <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1a:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <HAL_RCC_ClockConfig+0x260>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f003 020c 	and.w	r2, r3, #12
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d1eb      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_RCC_ClockConfig+0x25c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d214      	bcs.n	8002c64 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <HAL_RCC_ClockConfig+0x25c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 0207 	bic.w	r2, r3, #7
 8002c42:	4906      	ldr	r1, [pc, #24]	; (8002c5c <HAL_RCC_ClockConfig+0x25c>)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4a:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <HAL_RCC_ClockConfig+0x25c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e040      	b.n	8002cde <HAL_RCC_ClockConfig+0x2de>
 8002c5c:	40022000 	.word	0x40022000
 8002c60:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c70:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	491a      	ldr	r1, [pc, #104]	; (8002ce8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d009      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c8e:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4912      	ldr	r1, [pc, #72]	; (8002ce8 <HAL_RCC_ClockConfig+0x2e8>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ca2:	f000 f829 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
 8002ca6:	4601      	mov	r1, r0
 8002ca8:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <HAL_RCC_ClockConfig+0x2e8>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cb0:	22f0      	movs	r2, #240	; 0xf0
 8002cb2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	fa92 f2a2 	rbit	r2, r2
 8002cba:	60fa      	str	r2, [r7, #12]
  return result;
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	fab2 f282 	clz	r2, r2
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	40d3      	lsrs	r3, r2
 8002cc6:	4a09      	ldr	r2, [pc, #36]	; (8002cec <HAL_RCC_ClockConfig+0x2ec>)
 8002cc8:	5cd3      	ldrb	r3, [r2, r3]
 8002cca:	fa21 f303 	lsr.w	r3, r1, r3
 8002cce:	4a08      	ldr	r2, [pc, #32]	; (8002cf0 <HAL_RCC_ClockConfig+0x2f0>)
 8002cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002cd2:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <HAL_RCC_ClockConfig+0x2f4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fe fa14 	bl	8001104 <HAL_InitTick>
  
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3778      	adds	r7, #120	; 0x78
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	080060d8 	.word	0x080060d8
 8002cf0:	20000430 	.word	0x20000430
 8002cf4:	20000434 	.word	0x20000434

08002cf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b08b      	sub	sp, #44	; 0x2c
 8002cfc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
 8002d02:	2300      	movs	r3, #0
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	2300      	movs	r3, #0
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002d12:	4b29      	ldr	r3, [pc, #164]	; (8002db8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d002      	beq.n	8002d28 <HAL_RCC_GetSysClockFreq+0x30>
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d003      	beq.n	8002d2e <HAL_RCC_GetSysClockFreq+0x36>
 8002d26:	e03c      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d28:	4b24      	ldr	r3, [pc, #144]	; (8002dbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d2a:	623b      	str	r3, [r7, #32]
      break;
 8002d2c:	e03c      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002d34:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002d38:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	fa92 f2a2 	rbit	r2, r2
 8002d40:	607a      	str	r2, [r7, #4]
  return result;
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	fab2 f282 	clz	r2, r2
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	40d3      	lsrs	r3, r2
 8002d4c:	4a1c      	ldr	r2, [pc, #112]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d4e:	5cd3      	ldrb	r3, [r2, r3]
 8002d50:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002d52:	4b19      	ldr	r3, [pc, #100]	; (8002db8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	220f      	movs	r2, #15
 8002d5c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	fa92 f2a2 	rbit	r2, r2
 8002d64:	60fa      	str	r2, [r7, #12]
  return result;
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	fab2 f282 	clz	r2, r2
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	40d3      	lsrs	r3, r2
 8002d70:	4a14      	ldr	r2, [pc, #80]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d72:	5cd3      	ldrb	r3, [r2, r3]
 8002d74:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d008      	beq.n	8002d92 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d80:	4a0e      	ldr	r2, [pc, #56]	; (8002dbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	fb02 f303 	mul.w	r3, r2, r3
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d90:	e004      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	4a0c      	ldr	r2, [pc, #48]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d96:	fb02 f303 	mul.w	r3, r2, r3
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	623b      	str	r3, [r7, #32]
      break;
 8002da0:	e002      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002da2:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002da4:	623b      	str	r3, [r7, #32]
      break;
 8002da6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002da8:	6a3b      	ldr	r3, [r7, #32]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	372c      	adds	r7, #44	; 0x2c
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	007a1200 	.word	0x007a1200
 8002dc0:	080060f0 	.word	0x080060f0
 8002dc4:	08006100 	.word	0x08006100
 8002dc8:	003d0900 	.word	0x003d0900

08002dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd0:	4b03      	ldr	r3, [pc, #12]	; (8002de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	20000430 	.word	0x20000430

08002de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002dea:	f7ff ffef 	bl	8002dcc <HAL_RCC_GetHCLKFreq>
 8002dee:	4601      	mov	r1, r0
 8002df0:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002df8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002dfc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	fa92 f2a2 	rbit	r2, r2
 8002e04:	603a      	str	r2, [r7, #0]
  return result;
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	fab2 f282 	clz	r2, r2
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	40d3      	lsrs	r3, r2
 8002e10:	4a04      	ldr	r2, [pc, #16]	; (8002e24 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002e12:	5cd3      	ldrb	r3, [r2, r3]
 8002e14:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40021000 	.word	0x40021000
 8002e24:	080060e8 	.word	0x080060e8

08002e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002e2e:	f7ff ffcd 	bl	8002dcc <HAL_RCC_GetHCLKFreq>
 8002e32:	4601      	mov	r1, r0
 8002e34:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002e3c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002e40:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	fa92 f2a2 	rbit	r2, r2
 8002e48:	603a      	str	r2, [r7, #0]
  return result;
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	fab2 f282 	clz	r2, r2
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	40d3      	lsrs	r3, r2
 8002e54:	4a04      	ldr	r2, [pc, #16]	; (8002e68 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002e56:	5cd3      	ldrb	r3, [r2, r3]
 8002e58:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40021000 	.word	0x40021000
 8002e68:	080060e8 	.word	0x080060e8

08002e6c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	220f      	movs	r2, #15
 8002e7a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e7c:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 0203 	and.w	r2, r3, #3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002e88:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002e94:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ea0:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <HAL_RCC_GetClockConfig+0x5c>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	08db      	lsrs	r3, r3, #3
 8002ea6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002eae:	4b07      	ldr	r3, [pc, #28]	; (8002ecc <HAL_RCC_GetClockConfig+0x60>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0207 	and.w	r2, r3, #7
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	601a      	str	r2, [r3, #0]
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	40022000 	.word	0x40022000

08002ed0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b092      	sub	sp, #72	; 0x48
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 80d4 	beq.w	800309c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ef4:	4b4e      	ldr	r3, [pc, #312]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10e      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f00:	4b4b      	ldr	r3, [pc, #300]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	4a4a      	ldr	r2, [pc, #296]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	61d3      	str	r3, [r2, #28]
 8002f0c:	4b48      	ldr	r3, [pc, #288]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1e:	4b45      	ldr	r3, [pc, #276]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d118      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f2a:	4b42      	ldr	r3, [pc, #264]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a41      	ldr	r2, [pc, #260]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f36:	f7fe f9f9 	bl	800132c <HAL_GetTick>
 8002f3a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3c:	e008      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3e:	f7fe f9f5 	bl	800132c <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b64      	cmp	r3, #100	; 0x64
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e14b      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f50:	4b38      	ldr	r3, [pc, #224]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0f0      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f5c:	4b34      	ldr	r3, [pc, #208]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f64:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 8084 	beq.w	8003076 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d07c      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f7c:	4b2c      	ldr	r3, [pc, #176]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	fa93 f3a3 	rbit	r3, r3
 8002f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4b26      	ldr	r3, [pc, #152]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb2:	fa93 f3a3 	rbit	r3, r3
 8002fb6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fba:	fab3 f383 	clz	r3, r3
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	461a      	mov	r2, r3
 8002fca:	2300      	movs	r3, #0
 8002fcc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fce:	4a18      	ldr	r2, [pc, #96]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d04b      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fde:	f7fe f9a5 	bl	800132c <HAL_GetTick>
 8002fe2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe4:	e00a      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe6:	f7fe f9a1 	bl	800132c <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e0f5      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
 8003008:	2302      	movs	r3, #2
 800300a:	623b      	str	r3, [r7, #32]
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	fa93 f3a3 	rbit	r3, r3
 8003012:	61fb      	str	r3, [r7, #28]
  return result;
 8003014:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003016:	fab3 f383 	clz	r3, r3
 800301a:	b2db      	uxtb	r3, r3
 800301c:	095b      	lsrs	r3, r3, #5
 800301e:	b2db      	uxtb	r3, r3
 8003020:	f043 0302 	orr.w	r3, r3, #2
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d108      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800302a:	4b01      	ldr	r3, [pc, #4]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	e00d      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003030:	40021000 	.word	0x40021000
 8003034:	40007000 	.word	0x40007000
 8003038:	10908100 	.word	0x10908100
 800303c:	2302      	movs	r3, #2
 800303e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	4b69      	ldr	r3, [pc, #420]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	2202      	movs	r2, #2
 800304e:	613a      	str	r2, [r7, #16]
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	fa92 f2a2 	rbit	r2, r2
 8003056:	60fa      	str	r2, [r7, #12]
  return result;
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	fab2 f282 	clz	r2, r2
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	f002 021f 	and.w	r2, r2, #31
 800306a:	2101      	movs	r1, #1
 800306c:	fa01 f202 	lsl.w	r2, r1, r2
 8003070:	4013      	ands	r3, r2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0b7      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003076:	4b5e      	ldr	r3, [pc, #376]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	495b      	ldr	r1, [pc, #364]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003084:	4313      	orrs	r3, r2
 8003086:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003088:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800308c:	2b01      	cmp	r3, #1
 800308e:	d105      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003090:	4b57      	ldr	r3, [pc, #348]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	4a56      	ldr	r2, [pc, #344]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800309a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d008      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030a8:	4b51      	ldr	r3, [pc, #324]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ac:	f023 0203 	bic.w	r2, r3, #3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	494e      	ldr	r1, [pc, #312]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0320 	and.w	r3, r3, #32
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d008      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030c6:	4b4a      	ldr	r3, [pc, #296]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	f023 0210 	bic.w	r2, r3, #16
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	4947      	ldr	r1, [pc, #284]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80030e4:	4b42      	ldr	r3, [pc, #264]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	493f      	ldr	r1, [pc, #252]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d008      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003102:	4b3b      	ldr	r3, [pc, #236]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	f023 0220 	bic.w	r2, r3, #32
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	4938      	ldr	r1, [pc, #224]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003110:	4313      	orrs	r3, r2
 8003112:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d008      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003120:	4b33      	ldr	r3, [pc, #204]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003124:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	4930      	ldr	r1, [pc, #192]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800312e:	4313      	orrs	r3, r2
 8003130:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800313a:	2b00      	cmp	r3, #0
 800313c:	d008      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800313e:	4b2c      	ldr	r3, [pc, #176]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	4929      	ldr	r1, [pc, #164]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800314c:	4313      	orrs	r3, r2
 800314e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800315c:	4b24      	ldr	r3, [pc, #144]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	4921      	ldr	r1, [pc, #132]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800316a:	4313      	orrs	r3, r2
 800316c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d008      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800317a:	4b1d      	ldr	r3, [pc, #116]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	491a      	ldr	r1, [pc, #104]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003188:	4313      	orrs	r3, r2
 800318a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003198:	4b15      	ldr	r3, [pc, #84]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	4912      	ldr	r1, [pc, #72]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d008      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80031b6:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c2:	490b      	ldr	r1, [pc, #44]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d008      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	4903      	ldr	r1, [pc, #12]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3748      	adds	r7, #72	; 0x48
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40021000 	.word	0x40021000

080031f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e049      	b.n	800329a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fd febc 	bl	8000f98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3304      	adds	r3, #4
 8003230:	4619      	mov	r1, r3
 8003232:	4610      	mov	r0, r2
 8003234:	f000 fae6 	bl	8003804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d001      	beq.n	80032bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e033      	b.n	8003324 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a19      	ldr	r2, [pc, #100]	; (8003330 <HAL_TIM_Base_Start+0x8c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d009      	beq.n	80032e2 <HAL_TIM_Base_Start+0x3e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d6:	d004      	beq.n	80032e2 <HAL_TIM_Base_Start+0x3e>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a15      	ldr	r2, [pc, #84]	; (8003334 <HAL_TIM_Base_Start+0x90>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d115      	bne.n	800330e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	4b13      	ldr	r3, [pc, #76]	; (8003338 <HAL_TIM_Base_Start+0x94>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b06      	cmp	r3, #6
 80032f2:	d015      	beq.n	8003320 <HAL_TIM_Base_Start+0x7c>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032fa:	d011      	beq.n	8003320 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800330c:	e008      	b.n	8003320 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f042 0201 	orr.w	r2, r2, #1
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	e000      	b.n	8003322 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003320:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	40012c00 	.word	0x40012c00
 8003334:	40014000 	.word	0x40014000
 8003338:	00010007 	.word	0x00010007

0800333c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b01      	cmp	r3, #1
 800334e:	d001      	beq.n	8003354 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e03b      	b.n	80033cc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0201 	orr.w	r2, r2, #1
 800336a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a19      	ldr	r2, [pc, #100]	; (80033d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d009      	beq.n	800338a <HAL_TIM_Base_Start_IT+0x4e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800337e:	d004      	beq.n	800338a <HAL_TIM_Base_Start_IT+0x4e>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a15      	ldr	r2, [pc, #84]	; (80033dc <HAL_TIM_Base_Start_IT+0xa0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d115      	bne.n	80033b6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	4b13      	ldr	r3, [pc, #76]	; (80033e0 <HAL_TIM_Base_Start_IT+0xa4>)
 8003392:	4013      	ands	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2b06      	cmp	r3, #6
 800339a:	d015      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x8c>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a2:	d011      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0201 	orr.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b4:	e008      	b.n	80033c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0201 	orr.w	r2, r2, #1
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	e000      	b.n	80033ca <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	40012c00 	.word	0x40012c00
 80033dc:	40014000 	.word	0x40014000
 80033e0:	00010007 	.word	0x00010007

080033e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d122      	bne.n	8003440 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b02      	cmp	r3, #2
 8003406:	d11b      	bne.n	8003440 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f06f 0202 	mvn.w	r2, #2
 8003410:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f9ce 	bl	80037c8 <HAL_TIM_IC_CaptureCallback>
 800342c:	e005      	b.n	800343a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f9c0 	bl	80037b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f9d1 	bl	80037dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b04      	cmp	r3, #4
 800344c:	d122      	bne.n	8003494 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b04      	cmp	r3, #4
 800345a:	d11b      	bne.n	8003494 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0204 	mvn.w	r2, #4
 8003464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2202      	movs	r2, #2
 800346a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f9a4 	bl	80037c8 <HAL_TIM_IC_CaptureCallback>
 8003480:	e005      	b.n	800348e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f996 	bl	80037b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f9a7 	bl	80037dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d122      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f003 0308 	and.w	r3, r3, #8
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d11b      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f06f 0208 	mvn.w	r2, #8
 80034b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2204      	movs	r2, #4
 80034be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f97a 	bl	80037c8 <HAL_TIM_IC_CaptureCallback>
 80034d4:	e005      	b.n	80034e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f96c 	bl	80037b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f97d 	bl	80037dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0310 	and.w	r3, r3, #16
 80034f2:	2b10      	cmp	r3, #16
 80034f4:	d122      	bne.n	800353c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	2b10      	cmp	r3, #16
 8003502:	d11b      	bne.n	800353c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0210 	mvn.w	r2, #16
 800350c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2208      	movs	r2, #8
 8003512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f950 	bl	80037c8 <HAL_TIM_IC_CaptureCallback>
 8003528:	e005      	b.n	8003536 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f942 	bl	80037b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f953 	bl	80037dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b01      	cmp	r3, #1
 8003548:	d10e      	bne.n	8003568 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b01      	cmp	r3, #1
 8003556:	d107      	bne.n	8003568 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0201 	mvn.w	r2, #1
 8003560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7fd fa54 	bl	8000a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003572:	2b80      	cmp	r3, #128	; 0x80
 8003574:	d10e      	bne.n	8003594 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003580:	2b80      	cmp	r3, #128	; 0x80
 8003582:	d107      	bne.n	8003594 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800358c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fab0 	bl	8003af4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035a2:	d10e      	bne.n	80035c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ae:	2b80      	cmp	r3, #128	; 0x80
 80035b0:	d107      	bne.n	80035c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 faa3 	bl	8003b08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035cc:	2b40      	cmp	r3, #64	; 0x40
 80035ce:	d10e      	bne.n	80035ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	d107      	bne.n	80035ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f901 	bl	80037f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b20      	cmp	r3, #32
 80035fa:	d10e      	bne.n	800361a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f003 0320 	and.w	r3, r3, #32
 8003606:	2b20      	cmp	r3, #32
 8003608:	d107      	bne.n	800361a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f06f 0220 	mvn.w	r2, #32
 8003612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 fa63 	bl	8003ae0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b084      	sub	sp, #16
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
 800362a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <HAL_TIM_ConfigClockSource+0x1c>
 800363a:	2302      	movs	r3, #2
 800363c:	e0b6      	b.n	80037ac <HAL_TIM_ConfigClockSource+0x18a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2202      	movs	r2, #2
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800365c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003660:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003668:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800367a:	d03e      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0xd8>
 800367c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003680:	f200 8087 	bhi.w	8003792 <HAL_TIM_ConfigClockSource+0x170>
 8003684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003688:	f000 8086 	beq.w	8003798 <HAL_TIM_ConfigClockSource+0x176>
 800368c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003690:	d87f      	bhi.n	8003792 <HAL_TIM_ConfigClockSource+0x170>
 8003692:	2b70      	cmp	r3, #112	; 0x70
 8003694:	d01a      	beq.n	80036cc <HAL_TIM_ConfigClockSource+0xaa>
 8003696:	2b70      	cmp	r3, #112	; 0x70
 8003698:	d87b      	bhi.n	8003792 <HAL_TIM_ConfigClockSource+0x170>
 800369a:	2b60      	cmp	r3, #96	; 0x60
 800369c:	d050      	beq.n	8003740 <HAL_TIM_ConfigClockSource+0x11e>
 800369e:	2b60      	cmp	r3, #96	; 0x60
 80036a0:	d877      	bhi.n	8003792 <HAL_TIM_ConfigClockSource+0x170>
 80036a2:	2b50      	cmp	r3, #80	; 0x50
 80036a4:	d03c      	beq.n	8003720 <HAL_TIM_ConfigClockSource+0xfe>
 80036a6:	2b50      	cmp	r3, #80	; 0x50
 80036a8:	d873      	bhi.n	8003792 <HAL_TIM_ConfigClockSource+0x170>
 80036aa:	2b40      	cmp	r3, #64	; 0x40
 80036ac:	d058      	beq.n	8003760 <HAL_TIM_ConfigClockSource+0x13e>
 80036ae:	2b40      	cmp	r3, #64	; 0x40
 80036b0:	d86f      	bhi.n	8003792 <HAL_TIM_ConfigClockSource+0x170>
 80036b2:	2b30      	cmp	r3, #48	; 0x30
 80036b4:	d064      	beq.n	8003780 <HAL_TIM_ConfigClockSource+0x15e>
 80036b6:	2b30      	cmp	r3, #48	; 0x30
 80036b8:	d86b      	bhi.n	8003792 <HAL_TIM_ConfigClockSource+0x170>
 80036ba:	2b20      	cmp	r3, #32
 80036bc:	d060      	beq.n	8003780 <HAL_TIM_ConfigClockSource+0x15e>
 80036be:	2b20      	cmp	r3, #32
 80036c0:	d867      	bhi.n	8003792 <HAL_TIM_ConfigClockSource+0x170>
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d05c      	beq.n	8003780 <HAL_TIM_ConfigClockSource+0x15e>
 80036c6:	2b10      	cmp	r3, #16
 80036c8:	d05a      	beq.n	8003780 <HAL_TIM_ConfigClockSource+0x15e>
 80036ca:	e062      	b.n	8003792 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	6899      	ldr	r1, [r3, #8]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f000 f97a 	bl	80039d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	609a      	str	r2, [r3, #8]
      break;
 80036f8:	e04f      	b.n	800379a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	6899      	ldr	r1, [r3, #8]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f000 f963 	bl	80039d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800371c:	609a      	str	r2, [r3, #8]
      break;
 800371e:	e03c      	b.n	800379a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6818      	ldr	r0, [r3, #0]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	6859      	ldr	r1, [r3, #4]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	461a      	mov	r2, r3
 800372e:	f000 f8d7 	bl	80038e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2150      	movs	r1, #80	; 0x50
 8003738:	4618      	mov	r0, r3
 800373a:	f000 f930 	bl	800399e <TIM_ITRx_SetConfig>
      break;
 800373e:	e02c      	b.n	800379a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6818      	ldr	r0, [r3, #0]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	6859      	ldr	r1, [r3, #4]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	461a      	mov	r2, r3
 800374e:	f000 f8f6 	bl	800393e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2160      	movs	r1, #96	; 0x60
 8003758:	4618      	mov	r0, r3
 800375a:	f000 f920 	bl	800399e <TIM_ITRx_SetConfig>
      break;
 800375e:	e01c      	b.n	800379a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	6859      	ldr	r1, [r3, #4]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	461a      	mov	r2, r3
 800376e:	f000 f8b7 	bl	80038e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2140      	movs	r1, #64	; 0x40
 8003778:	4618      	mov	r0, r3
 800377a:	f000 f910 	bl	800399e <TIM_ITRx_SetConfig>
      break;
 800377e:	e00c      	b.n	800379a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4619      	mov	r1, r3
 800378a:	4610      	mov	r0, r2
 800378c:	f000 f907 	bl	800399e <TIM_ITRx_SetConfig>
      break;
 8003790:	e003      	b.n	800379a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	73fb      	strb	r3, [r7, #15]
      break;
 8003796:	e000      	b.n	800379a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003798:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a2e      	ldr	r2, [pc, #184]	; (80038d0 <TIM_Base_SetConfig+0xcc>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d003      	beq.n	8003824 <TIM_Base_SetConfig+0x20>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003822:	d108      	bne.n	8003836 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800382a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a25      	ldr	r2, [pc, #148]	; (80038d0 <TIM_Base_SetConfig+0xcc>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d00f      	beq.n	800385e <TIM_Base_SetConfig+0x5a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003844:	d00b      	beq.n	800385e <TIM_Base_SetConfig+0x5a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a22      	ldr	r2, [pc, #136]	; (80038d4 <TIM_Base_SetConfig+0xd0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d007      	beq.n	800385e <TIM_Base_SetConfig+0x5a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a21      	ldr	r2, [pc, #132]	; (80038d8 <TIM_Base_SetConfig+0xd4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d003      	beq.n	800385e <TIM_Base_SetConfig+0x5a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a20      	ldr	r2, [pc, #128]	; (80038dc <TIM_Base_SetConfig+0xd8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d108      	bne.n	8003870 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a0e      	ldr	r2, [pc, #56]	; (80038d0 <TIM_Base_SetConfig+0xcc>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d00b      	beq.n	80038b4 <TIM_Base_SetConfig+0xb0>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a0d      	ldr	r2, [pc, #52]	; (80038d4 <TIM_Base_SetConfig+0xd0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d007      	beq.n	80038b4 <TIM_Base_SetConfig+0xb0>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a0c      	ldr	r2, [pc, #48]	; (80038d8 <TIM_Base_SetConfig+0xd4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d003      	beq.n	80038b4 <TIM_Base_SetConfig+0xb0>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a0b      	ldr	r2, [pc, #44]	; (80038dc <TIM_Base_SetConfig+0xd8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d103      	bne.n	80038bc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	615a      	str	r2, [r3, #20]
}
 80038c2:	bf00      	nop
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40012c00 	.word	0x40012c00
 80038d4:	40014000 	.word	0x40014000
 80038d8:	40014400 	.word	0x40014400
 80038dc:	40014800 	.word	0x40014800

080038e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	f023 0201 	bic.w	r2, r3, #1
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800390a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f023 030a 	bic.w	r3, r3, #10
 800391c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	621a      	str	r2, [r3, #32]
}
 8003932:	bf00      	nop
 8003934:	371c      	adds	r7, #28
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800393e:	b480      	push	{r7}
 8003940:	b087      	sub	sp, #28
 8003942:	af00      	add	r7, sp, #0
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	f023 0210 	bic.w	r2, r3, #16
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003968:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	031b      	lsls	r3, r3, #12
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	4313      	orrs	r3, r2
 8003972:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800397a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	621a      	str	r2, [r3, #32]
}
 8003992:	bf00      	nop
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800399e:	b480      	push	{r7}
 80039a0:	b085      	sub	sp, #20
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
 80039a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f043 0307 	orr.w	r3, r3, #7
 80039c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	609a      	str	r2, [r3, #8]
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	021a      	lsls	r2, r3, #8
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	431a      	orrs	r2, r3
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	609a      	str	r2, [r3, #8]
}
 8003a08:	bf00      	nop
 8003a0a:	371c      	adds	r7, #28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e04f      	b.n	8003acc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a21      	ldr	r2, [pc, #132]	; (8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d108      	bne.n	8003a68 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a5c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a14      	ldr	r2, [pc, #80]	; (8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d009      	beq.n	8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a94:	d004      	beq.n	8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a10      	ldr	r2, [pc, #64]	; (8003adc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d10c      	bne.n	8003aba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aa6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	40012c00 	.word	0x40012c00
 8003adc:	40014000 	.word	0x40014000

08003ae0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e040      	b.n	8003bb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fd fa5c 	bl	8000ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2224      	movs	r2, #36	; 0x24
 8003b48:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0201 	bic.w	r2, r2, #1
 8003b58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fb32 	bl	80041c4 <UART_SetConfig>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e022      	b.n	8003bb0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fc5c 	bl	8004430 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fce3 	bl	8004574 <UART_CheckIdleState>
 8003bae:	4603      	mov	r3, r0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b0ba      	sub	sp, #232	; 0xe8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003bde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003be2:	f640 030f 	movw	r3, #2063	; 0x80f
 8003be6:	4013      	ands	r3, r2
 8003be8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003bec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d115      	bne.n	8003c20 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00f      	beq.n	8003c20 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d009      	beq.n	8003c20 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 82ab 	beq.w	800416c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	4798      	blx	r3
      }
      return;
 8003c1e:	e2a5      	b.n	800416c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 8117 	beq.w	8003e58 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003c3a:	4b85      	ldr	r3, [pc, #532]	; (8003e50 <HAL_UART_IRQHandler+0x298>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 810a 	beq.w	8003e58 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d011      	beq.n	8003c74 <HAL_UART_IRQHandler+0xbc>
 8003c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00b      	beq.n	8003c74 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2201      	movs	r2, #1
 8003c62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c6a:	f043 0201 	orr.w	r2, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d011      	beq.n	8003ca4 <HAL_UART_IRQHandler+0xec>
 8003c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00b      	beq.n	8003ca4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2202      	movs	r2, #2
 8003c92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c9a:	f043 0204 	orr.w	r2, r3, #4
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d011      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x11c>
 8003cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00b      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cca:	f043 0202 	orr.w	r2, r3, #2
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d017      	beq.n	8003d10 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d105      	bne.n	8003cf8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cf0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00b      	beq.n	8003d10 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d06:	f043 0208 	orr.w	r2, r3, #8
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d012      	beq.n	8003d42 <HAL_UART_IRQHandler+0x18a>
 8003d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00c      	beq.n	8003d42 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d38:	f043 0220 	orr.w	r2, r3, #32
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 8211 	beq.w	8004170 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d52:	f003 0320 	and.w	r3, r3, #32
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00d      	beq.n	8003d76 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d007      	beq.n	8003d76 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8a:	2b40      	cmp	r3, #64	; 0x40
 8003d8c:	d005      	beq.n	8003d9a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d92:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d04f      	beq.n	8003e3a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fcf9 	bl	8004792 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003daa:	2b40      	cmp	r3, #64	; 0x40
 8003dac:	d141      	bne.n	8003e32 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3308      	adds	r3, #8
 8003db4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003dbc:	e853 3f00 	ldrex	r3, [r3]
 8003dc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3308      	adds	r3, #8
 8003dd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003dda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003dde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003de6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003dea:	e841 2300 	strex	r3, r2, [r1]
 8003dee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003df2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1d9      	bne.n	8003dae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d013      	beq.n	8003e2a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e06:	4a13      	ldr	r2, [pc, #76]	; (8003e54 <HAL_UART_IRQHandler+0x29c>)
 8003e08:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fd fbd7 	bl	80015c2 <HAL_DMA_Abort_IT>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d017      	beq.n	8003e4a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e24:	4610      	mov	r0, r2
 8003e26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e28:	e00f      	b.n	8003e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f9b4 	bl	8004198 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e30:	e00b      	b.n	8003e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f9b0 	bl	8004198 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e38:	e007      	b.n	8003e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f9ac 	bl	8004198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003e48:	e192      	b.n	8004170 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e4a:	bf00      	nop
    return;
 8003e4c:	e190      	b.n	8004170 <HAL_UART_IRQHandler+0x5b8>
 8003e4e:	bf00      	nop
 8003e50:	04000120 	.word	0x04000120
 8003e54:	0800485b 	.word	0x0800485b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	f040 814b 	bne.w	80040f8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 8144 	beq.w	80040f8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e74:	f003 0310 	and.w	r3, r3, #16
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 813d 	beq.w	80040f8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2210      	movs	r2, #16
 8003e84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e90:	2b40      	cmp	r3, #64	; 0x40
 8003e92:	f040 80b5 	bne.w	8004000 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ea2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 8164 	beq.w	8004174 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003eb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	f080 815c 	bcs.w	8004174 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ec2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	2b20      	cmp	r3, #32
 8003ece:	f000 8086 	beq.w	8003fde <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ede:	e853 3f00 	ldrex	r3, [r3]
 8003ee2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ee6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003eea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003efc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f00:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f04:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f08:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f0c:	e841 2300 	strex	r3, r2, [r1]
 8003f10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1da      	bne.n	8003ed2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3308      	adds	r3, #8
 8003f22:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f26:	e853 3f00 	ldrex	r3, [r3]
 8003f2a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f2e:	f023 0301 	bic.w	r3, r3, #1
 8003f32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3308      	adds	r3, #8
 8003f3c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f40:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f44:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f46:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f48:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f4c:	e841 2300 	strex	r3, r2, [r1]
 8003f50:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e1      	bne.n	8003f1c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3308      	adds	r3, #8
 8003f78:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f7c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f80:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f84:	e841 2300 	strex	r3, r2, [r1]
 8003f88:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e3      	bne.n	8003f58 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa6:	e853 3f00 	ldrex	r3, [r3]
 8003faa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fae:	f023 0310 	bic.w	r3, r3, #16
 8003fb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fc2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fc8:	e841 2300 	strex	r3, r2, [r1]
 8003fcc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1e4      	bne.n	8003f9e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fd fab9 	bl	8001550 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f8d7 	bl	80041ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ffe:	e0b9      	b.n	8004174 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800400c:	b29b      	uxth	r3, r3
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80ab 	beq.w	8004178 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004022:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 80a6 	beq.w	8004178 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004034:	e853 3f00 	ldrex	r3, [r3]
 8004038:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800403a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004040:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	461a      	mov	r2, r3
 800404a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800404e:	647b      	str	r3, [r7, #68]	; 0x44
 8004050:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004054:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800405c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1e4      	bne.n	800402c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3308      	adds	r3, #8
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	623b      	str	r3, [r7, #32]
   return(result);
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	f023 0301 	bic.w	r3, r3, #1
 8004078:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3308      	adds	r3, #8
 8004082:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004086:	633a      	str	r2, [r7, #48]	; 0x30
 8004088:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800408c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800408e:	e841 2300 	strex	r3, r2, [r1]
 8004092:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1e3      	bne.n	8004062 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	e853 3f00 	ldrex	r3, [r3]
 80040ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0310 	bic.w	r3, r3, #16
 80040c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040d0:	61fb      	str	r3, [r7, #28]
 80040d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d4:	69b9      	ldr	r1, [r7, #24]
 80040d6:	69fa      	ldr	r2, [r7, #28]
 80040d8:	e841 2300 	strex	r3, r2, [r1]
 80040dc:	617b      	str	r3, [r7, #20]
   return(result);
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1e4      	bne.n	80040ae <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040ee:	4619      	mov	r1, r3
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f85b 	bl	80041ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040f6:	e03f      	b.n	8004178 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80040f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00e      	beq.n	8004122 <HAL_UART_IRQHandler+0x56a>
 8004104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004108:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004118:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fbdd 	bl	80048da <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004120:	e02d      	b.n	800417e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00e      	beq.n	800414c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800412e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004136:	2b00      	cmp	r3, #0
 8004138:	d008      	beq.n	800414c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d01c      	beq.n	800417c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	4798      	blx	r3
    }
    return;
 800414a:	e017      	b.n	800417c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800414c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004154:	2b00      	cmp	r3, #0
 8004156:	d012      	beq.n	800417e <HAL_UART_IRQHandler+0x5c6>
 8004158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800415c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00c      	beq.n	800417e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fb8e 	bl	8004886 <UART_EndTransmit_IT>
    return;
 800416a:	e008      	b.n	800417e <HAL_UART_IRQHandler+0x5c6>
      return;
 800416c:	bf00      	nop
 800416e:	e006      	b.n	800417e <HAL_UART_IRQHandler+0x5c6>
    return;
 8004170:	bf00      	nop
 8004172:	e004      	b.n	800417e <HAL_UART_IRQHandler+0x5c6>
      return;
 8004174:	bf00      	nop
 8004176:	e002      	b.n	800417e <HAL_UART_IRQHandler+0x5c6>
      return;
 8004178:	bf00      	nop
 800417a:	e000      	b.n	800417e <HAL_UART_IRQHandler+0x5c6>
    return;
 800417c:	bf00      	nop
  }

}
 800417e:	37e8      	adds	r7, #232	; 0xe8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	4b8a      	ldr	r3, [pc, #552]	; (8004418 <UART_SetConfig+0x254>)
 80041f0:	4013      	ands	r3, r2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6812      	ldr	r2, [r2, #0]
 80041f6:	6979      	ldr	r1, [r7, #20]
 80041f8:	430b      	orrs	r3, r1
 80041fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	4313      	orrs	r3, r2
 8004220:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	430a      	orrs	r2, r1
 8004234:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a78      	ldr	r2, [pc, #480]	; (800441c <UART_SetConfig+0x258>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d120      	bne.n	8004282 <UART_SetConfig+0xbe>
 8004240:	4b77      	ldr	r3, [pc, #476]	; (8004420 <UART_SetConfig+0x25c>)
 8004242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004244:	f003 0303 	and.w	r3, r3, #3
 8004248:	2b03      	cmp	r3, #3
 800424a:	d817      	bhi.n	800427c <UART_SetConfig+0xb8>
 800424c:	a201      	add	r2, pc, #4	; (adr r2, 8004254 <UART_SetConfig+0x90>)
 800424e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004252:	bf00      	nop
 8004254:	08004265 	.word	0x08004265
 8004258:	08004271 	.word	0x08004271
 800425c:	08004277 	.word	0x08004277
 8004260:	0800426b 	.word	0x0800426b
 8004264:	2300      	movs	r3, #0
 8004266:	77fb      	strb	r3, [r7, #31]
 8004268:	e01d      	b.n	80042a6 <UART_SetConfig+0xe2>
 800426a:	2302      	movs	r3, #2
 800426c:	77fb      	strb	r3, [r7, #31]
 800426e:	e01a      	b.n	80042a6 <UART_SetConfig+0xe2>
 8004270:	2304      	movs	r3, #4
 8004272:	77fb      	strb	r3, [r7, #31]
 8004274:	e017      	b.n	80042a6 <UART_SetConfig+0xe2>
 8004276:	2308      	movs	r3, #8
 8004278:	77fb      	strb	r3, [r7, #31]
 800427a:	e014      	b.n	80042a6 <UART_SetConfig+0xe2>
 800427c:	2310      	movs	r3, #16
 800427e:	77fb      	strb	r3, [r7, #31]
 8004280:	e011      	b.n	80042a6 <UART_SetConfig+0xe2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a67      	ldr	r2, [pc, #412]	; (8004424 <UART_SetConfig+0x260>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d102      	bne.n	8004292 <UART_SetConfig+0xce>
 800428c:	2300      	movs	r3, #0
 800428e:	77fb      	strb	r3, [r7, #31]
 8004290:	e009      	b.n	80042a6 <UART_SetConfig+0xe2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a64      	ldr	r2, [pc, #400]	; (8004428 <UART_SetConfig+0x264>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d102      	bne.n	80042a2 <UART_SetConfig+0xde>
 800429c:	2300      	movs	r3, #0
 800429e:	77fb      	strb	r3, [r7, #31]
 80042a0:	e001      	b.n	80042a6 <UART_SetConfig+0xe2>
 80042a2:	2310      	movs	r3, #16
 80042a4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ae:	d15a      	bne.n	8004366 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80042b0:	7ffb      	ldrb	r3, [r7, #31]
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d827      	bhi.n	8004306 <UART_SetConfig+0x142>
 80042b6:	a201      	add	r2, pc, #4	; (adr r2, 80042bc <UART_SetConfig+0xf8>)
 80042b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042bc:	080042e1 	.word	0x080042e1
 80042c0:	080042e9 	.word	0x080042e9
 80042c4:	080042f1 	.word	0x080042f1
 80042c8:	08004307 	.word	0x08004307
 80042cc:	080042f7 	.word	0x080042f7
 80042d0:	08004307 	.word	0x08004307
 80042d4:	08004307 	.word	0x08004307
 80042d8:	08004307 	.word	0x08004307
 80042dc:	080042ff 	.word	0x080042ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042e0:	f7fe fd80 	bl	8002de4 <HAL_RCC_GetPCLK1Freq>
 80042e4:	61b8      	str	r0, [r7, #24]
        break;
 80042e6:	e013      	b.n	8004310 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042e8:	f7fe fd9e 	bl	8002e28 <HAL_RCC_GetPCLK2Freq>
 80042ec:	61b8      	str	r0, [r7, #24]
        break;
 80042ee:	e00f      	b.n	8004310 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042f0:	4b4e      	ldr	r3, [pc, #312]	; (800442c <UART_SetConfig+0x268>)
 80042f2:	61bb      	str	r3, [r7, #24]
        break;
 80042f4:	e00c      	b.n	8004310 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042f6:	f7fe fcff 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
 80042fa:	61b8      	str	r0, [r7, #24]
        break;
 80042fc:	e008      	b.n	8004310 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004302:	61bb      	str	r3, [r7, #24]
        break;
 8004304:	e004      	b.n	8004310 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004306:	2300      	movs	r3, #0
 8004308:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	77bb      	strb	r3, [r7, #30]
        break;
 800430e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d074      	beq.n	8004400 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	005a      	lsls	r2, r3, #1
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	085b      	lsrs	r3, r3, #1
 8004320:	441a      	add	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	fbb2 f3f3 	udiv	r3, r2, r3
 800432a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	2b0f      	cmp	r3, #15
 8004330:	d916      	bls.n	8004360 <UART_SetConfig+0x19c>
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004338:	d212      	bcs.n	8004360 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	b29b      	uxth	r3, r3
 800433e:	f023 030f 	bic.w	r3, r3, #15
 8004342:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	085b      	lsrs	r3, r3, #1
 8004348:	b29b      	uxth	r3, r3
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	b29a      	uxth	r2, r3
 8004350:	89fb      	ldrh	r3, [r7, #14]
 8004352:	4313      	orrs	r3, r2
 8004354:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	89fa      	ldrh	r2, [r7, #14]
 800435c:	60da      	str	r2, [r3, #12]
 800435e:	e04f      	b.n	8004400 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	77bb      	strb	r3, [r7, #30]
 8004364:	e04c      	b.n	8004400 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004366:	7ffb      	ldrb	r3, [r7, #31]
 8004368:	2b08      	cmp	r3, #8
 800436a:	d828      	bhi.n	80043be <UART_SetConfig+0x1fa>
 800436c:	a201      	add	r2, pc, #4	; (adr r2, 8004374 <UART_SetConfig+0x1b0>)
 800436e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004372:	bf00      	nop
 8004374:	08004399 	.word	0x08004399
 8004378:	080043a1 	.word	0x080043a1
 800437c:	080043a9 	.word	0x080043a9
 8004380:	080043bf 	.word	0x080043bf
 8004384:	080043af 	.word	0x080043af
 8004388:	080043bf 	.word	0x080043bf
 800438c:	080043bf 	.word	0x080043bf
 8004390:	080043bf 	.word	0x080043bf
 8004394:	080043b7 	.word	0x080043b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004398:	f7fe fd24 	bl	8002de4 <HAL_RCC_GetPCLK1Freq>
 800439c:	61b8      	str	r0, [r7, #24]
        break;
 800439e:	e013      	b.n	80043c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043a0:	f7fe fd42 	bl	8002e28 <HAL_RCC_GetPCLK2Freq>
 80043a4:	61b8      	str	r0, [r7, #24]
        break;
 80043a6:	e00f      	b.n	80043c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043a8:	4b20      	ldr	r3, [pc, #128]	; (800442c <UART_SetConfig+0x268>)
 80043aa:	61bb      	str	r3, [r7, #24]
        break;
 80043ac:	e00c      	b.n	80043c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ae:	f7fe fca3 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
 80043b2:	61b8      	str	r0, [r7, #24]
        break;
 80043b4:	e008      	b.n	80043c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ba:	61bb      	str	r3, [r7, #24]
        break;
 80043bc:	e004      	b.n	80043c8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	77bb      	strb	r3, [r7, #30]
        break;
 80043c6:	bf00      	nop
    }

    if (pclk != 0U)
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d018      	beq.n	8004400 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	085a      	lsrs	r2, r3, #1
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	441a      	add	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	2b0f      	cmp	r3, #15
 80043e6:	d909      	bls.n	80043fc <UART_SetConfig+0x238>
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ee:	d205      	bcs.n	80043fc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	60da      	str	r2, [r3, #12]
 80043fa:	e001      	b.n	8004400 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800440c:	7fbb      	ldrb	r3, [r7, #30]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3720      	adds	r7, #32
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	efff69f3 	.word	0xefff69f3
 800441c:	40013800 	.word	0x40013800
 8004420:	40021000 	.word	0x40021000
 8004424:	40004400 	.word	0x40004400
 8004428:	40004800 	.word	0x40004800
 800442c:	007a1200 	.word	0x007a1200

08004430 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01a      	beq.n	8004546 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800452e:	d10a      	bne.n	8004546 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	605a      	str	r2, [r3, #4]
  }
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b098      	sub	sp, #96	; 0x60
 8004578:	af02      	add	r7, sp, #8
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004584:	f7fc fed2 	bl	800132c <HAL_GetTick>
 8004588:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b08      	cmp	r3, #8
 8004596:	d12e      	bne.n	80045f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004598:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045a0:	2200      	movs	r2, #0
 80045a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f88c 	bl	80046c4 <UART_WaitOnFlagUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d021      	beq.n	80045f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ba:	e853 3f00 	ldrex	r3, [r3]
 80045be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045c6:	653b      	str	r3, [r7, #80]	; 0x50
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	461a      	mov	r2, r3
 80045ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045d0:	647b      	str	r3, [r7, #68]	; 0x44
 80045d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045d8:	e841 2300 	strex	r3, r2, [r1]
 80045dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1e6      	bne.n	80045b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2220      	movs	r2, #32
 80045e8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e062      	b.n	80046bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b04      	cmp	r3, #4
 8004602:	d149      	bne.n	8004698 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004604:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800460c:	2200      	movs	r2, #0
 800460e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f856 	bl	80046c4 <UART_WaitOnFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d03c      	beq.n	8004698 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	e853 3f00 	ldrex	r3, [r3]
 800462a:	623b      	str	r3, [r7, #32]
   return(result);
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	461a      	mov	r2, r3
 800463a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800463c:	633b      	str	r3, [r7, #48]	; 0x30
 800463e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004640:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004644:	e841 2300 	strex	r3, r2, [r1]
 8004648:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1e6      	bne.n	800461e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3308      	adds	r3, #8
 8004656:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	e853 3f00 	ldrex	r3, [r3]
 800465e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 0301 	bic.w	r3, r3, #1
 8004666:	64bb      	str	r3, [r7, #72]	; 0x48
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3308      	adds	r3, #8
 800466e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004670:	61fa      	str	r2, [r7, #28]
 8004672:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004674:	69b9      	ldr	r1, [r7, #24]
 8004676:	69fa      	ldr	r2, [r7, #28]
 8004678:	e841 2300 	strex	r3, r2, [r1]
 800467c:	617b      	str	r3, [r7, #20]
   return(result);
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1e5      	bne.n	8004650 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2220      	movs	r2, #32
 8004688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e011      	b.n	80046bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2220      	movs	r2, #32
 800469c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3758      	adds	r7, #88	; 0x58
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	603b      	str	r3, [r7, #0]
 80046d0:	4613      	mov	r3, r2
 80046d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d4:	e049      	b.n	800476a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046dc:	d045      	beq.n	800476a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046de:	f7fc fe25 	bl	800132c <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d302      	bcc.n	80046f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e048      	b.n	800478a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b00      	cmp	r3, #0
 8004704:	d031      	beq.n	800476a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b08      	cmp	r3, #8
 8004712:	d110      	bne.n	8004736 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2208      	movs	r2, #8
 800471a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 f838 	bl	8004792 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2208      	movs	r2, #8
 8004726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e029      	b.n	800478a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004744:	d111      	bne.n	800476a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800474e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 f81e 	bl	8004792 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2220      	movs	r2, #32
 800475a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e00f      	b.n	800478a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	4013      	ands	r3, r2
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	429a      	cmp	r2, r3
 8004778:	bf0c      	ite	eq
 800477a:	2301      	moveq	r3, #1
 800477c:	2300      	movne	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	79fb      	ldrb	r3, [r7, #7]
 8004784:	429a      	cmp	r2, r3
 8004786:	d0a6      	beq.n	80046d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004792:	b480      	push	{r7}
 8004794:	b095      	sub	sp, #84	; 0x54
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a2:	e853 3f00 	ldrex	r3, [r3]
 80047a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b8:	643b      	str	r3, [r7, #64]	; 0x40
 80047ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047c0:	e841 2300 	strex	r3, r2, [r1]
 80047c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e6      	bne.n	800479a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3308      	adds	r3, #8
 80047d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	e853 3f00 	ldrex	r3, [r3]
 80047da:	61fb      	str	r3, [r7, #28]
   return(result);
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	f023 0301 	bic.w	r3, r3, #1
 80047e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3308      	adds	r3, #8
 80047ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047f4:	e841 2300 	strex	r3, r2, [r1]
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1e5      	bne.n	80047cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004804:	2b01      	cmp	r3, #1
 8004806:	d118      	bne.n	800483a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	e853 3f00 	ldrex	r3, [r3]
 8004814:	60bb      	str	r3, [r7, #8]
   return(result);
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	f023 0310 	bic.w	r3, r3, #16
 800481c:	647b      	str	r3, [r7, #68]	; 0x44
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004826:	61bb      	str	r3, [r7, #24]
 8004828:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482a:	6979      	ldr	r1, [r7, #20]
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	e841 2300 	strex	r3, r2, [r1]
 8004832:	613b      	str	r3, [r7, #16]
   return(result);
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1e6      	bne.n	8004808 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2220      	movs	r2, #32
 800483e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800484e:	bf00      	nop
 8004850:	3754      	adds	r7, #84	; 0x54
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b084      	sub	sp, #16
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f7ff fc8d 	bl	8004198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800487e:	bf00      	nop
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b088      	sub	sp, #32
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	e853 3f00 	ldrex	r3, [r3]
 800489a:	60bb      	str	r3, [r7, #8]
   return(result);
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048a2:	61fb      	str	r3, [r7, #28]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	461a      	mov	r2, r3
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b0:	6979      	ldr	r1, [r7, #20]
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	e841 2300 	strex	r3, r2, [r1]
 80048b8:	613b      	str	r3, [r7, #16]
   return(result);
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e6      	bne.n	800488e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2220      	movs	r2, #32
 80048c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7ff fc59 	bl	8004184 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048d2:	bf00      	nop
 80048d4:	3720      	adds	r7, #32
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b085      	sub	sp, #20
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	4603      	mov	r3, r0
 80048f6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80048f8:	2300      	movs	r3, #0
 80048fa:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80048fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004900:	2b84      	cmp	r3, #132	; 0x84
 8004902:	d005      	beq.n	8004910 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004904:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4413      	add	r3, r2
 800490c:	3303      	adds	r3, #3
 800490e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004910:	68fb      	ldr	r3, [r7, #12]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004922:	f000 faed 	bl	8004f00 <vTaskStartScheduler>
  
  return osOK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	bd80      	pop	{r7, pc}

0800492c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800492c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800492e:	b089      	sub	sp, #36	; 0x24
 8004930:	af04      	add	r7, sp, #16
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d020      	beq.n	8004980 <osThreadCreate+0x54>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d01c      	beq.n	8004980 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685c      	ldr	r4, [r3, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681d      	ldr	r5, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691e      	ldr	r6, [r3, #16]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004958:	4618      	mov	r0, r3
 800495a:	f7ff ffc8 	bl	80048ee <makeFreeRtosPriority>
 800495e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004968:	9202      	str	r2, [sp, #8]
 800496a:	9301      	str	r3, [sp, #4]
 800496c:	9100      	str	r1, [sp, #0]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	4632      	mov	r2, r6
 8004972:	4629      	mov	r1, r5
 8004974:	4620      	mov	r0, r4
 8004976:	f000 f8ed 	bl	8004b54 <xTaskCreateStatic>
 800497a:	4603      	mov	r3, r0
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	e01c      	b.n	80049ba <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685c      	ldr	r4, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800498c:	b29e      	uxth	r6, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004994:	4618      	mov	r0, r3
 8004996:	f7ff ffaa 	bl	80048ee <makeFreeRtosPriority>
 800499a:	4602      	mov	r2, r0
 800499c:	f107 030c 	add.w	r3, r7, #12
 80049a0:	9301      	str	r3, [sp, #4]
 80049a2:	9200      	str	r2, [sp, #0]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	4632      	mov	r2, r6
 80049a8:	4629      	mov	r1, r5
 80049aa:	4620      	mov	r0, r4
 80049ac:	f000 f92e 	bl	8004c0c <xTaskCreate>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d001      	beq.n	80049ba <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	e000      	b.n	80049bc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80049ba:	68fb      	ldr	r3, [r7, #12]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049c4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <osDelay+0x16>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	e000      	b.n	80049dc <osDelay+0x18>
 80049da:	2301      	movs	r3, #1
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 fa5b 	bl	8004e98 <vTaskDelay>
  
  return osOK;
 80049e2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f103 0208 	add.w	r2, r3, #8
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f04f 32ff 	mov.w	r2, #4294967295
 8004a04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f103 0208 	add.w	r2, r3, #8
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f103 0208 	add.w	r2, r3, #8
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a46:	b480      	push	{r7}
 8004a48:	b085      	sub	sp, #20
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	601a      	str	r2, [r3, #0]
}
 8004a82:	bf00      	nop
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b085      	sub	sp, #20
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
 8004a96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa4:	d103      	bne.n	8004aae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	e00c      	b.n	8004ac8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	3308      	adds	r3, #8
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	e002      	b.n	8004abc <vListInsert+0x2e>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d2f6      	bcs.n	8004ab6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	601a      	str	r2, [r3, #0]
}
 8004af4:	bf00      	nop
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6892      	ldr	r2, [r2, #8]
 8004b16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6852      	ldr	r2, [r2, #4]
 8004b20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d103      	bne.n	8004b34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	1e5a      	subs	r2, r3, #1
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08e      	sub	sp, #56	; 0x38
 8004b58:	af04      	add	r7, sp, #16
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10a      	bne.n	8004b7e <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004b7a:	bf00      	nop
 8004b7c:	e7fe      	b.n	8004b7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10a      	bne.n	8004b9a <xTaskCreateStatic+0x46>
	__asm volatile
 8004b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	61fb      	str	r3, [r7, #28]
}
 8004b96:	bf00      	nop
 8004b98:	e7fe      	b.n	8004b98 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b9a:	23b4      	movs	r3, #180	; 0xb4
 8004b9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	2bb4      	cmp	r3, #180	; 0xb4
 8004ba2:	d00a      	beq.n	8004bba <xTaskCreateStatic+0x66>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	61bb      	str	r3, [r7, #24]
}
 8004bb6:	bf00      	nop
 8004bb8:	e7fe      	b.n	8004bb8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d01e      	beq.n	8004bfe <xTaskCreateStatic+0xaa>
 8004bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d01b      	beq.n	8004bfe <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004bd8:	2300      	movs	r3, #0
 8004bda:	9303      	str	r3, [sp, #12]
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	9302      	str	r3, [sp, #8]
 8004be0:	f107 0314 	add.w	r3, r7, #20
 8004be4:	9301      	str	r3, [sp, #4]
 8004be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	68b9      	ldr	r1, [r7, #8]
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f851 	bl	8004c98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bf8:	f000 f8e4 	bl	8004dc4 <prvAddNewTaskToReadyList>
 8004bfc:	e001      	b.n	8004c02 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c02:	697b      	ldr	r3, [r7, #20]
	}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3728      	adds	r7, #40	; 0x28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08c      	sub	sp, #48	; 0x30
 8004c10:	af04      	add	r7, sp, #16
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c1c:	88fb      	ldrh	r3, [r7, #6]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 fef9 	bl	8005a18 <pvPortMalloc>
 8004c26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00e      	beq.n	8004c4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004c2e:	20b4      	movs	r0, #180	; 0xb4
 8004c30:	f000 fef2 	bl	8005a18 <pvPortMalloc>
 8004c34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	631a      	str	r2, [r3, #48]	; 0x30
 8004c42:	e005      	b.n	8004c50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c44:	6978      	ldr	r0, [r7, #20]
 8004c46:	f000 ffab 	bl	8005ba0 <vPortFree>
 8004c4a:	e001      	b.n	8004c50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d017      	beq.n	8004c86 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c5e:	88fa      	ldrh	r2, [r7, #6]
 8004c60:	2300      	movs	r3, #0
 8004c62:	9303      	str	r3, [sp, #12]
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	9302      	str	r3, [sp, #8]
 8004c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6a:	9301      	str	r3, [sp, #4]
 8004c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	68b9      	ldr	r1, [r7, #8]
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 f80f 	bl	8004c98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c7a:	69f8      	ldr	r0, [r7, #28]
 8004c7c:	f000 f8a2 	bl	8004dc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c80:	2301      	movs	r3, #1
 8004c82:	61bb      	str	r3, [r7, #24]
 8004c84:	e002      	b.n	8004c8c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c86:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c8c:	69bb      	ldr	r3, [r7, #24]
	}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3720      	adds	r7, #32
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
	...

08004c98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
 8004ca4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	f023 0307 	bic.w	r3, r3, #7
 8004cbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	617b      	str	r3, [r7, #20]
}
 8004cdc:	bf00      	nop
 8004cde:	e7fe      	b.n	8004cde <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	e012      	b.n	8004d0c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	4413      	add	r3, r2
 8004cec:	7819      	ldrb	r1, [r3, #0]
 8004cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	3334      	adds	r3, #52	; 0x34
 8004cf6:	460a      	mov	r2, r1
 8004cf8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	4413      	add	r3, r2
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d006      	beq.n	8004d14 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	61fb      	str	r3, [r7, #28]
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	2b0f      	cmp	r3, #15
 8004d10:	d9e9      	bls.n	8004ce6 <prvInitialiseNewTask+0x4e>
 8004d12:	e000      	b.n	8004d16 <prvInitialiseNewTask+0x7e>
		{
			break;
 8004d14:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d20:	2b06      	cmp	r3, #6
 8004d22:	d901      	bls.n	8004d28 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d24:	2306      	movs	r3, #6
 8004d26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d32:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d36:	2200      	movs	r2, #0
 8004d38:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3c:	3304      	adds	r3, #4
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff fe74 	bl	8004a2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d46:	3318      	adds	r3, #24
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff fe6f 	bl	8004a2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d56:	f1c3 0207 	rsb	r2, r3, #7
 8004d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	334c      	adds	r3, #76	; 0x4c
 8004d78:	2260      	movs	r2, #96	; 0x60
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f001 f859 	bl	8005e34 <memset>
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	4a0c      	ldr	r2, [pc, #48]	; (8004db8 <prvInitialiseNewTask+0x120>)
 8004d86:	651a      	str	r2, [r3, #80]	; 0x50
 8004d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8a:	4a0c      	ldr	r2, [pc, #48]	; (8004dbc <prvInitialiseNewTask+0x124>)
 8004d8c:	655a      	str	r2, [r3, #84]	; 0x54
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	4a0b      	ldr	r2, [pc, #44]	; (8004dc0 <prvInitialiseNewTask+0x128>)
 8004d92:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	68f9      	ldr	r1, [r7, #12]
 8004d98:	69b8      	ldr	r0, [r7, #24]
 8004d9a:	f000 fc2b 	bl	80055f4 <pxPortInitialiseStack>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004db0:	bf00      	nop
 8004db2:	3720      	adds	r7, #32
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	08006130 	.word	0x08006130
 8004dbc:	08006150 	.word	0x08006150
 8004dc0:	08006110 	.word	0x08006110

08004dc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004dcc:	f000 fd42 	bl	8005854 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004dd0:	4b2a      	ldr	r3, [pc, #168]	; (8004e7c <prvAddNewTaskToReadyList+0xb8>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	4a29      	ldr	r2, [pc, #164]	; (8004e7c <prvAddNewTaskToReadyList+0xb8>)
 8004dd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004dda:	4b29      	ldr	r3, [pc, #164]	; (8004e80 <prvAddNewTaskToReadyList+0xbc>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d109      	bne.n	8004df6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004de2:	4a27      	ldr	r2, [pc, #156]	; (8004e80 <prvAddNewTaskToReadyList+0xbc>)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004de8:	4b24      	ldr	r3, [pc, #144]	; (8004e7c <prvAddNewTaskToReadyList+0xb8>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d110      	bne.n	8004e12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004df0:	f000 fad2 	bl	8005398 <prvInitialiseTaskLists>
 8004df4:	e00d      	b.n	8004e12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004df6:	4b23      	ldr	r3, [pc, #140]	; (8004e84 <prvAddNewTaskToReadyList+0xc0>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d109      	bne.n	8004e12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004dfe:	4b20      	ldr	r3, [pc, #128]	; (8004e80 <prvAddNewTaskToReadyList+0xbc>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d802      	bhi.n	8004e12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e0c:	4a1c      	ldr	r2, [pc, #112]	; (8004e80 <prvAddNewTaskToReadyList+0xbc>)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e12:	4b1d      	ldr	r3, [pc, #116]	; (8004e88 <prvAddNewTaskToReadyList+0xc4>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3301      	adds	r3, #1
 8004e18:	4a1b      	ldr	r2, [pc, #108]	; (8004e88 <prvAddNewTaskToReadyList+0xc4>)
 8004e1a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e20:	2201      	movs	r2, #1
 8004e22:	409a      	lsls	r2, r3
 8004e24:	4b19      	ldr	r3, [pc, #100]	; (8004e8c <prvAddNewTaskToReadyList+0xc8>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	4a18      	ldr	r2, [pc, #96]	; (8004e8c <prvAddNewTaskToReadyList+0xc8>)
 8004e2c:	6013      	str	r3, [r2, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e32:	4613      	mov	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4a15      	ldr	r2, [pc, #84]	; (8004e90 <prvAddNewTaskToReadyList+0xcc>)
 8004e3c:	441a      	add	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	3304      	adds	r3, #4
 8004e42:	4619      	mov	r1, r3
 8004e44:	4610      	mov	r0, r2
 8004e46:	f7ff fdfe 	bl	8004a46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e4a:	f000 fd33 	bl	80058b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e4e:	4b0d      	ldr	r3, [pc, #52]	; (8004e84 <prvAddNewTaskToReadyList+0xc0>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00e      	beq.n	8004e74 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e56:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <prvAddNewTaskToReadyList+0xbc>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d207      	bcs.n	8004e74 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e64:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <prvAddNewTaskToReadyList+0xd0>)
 8004e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e74:	bf00      	nop
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	20000b18 	.word	0x20000b18
 8004e80:	20000a18 	.word	0x20000a18
 8004e84:	20000b24 	.word	0x20000b24
 8004e88:	20000b34 	.word	0x20000b34
 8004e8c:	20000b20 	.word	0x20000b20
 8004e90:	20000a1c 	.word	0x20000a1c
 8004e94:	e000ed04 	.word	0xe000ed04

08004e98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d017      	beq.n	8004eda <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004eaa:	4b13      	ldr	r3, [pc, #76]	; (8004ef8 <vTaskDelay+0x60>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <vTaskDelay+0x30>
	__asm volatile
 8004eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	60bb      	str	r3, [r7, #8]
}
 8004ec4:	bf00      	nop
 8004ec6:	e7fe      	b.n	8004ec6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004ec8:	f000 f884 	bl	8004fd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ecc:	2100      	movs	r1, #0
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 fb2a 	bl	8005528 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ed4:	f000 f88c 	bl	8004ff0 <xTaskResumeAll>
 8004ed8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d107      	bne.n	8004ef0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004ee0:	4b06      	ldr	r3, [pc, #24]	; (8004efc <vTaskDelay+0x64>)
 8004ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ef0:	bf00      	nop
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	20000b40 	.word	0x20000b40
 8004efc:	e000ed04 	.word	0xe000ed04

08004f00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b08a      	sub	sp, #40	; 0x28
 8004f04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f06:	2300      	movs	r3, #0
 8004f08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f0e:	463a      	mov	r2, r7
 8004f10:	1d39      	adds	r1, r7, #4
 8004f12:	f107 0308 	add.w	r3, r7, #8
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fb fa06 	bl	8000328 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f1c:	6839      	ldr	r1, [r7, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	9202      	str	r2, [sp, #8]
 8004f24:	9301      	str	r3, [sp, #4]
 8004f26:	2300      	movs	r3, #0
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	460a      	mov	r2, r1
 8004f2e:	4921      	ldr	r1, [pc, #132]	; (8004fb4 <vTaskStartScheduler+0xb4>)
 8004f30:	4821      	ldr	r0, [pc, #132]	; (8004fb8 <vTaskStartScheduler+0xb8>)
 8004f32:	f7ff fe0f 	bl	8004b54 <xTaskCreateStatic>
 8004f36:	4603      	mov	r3, r0
 8004f38:	4a20      	ldr	r2, [pc, #128]	; (8004fbc <vTaskStartScheduler+0xbc>)
 8004f3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f3c:	4b1f      	ldr	r3, [pc, #124]	; (8004fbc <vTaskStartScheduler+0xbc>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f44:	2301      	movs	r3, #1
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	e001      	b.n	8004f4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d11b      	bne.n	8004f8c <vTaskStartScheduler+0x8c>
	__asm volatile
 8004f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	613b      	str	r3, [r7, #16]
}
 8004f66:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f68:	4b15      	ldr	r3, [pc, #84]	; (8004fc0 <vTaskStartScheduler+0xc0>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	334c      	adds	r3, #76	; 0x4c
 8004f6e:	4a15      	ldr	r2, [pc, #84]	; (8004fc4 <vTaskStartScheduler+0xc4>)
 8004f70:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f72:	4b15      	ldr	r3, [pc, #84]	; (8004fc8 <vTaskStartScheduler+0xc8>)
 8004f74:	f04f 32ff 	mov.w	r2, #4294967295
 8004f78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f7a:	4b14      	ldr	r3, [pc, #80]	; (8004fcc <vTaskStartScheduler+0xcc>)
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004f80:	4b13      	ldr	r3, [pc, #76]	; (8004fd0 <vTaskStartScheduler+0xd0>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f86:	f000 fbc3 	bl	8005710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f8a:	e00e      	b.n	8004faa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f92:	d10a      	bne.n	8004faa <vTaskStartScheduler+0xaa>
	__asm volatile
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	60fb      	str	r3, [r7, #12]
}
 8004fa6:	bf00      	nop
 8004fa8:	e7fe      	b.n	8004fa8 <vTaskStartScheduler+0xa8>
}
 8004faa:	bf00      	nop
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	080060d0 	.word	0x080060d0
 8004fb8:	08005369 	.word	0x08005369
 8004fbc:	20000b3c 	.word	0x20000b3c
 8004fc0:	20000a18 	.word	0x20000a18
 8004fc4:	20000440 	.word	0x20000440
 8004fc8:	20000b38 	.word	0x20000b38
 8004fcc:	20000b24 	.word	0x20000b24
 8004fd0:	20000b1c 	.word	0x20000b1c

08004fd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004fd8:	4b04      	ldr	r3, [pc, #16]	; (8004fec <vTaskSuspendAll+0x18>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	4a03      	ldr	r2, [pc, #12]	; (8004fec <vTaskSuspendAll+0x18>)
 8004fe0:	6013      	str	r3, [r2, #0]
}
 8004fe2:	bf00      	nop
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	20000b40 	.word	0x20000b40

08004ff0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ffe:	4b41      	ldr	r3, [pc, #260]	; (8005104 <xTaskResumeAll+0x114>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10a      	bne.n	800501c <xTaskResumeAll+0x2c>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	603b      	str	r3, [r7, #0]
}
 8005018:	bf00      	nop
 800501a:	e7fe      	b.n	800501a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800501c:	f000 fc1a 	bl	8005854 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005020:	4b38      	ldr	r3, [pc, #224]	; (8005104 <xTaskResumeAll+0x114>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3b01      	subs	r3, #1
 8005026:	4a37      	ldr	r2, [pc, #220]	; (8005104 <xTaskResumeAll+0x114>)
 8005028:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800502a:	4b36      	ldr	r3, [pc, #216]	; (8005104 <xTaskResumeAll+0x114>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d161      	bne.n	80050f6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005032:	4b35      	ldr	r3, [pc, #212]	; (8005108 <xTaskResumeAll+0x118>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d05d      	beq.n	80050f6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800503a:	e02e      	b.n	800509a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800503c:	4b33      	ldr	r3, [pc, #204]	; (800510c <xTaskResumeAll+0x11c>)
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	3318      	adds	r3, #24
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff fd59 	bl	8004b00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	3304      	adds	r3, #4
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff fd54 	bl	8004b00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505c:	2201      	movs	r2, #1
 800505e:	409a      	lsls	r2, r3
 8005060:	4b2b      	ldr	r3, [pc, #172]	; (8005110 <xTaskResumeAll+0x120>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4313      	orrs	r3, r2
 8005066:	4a2a      	ldr	r2, [pc, #168]	; (8005110 <xTaskResumeAll+0x120>)
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800506e:	4613      	mov	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4a27      	ldr	r2, [pc, #156]	; (8005114 <xTaskResumeAll+0x124>)
 8005078:	441a      	add	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3304      	adds	r3, #4
 800507e:	4619      	mov	r1, r3
 8005080:	4610      	mov	r0, r2
 8005082:	f7ff fce0 	bl	8004a46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800508a:	4b23      	ldr	r3, [pc, #140]	; (8005118 <xTaskResumeAll+0x128>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005090:	429a      	cmp	r2, r3
 8005092:	d302      	bcc.n	800509a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005094:	4b21      	ldr	r3, [pc, #132]	; (800511c <xTaskResumeAll+0x12c>)
 8005096:	2201      	movs	r2, #1
 8005098:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800509a:	4b1c      	ldr	r3, [pc, #112]	; (800510c <xTaskResumeAll+0x11c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1cc      	bne.n	800503c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80050a8:	f000 fa18 	bl	80054dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80050ac:	4b1c      	ldr	r3, [pc, #112]	; (8005120 <xTaskResumeAll+0x130>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d010      	beq.n	80050da <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80050b8:	f000 f836 	bl	8005128 <xTaskIncrementTick>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d002      	beq.n	80050c8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80050c2:	4b16      	ldr	r3, [pc, #88]	; (800511c <xTaskResumeAll+0x12c>)
 80050c4:	2201      	movs	r2, #1
 80050c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1f1      	bne.n	80050b8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80050d4:	4b12      	ldr	r3, [pc, #72]	; (8005120 <xTaskResumeAll+0x130>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050da:	4b10      	ldr	r3, [pc, #64]	; (800511c <xTaskResumeAll+0x12c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d009      	beq.n	80050f6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80050e2:	2301      	movs	r3, #1
 80050e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80050e6:	4b0f      	ldr	r3, [pc, #60]	; (8005124 <xTaskResumeAll+0x134>)
 80050e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050f6:	f000 fbdd 	bl	80058b4 <vPortExitCritical>

	return xAlreadyYielded;
 80050fa:	68bb      	ldr	r3, [r7, #8]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	20000b40 	.word	0x20000b40
 8005108:	20000b18 	.word	0x20000b18
 800510c:	20000ad8 	.word	0x20000ad8
 8005110:	20000b20 	.word	0x20000b20
 8005114:	20000a1c 	.word	0x20000a1c
 8005118:	20000a18 	.word	0x20000a18
 800511c:	20000b2c 	.word	0x20000b2c
 8005120:	20000b28 	.word	0x20000b28
 8005124:	e000ed04 	.word	0xe000ed04

08005128 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800512e:	2300      	movs	r3, #0
 8005130:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005132:	4b51      	ldr	r3, [pc, #324]	; (8005278 <xTaskIncrementTick+0x150>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	f040 808d 	bne.w	8005256 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800513c:	4b4f      	ldr	r3, [pc, #316]	; (800527c <xTaskIncrementTick+0x154>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3301      	adds	r3, #1
 8005142:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005144:	4a4d      	ldr	r2, [pc, #308]	; (800527c <xTaskIncrementTick+0x154>)
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d120      	bne.n	8005192 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005150:	4b4b      	ldr	r3, [pc, #300]	; (8005280 <xTaskIncrementTick+0x158>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <xTaskIncrementTick+0x48>
	__asm volatile
 800515a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515e:	f383 8811 	msr	BASEPRI, r3
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	603b      	str	r3, [r7, #0]
}
 800516c:	bf00      	nop
 800516e:	e7fe      	b.n	800516e <xTaskIncrementTick+0x46>
 8005170:	4b43      	ldr	r3, [pc, #268]	; (8005280 <xTaskIncrementTick+0x158>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	4b43      	ldr	r3, [pc, #268]	; (8005284 <xTaskIncrementTick+0x15c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a41      	ldr	r2, [pc, #260]	; (8005280 <xTaskIncrementTick+0x158>)
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	4a41      	ldr	r2, [pc, #260]	; (8005284 <xTaskIncrementTick+0x15c>)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	4b40      	ldr	r3, [pc, #256]	; (8005288 <xTaskIncrementTick+0x160>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3301      	adds	r3, #1
 800518a:	4a3f      	ldr	r2, [pc, #252]	; (8005288 <xTaskIncrementTick+0x160>)
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	f000 f9a5 	bl	80054dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005192:	4b3e      	ldr	r3, [pc, #248]	; (800528c <xTaskIncrementTick+0x164>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	429a      	cmp	r2, r3
 800519a:	d34d      	bcc.n	8005238 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800519c:	4b38      	ldr	r3, [pc, #224]	; (8005280 <xTaskIncrementTick+0x158>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <xTaskIncrementTick+0x82>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e000      	b.n	80051ac <xTaskIncrementTick+0x84>
 80051aa:	2300      	movs	r3, #0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d004      	beq.n	80051ba <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051b0:	4b36      	ldr	r3, [pc, #216]	; (800528c <xTaskIncrementTick+0x164>)
 80051b2:	f04f 32ff 	mov.w	r2, #4294967295
 80051b6:	601a      	str	r2, [r3, #0]
					break;
 80051b8:	e03e      	b.n	8005238 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80051ba:	4b31      	ldr	r3, [pc, #196]	; (8005280 <xTaskIncrementTick+0x158>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d203      	bcs.n	80051da <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051d2:	4a2e      	ldr	r2, [pc, #184]	; (800528c <xTaskIncrementTick+0x164>)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6013      	str	r3, [r2, #0]
						break;
 80051d8:	e02e      	b.n	8005238 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	3304      	adds	r3, #4
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff fc8e 	bl	8004b00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d004      	beq.n	80051f6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	3318      	adds	r3, #24
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7ff fc85 	bl	8004b00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fa:	2201      	movs	r2, #1
 80051fc:	409a      	lsls	r2, r3
 80051fe:	4b24      	ldr	r3, [pc, #144]	; (8005290 <xTaskIncrementTick+0x168>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4313      	orrs	r3, r2
 8005204:	4a22      	ldr	r2, [pc, #136]	; (8005290 <xTaskIncrementTick+0x168>)
 8005206:	6013      	str	r3, [r2, #0]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800520c:	4613      	mov	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4a1f      	ldr	r2, [pc, #124]	; (8005294 <xTaskIncrementTick+0x16c>)
 8005216:	441a      	add	r2, r3
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	3304      	adds	r3, #4
 800521c:	4619      	mov	r1, r3
 800521e:	4610      	mov	r0, r2
 8005220:	f7ff fc11 	bl	8004a46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005228:	4b1b      	ldr	r3, [pc, #108]	; (8005298 <xTaskIncrementTick+0x170>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522e:	429a      	cmp	r2, r3
 8005230:	d3b4      	bcc.n	800519c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005232:	2301      	movs	r3, #1
 8005234:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005236:	e7b1      	b.n	800519c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005238:	4b17      	ldr	r3, [pc, #92]	; (8005298 <xTaskIncrementTick+0x170>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800523e:	4915      	ldr	r1, [pc, #84]	; (8005294 <xTaskIncrementTick+0x16c>)
 8005240:	4613      	mov	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	440b      	add	r3, r1
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d907      	bls.n	8005260 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005250:	2301      	movs	r3, #1
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	e004      	b.n	8005260 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005256:	4b11      	ldr	r3, [pc, #68]	; (800529c <xTaskIncrementTick+0x174>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3301      	adds	r3, #1
 800525c:	4a0f      	ldr	r2, [pc, #60]	; (800529c <xTaskIncrementTick+0x174>)
 800525e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005260:	4b0f      	ldr	r3, [pc, #60]	; (80052a0 <xTaskIncrementTick+0x178>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005268:	2301      	movs	r3, #1
 800526a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800526c:	697b      	ldr	r3, [r7, #20]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	20000b40 	.word	0x20000b40
 800527c:	20000b1c 	.word	0x20000b1c
 8005280:	20000ad0 	.word	0x20000ad0
 8005284:	20000ad4 	.word	0x20000ad4
 8005288:	20000b30 	.word	0x20000b30
 800528c:	20000b38 	.word	0x20000b38
 8005290:	20000b20 	.word	0x20000b20
 8005294:	20000a1c 	.word	0x20000a1c
 8005298:	20000a18 	.word	0x20000a18
 800529c:	20000b28 	.word	0x20000b28
 80052a0:	20000b2c 	.word	0x20000b2c

080052a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052aa:	4b29      	ldr	r3, [pc, #164]	; (8005350 <vTaskSwitchContext+0xac>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80052b2:	4b28      	ldr	r3, [pc, #160]	; (8005354 <vTaskSwitchContext+0xb0>)
 80052b4:	2201      	movs	r2, #1
 80052b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80052b8:	e044      	b.n	8005344 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80052ba:	4b26      	ldr	r3, [pc, #152]	; (8005354 <vTaskSwitchContext+0xb0>)
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80052c0:	4b25      	ldr	r3, [pc, #148]	; (8005358 <vTaskSwitchContext+0xb4>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	fab3 f383 	clz	r3, r3
 80052cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80052ce:	7afb      	ldrb	r3, [r7, #11]
 80052d0:	f1c3 031f 	rsb	r3, r3, #31
 80052d4:	617b      	str	r3, [r7, #20]
 80052d6:	4921      	ldr	r1, [pc, #132]	; (800535c <vTaskSwitchContext+0xb8>)
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	4613      	mov	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	440b      	add	r3, r1
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10a      	bne.n	8005300 <vTaskSwitchContext+0x5c>
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	607b      	str	r3, [r7, #4]
}
 80052fc:	bf00      	nop
 80052fe:	e7fe      	b.n	80052fe <vTaskSwitchContext+0x5a>
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	4613      	mov	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4a14      	ldr	r2, [pc, #80]	; (800535c <vTaskSwitchContext+0xb8>)
 800530c:	4413      	add	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	605a      	str	r2, [r3, #4]
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	3308      	adds	r3, #8
 8005322:	429a      	cmp	r2, r3
 8005324:	d104      	bne.n	8005330 <vTaskSwitchContext+0x8c>
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	605a      	str	r2, [r3, #4]
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	4a0a      	ldr	r2, [pc, #40]	; (8005360 <vTaskSwitchContext+0xbc>)
 8005338:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800533a:	4b09      	ldr	r3, [pc, #36]	; (8005360 <vTaskSwitchContext+0xbc>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	334c      	adds	r3, #76	; 0x4c
 8005340:	4a08      	ldr	r2, [pc, #32]	; (8005364 <vTaskSwitchContext+0xc0>)
 8005342:	6013      	str	r3, [r2, #0]
}
 8005344:	bf00      	nop
 8005346:	371c      	adds	r7, #28
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	20000b40 	.word	0x20000b40
 8005354:	20000b2c 	.word	0x20000b2c
 8005358:	20000b20 	.word	0x20000b20
 800535c:	20000a1c 	.word	0x20000a1c
 8005360:	20000a18 	.word	0x20000a18
 8005364:	20000440 	.word	0x20000440

08005368 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005370:	f000 f852 	bl	8005418 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005374:	4b06      	ldr	r3, [pc, #24]	; (8005390 <prvIdleTask+0x28>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d9f9      	bls.n	8005370 <prvIdleTask+0x8>
			{
				taskYIELD();
 800537c:	4b05      	ldr	r3, [pc, #20]	; (8005394 <prvIdleTask+0x2c>)
 800537e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800538c:	e7f0      	b.n	8005370 <prvIdleTask+0x8>
 800538e:	bf00      	nop
 8005390:	20000a1c 	.word	0x20000a1c
 8005394:	e000ed04 	.word	0xe000ed04

08005398 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800539e:	2300      	movs	r3, #0
 80053a0:	607b      	str	r3, [r7, #4]
 80053a2:	e00c      	b.n	80053be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	4613      	mov	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4a12      	ldr	r2, [pc, #72]	; (80053f8 <prvInitialiseTaskLists+0x60>)
 80053b0:	4413      	add	r3, r2
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff fb1a 	bl	80049ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3301      	adds	r3, #1
 80053bc:	607b      	str	r3, [r7, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b06      	cmp	r3, #6
 80053c2:	d9ef      	bls.n	80053a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80053c4:	480d      	ldr	r0, [pc, #52]	; (80053fc <prvInitialiseTaskLists+0x64>)
 80053c6:	f7ff fb11 	bl	80049ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80053ca:	480d      	ldr	r0, [pc, #52]	; (8005400 <prvInitialiseTaskLists+0x68>)
 80053cc:	f7ff fb0e 	bl	80049ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80053d0:	480c      	ldr	r0, [pc, #48]	; (8005404 <prvInitialiseTaskLists+0x6c>)
 80053d2:	f7ff fb0b 	bl	80049ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80053d6:	480c      	ldr	r0, [pc, #48]	; (8005408 <prvInitialiseTaskLists+0x70>)
 80053d8:	f7ff fb08 	bl	80049ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80053dc:	480b      	ldr	r0, [pc, #44]	; (800540c <prvInitialiseTaskLists+0x74>)
 80053de:	f7ff fb05 	bl	80049ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80053e2:	4b0b      	ldr	r3, [pc, #44]	; (8005410 <prvInitialiseTaskLists+0x78>)
 80053e4:	4a05      	ldr	r2, [pc, #20]	; (80053fc <prvInitialiseTaskLists+0x64>)
 80053e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80053e8:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <prvInitialiseTaskLists+0x7c>)
 80053ea:	4a05      	ldr	r2, [pc, #20]	; (8005400 <prvInitialiseTaskLists+0x68>)
 80053ec:	601a      	str	r2, [r3, #0]
}
 80053ee:	bf00      	nop
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	20000a1c 	.word	0x20000a1c
 80053fc:	20000aa8 	.word	0x20000aa8
 8005400:	20000abc 	.word	0x20000abc
 8005404:	20000ad8 	.word	0x20000ad8
 8005408:	20000aec 	.word	0x20000aec
 800540c:	20000b04 	.word	0x20000b04
 8005410:	20000ad0 	.word	0x20000ad0
 8005414:	20000ad4 	.word	0x20000ad4

08005418 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800541e:	e019      	b.n	8005454 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005420:	f000 fa18 	bl	8005854 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005424:	4b10      	ldr	r3, [pc, #64]	; (8005468 <prvCheckTasksWaitingTermination+0x50>)
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3304      	adds	r3, #4
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff fb65 	bl	8004b00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005436:	4b0d      	ldr	r3, [pc, #52]	; (800546c <prvCheckTasksWaitingTermination+0x54>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3b01      	subs	r3, #1
 800543c:	4a0b      	ldr	r2, [pc, #44]	; (800546c <prvCheckTasksWaitingTermination+0x54>)
 800543e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005440:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <prvCheckTasksWaitingTermination+0x58>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3b01      	subs	r3, #1
 8005446:	4a0a      	ldr	r2, [pc, #40]	; (8005470 <prvCheckTasksWaitingTermination+0x58>)
 8005448:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800544a:	f000 fa33 	bl	80058b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f810 	bl	8005474 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005454:	4b06      	ldr	r3, [pc, #24]	; (8005470 <prvCheckTasksWaitingTermination+0x58>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e1      	bne.n	8005420 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800545c:	bf00      	nop
 800545e:	bf00      	nop
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	20000aec 	.word	0x20000aec
 800546c:	20000b18 	.word	0x20000b18
 8005470:	20000b00 	.word	0x20000b00

08005474 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	334c      	adds	r3, #76	; 0x4c
 8005480:	4618      	mov	r0, r3
 8005482:	f000 fced 	bl	8005e60 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800548c:	2b00      	cmp	r3, #0
 800548e:	d108      	bne.n	80054a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005494:	4618      	mov	r0, r3
 8005496:	f000 fb83 	bl	8005ba0 <vPortFree>
				vPortFree( pxTCB );
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fb80 	bl	8005ba0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80054a0:	e018      	b.n	80054d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d103      	bne.n	80054b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fb77 	bl	8005ba0 <vPortFree>
	}
 80054b2:	e00f      	b.n	80054d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d00a      	beq.n	80054d4 <prvDeleteTCB+0x60>
	__asm volatile
 80054be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c2:	f383 8811 	msr	BASEPRI, r3
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	60fb      	str	r3, [r7, #12]
}
 80054d0:	bf00      	nop
 80054d2:	e7fe      	b.n	80054d2 <prvDeleteTCB+0x5e>
	}
 80054d4:	bf00      	nop
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054e2:	4b0f      	ldr	r3, [pc, #60]	; (8005520 <prvResetNextTaskUnblockTime+0x44>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <prvResetNextTaskUnblockTime+0x14>
 80054ec:	2301      	movs	r3, #1
 80054ee:	e000      	b.n	80054f2 <prvResetNextTaskUnblockTime+0x16>
 80054f0:	2300      	movs	r3, #0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d004      	beq.n	8005500 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80054f6:	4b0b      	ldr	r3, [pc, #44]	; (8005524 <prvResetNextTaskUnblockTime+0x48>)
 80054f8:	f04f 32ff 	mov.w	r2, #4294967295
 80054fc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80054fe:	e008      	b.n	8005512 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005500:	4b07      	ldr	r3, [pc, #28]	; (8005520 <prvResetNextTaskUnblockTime+0x44>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	4a05      	ldr	r2, [pc, #20]	; (8005524 <prvResetNextTaskUnblockTime+0x48>)
 8005510:	6013      	str	r3, [r2, #0]
}
 8005512:	bf00      	nop
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	20000ad0 	.word	0x20000ad0
 8005524:	20000b38 	.word	0x20000b38

08005528 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005532:	4b29      	ldr	r3, [pc, #164]	; (80055d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005538:	4b28      	ldr	r3, [pc, #160]	; (80055dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3304      	adds	r3, #4
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff fade 	bl	8004b00 <uxListRemove>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10b      	bne.n	8005562 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800554a:	4b24      	ldr	r3, [pc, #144]	; (80055dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	2201      	movs	r2, #1
 8005552:	fa02 f303 	lsl.w	r3, r2, r3
 8005556:	43da      	mvns	r2, r3
 8005558:	4b21      	ldr	r3, [pc, #132]	; (80055e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4013      	ands	r3, r2
 800555e:	4a20      	ldr	r2, [pc, #128]	; (80055e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005560:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005568:	d10a      	bne.n	8005580 <prvAddCurrentTaskToDelayedList+0x58>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d007      	beq.n	8005580 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005570:	4b1a      	ldr	r3, [pc, #104]	; (80055dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	3304      	adds	r3, #4
 8005576:	4619      	mov	r1, r3
 8005578:	481a      	ldr	r0, [pc, #104]	; (80055e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800557a:	f7ff fa64 	bl	8004a46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800557e:	e026      	b.n	80055ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4413      	add	r3, r2
 8005586:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005588:	4b14      	ldr	r3, [pc, #80]	; (80055dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	429a      	cmp	r2, r3
 8005596:	d209      	bcs.n	80055ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005598:	4b13      	ldr	r3, [pc, #76]	; (80055e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	4b0f      	ldr	r3, [pc, #60]	; (80055dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3304      	adds	r3, #4
 80055a2:	4619      	mov	r1, r3
 80055a4:	4610      	mov	r0, r2
 80055a6:	f7ff fa72 	bl	8004a8e <vListInsert>
}
 80055aa:	e010      	b.n	80055ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055ac:	4b0f      	ldr	r3, [pc, #60]	; (80055ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	4b0a      	ldr	r3, [pc, #40]	; (80055dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3304      	adds	r3, #4
 80055b6:	4619      	mov	r1, r3
 80055b8:	4610      	mov	r0, r2
 80055ba:	f7ff fa68 	bl	8004a8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80055be:	4b0c      	ldr	r3, [pc, #48]	; (80055f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d202      	bcs.n	80055ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80055c8:	4a09      	ldr	r2, [pc, #36]	; (80055f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	6013      	str	r3, [r2, #0]
}
 80055ce:	bf00      	nop
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20000b1c 	.word	0x20000b1c
 80055dc:	20000a18 	.word	0x20000a18
 80055e0:	20000b20 	.word	0x20000b20
 80055e4:	20000b04 	.word	0x20000b04
 80055e8:	20000ad4 	.word	0x20000ad4
 80055ec:	20000ad0 	.word	0x20000ad0
 80055f0:	20000b38 	.word	0x20000b38

080055f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	3b04      	subs	r3, #4
 8005604:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800560c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3b04      	subs	r3, #4
 8005612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f023 0201 	bic.w	r2, r3, #1
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	3b04      	subs	r3, #4
 8005622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005624:	4a0c      	ldr	r2, [pc, #48]	; (8005658 <pxPortInitialiseStack+0x64>)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	3b14      	subs	r3, #20
 800562e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	3b04      	subs	r3, #4
 800563a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f06f 0202 	mvn.w	r2, #2
 8005642:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3b20      	subs	r3, #32
 8005648:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800564a:	68fb      	ldr	r3, [r7, #12]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	0800565d 	.word	0x0800565d

0800565c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005662:	2300      	movs	r3, #0
 8005664:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005666:	4b12      	ldr	r3, [pc, #72]	; (80056b0 <prvTaskExitError+0x54>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566e:	d00a      	beq.n	8005686 <prvTaskExitError+0x2a>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	60fb      	str	r3, [r7, #12]
}
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <prvTaskExitError+0x28>
	__asm volatile
 8005686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	60bb      	str	r3, [r7, #8]
}
 8005698:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800569a:	bf00      	nop
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0fc      	beq.n	800569c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80056a2:	bf00      	nop
 80056a4:	bf00      	nop
 80056a6:	3714      	adds	r7, #20
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	2000043c 	.word	0x2000043c
	...

080056c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80056c0:	4b07      	ldr	r3, [pc, #28]	; (80056e0 <pxCurrentTCBConst2>)
 80056c2:	6819      	ldr	r1, [r3, #0]
 80056c4:	6808      	ldr	r0, [r1, #0]
 80056c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ca:	f380 8809 	msr	PSP, r0
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f04f 0000 	mov.w	r0, #0
 80056d6:	f380 8811 	msr	BASEPRI, r0
 80056da:	4770      	bx	lr
 80056dc:	f3af 8000 	nop.w

080056e0 <pxCurrentTCBConst2>:
 80056e0:	20000a18 	.word	0x20000a18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80056e4:	bf00      	nop
 80056e6:	bf00      	nop

080056e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80056e8:	4808      	ldr	r0, [pc, #32]	; (800570c <prvPortStartFirstTask+0x24>)
 80056ea:	6800      	ldr	r0, [r0, #0]
 80056ec:	6800      	ldr	r0, [r0, #0]
 80056ee:	f380 8808 	msr	MSP, r0
 80056f2:	f04f 0000 	mov.w	r0, #0
 80056f6:	f380 8814 	msr	CONTROL, r0
 80056fa:	b662      	cpsie	i
 80056fc:	b661      	cpsie	f
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	df00      	svc	0
 8005708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800570a:	bf00      	nop
 800570c:	e000ed08 	.word	0xe000ed08

08005710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005716:	4b46      	ldr	r3, [pc, #280]	; (8005830 <xPortStartScheduler+0x120>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a46      	ldr	r2, [pc, #280]	; (8005834 <xPortStartScheduler+0x124>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d10a      	bne.n	8005736 <xPortStartScheduler+0x26>
	__asm volatile
 8005720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	613b      	str	r3, [r7, #16]
}
 8005732:	bf00      	nop
 8005734:	e7fe      	b.n	8005734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005736:	4b3e      	ldr	r3, [pc, #248]	; (8005830 <xPortStartScheduler+0x120>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a3f      	ldr	r2, [pc, #252]	; (8005838 <xPortStartScheduler+0x128>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d10a      	bne.n	8005756 <xPortStartScheduler+0x46>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	60fb      	str	r3, [r7, #12]
}
 8005752:	bf00      	nop
 8005754:	e7fe      	b.n	8005754 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005756:	4b39      	ldr	r3, [pc, #228]	; (800583c <xPortStartScheduler+0x12c>)
 8005758:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	b2db      	uxtb	r3, r3
 8005760:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	22ff      	movs	r2, #255	; 0xff
 8005766:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	b2db      	uxtb	r3, r3
 800576e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005770:	78fb      	ldrb	r3, [r7, #3]
 8005772:	b2db      	uxtb	r3, r3
 8005774:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005778:	b2da      	uxtb	r2, r3
 800577a:	4b31      	ldr	r3, [pc, #196]	; (8005840 <xPortStartScheduler+0x130>)
 800577c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800577e:	4b31      	ldr	r3, [pc, #196]	; (8005844 <xPortStartScheduler+0x134>)
 8005780:	2207      	movs	r2, #7
 8005782:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005784:	e009      	b.n	800579a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005786:	4b2f      	ldr	r3, [pc, #188]	; (8005844 <xPortStartScheduler+0x134>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3b01      	subs	r3, #1
 800578c:	4a2d      	ldr	r2, [pc, #180]	; (8005844 <xPortStartScheduler+0x134>)
 800578e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005790:	78fb      	ldrb	r3, [r7, #3]
 8005792:	b2db      	uxtb	r3, r3
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	b2db      	uxtb	r3, r3
 8005798:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	b2db      	uxtb	r3, r3
 800579e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a2:	2b80      	cmp	r3, #128	; 0x80
 80057a4:	d0ef      	beq.n	8005786 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80057a6:	4b27      	ldr	r3, [pc, #156]	; (8005844 <xPortStartScheduler+0x134>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f1c3 0307 	rsb	r3, r3, #7
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d00a      	beq.n	80057c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80057b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b6:	f383 8811 	msr	BASEPRI, r3
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	60bb      	str	r3, [r7, #8]
}
 80057c4:	bf00      	nop
 80057c6:	e7fe      	b.n	80057c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80057c8:	4b1e      	ldr	r3, [pc, #120]	; (8005844 <xPortStartScheduler+0x134>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	021b      	lsls	r3, r3, #8
 80057ce:	4a1d      	ldr	r2, [pc, #116]	; (8005844 <xPortStartScheduler+0x134>)
 80057d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80057d2:	4b1c      	ldr	r3, [pc, #112]	; (8005844 <xPortStartScheduler+0x134>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057da:	4a1a      	ldr	r2, [pc, #104]	; (8005844 <xPortStartScheduler+0x134>)
 80057dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80057e6:	4b18      	ldr	r3, [pc, #96]	; (8005848 <xPortStartScheduler+0x138>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a17      	ldr	r2, [pc, #92]	; (8005848 <xPortStartScheduler+0x138>)
 80057ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80057f2:	4b15      	ldr	r3, [pc, #84]	; (8005848 <xPortStartScheduler+0x138>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a14      	ldr	r2, [pc, #80]	; (8005848 <xPortStartScheduler+0x138>)
 80057f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80057fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80057fe:	f000 f8dd 	bl	80059bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005802:	4b12      	ldr	r3, [pc, #72]	; (800584c <xPortStartScheduler+0x13c>)
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005808:	f000 f8fc 	bl	8005a04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800580c:	4b10      	ldr	r3, [pc, #64]	; (8005850 <xPortStartScheduler+0x140>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a0f      	ldr	r2, [pc, #60]	; (8005850 <xPortStartScheduler+0x140>)
 8005812:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005816:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005818:	f7ff ff66 	bl	80056e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800581c:	f7ff fd42 	bl	80052a4 <vTaskSwitchContext>
	prvTaskExitError();
 8005820:	f7ff ff1c 	bl	800565c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	e000ed00 	.word	0xe000ed00
 8005834:	410fc271 	.word	0x410fc271
 8005838:	410fc270 	.word	0x410fc270
 800583c:	e000e400 	.word	0xe000e400
 8005840:	20000b44 	.word	0x20000b44
 8005844:	20000b48 	.word	0x20000b48
 8005848:	e000ed20 	.word	0xe000ed20
 800584c:	2000043c 	.word	0x2000043c
 8005850:	e000ef34 	.word	0xe000ef34

08005854 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
	__asm volatile
 800585a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	607b      	str	r3, [r7, #4]
}
 800586c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800586e:	4b0f      	ldr	r3, [pc, #60]	; (80058ac <vPortEnterCritical+0x58>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3301      	adds	r3, #1
 8005874:	4a0d      	ldr	r2, [pc, #52]	; (80058ac <vPortEnterCritical+0x58>)
 8005876:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005878:	4b0c      	ldr	r3, [pc, #48]	; (80058ac <vPortEnterCritical+0x58>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d10f      	bne.n	80058a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005880:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <vPortEnterCritical+0x5c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800588a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	603b      	str	r3, [r7, #0]
}
 800589c:	bf00      	nop
 800589e:	e7fe      	b.n	800589e <vPortEnterCritical+0x4a>
	}
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	2000043c 	.word	0x2000043c
 80058b0:	e000ed04 	.word	0xe000ed04

080058b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80058ba:	4b12      	ldr	r3, [pc, #72]	; (8005904 <vPortExitCritical+0x50>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10a      	bne.n	80058d8 <vPortExitCritical+0x24>
	__asm volatile
 80058c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	607b      	str	r3, [r7, #4]
}
 80058d4:	bf00      	nop
 80058d6:	e7fe      	b.n	80058d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80058d8:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <vPortExitCritical+0x50>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3b01      	subs	r3, #1
 80058de:	4a09      	ldr	r2, [pc, #36]	; (8005904 <vPortExitCritical+0x50>)
 80058e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80058e2:	4b08      	ldr	r3, [pc, #32]	; (8005904 <vPortExitCritical+0x50>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d105      	bne.n	80058f6 <vPortExitCritical+0x42>
 80058ea:	2300      	movs	r3, #0
 80058ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80058f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	2000043c 	.word	0x2000043c
	...

08005910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005910:	f3ef 8009 	mrs	r0, PSP
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	4b15      	ldr	r3, [pc, #84]	; (8005970 <pxCurrentTCBConst>)
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	f01e 0f10 	tst.w	lr, #16
 8005920:	bf08      	it	eq
 8005922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592a:	6010      	str	r0, [r2, #0]
 800592c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005930:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005934:	f380 8811 	msr	BASEPRI, r0
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f7ff fcb0 	bl	80052a4 <vTaskSwitchContext>
 8005944:	f04f 0000 	mov.w	r0, #0
 8005948:	f380 8811 	msr	BASEPRI, r0
 800594c:	bc09      	pop	{r0, r3}
 800594e:	6819      	ldr	r1, [r3, #0]
 8005950:	6808      	ldr	r0, [r1, #0]
 8005952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005956:	f01e 0f10 	tst.w	lr, #16
 800595a:	bf08      	it	eq
 800595c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005960:	f380 8809 	msr	PSP, r0
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	f3af 8000 	nop.w

08005970 <pxCurrentTCBConst>:
 8005970:	20000a18 	.word	0x20000a18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005974:	bf00      	nop
 8005976:	bf00      	nop

08005978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
	__asm volatile
 800597e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	607b      	str	r3, [r7, #4]
}
 8005990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005992:	f7ff fbc9 	bl	8005128 <xTaskIncrementTick>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d003      	beq.n	80059a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800599c:	4b06      	ldr	r3, [pc, #24]	; (80059b8 <SysTick_Handler+0x40>)
 800599e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	2300      	movs	r3, #0
 80059a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	f383 8811 	msr	BASEPRI, r3
}
 80059ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80059b0:	bf00      	nop
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	e000ed04 	.word	0xe000ed04

080059bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80059c0:	4b0b      	ldr	r3, [pc, #44]	; (80059f0 <vPortSetupTimerInterrupt+0x34>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80059c6:	4b0b      	ldr	r3, [pc, #44]	; (80059f4 <vPortSetupTimerInterrupt+0x38>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80059cc:	4b0a      	ldr	r3, [pc, #40]	; (80059f8 <vPortSetupTimerInterrupt+0x3c>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a0a      	ldr	r2, [pc, #40]	; (80059fc <vPortSetupTimerInterrupt+0x40>)
 80059d2:	fba2 2303 	umull	r2, r3, r2, r3
 80059d6:	099b      	lsrs	r3, r3, #6
 80059d8:	4a09      	ldr	r2, [pc, #36]	; (8005a00 <vPortSetupTimerInterrupt+0x44>)
 80059da:	3b01      	subs	r3, #1
 80059dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80059de:	4b04      	ldr	r3, [pc, #16]	; (80059f0 <vPortSetupTimerInterrupt+0x34>)
 80059e0:	2207      	movs	r2, #7
 80059e2:	601a      	str	r2, [r3, #0]
}
 80059e4:	bf00      	nop
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	e000e010 	.word	0xe000e010
 80059f4:	e000e018 	.word	0xe000e018
 80059f8:	20000430 	.word	0x20000430
 80059fc:	10624dd3 	.word	0x10624dd3
 8005a00:	e000e014 	.word	0xe000e014

08005a04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a14 <vPortEnableVFP+0x10>
 8005a08:	6801      	ldr	r1, [r0, #0]
 8005a0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a0e:	6001      	str	r1, [r0, #0]
 8005a10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a12:	bf00      	nop
 8005a14:	e000ed88 	.word	0xe000ed88

08005a18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08a      	sub	sp, #40	; 0x28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a20:	2300      	movs	r3, #0
 8005a22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a24:	f7ff fad6 	bl	8004fd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a28:	4b58      	ldr	r3, [pc, #352]	; (8005b8c <pvPortMalloc+0x174>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a30:	f000 f910 	bl	8005c54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a34:	4b56      	ldr	r3, [pc, #344]	; (8005b90 <pvPortMalloc+0x178>)
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f040 808e 	bne.w	8005b5e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d01d      	beq.n	8005a84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005a48:	2208      	movs	r2, #8
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d014      	beq.n	8005a84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f023 0307 	bic.w	r3, r3, #7
 8005a60:	3308      	adds	r3, #8
 8005a62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <pvPortMalloc+0x6c>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	617b      	str	r3, [r7, #20]
}
 8005a80:	bf00      	nop
 8005a82:	e7fe      	b.n	8005a82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d069      	beq.n	8005b5e <pvPortMalloc+0x146>
 8005a8a:	4b42      	ldr	r3, [pc, #264]	; (8005b94 <pvPortMalloc+0x17c>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d864      	bhi.n	8005b5e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a94:	4b40      	ldr	r3, [pc, #256]	; (8005b98 <pvPortMalloc+0x180>)
 8005a96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a98:	4b3f      	ldr	r3, [pc, #252]	; (8005b98 <pvPortMalloc+0x180>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a9e:	e004      	b.n	8005aaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d903      	bls.n	8005abc <pvPortMalloc+0xa4>
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1f1      	bne.n	8005aa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005abc:	4b33      	ldr	r3, [pc, #204]	; (8005b8c <pvPortMalloc+0x174>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d04b      	beq.n	8005b5e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2208      	movs	r2, #8
 8005acc:	4413      	add	r3, r2
 8005ace:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	1ad2      	subs	r2, r2, r3
 8005ae0:	2308      	movs	r3, #8
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d91f      	bls.n	8005b28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4413      	add	r3, r2
 8005aee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00a      	beq.n	8005b10 <pvPortMalloc+0xf8>
	__asm volatile
 8005afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afe:	f383 8811 	msr	BASEPRI, r3
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	613b      	str	r3, [r7, #16]
}
 8005b0c:	bf00      	nop
 8005b0e:	e7fe      	b.n	8005b0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	1ad2      	subs	r2, r2, r3
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b22:	69b8      	ldr	r0, [r7, #24]
 8005b24:	f000 f8f8 	bl	8005d18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b28:	4b1a      	ldr	r3, [pc, #104]	; (8005b94 <pvPortMalloc+0x17c>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	4a18      	ldr	r2, [pc, #96]	; (8005b94 <pvPortMalloc+0x17c>)
 8005b34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b36:	4b17      	ldr	r3, [pc, #92]	; (8005b94 <pvPortMalloc+0x17c>)
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	4b18      	ldr	r3, [pc, #96]	; (8005b9c <pvPortMalloc+0x184>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d203      	bcs.n	8005b4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b42:	4b14      	ldr	r3, [pc, #80]	; (8005b94 <pvPortMalloc+0x17c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a15      	ldr	r2, [pc, #84]	; (8005b9c <pvPortMalloc+0x184>)
 8005b48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	4b10      	ldr	r3, [pc, #64]	; (8005b90 <pvPortMalloc+0x178>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	431a      	orrs	r2, r3
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b5e:	f7ff fa47 	bl	8004ff0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00a      	beq.n	8005b82 <pvPortMalloc+0x16a>
	__asm volatile
 8005b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	60fb      	str	r3, [r7, #12]
}
 8005b7e:	bf00      	nop
 8005b80:	e7fe      	b.n	8005b80 <pvPortMalloc+0x168>
	return pvReturn;
 8005b82:	69fb      	ldr	r3, [r7, #28]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3728      	adds	r7, #40	; 0x28
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	20001754 	.word	0x20001754
 8005b90:	20001760 	.word	0x20001760
 8005b94:	20001758 	.word	0x20001758
 8005b98:	2000174c 	.word	0x2000174c
 8005b9c:	2000175c 	.word	0x2000175c

08005ba0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d048      	beq.n	8005c44 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005bb2:	2308      	movs	r3, #8
 8005bb4:	425b      	negs	r3, r3
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	4413      	add	r3, r2
 8005bba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	4b21      	ldr	r3, [pc, #132]	; (8005c4c <vPortFree+0xac>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10a      	bne.n	8005be4 <vPortFree+0x44>
	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	60fb      	str	r3, [r7, #12]
}
 8005be0:	bf00      	nop
 8005be2:	e7fe      	b.n	8005be2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00a      	beq.n	8005c02 <vPortFree+0x62>
	__asm volatile
 8005bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	60bb      	str	r3, [r7, #8]
}
 8005bfe:	bf00      	nop
 8005c00:	e7fe      	b.n	8005c00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	4b11      	ldr	r3, [pc, #68]	; (8005c4c <vPortFree+0xac>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d019      	beq.n	8005c44 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d115      	bne.n	8005c44 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	4b0b      	ldr	r3, [pc, #44]	; (8005c4c <vPortFree+0xac>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	43db      	mvns	r3, r3
 8005c22:	401a      	ands	r2, r3
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c28:	f7ff f9d4 	bl	8004fd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	4b07      	ldr	r3, [pc, #28]	; (8005c50 <vPortFree+0xb0>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4413      	add	r3, r2
 8005c36:	4a06      	ldr	r2, [pc, #24]	; (8005c50 <vPortFree+0xb0>)
 8005c38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c3a:	6938      	ldr	r0, [r7, #16]
 8005c3c:	f000 f86c 	bl	8005d18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005c40:	f7ff f9d6 	bl	8004ff0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c44:	bf00      	nop
 8005c46:	3718      	adds	r7, #24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	20001760 	.word	0x20001760
 8005c50:	20001758 	.word	0x20001758

08005c54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005c5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c60:	4b27      	ldr	r3, [pc, #156]	; (8005d00 <prvHeapInit+0xac>)
 8005c62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00c      	beq.n	8005c88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3307      	adds	r3, #7
 8005c72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 0307 	bic.w	r3, r3, #7
 8005c7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	4a1f      	ldr	r2, [pc, #124]	; (8005d00 <prvHeapInit+0xac>)
 8005c84:	4413      	add	r3, r2
 8005c86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c8c:	4a1d      	ldr	r2, [pc, #116]	; (8005d04 <prvHeapInit+0xb0>)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c92:	4b1c      	ldr	r3, [pc, #112]	; (8005d04 <prvHeapInit+0xb0>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ca0:	2208      	movs	r2, #8
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	1a9b      	subs	r3, r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 0307 	bic.w	r3, r3, #7
 8005cae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4a15      	ldr	r2, [pc, #84]	; (8005d08 <prvHeapInit+0xb4>)
 8005cb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005cb6:	4b14      	ldr	r3, [pc, #80]	; (8005d08 <prvHeapInit+0xb4>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005cbe:	4b12      	ldr	r3, [pc, #72]	; (8005d08 <prvHeapInit+0xb4>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	1ad2      	subs	r2, r2, r3
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005cd4:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <prvHeapInit+0xb4>)
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	4a0a      	ldr	r2, [pc, #40]	; (8005d0c <prvHeapInit+0xb8>)
 8005ce2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	4a09      	ldr	r2, [pc, #36]	; (8005d10 <prvHeapInit+0xbc>)
 8005cea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cec:	4b09      	ldr	r3, [pc, #36]	; (8005d14 <prvHeapInit+0xc0>)
 8005cee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005cf2:	601a      	str	r2, [r3, #0]
}
 8005cf4:	bf00      	nop
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	20000b4c 	.word	0x20000b4c
 8005d04:	2000174c 	.word	0x2000174c
 8005d08:	20001754 	.word	0x20001754
 8005d0c:	2000175c 	.word	0x2000175c
 8005d10:	20001758 	.word	0x20001758
 8005d14:	20001760 	.word	0x20001760

08005d18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d20:	4b28      	ldr	r3, [pc, #160]	; (8005dc4 <prvInsertBlockIntoFreeList+0xac>)
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	e002      	b.n	8005d2c <prvInsertBlockIntoFreeList+0x14>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d8f7      	bhi.n	8005d26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	4413      	add	r3, r2
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d108      	bne.n	8005d5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	441a      	add	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	441a      	add	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d118      	bne.n	8005da0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	4b15      	ldr	r3, [pc, #84]	; (8005dc8 <prvInsertBlockIntoFreeList+0xb0>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d00d      	beq.n	8005d96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	441a      	add	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	e008      	b.n	8005da8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d96:	4b0c      	ldr	r3, [pc, #48]	; (8005dc8 <prvInsertBlockIntoFreeList+0xb0>)
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	e003      	b.n	8005da8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d002      	beq.n	8005db6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005db6:	bf00      	nop
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	2000174c 	.word	0x2000174c
 8005dc8:	20001754 	.word	0x20001754

08005dcc <__libc_init_array>:
 8005dcc:	b570      	push	{r4, r5, r6, lr}
 8005dce:	4d0d      	ldr	r5, [pc, #52]	; (8005e04 <__libc_init_array+0x38>)
 8005dd0:	4c0d      	ldr	r4, [pc, #52]	; (8005e08 <__libc_init_array+0x3c>)
 8005dd2:	1b64      	subs	r4, r4, r5
 8005dd4:	10a4      	asrs	r4, r4, #2
 8005dd6:	2600      	movs	r6, #0
 8005dd8:	42a6      	cmp	r6, r4
 8005dda:	d109      	bne.n	8005df0 <__libc_init_array+0x24>
 8005ddc:	4d0b      	ldr	r5, [pc, #44]	; (8005e0c <__libc_init_array+0x40>)
 8005dde:	4c0c      	ldr	r4, [pc, #48]	; (8005e10 <__libc_init_array+0x44>)
 8005de0:	f000 f8f2 	bl	8005fc8 <_init>
 8005de4:	1b64      	subs	r4, r4, r5
 8005de6:	10a4      	asrs	r4, r4, #2
 8005de8:	2600      	movs	r6, #0
 8005dea:	42a6      	cmp	r6, r4
 8005dec:	d105      	bne.n	8005dfa <__libc_init_array+0x2e>
 8005dee:	bd70      	pop	{r4, r5, r6, pc}
 8005df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005df4:	4798      	blx	r3
 8005df6:	3601      	adds	r6, #1
 8005df8:	e7ee      	b.n	8005dd8 <__libc_init_array+0xc>
 8005dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dfe:	4798      	blx	r3
 8005e00:	3601      	adds	r6, #1
 8005e02:	e7f2      	b.n	8005dea <__libc_init_array+0x1e>
 8005e04:	08006170 	.word	0x08006170
 8005e08:	08006170 	.word	0x08006170
 8005e0c:	08006170 	.word	0x08006170
 8005e10:	08006174 	.word	0x08006174

08005e14 <__retarget_lock_acquire_recursive>:
 8005e14:	4770      	bx	lr

08005e16 <__retarget_lock_release_recursive>:
 8005e16:	4770      	bx	lr

08005e18 <memcpy>:
 8005e18:	440a      	add	r2, r1
 8005e1a:	4291      	cmp	r1, r2
 8005e1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e20:	d100      	bne.n	8005e24 <memcpy+0xc>
 8005e22:	4770      	bx	lr
 8005e24:	b510      	push	{r4, lr}
 8005e26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e2e:	4291      	cmp	r1, r2
 8005e30:	d1f9      	bne.n	8005e26 <memcpy+0xe>
 8005e32:	bd10      	pop	{r4, pc}

08005e34 <memset>:
 8005e34:	4402      	add	r2, r0
 8005e36:	4603      	mov	r3, r0
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d100      	bne.n	8005e3e <memset+0xa>
 8005e3c:	4770      	bx	lr
 8005e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e42:	e7f9      	b.n	8005e38 <memset+0x4>

08005e44 <cleanup_glue>:
 8005e44:	b538      	push	{r3, r4, r5, lr}
 8005e46:	460c      	mov	r4, r1
 8005e48:	6809      	ldr	r1, [r1, #0]
 8005e4a:	4605      	mov	r5, r0
 8005e4c:	b109      	cbz	r1, 8005e52 <cleanup_glue+0xe>
 8005e4e:	f7ff fff9 	bl	8005e44 <cleanup_glue>
 8005e52:	4621      	mov	r1, r4
 8005e54:	4628      	mov	r0, r5
 8005e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e5a:	f000 b869 	b.w	8005f30 <_free_r>
	...

08005e60 <_reclaim_reent>:
 8005e60:	4b2c      	ldr	r3, [pc, #176]	; (8005f14 <_reclaim_reent+0xb4>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4283      	cmp	r3, r0
 8005e66:	b570      	push	{r4, r5, r6, lr}
 8005e68:	4604      	mov	r4, r0
 8005e6a:	d051      	beq.n	8005f10 <_reclaim_reent+0xb0>
 8005e6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005e6e:	b143      	cbz	r3, 8005e82 <_reclaim_reent+0x22>
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d14a      	bne.n	8005f0c <_reclaim_reent+0xac>
 8005e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e78:	6819      	ldr	r1, [r3, #0]
 8005e7a:	b111      	cbz	r1, 8005e82 <_reclaim_reent+0x22>
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f000 f857 	bl	8005f30 <_free_r>
 8005e82:	6961      	ldr	r1, [r4, #20]
 8005e84:	b111      	cbz	r1, 8005e8c <_reclaim_reent+0x2c>
 8005e86:	4620      	mov	r0, r4
 8005e88:	f000 f852 	bl	8005f30 <_free_r>
 8005e8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005e8e:	b111      	cbz	r1, 8005e96 <_reclaim_reent+0x36>
 8005e90:	4620      	mov	r0, r4
 8005e92:	f000 f84d 	bl	8005f30 <_free_r>
 8005e96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005e98:	b111      	cbz	r1, 8005ea0 <_reclaim_reent+0x40>
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f000 f848 	bl	8005f30 <_free_r>
 8005ea0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005ea2:	b111      	cbz	r1, 8005eaa <_reclaim_reent+0x4a>
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f000 f843 	bl	8005f30 <_free_r>
 8005eaa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005eac:	b111      	cbz	r1, 8005eb4 <_reclaim_reent+0x54>
 8005eae:	4620      	mov	r0, r4
 8005eb0:	f000 f83e 	bl	8005f30 <_free_r>
 8005eb4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005eb6:	b111      	cbz	r1, 8005ebe <_reclaim_reent+0x5e>
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f000 f839 	bl	8005f30 <_free_r>
 8005ebe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005ec0:	b111      	cbz	r1, 8005ec8 <_reclaim_reent+0x68>
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	f000 f834 	bl	8005f30 <_free_r>
 8005ec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005eca:	b111      	cbz	r1, 8005ed2 <_reclaim_reent+0x72>
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f000 f82f 	bl	8005f30 <_free_r>
 8005ed2:	69a3      	ldr	r3, [r4, #24]
 8005ed4:	b1e3      	cbz	r3, 8005f10 <_reclaim_reent+0xb0>
 8005ed6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005ed8:	4620      	mov	r0, r4
 8005eda:	4798      	blx	r3
 8005edc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005ede:	b1b9      	cbz	r1, 8005f10 <_reclaim_reent+0xb0>
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005ee6:	f7ff bfad 	b.w	8005e44 <cleanup_glue>
 8005eea:	5949      	ldr	r1, [r1, r5]
 8005eec:	b941      	cbnz	r1, 8005f00 <_reclaim_reent+0xa0>
 8005eee:	3504      	adds	r5, #4
 8005ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ef2:	2d80      	cmp	r5, #128	; 0x80
 8005ef4:	68d9      	ldr	r1, [r3, #12]
 8005ef6:	d1f8      	bne.n	8005eea <_reclaim_reent+0x8a>
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f000 f819 	bl	8005f30 <_free_r>
 8005efe:	e7ba      	b.n	8005e76 <_reclaim_reent+0x16>
 8005f00:	680e      	ldr	r6, [r1, #0]
 8005f02:	4620      	mov	r0, r4
 8005f04:	f000 f814 	bl	8005f30 <_free_r>
 8005f08:	4631      	mov	r1, r6
 8005f0a:	e7ef      	b.n	8005eec <_reclaim_reent+0x8c>
 8005f0c:	2500      	movs	r5, #0
 8005f0e:	e7ef      	b.n	8005ef0 <_reclaim_reent+0x90>
 8005f10:	bd70      	pop	{r4, r5, r6, pc}
 8005f12:	bf00      	nop
 8005f14:	20000440 	.word	0x20000440

08005f18 <__malloc_lock>:
 8005f18:	4801      	ldr	r0, [pc, #4]	; (8005f20 <__malloc_lock+0x8>)
 8005f1a:	f7ff bf7b 	b.w	8005e14 <__retarget_lock_acquire_recursive>
 8005f1e:	bf00      	nop
 8005f20:	20001764 	.word	0x20001764

08005f24 <__malloc_unlock>:
 8005f24:	4801      	ldr	r0, [pc, #4]	; (8005f2c <__malloc_unlock+0x8>)
 8005f26:	f7ff bf76 	b.w	8005e16 <__retarget_lock_release_recursive>
 8005f2a:	bf00      	nop
 8005f2c:	20001764 	.word	0x20001764

08005f30 <_free_r>:
 8005f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f32:	2900      	cmp	r1, #0
 8005f34:	d044      	beq.n	8005fc0 <_free_r+0x90>
 8005f36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f3a:	9001      	str	r0, [sp, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f1a1 0404 	sub.w	r4, r1, #4
 8005f42:	bfb8      	it	lt
 8005f44:	18e4      	addlt	r4, r4, r3
 8005f46:	f7ff ffe7 	bl	8005f18 <__malloc_lock>
 8005f4a:	4a1e      	ldr	r2, [pc, #120]	; (8005fc4 <_free_r+0x94>)
 8005f4c:	9801      	ldr	r0, [sp, #4]
 8005f4e:	6813      	ldr	r3, [r2, #0]
 8005f50:	b933      	cbnz	r3, 8005f60 <_free_r+0x30>
 8005f52:	6063      	str	r3, [r4, #4]
 8005f54:	6014      	str	r4, [r2, #0]
 8005f56:	b003      	add	sp, #12
 8005f58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f5c:	f7ff bfe2 	b.w	8005f24 <__malloc_unlock>
 8005f60:	42a3      	cmp	r3, r4
 8005f62:	d908      	bls.n	8005f76 <_free_r+0x46>
 8005f64:	6825      	ldr	r5, [r4, #0]
 8005f66:	1961      	adds	r1, r4, r5
 8005f68:	428b      	cmp	r3, r1
 8005f6a:	bf01      	itttt	eq
 8005f6c:	6819      	ldreq	r1, [r3, #0]
 8005f6e:	685b      	ldreq	r3, [r3, #4]
 8005f70:	1949      	addeq	r1, r1, r5
 8005f72:	6021      	streq	r1, [r4, #0]
 8005f74:	e7ed      	b.n	8005f52 <_free_r+0x22>
 8005f76:	461a      	mov	r2, r3
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	b10b      	cbz	r3, 8005f80 <_free_r+0x50>
 8005f7c:	42a3      	cmp	r3, r4
 8005f7e:	d9fa      	bls.n	8005f76 <_free_r+0x46>
 8005f80:	6811      	ldr	r1, [r2, #0]
 8005f82:	1855      	adds	r5, r2, r1
 8005f84:	42a5      	cmp	r5, r4
 8005f86:	d10b      	bne.n	8005fa0 <_free_r+0x70>
 8005f88:	6824      	ldr	r4, [r4, #0]
 8005f8a:	4421      	add	r1, r4
 8005f8c:	1854      	adds	r4, r2, r1
 8005f8e:	42a3      	cmp	r3, r4
 8005f90:	6011      	str	r1, [r2, #0]
 8005f92:	d1e0      	bne.n	8005f56 <_free_r+0x26>
 8005f94:	681c      	ldr	r4, [r3, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	6053      	str	r3, [r2, #4]
 8005f9a:	4421      	add	r1, r4
 8005f9c:	6011      	str	r1, [r2, #0]
 8005f9e:	e7da      	b.n	8005f56 <_free_r+0x26>
 8005fa0:	d902      	bls.n	8005fa8 <_free_r+0x78>
 8005fa2:	230c      	movs	r3, #12
 8005fa4:	6003      	str	r3, [r0, #0]
 8005fa6:	e7d6      	b.n	8005f56 <_free_r+0x26>
 8005fa8:	6825      	ldr	r5, [r4, #0]
 8005faa:	1961      	adds	r1, r4, r5
 8005fac:	428b      	cmp	r3, r1
 8005fae:	bf04      	itt	eq
 8005fb0:	6819      	ldreq	r1, [r3, #0]
 8005fb2:	685b      	ldreq	r3, [r3, #4]
 8005fb4:	6063      	str	r3, [r4, #4]
 8005fb6:	bf04      	itt	eq
 8005fb8:	1949      	addeq	r1, r1, r5
 8005fba:	6021      	streq	r1, [r4, #0]
 8005fbc:	6054      	str	r4, [r2, #4]
 8005fbe:	e7ca      	b.n	8005f56 <_free_r+0x26>
 8005fc0:	b003      	add	sp, #12
 8005fc2:	bd30      	pop	{r4, r5, pc}
 8005fc4:	20001768 	.word	0x20001768

08005fc8 <_init>:
 8005fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fca:	bf00      	nop
 8005fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fce:	bc08      	pop	{r3}
 8005fd0:	469e      	mov	lr, r3
 8005fd2:	4770      	bx	lr

08005fd4 <_fini>:
 8005fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd6:	bf00      	nop
 8005fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fda:	bc08      	pop	{r3}
 8005fdc:	469e      	mov	lr, r3
 8005fde:	4770      	bx	lr
