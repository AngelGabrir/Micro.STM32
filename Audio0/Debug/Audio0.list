
Audio0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ad0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08008c58  08008c58  00018c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cf0  08008cf0  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08008cf0  08008cf0  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008cf0  08008cf0  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cf0  08008cf0  00018cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cf4  08008cf4  00018cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08008cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000127c  20000180  08008e78  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013fc  08008e78  000213fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012128  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d5a  00000000  00000000  000322d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00035038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b48  00000000  00000000  00035ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc6b  00000000  00000000  000367f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001209e  00000000  00000000  0005445b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0f72  00000000  00000000  000664f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010746b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000311c  00000000  00000000  001074bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008c40 	.word	0x08008c40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	08008c40 	.word	0x08008c40

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b598      	push	{r3, r4, r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001dc:	f000 f9ec 	bl	80005b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e0:	f000 f81a 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e4:	f000 f8a4 	bl	8000330 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e8:	f000 f872 	bl	80002d0 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80001ec:	f008 f858 	bl	80082a0 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  CDC_Transmit_FS( (uint8_t *)data, strlen(data));
 80001f0:	4b08      	ldr	r3, [pc, #32]	; (8000214 <main+0x3c>)
 80001f2:	681c      	ldr	r4, [r3, #0]
 80001f4:	4b07      	ldr	r3, [pc, #28]	; (8000214 <main+0x3c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4618      	mov	r0, r3
 80001fa:	f7ff ffe5 	bl	80001c8 <strlen>
 80001fe:	4603      	mov	r3, r0
 8000200:	b29b      	uxth	r3, r3
 8000202:	4619      	mov	r1, r3
 8000204:	4620      	mov	r0, r4
 8000206:	f008 f909 	bl	800841c <CDC_Transmit_FS>
	  	  HAL_Delay (1000);
 800020a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800020e:	f000 fa39 	bl	8000684 <HAL_Delay>
	  CDC_Transmit_FS( (uint8_t *)data, strlen(data));
 8000212:	e7ed      	b.n	80001f0 <main+0x18>
 8000214:	20000000 	.word	0x20000000

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b09c      	sub	sp, #112	; 0x70
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000222:	2228      	movs	r2, #40	; 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f008 fd02 	bl	8008c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]
 8000238:	60da      	str	r2, [r3, #12]
 800023a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800023c:	463b      	mov	r3, r7
 800023e:	2234      	movs	r2, #52	; 0x34
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f008 fcf4 	bl	8008c30 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000248:	2301      	movs	r3, #1
 800024a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000250:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000256:	2301      	movs	r3, #1
 8000258:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025a:	2302      	movs	r3, #2
 800025c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800025e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000262:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000264:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000268:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800026e:	4618      	mov	r0, r3
 8000270:	f002 f98c 	bl	800258c <HAL_RCC_OscConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800027a:	f000 f8c1 	bl	8000400 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027e:	230f      	movs	r3, #15
 8000280:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000282:	2302      	movs	r3, #2
 8000284:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800028e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000294:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000298:	2102      	movs	r1, #2
 800029a:	4618      	mov	r0, r3
 800029c:	f003 f9b4 	bl	8003608 <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002a6:	f000 f8ab 	bl	8000400 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80002ae:	603b      	str	r3, [r7, #0]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002b0:	2300      	movs	r3, #0
 80002b2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b4:	463b      	mov	r3, r7
 80002b6:	4618      	mov	r0, r3
 80002b8:	f003 fbdc 	bl	8003a74 <HAL_RCCEx_PeriphCLKConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002c2:	f000 f89d 	bl	8000400 <Error_Handler>
  }
}
 80002c6:	bf00      	nop
 80002c8:	3770      	adds	r7, #112	; 0x70
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002d4:	4b14      	ldr	r3, [pc, #80]	; (8000328 <MX_USART2_UART_Init+0x58>)
 80002d6:	4a15      	ldr	r2, [pc, #84]	; (800032c <MX_USART2_UART_Init+0x5c>)
 80002d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80002da:	4b13      	ldr	r3, [pc, #76]	; (8000328 <MX_USART2_UART_Init+0x58>)
 80002dc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80002e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002e2:	4b11      	ldr	r3, [pc, #68]	; (8000328 <MX_USART2_UART_Init+0x58>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002e8:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <MX_USART2_UART_Init+0x58>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <MX_USART2_UART_Init+0x58>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <MX_USART2_UART_Init+0x58>)
 80002f6:	220c      	movs	r2, #12
 80002f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002fa:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <MX_USART2_UART_Init+0x58>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000300:	4b09      	ldr	r3, [pc, #36]	; (8000328 <MX_USART2_UART_Init+0x58>)
 8000302:	2200      	movs	r2, #0
 8000304:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000306:	4b08      	ldr	r3, [pc, #32]	; (8000328 <MX_USART2_UART_Init+0x58>)
 8000308:	2200      	movs	r2, #0
 800030a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <MX_USART2_UART_Init+0x58>)
 800030e:	2200      	movs	r2, #0
 8000310:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000312:	4805      	ldr	r0, [pc, #20]	; (8000328 <MX_USART2_UART_Init+0x58>)
 8000314:	f003 fd40 	bl	8003d98 <HAL_UART_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800031e:	f000 f86f 	bl	8000400 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	2000019c 	.word	0x2000019c
 800032c:	40004400 	.word	0x40004400

08000330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b08a      	sub	sp, #40	; 0x28
 8000334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000336:	f107 0314 	add.w	r3, r7, #20
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000346:	4b2b      	ldr	r3, [pc, #172]	; (80003f4 <MX_GPIO_Init+0xc4>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	4a2a      	ldr	r2, [pc, #168]	; (80003f4 <MX_GPIO_Init+0xc4>)
 800034c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000350:	6153      	str	r3, [r2, #20]
 8000352:	4b28      	ldr	r3, [pc, #160]	; (80003f4 <MX_GPIO_Init+0xc4>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800035a:	613b      	str	r3, [r7, #16]
 800035c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800035e:	4b25      	ldr	r3, [pc, #148]	; (80003f4 <MX_GPIO_Init+0xc4>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	4a24      	ldr	r2, [pc, #144]	; (80003f4 <MX_GPIO_Init+0xc4>)
 8000364:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000368:	6153      	str	r3, [r2, #20]
 800036a:	4b22      	ldr	r3, [pc, #136]	; (80003f4 <MX_GPIO_Init+0xc4>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000376:	4b1f      	ldr	r3, [pc, #124]	; (80003f4 <MX_GPIO_Init+0xc4>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <MX_GPIO_Init+0xc4>)
 800037c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000380:	6153      	str	r3, [r2, #20]
 8000382:	4b1c      	ldr	r3, [pc, #112]	; (80003f4 <MX_GPIO_Init+0xc4>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800038a:	60bb      	str	r3, [r7, #8]
 800038c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800038e:	4b19      	ldr	r3, [pc, #100]	; (80003f4 <MX_GPIO_Init+0xc4>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a18      	ldr	r2, [pc, #96]	; (80003f4 <MX_GPIO_Init+0xc4>)
 8000394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000398:	6153      	str	r3, [r2, #20]
 800039a:	4b16      	ldr	r3, [pc, #88]	; (80003f4 <MX_GPIO_Init+0xc4>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ac:	4812      	ldr	r0, [pc, #72]	; (80003f8 <MX_GPIO_Init+0xc8>)
 80003ae:	f000 fc11 	bl	8000bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80003bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003be:	2300      	movs	r3, #0
 80003c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003c2:	f107 0314 	add.w	r3, r7, #20
 80003c6:	4619      	mov	r1, r3
 80003c8:	480c      	ldr	r0, [pc, #48]	; (80003fc <MX_GPIO_Init+0xcc>)
 80003ca:	f000 fa91 	bl	80008f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d4:	2301      	movs	r3, #1
 80003d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d8:	2300      	movs	r3, #0
 80003da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003dc:	2300      	movs	r3, #0
 80003de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003e0:	f107 0314 	add.w	r3, r7, #20
 80003e4:	4619      	mov	r1, r3
 80003e6:	4804      	ldr	r0, [pc, #16]	; (80003f8 <MX_GPIO_Init+0xc8>)
 80003e8:	f000 fa82 	bl	80008f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ec:	bf00      	nop
 80003ee:	3728      	adds	r7, #40	; 0x28
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40021000 	.word	0x40021000
 80003f8:	48000400 	.word	0x48000400
 80003fc:	48000800 	.word	0x48000800

08000400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000404:	b672      	cpsid	i
}
 8000406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000408:	e7fe      	b.n	8000408 <Error_Handler+0x8>
	...

0800040c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000412:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <HAL_MspInit+0x44>)
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	4a0e      	ldr	r2, [pc, #56]	; (8000450 <HAL_MspInit+0x44>)
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6193      	str	r3, [r2, #24]
 800041e:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <HAL_MspInit+0x44>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <HAL_MspInit+0x44>)
 800042c:	69db      	ldr	r3, [r3, #28]
 800042e:	4a08      	ldr	r2, [pc, #32]	; (8000450 <HAL_MspInit+0x44>)
 8000430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000434:	61d3      	str	r3, [r2, #28]
 8000436:	4b06      	ldr	r3, [pc, #24]	; (8000450 <HAL_MspInit+0x44>)
 8000438:	69db      	ldr	r3, [r3, #28]
 800043a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800043e:	603b      	str	r3, [r7, #0]
 8000440:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000442:	2007      	movs	r0, #7
 8000444:	f000 fa12 	bl	800086c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000448:	bf00      	nop
 800044a:	3708      	adds	r7, #8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40021000 	.word	0x40021000

08000454 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b08a      	sub	sp, #40	; 0x28
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045c:	f107 0314 	add.w	r3, r7, #20
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	60da      	str	r2, [r3, #12]
 800046a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a17      	ldr	r2, [pc, #92]	; (80004d0 <HAL_UART_MspInit+0x7c>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d128      	bne.n	80004c8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000476:	4b17      	ldr	r3, [pc, #92]	; (80004d4 <HAL_UART_MspInit+0x80>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	4a16      	ldr	r2, [pc, #88]	; (80004d4 <HAL_UART_MspInit+0x80>)
 800047c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000480:	61d3      	str	r3, [r2, #28]
 8000482:	4b14      	ldr	r3, [pc, #80]	; (80004d4 <HAL_UART_MspInit+0x80>)
 8000484:	69db      	ldr	r3, [r3, #28]
 8000486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800048a:	613b      	str	r3, [r7, #16]
 800048c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800048e:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <HAL_UART_MspInit+0x80>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	4a10      	ldr	r2, [pc, #64]	; (80004d4 <HAL_UART_MspInit+0x80>)
 8000494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000498:	6153      	str	r3, [r2, #20]
 800049a:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <HAL_UART_MspInit+0x80>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80004a6:	230c      	movs	r3, #12
 80004a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004aa:	2302      	movs	r3, #2
 80004ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	2300      	movs	r3, #0
 80004b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80004b6:	2307      	movs	r3, #7
 80004b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ba:	f107 0314 	add.w	r3, r7, #20
 80004be:	4619      	mov	r1, r3
 80004c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c4:	f000 fa14 	bl	80008f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004c8:	bf00      	nop
 80004ca:	3728      	adds	r7, #40	; 0x28
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40004400 	.word	0x40004400
 80004d4:	40021000 	.word	0x40021000

080004d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <NMI_Handler+0x4>

080004de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <HardFault_Handler+0x4>

080004e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <MemManage_Handler+0x4>

080004ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <BusFault_Handler+0x4>

080004f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <UsageFault_Handler+0x4>

080004f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000516:	bf00      	nop
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000524:	f000 f88e 	bl	8000644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}

0800052c <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000532:	f000 fc5f 	bl	8000df4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000ef0 	.word	0x20000ef0

08000540 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <SystemInit+0x20>)
 8000546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800054a:	4a05      	ldr	r2, [pc, #20]	; (8000560 <SystemInit+0x20>)
 800054c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000564:	f8df d034 	ldr.w	sp, [pc, #52]	; 800059c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000568:	f7ff ffea 	bl	8000540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800056c:	480c      	ldr	r0, [pc, #48]	; (80005a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800056e:	490d      	ldr	r1, [pc, #52]	; (80005a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000570:	4a0d      	ldr	r2, [pc, #52]	; (80005a8 <LoopForever+0xe>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000574:	e002      	b.n	800057c <LoopCopyDataInit>

08000576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800057a:	3304      	adds	r3, #4

0800057c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800057c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000580:	d3f9      	bcc.n	8000576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000582:	4a0a      	ldr	r2, [pc, #40]	; (80005ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000584:	4c0a      	ldr	r4, [pc, #40]	; (80005b0 <LoopForever+0x16>)
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000588:	e001      	b.n	800058e <LoopFillZerobss>

0800058a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800058a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800058c:	3204      	adds	r2, #4

0800058e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800058e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000590:	d3fb      	bcc.n	800058a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000592:	f008 fb29 	bl	8008be8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000596:	f7ff fe1f 	bl	80001d8 <main>

0800059a <LoopForever>:

LoopForever:
    b LoopForever
 800059a:	e7fe      	b.n	800059a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800059c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80005a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a4:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80005a8:	08008cf8 	.word	0x08008cf8
  ldr r2, =_sbss
 80005ac:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80005b0:	200013fc 	.word	0x200013fc

080005b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005b4:	e7fe      	b.n	80005b4 <ADC1_IRQHandler>
	...

080005b8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <HAL_Init+0x28>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <HAL_Init+0x28>)
 80005c2:	f043 0310 	orr.w	r3, r3, #16
 80005c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c8:	2003      	movs	r0, #3
 80005ca:	f000 f94f 	bl	800086c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 f808 	bl	80005e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d4:	f7ff ff1a 	bl	800040c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40022000 	.word	0x40022000

080005e4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <HAL_InitTick+0x54>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_InitTick+0x58>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4619      	mov	r1, r3
 80005f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80005fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f967 	bl	80008d6 <HAL_SYSTICK_Config>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	e00e      	b.n	8000630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d80a      	bhi.n	800062e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	2200      	movs	r2, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f000 f92f 	bl	8000882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000624:	4a06      	ldr	r2, [pc, #24]	; (8000640 <HAL_InitTick+0x5c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800062a:	2300      	movs	r3, #0
 800062c:	e000      	b.n	8000630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000004 	.word	0x20000004
 800063c:	2000000c 	.word	0x2000000c
 8000640:	20000008 	.word	0x20000008

08000644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_IncTick+0x20>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_IncTick+0x24>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4413      	add	r3, r2
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <HAL_IncTick+0x24>)
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	2000000c 	.word	0x2000000c
 8000668:	20000224 	.word	0x20000224

0800066c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <HAL_GetTick+0x14>)
 8000672:	681b      	ldr	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20000224 	.word	0x20000224

08000684 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800068c:	f7ff ffee 	bl	800066c <HAL_GetTick>
 8000690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800069c:	d005      	beq.n	80006aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <HAL_Delay+0x44>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	4413      	add	r3, r2
 80006a8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006aa:	bf00      	nop
 80006ac:	f7ff ffde 	bl	800066c <HAL_GetTick>
 80006b0:	4602      	mov	r2, r0
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d8f7      	bhi.n	80006ac <HAL_Delay+0x28>
  {
  }
}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	2000000c 	.word	0x2000000c

080006cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	f003 0307 	and.w	r3, r3, #7
 80006da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <__NVIC_SetPriorityGrouping+0x44>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e8:	4013      	ands	r3, r2
 80006ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006fe:	4a04      	ldr	r2, [pc, #16]	; (8000710 <__NVIC_SetPriorityGrouping+0x44>)
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	60d3      	str	r3, [r2, #12]
}
 8000704:	bf00      	nop
 8000706:	3714      	adds	r7, #20
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000718:	4b04      	ldr	r3, [pc, #16]	; (800072c <__NVIC_GetPriorityGrouping+0x18>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	0a1b      	lsrs	r3, r3, #8
 800071e:	f003 0307 	and.w	r3, r3, #7
}
 8000722:	4618      	mov	r0, r3
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800073a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073e:	2b00      	cmp	r3, #0
 8000740:	db0b      	blt.n	800075a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	f003 021f 	and.w	r2, r3, #31
 8000748:	4907      	ldr	r1, [pc, #28]	; (8000768 <__NVIC_EnableIRQ+0x38>)
 800074a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074e:	095b      	lsrs	r3, r3, #5
 8000750:	2001      	movs	r0, #1
 8000752:	fa00 f202 	lsl.w	r2, r0, r2
 8000756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000e100 	.word	0xe000e100

0800076c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	6039      	str	r1, [r7, #0]
 8000776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077c:	2b00      	cmp	r3, #0
 800077e:	db0a      	blt.n	8000796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	b2da      	uxtb	r2, r3
 8000784:	490c      	ldr	r1, [pc, #48]	; (80007b8 <__NVIC_SetPriority+0x4c>)
 8000786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078a:	0112      	lsls	r2, r2, #4
 800078c:	b2d2      	uxtb	r2, r2
 800078e:	440b      	add	r3, r1
 8000790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000794:	e00a      	b.n	80007ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4908      	ldr	r1, [pc, #32]	; (80007bc <__NVIC_SetPriority+0x50>)
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	f003 030f 	and.w	r3, r3, #15
 80007a2:	3b04      	subs	r3, #4
 80007a4:	0112      	lsls	r2, r2, #4
 80007a6:	b2d2      	uxtb	r2, r2
 80007a8:	440b      	add	r3, r1
 80007aa:	761a      	strb	r2, [r3, #24]
}
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	e000e100 	.word	0xe000e100
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b089      	sub	sp, #36	; 0x24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	f1c3 0307 	rsb	r3, r3, #7
 80007da:	2b04      	cmp	r3, #4
 80007dc:	bf28      	it	cs
 80007de:	2304      	movcs	r3, #4
 80007e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	3304      	adds	r3, #4
 80007e6:	2b06      	cmp	r3, #6
 80007e8:	d902      	bls.n	80007f0 <NVIC_EncodePriority+0x30>
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	3b03      	subs	r3, #3
 80007ee:	e000      	b.n	80007f2 <NVIC_EncodePriority+0x32>
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f4:	f04f 32ff 	mov.w	r2, #4294967295
 80007f8:	69bb      	ldr	r3, [r7, #24]
 80007fa:	fa02 f303 	lsl.w	r3, r2, r3
 80007fe:	43da      	mvns	r2, r3
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	401a      	ands	r2, r3
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000808:	f04f 31ff 	mov.w	r1, #4294967295
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	fa01 f303 	lsl.w	r3, r1, r3
 8000812:	43d9      	mvns	r1, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000818:	4313      	orrs	r3, r2
         );
}
 800081a:	4618      	mov	r0, r3
 800081c:	3724      	adds	r7, #36	; 0x24
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
	...

08000828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3b01      	subs	r3, #1
 8000834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000838:	d301      	bcc.n	800083e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800083a:	2301      	movs	r3, #1
 800083c:	e00f      	b.n	800085e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <SysTick_Config+0x40>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3b01      	subs	r3, #1
 8000844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000846:	210f      	movs	r1, #15
 8000848:	f04f 30ff 	mov.w	r0, #4294967295
 800084c:	f7ff ff8e 	bl	800076c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <SysTick_Config+0x40>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000856:	4b04      	ldr	r3, [pc, #16]	; (8000868 <SysTick_Config+0x40>)
 8000858:	2207      	movs	r2, #7
 800085a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	e000e010 	.word	0xe000e010

0800086c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff ff29 	bl	80006cc <__NVIC_SetPriorityGrouping>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b086      	sub	sp, #24
 8000886:	af00      	add	r7, sp, #0
 8000888:	4603      	mov	r3, r0
 800088a:	60b9      	str	r1, [r7, #8]
 800088c:	607a      	str	r2, [r7, #4]
 800088e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000894:	f7ff ff3e 	bl	8000714 <__NVIC_GetPriorityGrouping>
 8000898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	68b9      	ldr	r1, [r7, #8]
 800089e:	6978      	ldr	r0, [r7, #20]
 80008a0:	f7ff ff8e 	bl	80007c0 <NVIC_EncodePriority>
 80008a4:	4602      	mov	r2, r0
 80008a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008aa:	4611      	mov	r1, r2
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ff5d 	bl	800076c <__NVIC_SetPriority>
}
 80008b2:	bf00      	nop
 80008b4:	3718      	adds	r7, #24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b082      	sub	sp, #8
 80008be:	af00      	add	r7, sp, #0
 80008c0:	4603      	mov	r3, r0
 80008c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff ff31 	bl	8000730 <__NVIC_EnableIRQ>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff ffa2 	bl	8000828 <SysTick_Config>
 80008e4:	4603      	mov	r3, r0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b087      	sub	sp, #28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008fe:	e14e      	b.n	8000b9e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	2101      	movs	r1, #1
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	fa01 f303 	lsl.w	r3, r1, r3
 800090c:	4013      	ands	r3, r2
 800090e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2b00      	cmp	r3, #0
 8000914:	f000 8140 	beq.w	8000b98 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f003 0303 	and.w	r3, r3, #3
 8000920:	2b01      	cmp	r3, #1
 8000922:	d005      	beq.n	8000930 <HAL_GPIO_Init+0x40>
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f003 0303 	and.w	r3, r3, #3
 800092c:	2b02      	cmp	r3, #2
 800092e:	d130      	bne.n	8000992 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	2203      	movs	r2, #3
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	43db      	mvns	r3, r3
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	4013      	ands	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	68da      	ldr	r2, [r3, #12]
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	4313      	orrs	r3, r2
 8000958:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000966:	2201      	movs	r2, #1
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43db      	mvns	r3, r3
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	4013      	ands	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	091b      	lsrs	r3, r3, #4
 800097c:	f003 0201 	and.w	r2, r3, #1
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	4313      	orrs	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f003 0303 	and.w	r3, r3, #3
 800099a:	2b03      	cmp	r3, #3
 800099c:	d017      	beq.n	80009ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	2203      	movs	r2, #3
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	43db      	mvns	r3, r3
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	4013      	ands	r3, r2
 80009b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	689a      	ldr	r2, [r3, #8]
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f003 0303 	and.w	r3, r3, #3
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d123      	bne.n	8000a22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	08da      	lsrs	r2, r3, #3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	3208      	adds	r2, #8
 80009e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	220f      	movs	r2, #15
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	691a      	ldr	r2, [r3, #16]
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	f003 0307 	and.w	r3, r3, #7
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	08da      	lsrs	r2, r3, #3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3208      	adds	r2, #8
 8000a1c:	6939      	ldr	r1, [r7, #16]
 8000a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43db      	mvns	r3, r3
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	4013      	ands	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f003 0203 	and.w	r2, r3, #3
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	f000 809a 	beq.w	8000b98 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a64:	4b55      	ldr	r3, [pc, #340]	; (8000bbc <HAL_GPIO_Init+0x2cc>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a54      	ldr	r2, [pc, #336]	; (8000bbc <HAL_GPIO_Init+0x2cc>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b52      	ldr	r3, [pc, #328]	; (8000bbc <HAL_GPIO_Init+0x2cc>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a7c:	4a50      	ldr	r2, [pc, #320]	; (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	089b      	lsrs	r3, r3, #2
 8000a82:	3302      	adds	r3, #2
 8000a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	f003 0303 	and.w	r3, r3, #3
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	220f      	movs	r2, #15
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000aa6:	d013      	beq.n	8000ad0 <HAL_GPIO_Init+0x1e0>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a46      	ldr	r2, [pc, #280]	; (8000bc4 <HAL_GPIO_Init+0x2d4>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d00d      	beq.n	8000acc <HAL_GPIO_Init+0x1dc>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a45      	ldr	r2, [pc, #276]	; (8000bc8 <HAL_GPIO_Init+0x2d8>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d007      	beq.n	8000ac8 <HAL_GPIO_Init+0x1d8>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a44      	ldr	r2, [pc, #272]	; (8000bcc <HAL_GPIO_Init+0x2dc>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d101      	bne.n	8000ac4 <HAL_GPIO_Init+0x1d4>
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	e006      	b.n	8000ad2 <HAL_GPIO_Init+0x1e2>
 8000ac4:	2305      	movs	r3, #5
 8000ac6:	e004      	b.n	8000ad2 <HAL_GPIO_Init+0x1e2>
 8000ac8:	2302      	movs	r3, #2
 8000aca:	e002      	b.n	8000ad2 <HAL_GPIO_Init+0x1e2>
 8000acc:	2301      	movs	r3, #1
 8000ace:	e000      	b.n	8000ad2 <HAL_GPIO_Init+0x1e2>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	697a      	ldr	r2, [r7, #20]
 8000ad4:	f002 0203 	and.w	r2, r2, #3
 8000ad8:	0092      	lsls	r2, r2, #2
 8000ada:	4093      	lsls	r3, r2
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ae2:	4937      	ldr	r1, [pc, #220]	; (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	089b      	lsrs	r3, r3, #2
 8000ae8:	3302      	adds	r3, #2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000af0:	4b37      	ldr	r3, [pc, #220]	; (8000bd0 <HAL_GPIO_Init+0x2e0>)
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	43db      	mvns	r3, r3
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4013      	ands	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d003      	beq.n	8000b14 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b14:	4a2e      	ldr	r2, [pc, #184]	; (8000bd0 <HAL_GPIO_Init+0x2e0>)
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b1a:	4b2d      	ldr	r3, [pc, #180]	; (8000bd0 <HAL_GPIO_Init+0x2e0>)
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	43db      	mvns	r3, r3
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	4013      	ands	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b3e:	4a24      	ldr	r2, [pc, #144]	; (8000bd0 <HAL_GPIO_Init+0x2e0>)
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <HAL_GPIO_Init+0x2e0>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d003      	beq.n	8000b68 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b68:	4a19      	ldr	r2, [pc, #100]	; (8000bd0 <HAL_GPIO_Init+0x2e0>)
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <HAL_GPIO_Init+0x2e0>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	43db      	mvns	r3, r3
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d003      	beq.n	8000b92 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b92:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <HAL_GPIO_Init+0x2e0>)
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	f47f aea9 	bne.w	8000900 <HAL_GPIO_Init+0x10>
  }
}
 8000bae:	bf00      	nop
 8000bb0:	bf00      	nop
 8000bb2:	371c      	adds	r7, #28
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40010000 	.word	0x40010000
 8000bc4:	48000400 	.word	0x48000400
 8000bc8:	48000800 	.word	0x48000800
 8000bcc:	48000c00 	.word	0x48000c00
 8000bd0:	40010400 	.word	0x40010400

08000bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	807b      	strh	r3, [r7, #2]
 8000be0:	4613      	mov	r3, r2
 8000be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000be4:	787b      	ldrb	r3, [r7, #1]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d003      	beq.n	8000bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bea:	887a      	ldrh	r2, [r7, #2]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bf0:	e002      	b.n	8000bf8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bf2:	887a      	ldrh	r2, [r7, #2]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c06:	b08b      	sub	sp, #44	; 0x2c
 8000c08:	af06      	add	r7, sp, #24
 8000c0a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d101      	bne.n	8000c16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e0c4      	b.n	8000da0 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d106      	bne.n	8000c30 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2200      	movs	r2, #0
 8000c26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f007 fd2c 	bl	8008688 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2203      	movs	r2, #3
 8000c34:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f003 fc5b 	bl	80044f8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c42:	2300      	movs	r3, #0
 8000c44:	73fb      	strb	r3, [r7, #15]
 8000c46:	e040      	b.n	8000cca <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	1c5a      	adds	r2, r3, #1
 8000c4e:	4613      	mov	r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	4413      	add	r3, r2
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	440b      	add	r3, r1
 8000c58:	3301      	adds	r3, #1
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	6879      	ldr	r1, [r7, #4]
 8000c62:	1c5a      	adds	r2, r3, #1
 8000c64:	4613      	mov	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	4413      	add	r3, r2
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	440b      	add	r3, r1
 8000c6e:	7bfa      	ldrb	r2, [r7, #15]
 8000c70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	6879      	ldr	r1, [r7, #4]
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	4613      	mov	r3, r2
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	4413      	add	r3, r2
 8000c7e:	00db      	lsls	r3, r3, #3
 8000c80:	440b      	add	r3, r1
 8000c82:	3303      	adds	r3, #3
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c88:	7bfa      	ldrb	r2, [r7, #15]
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	4413      	add	r3, r2
 8000c92:	00db      	lsls	r3, r3, #3
 8000c94:	440b      	add	r3, r1
 8000c96:	3338      	adds	r3, #56	; 0x38
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c9c:	7bfa      	ldrb	r2, [r7, #15]
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4413      	add	r3, r2
 8000ca6:	00db      	lsls	r3, r3, #3
 8000ca8:	440b      	add	r3, r1
 8000caa:	333c      	adds	r3, #60	; 0x3c
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000cb0:	7bfa      	ldrb	r2, [r7, #15]
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	4413      	add	r3, r2
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	440b      	add	r3, r1
 8000cbe:	3340      	adds	r3, #64	; 0x40
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	73fb      	strb	r3, [r7, #15]
 8000cca:	7bfa      	ldrb	r2, [r7, #15]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d3b9      	bcc.n	8000c48 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	73fb      	strb	r3, [r7, #15]
 8000cd8:	e044      	b.n	8000d64 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000cda:	7bfa      	ldrb	r2, [r7, #15]
 8000cdc:	6879      	ldr	r1, [r7, #4]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000cf0:	7bfa      	ldrb	r2, [r7, #15]
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	440b      	add	r3, r1
 8000cfe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d02:	7bfa      	ldrb	r2, [r7, #15]
 8000d04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d06:	7bfa      	ldrb	r2, [r7, #15]
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	440b      	add	r3, r1
 8000d14:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d1c:	7bfa      	ldrb	r2, [r7, #15]
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	4613      	mov	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	440b      	add	r3, r1
 8000d2a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d32:	7bfa      	ldrb	r2, [r7, #15]
 8000d34:	6879      	ldr	r1, [r7, #4]
 8000d36:	4613      	mov	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	440b      	add	r3, r1
 8000d40:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d48:	7bfa      	ldrb	r2, [r7, #15]
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	440b      	add	r3, r1
 8000d56:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	3301      	adds	r3, #1
 8000d62:	73fb      	strb	r3, [r7, #15]
 8000d64:	7bfa      	ldrb	r2, [r7, #15]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d3b5      	bcc.n	8000cda <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	687e      	ldr	r6, [r7, #4]
 8000d76:	466d      	mov	r5, sp
 8000d78:	f106 0410 	add.w	r4, r6, #16
 8000d7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d80:	6823      	ldr	r3, [r4, #0]
 8000d82:	602b      	str	r3, [r5, #0]
 8000d84:	1d33      	adds	r3, r6, #4
 8000d86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d88:	6838      	ldr	r0, [r7, #0]
 8000d8a:	f003 fbd0 	bl	800452e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000da8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d101      	bne.n	8000dbe <HAL_PCD_Start+0x16>
 8000dba:	2302      	movs	r3, #2
 8000dbc:	e016      	b.n	8000dec <HAL_PCD_Start+0x44>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f003 fb7d 	bl	80044ca <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f007 fed0 	bl	8008b78 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f005 fe3c 	bl	8006a5a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f005 fe35 	bl	8006a70 <USB_ReadInterrupts>
 8000e06:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f000 fab2 	bl	800137c <PCD_EP_ISR_Handler>

    return;
 8000e18:	e0bd      	b.n	8000f96 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d013      	beq.n	8000e4c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e36:	b292      	uxth	r2, r2
 8000e38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f007 fc9e 	bl	800877e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000e42:	2100      	movs	r1, #0
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f000 f8a9 	bl	8000f9c <HAL_PCD_SetAddress>

    return;
 8000e4a:	e0a4      	b.n	8000f96 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d00c      	beq.n	8000e70 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000e68:	b292      	uxth	r2, r2
 8000e6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000e6e:	e092      	b.n	8000f96 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d00c      	beq.n	8000e94 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e8c:	b292      	uxth	r2, r2
 8000e8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000e92:	e080      	b.n	8000f96 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d027      	beq.n	8000eee <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f022 0204 	bic.w	r2, r2, #4
 8000eb0:	b292      	uxth	r2, r2
 8000eb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f022 0208 	bic.w	r2, r2, #8
 8000ec8:	b292      	uxth	r2, r2
 8000eca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f007 fc8e 	bl	80087f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ee6:	b292      	uxth	r2, r2
 8000ee8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000eec:	e053      	b.n	8000f96 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d027      	beq.n	8000f48 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f042 0208 	orr.w	r2, r2, #8
 8000f0a:	b292      	uxth	r2, r2
 8000f0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f22:	b292      	uxth	r2, r2
 8000f24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f042 0204 	orr.w	r2, r2, #4
 8000f3a:	b292      	uxth	r2, r2
 8000f3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f007 fc3b 	bl	80087bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000f46:	e026      	b.n	8000f96 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d00f      	beq.n	8000f72 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f64:	b292      	uxth	r2, r2
 8000f66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f007 fbf9 	bl	8008762 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000f70:	e011      	b.n	8000f96 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00c      	beq.n	8000f96 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000f94:	bf00      	nop
  }
}
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d101      	bne.n	8000fb6 <HAL_PCD_SetAddress+0x1a>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e013      	b.n	8000fde <HAL_PCD_SetAddress+0x42>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	78fa      	ldrb	r2, [r7, #3]
 8000fc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	78fa      	ldrb	r2, [r7, #3]
 8000fcc:	4611      	mov	r1, r2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f005 fd2f 	bl	8006a32 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b084      	sub	sp, #16
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	4608      	mov	r0, r1
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	70fb      	strb	r3, [r7, #3]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	803b      	strh	r3, [r7, #0]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001004:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001008:	2b00      	cmp	r3, #0
 800100a:	da0e      	bge.n	800102a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800100c:	78fb      	ldrb	r3, [r7, #3]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2201      	movs	r2, #1
 8001026:	705a      	strb	r2, [r3, #1]
 8001028:	e00e      	b.n	8001048 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800102a:	78fb      	ldrb	r3, [r7, #3]
 800102c:	f003 0207 	and.w	r2, r3, #7
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	4413      	add	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2200      	movs	r2, #0
 8001046:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001048:	78fb      	ldrb	r3, [r7, #3]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	b2da      	uxtb	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001054:	883a      	ldrh	r2, [r7, #0]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	78ba      	ldrb	r2, [r7, #2]
 800105e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001060:	78bb      	ldrb	r3, [r7, #2]
 8001062:	2b02      	cmp	r3, #2
 8001064:	d102      	bne.n	800106c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2200      	movs	r2, #0
 800106a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001072:	2b01      	cmp	r3, #1
 8001074:	d101      	bne.n	800107a <HAL_PCD_EP_Open+0x94>
 8001076:	2302      	movs	r3, #2
 8001078:	e00e      	b.n	8001098 <HAL_PCD_EP_Open+0xb2>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2201      	movs	r2, #1
 800107e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68f9      	ldr	r1, [r7, #12]
 8001088:	4618      	mov	r0, r3
 800108a:	f003 fa71 	bl	8004570 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001096:	7afb      	ldrb	r3, [r7, #11]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80010ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	da0e      	bge.n	80010d2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010b4:	78fb      	ldrb	r3, [r7, #3]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	4413      	add	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2201      	movs	r2, #1
 80010ce:	705a      	strb	r2, [r3, #1]
 80010d0:	e00e      	b.n	80010f0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010d2:	78fb      	ldrb	r3, [r7, #3]
 80010d4:	f003 0207 	and.w	r2, r3, #7
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2200      	movs	r2, #0
 80010ee:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001102:	2b01      	cmp	r3, #1
 8001104:	d101      	bne.n	800110a <HAL_PCD_EP_Close+0x6a>
 8001106:	2302      	movs	r3, #2
 8001108:	e00e      	b.n	8001128 <HAL_PCD_EP_Close+0x88>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2201      	movs	r2, #1
 800110e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68f9      	ldr	r1, [r7, #12]
 8001118:	4618      	mov	r0, r3
 800111a:	f003 fded 	bl	8004cf8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	460b      	mov	r3, r1
 800113e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001140:	7afb      	ldrb	r3, [r7, #11]
 8001142:	f003 0207 	and.w	r2, r3, #7
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	4413      	add	r3, r2
 8001156:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	2200      	movs	r2, #0
 800116e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001170:	7afb      	ldrb	r3, [r7, #11]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	b2da      	uxtb	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6979      	ldr	r1, [r7, #20]
 8001182:	4618      	mov	r0, r3
 8001184:	f003 ffa5 	bl	80050d2 <USB_EPStartXfer>

  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	460b      	mov	r3, r1
 800119c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800119e:	78fb      	ldrb	r3, [r7, #3]
 80011a0:	f003 0207 	and.w	r2, r3, #7
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	440b      	add	r3, r1
 80011b0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80011b4:	681b      	ldr	r3, [r3, #0]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	60f8      	str	r0, [r7, #12]
 80011ca:	607a      	str	r2, [r7, #4]
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	460b      	mov	r3, r1
 80011d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011d2:	7afb      	ldrb	r3, [r7, #11]
 80011d4:	f003 0307 	and.w	r3, r3, #7
 80011d8:	1c5a      	adds	r2, r3, #1
 80011da:	4613      	mov	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	4413      	add	r3, r2
 80011e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	2201      	movs	r2, #1
 80011f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	2200      	movs	r2, #0
 8001206:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	2201      	movs	r2, #1
 800120c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800120e:	7afb      	ldrb	r3, [r7, #11]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	b2da      	uxtb	r2, r3
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6979      	ldr	r1, [r7, #20]
 8001220:	4618      	mov	r0, r3
 8001222:	f003 ff56 	bl	80050d2 <USB_EPStartXfer>

  return HAL_OK;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	f003 0207 	and.w	r2, r3, #7
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	429a      	cmp	r2, r3
 8001248:	d901      	bls.n	800124e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e03e      	b.n	80012cc <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800124e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001252:	2b00      	cmp	r3, #0
 8001254:	da0e      	bge.n	8001274 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001256:	78fb      	ldrb	r3, [r7, #3]
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	1c5a      	adds	r2, r3, #1
 800125e:	4613      	mov	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2201      	movs	r2, #1
 8001270:	705a      	strb	r2, [r3, #1]
 8001272:	e00c      	b.n	800128e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001274:	78fa      	ldrb	r2, [r7, #3]
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2200      	movs	r2, #0
 800128c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2201      	movs	r2, #1
 8001292:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	b2da      	uxtb	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d101      	bne.n	80012ae <HAL_PCD_EP_SetStall+0x7e>
 80012aa:	2302      	movs	r3, #2
 80012ac:	e00e      	b.n	80012cc <HAL_PCD_EP_SetStall+0x9c>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2201      	movs	r2, #1
 80012b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68f9      	ldr	r1, [r7, #12]
 80012bc:	4618      	mov	r0, r3
 80012be:	f005 fab9 	bl	8006834 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	f003 020f 	and.w	r2, r3, #15
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d901      	bls.n	80012f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e040      	b.n	8001374 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80012f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	da0e      	bge.n	8001318 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012fa:	78fb      	ldrb	r3, [r7, #3]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	1c5a      	adds	r2, r3, #1
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2201      	movs	r2, #1
 8001314:	705a      	strb	r2, [r3, #1]
 8001316:	e00e      	b.n	8001336 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	f003 0207 	and.w	r2, r3, #7
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2200      	movs	r2, #0
 8001334:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800133c:	78fb      	ldrb	r3, [r7, #3]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	b2da      	uxtb	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800134e:	2b01      	cmp	r3, #1
 8001350:	d101      	bne.n	8001356 <HAL_PCD_EP_ClrStall+0x82>
 8001352:	2302      	movs	r3, #2
 8001354:	e00e      	b.n	8001374 <HAL_PCD_EP_ClrStall+0xa0>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68f9      	ldr	r1, [r7, #12]
 8001364:	4618      	mov	r0, r3
 8001366:	f005 fab6 	bl	80068d6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b096      	sub	sp, #88	; 0x58
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001384:	e3b1      	b.n	8001aea <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800138e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001392:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001396:	b2db      	uxtb	r3, r3
 8001398:	f003 030f 	and.w	r3, r3, #15
 800139c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80013a0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f040 8173 	bne.w	8001690 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80013aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80013ae:	f003 0310 	and.w	r3, r3, #16
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d150      	bne.n	8001458 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80013c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013c6:	81fb      	strh	r3, [r7, #14]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	89fb      	ldrh	r3, [r7, #14]
 80013ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80013d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3328      	adds	r3, #40	; 0x28
 80013de:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	461a      	mov	r2, r3
 80013ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	4413      	add	r3, r2
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	6812      	ldr	r2, [r2, #0]
 80013f8:	4413      	add	r3, r2
 80013fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001406:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800140a:	695a      	ldr	r2, [r3, #20]
 800140c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	441a      	add	r2, r3
 8001412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001414:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001416:	2100      	movs	r1, #0
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f007 f988 	bl	800872e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 835f 	beq.w	8001aea <PCD_EP_ISR_Handler+0x76e>
 800142c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	2b00      	cmp	r3, #0
 8001432:	f040 835a 	bne.w	8001aea <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800143c:	b2db      	uxtb	r3, r3
 800143e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001442:	b2da      	uxtb	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	b292      	uxth	r2, r2
 800144a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001456:	e348      	b.n	8001aea <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800145e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800146a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800146e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001472:	2b00      	cmp	r3, #0
 8001474:	d032      	beq.n	80014dc <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800147e:	b29b      	uxth	r3, r3
 8001480:	461a      	mov	r2, r3
 8001482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	4413      	add	r3, r2
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	4413      	add	r3, r2
 8001490:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800149a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800149c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80014a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014aa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80014ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ae:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	f005 fb2f 	bl	8006b14 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	b29a      	uxth	r2, r3
 80014be:	f640 738f 	movw	r3, #3983	; 0xf8f
 80014c2:	4013      	ands	r3, r2
 80014c4:	823b      	strh	r3, [r7, #16]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	8a3a      	ldrh	r2, [r7, #16]
 80014cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014d0:	b292      	uxth	r2, r2
 80014d2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f007 f8fd 	bl	80086d4 <HAL_PCD_SetupStageCallback>
 80014da:	e306      	b.n	8001aea <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80014dc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f280 8302 	bge.w	8001aea <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	f640 738f 	movw	r3, #3983	; 0xf8f
 80014f2:	4013      	ands	r3, r2
 80014f4:	83fb      	strh	r3, [r7, #30]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	8bfa      	ldrh	r2, [r7, #30]
 80014fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001500:	b292      	uxth	r2, r2
 8001502:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800150c:	b29b      	uxth	r3, r3
 800150e:	461a      	mov	r2, r3
 8001510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	4413      	add	r3, r2
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	6812      	ldr	r2, [r2, #0]
 800151c:	4413      	add	r3, r2
 800151e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800152a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800152c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d019      	beq.n	8001568 <PCD_EP_ISR_Handler+0x1ec>
 8001534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d015      	beq.n	8001568 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6818      	ldr	r0, [r3, #0]
 8001540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001542:	6959      	ldr	r1, [r3, #20]
 8001544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001546:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800154a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800154c:	b29b      	uxth	r3, r3
 800154e:	f005 fae1 	bl	8006b14 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001554:	695a      	ldr	r2, [r3, #20]
 8001556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	441a      	add	r2, r3
 800155c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800155e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001560:	2100      	movs	r1, #0
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f007 f8c8 	bl	80086f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001572:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800157a:	2b00      	cmp	r3, #0
 800157c:	f040 82b5 	bne.w	8001aea <PCD_EP_ISR_Handler+0x76e>
 8001580:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001584:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001588:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800158c:	f000 82ad 	beq.w	8001aea <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	61bb      	str	r3, [r7, #24]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800159e:	b29b      	uxth	r3, r3
 80015a0:	461a      	mov	r2, r3
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	4413      	add	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	801a      	strh	r2, [r3, #0]
 80015c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	2b3e      	cmp	r3, #62	; 0x3e
 80015c6:	d91d      	bls.n	8001604 <PCD_EP_ISR_Handler+0x288>
 80015c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	095b      	lsrs	r3, r3, #5
 80015ce:	647b      	str	r3, [r7, #68]	; 0x44
 80015d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	f003 031f 	and.w	r3, r3, #31
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d102      	bne.n	80015e2 <PCD_EP_ISR_Handler+0x266>
 80015dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015de:	3b01      	subs	r3, #1
 80015e0:	647b      	str	r3, [r7, #68]	; 0x44
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	029b      	lsls	r3, r3, #10
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	4313      	orrs	r3, r2
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	801a      	strh	r2, [r3, #0]
 8001602:	e026      	b.n	8001652 <PCD_EP_ISR_Handler+0x2d6>
 8001604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d10a      	bne.n	8001622 <PCD_EP_ISR_Handler+0x2a6>
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	b29b      	uxth	r3, r3
 8001612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800161a:	b29a      	uxth	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	801a      	strh	r2, [r3, #0]
 8001620:	e017      	b.n	8001652 <PCD_EP_ISR_Handler+0x2d6>
 8001622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	085b      	lsrs	r3, r3, #1
 8001628:	647b      	str	r3, [r7, #68]	; 0x44
 800162a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d002      	beq.n	800163c <PCD_EP_ISR_Handler+0x2c0>
 8001636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001638:	3301      	adds	r3, #1
 800163a:	647b      	str	r3, [r7, #68]	; 0x44
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	b29a      	uxth	r2, r3
 8001642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001644:	b29b      	uxth	r3, r3
 8001646:	029b      	lsls	r3, r3, #10
 8001648:	b29b      	uxth	r3, r3
 800164a:	4313      	orrs	r3, r2
 800164c:	b29a      	uxth	r2, r3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	b29b      	uxth	r3, r3
 800165a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800165e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001662:	827b      	strh	r3, [r7, #18]
 8001664:	8a7b      	ldrh	r3, [r7, #18]
 8001666:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800166a:	827b      	strh	r3, [r7, #18]
 800166c:	8a7b      	ldrh	r3, [r7, #18]
 800166e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001672:	827b      	strh	r3, [r7, #18]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	8a7b      	ldrh	r3, [r7, #18]
 800167a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800167e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800168a:	b29b      	uxth	r3, r3
 800168c:	8013      	strh	r3, [r2, #0]
 800168e:	e22c      	b.n	8001aea <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80016a4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f280 80f6 	bge.w	800189a <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	b29a      	uxth	r2, r3
 80016c0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016c4:	4013      	ands	r3, r2
 80016c6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80016dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016e0:	b292      	uxth	r2, r2
 80016e2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80016e4:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	4413      	add	r3, r2
 80016f8:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80016fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016fc:	7b1b      	ldrb	r3, [r3, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d123      	bne.n	800174a <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800170a:	b29b      	uxth	r3, r3
 800170c:	461a      	mov	r2, r3
 800170e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	4413      	add	r3, r2
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	4413      	add	r3, r2
 800171c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001726:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800172a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 808e 	beq.w	8001850 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800173a:	6959      	ldr	r1, [r3, #20]
 800173c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800173e:	88da      	ldrh	r2, [r3, #6]
 8001740:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001744:	f005 f9e6 	bl	8006b14 <USB_ReadPMA>
 8001748:	e082      	b.n	8001850 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800174a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800174c:	78db      	ldrb	r3, [r3, #3]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d10a      	bne.n	8001768 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001752:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001756:	461a      	mov	r2, r3
 8001758:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 f9d3 	bl	8001b06 <HAL_PCD_EP_DB_Receive>
 8001760:	4603      	mov	r3, r0
 8001762:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001766:	e073      	b.n	8001850 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	b29b      	uxth	r3, r3
 800177a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800177e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001782:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	461a      	mov	r2, r3
 800178c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	441a      	add	r2, r3
 8001794:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800179c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80017a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d022      	beq.n	800180c <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	4413      	add	r3, r2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017ea:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80017ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d02c      	beq.n	8001850 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017fc:	6959      	ldr	r1, [r3, #20]
 80017fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001800:	891a      	ldrh	r2, [r3, #8]
 8001802:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001806:	f005 f985 	bl	8006b14 <USB_ReadPMA>
 800180a:	e021      	b.n	8001850 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001814:	b29b      	uxth	r3, r3
 8001816:	461a      	mov	r2, r3
 8001818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	4413      	add	r3, r2
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	4413      	add	r3, r2
 8001826:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001830:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001834:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001838:	2b00      	cmp	r3, #0
 800183a:	d009      	beq.n	8001850 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6818      	ldr	r0, [r3, #0]
 8001840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001842:	6959      	ldr	r1, [r3, #20]
 8001844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001846:	895a      	ldrh	r2, [r3, #10]
 8001848:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800184c:	f005 f962 	bl	8006b14 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001852:	69da      	ldr	r2, [r3, #28]
 8001854:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001858:	441a      	add	r2, r3
 800185a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800185c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800185e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001866:	441a      	add	r2, r3
 8001868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800186a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800186c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <PCD_EP_ISR_Handler+0x504>
 8001874:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	429a      	cmp	r2, r3
 800187e:	d206      	bcs.n	800188e <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f006 ff36 	bl	80086f8 <HAL_PCD_DataOutStageCallback>
 800188c:	e005      	b.n	800189a <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001894:	4618      	mov	r0, r3
 8001896:	f003 fc1c 	bl	80050d2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800189a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800189e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 8121 	beq.w	8001aea <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 80018a8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80018d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	441a      	add	r2, r3
 80018e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80018ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80018f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018fa:	78db      	ldrb	r3, [r3, #3]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	f040 80a2 	bne.w	8001a46 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8001902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800190a:	7b1b      	ldrb	r3, [r3, #12]
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 8093 	beq.w	8001a38 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001912:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800191a:	2b00      	cmp	r3, #0
 800191c:	d046      	beq.n	80019ac <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800191e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001920:	785b      	ldrb	r3, [r3, #1]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d126      	bne.n	8001974 <PCD_EP_ISR_Handler+0x5f8>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001934:	b29b      	uxth	r3, r3
 8001936:	461a      	mov	r2, r3
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	4413      	add	r3, r2
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
 800193e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	00da      	lsls	r2, r3, #3
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	4413      	add	r3, r2
 8001948:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800194c:	623b      	str	r3, [r7, #32]
 800194e:	6a3b      	ldr	r3, [r7, #32]
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	b29b      	uxth	r3, r3
 8001954:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001958:	b29a      	uxth	r2, r3
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	801a      	strh	r2, [r3, #0]
 800195e:	6a3b      	ldr	r3, [r7, #32]
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	b29b      	uxth	r3, r3
 8001964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800196c:	b29a      	uxth	r2, r3
 800196e:	6a3b      	ldr	r3, [r7, #32]
 8001970:	801a      	strh	r2, [r3, #0]
 8001972:	e061      	b.n	8001a38 <PCD_EP_ISR_Handler+0x6bc>
 8001974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001976:	785b      	ldrb	r3, [r3, #1]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d15d      	bne.n	8001a38 <PCD_EP_ISR_Handler+0x6bc>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800198a:	b29b      	uxth	r3, r3
 800198c:	461a      	mov	r2, r3
 800198e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001990:	4413      	add	r3, r2
 8001992:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	00da      	lsls	r2, r3, #3
 800199a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800199c:	4413      	add	r3, r2
 800199e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80019a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a6:	2200      	movs	r2, #0
 80019a8:	801a      	strh	r2, [r3, #0]
 80019aa:	e045      	b.n	8001a38 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b4:	785b      	ldrb	r3, [r3, #1]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d126      	bne.n	8001a08 <PCD_EP_ISR_Handler+0x68c>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ce:	4413      	add	r3, r2
 80019d0:	637b      	str	r3, [r7, #52]	; 0x34
 80019d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	00da      	lsls	r2, r3, #3
 80019d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019da:	4413      	add	r3, r2
 80019dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80019e0:	633b      	str	r3, [r7, #48]	; 0x30
 80019e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f0:	801a      	strh	r2, [r3, #0]
 80019f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a04:	801a      	strh	r2, [r3, #0]
 8001a06:	e017      	b.n	8001a38 <PCD_EP_ISR_Handler+0x6bc>
 8001a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a0a:	785b      	ldrb	r3, [r3, #1]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d113      	bne.n	8001a38 <PCD_EP_ISR_Handler+0x6bc>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a1e:	4413      	add	r3, r2
 8001a20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	00da      	lsls	r2, r3, #3
 8001a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a30:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a34:	2200      	movs	r2, #0
 8001a36:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f006 fe75 	bl	800872e <HAL_PCD_DataInStageCallback>
 8001a44:	e051      	b.n	8001aea <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001a46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d144      	bne.n	8001adc <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4413      	add	r3, r2
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a76:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a7c:	699a      	ldr	r2, [r3, #24]
 8001a7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d907      	bls.n	8001a96 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8001a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a88:	699a      	ldr	r2, [r3, #24]
 8001a8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001a8e:	1ad2      	subs	r2, r2, r3
 8001a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a92:	619a      	str	r2, [r3, #24]
 8001a94:	e002      	b.n	8001a9c <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8001a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d106      	bne.n	8001ab2 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f006 fe3f 	bl	800872e <HAL_PCD_DataInStageCallback>
 8001ab0:	e01b      	b.n	8001aea <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab4:	695a      	ldr	r2, [r3, #20]
 8001ab6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001aba:	441a      	add	r2, r3
 8001abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001abe:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001ac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac2:	69da      	ldr	r2, [r3, #28]
 8001ac4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ac8:	441a      	add	r2, r3
 8001aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001acc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f003 fafc 	bl	80050d2 <USB_EPStartXfer>
 8001ada:	e006      	b.n	8001aea <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001adc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f917 	bl	8001d18 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	b21b      	sxth	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f6ff ac45 	blt.w	8001386 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3758      	adds	r7, #88	; 0x58
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b088      	sub	sp, #32
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	60f8      	str	r0, [r7, #12]
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	4613      	mov	r3, r2
 8001b12:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b14:	88fb      	ldrh	r3, [r7, #6]
 8001b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d07c      	beq.n	8001c18 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	461a      	mov	r2, r3
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4413      	add	r3, r2
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	4413      	add	r3, r2
 8001b38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b42:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	699a      	ldr	r2, [r3, #24]
 8001b48:	8b7b      	ldrh	r3, [r7, #26]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d306      	bcc.n	8001b5c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	699a      	ldr	r2, [r3, #24]
 8001b52:	8b7b      	ldrh	r3, [r7, #26]
 8001b54:	1ad2      	subs	r2, r2, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	619a      	str	r2, [r3, #24]
 8001b5a:	e002      	b.n	8001b62 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d123      	bne.n	8001bb2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b84:	833b      	strh	r3, [r7, #24]
 8001b86:	8b3b      	ldrh	r3, [r7, #24]
 8001b88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b8c:	833b      	strh	r3, [r7, #24]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	441a      	add	r2, r3
 8001b9c:	8b3b      	ldrh	r3, [r7, #24]
 8001b9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001bb2:	88fb      	ldrh	r3, [r7, #6]
 8001bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d01f      	beq.n	8001bfc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bd6:	82fb      	strh	r3, [r7, #22]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	441a      	add	r2, r3
 8001be6:	8afb      	ldrh	r3, [r7, #22]
 8001be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bf4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001bfc:	8b7b      	ldrh	r3, [r7, #26]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 8085 	beq.w	8001d0e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6818      	ldr	r0, [r3, #0]
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	6959      	ldr	r1, [r3, #20]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	891a      	ldrh	r2, [r3, #8]
 8001c10:	8b7b      	ldrh	r3, [r7, #26]
 8001c12:	f004 ff7f 	bl	8006b14 <USB_ReadPMA>
 8001c16:	e07a      	b.n	8001d0e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	461a      	mov	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	4413      	add	r3, r2
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	4413      	add	r3, r2
 8001c32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c3c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	699a      	ldr	r2, [r3, #24]
 8001c42:	8b7b      	ldrh	r3, [r7, #26]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d306      	bcc.n	8001c56 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	699a      	ldr	r2, [r3, #24]
 8001c4c:	8b7b      	ldrh	r3, [r7, #26]
 8001c4e:	1ad2      	subs	r2, r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	619a      	str	r2, [r3, #24]
 8001c54:	e002      	b.n	8001c5c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d123      	bne.n	8001cac <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c7e:	83fb      	strh	r3, [r7, #30]
 8001c80:	8bfb      	ldrh	r3, [r7, #30]
 8001c82:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c86:	83fb      	strh	r3, [r7, #30]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	441a      	add	r2, r3
 8001c96:	8bfb      	ldrh	r3, [r7, #30]
 8001c98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d11f      	bne.n	8001cf6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cd0:	83bb      	strh	r3, [r7, #28]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	441a      	add	r2, r3
 8001ce0:	8bbb      	ldrh	r3, [r7, #28]
 8001ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001cf6:	8b7b      	ldrh	r3, [r7, #26]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	6959      	ldr	r1, [r3, #20]
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	895a      	ldrh	r2, [r3, #10]
 8001d08:	8b7b      	ldrh	r3, [r7, #26]
 8001d0a:	f004 ff03 	bl	8006b14 <USB_ReadPMA>
    }
  }

  return count;
 8001d0e:	8b7b      	ldrh	r3, [r7, #26]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3720      	adds	r7, #32
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b0a4      	sub	sp, #144	; 0x90
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	4613      	mov	r3, r2
 8001d24:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 81db 	beq.w	80020e8 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4413      	add	r3, r2
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d56:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	699a      	ldr	r2, [r3, #24]
 8001d5e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d907      	bls.n	8001d76 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	699a      	ldr	r2, [r3, #24]
 8001d6a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001d6e:	1ad2      	subs	r2, r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	619a      	str	r2, [r3, #24]
 8001d74:	e002      	b.n	8001d7c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f040 80b9 	bne.w	8001ef8 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	785b      	ldrb	r3, [r3, #1]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d126      	bne.n	8001ddc <HAL_PCD_EP_DB_Transmit+0xc4>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da2:	4413      	add	r3, r2
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	00da      	lsls	r2, r3, #3
 8001dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dae:	4413      	add	r3, r2
 8001db0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc4:	801a      	strh	r2, [r3, #0]
 8001dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd8:	801a      	strh	r2, [r3, #0]
 8001dda:	e01a      	b.n	8001e12 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	785b      	ldrb	r3, [r3, #1]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d116      	bne.n	8001e12 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	637b      	str	r3, [r7, #52]	; 0x34
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df8:	4413      	add	r3, r2
 8001dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	00da      	lsls	r2, r3, #3
 8001e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e04:	4413      	add	r3, r2
 8001e06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e0a:	633b      	str	r3, [r7, #48]	; 0x30
 8001e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0e:	2200      	movs	r2, #0
 8001e10:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	785b      	ldrb	r3, [r3, #1]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d126      	bne.n	8001e6e <HAL_PCD_EP_DB_Transmit+0x156>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	461a      	mov	r2, r3
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	4413      	add	r3, r2
 8001e36:	61fb      	str	r3, [r7, #28]
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	00da      	lsls	r2, r3, #3
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	4413      	add	r3, r2
 8001e42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e46:	61bb      	str	r3, [r7, #24]
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	801a      	strh	r2, [r3, #0]
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	801a      	strh	r2, [r3, #0]
 8001e6c:	e017      	b.n	8001e9e <HAL_PCD_EP_DB_Transmit+0x186>
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	785b      	ldrb	r3, [r3, #1]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d113      	bne.n	8001e9e <HAL_PCD_EP_DB_Transmit+0x186>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	461a      	mov	r2, r3
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	4413      	add	r3, r2
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	00da      	lsls	r2, r3, #3
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	4413      	add	r3, r2
 8001e92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e96:	623b      	str	r3, [r7, #32]
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f006 fc42 	bl	800872e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001eaa:	88fb      	ldrh	r3, [r7, #6]
 8001eac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 82fa 	beq.w	80024aa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ed0:	82fb      	strh	r3, [r7, #22]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	441a      	add	r2, r3
 8001ee0:	8afb      	ldrh	r3, [r7, #22]
 8001ee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001eea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	8013      	strh	r3, [r2, #0]
 8001ef6:	e2d8      	b.n	80024aa <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ef8:	88fb      	ldrh	r3, [r7, #6]
 8001efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d021      	beq.n	8001f46 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f1c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	441a      	add	r2, r3
 8001f2e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	f040 82ac 	bne.w	80024aa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f5a:	441a      	add	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	69da      	ldr	r2, [r3, #28]
 8001f64:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f68:	441a      	add	r2, r3
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	6a1a      	ldr	r2, [r3, #32]
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d30b      	bcc.n	8001f92 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	6a1a      	ldr	r2, [r3, #32]
 8001f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f8a:	1ad2      	subs	r2, r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	621a      	str	r2, [r3, #32]
 8001f90:	e017      	b.n	8001fc2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d108      	bne.n	8001fac <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8001f9a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001faa:	e00a      	b.n	8001fc2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	785b      	ldrb	r3, [r3, #1]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d165      	bne.n	8002096 <HAL_PCD_EP_DB_Transmit+0x37e>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	461a      	mov	r2, r3
 8001fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fde:	4413      	add	r3, r2
 8001fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	00da      	lsls	r2, r3, #3
 8001fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fea:	4413      	add	r3, r2
 8001fec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ff0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002000:	801a      	strh	r2, [r3, #0]
 8002002:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002006:	2b3e      	cmp	r3, #62	; 0x3e
 8002008:	d91d      	bls.n	8002046 <HAL_PCD_EP_DB_Transmit+0x32e>
 800200a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800200e:	095b      	lsrs	r3, r3, #5
 8002010:	64bb      	str	r3, [r7, #72]	; 0x48
 8002012:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	2b00      	cmp	r3, #0
 800201c:	d102      	bne.n	8002024 <HAL_PCD_EP_DB_Transmit+0x30c>
 800201e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002020:	3b01      	subs	r3, #1
 8002022:	64bb      	str	r3, [r7, #72]	; 0x48
 8002024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	b29a      	uxth	r2, r3
 800202a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800202c:	b29b      	uxth	r3, r3
 800202e:	029b      	lsls	r3, r3, #10
 8002030:	b29b      	uxth	r3, r3
 8002032:	4313      	orrs	r3, r2
 8002034:	b29b      	uxth	r3, r3
 8002036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800203a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800203e:	b29a      	uxth	r2, r3
 8002040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002042:	801a      	strh	r2, [r3, #0]
 8002044:	e044      	b.n	80020d0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002046:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10a      	bne.n	8002064 <HAL_PCD_EP_DB_Transmit+0x34c>
 800204e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	b29b      	uxth	r3, r3
 8002054:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002058:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800205c:	b29a      	uxth	r2, r3
 800205e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002060:	801a      	strh	r2, [r3, #0]
 8002062:	e035      	b.n	80020d0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002064:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002068:	085b      	lsrs	r3, r3, #1
 800206a:	64bb      	str	r3, [r7, #72]	; 0x48
 800206c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <HAL_PCD_EP_DB_Transmit+0x366>
 8002078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800207a:	3301      	adds	r3, #1
 800207c:	64bb      	str	r3, [r7, #72]	; 0x48
 800207e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	b29a      	uxth	r2, r3
 8002084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002086:	b29b      	uxth	r3, r3
 8002088:	029b      	lsls	r3, r3, #10
 800208a:	b29b      	uxth	r3, r3
 800208c:	4313      	orrs	r3, r2
 800208e:	b29a      	uxth	r2, r3
 8002090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002092:	801a      	strh	r2, [r3, #0]
 8002094:	e01c      	b.n	80020d0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	785b      	ldrb	r3, [r3, #1]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d118      	bne.n	80020d0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	647b      	str	r3, [r7, #68]	; 0x44
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020b2:	4413      	add	r3, r2
 80020b4:	647b      	str	r3, [r7, #68]	; 0x44
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	00da      	lsls	r2, r3, #3
 80020bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020be:	4413      	add	r3, r2
 80020c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020c4:	643b      	str	r3, [r7, #64]	; 0x40
 80020c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020ce:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	6959      	ldr	r1, [r3, #20]
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	891a      	ldrh	r2, [r3, #8]
 80020dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	f004 fcd5 	bl	8006a90 <USB_WritePMA>
 80020e6:	e1e0      	b.n	80024aa <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	461a      	mov	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	4413      	add	r3, r2
 8002102:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800210c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	699a      	ldr	r2, [r3, #24]
 8002114:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002118:	429a      	cmp	r2, r3
 800211a:	d307      	bcc.n	800212c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	699a      	ldr	r2, [r3, #24]
 8002120:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002124:	1ad2      	subs	r2, r2, r3
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	619a      	str	r2, [r3, #24]
 800212a:	e002      	b.n	8002132 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2200      	movs	r2, #0
 8002130:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	2b00      	cmp	r3, #0
 8002138:	f040 80c0 	bne.w	80022bc <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	785b      	ldrb	r3, [r3, #1]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d126      	bne.n	8002192 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	67fb      	str	r3, [r7, #124]	; 0x7c
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002152:	b29b      	uxth	r3, r3
 8002154:	461a      	mov	r2, r3
 8002156:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002158:	4413      	add	r3, r2
 800215a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	00da      	lsls	r2, r3, #3
 8002162:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002164:	4413      	add	r3, r2
 8002166:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800216a:	67bb      	str	r3, [r7, #120]	; 0x78
 800216c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	b29b      	uxth	r3, r3
 8002172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002176:	b29a      	uxth	r2, r3
 8002178:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800217a:	801a      	strh	r2, [r3, #0]
 800217c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	b29b      	uxth	r3, r3
 8002182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800218a:	b29a      	uxth	r2, r3
 800218c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800218e:	801a      	strh	r2, [r3, #0]
 8002190:	e01a      	b.n	80021c8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	785b      	ldrb	r3, [r3, #1]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d116      	bne.n	80021c8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	667b      	str	r3, [r7, #100]	; 0x64
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021ae:	4413      	add	r3, r2
 80021b0:	667b      	str	r3, [r7, #100]	; 0x64
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	00da      	lsls	r2, r3, #3
 80021b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021ba:	4413      	add	r3, r2
 80021bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80021c0:	663b      	str	r3, [r7, #96]	; 0x60
 80021c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021c4:	2200      	movs	r2, #0
 80021c6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	677b      	str	r3, [r7, #116]	; 0x74
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	785b      	ldrb	r3, [r3, #1]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d12b      	bne.n	800222e <HAL_PCD_EP_DB_Transmit+0x516>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ea:	4413      	add	r3, r2
 80021ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	00da      	lsls	r2, r3, #3
 80021f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021f6:	4413      	add	r3, r2
 80021f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002200:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800220c:	b29a      	uxth	r2, r3
 800220e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002212:	801a      	strh	r2, [r3, #0]
 8002214:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002224:	b29a      	uxth	r2, r3
 8002226:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800222a:	801a      	strh	r2, [r3, #0]
 800222c:	e017      	b.n	800225e <HAL_PCD_EP_DB_Transmit+0x546>
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	785b      	ldrb	r3, [r3, #1]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d113      	bne.n	800225e <HAL_PCD_EP_DB_Transmit+0x546>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800223e:	b29b      	uxth	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002244:	4413      	add	r3, r2
 8002246:	677b      	str	r3, [r7, #116]	; 0x74
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	00da      	lsls	r2, r3, #3
 800224e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002250:	4413      	add	r3, r2
 8002252:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002256:	673b      	str	r3, [r7, #112]	; 0x70
 8002258:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800225a:	2200      	movs	r2, #0
 800225c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	4619      	mov	r1, r3
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f006 fa62 	bl	800872e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002270:	2b00      	cmp	r3, #0
 8002272:	f040 811a 	bne.w	80024aa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	b29b      	uxth	r3, r3
 8002288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800228c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002290:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	441a      	add	r2, r3
 80022a2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80022a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	8013      	strh	r3, [r2, #0]
 80022ba:	e0f6      	b.n	80024aa <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d121      	bne.n	800230a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	441a      	add	r2, r3
 80022f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002306:	b29b      	uxth	r3, r3
 8002308:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002310:	2b01      	cmp	r3, #1
 8002312:	f040 80ca 	bne.w	80024aa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	695a      	ldr	r2, [r3, #20]
 800231a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800231e:	441a      	add	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	69da      	ldr	r2, [r3, #28]
 8002328:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800232c:	441a      	add	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	6a1a      	ldr	r2, [r3, #32]
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	429a      	cmp	r2, r3
 800233c:	d30b      	bcc.n	8002356 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	6a1a      	ldr	r2, [r3, #32]
 800234a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800234e:	1ad2      	subs	r2, r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	621a      	str	r2, [r3, #32]
 8002354:	e017      	b.n	8002386 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d108      	bne.n	8002370 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800235e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002362:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800236e:	e00a      	b.n	8002386 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2200      	movs	r2, #0
 800237c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	657b      	str	r3, [r7, #84]	; 0x54
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	785b      	ldrb	r3, [r3, #1]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d165      	bne.n	8002460 <HAL_PCD_EP_DB_Transmit+0x748>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	65fb      	str	r3, [r7, #92]	; 0x5c
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023a8:	4413      	add	r3, r2
 80023aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	00da      	lsls	r2, r3, #3
 80023b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023b4:	4413      	add	r3, r2
 80023b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80023ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80023bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023ca:	801a      	strh	r2, [r3, #0]
 80023cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023d0:	2b3e      	cmp	r3, #62	; 0x3e
 80023d2:	d91d      	bls.n	8002410 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80023d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023d8:	095b      	lsrs	r3, r3, #5
 80023da:	66bb      	str	r3, [r7, #104]	; 0x68
 80023dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d102      	bne.n	80023ee <HAL_PCD_EP_DB_Transmit+0x6d6>
 80023e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023ea:	3b01      	subs	r3, #1
 80023ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80023ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	029b      	lsls	r3, r3, #10
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	4313      	orrs	r3, r2
 80023fe:	b29b      	uxth	r3, r3
 8002400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002408:	b29a      	uxth	r2, r3
 800240a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800240c:	801a      	strh	r2, [r3, #0]
 800240e:	e041      	b.n	8002494 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002410:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10a      	bne.n	800242e <HAL_PCD_EP_DB_Transmit+0x716>
 8002418:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	b29b      	uxth	r3, r3
 800241e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002426:	b29a      	uxth	r2, r3
 8002428:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800242a:	801a      	strh	r2, [r3, #0]
 800242c:	e032      	b.n	8002494 <HAL_PCD_EP_DB_Transmit+0x77c>
 800242e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002432:	085b      	lsrs	r3, r3, #1
 8002434:	66bb      	str	r3, [r7, #104]	; 0x68
 8002436:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_PCD_EP_DB_Transmit+0x730>
 8002442:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002444:	3301      	adds	r3, #1
 8002446:	66bb      	str	r3, [r7, #104]	; 0x68
 8002448:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	b29a      	uxth	r2, r3
 800244e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002450:	b29b      	uxth	r3, r3
 8002452:	029b      	lsls	r3, r3, #10
 8002454:	b29b      	uxth	r3, r3
 8002456:	4313      	orrs	r3, r2
 8002458:	b29a      	uxth	r2, r3
 800245a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800245c:	801a      	strh	r2, [r3, #0]
 800245e:	e019      	b.n	8002494 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	785b      	ldrb	r3, [r3, #1]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d115      	bne.n	8002494 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002470:	b29b      	uxth	r3, r3
 8002472:	461a      	mov	r2, r3
 8002474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002476:	4413      	add	r3, r2
 8002478:	657b      	str	r3, [r7, #84]	; 0x54
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	00da      	lsls	r2, r3, #3
 8002480:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002482:	4413      	add	r3, r2
 8002484:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002488:	653b      	str	r3, [r7, #80]	; 0x50
 800248a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800248e:	b29a      	uxth	r2, r3
 8002490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002492:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6818      	ldr	r0, [r3, #0]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	6959      	ldr	r1, [r3, #20]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	895a      	ldrh	r2, [r3, #10]
 80024a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	f004 faf3 	bl	8006a90 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024c4:	82bb      	strh	r3, [r7, #20]
 80024c6:	8abb      	ldrh	r3, [r7, #20]
 80024c8:	f083 0310 	eor.w	r3, r3, #16
 80024cc:	82bb      	strh	r3, [r7, #20]
 80024ce:	8abb      	ldrh	r3, [r7, #20]
 80024d0:	f083 0320 	eor.w	r3, r3, #32
 80024d4:	82bb      	strh	r3, [r7, #20]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	441a      	add	r2, r3
 80024e4:	8abb      	ldrh	r3, [r7, #20]
 80024e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3790      	adds	r7, #144	; 0x90
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002504:	b480      	push	{r7}
 8002506:	b087      	sub	sp, #28
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	607b      	str	r3, [r7, #4]
 800250e:	460b      	mov	r3, r1
 8002510:	817b      	strh	r3, [r7, #10]
 8002512:	4613      	mov	r3, r2
 8002514:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002516:	897b      	ldrh	r3, [r7, #10]
 8002518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002522:	897b      	ldrh	r3, [r7, #10]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4413      	add	r3, r2
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	e009      	b.n	800254e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800253a:	897a      	ldrh	r2, [r7, #10]
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4413      	add	r3, r2
 800254c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800254e:	893b      	ldrh	r3, [r7, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d107      	bne.n	8002564 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2200      	movs	r2, #0
 8002558:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	b29a      	uxth	r2, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	80da      	strh	r2, [r3, #6]
 8002562:	e00b      	b.n	800257c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	2201      	movs	r2, #1
 8002568:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	b29a      	uxth	r2, r3
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	0c1b      	lsrs	r3, r3, #16
 8002576:	b29a      	uxth	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	371c      	adds	r7, #28
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
	...

0800258c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002592:	af00      	add	r7, sp, #0
 8002594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002598:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800259c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800259e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d102      	bne.n	80025b2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	f001 b823 	b.w	80035f8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 817d 	beq.w	80028c2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025c8:	4bbc      	ldr	r3, [pc, #752]	; (80028bc <HAL_RCC_OscConfig+0x330>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d00c      	beq.n	80025ee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025d4:	4bb9      	ldr	r3, [pc, #740]	; (80028bc <HAL_RCC_OscConfig+0x330>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d15c      	bne.n	800269a <HAL_RCC_OscConfig+0x10e>
 80025e0:	4bb6      	ldr	r3, [pc, #728]	; (80028bc <HAL_RCC_OscConfig+0x330>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ec:	d155      	bne.n	800269a <HAL_RCC_OscConfig+0x10e>
 80025ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025f2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002602:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	b2db      	uxtb	r3, r3
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b01      	cmp	r3, #1
 8002618:	d102      	bne.n	8002620 <HAL_RCC_OscConfig+0x94>
 800261a:	4ba8      	ldr	r3, [pc, #672]	; (80028bc <HAL_RCC_OscConfig+0x330>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	e015      	b.n	800264c <HAL_RCC_OscConfig+0xc0>
 8002620:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002624:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002634:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002638:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800263c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002648:	4b9c      	ldr	r3, [pc, #624]	; (80028bc <HAL_RCC_OscConfig+0x330>)
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002650:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002654:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002658:	fa92 f2a2 	rbit	r2, r2
 800265c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002660:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002664:	fab2 f282 	clz	r2, r2
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	f042 0220 	orr.w	r2, r2, #32
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	f002 021f 	and.w	r2, r2, #31
 8002674:	2101      	movs	r1, #1
 8002676:	fa01 f202 	lsl.w	r2, r1, r2
 800267a:	4013      	ands	r3, r2
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 811f 	beq.w	80028c0 <HAL_RCC_OscConfig+0x334>
 8002682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002686:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	f040 8116 	bne.w	80028c0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	f000 bfaf 	b.w	80035f8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800269a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026aa:	d106      	bne.n	80026ba <HAL_RCC_OscConfig+0x12e>
 80026ac:	4b83      	ldr	r3, [pc, #524]	; (80028bc <HAL_RCC_OscConfig+0x330>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a82      	ldr	r2, [pc, #520]	; (80028bc <HAL_RCC_OscConfig+0x330>)
 80026b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	e036      	b.n	8002728 <HAL_RCC_OscConfig+0x19c>
 80026ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x158>
 80026ca:	4b7c      	ldr	r3, [pc, #496]	; (80028bc <HAL_RCC_OscConfig+0x330>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a7b      	ldr	r2, [pc, #492]	; (80028bc <HAL_RCC_OscConfig+0x330>)
 80026d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	4b79      	ldr	r3, [pc, #484]	; (80028bc <HAL_RCC_OscConfig+0x330>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a78      	ldr	r2, [pc, #480]	; (80028bc <HAL_RCC_OscConfig+0x330>)
 80026dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e021      	b.n	8002728 <HAL_RCC_OscConfig+0x19c>
 80026e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026f4:	d10c      	bne.n	8002710 <HAL_RCC_OscConfig+0x184>
 80026f6:	4b71      	ldr	r3, [pc, #452]	; (80028bc <HAL_RCC_OscConfig+0x330>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a70      	ldr	r2, [pc, #448]	; (80028bc <HAL_RCC_OscConfig+0x330>)
 80026fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	4b6e      	ldr	r3, [pc, #440]	; (80028bc <HAL_RCC_OscConfig+0x330>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a6d      	ldr	r2, [pc, #436]	; (80028bc <HAL_RCC_OscConfig+0x330>)
 8002708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	e00b      	b.n	8002728 <HAL_RCC_OscConfig+0x19c>
 8002710:	4b6a      	ldr	r3, [pc, #424]	; (80028bc <HAL_RCC_OscConfig+0x330>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a69      	ldr	r2, [pc, #420]	; (80028bc <HAL_RCC_OscConfig+0x330>)
 8002716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	4b67      	ldr	r3, [pc, #412]	; (80028bc <HAL_RCC_OscConfig+0x330>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a66      	ldr	r2, [pc, #408]	; (80028bc <HAL_RCC_OscConfig+0x330>)
 8002722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002726:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002728:	4b64      	ldr	r3, [pc, #400]	; (80028bc <HAL_RCC_OscConfig+0x330>)
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	f023 020f 	bic.w	r2, r3, #15
 8002730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002734:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	495f      	ldr	r1, [pc, #380]	; (80028bc <HAL_RCC_OscConfig+0x330>)
 800273e:	4313      	orrs	r3, r2
 8002740:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002746:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d059      	beq.n	8002806 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002752:	f7fd ff8b 	bl	800066c <HAL_GetTick>
 8002756:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275a:	e00a      	b.n	8002772 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800275c:	f7fd ff86 	bl	800066c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b64      	cmp	r3, #100	; 0x64
 800276a:	d902      	bls.n	8002772 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	f000 bf43 	b.w	80035f8 <HAL_RCC_OscConfig+0x106c>
 8002772:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002776:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800277e:	fa93 f3a3 	rbit	r3, r3
 8002782:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002786:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278a:	fab3 f383 	clz	r3, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	095b      	lsrs	r3, r3, #5
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d102      	bne.n	80027a4 <HAL_RCC_OscConfig+0x218>
 800279e:	4b47      	ldr	r3, [pc, #284]	; (80028bc <HAL_RCC_OscConfig+0x330>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	e015      	b.n	80027d0 <HAL_RCC_OscConfig+0x244>
 80027a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027a8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80027b0:	fa93 f3a3 	rbit	r3, r3
 80027b4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80027b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027bc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80027c0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80027cc:	4b3b      	ldr	r3, [pc, #236]	; (80028bc <HAL_RCC_OscConfig+0x330>)
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027d4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80027d8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80027dc:	fa92 f2a2 	rbit	r2, r2
 80027e0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80027e4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80027e8:	fab2 f282 	clz	r2, r2
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	f042 0220 	orr.w	r2, r2, #32
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	f002 021f 	and.w	r2, r2, #31
 80027f8:	2101      	movs	r1, #1
 80027fa:	fa01 f202 	lsl.w	r2, r1, r2
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0ab      	beq.n	800275c <HAL_RCC_OscConfig+0x1d0>
 8002804:	e05d      	b.n	80028c2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002806:	f7fd ff31 	bl	800066c <HAL_GetTick>
 800280a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280e:	e00a      	b.n	8002826 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002810:	f7fd ff2c 	bl	800066c <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b64      	cmp	r3, #100	; 0x64
 800281e:	d902      	bls.n	8002826 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	f000 bee9 	b.w	80035f8 <HAL_RCC_OscConfig+0x106c>
 8002826:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800282a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002832:	fa93 f3a3 	rbit	r3, r3
 8002836:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800283a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	095b      	lsrs	r3, r3, #5
 8002846:	b2db      	uxtb	r3, r3
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b01      	cmp	r3, #1
 8002850:	d102      	bne.n	8002858 <HAL_RCC_OscConfig+0x2cc>
 8002852:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <HAL_RCC_OscConfig+0x330>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	e015      	b.n	8002884 <HAL_RCC_OscConfig+0x2f8>
 8002858:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800285c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002860:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002864:	fa93 f3a3 	rbit	r3, r3
 8002868:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800286c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002870:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002874:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002878:	fa93 f3a3 	rbit	r3, r3
 800287c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002880:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <HAL_RCC_OscConfig+0x330>)
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002888:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800288c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002890:	fa92 f2a2 	rbit	r2, r2
 8002894:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002898:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800289c:	fab2 f282 	clz	r2, r2
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	f042 0220 	orr.w	r2, r2, #32
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	f002 021f 	and.w	r2, r2, #31
 80028ac:	2101      	movs	r1, #1
 80028ae:	fa01 f202 	lsl.w	r2, r1, r2
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1ab      	bne.n	8002810 <HAL_RCC_OscConfig+0x284>
 80028b8:	e003      	b.n	80028c2 <HAL_RCC_OscConfig+0x336>
 80028ba:	bf00      	nop
 80028bc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 817d 	beq.w	8002bd2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028d8:	4ba6      	ldr	r3, [pc, #664]	; (8002b74 <HAL_RCC_OscConfig+0x5e8>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 030c 	and.w	r3, r3, #12
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00b      	beq.n	80028fc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028e4:	4ba3      	ldr	r3, [pc, #652]	; (8002b74 <HAL_RCC_OscConfig+0x5e8>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 030c 	and.w	r3, r3, #12
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	d172      	bne.n	80029d6 <HAL_RCC_OscConfig+0x44a>
 80028f0:	4ba0      	ldr	r3, [pc, #640]	; (8002b74 <HAL_RCC_OscConfig+0x5e8>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d16c      	bne.n	80029d6 <HAL_RCC_OscConfig+0x44a>
 80028fc:	2302      	movs	r3, #2
 80028fe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800290e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002912:	fab3 f383 	clz	r3, r3
 8002916:	b2db      	uxtb	r3, r3
 8002918:	095b      	lsrs	r3, r3, #5
 800291a:	b2db      	uxtb	r3, r3
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b01      	cmp	r3, #1
 8002924:	d102      	bne.n	800292c <HAL_RCC_OscConfig+0x3a0>
 8002926:	4b93      	ldr	r3, [pc, #588]	; (8002b74 <HAL_RCC_OscConfig+0x5e8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	e013      	b.n	8002954 <HAL_RCC_OscConfig+0x3c8>
 800292c:	2302      	movs	r3, #2
 800292e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002932:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002936:	fa93 f3a3 	rbit	r3, r3
 800293a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800293e:	2302      	movs	r3, #2
 8002940:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002944:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002948:	fa93 f3a3 	rbit	r3, r3
 800294c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002950:	4b88      	ldr	r3, [pc, #544]	; (8002b74 <HAL_RCC_OscConfig+0x5e8>)
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	2202      	movs	r2, #2
 8002956:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800295a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800295e:	fa92 f2a2 	rbit	r2, r2
 8002962:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002966:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800296a:	fab2 f282 	clz	r2, r2
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	f042 0220 	orr.w	r2, r2, #32
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	f002 021f 	and.w	r2, r2, #31
 800297a:	2101      	movs	r1, #1
 800297c:	fa01 f202 	lsl.w	r2, r1, r2
 8002980:	4013      	ands	r3, r2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00a      	beq.n	800299c <HAL_RCC_OscConfig+0x410>
 8002986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d002      	beq.n	800299c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	f000 be2e 	b.w	80035f8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299c:	4b75      	ldr	r3, [pc, #468]	; (8002b74 <HAL_RCC_OscConfig+0x5e8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	21f8      	movs	r1, #248	; 0xf8
 80029b2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80029ba:	fa91 f1a1 	rbit	r1, r1
 80029be:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80029c2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80029c6:	fab1 f181 	clz	r1, r1
 80029ca:	b2c9      	uxtb	r1, r1
 80029cc:	408b      	lsls	r3, r1
 80029ce:	4969      	ldr	r1, [pc, #420]	; (8002b74 <HAL_RCC_OscConfig+0x5e8>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029d4:	e0fd      	b.n	8002bd2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8088 	beq.w	8002af8 <HAL_RCC_OscConfig+0x56c>
 80029e8:	2301      	movs	r3, #1
 80029ea:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80029f2:	fa93 f3a3 	rbit	r3, r3
 80029f6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80029fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	461a      	mov	r2, r3
 8002a10:	2301      	movs	r3, #1
 8002a12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fd fe2a 	bl	800066c <HAL_GetTick>
 8002a18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1c:	e00a      	b.n	8002a34 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a1e:	f7fd fe25 	bl	800066c <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d902      	bls.n	8002a34 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	f000 bde2 	b.w	80035f8 <HAL_RCC_OscConfig+0x106c>
 8002a34:	2302      	movs	r3, #2
 8002a36:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002a3e:	fa93 f3a3 	rbit	r3, r3
 8002a42:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002a46:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4a:	fab3 f383 	clz	r3, r3
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	095b      	lsrs	r3, r3, #5
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d102      	bne.n	8002a64 <HAL_RCC_OscConfig+0x4d8>
 8002a5e:	4b45      	ldr	r3, [pc, #276]	; (8002b74 <HAL_RCC_OscConfig+0x5e8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	e013      	b.n	8002a8c <HAL_RCC_OscConfig+0x500>
 8002a64:	2302      	movs	r3, #2
 8002a66:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a76:	2302      	movs	r3, #2
 8002a78:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a7c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002a80:	fa93 f3a3 	rbit	r3, r3
 8002a84:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002a88:	4b3a      	ldr	r3, [pc, #232]	; (8002b74 <HAL_RCC_OscConfig+0x5e8>)
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002a92:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002a96:	fa92 f2a2 	rbit	r2, r2
 8002a9a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002a9e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002aa2:	fab2 f282 	clz	r2, r2
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	f042 0220 	orr.w	r2, r2, #32
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	f002 021f 	and.w	r2, r2, #31
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0af      	beq.n	8002a1e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abe:	4b2d      	ldr	r3, [pc, #180]	; (8002b74 <HAL_RCC_OscConfig+0x5e8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	21f8      	movs	r1, #248	; 0xf8
 8002ad4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002adc:	fa91 f1a1 	rbit	r1, r1
 8002ae0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002ae4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002ae8:	fab1 f181 	clz	r1, r1
 8002aec:	b2c9      	uxtb	r1, r1
 8002aee:	408b      	lsls	r3, r1
 8002af0:	4920      	ldr	r1, [pc, #128]	; (8002b74 <HAL_RCC_OscConfig+0x5e8>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]
 8002af6:	e06c      	b.n	8002bd2 <HAL_RCC_OscConfig+0x646>
 8002af8:	2301      	movs	r3, #1
 8002afa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002b02:	fa93 f3a3 	rbit	r3, r3
 8002b06:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002b0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b0e:	fab3 f383 	clz	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	461a      	mov	r2, r3
 8002b20:	2300      	movs	r3, #0
 8002b22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b24:	f7fd fda2 	bl	800066c <HAL_GetTick>
 8002b28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b2e:	f7fd fd9d 	bl	800066c <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d902      	bls.n	8002b44 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	f000 bd5a 	b.w	80035f8 <HAL_RCC_OscConfig+0x106c>
 8002b44:	2302      	movs	r3, #2
 8002b46:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002b56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	095b      	lsrs	r3, r3, #5
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d104      	bne.n	8002b78 <HAL_RCC_OscConfig+0x5ec>
 8002b6e:	4b01      	ldr	r3, [pc, #4]	; (8002b74 <HAL_RCC_OscConfig+0x5e8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	e015      	b.n	8002ba0 <HAL_RCC_OscConfig+0x614>
 8002b74:	40021000 	.word	0x40021000
 8002b78:	2302      	movs	r3, #2
 8002b7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002b82:	fa93 f3a3 	rbit	r3, r3
 8002b86:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002b90:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b94:	fa93 f3a3 	rbit	r3, r3
 8002b98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002b9c:	4bc8      	ldr	r3, [pc, #800]	; (8002ec0 <HAL_RCC_OscConfig+0x934>)
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002ba6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002baa:	fa92 f2a2 	rbit	r2, r2
 8002bae:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002bb2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002bb6:	fab2 f282 	clz	r2, r2
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	f042 0220 	orr.w	r2, r2, #32
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	f002 021f 	and.w	r2, r2, #31
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1ad      	bne.n	8002b2e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 8110 	beq.w	8002e08 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d079      	beq.n	8002cec <HAL_RCC_OscConfig+0x760>
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c02:	fa93 f3a3 	rbit	r3, r3
 8002c06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c0e:	fab3 f383 	clz	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	461a      	mov	r2, r3
 8002c16:	4bab      	ldr	r3, [pc, #684]	; (8002ec4 <HAL_RCC_OscConfig+0x938>)
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2301      	movs	r3, #1
 8002c20:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c22:	f7fd fd23 	bl	800066c <HAL_GetTick>
 8002c26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2a:	e00a      	b.n	8002c42 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c2c:	f7fd fd1e 	bl	800066c <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d902      	bls.n	8002c42 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	f000 bcdb 	b.w	80035f8 <HAL_RCC_OscConfig+0x106c>
 8002c42:	2302      	movs	r3, #2
 8002c44:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c4c:	fa93 f3a3 	rbit	r3, r3
 8002c50:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c58:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c64:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	fa93 f2a3 	rbit	r2, r3
 8002c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c80:	2202      	movs	r2, #2
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	fa93 f2a3 	rbit	r2, r3
 8002c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c9a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9c:	4b88      	ldr	r3, [pc, #544]	; (8002ec0 <HAL_RCC_OscConfig+0x934>)
 8002c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ca8:	2102      	movs	r1, #2
 8002caa:	6019      	str	r1, [r3, #0]
 8002cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	fa93 f1a3 	rbit	r1, r3
 8002cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002cc2:	6019      	str	r1, [r3, #0]
  return result;
 8002cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	f003 031f 	and.w	r3, r3, #31
 8002cde:	2101      	movs	r1, #1
 8002ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0a0      	beq.n	8002c2c <HAL_RCC_OscConfig+0x6a0>
 8002cea:	e08d      	b.n	8002e08 <HAL_RCC_OscConfig+0x87c>
 8002cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	fa93 f2a3 	rbit	r2, r3
 8002d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d0e:	601a      	str	r2, [r3, #0]
  return result;
 8002d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d14:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d18:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	4b68      	ldr	r3, [pc, #416]	; (8002ec4 <HAL_RCC_OscConfig+0x938>)
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	461a      	mov	r2, r3
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d2e:	f7fd fc9d 	bl	800066c <HAL_GetTick>
 8002d32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d36:	e00a      	b.n	8002d4e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d38:	f7fd fc98 	bl	800066c <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d902      	bls.n	8002d4e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	f000 bc55 	b.w	80035f8 <HAL_RCC_OscConfig+0x106c>
 8002d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d52:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d56:	2202      	movs	r2, #2
 8002d58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	fa93 f2a3 	rbit	r2, r3
 8002d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d76:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d82:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	fa93 f2a3 	rbit	r2, r3
 8002d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d9e:	2202      	movs	r2, #2
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	fa93 f2a3 	rbit	r2, r3
 8002db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002db8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dba:	4b41      	ldr	r3, [pc, #260]	; (8002ec0 <HAL_RCC_OscConfig+0x934>)
 8002dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002dc6:	2102      	movs	r1, #2
 8002dc8:	6019      	str	r1, [r3, #0]
 8002dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	fa93 f1a3 	rbit	r1, r3
 8002dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ddc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002de0:	6019      	str	r1, [r3, #0]
  return result;
 8002de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	fab3 f383 	clz	r3, r3
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	f003 031f 	and.w	r3, r3, #31
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d197      	bne.n	8002d38 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 81a1 	beq.w	8003160 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e24:	4b26      	ldr	r3, [pc, #152]	; (8002ec0 <HAL_RCC_OscConfig+0x934>)
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d116      	bne.n	8002e5e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e30:	4b23      	ldr	r3, [pc, #140]	; (8002ec0 <HAL_RCC_OscConfig+0x934>)
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	4a22      	ldr	r2, [pc, #136]	; (8002ec0 <HAL_RCC_OscConfig+0x934>)
 8002e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	61d3      	str	r3, [r2, #28]
 8002e3c:	4b20      	ldr	r3, [pc, #128]	; (8002ec0 <HAL_RCC_OscConfig+0x934>)
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e48:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e52:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002e56:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ec8 <HAL_RCC_OscConfig+0x93c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d11a      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e6a:	4b17      	ldr	r3, [pc, #92]	; (8002ec8 <HAL_RCC_OscConfig+0x93c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a16      	ldr	r2, [pc, #88]	; (8002ec8 <HAL_RCC_OscConfig+0x93c>)
 8002e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e74:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e76:	f7fd fbf9 	bl	800066c <HAL_GetTick>
 8002e7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7e:	e009      	b.n	8002e94 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e80:	f7fd fbf4 	bl	800066c <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b64      	cmp	r3, #100	; 0x64
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e3b1      	b.n	80035f8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e94:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <HAL_RCC_OscConfig+0x93c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0ef      	beq.n	8002e80 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d10d      	bne.n	8002ecc <HAL_RCC_OscConfig+0x940>
 8002eb0:	4b03      	ldr	r3, [pc, #12]	; (8002ec0 <HAL_RCC_OscConfig+0x934>)
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	4a02      	ldr	r2, [pc, #8]	; (8002ec0 <HAL_RCC_OscConfig+0x934>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	6213      	str	r3, [r2, #32]
 8002ebc:	e03c      	b.n	8002f38 <HAL_RCC_OscConfig+0x9ac>
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	10908120 	.word	0x10908120
 8002ec8:	40007000 	.word	0x40007000
 8002ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10c      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x96a>
 8002edc:	4bc1      	ldr	r3, [pc, #772]	; (80031e4 <HAL_RCC_OscConfig+0xc58>)
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	4ac0      	ldr	r2, [pc, #768]	; (80031e4 <HAL_RCC_OscConfig+0xc58>)
 8002ee2:	f023 0301 	bic.w	r3, r3, #1
 8002ee6:	6213      	str	r3, [r2, #32]
 8002ee8:	4bbe      	ldr	r3, [pc, #760]	; (80031e4 <HAL_RCC_OscConfig+0xc58>)
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	4abd      	ldr	r2, [pc, #756]	; (80031e4 <HAL_RCC_OscConfig+0xc58>)
 8002eee:	f023 0304 	bic.w	r3, r3, #4
 8002ef2:	6213      	str	r3, [r2, #32]
 8002ef4:	e020      	b.n	8002f38 <HAL_RCC_OscConfig+0x9ac>
 8002ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	2b05      	cmp	r3, #5
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x994>
 8002f06:	4bb7      	ldr	r3, [pc, #732]	; (80031e4 <HAL_RCC_OscConfig+0xc58>)
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	4ab6      	ldr	r2, [pc, #728]	; (80031e4 <HAL_RCC_OscConfig+0xc58>)
 8002f0c:	f043 0304 	orr.w	r3, r3, #4
 8002f10:	6213      	str	r3, [r2, #32]
 8002f12:	4bb4      	ldr	r3, [pc, #720]	; (80031e4 <HAL_RCC_OscConfig+0xc58>)
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	4ab3      	ldr	r2, [pc, #716]	; (80031e4 <HAL_RCC_OscConfig+0xc58>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	6213      	str	r3, [r2, #32]
 8002f1e:	e00b      	b.n	8002f38 <HAL_RCC_OscConfig+0x9ac>
 8002f20:	4bb0      	ldr	r3, [pc, #704]	; (80031e4 <HAL_RCC_OscConfig+0xc58>)
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	4aaf      	ldr	r2, [pc, #700]	; (80031e4 <HAL_RCC_OscConfig+0xc58>)
 8002f26:	f023 0301 	bic.w	r3, r3, #1
 8002f2a:	6213      	str	r3, [r2, #32]
 8002f2c:	4bad      	ldr	r3, [pc, #692]	; (80031e4 <HAL_RCC_OscConfig+0xc58>)
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	4aac      	ldr	r2, [pc, #688]	; (80031e4 <HAL_RCC_OscConfig+0xc58>)
 8002f32:	f023 0304 	bic.w	r3, r3, #4
 8002f36:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 8081 	beq.w	800304c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4a:	f7fd fb8f 	bl	800066c <HAL_GetTick>
 8002f4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f52:	e00b      	b.n	8002f6c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f54:	f7fd fb8a 	bl	800066c <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e345      	b.n	80035f8 <HAL_RCC_OscConfig+0x106c>
 8002f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f70:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f74:	2202      	movs	r2, #2
 8002f76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	fa93 f2a3 	rbit	r2, r3
 8002f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f94:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f98:	2202      	movs	r2, #2
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	fa93 f2a3 	rbit	r2, r3
 8002faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002fb2:	601a      	str	r2, [r3, #0]
  return result;
 8002fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002fbc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	095b      	lsrs	r3, r3, #5
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f043 0302 	orr.w	r3, r3, #2
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d102      	bne.n	8002fd8 <HAL_RCC_OscConfig+0xa4c>
 8002fd2:	4b84      	ldr	r3, [pc, #528]	; (80031e4 <HAL_RCC_OscConfig+0xc58>)
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	e013      	b.n	8003000 <HAL_RCC_OscConfig+0xa74>
 8002fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fdc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	fa93 f2a3 	rbit	r2, r3
 8002ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	4b79      	ldr	r3, [pc, #484]	; (80031e4 <HAL_RCC_OscConfig+0xc58>)
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003004:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003008:	2102      	movs	r1, #2
 800300a:	6011      	str	r1, [r2, #0]
 800300c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003010:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	fa92 f1a2 	rbit	r1, r2
 800301a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800301e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003022:	6011      	str	r1, [r2, #0]
  return result;
 8003024:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003028:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	fab2 f282 	clz	r2, r2
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	f002 021f 	and.w	r2, r2, #31
 800303e:	2101      	movs	r1, #1
 8003040:	fa01 f202 	lsl.w	r2, r1, r2
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d084      	beq.n	8002f54 <HAL_RCC_OscConfig+0x9c8>
 800304a:	e07f      	b.n	800314c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304c:	f7fd fb0e 	bl	800066c <HAL_GetTick>
 8003050:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003054:	e00b      	b.n	800306e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003056:	f7fd fb09 	bl	800066c <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	f241 3288 	movw	r2, #5000	; 0x1388
 8003066:	4293      	cmp	r3, r2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e2c4      	b.n	80035f8 <HAL_RCC_OscConfig+0x106c>
 800306e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003072:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003076:	2202      	movs	r2, #2
 8003078:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	fa93 f2a3 	rbit	r2, r3
 8003088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003096:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800309a:	2202      	movs	r2, #2
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	fa93 f2a3 	rbit	r2, r3
 80030ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80030b4:	601a      	str	r2, [r3, #0]
  return result;
 80030b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ba:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80030be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c0:	fab3 f383 	clz	r3, r3
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	095b      	lsrs	r3, r3, #5
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	f043 0302 	orr.w	r3, r3, #2
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d102      	bne.n	80030da <HAL_RCC_OscConfig+0xb4e>
 80030d4:	4b43      	ldr	r3, [pc, #268]	; (80031e4 <HAL_RCC_OscConfig+0xc58>)
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	e013      	b.n	8003102 <HAL_RCC_OscConfig+0xb76>
 80030da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030de:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80030e2:	2202      	movs	r2, #2
 80030e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	fa93 f2a3 	rbit	r2, r3
 80030f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	4b39      	ldr	r3, [pc, #228]	; (80031e4 <HAL_RCC_OscConfig+0xc58>)
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003106:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800310a:	2102      	movs	r1, #2
 800310c:	6011      	str	r1, [r2, #0]
 800310e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003112:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	fa92 f1a2 	rbit	r1, r2
 800311c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003120:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003124:	6011      	str	r1, [r2, #0]
  return result;
 8003126:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800312a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	fab2 f282 	clz	r2, r2
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	f002 021f 	and.w	r2, r2, #31
 8003140:	2101      	movs	r1, #1
 8003142:	fa01 f202 	lsl.w	r2, r1, r2
 8003146:	4013      	ands	r3, r2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d184      	bne.n	8003056 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800314c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003150:	2b01      	cmp	r3, #1
 8003152:	d105      	bne.n	8003160 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003154:	4b23      	ldr	r3, [pc, #140]	; (80031e4 <HAL_RCC_OscConfig+0xc58>)
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	4a22      	ldr	r2, [pc, #136]	; (80031e4 <HAL_RCC_OscConfig+0xc58>)
 800315a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800315e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003164:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 8242 	beq.w	80035f6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003172:	4b1c      	ldr	r3, [pc, #112]	; (80031e4 <HAL_RCC_OscConfig+0xc58>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b08      	cmp	r3, #8
 800317c:	f000 8213 	beq.w	80035a6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003184:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	2b02      	cmp	r3, #2
 800318e:	f040 8162 	bne.w	8003456 <HAL_RCC_OscConfig+0xeca>
 8003192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003196:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800319a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800319e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	fa93 f2a3 	rbit	r2, r3
 80031ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80031b6:	601a      	str	r2, [r3, #0]
  return result;
 80031b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031bc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80031c0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c2:	fab3 f383 	clz	r3, r3
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	461a      	mov	r2, r3
 80031d4:	2300      	movs	r3, #0
 80031d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d8:	f7fd fa48 	bl	800066c <HAL_GetTick>
 80031dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e0:	e00c      	b.n	80031fc <HAL_RCC_OscConfig+0xc70>
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e8:	f7fd fa40 	bl	800066c <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e1fd      	b.n	80035f8 <HAL_RCC_OscConfig+0x106c>
 80031fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003200:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003204:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003208:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	fa93 f2a3 	rbit	r2, r3
 8003218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003220:	601a      	str	r2, [r3, #0]
  return result;
 8003222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003226:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800322a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800322c:	fab3 f383 	clz	r3, r3
 8003230:	b2db      	uxtb	r3, r3
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	b2db      	uxtb	r3, r3
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	d102      	bne.n	8003246 <HAL_RCC_OscConfig+0xcba>
 8003240:	4bb0      	ldr	r3, [pc, #704]	; (8003504 <HAL_RCC_OscConfig+0xf78>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	e027      	b.n	8003296 <HAL_RCC_OscConfig+0xd0a>
 8003246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800324e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003252:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003258:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	fa93 f2a3 	rbit	r2, r3
 8003262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003266:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003270:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003274:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	fa93 f2a3 	rbit	r2, r3
 8003288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	4b9c      	ldr	r3, [pc, #624]	; (8003504 <HAL_RCC_OscConfig+0xf78>)
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800329a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800329e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032a2:	6011      	str	r1, [r2, #0]
 80032a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032a8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	fa92 f1a2 	rbit	r1, r2
 80032b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032b6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80032ba:	6011      	str	r1, [r2, #0]
  return result;
 80032bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032c0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80032c4:	6812      	ldr	r2, [r2, #0]
 80032c6:	fab2 f282 	clz	r2, r2
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	f042 0220 	orr.w	r2, r2, #32
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	f002 021f 	and.w	r2, r2, #31
 80032d6:	2101      	movs	r1, #1
 80032d8:	fa01 f202 	lsl.w	r2, r1, r2
 80032dc:	4013      	ands	r3, r2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d182      	bne.n	80031e8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032e2:	4b88      	ldr	r3, [pc, #544]	; (8003504 <HAL_RCC_OscConfig+0xf78>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80032f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	430b      	orrs	r3, r1
 8003304:	497f      	ldr	r1, [pc, #508]	; (8003504 <HAL_RCC_OscConfig+0xf78>)
 8003306:	4313      	orrs	r3, r2
 8003308:	604b      	str	r3, [r1, #4]
 800330a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003312:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003316:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	fa93 f2a3 	rbit	r2, r3
 8003326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800332e:	601a      	str	r2, [r3, #0]
  return result;
 8003330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003334:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003338:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800333a:	fab3 f383 	clz	r3, r3
 800333e:	b2db      	uxtb	r3, r3
 8003340:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003344:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	461a      	mov	r2, r3
 800334c:	2301      	movs	r3, #1
 800334e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003350:	f7fd f98c 	bl	800066c <HAL_GetTick>
 8003354:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003358:	e009      	b.n	800336e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800335a:	f7fd f987 	bl	800066c <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e144      	b.n	80035f8 <HAL_RCC_OscConfig+0x106c>
 800336e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003372:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003376:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800337a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003380:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	fa93 f2a3 	rbit	r2, r3
 800338a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003392:	601a      	str	r2, [r3, #0]
  return result;
 8003394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003398:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800339c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800339e:	fab3 f383 	clz	r3, r3
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	095b      	lsrs	r3, r3, #5
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d102      	bne.n	80033b8 <HAL_RCC_OscConfig+0xe2c>
 80033b2:	4b54      	ldr	r3, [pc, #336]	; (8003504 <HAL_RCC_OscConfig+0xf78>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	e027      	b.n	8003408 <HAL_RCC_OscConfig+0xe7c>
 80033b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033bc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80033c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ca:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	fa93 f2a3 	rbit	r2, r3
 80033d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80033e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	fa93 f2a3 	rbit	r2, r3
 80033fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	4b3f      	ldr	r3, [pc, #252]	; (8003504 <HAL_RCC_OscConfig+0xf78>)
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800340c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003410:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003414:	6011      	str	r1, [r2, #0]
 8003416:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800341a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800341e:	6812      	ldr	r2, [r2, #0]
 8003420:	fa92 f1a2 	rbit	r1, r2
 8003424:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003428:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800342c:	6011      	str	r1, [r2, #0]
  return result;
 800342e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003432:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003436:	6812      	ldr	r2, [r2, #0]
 8003438:	fab2 f282 	clz	r2, r2
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	f042 0220 	orr.w	r2, r2, #32
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	f002 021f 	and.w	r2, r2, #31
 8003448:	2101      	movs	r1, #1
 800344a:	fa01 f202 	lsl.w	r2, r1, r2
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d082      	beq.n	800335a <HAL_RCC_OscConfig+0xdce>
 8003454:	e0cf      	b.n	80035f6 <HAL_RCC_OscConfig+0x106a>
 8003456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800345e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003468:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	fa93 f2a3 	rbit	r2, r3
 8003472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003476:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800347a:	601a      	str	r2, [r3, #0]
  return result;
 800347c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003480:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003484:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003486:	fab3 f383 	clz	r3, r3
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003490:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	461a      	mov	r2, r3
 8003498:	2300      	movs	r3, #0
 800349a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349c:	f7fd f8e6 	bl	800066c <HAL_GetTick>
 80034a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a4:	e009      	b.n	80034ba <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a6:	f7fd f8e1 	bl	800066c <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e09e      	b.n	80035f8 <HAL_RCC_OscConfig+0x106c>
 80034ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034be:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80034c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034cc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	fa93 f2a3 	rbit	r2, r3
 80034d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034da:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034de:	601a      	str	r2, [r3, #0]
  return result;
 80034e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ea:	fab3 f383 	clz	r3, r3
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d104      	bne.n	8003508 <HAL_RCC_OscConfig+0xf7c>
 80034fe:	4b01      	ldr	r3, [pc, #4]	; (8003504 <HAL_RCC_OscConfig+0xf78>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	e029      	b.n	8003558 <HAL_RCC_OscConfig+0xfcc>
 8003504:	40021000 	.word	0x40021000
 8003508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003510:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003514:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	fa93 f2a3 	rbit	r2, r3
 8003524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003528:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003532:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003536:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003540:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	fa93 f2a3 	rbit	r2, r3
 800354a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	4b2b      	ldr	r3, [pc, #172]	; (8003604 <HAL_RCC_OscConfig+0x1078>)
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800355c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003560:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003564:	6011      	str	r1, [r2, #0]
 8003566:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800356a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	fa92 f1a2 	rbit	r1, r2
 8003574:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003578:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800357c:	6011      	str	r1, [r2, #0]
  return result;
 800357e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003582:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003586:	6812      	ldr	r2, [r2, #0]
 8003588:	fab2 f282 	clz	r2, r2
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	f042 0220 	orr.w	r2, r2, #32
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	f002 021f 	and.w	r2, r2, #31
 8003598:	2101      	movs	r1, #1
 800359a:	fa01 f202 	lsl.w	r2, r1, r2
 800359e:	4013      	ands	r3, r2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d180      	bne.n	80034a6 <HAL_RCC_OscConfig+0xf1a>
 80035a4:	e027      	b.n	80035f6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e01e      	b.n	80035f8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <HAL_RCC_OscConfig+0x1078>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80035c6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d10b      	bne.n	80035f2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80035da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80035de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d001      	beq.n	80035f6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e000      	b.n	80035f8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40021000 	.word	0x40021000

08003608 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b09e      	sub	sp, #120	; 0x78
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e162      	b.n	80038e6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003620:	4b90      	ldr	r3, [pc, #576]	; (8003864 <HAL_RCC_ClockConfig+0x25c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d910      	bls.n	8003650 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362e:	4b8d      	ldr	r3, [pc, #564]	; (8003864 <HAL_RCC_ClockConfig+0x25c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 0207 	bic.w	r2, r3, #7
 8003636:	498b      	ldr	r1, [pc, #556]	; (8003864 <HAL_RCC_ClockConfig+0x25c>)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	4313      	orrs	r3, r2
 800363c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800363e:	4b89      	ldr	r3, [pc, #548]	; (8003864 <HAL_RCC_ClockConfig+0x25c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d001      	beq.n	8003650 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e14a      	b.n	80038e6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800365c:	4b82      	ldr	r3, [pc, #520]	; (8003868 <HAL_RCC_ClockConfig+0x260>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	497f      	ldr	r1, [pc, #508]	; (8003868 <HAL_RCC_ClockConfig+0x260>)
 800366a:	4313      	orrs	r3, r2
 800366c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 80dc 	beq.w	8003834 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d13c      	bne.n	80036fe <HAL_RCC_ClockConfig+0xf6>
 8003684:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003688:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800368c:	fa93 f3a3 	rbit	r3, r3
 8003690:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003694:	fab3 f383 	clz	r3, r3
 8003698:	b2db      	uxtb	r3, r3
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	b2db      	uxtb	r3, r3
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d102      	bne.n	80036ae <HAL_RCC_ClockConfig+0xa6>
 80036a8:	4b6f      	ldr	r3, [pc, #444]	; (8003868 <HAL_RCC_ClockConfig+0x260>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	e00f      	b.n	80036ce <HAL_RCC_ClockConfig+0xc6>
 80036ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036b6:	fa93 f3a3 	rbit	r3, r3
 80036ba:	667b      	str	r3, [r7, #100]	; 0x64
 80036bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036c0:	663b      	str	r3, [r7, #96]	; 0x60
 80036c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036c4:	fa93 f3a3 	rbit	r3, r3
 80036c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036ca:	4b67      	ldr	r3, [pc, #412]	; (8003868 <HAL_RCC_ClockConfig+0x260>)
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80036d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036d6:	fa92 f2a2 	rbit	r2, r2
 80036da:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80036dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036de:	fab2 f282 	clz	r2, r2
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	f042 0220 	orr.w	r2, r2, #32
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	f002 021f 	and.w	r2, r2, #31
 80036ee:	2101      	movs	r1, #1
 80036f0:	fa01 f202 	lsl.w	r2, r1, r2
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d17b      	bne.n	80037f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e0f3      	b.n	80038e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d13c      	bne.n	8003780 <HAL_RCC_ClockConfig+0x178>
 8003706:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800370a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800370e:	fa93 f3a3 	rbit	r3, r3
 8003712:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003716:	fab3 f383 	clz	r3, r3
 800371a:	b2db      	uxtb	r3, r3
 800371c:	095b      	lsrs	r3, r3, #5
 800371e:	b2db      	uxtb	r3, r3
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b01      	cmp	r3, #1
 8003728:	d102      	bne.n	8003730 <HAL_RCC_ClockConfig+0x128>
 800372a:	4b4f      	ldr	r3, [pc, #316]	; (8003868 <HAL_RCC_ClockConfig+0x260>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	e00f      	b.n	8003750 <HAL_RCC_ClockConfig+0x148>
 8003730:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003734:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003738:	fa93 f3a3 	rbit	r3, r3
 800373c:	647b      	str	r3, [r7, #68]	; 0x44
 800373e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003742:	643b      	str	r3, [r7, #64]	; 0x40
 8003744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003746:	fa93 f3a3 	rbit	r3, r3
 800374a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800374c:	4b46      	ldr	r3, [pc, #280]	; (8003868 <HAL_RCC_ClockConfig+0x260>)
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003754:	63ba      	str	r2, [r7, #56]	; 0x38
 8003756:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003758:	fa92 f2a2 	rbit	r2, r2
 800375c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800375e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003760:	fab2 f282 	clz	r2, r2
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	f042 0220 	orr.w	r2, r2, #32
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	f002 021f 	and.w	r2, r2, #31
 8003770:	2101      	movs	r1, #1
 8003772:	fa01 f202 	lsl.w	r2, r1, r2
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d13a      	bne.n	80037f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e0b2      	b.n	80038e6 <HAL_RCC_ClockConfig+0x2de>
 8003780:	2302      	movs	r3, #2
 8003782:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003786:	fa93 f3a3 	rbit	r3, r3
 800378a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800378c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800378e:	fab3 f383 	clz	r3, r3
 8003792:	b2db      	uxtb	r3, r3
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	b2db      	uxtb	r3, r3
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d102      	bne.n	80037a8 <HAL_RCC_ClockConfig+0x1a0>
 80037a2:	4b31      	ldr	r3, [pc, #196]	; (8003868 <HAL_RCC_ClockConfig+0x260>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	e00d      	b.n	80037c4 <HAL_RCC_ClockConfig+0x1bc>
 80037a8:	2302      	movs	r3, #2
 80037aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ae:	fa93 f3a3 	rbit	r3, r3
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
 80037b4:	2302      	movs	r3, #2
 80037b6:	623b      	str	r3, [r7, #32]
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	fa93 f3a3 	rbit	r3, r3
 80037be:	61fb      	str	r3, [r7, #28]
 80037c0:	4b29      	ldr	r3, [pc, #164]	; (8003868 <HAL_RCC_ClockConfig+0x260>)
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	2202      	movs	r2, #2
 80037c6:	61ba      	str	r2, [r7, #24]
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	fa92 f2a2 	rbit	r2, r2
 80037ce:	617a      	str	r2, [r7, #20]
  return result;
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	fab2 f282 	clz	r2, r2
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	f042 0220 	orr.w	r2, r2, #32
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	f002 021f 	and.w	r2, r2, #31
 80037e2:	2101      	movs	r1, #1
 80037e4:	fa01 f202 	lsl.w	r2, r1, r2
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e079      	b.n	80038e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037f2:	4b1d      	ldr	r3, [pc, #116]	; (8003868 <HAL_RCC_ClockConfig+0x260>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f023 0203 	bic.w	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	491a      	ldr	r1, [pc, #104]	; (8003868 <HAL_RCC_ClockConfig+0x260>)
 8003800:	4313      	orrs	r3, r2
 8003802:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003804:	f7fc ff32 	bl	800066c <HAL_GetTick>
 8003808:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380a:	e00a      	b.n	8003822 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800380c:	f7fc ff2e 	bl	800066c <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	; 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e061      	b.n	80038e6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003822:	4b11      	ldr	r3, [pc, #68]	; (8003868 <HAL_RCC_ClockConfig+0x260>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 020c 	and.w	r2, r3, #12
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	429a      	cmp	r2, r3
 8003832:	d1eb      	bne.n	800380c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003834:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <HAL_RCC_ClockConfig+0x25c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d214      	bcs.n	800386c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b08      	ldr	r3, [pc, #32]	; (8003864 <HAL_RCC_ClockConfig+0x25c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 0207 	bic.w	r2, r3, #7
 800384a:	4906      	ldr	r1, [pc, #24]	; (8003864 <HAL_RCC_ClockConfig+0x25c>)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	4313      	orrs	r3, r2
 8003850:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	4b04      	ldr	r3, [pc, #16]	; (8003864 <HAL_RCC_ClockConfig+0x25c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d005      	beq.n	800386c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e040      	b.n	80038e6 <HAL_RCC_ClockConfig+0x2de>
 8003864:	40022000 	.word	0x40022000
 8003868:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003878:	4b1d      	ldr	r3, [pc, #116]	; (80038f0 <HAL_RCC_ClockConfig+0x2e8>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	491a      	ldr	r1, [pc, #104]	; (80038f0 <HAL_RCC_ClockConfig+0x2e8>)
 8003886:	4313      	orrs	r3, r2
 8003888:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d009      	beq.n	80038aa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003896:	4b16      	ldr	r3, [pc, #88]	; (80038f0 <HAL_RCC_ClockConfig+0x2e8>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4912      	ldr	r1, [pc, #72]	; (80038f0 <HAL_RCC_ClockConfig+0x2e8>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80038aa:	f000 f829 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 80038ae:	4601      	mov	r1, r0
 80038b0:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <HAL_RCC_ClockConfig+0x2e8>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038b8:	22f0      	movs	r2, #240	; 0xf0
 80038ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	fa92 f2a2 	rbit	r2, r2
 80038c2:	60fa      	str	r2, [r7, #12]
  return result;
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	fab2 f282 	clz	r2, r2
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	40d3      	lsrs	r3, r2
 80038ce:	4a09      	ldr	r2, [pc, #36]	; (80038f4 <HAL_RCC_ClockConfig+0x2ec>)
 80038d0:	5cd3      	ldrb	r3, [r2, r3]
 80038d2:	fa21 f303 	lsr.w	r3, r1, r3
 80038d6:	4a08      	ldr	r2, [pc, #32]	; (80038f8 <HAL_RCC_ClockConfig+0x2f0>)
 80038d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80038da:	4b08      	ldr	r3, [pc, #32]	; (80038fc <HAL_RCC_ClockConfig+0x2f4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fc fe80 	bl	80005e4 <HAL_InitTick>
  
  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3778      	adds	r7, #120	; 0x78
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40021000 	.word	0x40021000
 80038f4:	08008cb8 	.word	0x08008cb8
 80038f8:	20000004 	.word	0x20000004
 80038fc:	20000008 	.word	0x20000008

08003900 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003900:	b480      	push	{r7}
 8003902:	b08b      	sub	sp, #44	; 0x2c
 8003904:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	61fb      	str	r3, [r7, #28]
 800390a:	2300      	movs	r3, #0
 800390c:	61bb      	str	r3, [r7, #24]
 800390e:	2300      	movs	r3, #0
 8003910:	627b      	str	r3, [r7, #36]	; 0x24
 8003912:	2300      	movs	r3, #0
 8003914:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003916:	2300      	movs	r3, #0
 8003918:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800391a:	4b29      	ldr	r3, [pc, #164]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	f003 030c 	and.w	r3, r3, #12
 8003926:	2b04      	cmp	r3, #4
 8003928:	d002      	beq.n	8003930 <HAL_RCC_GetSysClockFreq+0x30>
 800392a:	2b08      	cmp	r3, #8
 800392c:	d003      	beq.n	8003936 <HAL_RCC_GetSysClockFreq+0x36>
 800392e:	e03c      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003930:	4b24      	ldr	r3, [pc, #144]	; (80039c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003932:	623b      	str	r3, [r7, #32]
      break;
 8003934:	e03c      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800393c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003940:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	fa92 f2a2 	rbit	r2, r2
 8003948:	607a      	str	r2, [r7, #4]
  return result;
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	fab2 f282 	clz	r2, r2
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	40d3      	lsrs	r3, r2
 8003954:	4a1c      	ldr	r2, [pc, #112]	; (80039c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003956:	5cd3      	ldrb	r3, [r2, r3]
 8003958:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800395a:	4b19      	ldr	r3, [pc, #100]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	220f      	movs	r2, #15
 8003964:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	fa92 f2a2 	rbit	r2, r2
 800396c:	60fa      	str	r2, [r7, #12]
  return result;
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	fab2 f282 	clz	r2, r2
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	40d3      	lsrs	r3, r2
 8003978:	4a14      	ldr	r2, [pc, #80]	; (80039cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800397a:	5cd3      	ldrb	r3, [r2, r3]
 800397c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d008      	beq.n	800399a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003988:	4a0e      	ldr	r2, [pc, #56]	; (80039c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
 8003998:	e004      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	4a0c      	ldr	r2, [pc, #48]	; (80039d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800399e:	fb02 f303 	mul.w	r3, r2, r3
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	623b      	str	r3, [r7, #32]
      break;
 80039a8:	e002      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039aa:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80039ac:	623b      	str	r3, [r7, #32]
      break;
 80039ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039b0:	6a3b      	ldr	r3, [r7, #32]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	372c      	adds	r7, #44	; 0x2c
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	40021000 	.word	0x40021000
 80039c4:	007a1200 	.word	0x007a1200
 80039c8:	08008cd0 	.word	0x08008cd0
 80039cc:	08008ce0 	.word	0x08008ce0
 80039d0:	003d0900 	.word	0x003d0900

080039d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d8:	4b03      	ldr	r3, [pc, #12]	; (80039e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039da:	681b      	ldr	r3, [r3, #0]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	20000004 	.word	0x20000004

080039ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80039f2:	f7ff ffef 	bl	80039d4 <HAL_RCC_GetHCLKFreq>
 80039f6:	4601      	mov	r1, r0
 80039f8:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a00:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003a04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	fa92 f2a2 	rbit	r2, r2
 8003a0c:	603a      	str	r2, [r7, #0]
  return result;
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	fab2 f282 	clz	r2, r2
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	40d3      	lsrs	r3, r2
 8003a18:	4a04      	ldr	r2, [pc, #16]	; (8003a2c <HAL_RCC_GetPCLK1Freq+0x40>)
 8003a1a:	5cd3      	ldrb	r3, [r2, r3]
 8003a1c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003a20:	4618      	mov	r0, r3
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	08008cc8 	.word	0x08008cc8

08003a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003a36:	f7ff ffcd 	bl	80039d4 <HAL_RCC_GetHCLKFreq>
 8003a3a:	4601      	mov	r1, r0
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003a44:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003a48:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	fa92 f2a2 	rbit	r2, r2
 8003a50:	603a      	str	r2, [r7, #0]
  return result;
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	fab2 f282 	clz	r2, r2
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	40d3      	lsrs	r3, r2
 8003a5c:	4a04      	ldr	r2, [pc, #16]	; (8003a70 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003a5e:	5cd3      	ldrb	r3, [r2, r3]
 8003a60:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003a64:	4618      	mov	r0, r3
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	08008cc8 	.word	0x08008cc8

08003a74 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b092      	sub	sp, #72	; 0x48
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003a84:	2300      	movs	r3, #0
 8003a86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 80d4 	beq.w	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a98:	4b4e      	ldr	r3, [pc, #312]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10e      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa4:	4b4b      	ldr	r3, [pc, #300]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	4a4a      	ldr	r2, [pc, #296]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aae:	61d3      	str	r3, [r2, #28]
 8003ab0:	4b48      	ldr	r3, [pc, #288]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003abc:	2301      	movs	r3, #1
 8003abe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac2:	4b45      	ldr	r3, [pc, #276]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d118      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ace:	4b42      	ldr	r3, [pc, #264]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a41      	ldr	r2, [pc, #260]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ada:	f7fc fdc7 	bl	800066c <HAL_GetTick>
 8003ade:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae0:	e008      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae2:	f7fc fdc3 	bl	800066c <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b64      	cmp	r3, #100	; 0x64
 8003aee:	d901      	bls.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e14b      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af4:	4b38      	ldr	r3, [pc, #224]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0f0      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b00:	4b34      	ldr	r3, [pc, #208]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b08:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 8084 	beq.w	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d07c      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b20:	4b2c      	ldr	r3, [pc, #176]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b32:	fa93 f3a3 	rbit	r3, r3
 8003b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b3a:	fab3 f383 	clz	r3, r3
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	461a      	mov	r2, r3
 8003b42:	4b26      	ldr	r3, [pc, #152]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	461a      	mov	r2, r3
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b56:	fa93 f3a3 	rbit	r3, r3
 8003b5a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b5e:	fab3 f383 	clz	r3, r3
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	461a      	mov	r2, r3
 8003b66:	4b1d      	ldr	r3, [pc, #116]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b68:	4413      	add	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	2300      	movs	r3, #0
 8003b70:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b72:	4a18      	ldr	r2, [pc, #96]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b76:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d04b      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b82:	f7fc fd73 	bl	800066c <HAL_GetTick>
 8003b86:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b88:	e00a      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8a:	f7fc fd6f 	bl	800066c <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e0f5      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba6:	fa93 f3a3 	rbit	r3, r3
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
 8003bac:	2302      	movs	r3, #2
 8003bae:	623b      	str	r3, [r7, #32]
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	fa93 f3a3 	rbit	r3, r3
 8003bb6:	61fb      	str	r3, [r7, #28]
  return result;
 8003bb8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bba:	fab3 f383 	clz	r3, r3
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	f043 0302 	orr.w	r3, r3, #2
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d108      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003bce:	4b01      	ldr	r3, [pc, #4]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	e00d      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	40007000 	.word	0x40007000
 8003bdc:	10908100 	.word	0x10908100
 8003be0:	2302      	movs	r3, #2
 8003be2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	fa93 f3a3 	rbit	r3, r3
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	4b69      	ldr	r3, [pc, #420]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	613a      	str	r2, [r7, #16]
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	fa92 f2a2 	rbit	r2, r2
 8003bfa:	60fa      	str	r2, [r7, #12]
  return result;
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	fab2 f282 	clz	r2, r2
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c08:	b2d2      	uxtb	r2, r2
 8003c0a:	f002 021f 	and.w	r2, r2, #31
 8003c0e:	2101      	movs	r1, #1
 8003c10:	fa01 f202 	lsl.w	r2, r1, r2
 8003c14:	4013      	ands	r3, r2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0b7      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003c1a:	4b5e      	ldr	r3, [pc, #376]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	495b      	ldr	r1, [pc, #364]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d105      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c34:	4b57      	ldr	r3, [pc, #348]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	4a56      	ldr	r2, [pc, #344]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c4c:	4b51      	ldr	r3, [pc, #324]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	f023 0203 	bic.w	r2, r3, #3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	494e      	ldr	r1, [pc, #312]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d008      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c6a:	4b4a      	ldr	r3, [pc, #296]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	f023 0210 	bic.w	r2, r3, #16
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	4947      	ldr	r1, [pc, #284]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003c88:	4b42      	ldr	r3, [pc, #264]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c94:	493f      	ldr	r1, [pc, #252]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ca6:	4b3b      	ldr	r3, [pc, #236]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	f023 0220 	bic.w	r2, r3, #32
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	4938      	ldr	r1, [pc, #224]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d008      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cc4:	4b33      	ldr	r3, [pc, #204]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	4930      	ldr	r1, [pc, #192]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d008      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ce2:	4b2c      	ldr	r3, [pc, #176]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	4929      	ldr	r1, [pc, #164]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003d00:	4b24      	ldr	r3, [pc, #144]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d04:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	4921      	ldr	r1, [pc, #132]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d1e:	4b1d      	ldr	r3, [pc, #116]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	491a      	ldr	r1, [pc, #104]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003d3c:	4b15      	ldr	r3, [pc, #84]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d40:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	4912      	ldr	r1, [pc, #72]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d008      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003d5a:	4b0e      	ldr	r3, [pc, #56]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d66:	490b      	ldr	r1, [pc, #44]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d008      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003d78:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	4903      	ldr	r1, [pc, #12]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3748      	adds	r7, #72	; 0x48
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40021000 	.word	0x40021000

08003d98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e040      	b.n	8003e2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d106      	bne.n	8003dc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7fc fb4a 	bl	8000454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2224      	movs	r2, #36	; 0x24
 8003dc4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0201 	bic.w	r2, r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f82c 	bl	8003e34 <UART_SetConfig>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e022      	b.n	8003e2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f956 	bl	80040a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f9dd 	bl	80041e4 <UART_CheckIdleState>
 8003e2a:	4603      	mov	r3, r0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	4b8a      	ldr	r3, [pc, #552]	; (8004088 <UART_SetConfig+0x254>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6812      	ldr	r2, [r2, #0]
 8003e66:	6979      	ldr	r1, [r7, #20]
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a78      	ldr	r2, [pc, #480]	; (800408c <UART_SetConfig+0x258>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d120      	bne.n	8003ef2 <UART_SetConfig+0xbe>
 8003eb0:	4b77      	ldr	r3, [pc, #476]	; (8004090 <UART_SetConfig+0x25c>)
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb4:	f003 0303 	and.w	r3, r3, #3
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d817      	bhi.n	8003eec <UART_SetConfig+0xb8>
 8003ebc:	a201      	add	r2, pc, #4	; (adr r2, 8003ec4 <UART_SetConfig+0x90>)
 8003ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec2:	bf00      	nop
 8003ec4:	08003ed5 	.word	0x08003ed5
 8003ec8:	08003ee1 	.word	0x08003ee1
 8003ecc:	08003ee7 	.word	0x08003ee7
 8003ed0:	08003edb 	.word	0x08003edb
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	77fb      	strb	r3, [r7, #31]
 8003ed8:	e01d      	b.n	8003f16 <UART_SetConfig+0xe2>
 8003eda:	2302      	movs	r3, #2
 8003edc:	77fb      	strb	r3, [r7, #31]
 8003ede:	e01a      	b.n	8003f16 <UART_SetConfig+0xe2>
 8003ee0:	2304      	movs	r3, #4
 8003ee2:	77fb      	strb	r3, [r7, #31]
 8003ee4:	e017      	b.n	8003f16 <UART_SetConfig+0xe2>
 8003ee6:	2308      	movs	r3, #8
 8003ee8:	77fb      	strb	r3, [r7, #31]
 8003eea:	e014      	b.n	8003f16 <UART_SetConfig+0xe2>
 8003eec:	2310      	movs	r3, #16
 8003eee:	77fb      	strb	r3, [r7, #31]
 8003ef0:	e011      	b.n	8003f16 <UART_SetConfig+0xe2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a67      	ldr	r2, [pc, #412]	; (8004094 <UART_SetConfig+0x260>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d102      	bne.n	8003f02 <UART_SetConfig+0xce>
 8003efc:	2300      	movs	r3, #0
 8003efe:	77fb      	strb	r3, [r7, #31]
 8003f00:	e009      	b.n	8003f16 <UART_SetConfig+0xe2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a64      	ldr	r2, [pc, #400]	; (8004098 <UART_SetConfig+0x264>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d102      	bne.n	8003f12 <UART_SetConfig+0xde>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	77fb      	strb	r3, [r7, #31]
 8003f10:	e001      	b.n	8003f16 <UART_SetConfig+0xe2>
 8003f12:	2310      	movs	r3, #16
 8003f14:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f1e:	d15a      	bne.n	8003fd6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003f20:	7ffb      	ldrb	r3, [r7, #31]
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d827      	bhi.n	8003f76 <UART_SetConfig+0x142>
 8003f26:	a201      	add	r2, pc, #4	; (adr r2, 8003f2c <UART_SetConfig+0xf8>)
 8003f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2c:	08003f51 	.word	0x08003f51
 8003f30:	08003f59 	.word	0x08003f59
 8003f34:	08003f61 	.word	0x08003f61
 8003f38:	08003f77 	.word	0x08003f77
 8003f3c:	08003f67 	.word	0x08003f67
 8003f40:	08003f77 	.word	0x08003f77
 8003f44:	08003f77 	.word	0x08003f77
 8003f48:	08003f77 	.word	0x08003f77
 8003f4c:	08003f6f 	.word	0x08003f6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f50:	f7ff fd4c 	bl	80039ec <HAL_RCC_GetPCLK1Freq>
 8003f54:	61b8      	str	r0, [r7, #24]
        break;
 8003f56:	e013      	b.n	8003f80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f58:	f7ff fd6a 	bl	8003a30 <HAL_RCC_GetPCLK2Freq>
 8003f5c:	61b8      	str	r0, [r7, #24]
        break;
 8003f5e:	e00f      	b.n	8003f80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f60:	4b4e      	ldr	r3, [pc, #312]	; (800409c <UART_SetConfig+0x268>)
 8003f62:	61bb      	str	r3, [r7, #24]
        break;
 8003f64:	e00c      	b.n	8003f80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f66:	f7ff fccb 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 8003f6a:	61b8      	str	r0, [r7, #24]
        break;
 8003f6c:	e008      	b.n	8003f80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f72:	61bb      	str	r3, [r7, #24]
        break;
 8003f74:	e004      	b.n	8003f80 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	77bb      	strb	r3, [r7, #30]
        break;
 8003f7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d074      	beq.n	8004070 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	005a      	lsls	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	085b      	lsrs	r3, r3, #1
 8003f90:	441a      	add	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	2b0f      	cmp	r3, #15
 8003fa0:	d916      	bls.n	8003fd0 <UART_SetConfig+0x19c>
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa8:	d212      	bcs.n	8003fd0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	f023 030f 	bic.w	r3, r3, #15
 8003fb2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	085b      	lsrs	r3, r3, #1
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	89fb      	ldrh	r3, [r7, #14]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	89fa      	ldrh	r2, [r7, #14]
 8003fcc:	60da      	str	r2, [r3, #12]
 8003fce:	e04f      	b.n	8004070 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	77bb      	strb	r3, [r7, #30]
 8003fd4:	e04c      	b.n	8004070 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fd6:	7ffb      	ldrb	r3, [r7, #31]
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d828      	bhi.n	800402e <UART_SetConfig+0x1fa>
 8003fdc:	a201      	add	r2, pc, #4	; (adr r2, 8003fe4 <UART_SetConfig+0x1b0>)
 8003fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe2:	bf00      	nop
 8003fe4:	08004009 	.word	0x08004009
 8003fe8:	08004011 	.word	0x08004011
 8003fec:	08004019 	.word	0x08004019
 8003ff0:	0800402f 	.word	0x0800402f
 8003ff4:	0800401f 	.word	0x0800401f
 8003ff8:	0800402f 	.word	0x0800402f
 8003ffc:	0800402f 	.word	0x0800402f
 8004000:	0800402f 	.word	0x0800402f
 8004004:	08004027 	.word	0x08004027
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004008:	f7ff fcf0 	bl	80039ec <HAL_RCC_GetPCLK1Freq>
 800400c:	61b8      	str	r0, [r7, #24]
        break;
 800400e:	e013      	b.n	8004038 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004010:	f7ff fd0e 	bl	8003a30 <HAL_RCC_GetPCLK2Freq>
 8004014:	61b8      	str	r0, [r7, #24]
        break;
 8004016:	e00f      	b.n	8004038 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004018:	4b20      	ldr	r3, [pc, #128]	; (800409c <UART_SetConfig+0x268>)
 800401a:	61bb      	str	r3, [r7, #24]
        break;
 800401c:	e00c      	b.n	8004038 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800401e:	f7ff fc6f 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 8004022:	61b8      	str	r0, [r7, #24]
        break;
 8004024:	e008      	b.n	8004038 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800402a:	61bb      	str	r3, [r7, #24]
        break;
 800402c:	e004      	b.n	8004038 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	77bb      	strb	r3, [r7, #30]
        break;
 8004036:	bf00      	nop
    }

    if (pclk != 0U)
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d018      	beq.n	8004070 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	085a      	lsrs	r2, r3, #1
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	441a      	add	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004050:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	2b0f      	cmp	r3, #15
 8004056:	d909      	bls.n	800406c <UART_SetConfig+0x238>
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800405e:	d205      	bcs.n	800406c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	b29a      	uxth	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	60da      	str	r2, [r3, #12]
 800406a:	e001      	b.n	8004070 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800407c:	7fbb      	ldrb	r3, [r7, #30]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3720      	adds	r7, #32
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	efff69f3 	.word	0xefff69f3
 800408c:	40013800 	.word	0x40013800
 8004090:	40021000 	.word	0x40021000
 8004094:	40004400 	.word	0x40004400
 8004098:	40004800 	.word	0x40004800
 800409c:	007a1200 	.word	0x007a1200

080040a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00a      	beq.n	80040ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00a      	beq.n	800410e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	f003 0310 	and.w	r3, r3, #16
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	f003 0320 	and.w	r3, r3, #32
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417c:	2b00      	cmp	r3, #0
 800417e:	d01a      	beq.n	80041b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800419e:	d10a      	bne.n	80041b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	605a      	str	r2, [r3, #4]
  }
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b098      	sub	sp, #96	; 0x60
 80041e8:	af02      	add	r7, sp, #8
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041f4:	f7fc fa3a 	bl	800066c <HAL_GetTick>
 80041f8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b08      	cmp	r3, #8
 8004206:	d12e      	bne.n	8004266 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004208:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004210:	2200      	movs	r2, #0
 8004212:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f88c 	bl	8004334 <UART_WaitOnFlagUntilTimeout>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d021      	beq.n	8004266 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004236:	653b      	str	r3, [r7, #80]	; 0x50
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004240:	647b      	str	r3, [r7, #68]	; 0x44
 8004242:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004246:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800424e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e6      	bne.n	8004222 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e062      	b.n	800432c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b04      	cmp	r3, #4
 8004272:	d149      	bne.n	8004308 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800427c:	2200      	movs	r2, #0
 800427e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f856 	bl	8004334 <UART_WaitOnFlagUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d03c      	beq.n	8004308 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	e853 3f00 	ldrex	r3, [r3]
 800429a:	623b      	str	r3, [r7, #32]
   return(result);
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ac:	633b      	str	r3, [r7, #48]	; 0x30
 80042ae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042b4:	e841 2300 	strex	r3, r2, [r1]
 80042b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1e6      	bne.n	800428e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3308      	adds	r3, #8
 80042c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	e853 3f00 	ldrex	r3, [r3]
 80042ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0301 	bic.w	r3, r3, #1
 80042d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	3308      	adds	r3, #8
 80042de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042e0:	61fa      	str	r2, [r7, #28]
 80042e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e4:	69b9      	ldr	r1, [r7, #24]
 80042e6:	69fa      	ldr	r2, [r7, #28]
 80042e8:	e841 2300 	strex	r3, r2, [r1]
 80042ec:	617b      	str	r3, [r7, #20]
   return(result);
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1e5      	bne.n	80042c0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e011      	b.n	800432c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2220      	movs	r2, #32
 800430c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2220      	movs	r2, #32
 8004312:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3758      	adds	r7, #88	; 0x58
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	603b      	str	r3, [r7, #0]
 8004340:	4613      	mov	r3, r2
 8004342:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004344:	e049      	b.n	80043da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434c:	d045      	beq.n	80043da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800434e:	f7fc f98d 	bl	800066c <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	429a      	cmp	r2, r3
 800435c:	d302      	bcc.n	8004364 <UART_WaitOnFlagUntilTimeout+0x30>
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e048      	b.n	80043fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b00      	cmp	r3, #0
 8004374:	d031      	beq.n	80043da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b08      	cmp	r3, #8
 8004382:	d110      	bne.n	80043a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2208      	movs	r2, #8
 800438a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 f838 	bl	8004402 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2208      	movs	r2, #8
 8004396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e029      	b.n	80043fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b4:	d111      	bne.n	80043da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 f81e 	bl	8004402 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e00f      	b.n	80043fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69da      	ldr	r2, [r3, #28]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4013      	ands	r3, r2
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	bf0c      	ite	eq
 80043ea:	2301      	moveq	r3, #1
 80043ec:	2300      	movne	r3, #0
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	461a      	mov	r2, r3
 80043f2:	79fb      	ldrb	r3, [r7, #7]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d0a6      	beq.n	8004346 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004402:	b480      	push	{r7}
 8004404:	b095      	sub	sp, #84	; 0x54
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004412:	e853 3f00 	ldrex	r3, [r3]
 8004416:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800441e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	461a      	mov	r2, r3
 8004426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004428:	643b      	str	r3, [r7, #64]	; 0x40
 800442a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800442e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004430:	e841 2300 	strex	r3, r2, [r1]
 8004434:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e6      	bne.n	800440a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3308      	adds	r3, #8
 8004442:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	e853 3f00 	ldrex	r3, [r3]
 800444a:	61fb      	str	r3, [r7, #28]
   return(result);
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	f023 0301 	bic.w	r3, r3, #1
 8004452:	64bb      	str	r3, [r7, #72]	; 0x48
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3308      	adds	r3, #8
 800445a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800445c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800445e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004460:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004464:	e841 2300 	strex	r3, r2, [r1]
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e5      	bne.n	800443c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004474:	2b01      	cmp	r3, #1
 8004476:	d118      	bne.n	80044aa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	e853 3f00 	ldrex	r3, [r3]
 8004484:	60bb      	str	r3, [r7, #8]
   return(result);
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f023 0310 	bic.w	r3, r3, #16
 800448c:	647b      	str	r3, [r7, #68]	; 0x44
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004496:	61bb      	str	r3, [r7, #24]
 8004498:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449a:	6979      	ldr	r1, [r7, #20]
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	e841 2300 	strex	r3, r2, [r1]
 80044a2:	613b      	str	r3, [r7, #16]
   return(result);
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1e6      	bne.n	8004478 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80044be:	bf00      	nop
 80044c0:	3754      	adds	r7, #84	; 0x54
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b085      	sub	sp, #20
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044da:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80044de:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004500:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004504:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	b29b      	uxth	r3, r3
 8004512:	43db      	mvns	r3, r3
 8004514:	b29b      	uxth	r3, r3
 8004516:	4013      	ands	r3, r2
 8004518:	b29a      	uxth	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800452e:	b084      	sub	sp, #16
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	f107 0014 	add.w	r0, r7, #20
 800453c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	b004      	add	sp, #16
 800456e:	4770      	bx	lr

08004570 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004570:	b480      	push	{r7}
 8004572:	b09d      	sub	sp, #116	; 0x74
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	b29b      	uxth	r3, r3
 800458e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004596:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	78db      	ldrb	r3, [r3, #3]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d81f      	bhi.n	80045e2 <USB_ActivateEndpoint+0x72>
 80045a2:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <USB_ActivateEndpoint+0x38>)
 80045a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a8:	080045b9 	.word	0x080045b9
 80045ac:	080045d5 	.word	0x080045d5
 80045b0:	080045eb 	.word	0x080045eb
 80045b4:	080045c7 	.word	0x080045c7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80045b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80045c4:	e012      	b.n	80045ec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80045c6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045ca:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80045ce:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80045d2:	e00b      	b.n	80045ec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80045d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045dc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80045e0:	e004      	b.n	80045ec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80045e8:	e000      	b.n	80045ec <USB_ActivateEndpoint+0x7c>
      break;
 80045ea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	441a      	add	r2, r3
 80045f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800460a:	b29b      	uxth	r3, r3
 800460c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	b29b      	uxth	r3, r3
 800461c:	b21b      	sxth	r3, r3
 800461e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004626:	b21a      	sxth	r2, r3
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	b21b      	sxth	r3, r3
 800462e:	4313      	orrs	r3, r2
 8004630:	b21b      	sxth	r3, r3
 8004632:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	441a      	add	r2, r3
 8004640:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800464c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004654:	b29b      	uxth	r3, r3
 8004656:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	7b1b      	ldrb	r3, [r3, #12]
 800465c:	2b00      	cmp	r3, #0
 800465e:	f040 8178 	bne.w	8004952 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	785b      	ldrb	r3, [r3, #1]
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 8084 	beq.w	8004774 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	61bb      	str	r3, [r7, #24]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004676:	b29b      	uxth	r3, r3
 8004678:	461a      	mov	r2, r3
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	4413      	add	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	00da      	lsls	r2, r3, #3
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	4413      	add	r3, r2
 800468a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	88db      	ldrh	r3, [r3, #6]
 8004694:	085b      	lsrs	r3, r3, #1
 8004696:	b29b      	uxth	r3, r3
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	827b      	strh	r3, [r7, #18]
 80046ae:	8a7b      	ldrh	r3, [r7, #18]
 80046b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d01b      	beq.n	80046f0 <USB_ActivateEndpoint+0x180>
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ce:	823b      	strh	r3, [r7, #16]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	441a      	add	r2, r3
 80046da:	8a3b      	ldrh	r3, [r7, #16]
 80046dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	78db      	ldrb	r3, [r3, #3]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d020      	beq.n	800473a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	b29b      	uxth	r3, r3
 8004706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800470a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800470e:	81bb      	strh	r3, [r7, #12]
 8004710:	89bb      	ldrh	r3, [r7, #12]
 8004712:	f083 0320 	eor.w	r3, r3, #32
 8004716:	81bb      	strh	r3, [r7, #12]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	441a      	add	r2, r3
 8004722:	89bb      	ldrh	r3, [r7, #12]
 8004724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800472c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004734:	b29b      	uxth	r3, r3
 8004736:	8013      	strh	r3, [r2, #0]
 8004738:	e2d5      	b.n	8004ce6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	b29b      	uxth	r3, r3
 8004748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800474c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004750:	81fb      	strh	r3, [r7, #14]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	441a      	add	r2, r3
 800475c:	89fb      	ldrh	r3, [r7, #14]
 800475e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004762:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800476a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800476e:	b29b      	uxth	r3, r3
 8004770:	8013      	strh	r3, [r2, #0]
 8004772:	e2b8      	b.n	8004ce6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	633b      	str	r3, [r7, #48]	; 0x30
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800477e:	b29b      	uxth	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004784:	4413      	add	r3, r2
 8004786:	633b      	str	r3, [r7, #48]	; 0x30
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	00da      	lsls	r2, r3, #3
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	4413      	add	r3, r2
 8004792:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	88db      	ldrh	r3, [r3, #6]
 800479c:	085b      	lsrs	r3, r3, #1
 800479e:	b29b      	uxth	r3, r3
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	461a      	mov	r2, r3
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	4413      	add	r3, r2
 80047ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	00da      	lsls	r2, r3, #3
 80047c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c4:	4413      	add	r3, r2
 80047c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80047ca:	627b      	str	r3, [r7, #36]	; 0x24
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	881b      	ldrh	r3, [r3, #0]
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	801a      	strh	r2, [r3, #0]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	2b3e      	cmp	r3, #62	; 0x3e
 80047e2:	d91d      	bls.n	8004820 <USB_ActivateEndpoint+0x2b0>
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	095b      	lsrs	r3, r3, #5
 80047ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	f003 031f 	and.w	r3, r3, #31
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d102      	bne.n	80047fe <USB_ActivateEndpoint+0x28e>
 80047f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047fa:	3b01      	subs	r3, #1
 80047fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	b29a      	uxth	r2, r3
 8004804:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004806:	b29b      	uxth	r3, r3
 8004808:	029b      	lsls	r3, r3, #10
 800480a:	b29b      	uxth	r3, r3
 800480c:	4313      	orrs	r3, r2
 800480e:	b29b      	uxth	r3, r3
 8004810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004818:	b29a      	uxth	r2, r3
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	801a      	strh	r2, [r3, #0]
 800481e:	e026      	b.n	800486e <USB_ActivateEndpoint+0x2fe>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10a      	bne.n	800483e <USB_ActivateEndpoint+0x2ce>
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	b29b      	uxth	r3, r3
 800482e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004836:	b29a      	uxth	r2, r3
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	801a      	strh	r2, [r3, #0]
 800483c:	e017      	b.n	800486e <USB_ActivateEndpoint+0x2fe>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	085b      	lsrs	r3, r3, #1
 8004844:	66bb      	str	r3, [r7, #104]	; 0x68
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <USB_ActivateEndpoint+0x2e8>
 8004852:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004854:	3301      	adds	r3, #1
 8004856:	66bb      	str	r3, [r7, #104]	; 0x68
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	b29a      	uxth	r2, r3
 800485e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004860:	b29b      	uxth	r3, r3
 8004862:	029b      	lsls	r3, r3, #10
 8004864:	b29b      	uxth	r3, r3
 8004866:	4313      	orrs	r3, r2
 8004868:	b29a      	uxth	r2, r3
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	881b      	ldrh	r3, [r3, #0]
 800487a:	847b      	strh	r3, [r7, #34]	; 0x22
 800487c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800487e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d01b      	beq.n	80048be <USB_ActivateEndpoint+0x34e>
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	b29b      	uxth	r3, r3
 8004894:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489c:	843b      	strh	r3, [r7, #32]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	441a      	add	r2, r3
 80048a8:	8c3b      	ldrh	r3, [r7, #32]
 80048aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d124      	bne.n	8004910 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048dc:	83bb      	strh	r3, [r7, #28]
 80048de:	8bbb      	ldrh	r3, [r7, #28]
 80048e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80048e4:	83bb      	strh	r3, [r7, #28]
 80048e6:	8bbb      	ldrh	r3, [r7, #28]
 80048e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048ec:	83bb      	strh	r3, [r7, #28]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	441a      	add	r2, r3
 80048f8:	8bbb      	ldrh	r3, [r7, #28]
 80048fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800490a:	b29b      	uxth	r3, r3
 800490c:	8013      	strh	r3, [r2, #0]
 800490e:	e1ea      	b.n	8004ce6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	b29b      	uxth	r3, r3
 800491e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004926:	83fb      	strh	r3, [r7, #30]
 8004928:	8bfb      	ldrh	r3, [r7, #30]
 800492a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800492e:	83fb      	strh	r3, [r7, #30]
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	441a      	add	r2, r3
 800493a:	8bfb      	ldrh	r3, [r7, #30]
 800493c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800494c:	b29b      	uxth	r3, r3
 800494e:	8013      	strh	r3, [r2, #0]
 8004950:	e1c9      	b.n	8004ce6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	78db      	ldrb	r3, [r3, #3]
 8004956:	2b02      	cmp	r3, #2
 8004958:	d11e      	bne.n	8004998 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	b29b      	uxth	r3, r3
 8004968:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800496c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004970:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	441a      	add	r2, r3
 800497e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800498a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800498e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004992:	b29b      	uxth	r3, r3
 8004994:	8013      	strh	r3, [r2, #0]
 8004996:	e01d      	b.n	80049d4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80049aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	441a      	add	r2, r3
 80049bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80049c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049de:	b29b      	uxth	r3, r3
 80049e0:	461a      	mov	r2, r3
 80049e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049e4:	4413      	add	r3, r2
 80049e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	00da      	lsls	r2, r3, #3
 80049ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	891b      	ldrh	r3, [r3, #8]
 80049fc:	085b      	lsrs	r3, r3, #1
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a06:	801a      	strh	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a18:	4413      	add	r3, r2
 8004a1a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	00da      	lsls	r2, r3, #3
 8004a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a24:	4413      	add	r3, r2
 8004a26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a2a:	653b      	str	r3, [r7, #80]	; 0x50
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	895b      	ldrh	r3, [r3, #10]
 8004a30:	085b      	lsrs	r3, r3, #1
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a3a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	785b      	ldrb	r3, [r3, #1]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f040 8093 	bne.w	8004b6c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004a56:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d01b      	beq.n	8004a9a <USB_ActivateEndpoint+0x52a>
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a78:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	441a      	add	r2, r3
 8004a84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004aa8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d01b      	beq.n	8004aea <USB_ActivateEndpoint+0x57a>
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	441a      	add	r2, r3
 8004ad4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b00:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b02:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b08:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b0a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b10:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	441a      	add	r2, r3
 8004b1c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b48:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	441a      	add	r2, r3
 8004b54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	8013      	strh	r3, [r2, #0]
 8004b6a:	e0bc      	b.n	8004ce6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004b7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d01d      	beq.n	8004bc4 <USB_ActivateEndpoint+0x654>
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	441a      	add	r2, r3
 8004bac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004bb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004bd4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01d      	beq.n	8004c1c <USB_ActivateEndpoint+0x6ac>
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	441a      	add	r2, r3
 8004c04:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	78db      	ldrb	r3, [r3, #3]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d024      	beq.n	8004c6e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	881b      	ldrh	r3, [r3, #0]
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c3a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c3e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c42:	f083 0320 	eor.w	r3, r3, #32
 8004c46:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	441a      	add	r2, r3
 8004c54:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	8013      	strh	r3, [r2, #0]
 8004c6c:	e01d      	b.n	8004caa <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c84:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	441a      	add	r2, r3
 8004c92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	441a      	add	r2, r3
 8004cce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004ce6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3774      	adds	r7, #116	; 0x74
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop

08004cf8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b08d      	sub	sp, #52	; 0x34
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	7b1b      	ldrb	r3, [r3, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f040 808e 	bne.w	8004e28 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	785b      	ldrb	r3, [r3, #1]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d044      	beq.n	8004d9e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	81bb      	strh	r3, [r7, #12]
 8004d22:	89bb      	ldrh	r3, [r7, #12]
 8004d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d01b      	beq.n	8004d64 <USB_DeactivateEndpoint+0x6c>
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d42:	817b      	strh	r3, [r7, #10]
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	441a      	add	r2, r3
 8004d4e:	897b      	ldrh	r3, [r7, #10]
 8004d50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d7a:	813b      	strh	r3, [r7, #8]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	441a      	add	r2, r3
 8004d86:	893b      	ldrh	r3, [r7, #8]
 8004d88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	8013      	strh	r3, [r2, #0]
 8004d9c:	e192      	b.n	80050c4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	827b      	strh	r3, [r7, #18]
 8004dac:	8a7b      	ldrh	r3, [r7, #18]
 8004dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d01b      	beq.n	8004dee <USB_DeactivateEndpoint+0xf6>
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dcc:	823b      	strh	r3, [r7, #16]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	441a      	add	r2, r3
 8004dd8:	8a3b      	ldrh	r3, [r7, #16]
 8004dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004de2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e04:	81fb      	strh	r3, [r7, #14]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	441a      	add	r2, r3
 8004e10:	89fb      	ldrh	r3, [r7, #14]
 8004e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	8013      	strh	r3, [r2, #0]
 8004e26:	e14d      	b.n	80050c4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	785b      	ldrb	r3, [r3, #1]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f040 80a5 	bne.w	8004f7c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	843b      	strh	r3, [r7, #32]
 8004e40:	8c3b      	ldrh	r3, [r7, #32]
 8004e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d01b      	beq.n	8004e82 <USB_DeactivateEndpoint+0x18a>
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4413      	add	r3, r2
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e60:	83fb      	strh	r3, [r7, #30]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	441a      	add	r2, r3
 8004e6c:	8bfb      	ldrh	r3, [r7, #30]
 8004e6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	83bb      	strh	r3, [r7, #28]
 8004e90:	8bbb      	ldrh	r3, [r7, #28]
 8004e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d01b      	beq.n	8004ed2 <USB_DeactivateEndpoint+0x1da>
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb0:	837b      	strh	r3, [r7, #26]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	441a      	add	r2, r3
 8004ebc:	8b7b      	ldrh	r3, [r7, #26]
 8004ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee8:	833b      	strh	r3, [r7, #24]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	441a      	add	r2, r3
 8004ef4:	8b3b      	ldrh	r3, [r7, #24]
 8004ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f20:	82fb      	strh	r3, [r7, #22]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	441a      	add	r2, r3
 8004f2c:	8afb      	ldrh	r3, [r7, #22]
 8004f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f58:	82bb      	strh	r3, [r7, #20]
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	441a      	add	r2, r3
 8004f64:	8abb      	ldrh	r3, [r7, #20]
 8004f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	8013      	strh	r3, [r2, #0]
 8004f7a:	e0a3      	b.n	80050c4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004f8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d01b      	beq.n	8004fcc <USB_DeactivateEndpoint+0x2d4>
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004faa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	441a      	add	r2, r3
 8004fb6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004fda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d01b      	beq.n	800501c <USB_DeactivateEndpoint+0x324>
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffa:	853b      	strh	r3, [r7, #40]	; 0x28
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	441a      	add	r2, r3
 8005006:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800500c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005014:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005018:	b29b      	uxth	r3, r3
 800501a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	881b      	ldrh	r3, [r3, #0]
 8005028:	b29b      	uxth	r3, r3
 800502a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800502e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005032:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	441a      	add	r2, r3
 800503e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005040:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005044:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005048:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800504c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005050:	b29b      	uxth	r3, r3
 8005052:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	b29b      	uxth	r3, r3
 8005062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800506a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	441a      	add	r2, r3
 8005076:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800507c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005088:	b29b      	uxth	r3, r3
 800508a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	b29b      	uxth	r3, r3
 800509a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800509e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a2:	847b      	strh	r3, [r7, #34]	; 0x22
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	441a      	add	r2, r3
 80050ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3734      	adds	r7, #52	; 0x34
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b0c2      	sub	sp, #264	; 0x108
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050e0:	6018      	str	r0, [r3, #0]
 80050e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050ea:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	785b      	ldrb	r3, [r3, #1]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	f040 86b7 	bne.w	8005e6c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80050fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699a      	ldr	r2, [r3, #24]
 800510a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800510e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	429a      	cmp	r2, r3
 8005118:	d908      	bls.n	800512c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800511a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800511e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800512a:	e007      	b.n	800513c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800512c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800513c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	7b1b      	ldrb	r3, [r3, #12]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d13a      	bne.n	80051c2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800514c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6959      	ldr	r1, [r3, #20]
 8005158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800515c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	88da      	ldrh	r2, [r3, #6]
 8005164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005168:	b29b      	uxth	r3, r3
 800516a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800516e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005172:	6800      	ldr	r0, [r0, #0]
 8005174:	f001 fc8c 	bl	8006a90 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800517c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	613b      	str	r3, [r7, #16]
 8005184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005188:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005192:	b29b      	uxth	r3, r3
 8005194:	461a      	mov	r2, r3
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	4413      	add	r3, r2
 800519a:	613b      	str	r3, [r7, #16]
 800519c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	00da      	lsls	r2, r3, #3
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	4413      	add	r3, r2
 80051ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	801a      	strh	r2, [r3, #0]
 80051be:	f000 be1f 	b.w	8005e00 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80051c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	78db      	ldrb	r3, [r3, #3]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	f040 8462 	bne.w	8005a98 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80051d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6a1a      	ldr	r2, [r3, #32]
 80051e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	f240 83df 	bls.w	80059b0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80051f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4413      	add	r3, r2
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	b29b      	uxth	r3, r3
 8005210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005218:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800521c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005220:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800522a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	441a      	add	r2, r3
 8005236:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800523a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800523e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005242:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800524a:	b29b      	uxth	r3, r3
 800524c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800524e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6a1a      	ldr	r2, [r3, #32]
 800525a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800525e:	1ad2      	subs	r2, r2, r3
 8005260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800526c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005270:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800527a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	b29b      	uxth	r3, r3
 800528a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 81c7 	beq.w	8005622 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005298:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	633b      	str	r3, [r7, #48]	; 0x30
 80052a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	785b      	ldrb	r3, [r3, #1]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d177      	bne.n	80053a0 <USB_EPStartXfer+0x2ce>
 80052b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80052bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	461a      	mov	r2, r3
 80052ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d0:	4413      	add	r3, r2
 80052d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	00da      	lsls	r2, r3, #3
 80052e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e4:	4413      	add	r3, r2
 80052e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052ea:	627b      	str	r3, [r7, #36]	; 0x24
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	801a      	strh	r2, [r3, #0]
 80052fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005300:	2b3e      	cmp	r3, #62	; 0x3e
 8005302:	d921      	bls.n	8005348 <USB_EPStartXfer+0x276>
 8005304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005308:	095b      	lsrs	r3, r3, #5
 800530a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800530e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005312:	f003 031f 	and.w	r3, r3, #31
 8005316:	2b00      	cmp	r3, #0
 8005318:	d104      	bne.n	8005324 <USB_EPStartXfer+0x252>
 800531a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800531e:	3b01      	subs	r3, #1
 8005320:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	b29a      	uxth	r2, r3
 800532a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800532e:	b29b      	uxth	r3, r3
 8005330:	029b      	lsls	r3, r3, #10
 8005332:	b29b      	uxth	r3, r3
 8005334:	4313      	orrs	r3, r2
 8005336:	b29b      	uxth	r3, r3
 8005338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800533c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005340:	b29a      	uxth	r2, r3
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	801a      	strh	r2, [r3, #0]
 8005346:	e050      	b.n	80053ea <USB_EPStartXfer+0x318>
 8005348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10a      	bne.n	8005366 <USB_EPStartXfer+0x294>
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	b29b      	uxth	r3, r3
 8005356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800535a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800535e:	b29a      	uxth	r2, r3
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	801a      	strh	r2, [r3, #0]
 8005364:	e041      	b.n	80053ea <USB_EPStartXfer+0x318>
 8005366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800536a:	085b      	lsrs	r3, r3, #1
 800536c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d004      	beq.n	8005386 <USB_EPStartXfer+0x2b4>
 800537c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005380:	3301      	adds	r3, #1
 8005382:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	b29a      	uxth	r2, r3
 800538c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005390:	b29b      	uxth	r3, r3
 8005392:	029b      	lsls	r3, r3, #10
 8005394:	b29b      	uxth	r3, r3
 8005396:	4313      	orrs	r3, r2
 8005398:	b29a      	uxth	r2, r3
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	801a      	strh	r2, [r3, #0]
 800539e:	e024      	b.n	80053ea <USB_EPStartXfer+0x318>
 80053a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	785b      	ldrb	r3, [r3, #1]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d11c      	bne.n	80053ea <USB_EPStartXfer+0x318>
 80053b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053be:	b29b      	uxth	r3, r3
 80053c0:	461a      	mov	r2, r3
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	4413      	add	r3, r2
 80053c6:	633b      	str	r3, [r7, #48]	; 0x30
 80053c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	00da      	lsls	r2, r3, #3
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	4413      	add	r3, r2
 80053da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80053de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80053ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	895b      	ldrh	r3, [r3, #10]
 80053f6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6959      	ldr	r1, [r3, #20]
 8005406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800540a:	b29b      	uxth	r3, r3
 800540c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005410:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005414:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005418:	6800      	ldr	r0, [r0, #0]
 800541a:	f001 fb39 	bl	8006a90 <USB_WritePMA>
            ep->xfer_buff += len;
 800541e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695a      	ldr	r2, [r3, #20]
 800542a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800542e:	441a      	add	r2, r3
 8005430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800543c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6a1a      	ldr	r2, [r3, #32]
 8005448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800544c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	429a      	cmp	r2, r3
 8005456:	d90f      	bls.n	8005478 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800545c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6a1a      	ldr	r2, [r3, #32]
 8005464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005468:	1ad2      	subs	r2, r2, r3
 800546a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800546e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	621a      	str	r2, [r3, #32]
 8005476:	e00e      	b.n	8005496 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800547c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800548c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2200      	movs	r2, #0
 8005494:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800549a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	785b      	ldrb	r3, [r3, #1]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d177      	bne.n	8005596 <USB_EPStartXfer+0x4c4>
 80054a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	61bb      	str	r3, [r7, #24]
 80054b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	4413      	add	r3, r2
 80054c8:	61bb      	str	r3, [r7, #24]
 80054ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	00da      	lsls	r2, r3, #3
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	4413      	add	r3, r2
 80054dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80054e0:	617b      	str	r3, [r7, #20]
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	801a      	strh	r2, [r3, #0]
 80054f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054f6:	2b3e      	cmp	r3, #62	; 0x3e
 80054f8:	d921      	bls.n	800553e <USB_EPStartXfer+0x46c>
 80054fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054fe:	095b      	lsrs	r3, r3, #5
 8005500:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005508:	f003 031f 	and.w	r3, r3, #31
 800550c:	2b00      	cmp	r3, #0
 800550e:	d104      	bne.n	800551a <USB_EPStartXfer+0x448>
 8005510:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005514:	3b01      	subs	r3, #1
 8005516:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	b29a      	uxth	r2, r3
 8005520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005524:	b29b      	uxth	r3, r3
 8005526:	029b      	lsls	r3, r3, #10
 8005528:	b29b      	uxth	r3, r3
 800552a:	4313      	orrs	r3, r2
 800552c:	b29b      	uxth	r3, r3
 800552e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005536:	b29a      	uxth	r2, r3
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	801a      	strh	r2, [r3, #0]
 800553c:	e056      	b.n	80055ec <USB_EPStartXfer+0x51a>
 800553e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10a      	bne.n	800555c <USB_EPStartXfer+0x48a>
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	b29b      	uxth	r3, r3
 800554c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005550:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005554:	b29a      	uxth	r2, r3
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	801a      	strh	r2, [r3, #0]
 800555a:	e047      	b.n	80055ec <USB_EPStartXfer+0x51a>
 800555c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005560:	085b      	lsrs	r3, r3, #1
 8005562:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d004      	beq.n	800557c <USB_EPStartXfer+0x4aa>
 8005572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005576:	3301      	adds	r3, #1
 8005578:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	881b      	ldrh	r3, [r3, #0]
 8005580:	b29a      	uxth	r2, r3
 8005582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005586:	b29b      	uxth	r3, r3
 8005588:	029b      	lsls	r3, r3, #10
 800558a:	b29b      	uxth	r3, r3
 800558c:	4313      	orrs	r3, r2
 800558e:	b29a      	uxth	r2, r3
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	801a      	strh	r2, [r3, #0]
 8005594:	e02a      	b.n	80055ec <USB_EPStartXfer+0x51a>
 8005596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800559a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	785b      	ldrb	r3, [r3, #1]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d122      	bne.n	80055ec <USB_EPStartXfer+0x51a>
 80055a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	623b      	str	r3, [r7, #32]
 80055b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	461a      	mov	r2, r3
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	4413      	add	r3, r2
 80055c8:	623b      	str	r3, [r7, #32]
 80055ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	00da      	lsls	r2, r3, #3
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	4413      	add	r3, r2
 80055dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80055e0:	61fb      	str	r3, [r7, #28]
 80055e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80055ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	891b      	ldrh	r3, [r3, #8]
 80055f8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6959      	ldr	r1, [r3, #20]
 8005608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800560c:	b29b      	uxth	r3, r3
 800560e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005612:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005616:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800561a:	6800      	ldr	r0, [r0, #0]
 800561c:	f001 fa38 	bl	8006a90 <USB_WritePMA>
 8005620:	e3ee      	b.n	8005e00 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005626:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	785b      	ldrb	r3, [r3, #1]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d177      	bne.n	8005722 <USB_EPStartXfer+0x650>
 8005632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005636:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	64bb      	str	r3, [r7, #72]	; 0x48
 800563e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005642:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800564c:	b29b      	uxth	r3, r3
 800564e:	461a      	mov	r2, r3
 8005650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005652:	4413      	add	r3, r2
 8005654:	64bb      	str	r3, [r7, #72]	; 0x48
 8005656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800565a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	00da      	lsls	r2, r3, #3
 8005664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005666:	4413      	add	r3, r2
 8005668:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800566c:	647b      	str	r3, [r7, #68]	; 0x44
 800566e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	b29b      	uxth	r3, r3
 8005674:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005678:	b29a      	uxth	r2, r3
 800567a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800567c:	801a      	strh	r2, [r3, #0]
 800567e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005682:	2b3e      	cmp	r3, #62	; 0x3e
 8005684:	d921      	bls.n	80056ca <USB_EPStartXfer+0x5f8>
 8005686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800568a:	095b      	lsrs	r3, r3, #5
 800568c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005694:	f003 031f 	and.w	r3, r3, #31
 8005698:	2b00      	cmp	r3, #0
 800569a:	d104      	bne.n	80056a6 <USB_EPStartXfer+0x5d4>
 800569c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056a0:	3b01      	subs	r3, #1
 80056a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	029b      	lsls	r3, r3, #10
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	4313      	orrs	r3, r2
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056c6:	801a      	strh	r2, [r3, #0]
 80056c8:	e056      	b.n	8005778 <USB_EPStartXfer+0x6a6>
 80056ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <USB_EPStartXfer+0x616>
 80056d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056e4:	801a      	strh	r2, [r3, #0]
 80056e6:	e047      	b.n	8005778 <USB_EPStartXfer+0x6a6>
 80056e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ec:	085b      	lsrs	r3, r3, #1
 80056ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d004      	beq.n	8005708 <USB_EPStartXfer+0x636>
 80056fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005702:	3301      	adds	r3, #1
 8005704:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	b29a      	uxth	r2, r3
 800570e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005712:	b29b      	uxth	r3, r3
 8005714:	029b      	lsls	r3, r3, #10
 8005716:	b29b      	uxth	r3, r3
 8005718:	4313      	orrs	r3, r2
 800571a:	b29a      	uxth	r2, r3
 800571c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800571e:	801a      	strh	r2, [r3, #0]
 8005720:	e02a      	b.n	8005778 <USB_EPStartXfer+0x6a6>
 8005722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	785b      	ldrb	r3, [r3, #1]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d122      	bne.n	8005778 <USB_EPStartXfer+0x6a6>
 8005732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005736:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	653b      	str	r3, [r7, #80]	; 0x50
 800573e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005742:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800574c:	b29b      	uxth	r3, r3
 800574e:	461a      	mov	r2, r3
 8005750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005752:	4413      	add	r3, r2
 8005754:	653b      	str	r3, [r7, #80]	; 0x50
 8005756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800575a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	00da      	lsls	r2, r3, #3
 8005764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005766:	4413      	add	r3, r2
 8005768:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800576c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800576e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005772:	b29a      	uxth	r2, r3
 8005774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005776:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800577c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	891b      	ldrh	r3, [r3, #8]
 8005784:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800578c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6959      	ldr	r1, [r3, #20]
 8005794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005798:	b29b      	uxth	r3, r3
 800579a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800579e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80057a2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80057a6:	6800      	ldr	r0, [r0, #0]
 80057a8:	f001 f972 	bl	8006a90 <USB_WritePMA>
            ep->xfer_buff += len;
 80057ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	695a      	ldr	r2, [r3, #20]
 80057b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057bc:	441a      	add	r2, r3
 80057be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80057ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6a1a      	ldr	r2, [r3, #32]
 80057d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d90f      	bls.n	8005806 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80057e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6a1a      	ldr	r2, [r3, #32]
 80057f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057f6:	1ad2      	subs	r2, r2, r3
 80057f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	621a      	str	r2, [r3, #32]
 8005804:	e00e      	b.n	8005824 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800580a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800581a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2200      	movs	r2, #0
 8005822:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005828:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	643b      	str	r3, [r7, #64]	; 0x40
 8005830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	785b      	ldrb	r3, [r3, #1]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d177      	bne.n	8005930 <USB_EPStartXfer+0x85e>
 8005840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005844:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	63bb      	str	r3, [r7, #56]	; 0x38
 800584c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005850:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800585a:	b29b      	uxth	r3, r3
 800585c:	461a      	mov	r2, r3
 800585e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005860:	4413      	add	r3, r2
 8005862:	63bb      	str	r3, [r7, #56]	; 0x38
 8005864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	00da      	lsls	r2, r3, #3
 8005872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005874:	4413      	add	r3, r2
 8005876:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800587a:	637b      	str	r3, [r7, #52]	; 0x34
 800587c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	b29b      	uxth	r3, r3
 8005882:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005886:	b29a      	uxth	r2, r3
 8005888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588a:	801a      	strh	r2, [r3, #0]
 800588c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005890:	2b3e      	cmp	r3, #62	; 0x3e
 8005892:	d921      	bls.n	80058d8 <USB_EPStartXfer+0x806>
 8005894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005898:	095b      	lsrs	r3, r3, #5
 800589a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800589e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058a2:	f003 031f 	and.w	r3, r3, #31
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d104      	bne.n	80058b4 <USB_EPStartXfer+0x7e2>
 80058aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ae:	3b01      	subs	r3, #1
 80058b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80058b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058be:	b29b      	uxth	r3, r3
 80058c0:	029b      	lsls	r3, r3, #10
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	4313      	orrs	r3, r2
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d4:	801a      	strh	r2, [r3, #0]
 80058d6:	e050      	b.n	800597a <USB_EPStartXfer+0x8a8>
 80058d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10a      	bne.n	80058f6 <USB_EPStartXfer+0x824>
 80058e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f2:	801a      	strh	r2, [r3, #0]
 80058f4:	e041      	b.n	800597a <USB_EPStartXfer+0x8a8>
 80058f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058fa:	085b      	lsrs	r3, r3, #1
 80058fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	d004      	beq.n	8005916 <USB_EPStartXfer+0x844>
 800590c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005910:	3301      	adds	r3, #1
 8005912:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	b29a      	uxth	r2, r3
 800591c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005920:	b29b      	uxth	r3, r3
 8005922:	029b      	lsls	r3, r3, #10
 8005924:	b29b      	uxth	r3, r3
 8005926:	4313      	orrs	r3, r2
 8005928:	b29a      	uxth	r2, r3
 800592a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592c:	801a      	strh	r2, [r3, #0]
 800592e:	e024      	b.n	800597a <USB_EPStartXfer+0x8a8>
 8005930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	785b      	ldrb	r3, [r3, #1]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d11c      	bne.n	800597a <USB_EPStartXfer+0x8a8>
 8005940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005944:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800594e:	b29b      	uxth	r3, r3
 8005950:	461a      	mov	r2, r3
 8005952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005954:	4413      	add	r3, r2
 8005956:	643b      	str	r3, [r7, #64]	; 0x40
 8005958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800595c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	00da      	lsls	r2, r3, #3
 8005966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005968:	4413      	add	r3, r2
 800596a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800596e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005974:	b29a      	uxth	r2, r3
 8005976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005978:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800597a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800597e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	895b      	ldrh	r3, [r3, #10]
 8005986:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800598a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800598e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6959      	ldr	r1, [r3, #20]
 8005996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800599a:	b29b      	uxth	r3, r3
 800599c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80059a0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80059a4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80059a8:	6800      	ldr	r0, [r0, #0]
 80059aa:	f001 f871 	bl	8006a90 <USB_WritePMA>
 80059ae:	e227      	b.n	8005e00 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80059b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80059c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	b29b      	uxth	r3, r3
 80059de:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80059e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80059ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	441a      	add	r2, r3
 8005a04:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	461a      	mov	r2, r3
 8005a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a3c:	4413      	add	r3, r2
 8005a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	00da      	lsls	r2, r3, #3
 8005a4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a50:	4413      	add	r3, r2
 8005a52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a56:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a60:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	891b      	ldrh	r3, [r3, #8]
 8005a6e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6959      	ldr	r1, [r3, #20]
 8005a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005a88:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005a8c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005a90:	6800      	ldr	r0, [r0, #0]
 8005a92:	f000 fffd 	bl	8006a90 <USB_WritePMA>
 8005a96:	e1b3      	b.n	8005e00 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6a1a      	ldr	r2, [r3, #32]
 8005aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aa8:	1ad2      	subs	r2, r2, r3
 8005aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 80c6 	beq.w	8005c6a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	673b      	str	r3, [r7, #112]	; 0x70
 8005aea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	785b      	ldrb	r3, [r3, #1]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d177      	bne.n	8005bea <USB_EPStartXfer+0xb18>
 8005afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005afe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	461a      	mov	r2, r3
 8005b18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b1a:	4413      	add	r3, r2
 8005b1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	00da      	lsls	r2, r3, #3
 8005b2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b2e:	4413      	add	r3, r2
 8005b30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b34:	667b      	str	r3, [r7, #100]	; 0x64
 8005b36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b44:	801a      	strh	r2, [r3, #0]
 8005b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b4a:	2b3e      	cmp	r3, #62	; 0x3e
 8005b4c:	d921      	bls.n	8005b92 <USB_EPStartXfer+0xac0>
 8005b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b52:	095b      	lsrs	r3, r3, #5
 8005b54:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b5c:	f003 031f 	and.w	r3, r3, #31
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d104      	bne.n	8005b6e <USB_EPStartXfer+0xa9c>
 8005b64:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	029b      	lsls	r3, r3, #10
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b8e:	801a      	strh	r2, [r3, #0]
 8005b90:	e050      	b.n	8005c34 <USB_EPStartXfer+0xb62>
 8005b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10a      	bne.n	8005bb0 <USB_EPStartXfer+0xade>
 8005b9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bac:	801a      	strh	r2, [r3, #0]
 8005bae:	e041      	b.n	8005c34 <USB_EPStartXfer+0xb62>
 8005bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bb4:	085b      	lsrs	r3, r3, #1
 8005bb6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d004      	beq.n	8005bd0 <USB_EPStartXfer+0xafe>
 8005bc6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bca:	3301      	adds	r3, #1
 8005bcc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	029b      	lsls	r3, r3, #10
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	4313      	orrs	r3, r2
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005be6:	801a      	strh	r2, [r3, #0]
 8005be8:	e024      	b.n	8005c34 <USB_EPStartXfer+0xb62>
 8005bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	785b      	ldrb	r3, [r3, #1]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d11c      	bne.n	8005c34 <USB_EPStartXfer+0xb62>
 8005bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c0e:	4413      	add	r3, r2
 8005c10:	673b      	str	r3, [r7, #112]	; 0x70
 8005c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	00da      	lsls	r2, r3, #3
 8005c20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c22:	4413      	add	r3, r2
 8005c24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c32:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	895b      	ldrh	r3, [r3, #10]
 8005c40:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6959      	ldr	r1, [r3, #20]
 8005c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005c5a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005c5e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005c62:	6800      	ldr	r0, [r0, #0]
 8005c64:	f000 ff14 	bl	8006a90 <USB_WritePMA>
 8005c68:	e0ca      	b.n	8005e00 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	785b      	ldrb	r3, [r3, #1]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d177      	bne.n	8005d6a <USB_EPStartXfer+0xc98>
 8005c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	461a      	mov	r2, r3
 8005c98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c9a:	4413      	add	r3, r2
 8005c9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	00da      	lsls	r2, r3, #3
 8005cac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cae:	4413      	add	r3, r2
 8005cb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005cb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005cb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cb8:	881b      	ldrh	r3, [r3, #0]
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cc4:	801a      	strh	r2, [r3, #0]
 8005cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cca:	2b3e      	cmp	r3, #62	; 0x3e
 8005ccc:	d921      	bls.n	8005d12 <USB_EPStartXfer+0xc40>
 8005cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cd2:	095b      	lsrs	r3, r3, #5
 8005cd4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cdc:	f003 031f 	and.w	r3, r3, #31
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d104      	bne.n	8005cee <USB_EPStartXfer+0xc1c>
 8005ce4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005cee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	029b      	lsls	r3, r3, #10
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d0e:	801a      	strh	r2, [r3, #0]
 8005d10:	e05c      	b.n	8005dcc <USB_EPStartXfer+0xcfa>
 8005d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10a      	bne.n	8005d30 <USB_EPStartXfer+0xc5e>
 8005d1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d2c:	801a      	strh	r2, [r3, #0]
 8005d2e:	e04d      	b.n	8005dcc <USB_EPStartXfer+0xcfa>
 8005d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d34:	085b      	lsrs	r3, r3, #1
 8005d36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d004      	beq.n	8005d50 <USB_EPStartXfer+0xc7e>
 8005d46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	029b      	lsls	r3, r3, #10
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	4313      	orrs	r3, r2
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d66:	801a      	strh	r2, [r3, #0]
 8005d68:	e030      	b.n	8005dcc <USB_EPStartXfer+0xcfa>
 8005d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	785b      	ldrb	r3, [r3, #1]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d128      	bne.n	8005dcc <USB_EPStartXfer+0xcfa>
 8005d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	461a      	mov	r2, r3
 8005d9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d9e:	4413      	add	r3, r2
 8005da0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	00da      	lsls	r2, r3, #3
 8005db2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005db6:	4413      	add	r3, r2
 8005db8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005dbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005dca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	891b      	ldrh	r3, [r3, #8]
 8005dd8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6959      	ldr	r1, [r3, #20]
 8005de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005df2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005df6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005dfa:	6800      	ldr	r0, [r0, #0]
 8005dfc:	f000 fe48 	bl	8006a90 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	4413      	add	r3, r2
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e26:	817b      	strh	r3, [r7, #10]
 8005e28:	897b      	ldrh	r3, [r7, #10]
 8005e2a:	f083 0310 	eor.w	r3, r3, #16
 8005e2e:	817b      	strh	r3, [r7, #10]
 8005e30:	897b      	ldrh	r3, [r7, #10]
 8005e32:	f083 0320 	eor.w	r3, r3, #32
 8005e36:	817b      	strh	r3, [r7, #10]
 8005e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	441a      	add	r2, r3
 8005e52:	897b      	ldrh	r3, [r7, #10]
 8005e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	8013      	strh	r3, [r2, #0]
 8005e68:	f000 bcde 	b.w	8006828 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	7b1b      	ldrb	r3, [r3, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f040 80bb 	bne.w	8005ff4 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	699a      	ldr	r2, [r3, #24]
 8005e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d917      	bls.n	8005eca <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	699a      	ldr	r2, [r3, #24]
 8005eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eba:	1ad2      	subs	r2, r2, r3
 8005ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	619a      	str	r2, [r3, #24]
 8005ec8:	e00e      	b.n	8005ee8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005efa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	461a      	mov	r2, r3
 8005f08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	00da      	lsls	r2, r3, #3
 8005f20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f24:	4413      	add	r3, r2
 8005f26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f40:	801a      	strh	r2, [r3, #0]
 8005f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f46:	2b3e      	cmp	r3, #62	; 0x3e
 8005f48:	d924      	bls.n	8005f94 <USB_EPStartXfer+0xec2>
 8005f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f58:	f003 031f 	and.w	r3, r3, #31
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d104      	bne.n	8005f6a <USB_EPStartXfer+0xe98>
 8005f60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f64:	3b01      	subs	r3, #1
 8005f66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f6e:	881b      	ldrh	r3, [r3, #0]
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	029b      	lsls	r3, r3, #10
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f8e:	801a      	strh	r2, [r3, #0]
 8005f90:	f000 bc10 	b.w	80067b4 <USB_EPStartXfer+0x16e2>
 8005f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10c      	bne.n	8005fb6 <USB_EPStartXfer+0xee4>
 8005f9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fb2:	801a      	strh	r2, [r3, #0]
 8005fb4:	e3fe      	b.n	80067b4 <USB_EPStartXfer+0x16e2>
 8005fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fba:	085b      	lsrs	r3, r3, #1
 8005fbc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d004      	beq.n	8005fd6 <USB_EPStartXfer+0xf04>
 8005fcc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	029b      	lsls	r3, r3, #10
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ff0:	801a      	strh	r2, [r3, #0]
 8005ff2:	e3df      	b.n	80067b4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	78db      	ldrb	r3, [r3, #3]
 8006000:	2b02      	cmp	r3, #2
 8006002:	f040 8218 	bne.w	8006436 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800600a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	785b      	ldrb	r3, [r3, #1]
 8006012:	2b00      	cmp	r3, #0
 8006014:	f040 809d 	bne.w	8006152 <USB_EPStartXfer+0x1080>
 8006018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800601c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800602a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006034:	b29b      	uxth	r3, r3
 8006036:	461a      	mov	r2, r3
 8006038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800603c:	4413      	add	r3, r2
 800603e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006046:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	00da      	lsls	r2, r3, #3
 8006050:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006054:	4413      	add	r3, r2
 8006056:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800605a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800605e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	b29b      	uxth	r3, r3
 8006066:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800606a:	b29a      	uxth	r2, r3
 800606c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006070:	801a      	strh	r2, [r3, #0]
 8006072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006076:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	2b3e      	cmp	r3, #62	; 0x3e
 8006080:	d92b      	bls.n	80060da <USB_EPStartXfer+0x1008>
 8006082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006086:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	095b      	lsrs	r3, r3, #5
 8006090:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	f003 031f 	and.w	r3, r3, #31
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d104      	bne.n	80060b2 <USB_EPStartXfer+0xfe0>
 80060a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ac:	3b01      	subs	r3, #1
 80060ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060b6:	881b      	ldrh	r3, [r3, #0]
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060be:	b29b      	uxth	r3, r3
 80060c0:	029b      	lsls	r3, r3, #10
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	4313      	orrs	r3, r2
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060d6:	801a      	strh	r2, [r3, #0]
 80060d8:	e070      	b.n	80061bc <USB_EPStartXfer+0x10ea>
 80060da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10c      	bne.n	8006104 <USB_EPStartXfer+0x1032>
 80060ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006100:	801a      	strh	r2, [r3, #0]
 8006102:	e05b      	b.n	80061bc <USB_EPStartXfer+0x10ea>
 8006104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	085b      	lsrs	r3, r3, #1
 8006112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b00      	cmp	r3, #0
 8006128:	d004      	beq.n	8006134 <USB_EPStartXfer+0x1062>
 800612a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612e:	3301      	adds	r3, #1
 8006130:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006134:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	b29a      	uxth	r2, r3
 800613c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006140:	b29b      	uxth	r3, r3
 8006142:	029b      	lsls	r3, r3, #10
 8006144:	b29b      	uxth	r3, r3
 8006146:	4313      	orrs	r3, r2
 8006148:	b29a      	uxth	r2, r3
 800614a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800614e:	801a      	strh	r2, [r3, #0]
 8006150:	e034      	b.n	80061bc <USB_EPStartXfer+0x10ea>
 8006152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	785b      	ldrb	r3, [r3, #1]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d12c      	bne.n	80061bc <USB_EPStartXfer+0x10ea>
 8006162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006166:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006174:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800617e:	b29b      	uxth	r3, r3
 8006180:	461a      	mov	r2, r3
 8006182:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006186:	4413      	add	r3, r2
 8006188:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800618c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006190:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	00da      	lsls	r2, r3, #3
 800619a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800619e:	4413      	add	r3, r2
 80061a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061ba:	801a      	strh	r2, [r3, #0]
 80061bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80061ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	785b      	ldrb	r3, [r3, #1]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f040 809d 	bne.w	8006316 <USB_EPStartXfer+0x1244>
 80061dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	461a      	mov	r2, r3
 80061fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006200:	4413      	add	r3, r2
 8006202:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800620a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	00da      	lsls	r2, r3, #3
 8006214:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006218:	4413      	add	r3, r2
 800621a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800621e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006222:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	b29b      	uxth	r3, r3
 800622a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800622e:	b29a      	uxth	r2, r3
 8006230:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006234:	801a      	strh	r2, [r3, #0]
 8006236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800623a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	2b3e      	cmp	r3, #62	; 0x3e
 8006244:	d92b      	bls.n	800629e <USB_EPStartXfer+0x11cc>
 8006246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800624a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	095b      	lsrs	r3, r3, #5
 8006254:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800625c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	f003 031f 	and.w	r3, r3, #31
 8006268:	2b00      	cmp	r3, #0
 800626a:	d104      	bne.n	8006276 <USB_EPStartXfer+0x11a4>
 800626c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006270:	3b01      	subs	r3, #1
 8006272:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006276:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	b29a      	uxth	r2, r3
 800627e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006282:	b29b      	uxth	r3, r3
 8006284:	029b      	lsls	r3, r3, #10
 8006286:	b29b      	uxth	r3, r3
 8006288:	4313      	orrs	r3, r2
 800628a:	b29b      	uxth	r3, r3
 800628c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006294:	b29a      	uxth	r2, r3
 8006296:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800629a:	801a      	strh	r2, [r3, #0]
 800629c:	e069      	b.n	8006372 <USB_EPStartXfer+0x12a0>
 800629e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10c      	bne.n	80062c8 <USB_EPStartXfer+0x11f6>
 80062ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062b2:	881b      	ldrh	r3, [r3, #0]
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062be:	b29a      	uxth	r2, r3
 80062c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062c4:	801a      	strh	r2, [r3, #0]
 80062c6:	e054      	b.n	8006372 <USB_EPStartXfer+0x12a0>
 80062c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	085b      	lsrs	r3, r3, #1
 80062d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d004      	beq.n	80062f8 <USB_EPStartXfer+0x1226>
 80062ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f2:	3301      	adds	r3, #1
 80062f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	b29a      	uxth	r2, r3
 8006300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006304:	b29b      	uxth	r3, r3
 8006306:	029b      	lsls	r3, r3, #10
 8006308:	b29b      	uxth	r3, r3
 800630a:	4313      	orrs	r3, r2
 800630c:	b29a      	uxth	r2, r3
 800630e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006312:	801a      	strh	r2, [r3, #0]
 8006314:	e02d      	b.n	8006372 <USB_EPStartXfer+0x12a0>
 8006316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800631a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	785b      	ldrb	r3, [r3, #1]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d125      	bne.n	8006372 <USB_EPStartXfer+0x12a0>
 8006326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800632a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006334:	b29b      	uxth	r3, r3
 8006336:	461a      	mov	r2, r3
 8006338:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800633c:	4413      	add	r3, r2
 800633e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	00da      	lsls	r2, r3, #3
 8006350:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006354:	4413      	add	r3, r2
 8006356:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800635a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800635e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	b29a      	uxth	r2, r3
 800636c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006370:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 8218 	beq.w	80067b4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006388:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	881b      	ldrh	r3, [r3, #0]
 80063a0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063a4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80063a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d005      	beq.n	80063bc <USB_EPStartXfer+0x12ea>
 80063b0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80063b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10d      	bne.n	80063d8 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063bc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80063c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f040 81f5 	bne.w	80067b4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80063ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f040 81ee 	bne.w	80067b4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80063d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4413      	add	r3, r2
 80063f2:	881b      	ldrh	r3, [r3, #0]
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fe:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006406:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	441a      	add	r2, r3
 800641c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800642c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006430:	b29b      	uxth	r3, r3
 8006432:	8013      	strh	r3, [r2, #0]
 8006434:	e1be      	b.n	80067b4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800643a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	78db      	ldrb	r3, [r3, #3]
 8006442:	2b01      	cmp	r3, #1
 8006444:	f040 81b4 	bne.w	80067b0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800644c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	699a      	ldr	r2, [r3, #24]
 8006454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	429a      	cmp	r2, r3
 8006462:	d917      	bls.n	8006494 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	699a      	ldr	r2, [r3, #24]
 8006480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006484:	1ad2      	subs	r2, r2, r3
 8006486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800648a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	619a      	str	r2, [r3, #24]
 8006492:	e00e      	b.n	80064b2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80064a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2200      	movs	r2, #0
 80064b0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80064b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	785b      	ldrb	r3, [r3, #1]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f040 8085 	bne.w	80065ce <USB_EPStartXfer+0x14fc>
 80064c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	461a      	mov	r2, r3
 80064e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064e8:	4413      	add	r3, r2
 80064ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	00da      	lsls	r2, r3, #3
 80064fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006500:	4413      	add	r3, r2
 8006502:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006506:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800650a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	b29b      	uxth	r3, r3
 8006512:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006516:	b29a      	uxth	r2, r3
 8006518:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800651c:	801a      	strh	r2, [r3, #0]
 800651e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006522:	2b3e      	cmp	r3, #62	; 0x3e
 8006524:	d923      	bls.n	800656e <USB_EPStartXfer+0x149c>
 8006526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800652a:	095b      	lsrs	r3, r3, #5
 800652c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006534:	f003 031f 	and.w	r3, r3, #31
 8006538:	2b00      	cmp	r3, #0
 800653a:	d104      	bne.n	8006546 <USB_EPStartXfer+0x1474>
 800653c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006540:	3b01      	subs	r3, #1
 8006542:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006546:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	b29a      	uxth	r2, r3
 800654e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006552:	b29b      	uxth	r3, r3
 8006554:	029b      	lsls	r3, r3, #10
 8006556:	b29b      	uxth	r3, r3
 8006558:	4313      	orrs	r3, r2
 800655a:	b29b      	uxth	r3, r3
 800655c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006564:	b29a      	uxth	r2, r3
 8006566:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800656a:	801a      	strh	r2, [r3, #0]
 800656c:	e060      	b.n	8006630 <USB_EPStartXfer+0x155e>
 800656e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10c      	bne.n	8006590 <USB_EPStartXfer+0x14be>
 8006576:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	b29b      	uxth	r3, r3
 800657e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006586:	b29a      	uxth	r2, r3
 8006588:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800658c:	801a      	strh	r2, [r3, #0]
 800658e:	e04f      	b.n	8006630 <USB_EPStartXfer+0x155e>
 8006590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006594:	085b      	lsrs	r3, r3, #1
 8006596:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800659a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d004      	beq.n	80065b0 <USB_EPStartXfer+0x14de>
 80065a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065aa:	3301      	adds	r3, #1
 80065ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80065b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065bc:	b29b      	uxth	r3, r3
 80065be:	029b      	lsls	r3, r3, #10
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	4313      	orrs	r3, r2
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065ca:	801a      	strh	r2, [r3, #0]
 80065cc:	e030      	b.n	8006630 <USB_EPStartXfer+0x155e>
 80065ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	785b      	ldrb	r3, [r3, #1]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d128      	bne.n	8006630 <USB_EPStartXfer+0x155e>
 80065de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80065ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	461a      	mov	r2, r3
 80065fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006602:	4413      	add	r3, r2
 8006604:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800660c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	00da      	lsls	r2, r3, #3
 8006616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800661a:	4413      	add	r3, r2
 800661c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006620:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006628:	b29a      	uxth	r2, r3
 800662a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800662e:	801a      	strh	r2, [r3, #0]
 8006630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006634:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800663e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	785b      	ldrb	r3, [r3, #1]
 800664a:	2b00      	cmp	r3, #0
 800664c:	f040 8085 	bne.w	800675a <USB_EPStartXfer+0x1688>
 8006650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006654:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800665e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006662:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800666c:	b29b      	uxth	r3, r3
 800666e:	461a      	mov	r2, r3
 8006670:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006674:	4413      	add	r3, r2
 8006676:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800667a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800667e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	00da      	lsls	r2, r3, #3
 8006688:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800668c:	4413      	add	r3, r2
 800668e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006692:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006696:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	b29b      	uxth	r3, r3
 800669e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066a8:	801a      	strh	r2, [r3, #0]
 80066aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ae:	2b3e      	cmp	r3, #62	; 0x3e
 80066b0:	d923      	bls.n	80066fa <USB_EPStartXfer+0x1628>
 80066b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066b6:	095b      	lsrs	r3, r3, #5
 80066b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c0:	f003 031f 	and.w	r3, r3, #31
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d104      	bne.n	80066d2 <USB_EPStartXfer+0x1600>
 80066c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066cc:	3b01      	subs	r3, #1
 80066ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b29a      	uxth	r2, r3
 80066da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066de:	b29b      	uxth	r3, r3
 80066e0:	029b      	lsls	r3, r3, #10
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	4313      	orrs	r3, r2
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066f6:	801a      	strh	r2, [r3, #0]
 80066f8:	e05c      	b.n	80067b4 <USB_EPStartXfer+0x16e2>
 80066fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10c      	bne.n	800671c <USB_EPStartXfer+0x164a>
 8006702:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	b29b      	uxth	r3, r3
 800670a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800670e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006712:	b29a      	uxth	r2, r3
 8006714:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006718:	801a      	strh	r2, [r3, #0]
 800671a:	e04b      	b.n	80067b4 <USB_EPStartXfer+0x16e2>
 800671c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006720:	085b      	lsrs	r3, r3, #1
 8006722:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b00      	cmp	r3, #0
 8006730:	d004      	beq.n	800673c <USB_EPStartXfer+0x166a>
 8006732:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006736:	3301      	adds	r3, #1
 8006738:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800673c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006740:	881b      	ldrh	r3, [r3, #0]
 8006742:	b29a      	uxth	r2, r3
 8006744:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006748:	b29b      	uxth	r3, r3
 800674a:	029b      	lsls	r3, r3, #10
 800674c:	b29b      	uxth	r3, r3
 800674e:	4313      	orrs	r3, r2
 8006750:	b29a      	uxth	r2, r3
 8006752:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006756:	801a      	strh	r2, [r3, #0]
 8006758:	e02c      	b.n	80067b4 <USB_EPStartXfer+0x16e2>
 800675a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	785b      	ldrb	r3, [r3, #1]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d124      	bne.n	80067b4 <USB_EPStartXfer+0x16e2>
 800676a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800676e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006778:	b29b      	uxth	r3, r3
 800677a:	461a      	mov	r2, r3
 800677c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006780:	4413      	add	r3, r2
 8006782:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800678a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	00da      	lsls	r2, r3, #3
 8006794:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006798:	4413      	add	r3, r2
 800679a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800679e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067ac:	801a      	strh	r2, [r3, #0]
 80067ae:	e001      	b.n	80067b4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e03a      	b.n	800682a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067da:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80067de:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80067e2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067e6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80067ea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80067ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067f2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80067f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	441a      	add	r2, r3
 8006810:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800681c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006824:	b29b      	uxth	r3, r3
 8006826:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	785b      	ldrb	r3, [r3, #1]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d020      	beq.n	8006888 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	b29b      	uxth	r3, r3
 8006854:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800685c:	81bb      	strh	r3, [r7, #12]
 800685e:	89bb      	ldrh	r3, [r7, #12]
 8006860:	f083 0310 	eor.w	r3, r3, #16
 8006864:	81bb      	strh	r3, [r7, #12]
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	441a      	add	r2, r3
 8006870:	89bb      	ldrh	r3, [r7, #12]
 8006872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800687a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800687e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006882:	b29b      	uxth	r3, r3
 8006884:	8013      	strh	r3, [r2, #0]
 8006886:	e01f      	b.n	80068c8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	881b      	ldrh	r3, [r3, #0]
 8006894:	b29b      	uxth	r3, r3
 8006896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800689a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800689e:	81fb      	strh	r3, [r7, #14]
 80068a0:	89fb      	ldrh	r3, [r7, #14]
 80068a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068a6:	81fb      	strh	r3, [r7, #14]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	441a      	add	r2, r3
 80068b2:	89fb      	ldrh	r3, [r7, #14]
 80068b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3714      	adds	r7, #20
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b087      	sub	sp, #28
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	7b1b      	ldrb	r3, [r3, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f040 809d 	bne.w	8006a24 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	785b      	ldrb	r3, [r3, #1]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d04c      	beq.n	800698c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	881b      	ldrh	r3, [r3, #0]
 80068fe:	823b      	strh	r3, [r7, #16]
 8006900:	8a3b      	ldrh	r3, [r7, #16]
 8006902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006906:	2b00      	cmp	r3, #0
 8006908:	d01b      	beq.n	8006942 <USB_EPClearStall+0x6c>
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4413      	add	r3, r2
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	b29b      	uxth	r3, r3
 8006918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800691c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006920:	81fb      	strh	r3, [r7, #14]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	441a      	add	r2, r3
 800692c:	89fb      	ldrh	r3, [r7, #14]
 800692e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800693a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800693e:	b29b      	uxth	r3, r3
 8006940:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	78db      	ldrb	r3, [r3, #3]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d06c      	beq.n	8006a24 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	b29b      	uxth	r3, r3
 8006958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006960:	81bb      	strh	r3, [r7, #12]
 8006962:	89bb      	ldrh	r3, [r7, #12]
 8006964:	f083 0320 	eor.w	r3, r3, #32
 8006968:	81bb      	strh	r3, [r7, #12]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	441a      	add	r2, r3
 8006974:	89bb      	ldrh	r3, [r7, #12]
 8006976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800697a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800697e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006986:	b29b      	uxth	r3, r3
 8006988:	8013      	strh	r3, [r2, #0]
 800698a:	e04b      	b.n	8006a24 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4413      	add	r3, r2
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	82fb      	strh	r3, [r7, #22]
 800699a:	8afb      	ldrh	r3, [r7, #22]
 800699c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d01b      	beq.n	80069dc <USB_EPClearStall+0x106>
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	881b      	ldrh	r3, [r3, #0]
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ba:	82bb      	strh	r3, [r7, #20]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	441a      	add	r2, r3
 80069c6:	8abb      	ldrh	r3, [r7, #20]
 80069c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d8:	b29b      	uxth	r3, r3
 80069da:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	881b      	ldrh	r3, [r3, #0]
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f2:	827b      	strh	r3, [r7, #18]
 80069f4:	8a7b      	ldrh	r3, [r7, #18]
 80069f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069fa:	827b      	strh	r3, [r7, #18]
 80069fc:	8a7b      	ldrh	r3, [r7, #18]
 80069fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a02:	827b      	strh	r3, [r7, #18]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	441a      	add	r2, r3
 8006a0e:	8a7b      	ldrh	r3, [r7, #18]
 8006a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	371c      	adds	r7, #28
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b083      	sub	sp, #12
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a3e:	78fb      	ldrb	r3, [r7, #3]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d103      	bne.n	8006a4c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2280      	movs	r2, #128	; 0x80
 8006a48:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006a82:	68fb      	ldr	r3, [r7, #12]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b08b      	sub	sp, #44	; 0x2c
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	80fb      	strh	r3, [r7, #6]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006aa6:	88bb      	ldrh	r3, [r7, #4]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	085b      	lsrs	r3, r3, #1
 8006aac:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ab6:	88fa      	ldrh	r2, [r7, #6]
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ac0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ac6:	e01b      	b.n	8006b00 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	021b      	lsls	r3, r3, #8
 8006ad6:	b21a      	sxth	r2, r3
 8006ad8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	b21b      	sxth	r3, r3
 8006ae0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	8a7a      	ldrh	r2, [r7, #18]
 8006ae6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	3302      	adds	r3, #2
 8006aec:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	3301      	adds	r3, #1
 8006af2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	3301      	adds	r3, #1
 8006af8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	3b01      	subs	r3, #1
 8006afe:	627b      	str	r3, [r7, #36]	; 0x24
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1e0      	bne.n	8006ac8 <USB_WritePMA+0x38>
  }
}
 8006b06:	bf00      	nop
 8006b08:	bf00      	nop
 8006b0a:	372c      	adds	r7, #44	; 0x2c
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b08b      	sub	sp, #44	; 0x2c
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	4611      	mov	r1, r2
 8006b20:	461a      	mov	r2, r3
 8006b22:	460b      	mov	r3, r1
 8006b24:	80fb      	strh	r3, [r7, #6]
 8006b26:	4613      	mov	r3, r2
 8006b28:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b2a:	88bb      	ldrh	r3, [r7, #4]
 8006b2c:	085b      	lsrs	r3, r3, #1
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b3a:	88fa      	ldrh	r2, [r7, #6]
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b44:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	627b      	str	r3, [r7, #36]	; 0x24
 8006b4a:	e018      	b.n	8006b7e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	3302      	adds	r3, #2
 8006b58:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	3301      	adds	r3, #1
 8006b66:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	0a1b      	lsrs	r3, r3, #8
 8006b6c:	b2da      	uxtb	r2, r3
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	3301      	adds	r3, #1
 8006b76:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1e3      	bne.n	8006b4c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006b84:	88bb      	ldrh	r3, [r7, #4]
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d007      	beq.n	8006ba0 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	881b      	ldrh	r3, [r3, #0]
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	701a      	strb	r2, [r3, #0]
  }
}
 8006ba0:	bf00      	nop
 8006ba2:	372c      	adds	r7, #44	; 0x2c
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	7c1b      	ldrb	r3, [r3, #16]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d115      	bne.n	8006bf0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bc8:	2202      	movs	r2, #2
 8006bca:	2181      	movs	r1, #129	; 0x81
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f001 fe92 	bl	80088f6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bdc:	2202      	movs	r2, #2
 8006bde:	2101      	movs	r1, #1
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f001 fe88 	bl	80088f6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006bee:	e012      	b.n	8006c16 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006bf0:	2340      	movs	r3, #64	; 0x40
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	2181      	movs	r1, #129	; 0x81
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f001 fe7d 	bl	80088f6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c02:	2340      	movs	r3, #64	; 0x40
 8006c04:	2202      	movs	r2, #2
 8006c06:	2101      	movs	r1, #1
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f001 fe74 	bl	80088f6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c16:	2308      	movs	r3, #8
 8006c18:	2203      	movs	r2, #3
 8006c1a:	2182      	movs	r1, #130	; 0x82
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f001 fe6a 	bl	80088f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006c28:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006c2c:	f001 ff8c 	bl	8008b48 <USBD_static_malloc>
 8006c30:	4602      	mov	r2, r0
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d102      	bne.n	8006c48 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006c42:	2301      	movs	r3, #1
 8006c44:	73fb      	strb	r3, [r7, #15]
 8006c46:	e026      	b.n	8006c96 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c4e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	7c1b      	ldrb	r3, [r3, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d109      	bne.n	8006c86 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 ff2b 	bl	8008ada <USBD_LL_PrepareReceive>
 8006c84:	e007      	b.n	8006c96 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c8c:	2340      	movs	r3, #64	; 0x40
 8006c8e:	2101      	movs	r1, #1
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f001 ff22 	bl	8008ada <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006cac:	2300      	movs	r3, #0
 8006cae:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006cb0:	2181      	movs	r1, #129	; 0x81
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f001 fe45 	bl	8008942 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f001 fe3e 	bl	8008942 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006cce:	2182      	movs	r1, #130	; 0x82
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f001 fe36 	bl	8008942 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00e      	beq.n	8006d04 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f001 ff34 	bl	8008b64 <USBD_static_free>
    pdev->pClassData = NULL;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b086      	sub	sp, #24
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
 8006d16:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d1e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d039      	beq.n	8006dac <USBD_CDC_Setup+0x9e>
 8006d38:	2b20      	cmp	r3, #32
 8006d3a:	d17f      	bne.n	8006e3c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	88db      	ldrh	r3, [r3, #6]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d029      	beq.n	8006d98 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	b25b      	sxtb	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	da11      	bge.n	8006d72 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006d5a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d5c:	683a      	ldr	r2, [r7, #0]
 8006d5e:	88d2      	ldrh	r2, [r2, #6]
 8006d60:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d62:	6939      	ldr	r1, [r7, #16]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	88db      	ldrh	r3, [r3, #6]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f001 fa13 	bl	8008196 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006d70:	e06b      	b.n	8006e4a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	785a      	ldrb	r2, [r3, #1]
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	88db      	ldrh	r3, [r3, #6]
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d88:	6939      	ldr	r1, [r7, #16]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	88db      	ldrh	r3, [r3, #6]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 fa2e 	bl	80081f2 <USBD_CtlPrepareRx>
      break;
 8006d96:	e058      	b.n	8006e4a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	7850      	ldrb	r0, [r2, #1]
 8006da4:	2200      	movs	r2, #0
 8006da6:	6839      	ldr	r1, [r7, #0]
 8006da8:	4798      	blx	r3
      break;
 8006daa:	e04e      	b.n	8006e4a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	785b      	ldrb	r3, [r3, #1]
 8006db0:	2b0b      	cmp	r3, #11
 8006db2:	d02e      	beq.n	8006e12 <USBD_CDC_Setup+0x104>
 8006db4:	2b0b      	cmp	r3, #11
 8006db6:	dc38      	bgt.n	8006e2a <USBD_CDC_Setup+0x11c>
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d002      	beq.n	8006dc2 <USBD_CDC_Setup+0xb4>
 8006dbc:	2b0a      	cmp	r3, #10
 8006dbe:	d014      	beq.n	8006dea <USBD_CDC_Setup+0xdc>
 8006dc0:	e033      	b.n	8006e2a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dc8:	2b03      	cmp	r3, #3
 8006dca:	d107      	bne.n	8006ddc <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006dcc:	f107 030c 	add.w	r3, r7, #12
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f001 f9de 	bl	8008196 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dda:	e02e      	b.n	8006e3a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006ddc:	6839      	ldr	r1, [r7, #0]
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f001 f96e 	bl	80080c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006de4:	2302      	movs	r3, #2
 8006de6:	75fb      	strb	r3, [r7, #23]
          break;
 8006de8:	e027      	b.n	8006e3a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006df0:	2b03      	cmp	r3, #3
 8006df2:	d107      	bne.n	8006e04 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006df4:	f107 030f 	add.w	r3, r7, #15
 8006df8:	2201      	movs	r2, #1
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 f9ca 	bl	8008196 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e02:	e01a      	b.n	8006e3a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006e04:	6839      	ldr	r1, [r7, #0]
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f001 f95a 	bl	80080c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	75fb      	strb	r3, [r7, #23]
          break;
 8006e10:	e013      	b.n	8006e3a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e18:	2b03      	cmp	r3, #3
 8006e1a:	d00d      	beq.n	8006e38 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006e1c:	6839      	ldr	r1, [r7, #0]
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f001 f94e 	bl	80080c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e24:	2302      	movs	r3, #2
 8006e26:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006e28:	e006      	b.n	8006e38 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006e2a:	6839      	ldr	r1, [r7, #0]
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f001 f947 	bl	80080c0 <USBD_CtlError>
          ret = USBD_FAIL;
 8006e32:	2302      	movs	r3, #2
 8006e34:	75fb      	strb	r3, [r7, #23]
          break;
 8006e36:	e000      	b.n	8006e3a <USBD_CDC_Setup+0x12c>
          break;
 8006e38:	bf00      	nop
      }
      break;
 8006e3a:	e006      	b.n	8006e4a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006e3c:	6839      	ldr	r1, [r7, #0]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f001 f93e 	bl	80080c0 <USBD_CtlError>
      ret = USBD_FAIL;
 8006e44:	2302      	movs	r3, #2
 8006e46:	75fb      	strb	r3, [r7, #23]
      break;
 8006e48:	bf00      	nop
  }

  return ret;
 8006e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3718      	adds	r7, #24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e66:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e6e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d03a      	beq.n	8006ef0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006e7a:	78fa      	ldrb	r2, [r7, #3]
 8006e7c:	6879      	ldr	r1, [r7, #4]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	440b      	add	r3, r1
 8006e88:	331c      	adds	r3, #28
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d029      	beq.n	8006ee4 <USBD_CDC_DataIn+0x90>
 8006e90:	78fa      	ldrb	r2, [r7, #3]
 8006e92:	6879      	ldr	r1, [r7, #4]
 8006e94:	4613      	mov	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	440b      	add	r3, r1
 8006e9e:	331c      	adds	r3, #28
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	78f9      	ldrb	r1, [r7, #3]
 8006ea4:	68b8      	ldr	r0, [r7, #8]
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	440b      	add	r3, r1
 8006eac:	00db      	lsls	r3, r3, #3
 8006eae:	4403      	add	r3, r0
 8006eb0:	3338      	adds	r3, #56	; 0x38
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	fbb2 f1f3 	udiv	r1, r2, r3
 8006eb8:	fb01 f303 	mul.w	r3, r1, r3
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d110      	bne.n	8006ee4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006ec2:	78fa      	ldrb	r2, [r7, #3]
 8006ec4:	6879      	ldr	r1, [r7, #4]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4413      	add	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	440b      	add	r3, r1
 8006ed0:	331c      	adds	r3, #28
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006ed6:	78f9      	ldrb	r1, [r7, #3]
 8006ed8:	2300      	movs	r3, #0
 8006eda:	2200      	movs	r2, #0
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f001 fdd9 	bl	8008a94 <USBD_LL_Transmit>
 8006ee2:	e003      	b.n	8006eec <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006eec:	2300      	movs	r3, #0
 8006eee:	e000      	b.n	8006ef2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006ef0:	2302      	movs	r3, #2
  }
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b084      	sub	sp, #16
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
 8006f02:	460b      	mov	r3, r1
 8006f04:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f0c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f0e:	78fb      	ldrb	r3, [r7, #3]
 8006f10:	4619      	mov	r1, r3
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f001 fe04 	bl	8008b20 <USBD_LL_GetRxDataSize>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00d      	beq.n	8006f46 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f3e:	4611      	mov	r1, r2
 8006f40:	4798      	blx	r3

    return USBD_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	e000      	b.n	8006f48 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006f46:	2302      	movs	r3, #2
  }
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f5e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d015      	beq.n	8006f96 <USBD_CDC_EP0_RxReady+0x46>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006f70:	2bff      	cmp	r3, #255	; 0xff
 8006f72:	d010      	beq.n	8006f96 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006f82:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f8a:	b292      	uxth	r2, r2
 8006f8c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	22ff      	movs	r2, #255	; 0xff
 8006f92:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2243      	movs	r2, #67	; 0x43
 8006fac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006fae:	4b03      	ldr	r3, [pc, #12]	; (8006fbc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	20000098 	.word	0x20000098

08006fc0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2243      	movs	r2, #67	; 0x43
 8006fcc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006fce:	4b03      	ldr	r3, [pc, #12]	; (8006fdc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	20000054 	.word	0x20000054

08006fe0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2243      	movs	r2, #67	; 0x43
 8006fec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006fee:	4b03      	ldr	r3, [pc, #12]	; (8006ffc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	200000dc 	.word	0x200000dc

08007000 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	220a      	movs	r2, #10
 800700c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800700e:	4b03      	ldr	r3, [pc, #12]	; (800701c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007010:	4618      	mov	r0, r3
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr
 800701c:	20000010 	.word	0x20000010

08007020 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800702a:	2302      	movs	r3, #2
 800702c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d005      	beq.n	8007040 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800703c:	2300      	movs	r3, #0
 800703e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007040:	7bfb      	ldrb	r3, [r7, #15]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800704e:	b480      	push	{r7}
 8007050:	b087      	sub	sp, #28
 8007052:	af00      	add	r7, sp, #0
 8007054:	60f8      	str	r0, [r7, #12]
 8007056:	60b9      	str	r1, [r7, #8]
 8007058:	4613      	mov	r3, r2
 800705a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007062:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800706c:	88fa      	ldrh	r2, [r7, #6]
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	371c      	adds	r7, #28
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007082:	b480      	push	{r7}
 8007084:	b085      	sub	sp, #20
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007092:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b084      	sub	sp, #16
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d01c      	beq.n	80070fe <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d115      	bne.n	80070fa <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	2181      	movs	r1, #129	; 0x81
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f001 fccf 	bl	8008a94 <USBD_LL_Transmit>

      return USBD_OK;
 80070f6:	2300      	movs	r3, #0
 80070f8:	e002      	b.n	8007100 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e000      	b.n	8007100 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80070fe:	2302      	movs	r3, #2
  }
}
 8007100:	4618      	mov	r0, r3
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007116:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800711e:	2b00      	cmp	r3, #0
 8007120:	d017      	beq.n	8007152 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	7c1b      	ldrb	r3, [r3, #16]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d109      	bne.n	800713e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007130:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007134:	2101      	movs	r1, #1
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f001 fccf 	bl	8008ada <USBD_LL_PrepareReceive>
 800713c:	e007      	b.n	800714e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007144:	2340      	movs	r3, #64	; 0x40
 8007146:	2101      	movs	r1, #1
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f001 fcc6 	bl	8008ada <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800714e:	2300      	movs	r3, #0
 8007150:	e000      	b.n	8007154 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007152:	2302      	movs	r3, #2
  }
}
 8007154:	4618      	mov	r0, r3
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	4613      	mov	r3, r2
 8007168:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007170:	2302      	movs	r3, #2
 8007172:	e01a      	b.n	80071aa <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800717a:	2b00      	cmp	r3, #0
 800717c:	d003      	beq.n	8007186 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d003      	beq.n	8007194 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	79fa      	ldrb	r2, [r7, #7]
 80071a0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f001 fb32 	bl	800880c <USBD_LL_Init>

  return USBD_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b085      	sub	sp, #20
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80071bc:	2300      	movs	r3, #0
 80071be:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d006      	beq.n	80071d4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	683a      	ldr	r2, [r7, #0]
 80071ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	73fb      	strb	r3, [r7, #15]
 80071d2:	e001      	b.n	80071d8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80071d4:	2302      	movs	r3, #2
 80071d6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b082      	sub	sp, #8
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f001 fb66 	bl	80088c0 <USBD_LL_Start>

  return USBD_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80071fe:	b480      	push	{r7}
 8007200:	b083      	sub	sp, #12
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	460b      	mov	r3, r1
 800721e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007220:	2302      	movs	r3, #2
 8007222:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00c      	beq.n	8007248 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	78fa      	ldrb	r2, [r7, #3]
 8007238:	4611      	mov	r1, r2
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	4798      	blx	r3
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007244:	2300      	movs	r3, #0
 8007246:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007248:	7bfb      	ldrb	r3, [r7, #15]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b082      	sub	sp, #8
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	460b      	mov	r3, r1
 800725c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	78fa      	ldrb	r2, [r7, #3]
 8007268:	4611      	mov	r1, r2
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	4798      	blx	r3

  return USBD_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	4618      	mov	r0, r3
 800728c:	f000 fedb 	bl	8008046 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800729e:	461a      	mov	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80072ac:	f003 031f 	and.w	r3, r3, #31
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d016      	beq.n	80072e2 <USBD_LL_SetupStage+0x6a>
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d81c      	bhi.n	80072f2 <USBD_LL_SetupStage+0x7a>
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d002      	beq.n	80072c2 <USBD_LL_SetupStage+0x4a>
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d008      	beq.n	80072d2 <USBD_LL_SetupStage+0x5a>
 80072c0:	e017      	b.n	80072f2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f9ce 	bl	800766c <USBD_StdDevReq>
      break;
 80072d0:	e01a      	b.n	8007308 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80072d8:	4619      	mov	r1, r3
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fa30 	bl	8007740 <USBD_StdItfReq>
      break;
 80072e0:	e012      	b.n	8007308 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80072e8:	4619      	mov	r1, r3
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fa70 	bl	80077d0 <USBD_StdEPReq>
      break;
 80072f0:	e00a      	b.n	8007308 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80072f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	4619      	mov	r1, r3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f001 fb3d 	bl	8008980 <USBD_LL_StallEP>
      break;
 8007306:	bf00      	nop
  }

  return USBD_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b086      	sub	sp, #24
 8007316:	af00      	add	r7, sp, #0
 8007318:	60f8      	str	r0, [r7, #12]
 800731a:	460b      	mov	r3, r1
 800731c:	607a      	str	r2, [r7, #4]
 800731e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007320:	7afb      	ldrb	r3, [r7, #11]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d14b      	bne.n	80073be <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800732c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007334:	2b03      	cmp	r3, #3
 8007336:	d134      	bne.n	80073a2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	68da      	ldr	r2, [r3, #12]
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	429a      	cmp	r2, r3
 8007342:	d919      	bls.n	8007378 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	68da      	ldr	r2, [r3, #12]
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	1ad2      	subs	r2, r2, r3
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	68da      	ldr	r2, [r3, #12]
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800735a:	429a      	cmp	r2, r3
 800735c:	d203      	bcs.n	8007366 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007362:	b29b      	uxth	r3, r3
 8007364:	e002      	b.n	800736c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800736a:	b29b      	uxth	r3, r3
 800736c:	461a      	mov	r2, r3
 800736e:	6879      	ldr	r1, [r7, #4]
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 ff5c 	bl	800822e <USBD_CtlContinueRx>
 8007376:	e038      	b.n	80073ea <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00a      	beq.n	800739a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800738a:	2b03      	cmp	r3, #3
 800738c:	d105      	bne.n	800739a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f000 ff59 	bl	8008252 <USBD_CtlSendStatus>
 80073a0:	e023      	b.n	80073ea <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073a8:	2b05      	cmp	r3, #5
 80073aa:	d11e      	bne.n	80073ea <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80073b4:	2100      	movs	r1, #0
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f001 fae2 	bl	8008980 <USBD_LL_StallEP>
 80073bc:	e015      	b.n	80073ea <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00d      	beq.n	80073e6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	d108      	bne.n	80073e6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	7afa      	ldrb	r2, [r7, #11]
 80073de:	4611      	mov	r1, r2
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	4798      	blx	r3
 80073e4:	e001      	b.n	80073ea <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80073e6:	2302      	movs	r3, #2
 80073e8:	e000      	b.n	80073ec <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3718      	adds	r7, #24
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	460b      	mov	r3, r1
 80073fe:	607a      	str	r2, [r7, #4]
 8007400:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007402:	7afb      	ldrb	r3, [r7, #11]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d17f      	bne.n	8007508 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	3314      	adds	r3, #20
 800740c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007414:	2b02      	cmp	r3, #2
 8007416:	d15c      	bne.n	80074d2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	68da      	ldr	r2, [r3, #12]
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	429a      	cmp	r2, r3
 8007422:	d915      	bls.n	8007450 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	68da      	ldr	r2, [r3, #12]
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	1ad2      	subs	r2, r2, r3
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	b29b      	uxth	r3, r3
 8007438:	461a      	mov	r2, r3
 800743a:	6879      	ldr	r1, [r7, #4]
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f000 fec6 	bl	80081ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007442:	2300      	movs	r3, #0
 8007444:	2200      	movs	r2, #0
 8007446:	2100      	movs	r1, #0
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f001 fb46 	bl	8008ada <USBD_LL_PrepareReceive>
 800744e:	e04e      	b.n	80074ee <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	6912      	ldr	r2, [r2, #16]
 8007458:	fbb3 f1f2 	udiv	r1, r3, r2
 800745c:	fb01 f202 	mul.w	r2, r1, r2
 8007460:	1a9b      	subs	r3, r3, r2
 8007462:	2b00      	cmp	r3, #0
 8007464:	d11c      	bne.n	80074a0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	689a      	ldr	r2, [r3, #8]
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800746e:	429a      	cmp	r2, r3
 8007470:	d316      	bcc.n	80074a0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	689a      	ldr	r2, [r3, #8]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800747c:	429a      	cmp	r2, r3
 800747e:	d20f      	bcs.n	80074a0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007480:	2200      	movs	r2, #0
 8007482:	2100      	movs	r1, #0
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 fea2 	bl	80081ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007492:	2300      	movs	r3, #0
 8007494:	2200      	movs	r2, #0
 8007496:	2100      	movs	r1, #0
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f001 fb1e 	bl	8008ada <USBD_LL_PrepareReceive>
 800749e:	e026      	b.n	80074ee <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00a      	beq.n	80074c2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80074b2:	2b03      	cmp	r3, #3
 80074b4:	d105      	bne.n	80074c2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80074c2:	2180      	movs	r1, #128	; 0x80
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f001 fa5b 	bl	8008980 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f000 fed4 	bl	8008278 <USBD_CtlReceiveStatus>
 80074d0:	e00d      	b.n	80074ee <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074d8:	2b04      	cmp	r3, #4
 80074da:	d004      	beq.n	80074e6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d103      	bne.n	80074ee <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80074e6:	2180      	movs	r1, #128	; 0x80
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f001 fa49 	bl	8008980 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d11d      	bne.n	8007534 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f7ff fe80 	bl	80071fe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007506:	e015      	b.n	8007534 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800750e:	695b      	ldr	r3, [r3, #20]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00d      	beq.n	8007530 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800751a:	2b03      	cmp	r3, #3
 800751c:	d108      	bne.n	8007530 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	7afa      	ldrb	r2, [r7, #11]
 8007528:	4611      	mov	r1, r2
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	4798      	blx	r3
 800752e:	e001      	b.n	8007534 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007530:	2302      	movs	r3, #2
 8007532:	e000      	b.n	8007536 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3718      	adds	r7, #24
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b082      	sub	sp, #8
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007546:	2340      	movs	r3, #64	; 0x40
 8007548:	2200      	movs	r2, #0
 800754a:	2100      	movs	r1, #0
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f001 f9d2 	bl	80088f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2240      	movs	r2, #64	; 0x40
 800755e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007562:	2340      	movs	r3, #64	; 0x40
 8007564:	2200      	movs	r2, #0
 8007566:	2180      	movs	r1, #128	; 0x80
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f001 f9c4 	bl	80088f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2240      	movs	r2, #64	; 0x40
 8007578:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d009      	beq.n	80075b6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	6852      	ldr	r2, [r2, #4]
 80075ae:	b2d2      	uxtb	r2, r2
 80075b0:	4611      	mov	r1, r2
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	4798      	blx	r3
  }

  return USBD_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	460b      	mov	r3, r1
 80075ca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	78fa      	ldrb	r2, [r7, #3]
 80075d0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2204      	movs	r2, #4
 80075f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800760a:	b480      	push	{r7}
 800760c:	b083      	sub	sp, #12
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007618:	2b04      	cmp	r3, #4
 800761a:	d105      	bne.n	8007628 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b082      	sub	sp, #8
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007644:	2b03      	cmp	r3, #3
 8007646:	d10b      	bne.n	8007660 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800764e:	69db      	ldr	r3, [r3, #28]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d005      	beq.n	8007660 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800765a:	69db      	ldr	r3, [r3, #28]
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
	...

0800766c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007682:	2b40      	cmp	r3, #64	; 0x40
 8007684:	d005      	beq.n	8007692 <USBD_StdDevReq+0x26>
 8007686:	2b40      	cmp	r3, #64	; 0x40
 8007688:	d84f      	bhi.n	800772a <USBD_StdDevReq+0xbe>
 800768a:	2b00      	cmp	r3, #0
 800768c:	d009      	beq.n	80076a2 <USBD_StdDevReq+0x36>
 800768e:	2b20      	cmp	r3, #32
 8007690:	d14b      	bne.n	800772a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	6839      	ldr	r1, [r7, #0]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	4798      	blx	r3
      break;
 80076a0:	e048      	b.n	8007734 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	785b      	ldrb	r3, [r3, #1]
 80076a6:	2b09      	cmp	r3, #9
 80076a8:	d839      	bhi.n	800771e <USBD_StdDevReq+0xb2>
 80076aa:	a201      	add	r2, pc, #4	; (adr r2, 80076b0 <USBD_StdDevReq+0x44>)
 80076ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b0:	08007701 	.word	0x08007701
 80076b4:	08007715 	.word	0x08007715
 80076b8:	0800771f 	.word	0x0800771f
 80076bc:	0800770b 	.word	0x0800770b
 80076c0:	0800771f 	.word	0x0800771f
 80076c4:	080076e3 	.word	0x080076e3
 80076c8:	080076d9 	.word	0x080076d9
 80076cc:	0800771f 	.word	0x0800771f
 80076d0:	080076f7 	.word	0x080076f7
 80076d4:	080076ed 	.word	0x080076ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f9dc 	bl	8007a98 <USBD_GetDescriptor>
          break;
 80076e0:	e022      	b.n	8007728 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fb3f 	bl	8007d68 <USBD_SetAddress>
          break;
 80076ea:	e01d      	b.n	8007728 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fb7e 	bl	8007df0 <USBD_SetConfig>
          break;
 80076f4:	e018      	b.n	8007728 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fc07 	bl	8007f0c <USBD_GetConfig>
          break;
 80076fe:	e013      	b.n	8007728 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007700:	6839      	ldr	r1, [r7, #0]
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fc37 	bl	8007f76 <USBD_GetStatus>
          break;
 8007708:	e00e      	b.n	8007728 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800770a:	6839      	ldr	r1, [r7, #0]
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fc65 	bl	8007fdc <USBD_SetFeature>
          break;
 8007712:	e009      	b.n	8007728 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fc74 	bl	8008004 <USBD_ClrFeature>
          break;
 800771c:	e004      	b.n	8007728 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fccd 	bl	80080c0 <USBD_CtlError>
          break;
 8007726:	bf00      	nop
      }
      break;
 8007728:	e004      	b.n	8007734 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fcc7 	bl	80080c0 <USBD_CtlError>
      break;
 8007732:	bf00      	nop
  }

  return ret;
 8007734:	7bfb      	ldrb	r3, [r7, #15]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop

08007740 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800774a:	2300      	movs	r3, #0
 800774c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007756:	2b40      	cmp	r3, #64	; 0x40
 8007758:	d005      	beq.n	8007766 <USBD_StdItfReq+0x26>
 800775a:	2b40      	cmp	r3, #64	; 0x40
 800775c:	d82e      	bhi.n	80077bc <USBD_StdItfReq+0x7c>
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <USBD_StdItfReq+0x26>
 8007762:	2b20      	cmp	r3, #32
 8007764:	d12a      	bne.n	80077bc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800776c:	3b01      	subs	r3, #1
 800776e:	2b02      	cmp	r3, #2
 8007770:	d81d      	bhi.n	80077ae <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	889b      	ldrh	r3, [r3, #4]
 8007776:	b2db      	uxtb	r3, r3
 8007778:	2b01      	cmp	r3, #1
 800777a:	d813      	bhi.n	80077a4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	6839      	ldr	r1, [r7, #0]
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	4798      	blx	r3
 800778a:	4603      	mov	r3, r0
 800778c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	88db      	ldrh	r3, [r3, #6]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d110      	bne.n	80077b8 <USBD_StdItfReq+0x78>
 8007796:	7bfb      	ldrb	r3, [r7, #15]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10d      	bne.n	80077b8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fd58 	bl	8008252 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80077a2:	e009      	b.n	80077b8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80077a4:	6839      	ldr	r1, [r7, #0]
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fc8a 	bl	80080c0 <USBD_CtlError>
          break;
 80077ac:	e004      	b.n	80077b8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80077ae:	6839      	ldr	r1, [r7, #0]
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fc85 	bl	80080c0 <USBD_CtlError>
          break;
 80077b6:	e000      	b.n	80077ba <USBD_StdItfReq+0x7a>
          break;
 80077b8:	bf00      	nop
      }
      break;
 80077ba:	e004      	b.n	80077c6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fc7e 	bl	80080c0 <USBD_CtlError>
      break;
 80077c4:	bf00      	nop
  }

  return USBD_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	889b      	ldrh	r3, [r3, #4]
 80077e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077ec:	2b40      	cmp	r3, #64	; 0x40
 80077ee:	d007      	beq.n	8007800 <USBD_StdEPReq+0x30>
 80077f0:	2b40      	cmp	r3, #64	; 0x40
 80077f2:	f200 8146 	bhi.w	8007a82 <USBD_StdEPReq+0x2b2>
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00a      	beq.n	8007810 <USBD_StdEPReq+0x40>
 80077fa:	2b20      	cmp	r3, #32
 80077fc:	f040 8141 	bne.w	8007a82 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	4798      	blx	r3
      break;
 800780e:	e13d      	b.n	8007a8c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007818:	2b20      	cmp	r3, #32
 800781a:	d10a      	bne.n	8007832 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	4798      	blx	r3
 800782a:	4603      	mov	r3, r0
 800782c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800782e:	7bfb      	ldrb	r3, [r7, #15]
 8007830:	e12d      	b.n	8007a8e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	785b      	ldrb	r3, [r3, #1]
 8007836:	2b03      	cmp	r3, #3
 8007838:	d007      	beq.n	800784a <USBD_StdEPReq+0x7a>
 800783a:	2b03      	cmp	r3, #3
 800783c:	f300 811b 	bgt.w	8007a76 <USBD_StdEPReq+0x2a6>
 8007840:	2b00      	cmp	r3, #0
 8007842:	d072      	beq.n	800792a <USBD_StdEPReq+0x15a>
 8007844:	2b01      	cmp	r3, #1
 8007846:	d03a      	beq.n	80078be <USBD_StdEPReq+0xee>
 8007848:	e115      	b.n	8007a76 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007850:	2b02      	cmp	r3, #2
 8007852:	d002      	beq.n	800785a <USBD_StdEPReq+0x8a>
 8007854:	2b03      	cmp	r3, #3
 8007856:	d015      	beq.n	8007884 <USBD_StdEPReq+0xb4>
 8007858:	e02b      	b.n	80078b2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800785a:	7bbb      	ldrb	r3, [r7, #14]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00c      	beq.n	800787a <USBD_StdEPReq+0xaa>
 8007860:	7bbb      	ldrb	r3, [r7, #14]
 8007862:	2b80      	cmp	r3, #128	; 0x80
 8007864:	d009      	beq.n	800787a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007866:	7bbb      	ldrb	r3, [r7, #14]
 8007868:	4619      	mov	r1, r3
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f001 f888 	bl	8008980 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007870:	2180      	movs	r1, #128	; 0x80
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f001 f884 	bl	8008980 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007878:	e020      	b.n	80078bc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fc1f 	bl	80080c0 <USBD_CtlError>
              break;
 8007882:	e01b      	b.n	80078bc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	885b      	ldrh	r3, [r3, #2]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10e      	bne.n	80078aa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800788c:	7bbb      	ldrb	r3, [r7, #14]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00b      	beq.n	80078aa <USBD_StdEPReq+0xda>
 8007892:	7bbb      	ldrb	r3, [r7, #14]
 8007894:	2b80      	cmp	r3, #128	; 0x80
 8007896:	d008      	beq.n	80078aa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	88db      	ldrh	r3, [r3, #6]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d104      	bne.n	80078aa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80078a0:	7bbb      	ldrb	r3, [r7, #14]
 80078a2:	4619      	mov	r1, r3
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f001 f86b 	bl	8008980 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fcd1 	bl	8008252 <USBD_CtlSendStatus>

              break;
 80078b0:	e004      	b.n	80078bc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fc03 	bl	80080c0 <USBD_CtlError>
              break;
 80078ba:	bf00      	nop
          }
          break;
 80078bc:	e0e0      	b.n	8007a80 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d002      	beq.n	80078ce <USBD_StdEPReq+0xfe>
 80078c8:	2b03      	cmp	r3, #3
 80078ca:	d015      	beq.n	80078f8 <USBD_StdEPReq+0x128>
 80078cc:	e026      	b.n	800791c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078ce:	7bbb      	ldrb	r3, [r7, #14]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00c      	beq.n	80078ee <USBD_StdEPReq+0x11e>
 80078d4:	7bbb      	ldrb	r3, [r7, #14]
 80078d6:	2b80      	cmp	r3, #128	; 0x80
 80078d8:	d009      	beq.n	80078ee <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80078da:	7bbb      	ldrb	r3, [r7, #14]
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f001 f84e 	bl	8008980 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80078e4:	2180      	movs	r1, #128	; 0x80
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f001 f84a 	bl	8008980 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078ec:	e01c      	b.n	8007928 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fbe5 	bl	80080c0 <USBD_CtlError>
              break;
 80078f6:	e017      	b.n	8007928 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	885b      	ldrh	r3, [r3, #2]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d112      	bne.n	8007926 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007900:	7bbb      	ldrb	r3, [r7, #14]
 8007902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007906:	2b00      	cmp	r3, #0
 8007908:	d004      	beq.n	8007914 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	4619      	mov	r1, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f001 f855 	bl	80089be <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fc9c 	bl	8008252 <USBD_CtlSendStatus>
              }
              break;
 800791a:	e004      	b.n	8007926 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fbce 	bl	80080c0 <USBD_CtlError>
              break;
 8007924:	e000      	b.n	8007928 <USBD_StdEPReq+0x158>
              break;
 8007926:	bf00      	nop
          }
          break;
 8007928:	e0aa      	b.n	8007a80 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007930:	2b02      	cmp	r3, #2
 8007932:	d002      	beq.n	800793a <USBD_StdEPReq+0x16a>
 8007934:	2b03      	cmp	r3, #3
 8007936:	d032      	beq.n	800799e <USBD_StdEPReq+0x1ce>
 8007938:	e097      	b.n	8007a6a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800793a:	7bbb      	ldrb	r3, [r7, #14]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d007      	beq.n	8007950 <USBD_StdEPReq+0x180>
 8007940:	7bbb      	ldrb	r3, [r7, #14]
 8007942:	2b80      	cmp	r3, #128	; 0x80
 8007944:	d004      	beq.n	8007950 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fbb9 	bl	80080c0 <USBD_CtlError>
                break;
 800794e:	e091      	b.n	8007a74 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007950:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007954:	2b00      	cmp	r3, #0
 8007956:	da0b      	bge.n	8007970 <USBD_StdEPReq+0x1a0>
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800795e:	4613      	mov	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4413      	add	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	3310      	adds	r3, #16
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	4413      	add	r3, r2
 800796c:	3304      	adds	r3, #4
 800796e:	e00b      	b.n	8007988 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007970:	7bbb      	ldrb	r3, [r7, #14]
 8007972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007976:	4613      	mov	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4413      	add	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	4413      	add	r3, r2
 8007986:	3304      	adds	r3, #4
 8007988:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	2200      	movs	r2, #0
 800798e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2202      	movs	r2, #2
 8007994:	4619      	mov	r1, r3
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fbfd 	bl	8008196 <USBD_CtlSendData>
              break;
 800799c:	e06a      	b.n	8007a74 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800799e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	da11      	bge.n	80079ca <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	f003 020f 	and.w	r2, r3, #15
 80079ac:	6879      	ldr	r1, [r7, #4]
 80079ae:	4613      	mov	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4413      	add	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	440b      	add	r3, r1
 80079b8:	3318      	adds	r3, #24
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d117      	bne.n	80079f0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80079c0:	6839      	ldr	r1, [r7, #0]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fb7c 	bl	80080c0 <USBD_CtlError>
                  break;
 80079c8:	e054      	b.n	8007a74 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80079ca:	7bbb      	ldrb	r3, [r7, #14]
 80079cc:	f003 020f 	and.w	r2, r3, #15
 80079d0:	6879      	ldr	r1, [r7, #4]
 80079d2:	4613      	mov	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	440b      	add	r3, r1
 80079dc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d104      	bne.n	80079f0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fb69 	bl	80080c0 <USBD_CtlError>
                  break;
 80079ee:	e041      	b.n	8007a74 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	da0b      	bge.n	8007a10 <USBD_StdEPReq+0x240>
 80079f8:	7bbb      	ldrb	r3, [r7, #14]
 80079fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079fe:	4613      	mov	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	3310      	adds	r3, #16
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	e00b      	b.n	8007a28 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a16:	4613      	mov	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4413      	add	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	4413      	add	r3, r2
 8007a26:	3304      	adds	r3, #4
 8007a28:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <USBD_StdEPReq+0x266>
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	2b80      	cmp	r3, #128	; 0x80
 8007a34:	d103      	bne.n	8007a3e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	e00e      	b.n	8007a5c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007a3e:	7bbb      	ldrb	r3, [r7, #14]
 8007a40:	4619      	mov	r1, r3
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 ffda 	bl	80089fc <USBD_LL_IsStallEP>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2201      	movs	r2, #1
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	e002      	b.n	8007a5c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	2202      	movs	r2, #2
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fb97 	bl	8008196 <USBD_CtlSendData>
              break;
 8007a68:	e004      	b.n	8007a74 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007a6a:	6839      	ldr	r1, [r7, #0]
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fb27 	bl	80080c0 <USBD_CtlError>
              break;
 8007a72:	bf00      	nop
          }
          break;
 8007a74:	e004      	b.n	8007a80 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007a76:	6839      	ldr	r1, [r7, #0]
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fb21 	bl	80080c0 <USBD_CtlError>
          break;
 8007a7e:	bf00      	nop
      }
      break;
 8007a80:	e004      	b.n	8007a8c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fb1b 	bl	80080c0 <USBD_CtlError>
      break;
 8007a8a:	bf00      	nop
  }

  return ret;
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
	...

08007a98 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	885b      	ldrh	r3, [r3, #2]
 8007ab2:	0a1b      	lsrs	r3, r3, #8
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	2b06      	cmp	r3, #6
 8007aba:	f200 8128 	bhi.w	8007d0e <USBD_GetDescriptor+0x276>
 8007abe:	a201      	add	r2, pc, #4	; (adr r2, 8007ac4 <USBD_GetDescriptor+0x2c>)
 8007ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac4:	08007ae1 	.word	0x08007ae1
 8007ac8:	08007af9 	.word	0x08007af9
 8007acc:	08007b39 	.word	0x08007b39
 8007ad0:	08007d0f 	.word	0x08007d0f
 8007ad4:	08007d0f 	.word	0x08007d0f
 8007ad8:	08007caf 	.word	0x08007caf
 8007adc:	08007cdb 	.word	0x08007cdb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	7c12      	ldrb	r2, [r2, #16]
 8007aec:	f107 0108 	add.w	r1, r7, #8
 8007af0:	4610      	mov	r0, r2
 8007af2:	4798      	blx	r3
 8007af4:	60f8      	str	r0, [r7, #12]
      break;
 8007af6:	e112      	b.n	8007d1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	7c1b      	ldrb	r3, [r3, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10d      	bne.n	8007b1c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b08:	f107 0208 	add.w	r2, r7, #8
 8007b0c:	4610      	mov	r0, r2
 8007b0e:	4798      	blx	r3
 8007b10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	3301      	adds	r3, #1
 8007b16:	2202      	movs	r2, #2
 8007b18:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b1a:	e100      	b.n	8007d1e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b24:	f107 0208 	add.w	r2, r7, #8
 8007b28:	4610      	mov	r0, r2
 8007b2a:	4798      	blx	r3
 8007b2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	3301      	adds	r3, #1
 8007b32:	2202      	movs	r2, #2
 8007b34:	701a      	strb	r2, [r3, #0]
      break;
 8007b36:	e0f2      	b.n	8007d1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	885b      	ldrh	r3, [r3, #2]
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b05      	cmp	r3, #5
 8007b40:	f200 80ac 	bhi.w	8007c9c <USBD_GetDescriptor+0x204>
 8007b44:	a201      	add	r2, pc, #4	; (adr r2, 8007b4c <USBD_GetDescriptor+0xb4>)
 8007b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4a:	bf00      	nop
 8007b4c:	08007b65 	.word	0x08007b65
 8007b50:	08007b99 	.word	0x08007b99
 8007b54:	08007bcd 	.word	0x08007bcd
 8007b58:	08007c01 	.word	0x08007c01
 8007b5c:	08007c35 	.word	0x08007c35
 8007b60:	08007c69 	.word	0x08007c69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00b      	beq.n	8007b88 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	7c12      	ldrb	r2, [r2, #16]
 8007b7c:	f107 0108 	add.w	r1, r7, #8
 8007b80:	4610      	mov	r0, r2
 8007b82:	4798      	blx	r3
 8007b84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b86:	e091      	b.n	8007cac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fa98 	bl	80080c0 <USBD_CtlError>
            err++;
 8007b90:	7afb      	ldrb	r3, [r7, #11]
 8007b92:	3301      	adds	r3, #1
 8007b94:	72fb      	strb	r3, [r7, #11]
          break;
 8007b96:	e089      	b.n	8007cac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00b      	beq.n	8007bbc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	7c12      	ldrb	r2, [r2, #16]
 8007bb0:	f107 0108 	add.w	r1, r7, #8
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	4798      	blx	r3
 8007bb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bba:	e077      	b.n	8007cac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bbc:	6839      	ldr	r1, [r7, #0]
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fa7e 	bl	80080c0 <USBD_CtlError>
            err++;
 8007bc4:	7afb      	ldrb	r3, [r7, #11]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	72fb      	strb	r3, [r7, #11]
          break;
 8007bca:	e06f      	b.n	8007cac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00b      	beq.n	8007bf0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	7c12      	ldrb	r2, [r2, #16]
 8007be4:	f107 0108 	add.w	r1, r7, #8
 8007be8:	4610      	mov	r0, r2
 8007bea:	4798      	blx	r3
 8007bec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bee:	e05d      	b.n	8007cac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fa64 	bl	80080c0 <USBD_CtlError>
            err++;
 8007bf8:	7afb      	ldrb	r3, [r7, #11]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	72fb      	strb	r3, [r7, #11]
          break;
 8007bfe:	e055      	b.n	8007cac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00b      	beq.n	8007c24 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	7c12      	ldrb	r2, [r2, #16]
 8007c18:	f107 0108 	add.w	r1, r7, #8
 8007c1c:	4610      	mov	r0, r2
 8007c1e:	4798      	blx	r3
 8007c20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c22:	e043      	b.n	8007cac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c24:	6839      	ldr	r1, [r7, #0]
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fa4a 	bl	80080c0 <USBD_CtlError>
            err++;
 8007c2c:	7afb      	ldrb	r3, [r7, #11]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	72fb      	strb	r3, [r7, #11]
          break;
 8007c32:	e03b      	b.n	8007cac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c3a:	695b      	ldr	r3, [r3, #20]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00b      	beq.n	8007c58 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	7c12      	ldrb	r2, [r2, #16]
 8007c4c:	f107 0108 	add.w	r1, r7, #8
 8007c50:	4610      	mov	r0, r2
 8007c52:	4798      	blx	r3
 8007c54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c56:	e029      	b.n	8007cac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c58:	6839      	ldr	r1, [r7, #0]
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fa30 	bl	80080c0 <USBD_CtlError>
            err++;
 8007c60:	7afb      	ldrb	r3, [r7, #11]
 8007c62:	3301      	adds	r3, #1
 8007c64:	72fb      	strb	r3, [r7, #11]
          break;
 8007c66:	e021      	b.n	8007cac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c6e:	699b      	ldr	r3, [r3, #24]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00b      	beq.n	8007c8c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	7c12      	ldrb	r2, [r2, #16]
 8007c80:	f107 0108 	add.w	r1, r7, #8
 8007c84:	4610      	mov	r0, r2
 8007c86:	4798      	blx	r3
 8007c88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c8a:	e00f      	b.n	8007cac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c8c:	6839      	ldr	r1, [r7, #0]
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fa16 	bl	80080c0 <USBD_CtlError>
            err++;
 8007c94:	7afb      	ldrb	r3, [r7, #11]
 8007c96:	3301      	adds	r3, #1
 8007c98:	72fb      	strb	r3, [r7, #11]
          break;
 8007c9a:	e007      	b.n	8007cac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007c9c:	6839      	ldr	r1, [r7, #0]
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fa0e 	bl	80080c0 <USBD_CtlError>
          err++;
 8007ca4:	7afb      	ldrb	r3, [r7, #11]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007caa:	e038      	b.n	8007d1e <USBD_GetDescriptor+0x286>
 8007cac:	e037      	b.n	8007d1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	7c1b      	ldrb	r3, [r3, #16]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d109      	bne.n	8007cca <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cbe:	f107 0208 	add.w	r2, r7, #8
 8007cc2:	4610      	mov	r0, r2
 8007cc4:	4798      	blx	r3
 8007cc6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cc8:	e029      	b.n	8007d1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f9f7 	bl	80080c0 <USBD_CtlError>
        err++;
 8007cd2:	7afb      	ldrb	r3, [r7, #11]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	72fb      	strb	r3, [r7, #11]
      break;
 8007cd8:	e021      	b.n	8007d1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	7c1b      	ldrb	r3, [r3, #16]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10d      	bne.n	8007cfe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cea:	f107 0208 	add.w	r2, r7, #8
 8007cee:	4610      	mov	r0, r2
 8007cf0:	4798      	blx	r3
 8007cf2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	2207      	movs	r2, #7
 8007cfa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cfc:	e00f      	b.n	8007d1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f9dd 	bl	80080c0 <USBD_CtlError>
        err++;
 8007d06:	7afb      	ldrb	r3, [r7, #11]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	72fb      	strb	r3, [r7, #11]
      break;
 8007d0c:	e007      	b.n	8007d1e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f9d5 	bl	80080c0 <USBD_CtlError>
      err++;
 8007d16:	7afb      	ldrb	r3, [r7, #11]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	72fb      	strb	r3, [r7, #11]
      break;
 8007d1c:	bf00      	nop
  }

  if (err != 0U)
 8007d1e:	7afb      	ldrb	r3, [r7, #11]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d11c      	bne.n	8007d5e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007d24:	893b      	ldrh	r3, [r7, #8]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d011      	beq.n	8007d4e <USBD_GetDescriptor+0x2b6>
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	88db      	ldrh	r3, [r3, #6]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00d      	beq.n	8007d4e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	88da      	ldrh	r2, [r3, #6]
 8007d36:	893b      	ldrh	r3, [r7, #8]
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	bf28      	it	cs
 8007d3c:	4613      	movcs	r3, r2
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d42:	893b      	ldrh	r3, [r7, #8]
 8007d44:	461a      	mov	r2, r3
 8007d46:	68f9      	ldr	r1, [r7, #12]
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 fa24 	bl	8008196 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	88db      	ldrh	r3, [r3, #6]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d104      	bne.n	8007d60 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fa7b 	bl	8008252 <USBD_CtlSendStatus>
 8007d5c:	e000      	b.n	8007d60 <USBD_GetDescriptor+0x2c8>
    return;
 8007d5e:	bf00      	nop
    }
  }
}
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop

08007d68 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	889b      	ldrh	r3, [r3, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d130      	bne.n	8007ddc <USBD_SetAddress+0x74>
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	88db      	ldrh	r3, [r3, #6]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d12c      	bne.n	8007ddc <USBD_SetAddress+0x74>
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	885b      	ldrh	r3, [r3, #2]
 8007d86:	2b7f      	cmp	r3, #127	; 0x7f
 8007d88:	d828      	bhi.n	8007ddc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	885b      	ldrh	r3, [r3, #2]
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d94:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d9c:	2b03      	cmp	r3, #3
 8007d9e:	d104      	bne.n	8007daa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f98c 	bl	80080c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007da8:	e01d      	b.n	8007de6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	7bfa      	ldrb	r2, [r7, #15]
 8007dae:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007db2:	7bfb      	ldrb	r3, [r7, #15]
 8007db4:	4619      	mov	r1, r3
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fe4d 	bl	8008a56 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fa48 	bl	8008252 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d004      	beq.n	8007dd2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2202      	movs	r2, #2
 8007dcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dd0:	e009      	b.n	8007de6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dda:	e004      	b.n	8007de6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ddc:	6839      	ldr	r1, [r7, #0]
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f96e 	bl	80080c0 <USBD_CtlError>
  }
}
 8007de4:	bf00      	nop
 8007de6:	bf00      	nop
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
	...

08007df0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	885b      	ldrh	r3, [r3, #2]
 8007dfe:	b2da      	uxtb	r2, r3
 8007e00:	4b41      	ldr	r3, [pc, #260]	; (8007f08 <USBD_SetConfig+0x118>)
 8007e02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e04:	4b40      	ldr	r3, [pc, #256]	; (8007f08 <USBD_SetConfig+0x118>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d904      	bls.n	8007e16 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f956 	bl	80080c0 <USBD_CtlError>
 8007e14:	e075      	b.n	8007f02 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d002      	beq.n	8007e26 <USBD_SetConfig+0x36>
 8007e20:	2b03      	cmp	r3, #3
 8007e22:	d023      	beq.n	8007e6c <USBD_SetConfig+0x7c>
 8007e24:	e062      	b.n	8007eec <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007e26:	4b38      	ldr	r3, [pc, #224]	; (8007f08 <USBD_SetConfig+0x118>)
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d01a      	beq.n	8007e64 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007e2e:	4b36      	ldr	r3, [pc, #216]	; (8007f08 <USBD_SetConfig+0x118>)
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2203      	movs	r2, #3
 8007e3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e40:	4b31      	ldr	r3, [pc, #196]	; (8007f08 <USBD_SetConfig+0x118>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	4619      	mov	r1, r3
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7ff f9e4 	bl	8007214 <USBD_SetClassConfig>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d104      	bne.n	8007e5c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007e52:	6839      	ldr	r1, [r7, #0]
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 f933 	bl	80080c0 <USBD_CtlError>
            return;
 8007e5a:	e052      	b.n	8007f02 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 f9f8 	bl	8008252 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e62:	e04e      	b.n	8007f02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 f9f4 	bl	8008252 <USBD_CtlSendStatus>
        break;
 8007e6a:	e04a      	b.n	8007f02 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007e6c:	4b26      	ldr	r3, [pc, #152]	; (8007f08 <USBD_SetConfig+0x118>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d112      	bne.n	8007e9a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2202      	movs	r2, #2
 8007e78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007e7c:	4b22      	ldr	r3, [pc, #136]	; (8007f08 <USBD_SetConfig+0x118>)
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	461a      	mov	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007e86:	4b20      	ldr	r3, [pc, #128]	; (8007f08 <USBD_SetConfig+0x118>)
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f7ff f9e0 	bl	8007252 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f9dd 	bl	8008252 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e98:	e033      	b.n	8007f02 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007e9a:	4b1b      	ldr	r3, [pc, #108]	; (8007f08 <USBD_SetConfig+0x118>)
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d01d      	beq.n	8007ee4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	4619      	mov	r1, r3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f7ff f9ce 	bl	8007252 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007eb6:	4b14      	ldr	r3, [pc, #80]	; (8007f08 <USBD_SetConfig+0x118>)
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007ec0:	4b11      	ldr	r3, [pc, #68]	; (8007f08 <USBD_SetConfig+0x118>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7ff f9a4 	bl	8007214 <USBD_SetClassConfig>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d104      	bne.n	8007edc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f8f3 	bl	80080c0 <USBD_CtlError>
            return;
 8007eda:	e012      	b.n	8007f02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f9b8 	bl	8008252 <USBD_CtlSendStatus>
        break;
 8007ee2:	e00e      	b.n	8007f02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f9b4 	bl	8008252 <USBD_CtlSendStatus>
        break;
 8007eea:	e00a      	b.n	8007f02 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f8e6 	bl	80080c0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007ef4:	4b04      	ldr	r3, [pc, #16]	; (8007f08 <USBD_SetConfig+0x118>)
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	4619      	mov	r1, r3
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f7ff f9a9 	bl	8007252 <USBD_ClrClassConfig>
        break;
 8007f00:	bf00      	nop
    }
  }
}
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	20000228 	.word	0x20000228

08007f0c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	88db      	ldrh	r3, [r3, #6]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d004      	beq.n	8007f28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f8cd 	bl	80080c0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007f26:	e022      	b.n	8007f6e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	dc02      	bgt.n	8007f38 <USBD_GetConfig+0x2c>
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	dc03      	bgt.n	8007f3e <USBD_GetConfig+0x32>
 8007f36:	e015      	b.n	8007f64 <USBD_GetConfig+0x58>
 8007f38:	2b03      	cmp	r3, #3
 8007f3a:	d00b      	beq.n	8007f54 <USBD_GetConfig+0x48>
 8007f3c:	e012      	b.n	8007f64 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	3308      	adds	r3, #8
 8007f48:	2201      	movs	r2, #1
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 f922 	bl	8008196 <USBD_CtlSendData>
        break;
 8007f52:	e00c      	b.n	8007f6e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	3304      	adds	r3, #4
 8007f58:	2201      	movs	r2, #1
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f91a 	bl	8008196 <USBD_CtlSendData>
        break;
 8007f62:	e004      	b.n	8007f6e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f8aa 	bl	80080c0 <USBD_CtlError>
        break;
 8007f6c:	bf00      	nop
}
 8007f6e:	bf00      	nop
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b082      	sub	sp, #8
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
 8007f7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f86:	3b01      	subs	r3, #1
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d81e      	bhi.n	8007fca <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	88db      	ldrh	r3, [r3, #6]
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d004      	beq.n	8007f9e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007f94:	6839      	ldr	r1, [r7, #0]
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f892 	bl	80080c0 <USBD_CtlError>
        break;
 8007f9c:	e01a      	b.n	8007fd4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d005      	beq.n	8007fba <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	f043 0202 	orr.w	r2, r3, #2
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	330c      	adds	r3, #12
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f8e7 	bl	8008196 <USBD_CtlSendData>
      break;
 8007fc8:	e004      	b.n	8007fd4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f877 	bl	80080c0 <USBD_CtlError>
      break;
 8007fd2:	bf00      	nop
  }
}
 8007fd4:	bf00      	nop
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	885b      	ldrh	r3, [r3, #2]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d106      	bne.n	8007ffc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f92b 	bl	8008252 <USBD_CtlSendStatus>
  }
}
 8007ffc:	bf00      	nop
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008014:	3b01      	subs	r3, #1
 8008016:	2b02      	cmp	r3, #2
 8008018:	d80b      	bhi.n	8008032 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	885b      	ldrh	r3, [r3, #2]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d10c      	bne.n	800803c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f911 	bl	8008252 <USBD_CtlSendStatus>
      }
      break;
 8008030:	e004      	b.n	800803c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f843 	bl	80080c0 <USBD_CtlError>
      break;
 800803a:	e000      	b.n	800803e <USBD_ClrFeature+0x3a>
      break;
 800803c:	bf00      	nop
  }
}
 800803e:	bf00      	nop
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008046:	b480      	push	{r7}
 8008048:	b083      	sub	sp, #12
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
 800804e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	781a      	ldrb	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	785a      	ldrb	r2, [r3, #1]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	3302      	adds	r3, #2
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	b29a      	uxth	r2, r3
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	3303      	adds	r3, #3
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	b29b      	uxth	r3, r3
 8008070:	021b      	lsls	r3, r3, #8
 8008072:	b29b      	uxth	r3, r3
 8008074:	4413      	add	r3, r2
 8008076:	b29a      	uxth	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	3304      	adds	r3, #4
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	b29a      	uxth	r2, r3
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	3305      	adds	r3, #5
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	b29b      	uxth	r3, r3
 800808c:	021b      	lsls	r3, r3, #8
 800808e:	b29b      	uxth	r3, r3
 8008090:	4413      	add	r3, r2
 8008092:	b29a      	uxth	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	3306      	adds	r3, #6
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	b29a      	uxth	r2, r3
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	3307      	adds	r3, #7
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	021b      	lsls	r3, r3, #8
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	4413      	add	r3, r2
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	80da      	strh	r2, [r3, #6]

}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80080ca:	2180      	movs	r1, #128	; 0x80
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fc57 	bl	8008980 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80080d2:	2100      	movs	r1, #0
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fc53 	bl	8008980 <USBD_LL_StallEP>
}
 80080da:	bf00      	nop
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b086      	sub	sp, #24
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	60f8      	str	r0, [r7, #12]
 80080ea:	60b9      	str	r1, [r7, #8]
 80080ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80080ee:	2300      	movs	r3, #0
 80080f0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d032      	beq.n	800815e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f000 f834 	bl	8008166 <USBD_GetLen>
 80080fe:	4603      	mov	r3, r0
 8008100:	3301      	adds	r3, #1
 8008102:	b29b      	uxth	r3, r3
 8008104:	005b      	lsls	r3, r3, #1
 8008106:	b29a      	uxth	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800810c:	7dfb      	ldrb	r3, [r7, #23]
 800810e:	1c5a      	adds	r2, r3, #1
 8008110:	75fa      	strb	r2, [r7, #23]
 8008112:	461a      	mov	r2, r3
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	4413      	add	r3, r2
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	7812      	ldrb	r2, [r2, #0]
 800811c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800811e:	7dfb      	ldrb	r3, [r7, #23]
 8008120:	1c5a      	adds	r2, r3, #1
 8008122:	75fa      	strb	r2, [r7, #23]
 8008124:	461a      	mov	r2, r3
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	4413      	add	r3, r2
 800812a:	2203      	movs	r2, #3
 800812c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800812e:	e012      	b.n	8008156 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	1c5a      	adds	r2, r3, #1
 8008134:	60fa      	str	r2, [r7, #12]
 8008136:	7dfa      	ldrb	r2, [r7, #23]
 8008138:	1c51      	adds	r1, r2, #1
 800813a:	75f9      	strb	r1, [r7, #23]
 800813c:	4611      	mov	r1, r2
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	440a      	add	r2, r1
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008146:	7dfb      	ldrb	r3, [r7, #23]
 8008148:	1c5a      	adds	r2, r3, #1
 800814a:	75fa      	strb	r2, [r7, #23]
 800814c:	461a      	mov	r2, r3
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	4413      	add	r3, r2
 8008152:	2200      	movs	r2, #0
 8008154:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1e8      	bne.n	8008130 <USBD_GetString+0x4e>
    }
  }
}
 800815e:	bf00      	nop
 8008160:	3718      	adds	r7, #24
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008166:	b480      	push	{r7}
 8008168:	b085      	sub	sp, #20
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800816e:	2300      	movs	r3, #0
 8008170:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008172:	e005      	b.n	8008180 <USBD_GetLen+0x1a>
  {
    len++;
 8008174:	7bfb      	ldrb	r3, [r7, #15]
 8008176:	3301      	adds	r3, #1
 8008178:	73fb      	strb	r3, [r7, #15]
    buf++;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	3301      	adds	r3, #1
 800817e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1f5      	bne.n	8008174 <USBD_GetLen+0xe>
  }

  return len;
 8008188:	7bfb      	ldrb	r3, [r7, #15]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3714      	adds	r7, #20
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b084      	sub	sp, #16
 800819a:	af00      	add	r7, sp, #0
 800819c:	60f8      	str	r0, [r7, #12]
 800819e:	60b9      	str	r1, [r7, #8]
 80081a0:	4613      	mov	r3, r2
 80081a2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2202      	movs	r2, #2
 80081a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80081ac:	88fa      	ldrh	r2, [r7, #6]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80081b2:	88fa      	ldrh	r2, [r7, #6]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081b8:	88fb      	ldrh	r3, [r7, #6]
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	2100      	movs	r1, #0
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 fc68 	bl	8008a94 <USBD_LL_Transmit>

  return USBD_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b084      	sub	sp, #16
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	60f8      	str	r0, [r7, #12]
 80081d6:	60b9      	str	r1, [r7, #8]
 80081d8:	4613      	mov	r3, r2
 80081da:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081dc:	88fb      	ldrh	r3, [r7, #6]
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	2100      	movs	r1, #0
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	f000 fc56 	bl	8008a94 <USBD_LL_Transmit>

  return USBD_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b084      	sub	sp, #16
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	60f8      	str	r0, [r7, #12]
 80081fa:	60b9      	str	r1, [r7, #8]
 80081fc:	4613      	mov	r3, r2
 80081fe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2203      	movs	r2, #3
 8008204:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008208:	88fa      	ldrh	r2, [r7, #6]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008210:	88fa      	ldrh	r2, [r7, #6]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008218:	88fb      	ldrh	r3, [r7, #6]
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	2100      	movs	r1, #0
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f000 fc5b 	bl	8008ada <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b084      	sub	sp, #16
 8008232:	af00      	add	r7, sp, #0
 8008234:	60f8      	str	r0, [r7, #12]
 8008236:	60b9      	str	r1, [r7, #8]
 8008238:	4613      	mov	r3, r2
 800823a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800823c:	88fb      	ldrh	r3, [r7, #6]
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	2100      	movs	r1, #0
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f000 fc49 	bl	8008ada <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b082      	sub	sp, #8
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2204      	movs	r2, #4
 800825e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008262:	2300      	movs	r3, #0
 8008264:	2200      	movs	r2, #0
 8008266:	2100      	movs	r1, #0
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fc13 	bl	8008a94 <USBD_LL_Transmit>

  return USBD_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2205      	movs	r2, #5
 8008284:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008288:	2300      	movs	r3, #0
 800828a:	2200      	movs	r2, #0
 800828c:	2100      	movs	r1, #0
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fc23 	bl	8008ada <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
	...

080082a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80082a4:	2200      	movs	r2, #0
 80082a6:	4912      	ldr	r1, [pc, #72]	; (80082f0 <MX_USB_DEVICE_Init+0x50>)
 80082a8:	4812      	ldr	r0, [pc, #72]	; (80082f4 <MX_USB_DEVICE_Init+0x54>)
 80082aa:	f7fe ff57 	bl	800715c <USBD_Init>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80082b4:	f7f8 f8a4 	bl	8000400 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80082b8:	490f      	ldr	r1, [pc, #60]	; (80082f8 <MX_USB_DEVICE_Init+0x58>)
 80082ba:	480e      	ldr	r0, [pc, #56]	; (80082f4 <MX_USB_DEVICE_Init+0x54>)
 80082bc:	f7fe ff79 	bl	80071b2 <USBD_RegisterClass>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d001      	beq.n	80082ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80082c6:	f7f8 f89b 	bl	8000400 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80082ca:	490c      	ldr	r1, [pc, #48]	; (80082fc <MX_USB_DEVICE_Init+0x5c>)
 80082cc:	4809      	ldr	r0, [pc, #36]	; (80082f4 <MX_USB_DEVICE_Init+0x54>)
 80082ce:	f7fe fea7 	bl	8007020 <USBD_CDC_RegisterInterface>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d001      	beq.n	80082dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80082d8:	f7f8 f892 	bl	8000400 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80082dc:	4805      	ldr	r0, [pc, #20]	; (80082f4 <MX_USB_DEVICE_Init+0x54>)
 80082de:	f7fe ff82 	bl	80071e6 <USBD_Start>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d001      	beq.n	80082ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80082e8:	f7f8 f88a 	bl	8000400 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80082ec:	bf00      	nop
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	20000130 	.word	0x20000130
 80082f4:	2000022c 	.word	0x2000022c
 80082f8:	2000001c 	.word	0x2000001c
 80082fc:	20000120 	.word	0x20000120

08008300 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008304:	2200      	movs	r2, #0
 8008306:	4905      	ldr	r1, [pc, #20]	; (800831c <CDC_Init_FS+0x1c>)
 8008308:	4805      	ldr	r0, [pc, #20]	; (8008320 <CDC_Init_FS+0x20>)
 800830a:	f7fe fea0 	bl	800704e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800830e:	4905      	ldr	r1, [pc, #20]	; (8008324 <CDC_Init_FS+0x24>)
 8008310:	4803      	ldr	r0, [pc, #12]	; (8008320 <CDC_Init_FS+0x20>)
 8008312:	f7fe feb6 	bl	8007082 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008316:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008318:	4618      	mov	r0, r3
 800831a:	bd80      	pop	{r7, pc}
 800831c:	200008f0 	.word	0x200008f0
 8008320:	2000022c 	.word	0x2000022c
 8008324:	200004f0 	.word	0x200004f0

08008328 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008328:	b480      	push	{r7}
 800832a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800832c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800832e:	4618      	mov	r0, r3
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	4603      	mov	r3, r0
 8008340:	6039      	str	r1, [r7, #0]
 8008342:	71fb      	strb	r3, [r7, #7]
 8008344:	4613      	mov	r3, r2
 8008346:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008348:	79fb      	ldrb	r3, [r7, #7]
 800834a:	2b23      	cmp	r3, #35	; 0x23
 800834c:	d84a      	bhi.n	80083e4 <CDC_Control_FS+0xac>
 800834e:	a201      	add	r2, pc, #4	; (adr r2, 8008354 <CDC_Control_FS+0x1c>)
 8008350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008354:	080083e5 	.word	0x080083e5
 8008358:	080083e5 	.word	0x080083e5
 800835c:	080083e5 	.word	0x080083e5
 8008360:	080083e5 	.word	0x080083e5
 8008364:	080083e5 	.word	0x080083e5
 8008368:	080083e5 	.word	0x080083e5
 800836c:	080083e5 	.word	0x080083e5
 8008370:	080083e5 	.word	0x080083e5
 8008374:	080083e5 	.word	0x080083e5
 8008378:	080083e5 	.word	0x080083e5
 800837c:	080083e5 	.word	0x080083e5
 8008380:	080083e5 	.word	0x080083e5
 8008384:	080083e5 	.word	0x080083e5
 8008388:	080083e5 	.word	0x080083e5
 800838c:	080083e5 	.word	0x080083e5
 8008390:	080083e5 	.word	0x080083e5
 8008394:	080083e5 	.word	0x080083e5
 8008398:	080083e5 	.word	0x080083e5
 800839c:	080083e5 	.word	0x080083e5
 80083a0:	080083e5 	.word	0x080083e5
 80083a4:	080083e5 	.word	0x080083e5
 80083a8:	080083e5 	.word	0x080083e5
 80083ac:	080083e5 	.word	0x080083e5
 80083b0:	080083e5 	.word	0x080083e5
 80083b4:	080083e5 	.word	0x080083e5
 80083b8:	080083e5 	.word	0x080083e5
 80083bc:	080083e5 	.word	0x080083e5
 80083c0:	080083e5 	.word	0x080083e5
 80083c4:	080083e5 	.word	0x080083e5
 80083c8:	080083e5 	.word	0x080083e5
 80083cc:	080083e5 	.word	0x080083e5
 80083d0:	080083e5 	.word	0x080083e5
 80083d4:	080083e5 	.word	0x080083e5
 80083d8:	080083e5 	.word	0x080083e5
 80083dc:	080083e5 	.word	0x080083e5
 80083e0:	080083e5 	.word	0x080083e5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80083e4:	bf00      	nop
  }

  return (USBD_OK);
 80083e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80083fe:	6879      	ldr	r1, [r7, #4]
 8008400:	4805      	ldr	r0, [pc, #20]	; (8008418 <CDC_Receive_FS+0x24>)
 8008402:	f7fe fe3e 	bl	8007082 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008406:	4804      	ldr	r0, [pc, #16]	; (8008418 <CDC_Receive_FS+0x24>)
 8008408:	f7fe fe7e 	bl	8007108 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800840c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800840e:	4618      	mov	r0, r3
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	2000022c 	.word	0x2000022c

0800841c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	460b      	mov	r3, r1
 8008426:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008428:	2300      	movs	r3, #0
 800842a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800842c:	4b0d      	ldr	r3, [pc, #52]	; (8008464 <CDC_Transmit_FS+0x48>)
 800842e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008432:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800843e:	2301      	movs	r3, #1
 8008440:	e00b      	b.n	800845a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008442:	887b      	ldrh	r3, [r7, #2]
 8008444:	461a      	mov	r2, r3
 8008446:	6879      	ldr	r1, [r7, #4]
 8008448:	4806      	ldr	r0, [pc, #24]	; (8008464 <CDC_Transmit_FS+0x48>)
 800844a:	f7fe fe00 	bl	800704e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800844e:	4805      	ldr	r0, [pc, #20]	; (8008464 <CDC_Transmit_FS+0x48>)
 8008450:	f7fe fe2b 	bl	80070aa <USBD_CDC_TransmitPacket>
 8008454:	4603      	mov	r3, r0
 8008456:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008458:	7bfb      	ldrb	r3, [r7, #15]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	2000022c 	.word	0x2000022c

08008468 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	4603      	mov	r3, r0
 8008470:	6039      	str	r1, [r7, #0]
 8008472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	2212      	movs	r2, #18
 8008478:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800847a:	4b03      	ldr	r3, [pc, #12]	; (8008488 <USBD_FS_DeviceDescriptor+0x20>)
}
 800847c:	4618      	mov	r0, r3
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr
 8008488:	2000014c 	.word	0x2000014c

0800848c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	4603      	mov	r3, r0
 8008494:	6039      	str	r1, [r7, #0]
 8008496:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	2204      	movs	r2, #4
 800849c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800849e:	4b03      	ldr	r3, [pc, #12]	; (80084ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr
 80084ac:	20000160 	.word	0x20000160

080084b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	4603      	mov	r3, r0
 80084b8:	6039      	str	r1, [r7, #0]
 80084ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084bc:	79fb      	ldrb	r3, [r7, #7]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d105      	bne.n	80084ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084c2:	683a      	ldr	r2, [r7, #0]
 80084c4:	4907      	ldr	r1, [pc, #28]	; (80084e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80084c6:	4808      	ldr	r0, [pc, #32]	; (80084e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80084c8:	f7ff fe0b 	bl	80080e2 <USBD_GetString>
 80084cc:	e004      	b.n	80084d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084ce:	683a      	ldr	r2, [r7, #0]
 80084d0:	4904      	ldr	r1, [pc, #16]	; (80084e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80084d2:	4805      	ldr	r0, [pc, #20]	; (80084e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80084d4:	f7ff fe05 	bl	80080e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084d8:	4b02      	ldr	r3, [pc, #8]	; (80084e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	20000cf0 	.word	0x20000cf0
 80084e8:	08008c74 	.word	0x08008c74

080084ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	4603      	mov	r3, r0
 80084f4:	6039      	str	r1, [r7, #0]
 80084f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80084f8:	683a      	ldr	r2, [r7, #0]
 80084fa:	4904      	ldr	r1, [pc, #16]	; (800850c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80084fc:	4804      	ldr	r0, [pc, #16]	; (8008510 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80084fe:	f7ff fdf0 	bl	80080e2 <USBD_GetString>
  return USBD_StrDesc;
 8008502:	4b02      	ldr	r3, [pc, #8]	; (800850c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008504:	4618      	mov	r0, r3
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	20000cf0 	.word	0x20000cf0
 8008510:	08008c88 	.word	0x08008c88

08008514 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	4603      	mov	r3, r0
 800851c:	6039      	str	r1, [r7, #0]
 800851e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	221a      	movs	r2, #26
 8008524:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008526:	f000 f843 	bl	80085b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800852a:	4b02      	ldr	r3, [pc, #8]	; (8008534 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800852c:	4618      	mov	r0, r3
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	20000164 	.word	0x20000164

08008538 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	4603      	mov	r3, r0
 8008540:	6039      	str	r1, [r7, #0]
 8008542:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008544:	79fb      	ldrb	r3, [r7, #7]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d105      	bne.n	8008556 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800854a:	683a      	ldr	r2, [r7, #0]
 800854c:	4907      	ldr	r1, [pc, #28]	; (800856c <USBD_FS_ConfigStrDescriptor+0x34>)
 800854e:	4808      	ldr	r0, [pc, #32]	; (8008570 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008550:	f7ff fdc7 	bl	80080e2 <USBD_GetString>
 8008554:	e004      	b.n	8008560 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	4904      	ldr	r1, [pc, #16]	; (800856c <USBD_FS_ConfigStrDescriptor+0x34>)
 800855a:	4805      	ldr	r0, [pc, #20]	; (8008570 <USBD_FS_ConfigStrDescriptor+0x38>)
 800855c:	f7ff fdc1 	bl	80080e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008560:	4b02      	ldr	r3, [pc, #8]	; (800856c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008562:	4618      	mov	r0, r3
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	20000cf0 	.word	0x20000cf0
 8008570:	08008c9c 	.word	0x08008c9c

08008574 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	4603      	mov	r3, r0
 800857c:	6039      	str	r1, [r7, #0]
 800857e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008580:	79fb      	ldrb	r3, [r7, #7]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d105      	bne.n	8008592 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008586:	683a      	ldr	r2, [r7, #0]
 8008588:	4907      	ldr	r1, [pc, #28]	; (80085a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800858a:	4808      	ldr	r0, [pc, #32]	; (80085ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800858c:	f7ff fda9 	bl	80080e2 <USBD_GetString>
 8008590:	e004      	b.n	800859c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	4904      	ldr	r1, [pc, #16]	; (80085a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008596:	4805      	ldr	r0, [pc, #20]	; (80085ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008598:	f7ff fda3 	bl	80080e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800859c:	4b02      	ldr	r3, [pc, #8]	; (80085a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	20000cf0 	.word	0x20000cf0
 80085ac:	08008ca8 	.word	0x08008ca8

080085b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80085b6:	4b0f      	ldr	r3, [pc, #60]	; (80085f4 <Get_SerialNum+0x44>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80085bc:	4b0e      	ldr	r3, [pc, #56]	; (80085f8 <Get_SerialNum+0x48>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80085c2:	4b0e      	ldr	r3, [pc, #56]	; (80085fc <Get_SerialNum+0x4c>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4413      	add	r3, r2
 80085ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d009      	beq.n	80085ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80085d6:	2208      	movs	r2, #8
 80085d8:	4909      	ldr	r1, [pc, #36]	; (8008600 <Get_SerialNum+0x50>)
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f000 f814 	bl	8008608 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80085e0:	2204      	movs	r2, #4
 80085e2:	4908      	ldr	r1, [pc, #32]	; (8008604 <Get_SerialNum+0x54>)
 80085e4:	68b8      	ldr	r0, [r7, #8]
 80085e6:	f000 f80f 	bl	8008608 <IntToUnicode>
  }
}
 80085ea:	bf00      	nop
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	1ffff7ac 	.word	0x1ffff7ac
 80085f8:	1ffff7b0 	.word	0x1ffff7b0
 80085fc:	1ffff7b4 	.word	0x1ffff7b4
 8008600:	20000166 	.word	0x20000166
 8008604:	20000176 	.word	0x20000176

08008608 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008608:	b480      	push	{r7}
 800860a:	b087      	sub	sp, #28
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	4613      	mov	r3, r2
 8008614:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008616:	2300      	movs	r3, #0
 8008618:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800861a:	2300      	movs	r3, #0
 800861c:	75fb      	strb	r3, [r7, #23]
 800861e:	e027      	b.n	8008670 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	0f1b      	lsrs	r3, r3, #28
 8008624:	2b09      	cmp	r3, #9
 8008626:	d80b      	bhi.n	8008640 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	0f1b      	lsrs	r3, r3, #28
 800862c:	b2da      	uxtb	r2, r3
 800862e:	7dfb      	ldrb	r3, [r7, #23]
 8008630:	005b      	lsls	r3, r3, #1
 8008632:	4619      	mov	r1, r3
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	440b      	add	r3, r1
 8008638:	3230      	adds	r2, #48	; 0x30
 800863a:	b2d2      	uxtb	r2, r2
 800863c:	701a      	strb	r2, [r3, #0]
 800863e:	e00a      	b.n	8008656 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	0f1b      	lsrs	r3, r3, #28
 8008644:	b2da      	uxtb	r2, r3
 8008646:	7dfb      	ldrb	r3, [r7, #23]
 8008648:	005b      	lsls	r3, r3, #1
 800864a:	4619      	mov	r1, r3
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	440b      	add	r3, r1
 8008650:	3237      	adds	r2, #55	; 0x37
 8008652:	b2d2      	uxtb	r2, r2
 8008654:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	011b      	lsls	r3, r3, #4
 800865a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800865c:	7dfb      	ldrb	r3, [r7, #23]
 800865e:	005b      	lsls	r3, r3, #1
 8008660:	3301      	adds	r3, #1
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	4413      	add	r3, r2
 8008666:	2200      	movs	r2, #0
 8008668:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800866a:	7dfb      	ldrb	r3, [r7, #23]
 800866c:	3301      	adds	r3, #1
 800866e:	75fb      	strb	r3, [r7, #23]
 8008670:	7dfa      	ldrb	r2, [r7, #23]
 8008672:	79fb      	ldrb	r3, [r7, #7]
 8008674:	429a      	cmp	r2, r3
 8008676:	d3d3      	bcc.n	8008620 <IntToUnicode+0x18>
  }
}
 8008678:	bf00      	nop
 800867a:	bf00      	nop
 800867c:	371c      	adds	r7, #28
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
	...

08008688 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a0d      	ldr	r2, [pc, #52]	; (80086cc <HAL_PCD_MspInit+0x44>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d113      	bne.n	80086c2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800869a:	4b0d      	ldr	r3, [pc, #52]	; (80086d0 <HAL_PCD_MspInit+0x48>)
 800869c:	69db      	ldr	r3, [r3, #28]
 800869e:	4a0c      	ldr	r2, [pc, #48]	; (80086d0 <HAL_PCD_MspInit+0x48>)
 80086a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80086a4:	61d3      	str	r3, [r2, #28]
 80086a6:	4b0a      	ldr	r3, [pc, #40]	; (80086d0 <HAL_PCD_MspInit+0x48>)
 80086a8:	69db      	ldr	r3, [r3, #28]
 80086aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086ae:	60fb      	str	r3, [r7, #12]
 80086b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80086b2:	2200      	movs	r2, #0
 80086b4:	2100      	movs	r1, #0
 80086b6:	2014      	movs	r0, #20
 80086b8:	f7f8 f8e3 	bl	8000882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80086bc:	2014      	movs	r0, #20
 80086be:	f7f8 f8fc 	bl	80008ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80086c2:	bf00      	nop
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	40005c00 	.word	0x40005c00
 80086d0:	40021000 	.word	0x40021000

080086d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80086e8:	4619      	mov	r1, r3
 80086ea:	4610      	mov	r0, r2
 80086ec:	f7fe fdc4 	bl	8007278 <USBD_LL_SetupStage>
}
 80086f0:	bf00      	nop
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	460b      	mov	r3, r1
 8008702:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800870a:	78fa      	ldrb	r2, [r7, #3]
 800870c:	6879      	ldr	r1, [r7, #4]
 800870e:	4613      	mov	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	00db      	lsls	r3, r3, #3
 8008716:	440b      	add	r3, r1
 8008718:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	78fb      	ldrb	r3, [r7, #3]
 8008720:	4619      	mov	r1, r3
 8008722:	f7fe fdf6 	bl	8007312 <USBD_LL_DataOutStage>
}
 8008726:	bf00      	nop
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b082      	sub	sp, #8
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	460b      	mov	r3, r1
 8008738:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008740:	78fa      	ldrb	r2, [r7, #3]
 8008742:	6879      	ldr	r1, [r7, #4]
 8008744:	4613      	mov	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	4413      	add	r3, r2
 800874a:	00db      	lsls	r3, r3, #3
 800874c:	440b      	add	r3, r1
 800874e:	333c      	adds	r3, #60	; 0x3c
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	78fb      	ldrb	r3, [r7, #3]
 8008754:	4619      	mov	r1, r3
 8008756:	f7fe fe4d 	bl	80073f4 <USBD_LL_DataInStage>
}
 800875a:	bf00      	nop
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b082      	sub	sp, #8
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008770:	4618      	mov	r0, r3
 8008772:	f7fe ff60 	bl	8007636 <USBD_LL_SOF>
}
 8008776:	bf00      	nop
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b084      	sub	sp, #16
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008786:	2301      	movs	r3, #1
 8008788:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	2b02      	cmp	r3, #2
 8008790:	d001      	beq.n	8008796 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008792:	f7f7 fe35 	bl	8000400 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800879c:	7bfa      	ldrb	r2, [r7, #15]
 800879e:	4611      	mov	r1, r2
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7fe ff0d 	bl	80075c0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7fe fec6 	bl	800753e <USBD_LL_Reset>
}
 80087b2:	bf00      	nop
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
	...

080087bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fe ff08 	bl	80075e0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d005      	beq.n	80087e4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80087d8:	4b04      	ldr	r3, [pc, #16]	; (80087ec <HAL_PCD_SuspendCallback+0x30>)
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	4a03      	ldr	r2, [pc, #12]	; (80087ec <HAL_PCD_SuspendCallback+0x30>)
 80087de:	f043 0306 	orr.w	r3, r3, #6
 80087e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80087e4:	bf00      	nop
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	e000ed00 	.word	0xe000ed00

080087f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80087fe:	4618      	mov	r0, r3
 8008800:	f7fe ff03 	bl	800760a <USBD_LL_Resume>
}
 8008804:	bf00      	nop
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008814:	4a28      	ldr	r2, [pc, #160]	; (80088b8 <USBD_LL_Init+0xac>)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a26      	ldr	r2, [pc, #152]	; (80088b8 <USBD_LL_Init+0xac>)
 8008820:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008824:	4b24      	ldr	r3, [pc, #144]	; (80088b8 <USBD_LL_Init+0xac>)
 8008826:	4a25      	ldr	r2, [pc, #148]	; (80088bc <USBD_LL_Init+0xb0>)
 8008828:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800882a:	4b23      	ldr	r3, [pc, #140]	; (80088b8 <USBD_LL_Init+0xac>)
 800882c:	2208      	movs	r2, #8
 800882e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008830:	4b21      	ldr	r3, [pc, #132]	; (80088b8 <USBD_LL_Init+0xac>)
 8008832:	2202      	movs	r2, #2
 8008834:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008836:	4b20      	ldr	r3, [pc, #128]	; (80088b8 <USBD_LL_Init+0xac>)
 8008838:	2202      	movs	r2, #2
 800883a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800883c:	4b1e      	ldr	r3, [pc, #120]	; (80088b8 <USBD_LL_Init+0xac>)
 800883e:	2200      	movs	r2, #0
 8008840:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008842:	4b1d      	ldr	r3, [pc, #116]	; (80088b8 <USBD_LL_Init+0xac>)
 8008844:	2200      	movs	r2, #0
 8008846:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008848:	481b      	ldr	r0, [pc, #108]	; (80088b8 <USBD_LL_Init+0xac>)
 800884a:	f7f8 f9db 	bl	8000c04 <HAL_PCD_Init>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d001      	beq.n	8008858 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008854:	f7f7 fdd4 	bl	8000400 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800885e:	2318      	movs	r3, #24
 8008860:	2200      	movs	r2, #0
 8008862:	2100      	movs	r1, #0
 8008864:	f7f9 fe4e 	bl	8002504 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800886e:	2358      	movs	r3, #88	; 0x58
 8008870:	2200      	movs	r2, #0
 8008872:	2180      	movs	r1, #128	; 0x80
 8008874:	f7f9 fe46 	bl	8002504 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800887e:	23c0      	movs	r3, #192	; 0xc0
 8008880:	2200      	movs	r2, #0
 8008882:	2181      	movs	r1, #129	; 0x81
 8008884:	f7f9 fe3e 	bl	8002504 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800888e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008892:	2200      	movs	r2, #0
 8008894:	2101      	movs	r1, #1
 8008896:	f7f9 fe35 	bl	8002504 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088a4:	2200      	movs	r2, #0
 80088a6:	2182      	movs	r1, #130	; 0x82
 80088a8:	f7f9 fe2c 	bl	8002504 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	20000ef0 	.word	0x20000ef0
 80088bc:	40005c00 	.word	0x40005c00

080088c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7f8 fa66 	bl	8000da8 <HAL_PCD_Start>
 80088dc:	4603      	mov	r3, r0
 80088de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088e0:	7bfb      	ldrb	r3, [r7, #15]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 f954 	bl	8008b90 <USBD_Get_USB_Status>
 80088e8:	4603      	mov	r3, r0
 80088ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b084      	sub	sp, #16
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	4608      	mov	r0, r1
 8008900:	4611      	mov	r1, r2
 8008902:	461a      	mov	r2, r3
 8008904:	4603      	mov	r3, r0
 8008906:	70fb      	strb	r3, [r7, #3]
 8008908:	460b      	mov	r3, r1
 800890a:	70bb      	strb	r3, [r7, #2]
 800890c:	4613      	mov	r3, r2
 800890e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008910:	2300      	movs	r3, #0
 8008912:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008914:	2300      	movs	r3, #0
 8008916:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800891e:	78bb      	ldrb	r3, [r7, #2]
 8008920:	883a      	ldrh	r2, [r7, #0]
 8008922:	78f9      	ldrb	r1, [r7, #3]
 8008924:	f7f8 fb5f 	bl	8000fe6 <HAL_PCD_EP_Open>
 8008928:	4603      	mov	r3, r0
 800892a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800892c:	7bfb      	ldrb	r3, [r7, #15]
 800892e:	4618      	mov	r0, r3
 8008930:	f000 f92e 	bl	8008b90 <USBD_Get_USB_Status>
 8008934:	4603      	mov	r3, r0
 8008936:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008938:	7bbb      	ldrb	r3, [r7, #14]
}
 800893a:	4618      	mov	r0, r3
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b084      	sub	sp, #16
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
 800894a:	460b      	mov	r3, r1
 800894c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800894e:	2300      	movs	r3, #0
 8008950:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008952:	2300      	movs	r3, #0
 8008954:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800895c:	78fa      	ldrb	r2, [r7, #3]
 800895e:	4611      	mov	r1, r2
 8008960:	4618      	mov	r0, r3
 8008962:	f7f8 fb9d 	bl	80010a0 <HAL_PCD_EP_Close>
 8008966:	4603      	mov	r3, r0
 8008968:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800896a:	7bfb      	ldrb	r3, [r7, #15]
 800896c:	4618      	mov	r0, r3
 800896e:	f000 f90f 	bl	8008b90 <USBD_Get_USB_Status>
 8008972:	4603      	mov	r3, r0
 8008974:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008976:	7bbb      	ldrb	r3, [r7, #14]
}
 8008978:	4618      	mov	r0, r3
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	460b      	mov	r3, r1
 800898a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800898c:	2300      	movs	r3, #0
 800898e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008990:	2300      	movs	r3, #0
 8008992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800899a:	78fa      	ldrb	r2, [r7, #3]
 800899c:	4611      	mov	r1, r2
 800899e:	4618      	mov	r0, r3
 80089a0:	f7f8 fc46 	bl	8001230 <HAL_PCD_EP_SetStall>
 80089a4:	4603      	mov	r3, r0
 80089a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
 80089aa:	4618      	mov	r0, r3
 80089ac:	f000 f8f0 	bl	8008b90 <USBD_Get_USB_Status>
 80089b0:	4603      	mov	r3, r0
 80089b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b084      	sub	sp, #16
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
 80089c6:	460b      	mov	r3, r1
 80089c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089d8:	78fa      	ldrb	r2, [r7, #3]
 80089da:	4611      	mov	r1, r2
 80089dc:	4618      	mov	r0, r3
 80089de:	f7f8 fc79 	bl	80012d4 <HAL_PCD_EP_ClrStall>
 80089e2:	4603      	mov	r3, r0
 80089e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089e6:	7bfb      	ldrb	r3, [r7, #15]
 80089e8:	4618      	mov	r0, r3
 80089ea:	f000 f8d1 	bl	8008b90 <USBD_Get_USB_Status>
 80089ee:	4603      	mov	r3, r0
 80089f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	460b      	mov	r3, r1
 8008a06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008a10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	da0c      	bge.n	8008a32 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008a18:	78fb      	ldrb	r3, [r7, #3]
 8008a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a1e:	68f9      	ldr	r1, [r7, #12]
 8008a20:	1c5a      	adds	r2, r3, #1
 8008a22:	4613      	mov	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4413      	add	r3, r2
 8008a28:	00db      	lsls	r3, r3, #3
 8008a2a:	440b      	add	r3, r1
 8008a2c:	3302      	adds	r3, #2
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	e00b      	b.n	8008a4a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008a32:	78fb      	ldrb	r3, [r7, #3]
 8008a34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a38:	68f9      	ldr	r1, [r7, #12]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	00db      	lsls	r3, r3, #3
 8008a42:	440b      	add	r3, r1
 8008a44:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008a48:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3714      	adds	r7, #20
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b084      	sub	sp, #16
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
 8008a5e:	460b      	mov	r3, r1
 8008a60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a62:	2300      	movs	r3, #0
 8008a64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a70:	78fa      	ldrb	r2, [r7, #3]
 8008a72:	4611      	mov	r1, r2
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7f8 fa91 	bl	8000f9c <HAL_PCD_SetAddress>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a7e:	7bfb      	ldrb	r3, [r7, #15]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 f885 	bl	8008b90 <USBD_Get_USB_Status>
 8008a86:	4603      	mov	r3, r0
 8008a88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b086      	sub	sp, #24
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	607a      	str	r2, [r7, #4]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	72fb      	strb	r3, [r7, #11]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aac:	2300      	movs	r3, #0
 8008aae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ab6:	893b      	ldrh	r3, [r7, #8]
 8008ab8:	7af9      	ldrb	r1, [r7, #11]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	f7f8 fb81 	bl	80011c2 <HAL_PCD_EP_Transmit>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ac4:	7dfb      	ldrb	r3, [r7, #23]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 f862 	bl	8008b90 <USBD_Get_USB_Status>
 8008acc:	4603      	mov	r3, r0
 8008ace:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ad0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3718      	adds	r7, #24
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b086      	sub	sp, #24
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	60f8      	str	r0, [r7, #12]
 8008ae2:	607a      	str	r2, [r7, #4]
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	72fb      	strb	r3, [r7, #11]
 8008aea:	4613      	mov	r3, r2
 8008aec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aee:	2300      	movs	r3, #0
 8008af0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008af2:	2300      	movs	r3, #0
 8008af4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008afc:	893b      	ldrh	r3, [r7, #8]
 8008afe:	7af9      	ldrb	r1, [r7, #11]
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	f7f8 fb15 	bl	8001130 <HAL_PCD_EP_Receive>
 8008b06:	4603      	mov	r3, r0
 8008b08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b0a:	7dfb      	ldrb	r3, [r7, #23]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 f83f 	bl	8008b90 <USBD_Get_USB_Status>
 8008b12:	4603      	mov	r3, r0
 8008b14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b16:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3718      	adds	r7, #24
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b32:	78fa      	ldrb	r2, [r7, #3]
 8008b34:	4611      	mov	r1, r2
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7f8 fb2b 	bl	8001192 <HAL_PCD_EP_GetRxCount>
 8008b3c:	4603      	mov	r3, r0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3708      	adds	r7, #8
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
	...

08008b48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008b50:	4b03      	ldr	r3, [pc, #12]	; (8008b60 <USBD_static_malloc+0x18>)
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	370c      	adds	r7, #12
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	200011dc 	.word	0x200011dc

08008b64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]

}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	460b      	mov	r3, r1
 8008b82:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008b84:	bf00      	nop
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b085      	sub	sp, #20
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	4603      	mov	r3, r0
 8008b98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b9e:	79fb      	ldrb	r3, [r7, #7]
 8008ba0:	2b03      	cmp	r3, #3
 8008ba2:	d817      	bhi.n	8008bd4 <USBD_Get_USB_Status+0x44>
 8008ba4:	a201      	add	r2, pc, #4	; (adr r2, 8008bac <USBD_Get_USB_Status+0x1c>)
 8008ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008baa:	bf00      	nop
 8008bac:	08008bbd 	.word	0x08008bbd
 8008bb0:	08008bc3 	.word	0x08008bc3
 8008bb4:	08008bc9 	.word	0x08008bc9
 8008bb8:	08008bcf 	.word	0x08008bcf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	73fb      	strb	r3, [r7, #15]
    break;
 8008bc0:	e00b      	b.n	8008bda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008bc2:	2302      	movs	r3, #2
 8008bc4:	73fb      	strb	r3, [r7, #15]
    break;
 8008bc6:	e008      	b.n	8008bda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	73fb      	strb	r3, [r7, #15]
    break;
 8008bcc:	e005      	b.n	8008bda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008bce:	2302      	movs	r3, #2
 8008bd0:	73fb      	strb	r3, [r7, #15]
    break;
 8008bd2:	e002      	b.n	8008bda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008bd4:	2302      	movs	r3, #2
 8008bd6:	73fb      	strb	r3, [r7, #15]
    break;
 8008bd8:	bf00      	nop
  }
  return usb_status;
 8008bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3714      	adds	r7, #20
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <__libc_init_array>:
 8008be8:	b570      	push	{r4, r5, r6, lr}
 8008bea:	4d0d      	ldr	r5, [pc, #52]	; (8008c20 <__libc_init_array+0x38>)
 8008bec:	4c0d      	ldr	r4, [pc, #52]	; (8008c24 <__libc_init_array+0x3c>)
 8008bee:	1b64      	subs	r4, r4, r5
 8008bf0:	10a4      	asrs	r4, r4, #2
 8008bf2:	2600      	movs	r6, #0
 8008bf4:	42a6      	cmp	r6, r4
 8008bf6:	d109      	bne.n	8008c0c <__libc_init_array+0x24>
 8008bf8:	4d0b      	ldr	r5, [pc, #44]	; (8008c28 <__libc_init_array+0x40>)
 8008bfa:	4c0c      	ldr	r4, [pc, #48]	; (8008c2c <__libc_init_array+0x44>)
 8008bfc:	f000 f820 	bl	8008c40 <_init>
 8008c00:	1b64      	subs	r4, r4, r5
 8008c02:	10a4      	asrs	r4, r4, #2
 8008c04:	2600      	movs	r6, #0
 8008c06:	42a6      	cmp	r6, r4
 8008c08:	d105      	bne.n	8008c16 <__libc_init_array+0x2e>
 8008c0a:	bd70      	pop	{r4, r5, r6, pc}
 8008c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c10:	4798      	blx	r3
 8008c12:	3601      	adds	r6, #1
 8008c14:	e7ee      	b.n	8008bf4 <__libc_init_array+0xc>
 8008c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c1a:	4798      	blx	r3
 8008c1c:	3601      	adds	r6, #1
 8008c1e:	e7f2      	b.n	8008c06 <__libc_init_array+0x1e>
 8008c20:	08008cf0 	.word	0x08008cf0
 8008c24:	08008cf0 	.word	0x08008cf0
 8008c28:	08008cf0 	.word	0x08008cf0
 8008c2c:	08008cf4 	.word	0x08008cf4

08008c30 <memset>:
 8008c30:	4402      	add	r2, r0
 8008c32:	4603      	mov	r3, r0
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d100      	bne.n	8008c3a <memset+0xa>
 8008c38:	4770      	bx	lr
 8008c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c3e:	e7f9      	b.n	8008c34 <memset+0x4>

08008c40 <_init>:
 8008c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c42:	bf00      	nop
 8008c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c46:	bc08      	pop	{r3}
 8008c48:	469e      	mov	lr, r3
 8008c4a:	4770      	bx	lr

08008c4c <_fini>:
 8008c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4e:	bf00      	nop
 8008c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c52:	bc08      	pop	{r3}
 8008c54:	469e      	mov	lr, r3
 8008c56:	4770      	bx	lr
