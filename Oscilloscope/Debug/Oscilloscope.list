
Oscilloscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cf4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08005e80  08005e80  00015e80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006090  08006090  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006090  08006090  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006090  08006090  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006090  08006090  00016090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006094  08006094  00016094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  2000000c  080060a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  080060a4  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ab4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f7  00000000  00000000  00030af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  00032de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  00033c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c103  00000000  00000000  00034960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001150e  00000000  00000000  00050a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a724a  00000000  00000000  00061f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001091bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f48  00000000  00000000  0010920c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005e64 	.word	0x08005e64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005e64 	.word	0x08005e64

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr
 8000b04:	0000      	movs	r0, r0
	...

08000b08 <calcsin>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t sine_val[100];
uint32_t counter = 0;

void calcsin() {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 100; i++) {
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	e03a      	b.n	8000b8a <calcsin+0x82>
		sine_val[i] = ((sin(i * 2 * M_PI / 100) + 1) * (4096 / 2));
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fca7 	bl	800046c <__aeabi_i2d>
 8000b1e:	a324      	add	r3, pc, #144	; (adr r3, 8000bb0 <calcsin+0xa8>)
 8000b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b24:	f7ff fd0c 	bl	8000540 <__aeabi_dmul>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	460b      	mov	r3, r1
 8000b2c:	4610      	mov	r0, r2
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f04f 0200 	mov.w	r2, #0
 8000b34:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <calcsin+0x98>)
 8000b36:	f7ff fe2d 	bl	8000794 <__aeabi_ddiv>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	ec43 2b17 	vmov	d7, r2, r3
 8000b42:	eeb0 0a47 	vmov.f32	s0, s14
 8000b46:	eef0 0a67 	vmov.f32	s1, s15
 8000b4a:	f004 f941 	bl	8004dd0 <sin>
 8000b4e:	ec51 0b10 	vmov	r0, r1, d0
 8000b52:	f04f 0200 	mov.w	r2, #0
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <calcsin+0x9c>)
 8000b58:	f7ff fb3c 	bl	80001d4 <__adddf3>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	460b      	mov	r3, r1
 8000b60:	4610      	mov	r0, r2
 8000b62:	4619      	mov	r1, r3
 8000b64:	f04f 0200 	mov.w	r2, #0
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <calcsin+0xa0>)
 8000b6a:	f7ff fce9 	bl	8000540 <__aeabi_dmul>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	460b      	mov	r3, r1
 8000b72:	4610      	mov	r0, r2
 8000b74:	4619      	mov	r1, r3
 8000b76:	f7ff ffa5 	bl	8000ac4 <__aeabi_d2uiz>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	490b      	ldr	r1, [pc, #44]	; (8000bac <calcsin+0xa4>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 100; i++) {
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3301      	adds	r3, #1
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b63      	cmp	r3, #99	; 0x63
 8000b8e:	ddc1      	ble.n	8000b14 <calcsin+0xc>
	}
}
 8000b90:	bf00      	nop
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	f3af 8000 	nop.w
 8000ba0:	40590000 	.word	0x40590000
 8000ba4:	3ff00000 	.word	0x3ff00000
 8000ba8:	40a00000 	.word	0x40a00000
 8000bac:	200001a0 	.word	0x200001a0
 8000bb0:	54442d18 	.word	0x54442d18
 8000bb4:	400921fb 	.word	0x400921fb

08000bb8 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc6:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <HAL_TIM_IC_CaptureCallback+0x20>)
 8000bc8:	6013      	str	r3, [r2, #0]
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000330 	.word	0x20000330

08000bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	  GPIO_PinState estpul;
	  bool ctrl = false;
 8000be2:	2300      	movs	r3, #0
 8000be4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be6:	f000 fd6d 	bl	80016c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bea:	f000 f851 	bl	8000c90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bee:	f000 f9c9 	bl	8000f84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bf2:	f000 f9a9 	bl	8000f48 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000bf6:	f000 f977 	bl	8000ee8 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000bfa:	f000 f8a5 	bl	8000d48 <MX_DAC_Init>
  MX_TIM2_Init();
 8000bfe:	f000 f91f 	bl	8000e40 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000c02:	f000 f8cb 	bl	8000d9c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000c06:	213c      	movs	r1, #60	; 0x3c
 8000c08:	481c      	ldr	r0, [pc, #112]	; (8000c7c <main+0xa0>)
 8000c0a:	f003 f8cb 	bl	8003da4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start(&htim1);
 8000c0e:	481c      	ldr	r0, [pc, #112]	; (8000c80 <main+0xa4>)
 8000c10:	f002 ffd6 	bl	8003bc0 <HAL_TIM_Base_Start>
	calcsin();
 8000c14:	f7ff ff78 	bl	8000b08 <calcsin>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sine_val, 100, DAC_ALIGN_12B_R);
 8000c18:	2300      	movs	r3, #0
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	2364      	movs	r3, #100	; 0x64
 8000c1e:	4a19      	ldr	r2, [pc, #100]	; (8000c84 <main+0xa8>)
 8000c20:	2100      	movs	r1, #0
 8000c22:	4819      	ldr	r0, [pc, #100]	; (8000c88 <main+0xac>)
 8000c24:	f000 ff2a 	bl	8001a7c <HAL_DAC_Start_DMA>
	max_init(0x03);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 fb71 	bl	8001310 <max_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  estpul = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 8000c2e:	2101      	movs	r1, #1
 8000c30:	4816      	ldr	r0, [pc, #88]	; (8000c8c <main+0xb0>)
 8000c32:	f001 fb1d 	bl	8002270 <HAL_GPIO_ReadPin>
 8000c36:	4603      	mov	r3, r0
 8000c38:	71bb      	strb	r3, [r7, #6]

	  	if (estpul && !ctrl){
 8000c3a:	79bb      	ldrb	r3, [r7, #6]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d00b      	beq.n	8000c58 <main+0x7c>
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	f083 0301 	eor.w	r3, r3, #1
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d005      	beq.n	8000c58 <main+0x7c>

	  		ctrl = true;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	71fb      	strb	r3, [r7, #7]
	  		HAL_Delay(50);
 8000c50:	2032      	movs	r0, #50	; 0x32
 8000c52:	f000 fd9d 	bl	8001790 <HAL_Delay>
 8000c56:	e00f      	b.n	8000c78 <main+0x9c>
	  	}
	  	else if (!estpul && ctrl){
 8000c58:	79bb      	ldrb	r3, [r7, #6]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1e7      	bne.n	8000c2e <main+0x52>
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d0e4      	beq.n	8000c2e <main+0x52>

	  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c68:	4808      	ldr	r0, [pc, #32]	; (8000c8c <main+0xb0>)
 8000c6a:	f001 fb31 	bl	80022d0 <HAL_GPIO_TogglePin>
	  	ctrl = false ;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	71fb      	strb	r3, [r7, #7]
	  	HAL_Delay(50);
 8000c72:	2032      	movs	r0, #50	; 0x32
 8000c74:	f000 fd8c 	bl	8001790 <HAL_Delay>
	  estpul = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 8000c78:	e7d9      	b.n	8000c2e <main+0x52>
 8000c7a:	bf00      	nop
 8000c7c:	200000cc 	.word	0x200000cc
 8000c80:	20000080 	.word	0x20000080
 8000c84:	200001a0 	.word	0x200001a0
 8000c88:	20000028 	.word	0x20000028
 8000c8c:	48000400 	.word	0x48000400

08000c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b09c      	sub	sp, #112	; 0x70
 8000c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c9a:	2228      	movs	r2, #40	; 0x28
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f004 f88e 	bl	8004dc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	2234      	movs	r2, #52	; 0x34
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f004 f880 	bl	8004dc0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cda:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cdc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ce0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f001 fb0c 	bl	8002304 <HAL_RCC_OscConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cf2:	f000 f9bb 	bl	800106c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf6:	230f      	movs	r3, #15
 8000cf8:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d10:	2102      	movs	r1, #2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f002 fb34 	bl	8003380 <HAL_RCC_ClockConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d1e:	f000 f9a5 	bl	800106c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d26:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f002 fd5c 	bl	80037ec <HAL_RCCEx_PeriphCLKConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d3a:	f000 f997 	bl	800106c <Error_Handler>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3770      	adds	r7, #112	; 0x70
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_DAC_Init+0x4c>)
 8000d5a:	4a0f      	ldr	r2, [pc, #60]	; (8000d98 <MX_DAC_Init+0x50>)
 8000d5c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000d5e:	480d      	ldr	r0, [pc, #52]	; (8000d94 <MX_DAC_Init+0x4c>)
 8000d60:	f000 fe4b 	bl	80019fa <HAL_DAC_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8000d6a:	f000 f97f 	bl	800106c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000d6e:	2324      	movs	r3, #36	; 0x24
 8000d70:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2200      	movs	r2, #0
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_DAC_Init+0x4c>)
 8000d7e:	f000 feeb 	bl	8001b58 <HAL_DAC_ConfigChannel>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8000d88:	f000 f970 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000028 	.word	0x20000028
 8000d98:	40007400 	.word	0x40007400

08000d9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dba:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <MX_TIM1_Init+0x9c>)
 8000dbc:	4a1f      	ldr	r2, [pc, #124]	; (8000e3c <MX_TIM1_Init+0xa0>)
 8000dbe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000dc0:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <MX_TIM1_Init+0x9c>)
 8000dc2:	2247      	movs	r2, #71	; 0x47
 8000dc4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <MX_TIM1_Init+0x9c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <MX_TIM1_Init+0x9c>)
 8000dce:	2264      	movs	r2, #100	; 0x64
 8000dd0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd2:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <MX_TIM1_Init+0x9c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dd8:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <MX_TIM1_Init+0x9c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <MX_TIM1_Init+0x9c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000de4:	4814      	ldr	r0, [pc, #80]	; (8000e38 <MX_TIM1_Init+0x9c>)
 8000de6:	f002 fe93 	bl	8003b10 <HAL_TIM_Base_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000df0:	f000 f93c 	bl	800106c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dfa:	f107 0310 	add.w	r3, r7, #16
 8000dfe:	4619      	mov	r1, r3
 8000e00:	480d      	ldr	r0, [pc, #52]	; (8000e38 <MX_TIM1_Init+0x9c>)
 8000e02:	f003 f97c 	bl	80040fe <HAL_TIM_ConfigClockSource>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000e0c:	f000 f92e 	bl	800106c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e10:	2320      	movs	r3, #32
 8000e12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_TIM1_Init+0x9c>)
 8000e22:	f003 fb8b 	bl	800453c <HAL_TIMEx_MasterConfigSynchronization>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000e2c:	f000 f91e 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	3720      	adds	r7, #32
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000080 	.word	0x20000080
 8000e3c:	40012c00 	.word	0x40012c00

08000e40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08c      	sub	sp, #48	; 0x30
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	2224      	movs	r2, #36	; 0x24
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f003 ffb6 	bl	8004dc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e54:	463b      	mov	r3, r7
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e5e:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <MX_TIM2_Init+0xa4>)
 8000e60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e66:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <MX_TIM2_Init+0xa4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <MX_TIM2_Init+0xa4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000e72:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <MX_TIM2_Init+0xa4>)
 8000e74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <MX_TIM2_Init+0xa4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <MX_TIM2_Init+0xa4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e86:	2303      	movs	r3, #3
 8000e88:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <MX_TIM2_Init+0xa4>)
 8000eb2:	f002 fed1 	bl	8003c58 <HAL_TIM_Encoder_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000ebc:	f000 f8d6 	bl	800106c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ec8:	463b      	mov	r3, r7
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_TIM2_Init+0xa4>)
 8000ece:	f003 fb35 	bl	800453c <HAL_TIMEx_MasterConfigSynchronization>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000ed8:	f000 f8c8 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	3730      	adds	r7, #48	; 0x30
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200000cc 	.word	0x200000cc

08000ee8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000eee:	4a15      	ldr	r2, [pc, #84]	; (8000f44 <MX_USART2_UART_Init+0x5c>)
 8000ef0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000ef4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ef8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f0e:	220c      	movs	r2, #12
 8000f10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_USART2_UART_Init+0x58>)
 8000f2c:	f003 fb8a 	bl	8004644 <HAL_UART_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f36:	f000 f899 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000118 	.word	0x20000118
 8000f44:	40004400 	.word	0x40004400

08000f48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_DMA_Init+0x38>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <MX_DMA_Init+0x38>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6153      	str	r3, [r2, #20]
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_DMA_Init+0x38>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	200d      	movs	r0, #13
 8000f6c:	f000 fd0f 	bl	800198e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000f70:	200d      	movs	r0, #13
 8000f72:	f000 fd28 	bl	80019c6 <HAL_NVIC_EnableIRQ>

}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000

08000f84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	4b31      	ldr	r3, [pc, #196]	; (8001060 <MX_GPIO_Init+0xdc>)
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	4a30      	ldr	r2, [pc, #192]	; (8001060 <MX_GPIO_Init+0xdc>)
 8000fa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fa4:	6153      	str	r3, [r2, #20]
 8000fa6:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <MX_GPIO_Init+0xdc>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fb2:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <MX_GPIO_Init+0xdc>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	4a2a      	ldr	r2, [pc, #168]	; (8001060 <MX_GPIO_Init+0xdc>)
 8000fb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fbc:	6153      	str	r3, [r2, #20]
 8000fbe:	4b28      	ldr	r3, [pc, #160]	; (8001060 <MX_GPIO_Init+0xdc>)
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	4b25      	ldr	r3, [pc, #148]	; (8001060 <MX_GPIO_Init+0xdc>)
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	4a24      	ldr	r2, [pc, #144]	; (8001060 <MX_GPIO_Init+0xdc>)
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	6153      	str	r3, [r2, #20]
 8000fd6:	4b22      	ldr	r3, [pc, #136]	; (8001060 <MX_GPIO_Init+0xdc>)
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <MX_GPIO_Init+0xdc>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	4a1e      	ldr	r2, [pc, #120]	; (8001060 <MX_GPIO_Init+0xdc>)
 8000fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fec:	6153      	str	r3, [r2, #20]
 8000fee:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <MX_GPIO_Init+0xdc>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f24e 0140 	movw	r1, #57408	; 0xe040
 8001000:	4818      	ldr	r0, [pc, #96]	; (8001064 <MX_GPIO_Init+0xe0>)
 8001002:	f001 f94d 	bl	80022a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800100a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800100c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4812      	ldr	r0, [pc, #72]	; (8001068 <MX_GPIO_Init+0xe4>)
 800101e:	f000 ffb5 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001022:	2301      	movs	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	480b      	ldr	r0, [pc, #44]	; (8001064 <MX_GPIO_Init+0xe0>)
 8001036:	f000 ffa9 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PB14 PB15 PB6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6;
 800103a:	f24e 0340 	movw	r3, #57408	; 0xe040
 800103e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001040:	2301      	movs	r3, #1
 8001042:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	4804      	ldr	r0, [pc, #16]	; (8001064 <MX_GPIO_Init+0xe0>)
 8001054:	f000 ff9a 	bl	8001f8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021000 	.word	0x40021000
 8001064:	48000400 	.word	0x48000400
 8001068:	48000800 	.word	0x48000800

0800106c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001074:	e7fe      	b.n	8001074 <Error_Handler+0x8>
	...

08001078 <write_byte>:
};



void write_byte (uint8_t byte)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	e01a      	b.n	80010be <write_byte+0x46>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 8001088:	2200      	movs	r2, #0
 800108a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800108e:	4810      	ldr	r0, [pc, #64]	; (80010d0 <write_byte+0x58>)
 8001090:	f001 f906 	bl	80022a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800109a:	b2db      	uxtb	r3, r3
 800109c:	461a      	mov	r2, r3
 800109e:	2140      	movs	r1, #64	; 0x40
 80010a0:	480b      	ldr	r0, [pc, #44]	; (80010d0 <write_byte+0x58>)
 80010a2:	f001 f8fd 	bl	80022a0 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 80010ac:	2201      	movs	r2, #1
 80010ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010b2:	4807      	ldr	r0, [pc, #28]	; (80010d0 <write_byte+0x58>)
 80010b4:	f001 f8f4 	bl	80022a0 <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3301      	adds	r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2b07      	cmp	r3, #7
 80010c2:	dde1      	ble.n	8001088 <write_byte+0x10>
	}
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	48000400 	.word	0x48000400

080010d4 <write_max_cmd>:


void write_max_cmd (uint8_t address, uint8_t cmd)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	460a      	mov	r2, r1
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	4613      	mov	r3, r2
 80010e2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 80010e4:	2200      	movs	r2, #0
 80010e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ea:	4812      	ldr	r0, [pc, #72]	; (8001134 <write_max_cmd+0x60>)
 80010ec:	f001 f8d8 	bl	80022a0 <HAL_GPIO_WritePin>
	for (int i=0;i<num; i++)
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	e00a      	b.n	800110c <write_max_cmd+0x38>
	{
		write_byte (address);
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ffbd 	bl	8001078 <write_byte>
		write_byte (cmd); 
 80010fe:	79bb      	ldrb	r3, [r7, #6]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ffb9 	bl	8001078 <write_byte>
	for (int i=0;i<num; i++)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3301      	adds	r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	ddf1      	ble.n	80010f6 <write_max_cmd+0x22>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001118:	4806      	ldr	r0, [pc, #24]	; (8001134 <write_max_cmd+0x60>)
 800111a:	f001 f8c1 	bl	80022a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 800111e:	2201      	movs	r2, #1
 8001120:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001124:	4803      	ldr	r0, [pc, #12]	; (8001134 <write_max_cmd+0x60>)
 8001126:	f001 f8bb 	bl	80022a0 <HAL_GPIO_WritePin>
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	48000400 	.word	0x48000400

08001138 <setled>:


void setled(uint8_t row, uint8_t col, uint8_t value)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
 8001142:	460b      	mov	r3, r1
 8001144:	71bb      	strb	r3, [r7, #6]
 8001146:	4613      	mov	r3, r2
 8001148:	717b      	strb	r3, [r7, #5]
  bitWrite(buffer[col], row, value);
 800114a:	797b      	ldrb	r3, [r7, #5]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00d      	beq.n	800116c <setled+0x34>
 8001150:	79bb      	ldrb	r3, [r7, #6]
 8001152:	4a2e      	ldr	r2, [pc, #184]	; (800120c <setled+0xd4>)
 8001154:	5cd1      	ldrb	r1, [r2, r3]
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	2201      	movs	r2, #1
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	b2da      	uxtb	r2, r3
 8001160:	79bb      	ldrb	r3, [r7, #6]
 8001162:	430a      	orrs	r2, r1
 8001164:	b2d1      	uxtb	r1, r2
 8001166:	4a29      	ldr	r2, [pc, #164]	; (800120c <setled+0xd4>)
 8001168:	54d1      	strb	r1, [r2, r3]
 800116a:	e00e      	b.n	800118a <setled+0x52>
 800116c:	79bb      	ldrb	r3, [r7, #6]
 800116e:	4a27      	ldr	r2, [pc, #156]	; (800120c <setled+0xd4>)
 8001170:	5cd1      	ldrb	r1, [r2, r3]
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2201      	movs	r2, #1
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	b2da      	uxtb	r2, r3
 8001180:	79bb      	ldrb	r3, [r7, #6]
 8001182:	400a      	ands	r2, r1
 8001184:	b2d1      	uxtb	r1, r2
 8001186:	4a21      	ldr	r2, [pc, #132]	; (800120c <setled+0xd4>)
 8001188:	54d1      	strb	r1, [r2, r3]

	int n = col / 8;
 800118a:	79bb      	ldrb	r3, [r7, #6]
 800118c:	08db      	lsrs	r3, r3, #3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	613b      	str	r3, [r7, #16]
	int c = col % 8;
 8001192:	79bb      	ldrb	r3, [r7, #6]
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW    
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a0:	481b      	ldr	r0, [pc, #108]	; (8001210 <setled+0xd8>)
 80011a2:	f001 f87d 	bl	80022a0 <HAL_GPIO_WritePin>
	for (int i=0; i<num; i++) 
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	e01b      	b.n	80011e4 <setled+0xac>
	{
		if (i == (num-(n+1)))
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	425b      	negs	r3, r3
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d10d      	bne.n	80011d2 <setled+0x9a>
		{
			write_byte (((c+1)));
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	3301      	adds	r3, #1
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff5a 	bl	8001078 <write_byte>
			write_byte (buffer[col]);
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	4a11      	ldr	r2, [pc, #68]	; (800120c <setled+0xd4>)
 80011c8:	5cd3      	ldrb	r3, [r2, r3]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ff54 	bl	8001078 <write_byte>
 80011d0:	e005      	b.n	80011de <setled+0xa6>
		}
		else
		{
			write_byte (0);
 80011d2:	2000      	movs	r0, #0
 80011d4:	f7ff ff50 	bl	8001078 <write_byte>
			write_byte (0);
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff ff4d 	bl	8001078 <write_byte>
	for (int i=0; i<num; i++) 
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	3301      	adds	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	dde0      	ble.n	80011ac <setled+0x74>
		}
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW 
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011f0:	4807      	ldr	r0, [pc, #28]	; (8001210 <setled+0xd8>)
 80011f2:	f001 f855 	bl	80022a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH 
 80011f6:	2201      	movs	r2, #1
 80011f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011fc:	4804      	ldr	r0, [pc, #16]	; (8001210 <setled+0xd8>)
 80011fe:	f001 f84f 	bl	80022a0 <HAL_GPIO_WritePin>
}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000334 	.word	0x20000334
 8001210:	48000400 	.word	0x48000400

08001214 <setrow>:


void setrow(uint8_t row, uint8_t value)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	460a      	mov	r2, r1
 800121e:	71fb      	strb	r3, [r7, #7]
 8001220:	4613      	mov	r3, r2
 8001222:	71bb      	strb	r3, [r7, #6]
	int n = row / 8;
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	08db      	lsrs	r3, r3, #3
 8001228:	b2db      	uxtb	r3, r3
 800122a:	617b      	str	r3, [r7, #20]
	int r = row % 8;
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	613b      	str	r3, [r7, #16]
	
	uint8_t store = value;
 8001234:	79bb      	ldrb	r3, [r7, #6]
 8001236:	73fb      	strb	r3, [r7, #15]
	for (int i=0; i<num; i++) 
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
 800123c:	e02d      	b.n	800129a <setrow+0x86>
	{
		if (i == ((n)))
 800123e:	69fa      	ldr	r2, [r7, #28]
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	429a      	cmp	r2, r3
 8001244:	d120      	bne.n	8001288 <setrow+0x74>
		{
//			for (int col=0+(8*n); col<8+(8*n); col++)  // uncomment this if the character looks inverted about X axis
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	3307      	adds	r3, #7
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	e015      	b.n	800127c <setrow+0x68>
			{
				bool b = value&0x80;
 8001250:	79bb      	ldrb	r3, [r7, #6]
 8001252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001256:	2b00      	cmp	r3, #0
 8001258:	bf14      	ite	ne
 800125a:	2301      	movne	r3, #1
 800125c:	2300      	moveq	r3, #0
 800125e:	73bb      	strb	r3, [r7, #14]
				setled (r, col, b);
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	b2d1      	uxtb	r1, r2
 8001268:	7bba      	ldrb	r2, [r7, #14]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ff64 	bl	8001138 <setled>
				value<<=1;
 8001270:	79bb      	ldrb	r3, [r7, #6]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	71bb      	strb	r3, [r7, #6]
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	3b01      	subs	r3, #1
 800127a:	61bb      	str	r3, [r7, #24]
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	429a      	cmp	r2, r3
 8001284:	dae4      	bge.n	8001250 <setrow+0x3c>
 8001286:	e005      	b.n	8001294 <setrow+0x80>
			}
		}
		else
		{
			write_byte (0);
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff fef5 	bl	8001078 <write_byte>
			write_byte (0);
 800128e:	2000      	movs	r0, #0
 8001290:	f7ff fef2 	bl	8001078 <write_byte>
	for (int i=0; i<num; i++) 
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	3301      	adds	r3, #1
 8001298:	61fb      	str	r3, [r7, #28]
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	2b00      	cmp	r3, #0
 800129e:	ddce      	ble.n	800123e <setrow+0x2a>
		}
	}
	buffer_row[row] = store;
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	4903      	ldr	r1, [pc, #12]	; (80012b0 <setrow+0x9c>)
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	54ca      	strb	r2, [r1, r3]
}
 80012a8:	bf00      	nop
 80012aa:	3720      	adds	r7, #32
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000384 	.word	0x20000384

080012b4 <max_clear>:
}



void max_clear(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
	for (int i=0; i<num*8; i++) 
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	e008      	b.n	80012d2 <max_clear+0x1e>
		setrow(i,0);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff ffa4 	bl	8001214 <setrow>
	for (int i=0; i<num*8; i++) 
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3301      	adds	r3, #1
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b07      	cmp	r3, #7
 80012d6:	ddf3      	ble.n	80012c0 <max_clear+0xc>
		
	for (int i=0; i<80; i++)
 80012d8:	2300      	movs	r3, #0
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	e00c      	b.n	80012f8 <max_clear+0x44>
	{
		buffer[i] = 0;
 80012de:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <max_clear+0x54>)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
	  buffer_row[i] = 0;
 80012e8:	4a08      	ldr	r2, [pc, #32]	; (800130c <max_clear+0x58>)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	4413      	add	r3, r2
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	2b4f      	cmp	r3, #79	; 0x4f
 80012fc:	ddef      	ble.n	80012de <max_clear+0x2a>
	}
}
 80012fe:	bf00      	nop
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000334 	.word	0x20000334
 800130c:	20000384 	.word	0x20000384

08001310 <max_init>:
}



void max_init (uint8_t brightness)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
	write_max_cmd(0x09, 0x00);       //  no decoding
 800131a:	2100      	movs	r1, #0
 800131c:	2009      	movs	r0, #9
 800131e:	f7ff fed9 	bl	80010d4 <write_max_cmd>
	write_max_cmd(0x0b, 0x07);       //  scan limit = 8 LEDs
 8001322:	2107      	movs	r1, #7
 8001324:	200b      	movs	r0, #11
 8001326:	f7ff fed5 	bl	80010d4 <write_max_cmd>
	write_max_cmd(0x0c, 0x01);       //  power down =0,normal mode = 1
 800132a:	2101      	movs	r1, #1
 800132c:	200c      	movs	r0, #12
 800132e:	f7ff fed1 	bl	80010d4 <write_max_cmd>
	write_max_cmd(0x0f, 0x00);       //  no test display
 8001332:	2100      	movs	r1, #0
 8001334:	200f      	movs	r0, #15
 8001336:	f7ff fecd 	bl	80010d4 <write_max_cmd>
	
	max_clear ();
 800133a:	f7ff ffbb 	bl	80012b4 <max_clear>
	
	write_max_cmd(0x0a, brightness);       //  brightness intensity
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	4619      	mov	r1, r3
 8001342:	200a      	movs	r0, #10
 8001344:	f7ff fec6 	bl	80010d4 <write_max_cmd>
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_MspInit+0x44>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <HAL_MspInit+0x44>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6193      	str	r3, [r2, #24]
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <HAL_MspInit+0x44>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_MspInit+0x44>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	4a08      	ldr	r2, [pc, #32]	; (8001394 <HAL_MspInit+0x44>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001378:	61d3      	str	r3, [r2, #28]
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_MspInit+0x44>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001386:	2007      	movs	r0, #7
 8001388:	f000 faf6 	bl	8001978 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40021000 	.word	0x40021000

08001398 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a2c      	ldr	r2, [pc, #176]	; (8001468 <HAL_DAC_MspInit+0xd0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d152      	bne.n	8001460 <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80013ba:	4b2c      	ldr	r3, [pc, #176]	; (800146c <HAL_DAC_MspInit+0xd4>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	4a2b      	ldr	r2, [pc, #172]	; (800146c <HAL_DAC_MspInit+0xd4>)
 80013c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80013c4:	61d3      	str	r3, [r2, #28]
 80013c6:	4b29      	ldr	r3, [pc, #164]	; (800146c <HAL_DAC_MspInit+0xd4>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <HAL_DAC_MspInit+0xd4>)
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	4a25      	ldr	r2, [pc, #148]	; (800146c <HAL_DAC_MspInit+0xd4>)
 80013d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013dc:	6153      	str	r3, [r2, #20]
 80013de:	4b23      	ldr	r3, [pc, #140]	; (800146c <HAL_DAC_MspInit+0xd4>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013ea:	2310      	movs	r3, #16
 80013ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ee:	2303      	movs	r3, #3
 80013f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4619      	mov	r1, r3
 80013fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001400:	f000 fdc4 	bl	8001f8c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001404:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <HAL_DAC_MspInit+0xd8>)
 8001406:	4a1b      	ldr	r2, [pc, #108]	; (8001474 <HAL_DAC_MspInit+0xdc>)
 8001408:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <HAL_DAC_MspInit+0xd8>)
 800140c:	2210      	movs	r2, #16
 800140e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <HAL_DAC_MspInit+0xd8>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001416:	4b16      	ldr	r3, [pc, #88]	; (8001470 <HAL_DAC_MspInit+0xd8>)
 8001418:	2280      	movs	r2, #128	; 0x80
 800141a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <HAL_DAC_MspInit+0xd8>)
 800141e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001422:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_DAC_MspInit+0xd8>)
 8001426:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800142a:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800142c:	4b10      	ldr	r3, [pc, #64]	; (8001470 <HAL_DAC_MspInit+0xd8>)
 800142e:	2220      	movs	r2, #32
 8001430:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001432:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <HAL_DAC_MspInit+0xd8>)
 8001434:	2200      	movs	r2, #0
 8001436:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <HAL_DAC_MspInit+0xd8>)
 800143a:	f000 fc10 	bl	8001c5e <HAL_DMA_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8001444:	f7ff fe12 	bl	800106c <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_DAC_MspInit+0xe0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <HAL_DAC_MspInit+0xe0>)
 800144e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001452:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a06      	ldr	r2, [pc, #24]	; (8001470 <HAL_DAC_MspInit+0xd8>)
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	4a05      	ldr	r2, [pc, #20]	; (8001470 <HAL_DAC_MspInit+0xd8>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001460:	bf00      	nop
 8001462:	3728      	adds	r7, #40	; 0x28
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40007400 	.word	0x40007400
 800146c:	40021000 	.word	0x40021000
 8001470:	2000003c 	.word	0x2000003c
 8001474:	40020030 	.word	0x40020030
 8001478:	40010000 	.word	0x40010000

0800147c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <HAL_TIM_Base_MspInit+0x38>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d10b      	bne.n	80014a6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <HAL_TIM_Base_MspInit+0x3c>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	4a09      	ldr	r2, [pc, #36]	; (80014b8 <HAL_TIM_Base_MspInit+0x3c>)
 8001494:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001498:	6193      	str	r3, [r2, #24]
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <HAL_TIM_Base_MspInit+0x3c>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40012c00 	.word	0x40012c00
 80014b8:	40021000 	.word	0x40021000

080014bc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014dc:	d130      	bne.n	8001540 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014de:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <HAL_TIM_Encoder_MspInit+0x8c>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a19      	ldr	r2, [pc, #100]	; (8001548 <HAL_TIM_Encoder_MspInit+0x8c>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	61d3      	str	r3, [r2, #28]
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_TIM_Encoder_MspInit+0x8c>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <HAL_TIM_Encoder_MspInit+0x8c>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	4a13      	ldr	r2, [pc, #76]	; (8001548 <HAL_TIM_Encoder_MspInit+0x8c>)
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001500:	6153      	str	r3, [r2, #20]
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800150e:	2303      	movs	r3, #3
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800151e:	2301      	movs	r3, #1
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152c:	f000 fd2e 	bl	8001f8c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001530:	2200      	movs	r2, #0
 8001532:	2100      	movs	r1, #0
 8001534:	201c      	movs	r0, #28
 8001536:	f000 fa2a 	bl	800198e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800153a:	201c      	movs	r0, #28
 800153c:	f000 fa43 	bl	80019c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001540:	bf00      	nop
 8001542:	3728      	adds	r7, #40	; 0x28
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40021000 	.word	0x40021000

0800154c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	; 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a17      	ldr	r2, [pc, #92]	; (80015c8 <HAL_UART_MspInit+0x7c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d128      	bne.n	80015c0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <HAL_UART_MspInit+0x80>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	4a16      	ldr	r2, [pc, #88]	; (80015cc <HAL_UART_MspInit+0x80>)
 8001574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001578:	61d3      	str	r3, [r2, #28]
 800157a:	4b14      	ldr	r3, [pc, #80]	; (80015cc <HAL_UART_MspInit+0x80>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <HAL_UART_MspInit+0x80>)
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	4a10      	ldr	r2, [pc, #64]	; (80015cc <HAL_UART_MspInit+0x80>)
 800158c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001590:	6153      	str	r3, [r2, #20]
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <HAL_UART_MspInit+0x80>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800159e:	230c      	movs	r3, #12
 80015a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ae:	2307      	movs	r3, #7
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015bc:	f000 fce6 	bl	8001f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015c0:	bf00      	nop
 80015c2:	3728      	adds	r7, #40	; 0x28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40004400 	.word	0x40004400
 80015cc:	40021000 	.word	0x40021000

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <NMI_Handler+0x4>

080015d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <MemManage_Handler+0x4>

080015e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <BusFault_Handler+0x4>

080015e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <UsageFault_Handler+0x4>

080015ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800161c:	f000 f898 	bl	8001750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}

08001624 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <DMA1_Channel3_IRQHandler+0x10>)
 800162a:	f000 fbbe 	bl	8001daa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2000003c 	.word	0x2000003c

08001638 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <TIM2_IRQHandler+0x10>)
 800163e:	f002 fc3f 	bl	8003ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200000cc 	.word	0x200000cc

0800164c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <SystemInit+0x20>)
 8001652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001656:	4a05      	ldr	r2, [pc, #20]	; (800166c <SystemInit+0x20>)
 8001658:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800165c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001670:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001674:	f7ff ffea 	bl	800164c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001678:	480c      	ldr	r0, [pc, #48]	; (80016ac <LoopForever+0x6>)
  ldr r1, =_edata
 800167a:	490d      	ldr	r1, [pc, #52]	; (80016b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800167c:	4a0d      	ldr	r2, [pc, #52]	; (80016b4 <LoopForever+0xe>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001680:	e002      	b.n	8001688 <LoopCopyDataInit>

08001682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001686:	3304      	adds	r3, #4

08001688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800168c:	d3f9      	bcc.n	8001682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001690:	4c0a      	ldr	r4, [pc, #40]	; (80016bc <LoopForever+0x16>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001694:	e001      	b.n	800169a <LoopFillZerobss>

08001696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001698:	3204      	adds	r2, #4

0800169a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800169c:	d3fb      	bcc.n	8001696 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800169e:	f003 fb6b 	bl	8004d78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016a2:	f7ff fa9b 	bl	8000bdc <main>

080016a6 <LoopForever>:

LoopForever:
    b LoopForever
 80016a6:	e7fe      	b.n	80016a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016a8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80016ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016b4:	08006098 	.word	0x08006098
  ldr r2, =_sbss
 80016b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016bc:	200003d8 	.word	0x200003d8

080016c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016c0:	e7fe      	b.n	80016c0 <ADC1_IRQHandler>
	...

080016c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <HAL_Init+0x28>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a07      	ldr	r2, [pc, #28]	; (80016ec <HAL_Init+0x28>)
 80016ce:	f043 0310 	orr.w	r3, r3, #16
 80016d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d4:	2003      	movs	r0, #3
 80016d6:	f000 f94f 	bl	8001978 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016da:	2000      	movs	r0, #0
 80016dc:	f000 f808 	bl	80016f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e0:	f7ff fe36 	bl	8001350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40022000 	.word	0x40022000

080016f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_InitTick+0x54>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_InitTick+0x58>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4619      	mov	r1, r3
 8001702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001706:	fbb3 f3f1 	udiv	r3, r3, r1
 800170a:	fbb2 f3f3 	udiv	r3, r2, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f967 	bl	80019e2 <HAL_SYSTICK_Config>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e00e      	b.n	800173c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b0f      	cmp	r3, #15
 8001722:	d80a      	bhi.n	800173a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001724:	2200      	movs	r2, #0
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	f04f 30ff 	mov.w	r0, #4294967295
 800172c:	f000 f92f 	bl	800198e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001730:	4a06      	ldr	r2, [pc, #24]	; (800174c <HAL_InitTick+0x5c>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	e000      	b.n	800173c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
}
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000000 	.word	0x20000000
 8001748:	20000008 	.word	0x20000008
 800174c:	20000004 	.word	0x20000004

08001750 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x20>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_IncTick+0x24>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4413      	add	r3, r2
 8001760:	4a04      	ldr	r2, [pc, #16]	; (8001774 <HAL_IncTick+0x24>)
 8001762:	6013      	str	r3, [r2, #0]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000008 	.word	0x20000008
 8001774:	200003d4 	.word	0x200003d4

08001778 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return uwTick;  
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <HAL_GetTick+0x14>)
 800177e:	681b      	ldr	r3, [r3, #0]
}
 8001780:	4618      	mov	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	200003d4 	.word	0x200003d4

08001790 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001798:	f7ff ffee 	bl	8001778 <HAL_GetTick>
 800179c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a8:	d005      	beq.n	80017b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <HAL_Delay+0x44>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4413      	add	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80017b6:	bf00      	nop
 80017b8:	f7ff ffde 	bl	8001778 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d8f7      	bhi.n	80017b8 <HAL_Delay+0x28>
  {
  }
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000008 	.word	0x20000008

080017d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <__NVIC_SetPriorityGrouping+0x44>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f4:	4013      	ands	r3, r2
 80017f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180a:	4a04      	ldr	r2, [pc, #16]	; (800181c <__NVIC_SetPriorityGrouping+0x44>)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	60d3      	str	r3, [r2, #12]
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <__NVIC_GetPriorityGrouping+0x18>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	0a1b      	lsrs	r3, r3, #8
 800182a:	f003 0307 	and.w	r3, r3, #7
}
 800182e:	4618      	mov	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	2b00      	cmp	r3, #0
 800184c:	db0b      	blt.n	8001866 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	f003 021f 	and.w	r2, r3, #31
 8001854:	4907      	ldr	r1, [pc, #28]	; (8001874 <__NVIC_EnableIRQ+0x38>)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	095b      	lsrs	r3, r3, #5
 800185c:	2001      	movs	r0, #1
 800185e:	fa00 f202 	lsl.w	r2, r0, r2
 8001862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000e100 	.word	0xe000e100

08001878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	6039      	str	r1, [r7, #0]
 8001882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001888:	2b00      	cmp	r3, #0
 800188a:	db0a      	blt.n	80018a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	b2da      	uxtb	r2, r3
 8001890:	490c      	ldr	r1, [pc, #48]	; (80018c4 <__NVIC_SetPriority+0x4c>)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	0112      	lsls	r2, r2, #4
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	440b      	add	r3, r1
 800189c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a0:	e00a      	b.n	80018b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4908      	ldr	r1, [pc, #32]	; (80018c8 <__NVIC_SetPriority+0x50>)
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	3b04      	subs	r3, #4
 80018b0:	0112      	lsls	r2, r2, #4
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	440b      	add	r3, r1
 80018b6:	761a      	strb	r2, [r3, #24]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000e100 	.word	0xe000e100
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b089      	sub	sp, #36	; 0x24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f1c3 0307 	rsb	r3, r3, #7
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	bf28      	it	cs
 80018ea:	2304      	movcs	r3, #4
 80018ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3304      	adds	r3, #4
 80018f2:	2b06      	cmp	r3, #6
 80018f4:	d902      	bls.n	80018fc <NVIC_EncodePriority+0x30>
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3b03      	subs	r3, #3
 80018fa:	e000      	b.n	80018fe <NVIC_EncodePriority+0x32>
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001900:	f04f 32ff 	mov.w	r2, #4294967295
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43da      	mvns	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	401a      	ands	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001914:	f04f 31ff 	mov.w	r1, #4294967295
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	fa01 f303 	lsl.w	r3, r1, r3
 800191e:	43d9      	mvns	r1, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	4313      	orrs	r3, r2
         );
}
 8001926:	4618      	mov	r0, r3
 8001928:	3724      	adds	r7, #36	; 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b01      	subs	r3, #1
 8001940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001944:	d301      	bcc.n	800194a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001946:	2301      	movs	r3, #1
 8001948:	e00f      	b.n	800196a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194a:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <SysTick_Config+0x40>)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3b01      	subs	r3, #1
 8001950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001952:	210f      	movs	r1, #15
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	f7ff ff8e 	bl	8001878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <SysTick_Config+0x40>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001962:	4b04      	ldr	r3, [pc, #16]	; (8001974 <SysTick_Config+0x40>)
 8001964:	2207      	movs	r2, #7
 8001966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	e000e010 	.word	0xe000e010

08001978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ff29 	bl	80017d8 <__NVIC_SetPriorityGrouping>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b086      	sub	sp, #24
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
 800199a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a0:	f7ff ff3e 	bl	8001820 <__NVIC_GetPriorityGrouping>
 80019a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	6978      	ldr	r0, [r7, #20]
 80019ac:	f7ff ff8e 	bl	80018cc <NVIC_EncodePriority>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff5d 	bl	8001878 <__NVIC_SetPriority>
}
 80019be:	bf00      	nop
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	4603      	mov	r3, r0
 80019ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff31 	bl	800183c <__NVIC_EnableIRQ>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ffa2 	bl	8001934 <SysTick_Config>
 80019f0:	4603      	mov	r3, r0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e014      	b.n	8001a36 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	791b      	ldrb	r3, [r3, #4]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d105      	bne.n	8001a22 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff fcbb 	bl	8001398 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2202      	movs	r2, #2
 8001a26:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	795b      	ldrb	r3, [r3, #5]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d101      	bne.n	8001a9a <HAL_DAC_Start_DMA+0x1e>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e053      	b.n	8001b42 <HAL_DAC_Start_DMA+0xc6>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	711a      	strb	r2, [r3, #4]
    
  /* Set the DMA transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	4a28      	ldr	r2, [pc, #160]	; (8001b4c <HAL_DAC_Start_DMA+0xd0>)
 8001aac:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set the DMA half transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	4a27      	ldr	r2, [pc, #156]	; (8001b50 <HAL_DAC_Start_DMA+0xd4>)
 8001ab4:	62da      	str	r2, [r3, #44]	; 0x2c
    
  /* Set the DMA error callback for channel1 */
  hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	4a26      	ldr	r2, [pc, #152]	; (8001b54 <HAL_DAC_Start_DMA+0xd8>)
 8001abc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Enable the selected DAC channel1 DMA request */
  SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001acc:	601a      	str	r2, [r3, #0]
    
  /* Case of use of channel 1U */
  switch(Alignment)
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	d013      	beq.n	8001afc <HAL_DAC_Start_DMA+0x80>
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d815      	bhi.n	8001b06 <HAL_DAC_Start_DMA+0x8a>
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_DAC_Start_DMA+0x6c>
 8001ae0:	6a3b      	ldr	r3, [r7, #32]
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d005      	beq.n	8001af2 <HAL_DAC_Start_DMA+0x76>
    case DAC_ALIGN_8B_R:
      /* Get DHR8R1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
      break;
    default:
      break;
 8001ae6:	e00e      	b.n	8001b06 <HAL_DAC_Start_DMA+0x8a>
      tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	3308      	adds	r3, #8
 8001aee:	617b      	str	r3, [r7, #20]
      break;
 8001af0:	e00a      	b.n	8001b08 <HAL_DAC_Start_DMA+0x8c>
      tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	330c      	adds	r3, #12
 8001af8:	617b      	str	r3, [r7, #20]
      break;
 8001afa:	e005      	b.n	8001b08 <HAL_DAC_Start_DMA+0x8c>
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	3310      	adds	r3, #16
 8001b02:	617b      	str	r3, [r7, #20]
      break;
 8001b04:	e000      	b.n	8001b08 <HAL_DAC_Start_DMA+0x8c>
      break;
 8001b06:	bf00      	nop
  }
  
  /* Enable the DMA Channel */
  /* Enable the DAC DMA underrun interrupt */
  __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b16:	601a      	str	r2, [r3, #0]

  /* Enable the DMA Channel */
  HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6898      	ldr	r0, [r3, #8]
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	f000 f8e3 	bl	8001cec <HAL_DMA_Start_IT>
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel); 
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6819      	ldr	r1, [r3, #0]
 8001b32:	2201      	movs	r2, #1
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	409a      	lsls	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	601a      	str	r2, [r3, #0]
 
  /* Return function status */
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	08001bf3 	.word	0x08001bf3
 8001b50:	08001c15 	.word	0x08001c15
 8001b54:	08001c31 	.word	0x08001c31

08001b58 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b087      	sub	sp, #28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	795b      	ldrb	r3, [r3, #5]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d101      	bne.n	8001b78 <HAL_DAC_ConfigChannel+0x20>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e036      	b.n	8001be6 <HAL_DAC_ConfigChannel+0x8e>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2202      	movs	r2, #2
 8001b82:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001b8c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6819      	ldr	r1, [r3, #0]
 8001bc6:	22c0      	movs	r2, #192	; 0xc0
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	400a      	ands	r2, r1
 8001bd6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	371c      	adds	r7, #28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b084      	sub	sp, #16
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f7ff ff1c 	bl	8001a3e <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	711a      	strb	r2, [r3, #4]
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f7ff ff15 	bl	8001a52 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8001c28:	bf00      	nop
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	f043 0204 	orr.w	r2, r3, #4
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f7ff ff0b 	bl	8001a66 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2201      	movs	r2, #1
 8001c54:	711a      	strb	r2, [r3, #4]
}
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b084      	sub	sp, #16
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e037      	b.n	8001ce4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2202      	movs	r2, #2
 8001c78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c8a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001c8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f940 	bl	8001f4c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}  
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_DMA_Start_IT+0x20>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e04a      	b.n	8001da2 <HAL_DMA_Start_IT+0xb6>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d13a      	bne.n	8001d94 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2202      	movs	r2, #2
 8001d22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 f8d4 	bl	8001ef0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 020e 	orr.w	r2, r2, #14
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	e00f      	b.n	8001d82 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f042 020a 	orr.w	r2, r2, #10
 8001d70:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0204 	bic.w	r2, r2, #4
 8001d80:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0201 	orr.w	r2, r2, #1
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	e005      	b.n	8001da0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001da0:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b084      	sub	sp, #16
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	2204      	movs	r2, #4
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d024      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x72>
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d01f      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d107      	bne.n	8001dfa <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0204 	bic.w	r2, r2, #4
 8001df8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e02:	2104      	movs	r1, #4
 8001e04:	fa01 f202 	lsl.w	r2, r1, r2
 8001e08:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d06a      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001e1a:	e065      	b.n	8001ee8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	2202      	movs	r2, #2
 8001e22:	409a      	lsls	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d02c      	beq.n	8001e86 <HAL_DMA_IRQHandler+0xdc>
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d027      	beq.n	8001e86 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0320 	and.w	r3, r3, #32
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10b      	bne.n	8001e5c <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 020a 	bic.w	r2, r2, #10
 8001e52:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e64:	2102      	movs	r1, #2
 8001e66:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d035      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001e84:	e030      	b.n	8001ee8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	2208      	movs	r2, #8
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d028      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x13e>
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d023      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 020e 	bic.w	r2, r2, #14
 8001eae:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb8:	2101      	movs	r1, #1
 8001eba:	fa01 f202 	lsl.w	r2, r1, r2
 8001ebe:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d004      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	4798      	blx	r3
    }
  }
}  
 8001ee6:	e7ff      	b.n	8001ee8 <HAL_DMA_IRQHandler+0x13e>
 8001ee8:	bf00      	nop
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
 8001efc:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f06:	2101      	movs	r1, #1
 8001f08:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b10      	cmp	r3, #16
 8001f1c:	d108      	bne.n	8001f30 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f2e:	e007      	b.n	8001f40 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	60da      	str	r2, [r3, #12]
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <DMA_CalcBaseAndBitshift+0x34>)
 8001f5c:	4413      	add	r3, r2
 8001f5e:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <DMA_CalcBaseAndBitshift+0x38>)
 8001f60:	fba2 2303 	umull	r2, r3, r2, r3
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	009a      	lsls	r2, r3, #2
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a06      	ldr	r2, [pc, #24]	; (8001f88 <DMA_CalcBaseAndBitshift+0x3c>)
 8001f70:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	bffdfff8 	.word	0xbffdfff8
 8001f84:	cccccccd 	.word	0xcccccccd
 8001f88:	40020000 	.word	0x40020000

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f9a:	e14e      	b.n	800223a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8140 	beq.w	8002234 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d005      	beq.n	8001fcc <HAL_GPIO_Init+0x40>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d130      	bne.n	800202e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002002:	2201      	movs	r2, #1
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	091b      	lsrs	r3, r3, #4
 8002018:	f003 0201 	and.w	r2, r3, #1
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b03      	cmp	r3, #3
 8002038:	d017      	beq.n	800206a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	2203      	movs	r2, #3
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4013      	ands	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d123      	bne.n	80020be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	08da      	lsrs	r2, r3, #3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3208      	adds	r2, #8
 800207e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002082:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	220f      	movs	r2, #15
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	691a      	ldr	r2, [r3, #16]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	08da      	lsrs	r2, r3, #3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3208      	adds	r2, #8
 80020b8:	6939      	ldr	r1, [r7, #16]
 80020ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	2203      	movs	r2, #3
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0203 	and.w	r2, r3, #3
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 809a 	beq.w	8002234 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002100:	4b55      	ldr	r3, [pc, #340]	; (8002258 <HAL_GPIO_Init+0x2cc>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	4a54      	ldr	r2, [pc, #336]	; (8002258 <HAL_GPIO_Init+0x2cc>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6193      	str	r3, [r2, #24]
 800210c:	4b52      	ldr	r3, [pc, #328]	; (8002258 <HAL_GPIO_Init+0x2cc>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002118:	4a50      	ldr	r2, [pc, #320]	; (800225c <HAL_GPIO_Init+0x2d0>)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	3302      	adds	r3, #2
 8002120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002124:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	220f      	movs	r2, #15
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4013      	ands	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002142:	d013      	beq.n	800216c <HAL_GPIO_Init+0x1e0>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a46      	ldr	r2, [pc, #280]	; (8002260 <HAL_GPIO_Init+0x2d4>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d00d      	beq.n	8002168 <HAL_GPIO_Init+0x1dc>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a45      	ldr	r2, [pc, #276]	; (8002264 <HAL_GPIO_Init+0x2d8>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d007      	beq.n	8002164 <HAL_GPIO_Init+0x1d8>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a44      	ldr	r2, [pc, #272]	; (8002268 <HAL_GPIO_Init+0x2dc>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d101      	bne.n	8002160 <HAL_GPIO_Init+0x1d4>
 800215c:	2303      	movs	r3, #3
 800215e:	e006      	b.n	800216e <HAL_GPIO_Init+0x1e2>
 8002160:	2305      	movs	r3, #5
 8002162:	e004      	b.n	800216e <HAL_GPIO_Init+0x1e2>
 8002164:	2302      	movs	r3, #2
 8002166:	e002      	b.n	800216e <HAL_GPIO_Init+0x1e2>
 8002168:	2301      	movs	r3, #1
 800216a:	e000      	b.n	800216e <HAL_GPIO_Init+0x1e2>
 800216c:	2300      	movs	r3, #0
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	f002 0203 	and.w	r2, r2, #3
 8002174:	0092      	lsls	r2, r2, #2
 8002176:	4093      	lsls	r3, r2
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4313      	orrs	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800217e:	4937      	ldr	r1, [pc, #220]	; (800225c <HAL_GPIO_Init+0x2d0>)
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	089b      	lsrs	r3, r3, #2
 8002184:	3302      	adds	r3, #2
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800218c:	4b37      	ldr	r3, [pc, #220]	; (800226c <HAL_GPIO_Init+0x2e0>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	43db      	mvns	r3, r3
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4013      	ands	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021b0:	4a2e      	ldr	r2, [pc, #184]	; (800226c <HAL_GPIO_Init+0x2e0>)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021b6:	4b2d      	ldr	r3, [pc, #180]	; (800226c <HAL_GPIO_Init+0x2e0>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	43db      	mvns	r3, r3
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4013      	ands	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021da:	4a24      	ldr	r2, [pc, #144]	; (800226c <HAL_GPIO_Init+0x2e0>)
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021e0:	4b22      	ldr	r3, [pc, #136]	; (800226c <HAL_GPIO_Init+0x2e0>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002204:	4a19      	ldr	r2, [pc, #100]	; (800226c <HAL_GPIO_Init+0x2e0>)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800220a:	4b18      	ldr	r3, [pc, #96]	; (800226c <HAL_GPIO_Init+0x2e0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	43db      	mvns	r3, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800222e:	4a0f      	ldr	r2, [pc, #60]	; (800226c <HAL_GPIO_Init+0x2e0>)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	3301      	adds	r3, #1
 8002238:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	fa22 f303 	lsr.w	r3, r2, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	f47f aea9 	bne.w	8001f9c <HAL_GPIO_Init+0x10>
  }
}
 800224a:	bf00      	nop
 800224c:	bf00      	nop
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	40021000 	.word	0x40021000
 800225c:	40010000 	.word	0x40010000
 8002260:	48000400 	.word	0x48000400
 8002264:	48000800 	.word	0x48000800
 8002268:	48000c00 	.word	0x48000c00
 800226c:	40010400 	.word	0x40010400

08002270 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	887b      	ldrh	r3, [r7, #2]
 8002282:	4013      	ands	r3, r2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d002      	beq.n	800228e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002288:	2301      	movs	r3, #1
 800228a:	73fb      	strb	r3, [r7, #15]
 800228c:	e001      	b.n	8002292 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800228e:	2300      	movs	r3, #0
 8002290:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002292:	7bfb      	ldrb	r3, [r7, #15]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]
 80022ac:	4613      	mov	r3, r2
 80022ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022b0:	787b      	ldrb	r3, [r7, #1]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022b6:	887a      	ldrh	r2, [r7, #2]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022bc:	e002      	b.n	80022c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022be:	887a      	ldrh	r2, [r7, #2]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022e2:	887a      	ldrh	r2, [r7, #2]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4013      	ands	r3, r2
 80022e8:	041a      	lsls	r2, r3, #16
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	43d9      	mvns	r1, r3
 80022ee:	887b      	ldrh	r3, [r7, #2]
 80022f0:	400b      	ands	r3, r1
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	619a      	str	r2, [r3, #24]
}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800230a:	af00      	add	r7, sp, #0
 800230c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002310:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002314:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d102      	bne.n	800232a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	f001 b823 	b.w	8003370 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800232a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 817d 	beq.w	800263a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002340:	4bbc      	ldr	r3, [pc, #752]	; (8002634 <HAL_RCC_OscConfig+0x330>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 030c 	and.w	r3, r3, #12
 8002348:	2b04      	cmp	r3, #4
 800234a:	d00c      	beq.n	8002366 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800234c:	4bb9      	ldr	r3, [pc, #740]	; (8002634 <HAL_RCC_OscConfig+0x330>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 030c 	and.w	r3, r3, #12
 8002354:	2b08      	cmp	r3, #8
 8002356:	d15c      	bne.n	8002412 <HAL_RCC_OscConfig+0x10e>
 8002358:	4bb6      	ldr	r3, [pc, #728]	; (8002634 <HAL_RCC_OscConfig+0x330>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002364:	d155      	bne.n	8002412 <HAL_RCC_OscConfig+0x10e>
 8002366:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800236a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800237a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	095b      	lsrs	r3, r3, #5
 8002386:	b2db      	uxtb	r3, r3
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b01      	cmp	r3, #1
 8002390:	d102      	bne.n	8002398 <HAL_RCC_OscConfig+0x94>
 8002392:	4ba8      	ldr	r3, [pc, #672]	; (8002634 <HAL_RCC_OscConfig+0x330>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	e015      	b.n	80023c4 <HAL_RCC_OscConfig+0xc0>
 8002398:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800239c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80023a4:	fa93 f3a3 	rbit	r3, r3
 80023a8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80023ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023b0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80023b4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80023b8:	fa93 f3a3 	rbit	r3, r3
 80023bc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80023c0:	4b9c      	ldr	r3, [pc, #624]	; (8002634 <HAL_RCC_OscConfig+0x330>)
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023c8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80023cc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80023d0:	fa92 f2a2 	rbit	r2, r2
 80023d4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80023d8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80023dc:	fab2 f282 	clz	r2, r2
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	f042 0220 	orr.w	r2, r2, #32
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	f002 021f 	and.w	r2, r2, #31
 80023ec:	2101      	movs	r1, #1
 80023ee:	fa01 f202 	lsl.w	r2, r1, r2
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 811f 	beq.w	8002638 <HAL_RCC_OscConfig+0x334>
 80023fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	f040 8116 	bne.w	8002638 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	f000 bfaf 	b.w	8003370 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002416:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002422:	d106      	bne.n	8002432 <HAL_RCC_OscConfig+0x12e>
 8002424:	4b83      	ldr	r3, [pc, #524]	; (8002634 <HAL_RCC_OscConfig+0x330>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a82      	ldr	r2, [pc, #520]	; (8002634 <HAL_RCC_OscConfig+0x330>)
 800242a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	e036      	b.n	80024a0 <HAL_RCC_OscConfig+0x19c>
 8002432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002436:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0x158>
 8002442:	4b7c      	ldr	r3, [pc, #496]	; (8002634 <HAL_RCC_OscConfig+0x330>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a7b      	ldr	r2, [pc, #492]	; (8002634 <HAL_RCC_OscConfig+0x330>)
 8002448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	4b79      	ldr	r3, [pc, #484]	; (8002634 <HAL_RCC_OscConfig+0x330>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a78      	ldr	r2, [pc, #480]	; (8002634 <HAL_RCC_OscConfig+0x330>)
 8002454:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e021      	b.n	80024a0 <HAL_RCC_OscConfig+0x19c>
 800245c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002460:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0x184>
 800246e:	4b71      	ldr	r3, [pc, #452]	; (8002634 <HAL_RCC_OscConfig+0x330>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a70      	ldr	r2, [pc, #448]	; (8002634 <HAL_RCC_OscConfig+0x330>)
 8002474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	4b6e      	ldr	r3, [pc, #440]	; (8002634 <HAL_RCC_OscConfig+0x330>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a6d      	ldr	r2, [pc, #436]	; (8002634 <HAL_RCC_OscConfig+0x330>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e00b      	b.n	80024a0 <HAL_RCC_OscConfig+0x19c>
 8002488:	4b6a      	ldr	r3, [pc, #424]	; (8002634 <HAL_RCC_OscConfig+0x330>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a69      	ldr	r2, [pc, #420]	; (8002634 <HAL_RCC_OscConfig+0x330>)
 800248e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	4b67      	ldr	r3, [pc, #412]	; (8002634 <HAL_RCC_OscConfig+0x330>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a66      	ldr	r2, [pc, #408]	; (8002634 <HAL_RCC_OscConfig+0x330>)
 800249a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800249e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024a0:	4b64      	ldr	r3, [pc, #400]	; (8002634 <HAL_RCC_OscConfig+0x330>)
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	f023 020f 	bic.w	r2, r3, #15
 80024a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	495f      	ldr	r1, [pc, #380]	; (8002634 <HAL_RCC_OscConfig+0x330>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d059      	beq.n	800257e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ca:	f7ff f955 	bl	8001778 <HAL_GetTick>
 80024ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d4:	f7ff f950 	bl	8001778 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b64      	cmp	r3, #100	; 0x64
 80024e2:	d902      	bls.n	80024ea <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	f000 bf43 	b.w	8003370 <HAL_RCC_OscConfig+0x106c>
 80024ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024ee:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80024fe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	095b      	lsrs	r3, r3, #5
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b01      	cmp	r3, #1
 8002514:	d102      	bne.n	800251c <HAL_RCC_OscConfig+0x218>
 8002516:	4b47      	ldr	r3, [pc, #284]	; (8002634 <HAL_RCC_OscConfig+0x330>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	e015      	b.n	8002548 <HAL_RCC_OscConfig+0x244>
 800251c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002520:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002524:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002528:	fa93 f3a3 	rbit	r3, r3
 800252c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002530:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002534:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002538:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800253c:	fa93 f3a3 	rbit	r3, r3
 8002540:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002544:	4b3b      	ldr	r3, [pc, #236]	; (8002634 <HAL_RCC_OscConfig+0x330>)
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800254c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002550:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002554:	fa92 f2a2 	rbit	r2, r2
 8002558:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800255c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002560:	fab2 f282 	clz	r2, r2
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	f042 0220 	orr.w	r2, r2, #32
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	f002 021f 	and.w	r2, r2, #31
 8002570:	2101      	movs	r1, #1
 8002572:	fa01 f202 	lsl.w	r2, r1, r2
 8002576:	4013      	ands	r3, r2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0ab      	beq.n	80024d4 <HAL_RCC_OscConfig+0x1d0>
 800257c:	e05d      	b.n	800263a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7ff f8fb 	bl	8001778 <HAL_GetTick>
 8002582:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002586:	e00a      	b.n	800259e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002588:	f7ff f8f6 	bl	8001778 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b64      	cmp	r3, #100	; 0x64
 8002596:	d902      	bls.n	800259e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	f000 bee9 	b.w	8003370 <HAL_RCC_OscConfig+0x106c>
 800259e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025a2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80025b2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b6:	fab3 f383 	clz	r3, r3
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	095b      	lsrs	r3, r3, #5
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d102      	bne.n	80025d0 <HAL_RCC_OscConfig+0x2cc>
 80025ca:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <HAL_RCC_OscConfig+0x330>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	e015      	b.n	80025fc <HAL_RCC_OscConfig+0x2f8>
 80025d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025d4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80025dc:	fa93 f3a3 	rbit	r3, r3
 80025e0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80025e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025e8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80025ec:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80025f0:	fa93 f3a3 	rbit	r3, r3
 80025f4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80025f8:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <HAL_RCC_OscConfig+0x330>)
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002600:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002604:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002608:	fa92 f2a2 	rbit	r2, r2
 800260c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002610:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002614:	fab2 f282 	clz	r2, r2
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	f042 0220 	orr.w	r2, r2, #32
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	f002 021f 	and.w	r2, r2, #31
 8002624:	2101      	movs	r1, #1
 8002626:	fa01 f202 	lsl.w	r2, r1, r2
 800262a:	4013      	ands	r3, r2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1ab      	bne.n	8002588 <HAL_RCC_OscConfig+0x284>
 8002630:	e003      	b.n	800263a <HAL_RCC_OscConfig+0x336>
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800263a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 817d 	beq.w	800294a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002650:	4ba6      	ldr	r3, [pc, #664]	; (80028ec <HAL_RCC_OscConfig+0x5e8>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 030c 	and.w	r3, r3, #12
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00b      	beq.n	8002674 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800265c:	4ba3      	ldr	r3, [pc, #652]	; (80028ec <HAL_RCC_OscConfig+0x5e8>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 030c 	and.w	r3, r3, #12
 8002664:	2b08      	cmp	r3, #8
 8002666:	d172      	bne.n	800274e <HAL_RCC_OscConfig+0x44a>
 8002668:	4ba0      	ldr	r3, [pc, #640]	; (80028ec <HAL_RCC_OscConfig+0x5e8>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d16c      	bne.n	800274e <HAL_RCC_OscConfig+0x44a>
 8002674:	2302      	movs	r3, #2
 8002676:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002686:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	095b      	lsrs	r3, r3, #5
 8002692:	b2db      	uxtb	r3, r3
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b01      	cmp	r3, #1
 800269c:	d102      	bne.n	80026a4 <HAL_RCC_OscConfig+0x3a0>
 800269e:	4b93      	ldr	r3, [pc, #588]	; (80028ec <HAL_RCC_OscConfig+0x5e8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	e013      	b.n	80026cc <HAL_RCC_OscConfig+0x3c8>
 80026a4:	2302      	movs	r3, #2
 80026a6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80026ae:	fa93 f3a3 	rbit	r3, r3
 80026b2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80026b6:	2302      	movs	r3, #2
 80026b8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80026bc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80026c8:	4b88      	ldr	r3, [pc, #544]	; (80028ec <HAL_RCC_OscConfig+0x5e8>)
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	2202      	movs	r2, #2
 80026ce:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80026d2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80026d6:	fa92 f2a2 	rbit	r2, r2
 80026da:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80026de:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80026e2:	fab2 f282 	clz	r2, r2
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	f042 0220 	orr.w	r2, r2, #32
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	f002 021f 	and.w	r2, r2, #31
 80026f2:	2101      	movs	r1, #1
 80026f4:	fa01 f202 	lsl.w	r2, r1, r2
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00a      	beq.n	8002714 <HAL_RCC_OscConfig+0x410>
 80026fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002702:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d002      	beq.n	8002714 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	f000 be2e 	b.w	8003370 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002714:	4b75      	ldr	r3, [pc, #468]	; (80028ec <HAL_RCC_OscConfig+0x5e8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800271c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002720:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	21f8      	movs	r1, #248	; 0xf8
 800272a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002732:	fa91 f1a1 	rbit	r1, r1
 8002736:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800273a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800273e:	fab1 f181 	clz	r1, r1
 8002742:	b2c9      	uxtb	r1, r1
 8002744:	408b      	lsls	r3, r1
 8002746:	4969      	ldr	r1, [pc, #420]	; (80028ec <HAL_RCC_OscConfig+0x5e8>)
 8002748:	4313      	orrs	r3, r2
 800274a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274c:	e0fd      	b.n	800294a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800274e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002752:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 8088 	beq.w	8002870 <HAL_RCC_OscConfig+0x56c>
 8002760:	2301      	movs	r3, #1
 8002762:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800276a:	fa93 f3a3 	rbit	r3, r3
 800276e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002772:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002780:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	461a      	mov	r2, r3
 8002788:	2301      	movs	r3, #1
 800278a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278c:	f7fe fff4 	bl	8001778 <HAL_GetTick>
 8002790:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002794:	e00a      	b.n	80027ac <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002796:	f7fe ffef 	bl	8001778 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d902      	bls.n	80027ac <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	f000 bde2 	b.w	8003370 <HAL_RCC_OscConfig+0x106c>
 80027ac:	2302      	movs	r3, #2
 80027ae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80027be:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	095b      	lsrs	r3, r3, #5
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d102      	bne.n	80027dc <HAL_RCC_OscConfig+0x4d8>
 80027d6:	4b45      	ldr	r3, [pc, #276]	; (80028ec <HAL_RCC_OscConfig+0x5e8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	e013      	b.n	8002804 <HAL_RCC_OscConfig+0x500>
 80027dc:	2302      	movs	r3, #2
 80027de:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80027ee:	2302      	movs	r3, #2
 80027f0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80027f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80027f8:	fa93 f3a3 	rbit	r3, r3
 80027fc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002800:	4b3a      	ldr	r3, [pc, #232]	; (80028ec <HAL_RCC_OscConfig+0x5e8>)
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	2202      	movs	r2, #2
 8002806:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800280a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800280e:	fa92 f2a2 	rbit	r2, r2
 8002812:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002816:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800281a:	fab2 f282 	clz	r2, r2
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	f042 0220 	orr.w	r2, r2, #32
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	f002 021f 	and.w	r2, r2, #31
 800282a:	2101      	movs	r1, #1
 800282c:	fa01 f202 	lsl.w	r2, r1, r2
 8002830:	4013      	ands	r3, r2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0af      	beq.n	8002796 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002836:	4b2d      	ldr	r3, [pc, #180]	; (80028ec <HAL_RCC_OscConfig+0x5e8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800283e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002842:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	21f8      	movs	r1, #248	; 0xf8
 800284c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002854:	fa91 f1a1 	rbit	r1, r1
 8002858:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800285c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002860:	fab1 f181 	clz	r1, r1
 8002864:	b2c9      	uxtb	r1, r1
 8002866:	408b      	lsls	r3, r1
 8002868:	4920      	ldr	r1, [pc, #128]	; (80028ec <HAL_RCC_OscConfig+0x5e8>)
 800286a:	4313      	orrs	r3, r2
 800286c:	600b      	str	r3, [r1, #0]
 800286e:	e06c      	b.n	800294a <HAL_RCC_OscConfig+0x646>
 8002870:	2301      	movs	r3, #1
 8002872:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002882:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002890:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	461a      	mov	r2, r3
 8002898:	2300      	movs	r3, #0
 800289a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7fe ff6c 	bl	8001778 <HAL_GetTick>
 80028a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a4:	e00a      	b.n	80028bc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028a6:	f7fe ff67 	bl	8001778 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d902      	bls.n	80028bc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	f000 bd5a 	b.w	8003370 <HAL_RCC_OscConfig+0x106c>
 80028bc:	2302      	movs	r3, #2
 80028be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80028c6:	fa93 f3a3 	rbit	r3, r3
 80028ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80028ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d104      	bne.n	80028f0 <HAL_RCC_OscConfig+0x5ec>
 80028e6:	4b01      	ldr	r3, [pc, #4]	; (80028ec <HAL_RCC_OscConfig+0x5e8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	e015      	b.n	8002918 <HAL_RCC_OscConfig+0x614>
 80028ec:	40021000 	.word	0x40021000
 80028f0:	2302      	movs	r3, #2
 80028f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002902:	2302      	movs	r3, #2
 8002904:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002908:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800290c:	fa93 f3a3 	rbit	r3, r3
 8002910:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002914:	4bc8      	ldr	r3, [pc, #800]	; (8002c38 <HAL_RCC_OscConfig+0x934>)
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	2202      	movs	r2, #2
 800291a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800291e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002922:	fa92 f2a2 	rbit	r2, r2
 8002926:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800292a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800292e:	fab2 f282 	clz	r2, r2
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	f042 0220 	orr.w	r2, r2, #32
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	f002 021f 	and.w	r2, r2, #31
 800293e:	2101      	movs	r1, #1
 8002940:	fa01 f202 	lsl.w	r2, r1, r2
 8002944:	4013      	ands	r3, r2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1ad      	bne.n	80028a6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 8110 	beq.w	8002b80 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002964:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d079      	beq.n	8002a64 <HAL_RCC_OscConfig+0x760>
 8002970:	2301      	movs	r3, #1
 8002972:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800297a:	fa93 f3a3 	rbit	r3, r3
 800297e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002982:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002986:	fab3 f383 	clz	r3, r3
 800298a:	b2db      	uxtb	r3, r3
 800298c:	461a      	mov	r2, r3
 800298e:	4bab      	ldr	r3, [pc, #684]	; (8002c3c <HAL_RCC_OscConfig+0x938>)
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	461a      	mov	r2, r3
 8002996:	2301      	movs	r3, #1
 8002998:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299a:	f7fe feed 	bl	8001778 <HAL_GetTick>
 800299e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a2:	e00a      	b.n	80029ba <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a4:	f7fe fee8 	bl	8001778 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d902      	bls.n	80029ba <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	f000 bcdb 	b.w	8003370 <HAL_RCC_OscConfig+0x106c>
 80029ba:	2302      	movs	r3, #2
 80029bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80029cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80029d4:	2202      	movs	r2, #2
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029dc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	fa93 f2a3 	rbit	r2, r3
 80029e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80029f8:	2202      	movs	r2, #2
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	fa93 f2a3 	rbit	r2, r3
 8002a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a12:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a14:	4b88      	ldr	r3, [pc, #544]	; (8002c38 <HAL_RCC_OscConfig+0x934>)
 8002a16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a20:	2102      	movs	r1, #2
 8002a22:	6019      	str	r1, [r3, #0]
 8002a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a28:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	fa93 f1a3 	rbit	r1, r3
 8002a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a36:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a3a:	6019      	str	r1, [r3, #0]
  return result;
 8002a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a40:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	fab3 f383 	clz	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	f003 031f 	and.w	r3, r3, #31
 8002a56:	2101      	movs	r1, #1
 8002a58:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0a0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x6a0>
 8002a62:	e08d      	b.n	8002b80 <HAL_RCC_OscConfig+0x87c>
 8002a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a68:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a74:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	fa93 f2a3 	rbit	r2, r3
 8002a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a82:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a86:	601a      	str	r2, [r3, #0]
  return result;
 8002a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a90:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a92:	fab3 f383 	clz	r3, r3
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	461a      	mov	r2, r3
 8002a9a:	4b68      	ldr	r3, [pc, #416]	; (8002c3c <HAL_RCC_OscConfig+0x938>)
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa6:	f7fe fe67 	bl	8001778 <HAL_GetTick>
 8002aaa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aae:	e00a      	b.n	8002ac6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ab0:	f7fe fe62 	bl	8001778 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d902      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	f000 bc55 	b.w	8003370 <HAL_RCC_OscConfig+0x106c>
 8002ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002ace:	2202      	movs	r2, #2
 8002ad0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	fa93 f2a3 	rbit	r2, r3
 8002ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002af2:	2202      	movs	r2, #2
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	fa93 f2a3 	rbit	r2, r3
 8002b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b16:	2202      	movs	r2, #2
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	fa93 f2a3 	rbit	r2, r3
 8002b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b30:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b32:	4b41      	ldr	r3, [pc, #260]	; (8002c38 <HAL_RCC_OscConfig+0x934>)
 8002b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002b3e:	2102      	movs	r1, #2
 8002b40:	6019      	str	r1, [r3, #0]
 8002b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b46:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	fa93 f1a3 	rbit	r1, r3
 8002b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b54:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002b58:	6019      	str	r1, [r3, #0]
  return result;
 8002b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	fab3 f383 	clz	r3, r3
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	2101      	movs	r1, #1
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d197      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 81a1 	beq.w	8002ed8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b96:	2300      	movs	r3, #0
 8002b98:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b9c:	4b26      	ldr	r3, [pc, #152]	; (8002c38 <HAL_RCC_OscConfig+0x934>)
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d116      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ba8:	4b23      	ldr	r3, [pc, #140]	; (8002c38 <HAL_RCC_OscConfig+0x934>)
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	4a22      	ldr	r2, [pc, #136]	; (8002c38 <HAL_RCC_OscConfig+0x934>)
 8002bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	61d3      	str	r3, [r2, #28]
 8002bb4:	4b20      	ldr	r3, [pc, #128]	; (8002c38 <HAL_RCC_OscConfig+0x934>)
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bca:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002bce:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd6:	4b1a      	ldr	r3, [pc, #104]	; (8002c40 <HAL_RCC_OscConfig+0x93c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d11a      	bne.n	8002c18 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002be2:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <HAL_RCC_OscConfig+0x93c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a16      	ldr	r2, [pc, #88]	; (8002c40 <HAL_RCC_OscConfig+0x93c>)
 8002be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bee:	f7fe fdc3 	bl	8001778 <HAL_GetTick>
 8002bf2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf6:	e009      	b.n	8002c0c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf8:	f7fe fdbe 	bl	8001778 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b64      	cmp	r3, #100	; 0x64
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e3b1      	b.n	8003370 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <HAL_RCC_OscConfig+0x93c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0ef      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d10d      	bne.n	8002c44 <HAL_RCC_OscConfig+0x940>
 8002c28:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <HAL_RCC_OscConfig+0x934>)
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	4a02      	ldr	r2, [pc, #8]	; (8002c38 <HAL_RCC_OscConfig+0x934>)
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	6213      	str	r3, [r2, #32]
 8002c34:	e03c      	b.n	8002cb0 <HAL_RCC_OscConfig+0x9ac>
 8002c36:	bf00      	nop
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	10908120 	.word	0x10908120
 8002c40:	40007000 	.word	0x40007000
 8002c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10c      	bne.n	8002c6e <HAL_RCC_OscConfig+0x96a>
 8002c54:	4bc1      	ldr	r3, [pc, #772]	; (8002f5c <HAL_RCC_OscConfig+0xc58>)
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	4ac0      	ldr	r2, [pc, #768]	; (8002f5c <HAL_RCC_OscConfig+0xc58>)
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	6213      	str	r3, [r2, #32]
 8002c60:	4bbe      	ldr	r3, [pc, #760]	; (8002f5c <HAL_RCC_OscConfig+0xc58>)
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	4abd      	ldr	r2, [pc, #756]	; (8002f5c <HAL_RCC_OscConfig+0xc58>)
 8002c66:	f023 0304 	bic.w	r3, r3, #4
 8002c6a:	6213      	str	r3, [r2, #32]
 8002c6c:	e020      	b.n	8002cb0 <HAL_RCC_OscConfig+0x9ac>
 8002c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	2b05      	cmp	r3, #5
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCC_OscConfig+0x994>
 8002c7e:	4bb7      	ldr	r3, [pc, #732]	; (8002f5c <HAL_RCC_OscConfig+0xc58>)
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	4ab6      	ldr	r2, [pc, #728]	; (8002f5c <HAL_RCC_OscConfig+0xc58>)
 8002c84:	f043 0304 	orr.w	r3, r3, #4
 8002c88:	6213      	str	r3, [r2, #32]
 8002c8a:	4bb4      	ldr	r3, [pc, #720]	; (8002f5c <HAL_RCC_OscConfig+0xc58>)
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	4ab3      	ldr	r2, [pc, #716]	; (8002f5c <HAL_RCC_OscConfig+0xc58>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6213      	str	r3, [r2, #32]
 8002c96:	e00b      	b.n	8002cb0 <HAL_RCC_OscConfig+0x9ac>
 8002c98:	4bb0      	ldr	r3, [pc, #704]	; (8002f5c <HAL_RCC_OscConfig+0xc58>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	4aaf      	ldr	r2, [pc, #700]	; (8002f5c <HAL_RCC_OscConfig+0xc58>)
 8002c9e:	f023 0301 	bic.w	r3, r3, #1
 8002ca2:	6213      	str	r3, [r2, #32]
 8002ca4:	4bad      	ldr	r3, [pc, #692]	; (8002f5c <HAL_RCC_OscConfig+0xc58>)
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	4aac      	ldr	r2, [pc, #688]	; (8002f5c <HAL_RCC_OscConfig+0xc58>)
 8002caa:	f023 0304 	bic.w	r3, r3, #4
 8002cae:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 8081 	beq.w	8002dc4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc2:	f7fe fd59 	bl	8001778 <HAL_GetTick>
 8002cc6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cca:	e00b      	b.n	8002ce4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ccc:	f7fe fd54 	bl	8001778 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e345      	b.n	8003370 <HAL_RCC_OscConfig+0x106c>
 8002ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002cec:	2202      	movs	r2, #2
 8002cee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	fa93 f2a3 	rbit	r2, r3
 8002cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d02:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d10:	2202      	movs	r2, #2
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d18:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	fa93 f2a3 	rbit	r2, r3
 8002d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d26:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d2a:	601a      	str	r2, [r3, #0]
  return result;
 8002d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d30:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d34:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d36:	fab3 f383 	clz	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	095b      	lsrs	r3, r3, #5
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	f043 0302 	orr.w	r3, r3, #2
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d102      	bne.n	8002d50 <HAL_RCC_OscConfig+0xa4c>
 8002d4a:	4b84      	ldr	r3, [pc, #528]	; (8002f5c <HAL_RCC_OscConfig+0xc58>)
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	e013      	b.n	8002d78 <HAL_RCC_OscConfig+0xa74>
 8002d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d54:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d58:	2202      	movs	r2, #2
 8002d5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d60:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	fa93 f2a3 	rbit	r2, r3
 8002d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	4b79      	ldr	r3, [pc, #484]	; (8002f5c <HAL_RCC_OscConfig+0xc58>)
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d7c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002d80:	2102      	movs	r1, #2
 8002d82:	6011      	str	r1, [r2, #0]
 8002d84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d88:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002d8c:	6812      	ldr	r2, [r2, #0]
 8002d8e:	fa92 f1a2 	rbit	r1, r2
 8002d92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d96:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002d9a:	6011      	str	r1, [r2, #0]
  return result;
 8002d9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002da0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	fab2 f282 	clz	r2, r2
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	f002 021f 	and.w	r2, r2, #31
 8002db6:	2101      	movs	r1, #1
 8002db8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d084      	beq.n	8002ccc <HAL_RCC_OscConfig+0x9c8>
 8002dc2:	e07f      	b.n	8002ec4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc4:	f7fe fcd8 	bl	8001778 <HAL_GetTick>
 8002dc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dcc:	e00b      	b.n	8002de6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7fe fcd3 	bl	8001778 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e2c4      	b.n	8003370 <HAL_RCC_OscConfig+0x106c>
 8002de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dea:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002dee:	2202      	movs	r2, #2
 8002df0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	fa93 f2a3 	rbit	r2, r3
 8002e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e04:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002e12:	2202      	movs	r2, #2
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	fa93 f2a3 	rbit	r2, r3
 8002e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e28:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e2c:	601a      	str	r2, [r3, #0]
  return result;
 8002e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e32:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e36:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e38:	fab3 f383 	clz	r3, r3
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	095b      	lsrs	r3, r3, #5
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	f043 0302 	orr.w	r3, r3, #2
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d102      	bne.n	8002e52 <HAL_RCC_OscConfig+0xb4e>
 8002e4c:	4b43      	ldr	r3, [pc, #268]	; (8002f5c <HAL_RCC_OscConfig+0xc58>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	e013      	b.n	8002e7a <HAL_RCC_OscConfig+0xb76>
 8002e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e56:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e62:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	fa93 f2a3 	rbit	r2, r3
 8002e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e70:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	4b39      	ldr	r3, [pc, #228]	; (8002f5c <HAL_RCC_OscConfig+0xc58>)
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e7e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002e82:	2102      	movs	r1, #2
 8002e84:	6011      	str	r1, [r2, #0]
 8002e86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e8a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	fa92 f1a2 	rbit	r1, r2
 8002e94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e98:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002e9c:	6011      	str	r1, [r2, #0]
  return result;
 8002e9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ea2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	fab2 f282 	clz	r2, r2
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	f002 021f 	and.w	r2, r2, #31
 8002eb8:	2101      	movs	r1, #1
 8002eba:	fa01 f202 	lsl.w	r2, r1, r2
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d184      	bne.n	8002dce <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ec4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d105      	bne.n	8002ed8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ecc:	4b23      	ldr	r3, [pc, #140]	; (8002f5c <HAL_RCC_OscConfig+0xc58>)
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	4a22      	ldr	r2, [pc, #136]	; (8002f5c <HAL_RCC_OscConfig+0xc58>)
 8002ed2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002edc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 8242 	beq.w	800336e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eea:	4b1c      	ldr	r3, [pc, #112]	; (8002f5c <HAL_RCC_OscConfig+0xc58>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f003 030c 	and.w	r3, r3, #12
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	f000 8213 	beq.w	800331e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	f040 8162 	bne.w	80031ce <HAL_RCC_OscConfig+0xeca>
 8002f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002f12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	fa93 f2a3 	rbit	r2, r3
 8002f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f2e:	601a      	str	r2, [r3, #0]
  return result;
 8002f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f34:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f38:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3a:	fab3 f383 	clz	r3, r3
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fe fc12 	bl	8001778 <HAL_GetTick>
 8002f54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f58:	e00c      	b.n	8002f74 <HAL_RCC_OscConfig+0xc70>
 8002f5a:	bf00      	nop
 8002f5c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f60:	f7fe fc0a 	bl	8001778 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e1fd      	b.n	8003370 <HAL_RCC_OscConfig+0x106c>
 8002f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f78:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002f7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f86:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	fa93 f2a3 	rbit	r2, r3
 8002f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f94:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002f98:	601a      	str	r2, [r3, #0]
  return result;
 8002f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002fa2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa4:	fab3 f383 	clz	r3, r3
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d102      	bne.n	8002fbe <HAL_RCC_OscConfig+0xcba>
 8002fb8:	4bb0      	ldr	r3, [pc, #704]	; (800327c <HAL_RCC_OscConfig+0xf78>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	e027      	b.n	800300e <HAL_RCC_OscConfig+0xd0a>
 8002fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002fc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	fa93 f2a3 	rbit	r2, r3
 8002fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fde:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002fec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	fa93 f2a3 	rbit	r2, r3
 8003000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003004:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	4b9c      	ldr	r3, [pc, #624]	; (800327c <HAL_RCC_OscConfig+0xf78>)
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003012:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003016:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800301a:	6011      	str	r1, [r2, #0]
 800301c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003020:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	fa92 f1a2 	rbit	r1, r2
 800302a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800302e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003032:	6011      	str	r1, [r2, #0]
  return result;
 8003034:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003038:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	fab2 f282 	clz	r2, r2
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	f042 0220 	orr.w	r2, r2, #32
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	f002 021f 	and.w	r2, r2, #31
 800304e:	2101      	movs	r1, #1
 8003050:	fa01 f202 	lsl.w	r2, r1, r2
 8003054:	4013      	ands	r3, r2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d182      	bne.n	8002f60 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800305a:	4b88      	ldr	r3, [pc, #544]	; (800327c <HAL_RCC_OscConfig+0xf78>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003066:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800306e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003072:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	430b      	orrs	r3, r1
 800307c:	497f      	ldr	r1, [pc, #508]	; (800327c <HAL_RCC_OscConfig+0xf78>)
 800307e:	4313      	orrs	r3, r2
 8003080:	604b      	str	r3, [r1, #4]
 8003082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003086:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800308a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800308e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003094:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	fa93 f2a3 	rbit	r2, r3
 800309e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80030a6:	601a      	str	r2, [r3, #0]
  return result;
 80030a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ac:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80030b0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b2:	fab3 f383 	clz	r3, r3
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	461a      	mov	r2, r3
 80030c4:	2301      	movs	r3, #1
 80030c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c8:	f7fe fb56 	bl	8001778 <HAL_GetTick>
 80030cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030d0:	e009      	b.n	80030e6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d2:	f7fe fb51 	bl	8001778 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e144      	b.n	8003370 <HAL_RCC_OscConfig+0x106c>
 80030e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ea:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80030ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	fa93 f2a3 	rbit	r2, r3
 8003102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003106:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800310a:	601a      	str	r2, [r3, #0]
  return result;
 800310c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003110:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003114:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003116:	fab3 f383 	clz	r3, r3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	b2db      	uxtb	r3, r3
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b01      	cmp	r3, #1
 8003128:	d102      	bne.n	8003130 <HAL_RCC_OscConfig+0xe2c>
 800312a:	4b54      	ldr	r3, [pc, #336]	; (800327c <HAL_RCC_OscConfig+0xf78>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	e027      	b.n	8003180 <HAL_RCC_OscConfig+0xe7c>
 8003130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003134:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003138:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800313c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003142:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	fa93 f2a3 	rbit	r2, r3
 800314c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003150:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800315e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003168:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	fa93 f2a3 	rbit	r2, r3
 8003172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003176:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	4b3f      	ldr	r3, [pc, #252]	; (800327c <HAL_RCC_OscConfig+0xf78>)
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003184:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003188:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800318c:	6011      	str	r1, [r2, #0]
 800318e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003192:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	fa92 f1a2 	rbit	r1, r2
 800319c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031a0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80031a4:	6011      	str	r1, [r2, #0]
  return result;
 80031a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031aa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80031ae:	6812      	ldr	r2, [r2, #0]
 80031b0:	fab2 f282 	clz	r2, r2
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	f042 0220 	orr.w	r2, r2, #32
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	f002 021f 	and.w	r2, r2, #31
 80031c0:	2101      	movs	r1, #1
 80031c2:	fa01 f202 	lsl.w	r2, r1, r2
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d082      	beq.n	80030d2 <HAL_RCC_OscConfig+0xdce>
 80031cc:	e0cf      	b.n	800336e <HAL_RCC_OscConfig+0x106a>
 80031ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80031d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	fa93 f2a3 	rbit	r2, r3
 80031ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ee:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80031f2:	601a      	str	r2, [r3, #0]
  return result;
 80031f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80031fc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fe:	fab3 f383 	clz	r3, r3
 8003202:	b2db      	uxtb	r3, r3
 8003204:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003208:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	461a      	mov	r2, r3
 8003210:	2300      	movs	r3, #0
 8003212:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7fe fab0 	bl	8001778 <HAL_GetTick>
 8003218:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800321c:	e009      	b.n	8003232 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800321e:	f7fe faab 	bl	8001778 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e09e      	b.n	8003370 <HAL_RCC_OscConfig+0x106c>
 8003232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003236:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800323a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800323e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003244:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	fa93 f2a3 	rbit	r2, r3
 800324e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003252:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003256:	601a      	str	r2, [r3, #0]
  return result;
 8003258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003260:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003262:	fab3 f383 	clz	r3, r3
 8003266:	b2db      	uxtb	r3, r3
 8003268:	095b      	lsrs	r3, r3, #5
 800326a:	b2db      	uxtb	r3, r3
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b01      	cmp	r3, #1
 8003274:	d104      	bne.n	8003280 <HAL_RCC_OscConfig+0xf7c>
 8003276:	4b01      	ldr	r3, [pc, #4]	; (800327c <HAL_RCC_OscConfig+0xf78>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	e029      	b.n	80032d0 <HAL_RCC_OscConfig+0xfcc>
 800327c:	40021000 	.word	0x40021000
 8003280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003284:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003288:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800328c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003292:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	fa93 f2a3 	rbit	r2, r3
 800329c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032aa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80032ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	fa93 f2a3 	rbit	r2, r3
 80032c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	4b2b      	ldr	r3, [pc, #172]	; (800337c <HAL_RCC_OscConfig+0x1078>)
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032d4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80032d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032dc:	6011      	str	r1, [r2, #0]
 80032de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032e2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80032e6:	6812      	ldr	r2, [r2, #0]
 80032e8:	fa92 f1a2 	rbit	r1, r2
 80032ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032f0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80032f4:	6011      	str	r1, [r2, #0]
  return result;
 80032f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032fa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80032fe:	6812      	ldr	r2, [r2, #0]
 8003300:	fab2 f282 	clz	r2, r2
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	f042 0220 	orr.w	r2, r2, #32
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	f002 021f 	and.w	r2, r2, #31
 8003310:	2101      	movs	r1, #1
 8003312:	fa01 f202 	lsl.w	r2, r1, r2
 8003316:	4013      	ands	r3, r2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d180      	bne.n	800321e <HAL_RCC_OscConfig+0xf1a>
 800331c:	e027      	b.n	800336e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800331e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003322:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e01e      	b.n	8003370 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003332:	4b12      	ldr	r3, [pc, #72]	; (800337c <HAL_RCC_OscConfig+0x1078>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800333a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800333e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003346:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	429a      	cmp	r2, r3
 8003350:	d10b      	bne.n	800336a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003352:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003356:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800335a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003366:	429a      	cmp	r2, r3
 8003368:	d001      	beq.n	800336e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40021000 	.word	0x40021000

08003380 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b09e      	sub	sp, #120	; 0x78
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e162      	b.n	800365e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003398:	4b90      	ldr	r3, [pc, #576]	; (80035dc <HAL_RCC_ClockConfig+0x25c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d910      	bls.n	80033c8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a6:	4b8d      	ldr	r3, [pc, #564]	; (80035dc <HAL_RCC_ClockConfig+0x25c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f023 0207 	bic.w	r2, r3, #7
 80033ae:	498b      	ldr	r1, [pc, #556]	; (80035dc <HAL_RCC_ClockConfig+0x25c>)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b6:	4b89      	ldr	r3, [pc, #548]	; (80035dc <HAL_RCC_ClockConfig+0x25c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d001      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e14a      	b.n	800365e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d4:	4b82      	ldr	r3, [pc, #520]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	497f      	ldr	r1, [pc, #508]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 80dc 	beq.w	80035ac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d13c      	bne.n	8003476 <HAL_RCC_ClockConfig+0xf6>
 80033fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003400:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003404:	fa93 f3a3 	rbit	r3, r3
 8003408:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800340a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340c:	fab3 f383 	clz	r3, r3
 8003410:	b2db      	uxtb	r3, r3
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	b2db      	uxtb	r3, r3
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b01      	cmp	r3, #1
 800341e:	d102      	bne.n	8003426 <HAL_RCC_ClockConfig+0xa6>
 8003420:	4b6f      	ldr	r3, [pc, #444]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	e00f      	b.n	8003446 <HAL_RCC_ClockConfig+0xc6>
 8003426:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800342a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800342e:	fa93 f3a3 	rbit	r3, r3
 8003432:	667b      	str	r3, [r7, #100]	; 0x64
 8003434:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003438:	663b      	str	r3, [r7, #96]	; 0x60
 800343a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800343c:	fa93 f3a3 	rbit	r3, r3
 8003440:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003442:	4b67      	ldr	r3, [pc, #412]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800344a:	65ba      	str	r2, [r7, #88]	; 0x58
 800344c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800344e:	fa92 f2a2 	rbit	r2, r2
 8003452:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003454:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003456:	fab2 f282 	clz	r2, r2
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	f042 0220 	orr.w	r2, r2, #32
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	f002 021f 	and.w	r2, r2, #31
 8003466:	2101      	movs	r1, #1
 8003468:	fa01 f202 	lsl.w	r2, r1, r2
 800346c:	4013      	ands	r3, r2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d17b      	bne.n	800356a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e0f3      	b.n	800365e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d13c      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x178>
 800347e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003482:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003486:	fa93 f3a3 	rbit	r3, r3
 800348a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800348c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348e:	fab3 f383 	clz	r3, r3
 8003492:	b2db      	uxtb	r3, r3
 8003494:	095b      	lsrs	r3, r3, #5
 8003496:	b2db      	uxtb	r3, r3
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d102      	bne.n	80034a8 <HAL_RCC_ClockConfig+0x128>
 80034a2:	4b4f      	ldr	r3, [pc, #316]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	e00f      	b.n	80034c8 <HAL_RCC_ClockConfig+0x148>
 80034a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034b0:	fa93 f3a3 	rbit	r3, r3
 80034b4:	647b      	str	r3, [r7, #68]	; 0x44
 80034b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034ba:	643b      	str	r3, [r7, #64]	; 0x40
 80034bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034be:	fa93 f3a3 	rbit	r3, r3
 80034c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034c4:	4b46      	ldr	r3, [pc, #280]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034cc:	63ba      	str	r2, [r7, #56]	; 0x38
 80034ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034d0:	fa92 f2a2 	rbit	r2, r2
 80034d4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80034d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034d8:	fab2 f282 	clz	r2, r2
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	f042 0220 	orr.w	r2, r2, #32
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	f002 021f 	and.w	r2, r2, #31
 80034e8:	2101      	movs	r1, #1
 80034ea:	fa01 f202 	lsl.w	r2, r1, r2
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d13a      	bne.n	800356a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0b2      	b.n	800365e <HAL_RCC_ClockConfig+0x2de>
 80034f8:	2302      	movs	r3, #2
 80034fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fe:	fa93 f3a3 	rbit	r3, r3
 8003502:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003506:	fab3 f383 	clz	r3, r3
 800350a:	b2db      	uxtb	r3, r3
 800350c:	095b      	lsrs	r3, r3, #5
 800350e:	b2db      	uxtb	r3, r3
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b01      	cmp	r3, #1
 8003518:	d102      	bne.n	8003520 <HAL_RCC_ClockConfig+0x1a0>
 800351a:	4b31      	ldr	r3, [pc, #196]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	e00d      	b.n	800353c <HAL_RCC_ClockConfig+0x1bc>
 8003520:	2302      	movs	r3, #2
 8003522:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003526:	fa93 f3a3 	rbit	r3, r3
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
 800352c:	2302      	movs	r3, #2
 800352e:	623b      	str	r3, [r7, #32]
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	fa93 f3a3 	rbit	r3, r3
 8003536:	61fb      	str	r3, [r7, #28]
 8003538:	4b29      	ldr	r3, [pc, #164]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	2202      	movs	r2, #2
 800353e:	61ba      	str	r2, [r7, #24]
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	fa92 f2a2 	rbit	r2, r2
 8003546:	617a      	str	r2, [r7, #20]
  return result;
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	fab2 f282 	clz	r2, r2
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	f042 0220 	orr.w	r2, r2, #32
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	f002 021f 	and.w	r2, r2, #31
 800355a:	2101      	movs	r1, #1
 800355c:	fa01 f202 	lsl.w	r2, r1, r2
 8003560:	4013      	ands	r3, r2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e079      	b.n	800365e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800356a:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f023 0203 	bic.w	r2, r3, #3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	491a      	ldr	r1, [pc, #104]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 8003578:	4313      	orrs	r3, r2
 800357a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800357c:	f7fe f8fc 	bl	8001778 <HAL_GetTick>
 8003580:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003582:	e00a      	b.n	800359a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003584:	f7fe f8f8 	bl	8001778 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003592:	4293      	cmp	r3, r2
 8003594:	d901      	bls.n	800359a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e061      	b.n	800365e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359a:	4b11      	ldr	r3, [pc, #68]	; (80035e0 <HAL_RCC_ClockConfig+0x260>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 020c 	and.w	r2, r3, #12
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d1eb      	bne.n	8003584 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <HAL_RCC_ClockConfig+0x25c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d214      	bcs.n	80035e4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ba:	4b08      	ldr	r3, [pc, #32]	; (80035dc <HAL_RCC_ClockConfig+0x25c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f023 0207 	bic.w	r2, r3, #7
 80035c2:	4906      	ldr	r1, [pc, #24]	; (80035dc <HAL_RCC_ClockConfig+0x25c>)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ca:	4b04      	ldr	r3, [pc, #16]	; (80035dc <HAL_RCC_ClockConfig+0x25c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d005      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e040      	b.n	800365e <HAL_RCC_ClockConfig+0x2de>
 80035dc:	40022000 	.word	0x40022000
 80035e0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f0:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <HAL_RCC_ClockConfig+0x2e8>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	491a      	ldr	r1, [pc, #104]	; (8003668 <HAL_RCC_ClockConfig+0x2e8>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d009      	beq.n	8003622 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800360e:	4b16      	ldr	r3, [pc, #88]	; (8003668 <HAL_RCC_ClockConfig+0x2e8>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	4912      	ldr	r1, [pc, #72]	; (8003668 <HAL_RCC_ClockConfig+0x2e8>)
 800361e:	4313      	orrs	r3, r2
 8003620:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003622:	f000 f829 	bl	8003678 <HAL_RCC_GetSysClockFreq>
 8003626:	4601      	mov	r1, r0
 8003628:	4b0f      	ldr	r3, [pc, #60]	; (8003668 <HAL_RCC_ClockConfig+0x2e8>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003630:	22f0      	movs	r2, #240	; 0xf0
 8003632:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	fa92 f2a2 	rbit	r2, r2
 800363a:	60fa      	str	r2, [r7, #12]
  return result;
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	fab2 f282 	clz	r2, r2
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	40d3      	lsrs	r3, r2
 8003646:	4a09      	ldr	r2, [pc, #36]	; (800366c <HAL_RCC_ClockConfig+0x2ec>)
 8003648:	5cd3      	ldrb	r3, [r2, r3]
 800364a:	fa21 f303 	lsr.w	r3, r1, r3
 800364e:	4a08      	ldr	r2, [pc, #32]	; (8003670 <HAL_RCC_ClockConfig+0x2f0>)
 8003650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003652:	4b08      	ldr	r3, [pc, #32]	; (8003674 <HAL_RCC_ClockConfig+0x2f4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7fe f84a 	bl	80016f0 <HAL_InitTick>
  
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3778      	adds	r7, #120	; 0x78
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000
 800366c:	08005e80 	.word	0x08005e80
 8003670:	20000000 	.word	0x20000000
 8003674:	20000004 	.word	0x20000004

08003678 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003678:	b480      	push	{r7}
 800367a:	b08b      	sub	sp, #44	; 0x2c
 800367c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800367e:	2300      	movs	r3, #0
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	2300      	movs	r3, #0
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	2300      	movs	r3, #0
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003692:	4b29      	ldr	r3, [pc, #164]	; (8003738 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d002      	beq.n	80036a8 <HAL_RCC_GetSysClockFreq+0x30>
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d003      	beq.n	80036ae <HAL_RCC_GetSysClockFreq+0x36>
 80036a6:	e03c      	b.n	8003722 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036a8:	4b24      	ldr	r3, [pc, #144]	; (800373c <HAL_RCC_GetSysClockFreq+0xc4>)
 80036aa:	623b      	str	r3, [r7, #32]
      break;
 80036ac:	e03c      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80036b4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80036b8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	fa92 f2a2 	rbit	r2, r2
 80036c0:	607a      	str	r2, [r7, #4]
  return result;
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	fab2 f282 	clz	r2, r2
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	40d3      	lsrs	r3, r2
 80036cc:	4a1c      	ldr	r2, [pc, #112]	; (8003740 <HAL_RCC_GetSysClockFreq+0xc8>)
 80036ce:	5cd3      	ldrb	r3, [r2, r3]
 80036d0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80036d2:	4b19      	ldr	r3, [pc, #100]	; (8003738 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	220f      	movs	r2, #15
 80036dc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	fa92 f2a2 	rbit	r2, r2
 80036e4:	60fa      	str	r2, [r7, #12]
  return result;
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	fab2 f282 	clz	r2, r2
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	40d3      	lsrs	r3, r2
 80036f0:	4a14      	ldr	r2, [pc, #80]	; (8003744 <HAL_RCC_GetSysClockFreq+0xcc>)
 80036f2:	5cd3      	ldrb	r3, [r2, r3]
 80036f4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d008      	beq.n	8003712 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003700:	4a0e      	ldr	r2, [pc, #56]	; (800373c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	fbb2 f2f3 	udiv	r2, r2, r3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	fb02 f303 	mul.w	r3, r2, r3
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
 8003710:	e004      	b.n	800371c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	4a0c      	ldr	r2, [pc, #48]	; (8003748 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003716:	fb02 f303 	mul.w	r3, r2, r3
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	623b      	str	r3, [r7, #32]
      break;
 8003720:	e002      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003724:	623b      	str	r3, [r7, #32]
      break;
 8003726:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003728:	6a3b      	ldr	r3, [r7, #32]
}
 800372a:	4618      	mov	r0, r3
 800372c:	372c      	adds	r7, #44	; 0x2c
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	40021000 	.word	0x40021000
 800373c:	007a1200 	.word	0x007a1200
 8003740:	08005e98 	.word	0x08005e98
 8003744:	08005ea8 	.word	0x08005ea8
 8003748:	003d0900 	.word	0x003d0900

0800374c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003750:	4b03      	ldr	r3, [pc, #12]	; (8003760 <HAL_RCC_GetHCLKFreq+0x14>)
 8003752:	681b      	ldr	r3, [r3, #0]
}
 8003754:	4618      	mov	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	20000000 	.word	0x20000000

08003764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800376a:	f7ff ffef 	bl	800374c <HAL_RCC_GetHCLKFreq>
 800376e:	4601      	mov	r1, r0
 8003770:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003778:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800377c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	fa92 f2a2 	rbit	r2, r2
 8003784:	603a      	str	r2, [r7, #0]
  return result;
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	fab2 f282 	clz	r2, r2
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	40d3      	lsrs	r3, r2
 8003790:	4a04      	ldr	r2, [pc, #16]	; (80037a4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003792:	5cd3      	ldrb	r3, [r2, r3]
 8003794:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003798:	4618      	mov	r0, r3
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40021000 	.word	0x40021000
 80037a4:	08005e90 	.word	0x08005e90

080037a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80037ae:	f7ff ffcd 	bl	800374c <HAL_RCC_GetHCLKFreq>
 80037b2:	4601      	mov	r1, r0
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80037bc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80037c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	fa92 f2a2 	rbit	r2, r2
 80037c8:	603a      	str	r2, [r7, #0]
  return result;
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	fab2 f282 	clz	r2, r2
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	40d3      	lsrs	r3, r2
 80037d4:	4a04      	ldr	r2, [pc, #16]	; (80037e8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80037d6:	5cd3      	ldrb	r3, [r2, r3]
 80037d8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80037dc:	4618      	mov	r0, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40021000 	.word	0x40021000
 80037e8:	08005e90 	.word	0x08005e90

080037ec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b092      	sub	sp, #72	; 0x48
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80037fc:	2300      	movs	r3, #0
 80037fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 80d4 	beq.w	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003810:	4b4e      	ldr	r3, [pc, #312]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10e      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800381c:	4b4b      	ldr	r3, [pc, #300]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	4a4a      	ldr	r2, [pc, #296]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003826:	61d3      	str	r3, [r2, #28]
 8003828:	4b48      	ldr	r3, [pc, #288]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003834:	2301      	movs	r3, #1
 8003836:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383a:	4b45      	ldr	r3, [pc, #276]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003842:	2b00      	cmp	r3, #0
 8003844:	d118      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003846:	4b42      	ldr	r3, [pc, #264]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a41      	ldr	r2, [pc, #260]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800384c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003850:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003852:	f7fd ff91 	bl	8001778 <HAL_GetTick>
 8003856:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003858:	e008      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800385a:	f7fd ff8d 	bl	8001778 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b64      	cmp	r3, #100	; 0x64
 8003866:	d901      	bls.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e14b      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386c:	4b38      	ldr	r3, [pc, #224]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003878:	4b34      	ldr	r3, [pc, #208]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003880:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 8084 	beq.w	8003992 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003892:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003894:	429a      	cmp	r2, r3
 8003896:	d07c      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003898:	4b2c      	ldr	r3, [pc, #176]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038aa:	fa93 f3a3 	rbit	r3, r3
 80038ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038b2:	fab3 f383 	clz	r3, r3
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	461a      	mov	r2, r3
 80038ba:	4b26      	ldr	r3, [pc, #152]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	461a      	mov	r2, r3
 80038c2:	2301      	movs	r3, #1
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ce:	fa93 f3a3 	rbit	r3, r3
 80038d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80038d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038d6:	fab3 f383 	clz	r3, r3
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	461a      	mov	r2, r3
 80038de:	4b1d      	ldr	r3, [pc, #116]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	461a      	mov	r2, r3
 80038e6:	2300      	movs	r3, #0
 80038e8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038ea:	4a18      	ldr	r2, [pc, #96]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ee:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d04b      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fa:	f7fd ff3d 	bl	8001778 <HAL_GetTick>
 80038fe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003900:	e00a      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003902:	f7fd ff39 	bl	8001778 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003910:	4293      	cmp	r3, r2
 8003912:	d901      	bls.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e0f5      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003918:	2302      	movs	r3, #2
 800391a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391e:	fa93 f3a3 	rbit	r3, r3
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
 8003924:	2302      	movs	r3, #2
 8003926:	623b      	str	r3, [r7, #32]
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	fa93 f3a3 	rbit	r3, r3
 800392e:	61fb      	str	r3, [r7, #28]
  return result;
 8003930:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003932:	fab3 f383 	clz	r3, r3
 8003936:	b2db      	uxtb	r3, r3
 8003938:	095b      	lsrs	r3, r3, #5
 800393a:	b2db      	uxtb	r3, r3
 800393c:	f043 0302 	orr.w	r3, r3, #2
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d108      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003946:	4b01      	ldr	r3, [pc, #4]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	e00d      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800394c:	40021000 	.word	0x40021000
 8003950:	40007000 	.word	0x40007000
 8003954:	10908100 	.word	0x10908100
 8003958:	2302      	movs	r3, #2
 800395a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	fa93 f3a3 	rbit	r3, r3
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	4b69      	ldr	r3, [pc, #420]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	2202      	movs	r2, #2
 800396a:	613a      	str	r2, [r7, #16]
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	fa92 f2a2 	rbit	r2, r2
 8003972:	60fa      	str	r2, [r7, #12]
  return result;
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	fab2 f282 	clz	r2, r2
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	f002 021f 	and.w	r2, r2, #31
 8003986:	2101      	movs	r1, #1
 8003988:	fa01 f202 	lsl.w	r2, r1, r2
 800398c:	4013      	ands	r3, r2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0b7      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003992:	4b5e      	ldr	r3, [pc, #376]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	495b      	ldr	r1, [pc, #364]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d105      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ac:	4b57      	ldr	r3, [pc, #348]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	4a56      	ldr	r2, [pc, #344]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039c4:	4b51      	ldr	r3, [pc, #324]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	f023 0203 	bic.w	r2, r3, #3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	494e      	ldr	r1, [pc, #312]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d008      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039e2:	4b4a      	ldr	r3, [pc, #296]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	f023 0210 	bic.w	r2, r3, #16
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	4947      	ldr	r1, [pc, #284]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d008      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003a00:	4b42      	ldr	r3, [pc, #264]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	493f      	ldr	r1, [pc, #252]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d008      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a1e:	4b3b      	ldr	r3, [pc, #236]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	f023 0220 	bic.w	r2, r3, #32
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	4938      	ldr	r1, [pc, #224]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a3c:	4b33      	ldr	r3, [pc, #204]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a40:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	4930      	ldr	r1, [pc, #192]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d008      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a5a:	4b2c      	ldr	r3, [pc, #176]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	4929      	ldr	r1, [pc, #164]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d008      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003a78:	4b24      	ldr	r3, [pc, #144]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	4921      	ldr	r1, [pc, #132]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d008      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003a96:	4b1d      	ldr	r3, [pc, #116]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	491a      	ldr	r1, [pc, #104]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003ab4:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	4912      	ldr	r1, [pc, #72]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d008      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003ad2:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	490b      	ldr	r1, [pc, #44]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d008      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003af0:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	4903      	ldr	r1, [pc, #12]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3748      	adds	r7, #72	; 0x48
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40021000 	.word	0x40021000

08003b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e049      	b.n	8003bb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fd fca0 	bl	800147c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4610      	mov	r0, r2
 8003b50:	f000 fbc6 	bl	80042e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d001      	beq.n	8003bd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e033      	b.n	8003c40 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a19      	ldr	r2, [pc, #100]	; (8003c4c <HAL_TIM_Base_Start+0x8c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d009      	beq.n	8003bfe <HAL_TIM_Base_Start+0x3e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf2:	d004      	beq.n	8003bfe <HAL_TIM_Base_Start+0x3e>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a15      	ldr	r2, [pc, #84]	; (8003c50 <HAL_TIM_Base_Start+0x90>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d115      	bne.n	8003c2a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	4b13      	ldr	r3, [pc, #76]	; (8003c54 <HAL_TIM_Base_Start+0x94>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2b06      	cmp	r3, #6
 8003c0e:	d015      	beq.n	8003c3c <HAL_TIM_Base_Start+0x7c>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c16:	d011      	beq.n	8003c3c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c28:	e008      	b.n	8003c3c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 0201 	orr.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	e000      	b.n	8003c3e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	40012c00 	.word	0x40012c00
 8003c50:	40014000 	.word	0x40014000
 8003c54:	00010007 	.word	0x00010007

08003c58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e097      	b.n	8003d9c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d106      	bne.n	8003c86 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7fd fc1b 	bl	80014bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2202      	movs	r2, #2
 8003c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6812      	ldr	r2, [r2, #0]
 8003c98:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003c9c:	f023 0307 	bic.w	r3, r3, #7
 8003ca0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	4619      	mov	r1, r3
 8003cac:	4610      	mov	r0, r2
 8003cae:	f000 fb17 	bl	80042e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cda:	f023 0303 	bic.w	r3, r3, #3
 8003cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	021b      	lsls	r3, r3, #8
 8003cea:	4313      	orrs	r3, r2
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003cf8:	f023 030c 	bic.w	r3, r3, #12
 8003cfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	021b      	lsls	r3, r3, #8
 8003d14:	4313      	orrs	r3, r2
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	011a      	lsls	r2, r3, #4
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	031b      	lsls	r3, r3, #12
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003d36:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003d3e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003db4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003dbc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dc4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dcc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d110      	bne.n	8003df6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d102      	bne.n	8003de0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003dda:	7b7b      	ldrb	r3, [r7, #13]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d001      	beq.n	8003de4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e069      	b.n	8003eb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003df4:	e031      	b.n	8003e5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d110      	bne.n	8003e1e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dfc:	7bbb      	ldrb	r3, [r7, #14]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d102      	bne.n	8003e08 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e02:	7b3b      	ldrb	r3, [r7, #12]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d001      	beq.n	8003e0c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e055      	b.n	8003eb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e1c:	e01d      	b.n	8003e5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d108      	bne.n	8003e36 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e24:	7bbb      	ldrb	r3, [r7, #14]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d105      	bne.n	8003e36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e2a:	7b7b      	ldrb	r3, [r7, #13]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d102      	bne.n	8003e36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e30:	7b3b      	ldrb	r3, [r7, #12]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d001      	beq.n	8003e3a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e03e      	b.n	8003eb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2202      	movs	r2, #2
 8003e46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2202      	movs	r2, #2
 8003e56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <HAL_TIM_Encoder_Start+0xc4>
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d008      	beq.n	8003e78 <HAL_TIM_Encoder_Start+0xd4>
 8003e66:	e00f      	b.n	8003e88 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	2100      	movs	r1, #0
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fb3d 	bl	80044f0 <TIM_CCxChannelCmd>
      break;
 8003e76:	e016      	b.n	8003ea6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	2104      	movs	r1, #4
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 fb35 	bl	80044f0 <TIM_CCxChannelCmd>
      break;
 8003e86:	e00e      	b.n	8003ea6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	2100      	movs	r1, #0
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fb2d 	bl	80044f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	2104      	movs	r1, #4
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fb26 	bl	80044f0 <TIM_CCxChannelCmd>
      break;
 8003ea4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0201 	orr.w	r2, r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d122      	bne.n	8003f1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d11b      	bne.n	8003f1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f06f 0202 	mvn.w	r2, #2
 8003eec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7fc fe58 	bl	8000bb8 <HAL_TIM_IC_CaptureCallback>
 8003f08:	e005      	b.n	8003f16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f9ca 	bl	80042a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f9d1 	bl	80042b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d122      	bne.n	8003f70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d11b      	bne.n	8003f70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f06f 0204 	mvn.w	r2, #4
 8003f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2202      	movs	r2, #2
 8003f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7fc fe2e 	bl	8000bb8 <HAL_TIM_IC_CaptureCallback>
 8003f5c:	e005      	b.n	8003f6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f9a0 	bl	80042a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f9a7 	bl	80042b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d122      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f003 0308 	and.w	r3, r3, #8
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d11b      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f06f 0208 	mvn.w	r2, #8
 8003f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2204      	movs	r2, #4
 8003f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fc fe04 	bl	8000bb8 <HAL_TIM_IC_CaptureCallback>
 8003fb0:	e005      	b.n	8003fbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f976 	bl	80042a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f97d 	bl	80042b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	2b10      	cmp	r3, #16
 8003fd0:	d122      	bne.n	8004018 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f003 0310 	and.w	r3, r3, #16
 8003fdc:	2b10      	cmp	r3, #16
 8003fde:	d11b      	bne.n	8004018 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f06f 0210 	mvn.w	r2, #16
 8003fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2208      	movs	r2, #8
 8003fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fc fdda 	bl	8000bb8 <HAL_TIM_IC_CaptureCallback>
 8004004:	e005      	b.n	8004012 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f94c 	bl	80042a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f953 	bl	80042b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b01      	cmp	r3, #1
 8004024:	d10e      	bne.n	8004044 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b01      	cmp	r3, #1
 8004032:	d107      	bne.n	8004044 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f06f 0201 	mvn.w	r2, #1
 800403c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f926 	bl	8004290 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404e:	2b80      	cmp	r3, #128	; 0x80
 8004050:	d10e      	bne.n	8004070 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405c:	2b80      	cmp	r3, #128	; 0x80
 800405e:	d107      	bne.n	8004070 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fad6 	bl	800461c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800407e:	d10e      	bne.n	800409e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408a:	2b80      	cmp	r3, #128	; 0x80
 800408c:	d107      	bne.n	800409e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 fac9 	bl	8004630 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a8:	2b40      	cmp	r3, #64	; 0x40
 80040aa:	d10e      	bne.n	80040ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b6:	2b40      	cmp	r3, #64	; 0x40
 80040b8:	d107      	bne.n	80040ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f901 	bl	80042cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f003 0320 	and.w	r3, r3, #32
 80040d4:	2b20      	cmp	r3, #32
 80040d6:	d10e      	bne.n	80040f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f003 0320 	and.w	r3, r3, #32
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	d107      	bne.n	80040f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f06f 0220 	mvn.w	r2, #32
 80040ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fa89 	bl	8004608 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040f6:	bf00      	nop
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <HAL_TIM_ConfigClockSource+0x1c>
 8004116:	2302      	movs	r3, #2
 8004118:	e0b6      	b.n	8004288 <HAL_TIM_ConfigClockSource+0x18a>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2202      	movs	r2, #2
 8004126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004138:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800413c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004144:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004156:	d03e      	beq.n	80041d6 <HAL_TIM_ConfigClockSource+0xd8>
 8004158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800415c:	f200 8087 	bhi.w	800426e <HAL_TIM_ConfigClockSource+0x170>
 8004160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004164:	f000 8086 	beq.w	8004274 <HAL_TIM_ConfigClockSource+0x176>
 8004168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416c:	d87f      	bhi.n	800426e <HAL_TIM_ConfigClockSource+0x170>
 800416e:	2b70      	cmp	r3, #112	; 0x70
 8004170:	d01a      	beq.n	80041a8 <HAL_TIM_ConfigClockSource+0xaa>
 8004172:	2b70      	cmp	r3, #112	; 0x70
 8004174:	d87b      	bhi.n	800426e <HAL_TIM_ConfigClockSource+0x170>
 8004176:	2b60      	cmp	r3, #96	; 0x60
 8004178:	d050      	beq.n	800421c <HAL_TIM_ConfigClockSource+0x11e>
 800417a:	2b60      	cmp	r3, #96	; 0x60
 800417c:	d877      	bhi.n	800426e <HAL_TIM_ConfigClockSource+0x170>
 800417e:	2b50      	cmp	r3, #80	; 0x50
 8004180:	d03c      	beq.n	80041fc <HAL_TIM_ConfigClockSource+0xfe>
 8004182:	2b50      	cmp	r3, #80	; 0x50
 8004184:	d873      	bhi.n	800426e <HAL_TIM_ConfigClockSource+0x170>
 8004186:	2b40      	cmp	r3, #64	; 0x40
 8004188:	d058      	beq.n	800423c <HAL_TIM_ConfigClockSource+0x13e>
 800418a:	2b40      	cmp	r3, #64	; 0x40
 800418c:	d86f      	bhi.n	800426e <HAL_TIM_ConfigClockSource+0x170>
 800418e:	2b30      	cmp	r3, #48	; 0x30
 8004190:	d064      	beq.n	800425c <HAL_TIM_ConfigClockSource+0x15e>
 8004192:	2b30      	cmp	r3, #48	; 0x30
 8004194:	d86b      	bhi.n	800426e <HAL_TIM_ConfigClockSource+0x170>
 8004196:	2b20      	cmp	r3, #32
 8004198:	d060      	beq.n	800425c <HAL_TIM_ConfigClockSource+0x15e>
 800419a:	2b20      	cmp	r3, #32
 800419c:	d867      	bhi.n	800426e <HAL_TIM_ConfigClockSource+0x170>
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d05c      	beq.n	800425c <HAL_TIM_ConfigClockSource+0x15e>
 80041a2:	2b10      	cmp	r3, #16
 80041a4:	d05a      	beq.n	800425c <HAL_TIM_ConfigClockSource+0x15e>
 80041a6:	e062      	b.n	800426e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6818      	ldr	r0, [r3, #0]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	6899      	ldr	r1, [r3, #8]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f000 f97a 	bl	80044b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041ca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	609a      	str	r2, [r3, #8]
      break;
 80041d4:	e04f      	b.n	8004276 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6818      	ldr	r0, [r3, #0]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6899      	ldr	r1, [r3, #8]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f000 f963 	bl	80044b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041f8:	609a      	str	r2, [r3, #8]
      break;
 80041fa:	e03c      	b.n	8004276 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6818      	ldr	r0, [r3, #0]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	6859      	ldr	r1, [r3, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	461a      	mov	r2, r3
 800420a:	f000 f8d7 	bl	80043bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2150      	movs	r1, #80	; 0x50
 8004214:	4618      	mov	r0, r3
 8004216:	f000 f930 	bl	800447a <TIM_ITRx_SetConfig>
      break;
 800421a:	e02c      	b.n	8004276 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6818      	ldr	r0, [r3, #0]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	6859      	ldr	r1, [r3, #4]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	461a      	mov	r2, r3
 800422a:	f000 f8f6 	bl	800441a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2160      	movs	r1, #96	; 0x60
 8004234:	4618      	mov	r0, r3
 8004236:	f000 f920 	bl	800447a <TIM_ITRx_SetConfig>
      break;
 800423a:	e01c      	b.n	8004276 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	6859      	ldr	r1, [r3, #4]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	461a      	mov	r2, r3
 800424a:	f000 f8b7 	bl	80043bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2140      	movs	r1, #64	; 0x40
 8004254:	4618      	mov	r0, r3
 8004256:	f000 f910 	bl	800447a <TIM_ITRx_SetConfig>
      break;
 800425a:	e00c      	b.n	8004276 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4619      	mov	r1, r3
 8004266:	4610      	mov	r0, r2
 8004268:	f000 f907 	bl	800447a <TIM_ITRx_SetConfig>
      break;
 800426c:	e003      	b.n	8004276 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	73fb      	strb	r3, [r7, #15]
      break;
 8004272:	e000      	b.n	8004276 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004274:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004286:	7bfb      	ldrb	r3, [r7, #15]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a2e      	ldr	r2, [pc, #184]	; (80043ac <TIM_Base_SetConfig+0xcc>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d003      	beq.n	8004300 <TIM_Base_SetConfig+0x20>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042fe:	d108      	bne.n	8004312 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a25      	ldr	r2, [pc, #148]	; (80043ac <TIM_Base_SetConfig+0xcc>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d00f      	beq.n	800433a <TIM_Base_SetConfig+0x5a>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004320:	d00b      	beq.n	800433a <TIM_Base_SetConfig+0x5a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a22      	ldr	r2, [pc, #136]	; (80043b0 <TIM_Base_SetConfig+0xd0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d007      	beq.n	800433a <TIM_Base_SetConfig+0x5a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a21      	ldr	r2, [pc, #132]	; (80043b4 <TIM_Base_SetConfig+0xd4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d003      	beq.n	800433a <TIM_Base_SetConfig+0x5a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a20      	ldr	r2, [pc, #128]	; (80043b8 <TIM_Base_SetConfig+0xd8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d108      	bne.n	800434c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4313      	orrs	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a0e      	ldr	r2, [pc, #56]	; (80043ac <TIM_Base_SetConfig+0xcc>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d00b      	beq.n	8004390 <TIM_Base_SetConfig+0xb0>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a0d      	ldr	r2, [pc, #52]	; (80043b0 <TIM_Base_SetConfig+0xd0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d007      	beq.n	8004390 <TIM_Base_SetConfig+0xb0>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a0c      	ldr	r2, [pc, #48]	; (80043b4 <TIM_Base_SetConfig+0xd4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d003      	beq.n	8004390 <TIM_Base_SetConfig+0xb0>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a0b      	ldr	r2, [pc, #44]	; (80043b8 <TIM_Base_SetConfig+0xd8>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d103      	bne.n	8004398 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	615a      	str	r2, [r3, #20]
}
 800439e:	bf00      	nop
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40012c00 	.word	0x40012c00
 80043b0:	40014000 	.word	0x40014000
 80043b4:	40014400 	.word	0x40014400
 80043b8:	40014800 	.word	0x40014800

080043bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	f023 0201 	bic.w	r2, r3, #1
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f023 030a 	bic.w	r3, r3, #10
 80043f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	4313      	orrs	r3, r2
 8004400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	621a      	str	r2, [r3, #32]
}
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800441a:	b480      	push	{r7}
 800441c:	b087      	sub	sp, #28
 800441e:	af00      	add	r7, sp, #0
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	f023 0210 	bic.w	r2, r3, #16
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004444:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	031b      	lsls	r3, r3, #12
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004456:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	621a      	str	r2, [r3, #32]
}
 800446e:	bf00      	nop
 8004470:	371c      	adds	r7, #28
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800447a:	b480      	push	{r7}
 800447c:	b085      	sub	sp, #20
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004490:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	f043 0307 	orr.w	r3, r3, #7
 800449c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	609a      	str	r2, [r3, #8]
}
 80044a4:	bf00      	nop
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	021a      	lsls	r2, r3, #8
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4313      	orrs	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	609a      	str	r2, [r3, #8]
}
 80044e4:	bf00      	nop
 80044e6:	371c      	adds	r7, #28
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f003 031f 	and.w	r3, r3, #31
 8004502:	2201      	movs	r2, #1
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a1a      	ldr	r2, [r3, #32]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	43db      	mvns	r3, r3
 8004512:	401a      	ands	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a1a      	ldr	r2, [r3, #32]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f003 031f 	and.w	r3, r3, #31
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	fa01 f303 	lsl.w	r3, r1, r3
 8004528:	431a      	orrs	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	621a      	str	r2, [r3, #32]
}
 800452e:	bf00      	nop
 8004530:	371c      	adds	r7, #28
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
	...

0800453c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004550:	2302      	movs	r3, #2
 8004552:	e04f      	b.n	80045f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a21      	ldr	r2, [pc, #132]	; (8004600 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d108      	bne.n	8004590 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004584:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	4313      	orrs	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a14      	ldr	r2, [pc, #80]	; (8004600 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d009      	beq.n	80045c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045bc:	d004      	beq.n	80045c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a10      	ldr	r2, [pc, #64]	; (8004604 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d10c      	bne.n	80045e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	40012c00 	.word	0x40012c00
 8004604:	40014000 	.word	0x40014000

08004608 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e040      	b.n	80046d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fc ff70 	bl	800154c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2224      	movs	r2, #36	; 0x24
 8004670:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0201 	bic.w	r2, r2, #1
 8004680:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f82c 	bl	80046e0 <UART_SetConfig>
 8004688:	4603      	mov	r3, r0
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e022      	b.n	80046d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f956 	bl	800494c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f9dd 	bl	8004a90 <UART_CheckIdleState>
 80046d6:	4603      	mov	r3, r0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046e8:	2300      	movs	r3, #0
 80046ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	4313      	orrs	r3, r2
 8004702:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	4b8a      	ldr	r3, [pc, #552]	; (8004934 <UART_SetConfig+0x254>)
 800470c:	4013      	ands	r3, r2
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	6979      	ldr	r1, [r7, #20]
 8004714:	430b      	orrs	r3, r1
 8004716:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	4313      	orrs	r3, r2
 800473c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	430a      	orrs	r2, r1
 8004750:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a78      	ldr	r2, [pc, #480]	; (8004938 <UART_SetConfig+0x258>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d120      	bne.n	800479e <UART_SetConfig+0xbe>
 800475c:	4b77      	ldr	r3, [pc, #476]	; (800493c <UART_SetConfig+0x25c>)
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	f003 0303 	and.w	r3, r3, #3
 8004764:	2b03      	cmp	r3, #3
 8004766:	d817      	bhi.n	8004798 <UART_SetConfig+0xb8>
 8004768:	a201      	add	r2, pc, #4	; (adr r2, 8004770 <UART_SetConfig+0x90>)
 800476a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476e:	bf00      	nop
 8004770:	08004781 	.word	0x08004781
 8004774:	0800478d 	.word	0x0800478d
 8004778:	08004793 	.word	0x08004793
 800477c:	08004787 	.word	0x08004787
 8004780:	2300      	movs	r3, #0
 8004782:	77fb      	strb	r3, [r7, #31]
 8004784:	e01d      	b.n	80047c2 <UART_SetConfig+0xe2>
 8004786:	2302      	movs	r3, #2
 8004788:	77fb      	strb	r3, [r7, #31]
 800478a:	e01a      	b.n	80047c2 <UART_SetConfig+0xe2>
 800478c:	2304      	movs	r3, #4
 800478e:	77fb      	strb	r3, [r7, #31]
 8004790:	e017      	b.n	80047c2 <UART_SetConfig+0xe2>
 8004792:	2308      	movs	r3, #8
 8004794:	77fb      	strb	r3, [r7, #31]
 8004796:	e014      	b.n	80047c2 <UART_SetConfig+0xe2>
 8004798:	2310      	movs	r3, #16
 800479a:	77fb      	strb	r3, [r7, #31]
 800479c:	e011      	b.n	80047c2 <UART_SetConfig+0xe2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a67      	ldr	r2, [pc, #412]	; (8004940 <UART_SetConfig+0x260>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d102      	bne.n	80047ae <UART_SetConfig+0xce>
 80047a8:	2300      	movs	r3, #0
 80047aa:	77fb      	strb	r3, [r7, #31]
 80047ac:	e009      	b.n	80047c2 <UART_SetConfig+0xe2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a64      	ldr	r2, [pc, #400]	; (8004944 <UART_SetConfig+0x264>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d102      	bne.n	80047be <UART_SetConfig+0xde>
 80047b8:	2300      	movs	r3, #0
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e001      	b.n	80047c2 <UART_SetConfig+0xe2>
 80047be:	2310      	movs	r3, #16
 80047c0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ca:	d15a      	bne.n	8004882 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80047cc:	7ffb      	ldrb	r3, [r7, #31]
 80047ce:	2b08      	cmp	r3, #8
 80047d0:	d827      	bhi.n	8004822 <UART_SetConfig+0x142>
 80047d2:	a201      	add	r2, pc, #4	; (adr r2, 80047d8 <UART_SetConfig+0xf8>)
 80047d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d8:	080047fd 	.word	0x080047fd
 80047dc:	08004805 	.word	0x08004805
 80047e0:	0800480d 	.word	0x0800480d
 80047e4:	08004823 	.word	0x08004823
 80047e8:	08004813 	.word	0x08004813
 80047ec:	08004823 	.word	0x08004823
 80047f0:	08004823 	.word	0x08004823
 80047f4:	08004823 	.word	0x08004823
 80047f8:	0800481b 	.word	0x0800481b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047fc:	f7fe ffb2 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 8004800:	61b8      	str	r0, [r7, #24]
        break;
 8004802:	e013      	b.n	800482c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004804:	f7fe ffd0 	bl	80037a8 <HAL_RCC_GetPCLK2Freq>
 8004808:	61b8      	str	r0, [r7, #24]
        break;
 800480a:	e00f      	b.n	800482c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800480c:	4b4e      	ldr	r3, [pc, #312]	; (8004948 <UART_SetConfig+0x268>)
 800480e:	61bb      	str	r3, [r7, #24]
        break;
 8004810:	e00c      	b.n	800482c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004812:	f7fe ff31 	bl	8003678 <HAL_RCC_GetSysClockFreq>
 8004816:	61b8      	str	r0, [r7, #24]
        break;
 8004818:	e008      	b.n	800482c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800481a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800481e:	61bb      	str	r3, [r7, #24]
        break;
 8004820:	e004      	b.n	800482c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004822:	2300      	movs	r3, #0
 8004824:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	77bb      	strb	r3, [r7, #30]
        break;
 800482a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d074      	beq.n	800491c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	005a      	lsls	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	085b      	lsrs	r3, r3, #1
 800483c:	441a      	add	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	fbb2 f3f3 	udiv	r3, r2, r3
 8004846:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	2b0f      	cmp	r3, #15
 800484c:	d916      	bls.n	800487c <UART_SetConfig+0x19c>
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004854:	d212      	bcs.n	800487c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	b29b      	uxth	r3, r3
 800485a:	f023 030f 	bic.w	r3, r3, #15
 800485e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	085b      	lsrs	r3, r3, #1
 8004864:	b29b      	uxth	r3, r3
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	b29a      	uxth	r2, r3
 800486c:	89fb      	ldrh	r3, [r7, #14]
 800486e:	4313      	orrs	r3, r2
 8004870:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	89fa      	ldrh	r2, [r7, #14]
 8004878:	60da      	str	r2, [r3, #12]
 800487a:	e04f      	b.n	800491c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	77bb      	strb	r3, [r7, #30]
 8004880:	e04c      	b.n	800491c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004882:	7ffb      	ldrb	r3, [r7, #31]
 8004884:	2b08      	cmp	r3, #8
 8004886:	d828      	bhi.n	80048da <UART_SetConfig+0x1fa>
 8004888:	a201      	add	r2, pc, #4	; (adr r2, 8004890 <UART_SetConfig+0x1b0>)
 800488a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488e:	bf00      	nop
 8004890:	080048b5 	.word	0x080048b5
 8004894:	080048bd 	.word	0x080048bd
 8004898:	080048c5 	.word	0x080048c5
 800489c:	080048db 	.word	0x080048db
 80048a0:	080048cb 	.word	0x080048cb
 80048a4:	080048db 	.word	0x080048db
 80048a8:	080048db 	.word	0x080048db
 80048ac:	080048db 	.word	0x080048db
 80048b0:	080048d3 	.word	0x080048d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048b4:	f7fe ff56 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 80048b8:	61b8      	str	r0, [r7, #24]
        break;
 80048ba:	e013      	b.n	80048e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048bc:	f7fe ff74 	bl	80037a8 <HAL_RCC_GetPCLK2Freq>
 80048c0:	61b8      	str	r0, [r7, #24]
        break;
 80048c2:	e00f      	b.n	80048e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048c4:	4b20      	ldr	r3, [pc, #128]	; (8004948 <UART_SetConfig+0x268>)
 80048c6:	61bb      	str	r3, [r7, #24]
        break;
 80048c8:	e00c      	b.n	80048e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ca:	f7fe fed5 	bl	8003678 <HAL_RCC_GetSysClockFreq>
 80048ce:	61b8      	str	r0, [r7, #24]
        break;
 80048d0:	e008      	b.n	80048e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048d6:	61bb      	str	r3, [r7, #24]
        break;
 80048d8:	e004      	b.n	80048e4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	77bb      	strb	r3, [r7, #30]
        break;
 80048e2:	bf00      	nop
    }

    if (pclk != 0U)
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d018      	beq.n	800491c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	085a      	lsrs	r2, r3, #1
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	441a      	add	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	2b0f      	cmp	r3, #15
 8004902:	d909      	bls.n	8004918 <UART_SetConfig+0x238>
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800490a:	d205      	bcs.n	8004918 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	b29a      	uxth	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	60da      	str	r2, [r3, #12]
 8004916:	e001      	b.n	800491c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004928:	7fbb      	ldrb	r3, [r7, #30]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3720      	adds	r7, #32
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	efff69f3 	.word	0xefff69f3
 8004938:	40013800 	.word	0x40013800
 800493c:	40021000 	.word	0x40021000
 8004940:	40004400 	.word	0x40004400
 8004944:	40004800 	.word	0x40004800
 8004948:	007a1200 	.word	0x007a1200

0800494c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	f003 0310 	and.w	r3, r3, #16
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00a      	beq.n	80049fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	f003 0320 	and.w	r3, r3, #32
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d01a      	beq.n	8004a62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a4a:	d10a      	bne.n	8004a62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	605a      	str	r2, [r3, #4]
  }
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b098      	sub	sp, #96	; 0x60
 8004a94:	af02      	add	r7, sp, #8
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004aa0:	f7fc fe6a 	bl	8001778 <HAL_GetTick>
 8004aa4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0308 	and.w	r3, r3, #8
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d12e      	bne.n	8004b12 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004abc:	2200      	movs	r2, #0
 8004abe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f88c 	bl	8004be0 <UART_WaitOnFlagUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d021      	beq.n	8004b12 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad6:	e853 3f00 	ldrex	r3, [r3]
 8004ada:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ae2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aec:	647b      	str	r3, [r7, #68]	; 0x44
 8004aee:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004af2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e6      	bne.n	8004ace <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2220      	movs	r2, #32
 8004b04:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e062      	b.n	8004bd8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	d149      	bne.n	8004bb4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f856 	bl	8004be0 <UART_WaitOnFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d03c      	beq.n	8004bb4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	e853 3f00 	ldrex	r3, [r3]
 8004b46:	623b      	str	r3, [r7, #32]
   return(result);
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	461a      	mov	r2, r3
 8004b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b58:	633b      	str	r3, [r7, #48]	; 0x30
 8004b5a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b60:	e841 2300 	strex	r3, r2, [r1]
 8004b64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e6      	bne.n	8004b3a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3308      	adds	r3, #8
 8004b72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	e853 3f00 	ldrex	r3, [r3]
 8004b7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0301 	bic.w	r3, r3, #1
 8004b82:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	3308      	adds	r3, #8
 8004b8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b8c:	61fa      	str	r2, [r7, #28]
 8004b8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b90:	69b9      	ldr	r1, [r7, #24]
 8004b92:	69fa      	ldr	r2, [r7, #28]
 8004b94:	e841 2300 	strex	r3, r2, [r1]
 8004b98:	617b      	str	r3, [r7, #20]
   return(result);
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1e5      	bne.n	8004b6c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e011      	b.n	8004bd8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3758      	adds	r7, #88	; 0x58
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	603b      	str	r3, [r7, #0]
 8004bec:	4613      	mov	r3, r2
 8004bee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf0:	e049      	b.n	8004c86 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf8:	d045      	beq.n	8004c86 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bfa:	f7fc fdbd 	bl	8001778 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d302      	bcc.n	8004c10 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e048      	b.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d031      	beq.n	8004c86 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	f003 0308 	and.w	r3, r3, #8
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d110      	bne.n	8004c52 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2208      	movs	r2, #8
 8004c36:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f838 	bl	8004cae <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2208      	movs	r2, #8
 8004c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e029      	b.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c60:	d111      	bne.n	8004c86 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 f81e 	bl	8004cae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e00f      	b.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69da      	ldr	r2, [r3, #28]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	bf0c      	ite	eq
 8004c96:	2301      	moveq	r3, #1
 8004c98:	2300      	movne	r3, #0
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	79fb      	ldrb	r3, [r7, #7]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d0a6      	beq.n	8004bf2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b095      	sub	sp, #84	; 0x54
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cbe:	e853 3f00 	ldrex	r3, [r3]
 8004cc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cd4:	643b      	str	r3, [r7, #64]	; 0x40
 8004cd6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cdc:	e841 2300 	strex	r3, r2, [r1]
 8004ce0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e6      	bne.n	8004cb6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3308      	adds	r3, #8
 8004cee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	e853 3f00 	ldrex	r3, [r3]
 8004cf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	f023 0301 	bic.w	r3, r3, #1
 8004cfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3308      	adds	r3, #8
 8004d06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d10:	e841 2300 	strex	r3, r2, [r1]
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1e5      	bne.n	8004ce8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d118      	bne.n	8004d56 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	e853 3f00 	ldrex	r3, [r3]
 8004d30:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f023 0310 	bic.w	r3, r3, #16
 8004d38:	647b      	str	r3, [r7, #68]	; 0x44
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d42:	61bb      	str	r3, [r7, #24]
 8004d44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d46:	6979      	ldr	r1, [r7, #20]
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	e841 2300 	strex	r3, r2, [r1]
 8004d4e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1e6      	bne.n	8004d24 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d6a:	bf00      	nop
 8004d6c:	3754      	adds	r7, #84	; 0x54
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
	...

08004d78 <__libc_init_array>:
 8004d78:	b570      	push	{r4, r5, r6, lr}
 8004d7a:	4d0d      	ldr	r5, [pc, #52]	; (8004db0 <__libc_init_array+0x38>)
 8004d7c:	4c0d      	ldr	r4, [pc, #52]	; (8004db4 <__libc_init_array+0x3c>)
 8004d7e:	1b64      	subs	r4, r4, r5
 8004d80:	10a4      	asrs	r4, r4, #2
 8004d82:	2600      	movs	r6, #0
 8004d84:	42a6      	cmp	r6, r4
 8004d86:	d109      	bne.n	8004d9c <__libc_init_array+0x24>
 8004d88:	4d0b      	ldr	r5, [pc, #44]	; (8004db8 <__libc_init_array+0x40>)
 8004d8a:	4c0c      	ldr	r4, [pc, #48]	; (8004dbc <__libc_init_array+0x44>)
 8004d8c:	f001 f86a 	bl	8005e64 <_init>
 8004d90:	1b64      	subs	r4, r4, r5
 8004d92:	10a4      	asrs	r4, r4, #2
 8004d94:	2600      	movs	r6, #0
 8004d96:	42a6      	cmp	r6, r4
 8004d98:	d105      	bne.n	8004da6 <__libc_init_array+0x2e>
 8004d9a:	bd70      	pop	{r4, r5, r6, pc}
 8004d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004da0:	4798      	blx	r3
 8004da2:	3601      	adds	r6, #1
 8004da4:	e7ee      	b.n	8004d84 <__libc_init_array+0xc>
 8004da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004daa:	4798      	blx	r3
 8004dac:	3601      	adds	r6, #1
 8004dae:	e7f2      	b.n	8004d96 <__libc_init_array+0x1e>
 8004db0:	08006090 	.word	0x08006090
 8004db4:	08006090 	.word	0x08006090
 8004db8:	08006090 	.word	0x08006090
 8004dbc:	08006094 	.word	0x08006094

08004dc0 <memset>:
 8004dc0:	4402      	add	r2, r0
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d100      	bne.n	8004dca <memset+0xa>
 8004dc8:	4770      	bx	lr
 8004dca:	f803 1b01 	strb.w	r1, [r3], #1
 8004dce:	e7f9      	b.n	8004dc4 <memset+0x4>

08004dd0 <sin>:
 8004dd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004dd2:	ec53 2b10 	vmov	r2, r3, d0
 8004dd6:	4828      	ldr	r0, [pc, #160]	; (8004e78 <sin+0xa8>)
 8004dd8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004ddc:	4281      	cmp	r1, r0
 8004dde:	dc07      	bgt.n	8004df0 <sin+0x20>
 8004de0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8004e70 <sin+0xa0>
 8004de4:	2000      	movs	r0, #0
 8004de6:	b005      	add	sp, #20
 8004de8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dec:	f000 be6c 	b.w	8005ac8 <__kernel_sin>
 8004df0:	4822      	ldr	r0, [pc, #136]	; (8004e7c <sin+0xac>)
 8004df2:	4281      	cmp	r1, r0
 8004df4:	dd09      	ble.n	8004e0a <sin+0x3a>
 8004df6:	ee10 0a10 	vmov	r0, s0
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	f7fb f9e8 	bl	80001d0 <__aeabi_dsub>
 8004e00:	ec41 0b10 	vmov	d0, r0, r1
 8004e04:	b005      	add	sp, #20
 8004e06:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e0a:	4668      	mov	r0, sp
 8004e0c:	f000 f838 	bl	8004e80 <__ieee754_rem_pio2>
 8004e10:	f000 0003 	and.w	r0, r0, #3
 8004e14:	2801      	cmp	r0, #1
 8004e16:	d00c      	beq.n	8004e32 <sin+0x62>
 8004e18:	2802      	cmp	r0, #2
 8004e1a:	d011      	beq.n	8004e40 <sin+0x70>
 8004e1c:	b9f0      	cbnz	r0, 8004e5c <sin+0x8c>
 8004e1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004e22:	ed9d 0b00 	vldr	d0, [sp]
 8004e26:	2001      	movs	r0, #1
 8004e28:	f000 fe4e 	bl	8005ac8 <__kernel_sin>
 8004e2c:	ec51 0b10 	vmov	r0, r1, d0
 8004e30:	e7e6      	b.n	8004e00 <sin+0x30>
 8004e32:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004e36:	ed9d 0b00 	vldr	d0, [sp]
 8004e3a:	f000 fa2d 	bl	8005298 <__kernel_cos>
 8004e3e:	e7f5      	b.n	8004e2c <sin+0x5c>
 8004e40:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004e44:	ed9d 0b00 	vldr	d0, [sp]
 8004e48:	2001      	movs	r0, #1
 8004e4a:	f000 fe3d 	bl	8005ac8 <__kernel_sin>
 8004e4e:	ec53 2b10 	vmov	r2, r3, d0
 8004e52:	ee10 0a10 	vmov	r0, s0
 8004e56:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004e5a:	e7d1      	b.n	8004e00 <sin+0x30>
 8004e5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004e60:	ed9d 0b00 	vldr	d0, [sp]
 8004e64:	f000 fa18 	bl	8005298 <__kernel_cos>
 8004e68:	e7f1      	b.n	8004e4e <sin+0x7e>
 8004e6a:	bf00      	nop
 8004e6c:	f3af 8000 	nop.w
	...
 8004e78:	3fe921fb 	.word	0x3fe921fb
 8004e7c:	7fefffff 	.word	0x7fefffff

08004e80 <__ieee754_rem_pio2>:
 8004e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e84:	ed2d 8b02 	vpush	{d8}
 8004e88:	ec55 4b10 	vmov	r4, r5, d0
 8004e8c:	4bca      	ldr	r3, [pc, #808]	; (80051b8 <__ieee754_rem_pio2+0x338>)
 8004e8e:	b08b      	sub	sp, #44	; 0x2c
 8004e90:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004e94:	4598      	cmp	r8, r3
 8004e96:	4682      	mov	sl, r0
 8004e98:	9502      	str	r5, [sp, #8]
 8004e9a:	dc08      	bgt.n	8004eae <__ieee754_rem_pio2+0x2e>
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	ed80 0b00 	vstr	d0, [r0]
 8004ea4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004ea8:	f04f 0b00 	mov.w	fp, #0
 8004eac:	e028      	b.n	8004f00 <__ieee754_rem_pio2+0x80>
 8004eae:	4bc3      	ldr	r3, [pc, #780]	; (80051bc <__ieee754_rem_pio2+0x33c>)
 8004eb0:	4598      	cmp	r8, r3
 8004eb2:	dc78      	bgt.n	8004fa6 <__ieee754_rem_pio2+0x126>
 8004eb4:	9b02      	ldr	r3, [sp, #8]
 8004eb6:	4ec2      	ldr	r6, [pc, #776]	; (80051c0 <__ieee754_rem_pio2+0x340>)
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	ee10 0a10 	vmov	r0, s0
 8004ebe:	a3b0      	add	r3, pc, #704	; (adr r3, 8005180 <__ieee754_rem_pio2+0x300>)
 8004ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec4:	4629      	mov	r1, r5
 8004ec6:	dd39      	ble.n	8004f3c <__ieee754_rem_pio2+0xbc>
 8004ec8:	f7fb f982 	bl	80001d0 <__aeabi_dsub>
 8004ecc:	45b0      	cmp	r8, r6
 8004ece:	4604      	mov	r4, r0
 8004ed0:	460d      	mov	r5, r1
 8004ed2:	d01b      	beq.n	8004f0c <__ieee754_rem_pio2+0x8c>
 8004ed4:	a3ac      	add	r3, pc, #688	; (adr r3, 8005188 <__ieee754_rem_pio2+0x308>)
 8004ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eda:	f7fb f979 	bl	80001d0 <__aeabi_dsub>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	e9ca 2300 	strd	r2, r3, [sl]
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	4629      	mov	r1, r5
 8004eea:	f7fb f971 	bl	80001d0 <__aeabi_dsub>
 8004eee:	a3a6      	add	r3, pc, #664	; (adr r3, 8005188 <__ieee754_rem_pio2+0x308>)
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	f7fb f96c 	bl	80001d0 <__aeabi_dsub>
 8004ef8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004efc:	f04f 0b01 	mov.w	fp, #1
 8004f00:	4658      	mov	r0, fp
 8004f02:	b00b      	add	sp, #44	; 0x2c
 8004f04:	ecbd 8b02 	vpop	{d8}
 8004f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f0c:	a3a0      	add	r3, pc, #640	; (adr r3, 8005190 <__ieee754_rem_pio2+0x310>)
 8004f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f12:	f7fb f95d 	bl	80001d0 <__aeabi_dsub>
 8004f16:	a3a0      	add	r3, pc, #640	; (adr r3, 8005198 <__ieee754_rem_pio2+0x318>)
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	460d      	mov	r5, r1
 8004f20:	f7fb f956 	bl	80001d0 <__aeabi_dsub>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	e9ca 2300 	strd	r2, r3, [sl]
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	4629      	mov	r1, r5
 8004f30:	f7fb f94e 	bl	80001d0 <__aeabi_dsub>
 8004f34:	a398      	add	r3, pc, #608	; (adr r3, 8005198 <__ieee754_rem_pio2+0x318>)
 8004f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3a:	e7db      	b.n	8004ef4 <__ieee754_rem_pio2+0x74>
 8004f3c:	f7fb f94a 	bl	80001d4 <__adddf3>
 8004f40:	45b0      	cmp	r8, r6
 8004f42:	4604      	mov	r4, r0
 8004f44:	460d      	mov	r5, r1
 8004f46:	d016      	beq.n	8004f76 <__ieee754_rem_pio2+0xf6>
 8004f48:	a38f      	add	r3, pc, #572	; (adr r3, 8005188 <__ieee754_rem_pio2+0x308>)
 8004f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4e:	f7fb f941 	bl	80001d4 <__adddf3>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	e9ca 2300 	strd	r2, r3, [sl]
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	4629      	mov	r1, r5
 8004f5e:	f7fb f937 	bl	80001d0 <__aeabi_dsub>
 8004f62:	a389      	add	r3, pc, #548	; (adr r3, 8005188 <__ieee754_rem_pio2+0x308>)
 8004f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f68:	f7fb f934 	bl	80001d4 <__adddf3>
 8004f6c:	f04f 3bff 	mov.w	fp, #4294967295
 8004f70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004f74:	e7c4      	b.n	8004f00 <__ieee754_rem_pio2+0x80>
 8004f76:	a386      	add	r3, pc, #536	; (adr r3, 8005190 <__ieee754_rem_pio2+0x310>)
 8004f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7c:	f7fb f92a 	bl	80001d4 <__adddf3>
 8004f80:	a385      	add	r3, pc, #532	; (adr r3, 8005198 <__ieee754_rem_pio2+0x318>)
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	4604      	mov	r4, r0
 8004f88:	460d      	mov	r5, r1
 8004f8a:	f7fb f923 	bl	80001d4 <__adddf3>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	e9ca 2300 	strd	r2, r3, [sl]
 8004f96:	4620      	mov	r0, r4
 8004f98:	4629      	mov	r1, r5
 8004f9a:	f7fb f919 	bl	80001d0 <__aeabi_dsub>
 8004f9e:	a37e      	add	r3, pc, #504	; (adr r3, 8005198 <__ieee754_rem_pio2+0x318>)
 8004fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa4:	e7e0      	b.n	8004f68 <__ieee754_rem_pio2+0xe8>
 8004fa6:	4b87      	ldr	r3, [pc, #540]	; (80051c4 <__ieee754_rem_pio2+0x344>)
 8004fa8:	4598      	cmp	r8, r3
 8004faa:	f300 80d9 	bgt.w	8005160 <__ieee754_rem_pio2+0x2e0>
 8004fae:	f000 fe49 	bl	8005c44 <fabs>
 8004fb2:	ec55 4b10 	vmov	r4, r5, d0
 8004fb6:	ee10 0a10 	vmov	r0, s0
 8004fba:	a379      	add	r3, pc, #484	; (adr r3, 80051a0 <__ieee754_rem_pio2+0x320>)
 8004fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc0:	4629      	mov	r1, r5
 8004fc2:	f7fb fabd 	bl	8000540 <__aeabi_dmul>
 8004fc6:	4b80      	ldr	r3, [pc, #512]	; (80051c8 <__ieee754_rem_pio2+0x348>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f7fb f903 	bl	80001d4 <__adddf3>
 8004fce:	f7fb fd51 	bl	8000a74 <__aeabi_d2iz>
 8004fd2:	4683      	mov	fp, r0
 8004fd4:	f7fb fa4a 	bl	800046c <__aeabi_i2d>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	ec43 2b18 	vmov	d8, r2, r3
 8004fe0:	a367      	add	r3, pc, #412	; (adr r3, 8005180 <__ieee754_rem_pio2+0x300>)
 8004fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe6:	f7fb faab 	bl	8000540 <__aeabi_dmul>
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	4620      	mov	r0, r4
 8004ff0:	4629      	mov	r1, r5
 8004ff2:	f7fb f8ed 	bl	80001d0 <__aeabi_dsub>
 8004ff6:	a364      	add	r3, pc, #400	; (adr r3, 8005188 <__ieee754_rem_pio2+0x308>)
 8004ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffc:	4606      	mov	r6, r0
 8004ffe:	460f      	mov	r7, r1
 8005000:	ec51 0b18 	vmov	r0, r1, d8
 8005004:	f7fb fa9c 	bl	8000540 <__aeabi_dmul>
 8005008:	f1bb 0f1f 	cmp.w	fp, #31
 800500c:	4604      	mov	r4, r0
 800500e:	460d      	mov	r5, r1
 8005010:	dc0d      	bgt.n	800502e <__ieee754_rem_pio2+0x1ae>
 8005012:	4b6e      	ldr	r3, [pc, #440]	; (80051cc <__ieee754_rem_pio2+0x34c>)
 8005014:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800501c:	4543      	cmp	r3, r8
 800501e:	d006      	beq.n	800502e <__ieee754_rem_pio2+0x1ae>
 8005020:	4622      	mov	r2, r4
 8005022:	462b      	mov	r3, r5
 8005024:	4630      	mov	r0, r6
 8005026:	4639      	mov	r1, r7
 8005028:	f7fb f8d2 	bl	80001d0 <__aeabi_dsub>
 800502c:	e00f      	b.n	800504e <__ieee754_rem_pio2+0x1ce>
 800502e:	462b      	mov	r3, r5
 8005030:	4622      	mov	r2, r4
 8005032:	4630      	mov	r0, r6
 8005034:	4639      	mov	r1, r7
 8005036:	f7fb f8cb 	bl	80001d0 <__aeabi_dsub>
 800503a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800503e:	9303      	str	r3, [sp, #12]
 8005040:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005044:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8005048:	f1b8 0f10 	cmp.w	r8, #16
 800504c:	dc02      	bgt.n	8005054 <__ieee754_rem_pio2+0x1d4>
 800504e:	e9ca 0100 	strd	r0, r1, [sl]
 8005052:	e039      	b.n	80050c8 <__ieee754_rem_pio2+0x248>
 8005054:	a34e      	add	r3, pc, #312	; (adr r3, 8005190 <__ieee754_rem_pio2+0x310>)
 8005056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505a:	ec51 0b18 	vmov	r0, r1, d8
 800505e:	f7fb fa6f 	bl	8000540 <__aeabi_dmul>
 8005062:	4604      	mov	r4, r0
 8005064:	460d      	mov	r5, r1
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	4630      	mov	r0, r6
 800506c:	4639      	mov	r1, r7
 800506e:	f7fb f8af 	bl	80001d0 <__aeabi_dsub>
 8005072:	4602      	mov	r2, r0
 8005074:	460b      	mov	r3, r1
 8005076:	4680      	mov	r8, r0
 8005078:	4689      	mov	r9, r1
 800507a:	4630      	mov	r0, r6
 800507c:	4639      	mov	r1, r7
 800507e:	f7fb f8a7 	bl	80001d0 <__aeabi_dsub>
 8005082:	4622      	mov	r2, r4
 8005084:	462b      	mov	r3, r5
 8005086:	f7fb f8a3 	bl	80001d0 <__aeabi_dsub>
 800508a:	a343      	add	r3, pc, #268	; (adr r3, 8005198 <__ieee754_rem_pio2+0x318>)
 800508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005090:	4604      	mov	r4, r0
 8005092:	460d      	mov	r5, r1
 8005094:	ec51 0b18 	vmov	r0, r1, d8
 8005098:	f7fb fa52 	bl	8000540 <__aeabi_dmul>
 800509c:	4622      	mov	r2, r4
 800509e:	462b      	mov	r3, r5
 80050a0:	f7fb f896 	bl	80001d0 <__aeabi_dsub>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4604      	mov	r4, r0
 80050aa:	460d      	mov	r5, r1
 80050ac:	4640      	mov	r0, r8
 80050ae:	4649      	mov	r1, r9
 80050b0:	f7fb f88e 	bl	80001d0 <__aeabi_dsub>
 80050b4:	9a03      	ldr	r2, [sp, #12]
 80050b6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b31      	cmp	r3, #49	; 0x31
 80050be:	dc24      	bgt.n	800510a <__ieee754_rem_pio2+0x28a>
 80050c0:	e9ca 0100 	strd	r0, r1, [sl]
 80050c4:	4646      	mov	r6, r8
 80050c6:	464f      	mov	r7, r9
 80050c8:	e9da 8900 	ldrd	r8, r9, [sl]
 80050cc:	4630      	mov	r0, r6
 80050ce:	4642      	mov	r2, r8
 80050d0:	464b      	mov	r3, r9
 80050d2:	4639      	mov	r1, r7
 80050d4:	f7fb f87c 	bl	80001d0 <__aeabi_dsub>
 80050d8:	462b      	mov	r3, r5
 80050da:	4622      	mov	r2, r4
 80050dc:	f7fb f878 	bl	80001d0 <__aeabi_dsub>
 80050e0:	9b02      	ldr	r3, [sp, #8]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80050e8:	f6bf af0a 	bge.w	8004f00 <__ieee754_rem_pio2+0x80>
 80050ec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80050f0:	f8ca 3004 	str.w	r3, [sl, #4]
 80050f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80050f8:	f8ca 8000 	str.w	r8, [sl]
 80050fc:	f8ca 0008 	str.w	r0, [sl, #8]
 8005100:	f8ca 300c 	str.w	r3, [sl, #12]
 8005104:	f1cb 0b00 	rsb	fp, fp, #0
 8005108:	e6fa      	b.n	8004f00 <__ieee754_rem_pio2+0x80>
 800510a:	a327      	add	r3, pc, #156	; (adr r3, 80051a8 <__ieee754_rem_pio2+0x328>)
 800510c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005110:	ec51 0b18 	vmov	r0, r1, d8
 8005114:	f7fb fa14 	bl	8000540 <__aeabi_dmul>
 8005118:	4604      	mov	r4, r0
 800511a:	460d      	mov	r5, r1
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	4640      	mov	r0, r8
 8005122:	4649      	mov	r1, r9
 8005124:	f7fb f854 	bl	80001d0 <__aeabi_dsub>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4606      	mov	r6, r0
 800512e:	460f      	mov	r7, r1
 8005130:	4640      	mov	r0, r8
 8005132:	4649      	mov	r1, r9
 8005134:	f7fb f84c 	bl	80001d0 <__aeabi_dsub>
 8005138:	4622      	mov	r2, r4
 800513a:	462b      	mov	r3, r5
 800513c:	f7fb f848 	bl	80001d0 <__aeabi_dsub>
 8005140:	a31b      	add	r3, pc, #108	; (adr r3, 80051b0 <__ieee754_rem_pio2+0x330>)
 8005142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005146:	4604      	mov	r4, r0
 8005148:	460d      	mov	r5, r1
 800514a:	ec51 0b18 	vmov	r0, r1, d8
 800514e:	f7fb f9f7 	bl	8000540 <__aeabi_dmul>
 8005152:	4622      	mov	r2, r4
 8005154:	462b      	mov	r3, r5
 8005156:	f7fb f83b 	bl	80001d0 <__aeabi_dsub>
 800515a:	4604      	mov	r4, r0
 800515c:	460d      	mov	r5, r1
 800515e:	e75f      	b.n	8005020 <__ieee754_rem_pio2+0x1a0>
 8005160:	4b1b      	ldr	r3, [pc, #108]	; (80051d0 <__ieee754_rem_pio2+0x350>)
 8005162:	4598      	cmp	r8, r3
 8005164:	dd36      	ble.n	80051d4 <__ieee754_rem_pio2+0x354>
 8005166:	ee10 2a10 	vmov	r2, s0
 800516a:	462b      	mov	r3, r5
 800516c:	4620      	mov	r0, r4
 800516e:	4629      	mov	r1, r5
 8005170:	f7fb f82e 	bl	80001d0 <__aeabi_dsub>
 8005174:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005178:	e9ca 0100 	strd	r0, r1, [sl]
 800517c:	e694      	b.n	8004ea8 <__ieee754_rem_pio2+0x28>
 800517e:	bf00      	nop
 8005180:	54400000 	.word	0x54400000
 8005184:	3ff921fb 	.word	0x3ff921fb
 8005188:	1a626331 	.word	0x1a626331
 800518c:	3dd0b461 	.word	0x3dd0b461
 8005190:	1a600000 	.word	0x1a600000
 8005194:	3dd0b461 	.word	0x3dd0b461
 8005198:	2e037073 	.word	0x2e037073
 800519c:	3ba3198a 	.word	0x3ba3198a
 80051a0:	6dc9c883 	.word	0x6dc9c883
 80051a4:	3fe45f30 	.word	0x3fe45f30
 80051a8:	2e000000 	.word	0x2e000000
 80051ac:	3ba3198a 	.word	0x3ba3198a
 80051b0:	252049c1 	.word	0x252049c1
 80051b4:	397b839a 	.word	0x397b839a
 80051b8:	3fe921fb 	.word	0x3fe921fb
 80051bc:	4002d97b 	.word	0x4002d97b
 80051c0:	3ff921fb 	.word	0x3ff921fb
 80051c4:	413921fb 	.word	0x413921fb
 80051c8:	3fe00000 	.word	0x3fe00000
 80051cc:	08005eb8 	.word	0x08005eb8
 80051d0:	7fefffff 	.word	0x7fefffff
 80051d4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80051d8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80051dc:	ee10 0a10 	vmov	r0, s0
 80051e0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80051e4:	ee10 6a10 	vmov	r6, s0
 80051e8:	460f      	mov	r7, r1
 80051ea:	f7fb fc43 	bl	8000a74 <__aeabi_d2iz>
 80051ee:	f7fb f93d 	bl	800046c <__aeabi_i2d>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	4630      	mov	r0, r6
 80051f8:	4639      	mov	r1, r7
 80051fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80051fe:	f7fa ffe7 	bl	80001d0 <__aeabi_dsub>
 8005202:	4b23      	ldr	r3, [pc, #140]	; (8005290 <__ieee754_rem_pio2+0x410>)
 8005204:	2200      	movs	r2, #0
 8005206:	f7fb f99b 	bl	8000540 <__aeabi_dmul>
 800520a:	460f      	mov	r7, r1
 800520c:	4606      	mov	r6, r0
 800520e:	f7fb fc31 	bl	8000a74 <__aeabi_d2iz>
 8005212:	f7fb f92b 	bl	800046c <__aeabi_i2d>
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	4630      	mov	r0, r6
 800521c:	4639      	mov	r1, r7
 800521e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005222:	f7fa ffd5 	bl	80001d0 <__aeabi_dsub>
 8005226:	4b1a      	ldr	r3, [pc, #104]	; (8005290 <__ieee754_rem_pio2+0x410>)
 8005228:	2200      	movs	r2, #0
 800522a:	f7fb f989 	bl	8000540 <__aeabi_dmul>
 800522e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005232:	ad04      	add	r5, sp, #16
 8005234:	f04f 0803 	mov.w	r8, #3
 8005238:	46a9      	mov	r9, r5
 800523a:	2600      	movs	r6, #0
 800523c:	2700      	movs	r7, #0
 800523e:	4632      	mov	r2, r6
 8005240:	463b      	mov	r3, r7
 8005242:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8005246:	46c3      	mov	fp, r8
 8005248:	3d08      	subs	r5, #8
 800524a:	f108 38ff 	add.w	r8, r8, #4294967295
 800524e:	f7fb fbdf 	bl	8000a10 <__aeabi_dcmpeq>
 8005252:	2800      	cmp	r0, #0
 8005254:	d1f3      	bne.n	800523e <__ieee754_rem_pio2+0x3be>
 8005256:	4b0f      	ldr	r3, [pc, #60]	; (8005294 <__ieee754_rem_pio2+0x414>)
 8005258:	9301      	str	r3, [sp, #4]
 800525a:	2302      	movs	r3, #2
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	4622      	mov	r2, r4
 8005260:	465b      	mov	r3, fp
 8005262:	4651      	mov	r1, sl
 8005264:	4648      	mov	r0, r9
 8005266:	f000 f8df 	bl	8005428 <__kernel_rem_pio2>
 800526a:	9b02      	ldr	r3, [sp, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	4683      	mov	fp, r0
 8005270:	f6bf ae46 	bge.w	8004f00 <__ieee754_rem_pio2+0x80>
 8005274:	e9da 2100 	ldrd	r2, r1, [sl]
 8005278:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800527c:	e9ca 2300 	strd	r2, r3, [sl]
 8005280:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005284:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005288:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800528c:	e73a      	b.n	8005104 <__ieee754_rem_pio2+0x284>
 800528e:	bf00      	nop
 8005290:	41700000 	.word	0x41700000
 8005294:	08005f38 	.word	0x08005f38

08005298 <__kernel_cos>:
 8005298:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529c:	ec57 6b10 	vmov	r6, r7, d0
 80052a0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80052a4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80052a8:	ed8d 1b00 	vstr	d1, [sp]
 80052ac:	da07      	bge.n	80052be <__kernel_cos+0x26>
 80052ae:	ee10 0a10 	vmov	r0, s0
 80052b2:	4639      	mov	r1, r7
 80052b4:	f7fb fbde 	bl	8000a74 <__aeabi_d2iz>
 80052b8:	2800      	cmp	r0, #0
 80052ba:	f000 8088 	beq.w	80053ce <__kernel_cos+0x136>
 80052be:	4632      	mov	r2, r6
 80052c0:	463b      	mov	r3, r7
 80052c2:	4630      	mov	r0, r6
 80052c4:	4639      	mov	r1, r7
 80052c6:	f7fb f93b 	bl	8000540 <__aeabi_dmul>
 80052ca:	4b51      	ldr	r3, [pc, #324]	; (8005410 <__kernel_cos+0x178>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	4604      	mov	r4, r0
 80052d0:	460d      	mov	r5, r1
 80052d2:	f7fb f935 	bl	8000540 <__aeabi_dmul>
 80052d6:	a340      	add	r3, pc, #256	; (adr r3, 80053d8 <__kernel_cos+0x140>)
 80052d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052dc:	4682      	mov	sl, r0
 80052de:	468b      	mov	fp, r1
 80052e0:	4620      	mov	r0, r4
 80052e2:	4629      	mov	r1, r5
 80052e4:	f7fb f92c 	bl	8000540 <__aeabi_dmul>
 80052e8:	a33d      	add	r3, pc, #244	; (adr r3, 80053e0 <__kernel_cos+0x148>)
 80052ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ee:	f7fa ff71 	bl	80001d4 <__adddf3>
 80052f2:	4622      	mov	r2, r4
 80052f4:	462b      	mov	r3, r5
 80052f6:	f7fb f923 	bl	8000540 <__aeabi_dmul>
 80052fa:	a33b      	add	r3, pc, #236	; (adr r3, 80053e8 <__kernel_cos+0x150>)
 80052fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005300:	f7fa ff66 	bl	80001d0 <__aeabi_dsub>
 8005304:	4622      	mov	r2, r4
 8005306:	462b      	mov	r3, r5
 8005308:	f7fb f91a 	bl	8000540 <__aeabi_dmul>
 800530c:	a338      	add	r3, pc, #224	; (adr r3, 80053f0 <__kernel_cos+0x158>)
 800530e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005312:	f7fa ff5f 	bl	80001d4 <__adddf3>
 8005316:	4622      	mov	r2, r4
 8005318:	462b      	mov	r3, r5
 800531a:	f7fb f911 	bl	8000540 <__aeabi_dmul>
 800531e:	a336      	add	r3, pc, #216	; (adr r3, 80053f8 <__kernel_cos+0x160>)
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	f7fa ff54 	bl	80001d0 <__aeabi_dsub>
 8005328:	4622      	mov	r2, r4
 800532a:	462b      	mov	r3, r5
 800532c:	f7fb f908 	bl	8000540 <__aeabi_dmul>
 8005330:	a333      	add	r3, pc, #204	; (adr r3, 8005400 <__kernel_cos+0x168>)
 8005332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005336:	f7fa ff4d 	bl	80001d4 <__adddf3>
 800533a:	4622      	mov	r2, r4
 800533c:	462b      	mov	r3, r5
 800533e:	f7fb f8ff 	bl	8000540 <__aeabi_dmul>
 8005342:	4622      	mov	r2, r4
 8005344:	462b      	mov	r3, r5
 8005346:	f7fb f8fb 	bl	8000540 <__aeabi_dmul>
 800534a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800534e:	4604      	mov	r4, r0
 8005350:	460d      	mov	r5, r1
 8005352:	4630      	mov	r0, r6
 8005354:	4639      	mov	r1, r7
 8005356:	f7fb f8f3 	bl	8000540 <__aeabi_dmul>
 800535a:	460b      	mov	r3, r1
 800535c:	4602      	mov	r2, r0
 800535e:	4629      	mov	r1, r5
 8005360:	4620      	mov	r0, r4
 8005362:	f7fa ff35 	bl	80001d0 <__aeabi_dsub>
 8005366:	4b2b      	ldr	r3, [pc, #172]	; (8005414 <__kernel_cos+0x17c>)
 8005368:	4598      	cmp	r8, r3
 800536a:	4606      	mov	r6, r0
 800536c:	460f      	mov	r7, r1
 800536e:	dc10      	bgt.n	8005392 <__kernel_cos+0xfa>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4650      	mov	r0, sl
 8005376:	4659      	mov	r1, fp
 8005378:	f7fa ff2a 	bl	80001d0 <__aeabi_dsub>
 800537c:	460b      	mov	r3, r1
 800537e:	4926      	ldr	r1, [pc, #152]	; (8005418 <__kernel_cos+0x180>)
 8005380:	4602      	mov	r2, r0
 8005382:	2000      	movs	r0, #0
 8005384:	f7fa ff24 	bl	80001d0 <__aeabi_dsub>
 8005388:	ec41 0b10 	vmov	d0, r0, r1
 800538c:	b003      	add	sp, #12
 800538e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005392:	4b22      	ldr	r3, [pc, #136]	; (800541c <__kernel_cos+0x184>)
 8005394:	4920      	ldr	r1, [pc, #128]	; (8005418 <__kernel_cos+0x180>)
 8005396:	4598      	cmp	r8, r3
 8005398:	bfcc      	ite	gt
 800539a:	4d21      	ldrgt	r5, [pc, #132]	; (8005420 <__kernel_cos+0x188>)
 800539c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80053a0:	2400      	movs	r4, #0
 80053a2:	4622      	mov	r2, r4
 80053a4:	462b      	mov	r3, r5
 80053a6:	2000      	movs	r0, #0
 80053a8:	f7fa ff12 	bl	80001d0 <__aeabi_dsub>
 80053ac:	4622      	mov	r2, r4
 80053ae:	4680      	mov	r8, r0
 80053b0:	4689      	mov	r9, r1
 80053b2:	462b      	mov	r3, r5
 80053b4:	4650      	mov	r0, sl
 80053b6:	4659      	mov	r1, fp
 80053b8:	f7fa ff0a 	bl	80001d0 <__aeabi_dsub>
 80053bc:	4632      	mov	r2, r6
 80053be:	463b      	mov	r3, r7
 80053c0:	f7fa ff06 	bl	80001d0 <__aeabi_dsub>
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4640      	mov	r0, r8
 80053ca:	4649      	mov	r1, r9
 80053cc:	e7da      	b.n	8005384 <__kernel_cos+0xec>
 80053ce:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005408 <__kernel_cos+0x170>
 80053d2:	e7db      	b.n	800538c <__kernel_cos+0xf4>
 80053d4:	f3af 8000 	nop.w
 80053d8:	be8838d4 	.word	0xbe8838d4
 80053dc:	bda8fae9 	.word	0xbda8fae9
 80053e0:	bdb4b1c4 	.word	0xbdb4b1c4
 80053e4:	3e21ee9e 	.word	0x3e21ee9e
 80053e8:	809c52ad 	.word	0x809c52ad
 80053ec:	3e927e4f 	.word	0x3e927e4f
 80053f0:	19cb1590 	.word	0x19cb1590
 80053f4:	3efa01a0 	.word	0x3efa01a0
 80053f8:	16c15177 	.word	0x16c15177
 80053fc:	3f56c16c 	.word	0x3f56c16c
 8005400:	5555554c 	.word	0x5555554c
 8005404:	3fa55555 	.word	0x3fa55555
 8005408:	00000000 	.word	0x00000000
 800540c:	3ff00000 	.word	0x3ff00000
 8005410:	3fe00000 	.word	0x3fe00000
 8005414:	3fd33332 	.word	0x3fd33332
 8005418:	3ff00000 	.word	0x3ff00000
 800541c:	3fe90000 	.word	0x3fe90000
 8005420:	3fd20000 	.word	0x3fd20000
 8005424:	00000000 	.word	0x00000000

08005428 <__kernel_rem_pio2>:
 8005428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800542c:	ed2d 8b02 	vpush	{d8}
 8005430:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8005434:	f112 0f14 	cmn.w	r2, #20
 8005438:	9308      	str	r3, [sp, #32]
 800543a:	9101      	str	r1, [sp, #4]
 800543c:	4bc4      	ldr	r3, [pc, #784]	; (8005750 <__kernel_rem_pio2+0x328>)
 800543e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005440:	900b      	str	r0, [sp, #44]	; 0x2c
 8005442:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005446:	9302      	str	r3, [sp, #8]
 8005448:	9b08      	ldr	r3, [sp, #32]
 800544a:	f103 33ff 	add.w	r3, r3, #4294967295
 800544e:	bfa8      	it	ge
 8005450:	1ed4      	subge	r4, r2, #3
 8005452:	9306      	str	r3, [sp, #24]
 8005454:	bfb2      	itee	lt
 8005456:	2400      	movlt	r4, #0
 8005458:	2318      	movge	r3, #24
 800545a:	fb94 f4f3 	sdivge	r4, r4, r3
 800545e:	f06f 0317 	mvn.w	r3, #23
 8005462:	fb04 3303 	mla	r3, r4, r3, r3
 8005466:	eb03 0a02 	add.w	sl, r3, r2
 800546a:	9b02      	ldr	r3, [sp, #8]
 800546c:	9a06      	ldr	r2, [sp, #24]
 800546e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8005740 <__kernel_rem_pio2+0x318>
 8005472:	eb03 0802 	add.w	r8, r3, r2
 8005476:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005478:	1aa7      	subs	r7, r4, r2
 800547a:	ae22      	add	r6, sp, #136	; 0x88
 800547c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005480:	2500      	movs	r5, #0
 8005482:	4545      	cmp	r5, r8
 8005484:	dd13      	ble.n	80054ae <__kernel_rem_pio2+0x86>
 8005486:	9b08      	ldr	r3, [sp, #32]
 8005488:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8005740 <__kernel_rem_pio2+0x318>
 800548c:	aa22      	add	r2, sp, #136	; 0x88
 800548e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005492:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8005496:	f04f 0800 	mov.w	r8, #0
 800549a:	9b02      	ldr	r3, [sp, #8]
 800549c:	4598      	cmp	r8, r3
 800549e:	dc2f      	bgt.n	8005500 <__kernel_rem_pio2+0xd8>
 80054a0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80054a4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80054a8:	462f      	mov	r7, r5
 80054aa:	2600      	movs	r6, #0
 80054ac:	e01b      	b.n	80054e6 <__kernel_rem_pio2+0xbe>
 80054ae:	42ef      	cmn	r7, r5
 80054b0:	d407      	bmi.n	80054c2 <__kernel_rem_pio2+0x9a>
 80054b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80054b6:	f7fa ffd9 	bl	800046c <__aeabi_i2d>
 80054ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 80054be:	3501      	adds	r5, #1
 80054c0:	e7df      	b.n	8005482 <__kernel_rem_pio2+0x5a>
 80054c2:	ec51 0b18 	vmov	r0, r1, d8
 80054c6:	e7f8      	b.n	80054ba <__kernel_rem_pio2+0x92>
 80054c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80054d0:	f7fb f836 	bl	8000540 <__aeabi_dmul>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054dc:	f7fa fe7a 	bl	80001d4 <__adddf3>
 80054e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054e4:	3601      	adds	r6, #1
 80054e6:	9b06      	ldr	r3, [sp, #24]
 80054e8:	429e      	cmp	r6, r3
 80054ea:	f1a7 0708 	sub.w	r7, r7, #8
 80054ee:	ddeb      	ble.n	80054c8 <__kernel_rem_pio2+0xa0>
 80054f0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80054f4:	f108 0801 	add.w	r8, r8, #1
 80054f8:	ecab 7b02 	vstmia	fp!, {d7}
 80054fc:	3508      	adds	r5, #8
 80054fe:	e7cc      	b.n	800549a <__kernel_rem_pio2+0x72>
 8005500:	9b02      	ldr	r3, [sp, #8]
 8005502:	aa0e      	add	r2, sp, #56	; 0x38
 8005504:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005508:	930d      	str	r3, [sp, #52]	; 0x34
 800550a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800550c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005510:	9c02      	ldr	r4, [sp, #8]
 8005512:	930c      	str	r3, [sp, #48]	; 0x30
 8005514:	00e3      	lsls	r3, r4, #3
 8005516:	930a      	str	r3, [sp, #40]	; 0x28
 8005518:	ab9a      	add	r3, sp, #616	; 0x268
 800551a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800551e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005522:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8005526:	ab72      	add	r3, sp, #456	; 0x1c8
 8005528:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800552c:	46c3      	mov	fp, r8
 800552e:	46a1      	mov	r9, r4
 8005530:	f1b9 0f00 	cmp.w	r9, #0
 8005534:	f1a5 0508 	sub.w	r5, r5, #8
 8005538:	dc77      	bgt.n	800562a <__kernel_rem_pio2+0x202>
 800553a:	ec47 6b10 	vmov	d0, r6, r7
 800553e:	4650      	mov	r0, sl
 8005540:	f000 fc0a 	bl	8005d58 <scalbn>
 8005544:	ec57 6b10 	vmov	r6, r7, d0
 8005548:	2200      	movs	r2, #0
 800554a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800554e:	ee10 0a10 	vmov	r0, s0
 8005552:	4639      	mov	r1, r7
 8005554:	f7fa fff4 	bl	8000540 <__aeabi_dmul>
 8005558:	ec41 0b10 	vmov	d0, r0, r1
 800555c:	f000 fb7c 	bl	8005c58 <floor>
 8005560:	4b7c      	ldr	r3, [pc, #496]	; (8005754 <__kernel_rem_pio2+0x32c>)
 8005562:	ec51 0b10 	vmov	r0, r1, d0
 8005566:	2200      	movs	r2, #0
 8005568:	f7fa ffea 	bl	8000540 <__aeabi_dmul>
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	4630      	mov	r0, r6
 8005572:	4639      	mov	r1, r7
 8005574:	f7fa fe2c 	bl	80001d0 <__aeabi_dsub>
 8005578:	460f      	mov	r7, r1
 800557a:	4606      	mov	r6, r0
 800557c:	f7fb fa7a 	bl	8000a74 <__aeabi_d2iz>
 8005580:	9004      	str	r0, [sp, #16]
 8005582:	f7fa ff73 	bl	800046c <__aeabi_i2d>
 8005586:	4602      	mov	r2, r0
 8005588:	460b      	mov	r3, r1
 800558a:	4630      	mov	r0, r6
 800558c:	4639      	mov	r1, r7
 800558e:	f7fa fe1f 	bl	80001d0 <__aeabi_dsub>
 8005592:	f1ba 0f00 	cmp.w	sl, #0
 8005596:	4606      	mov	r6, r0
 8005598:	460f      	mov	r7, r1
 800559a:	dd6d      	ble.n	8005678 <__kernel_rem_pio2+0x250>
 800559c:	1e62      	subs	r2, r4, #1
 800559e:	ab0e      	add	r3, sp, #56	; 0x38
 80055a0:	9d04      	ldr	r5, [sp, #16]
 80055a2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80055a6:	f1ca 0118 	rsb	r1, sl, #24
 80055aa:	fa40 f301 	asr.w	r3, r0, r1
 80055ae:	441d      	add	r5, r3
 80055b0:	408b      	lsls	r3, r1
 80055b2:	1ac0      	subs	r0, r0, r3
 80055b4:	ab0e      	add	r3, sp, #56	; 0x38
 80055b6:	9504      	str	r5, [sp, #16]
 80055b8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80055bc:	f1ca 0317 	rsb	r3, sl, #23
 80055c0:	fa40 fb03 	asr.w	fp, r0, r3
 80055c4:	f1bb 0f00 	cmp.w	fp, #0
 80055c8:	dd65      	ble.n	8005696 <__kernel_rem_pio2+0x26e>
 80055ca:	9b04      	ldr	r3, [sp, #16]
 80055cc:	2200      	movs	r2, #0
 80055ce:	3301      	adds	r3, #1
 80055d0:	9304      	str	r3, [sp, #16]
 80055d2:	4615      	mov	r5, r2
 80055d4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80055d8:	4294      	cmp	r4, r2
 80055da:	f300 809c 	bgt.w	8005716 <__kernel_rem_pio2+0x2ee>
 80055de:	f1ba 0f00 	cmp.w	sl, #0
 80055e2:	dd07      	ble.n	80055f4 <__kernel_rem_pio2+0x1cc>
 80055e4:	f1ba 0f01 	cmp.w	sl, #1
 80055e8:	f000 80c0 	beq.w	800576c <__kernel_rem_pio2+0x344>
 80055ec:	f1ba 0f02 	cmp.w	sl, #2
 80055f0:	f000 80c6 	beq.w	8005780 <__kernel_rem_pio2+0x358>
 80055f4:	f1bb 0f02 	cmp.w	fp, #2
 80055f8:	d14d      	bne.n	8005696 <__kernel_rem_pio2+0x26e>
 80055fa:	4632      	mov	r2, r6
 80055fc:	463b      	mov	r3, r7
 80055fe:	4956      	ldr	r1, [pc, #344]	; (8005758 <__kernel_rem_pio2+0x330>)
 8005600:	2000      	movs	r0, #0
 8005602:	f7fa fde5 	bl	80001d0 <__aeabi_dsub>
 8005606:	4606      	mov	r6, r0
 8005608:	460f      	mov	r7, r1
 800560a:	2d00      	cmp	r5, #0
 800560c:	d043      	beq.n	8005696 <__kernel_rem_pio2+0x26e>
 800560e:	4650      	mov	r0, sl
 8005610:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8005748 <__kernel_rem_pio2+0x320>
 8005614:	f000 fba0 	bl	8005d58 <scalbn>
 8005618:	4630      	mov	r0, r6
 800561a:	4639      	mov	r1, r7
 800561c:	ec53 2b10 	vmov	r2, r3, d0
 8005620:	f7fa fdd6 	bl	80001d0 <__aeabi_dsub>
 8005624:	4606      	mov	r6, r0
 8005626:	460f      	mov	r7, r1
 8005628:	e035      	b.n	8005696 <__kernel_rem_pio2+0x26e>
 800562a:	4b4c      	ldr	r3, [pc, #304]	; (800575c <__kernel_rem_pio2+0x334>)
 800562c:	2200      	movs	r2, #0
 800562e:	4630      	mov	r0, r6
 8005630:	4639      	mov	r1, r7
 8005632:	f7fa ff85 	bl	8000540 <__aeabi_dmul>
 8005636:	f7fb fa1d 	bl	8000a74 <__aeabi_d2iz>
 800563a:	f7fa ff17 	bl	800046c <__aeabi_i2d>
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	ec43 2b18 	vmov	d8, r2, r3
 8005646:	4b46      	ldr	r3, [pc, #280]	; (8005760 <__kernel_rem_pio2+0x338>)
 8005648:	2200      	movs	r2, #0
 800564a:	f7fa ff79 	bl	8000540 <__aeabi_dmul>
 800564e:	4602      	mov	r2, r0
 8005650:	460b      	mov	r3, r1
 8005652:	4630      	mov	r0, r6
 8005654:	4639      	mov	r1, r7
 8005656:	f7fa fdbb 	bl	80001d0 <__aeabi_dsub>
 800565a:	f7fb fa0b 	bl	8000a74 <__aeabi_d2iz>
 800565e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005662:	f84b 0b04 	str.w	r0, [fp], #4
 8005666:	ec51 0b18 	vmov	r0, r1, d8
 800566a:	f7fa fdb3 	bl	80001d4 <__adddf3>
 800566e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005672:	4606      	mov	r6, r0
 8005674:	460f      	mov	r7, r1
 8005676:	e75b      	b.n	8005530 <__kernel_rem_pio2+0x108>
 8005678:	d106      	bne.n	8005688 <__kernel_rem_pio2+0x260>
 800567a:	1e63      	subs	r3, r4, #1
 800567c:	aa0e      	add	r2, sp, #56	; 0x38
 800567e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005682:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8005686:	e79d      	b.n	80055c4 <__kernel_rem_pio2+0x19c>
 8005688:	4b36      	ldr	r3, [pc, #216]	; (8005764 <__kernel_rem_pio2+0x33c>)
 800568a:	2200      	movs	r2, #0
 800568c:	f7fb f9de 	bl	8000a4c <__aeabi_dcmpge>
 8005690:	2800      	cmp	r0, #0
 8005692:	d13d      	bne.n	8005710 <__kernel_rem_pio2+0x2e8>
 8005694:	4683      	mov	fp, r0
 8005696:	2200      	movs	r2, #0
 8005698:	2300      	movs	r3, #0
 800569a:	4630      	mov	r0, r6
 800569c:	4639      	mov	r1, r7
 800569e:	f7fb f9b7 	bl	8000a10 <__aeabi_dcmpeq>
 80056a2:	2800      	cmp	r0, #0
 80056a4:	f000 80c0 	beq.w	8005828 <__kernel_rem_pio2+0x400>
 80056a8:	1e65      	subs	r5, r4, #1
 80056aa:	462b      	mov	r3, r5
 80056ac:	2200      	movs	r2, #0
 80056ae:	9902      	ldr	r1, [sp, #8]
 80056b0:	428b      	cmp	r3, r1
 80056b2:	da6c      	bge.n	800578e <__kernel_rem_pio2+0x366>
 80056b4:	2a00      	cmp	r2, #0
 80056b6:	f000 8089 	beq.w	80057cc <__kernel_rem_pio2+0x3a4>
 80056ba:	ab0e      	add	r3, sp, #56	; 0x38
 80056bc:	f1aa 0a18 	sub.w	sl, sl, #24
 80056c0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 80ad 	beq.w	8005824 <__kernel_rem_pio2+0x3fc>
 80056ca:	4650      	mov	r0, sl
 80056cc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8005748 <__kernel_rem_pio2+0x320>
 80056d0:	f000 fb42 	bl	8005d58 <scalbn>
 80056d4:	ab9a      	add	r3, sp, #616	; 0x268
 80056d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80056da:	ec57 6b10 	vmov	r6, r7, d0
 80056de:	00ec      	lsls	r4, r5, #3
 80056e0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80056e4:	46aa      	mov	sl, r5
 80056e6:	f1ba 0f00 	cmp.w	sl, #0
 80056ea:	f280 80d6 	bge.w	800589a <__kernel_rem_pio2+0x472>
 80056ee:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8005740 <__kernel_rem_pio2+0x318>
 80056f2:	462e      	mov	r6, r5
 80056f4:	2e00      	cmp	r6, #0
 80056f6:	f2c0 8104 	blt.w	8005902 <__kernel_rem_pio2+0x4da>
 80056fa:	ab72      	add	r3, sp, #456	; 0x1c8
 80056fc:	ed8d 8b06 	vstr	d8, [sp, #24]
 8005700:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005768 <__kernel_rem_pio2+0x340>
 8005704:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8005708:	f04f 0800 	mov.w	r8, #0
 800570c:	1baf      	subs	r7, r5, r6
 800570e:	e0ea      	b.n	80058e6 <__kernel_rem_pio2+0x4be>
 8005710:	f04f 0b02 	mov.w	fp, #2
 8005714:	e759      	b.n	80055ca <__kernel_rem_pio2+0x1a2>
 8005716:	f8d8 3000 	ldr.w	r3, [r8]
 800571a:	b955      	cbnz	r5, 8005732 <__kernel_rem_pio2+0x30a>
 800571c:	b123      	cbz	r3, 8005728 <__kernel_rem_pio2+0x300>
 800571e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005722:	f8c8 3000 	str.w	r3, [r8]
 8005726:	2301      	movs	r3, #1
 8005728:	3201      	adds	r2, #1
 800572a:	f108 0804 	add.w	r8, r8, #4
 800572e:	461d      	mov	r5, r3
 8005730:	e752      	b.n	80055d8 <__kernel_rem_pio2+0x1b0>
 8005732:	1acb      	subs	r3, r1, r3
 8005734:	f8c8 3000 	str.w	r3, [r8]
 8005738:	462b      	mov	r3, r5
 800573a:	e7f5      	b.n	8005728 <__kernel_rem_pio2+0x300>
 800573c:	f3af 8000 	nop.w
	...
 800574c:	3ff00000 	.word	0x3ff00000
 8005750:	08006080 	.word	0x08006080
 8005754:	40200000 	.word	0x40200000
 8005758:	3ff00000 	.word	0x3ff00000
 800575c:	3e700000 	.word	0x3e700000
 8005760:	41700000 	.word	0x41700000
 8005764:	3fe00000 	.word	0x3fe00000
 8005768:	08006040 	.word	0x08006040
 800576c:	1e62      	subs	r2, r4, #1
 800576e:	ab0e      	add	r3, sp, #56	; 0x38
 8005770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005774:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005778:	a90e      	add	r1, sp, #56	; 0x38
 800577a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800577e:	e739      	b.n	80055f4 <__kernel_rem_pio2+0x1cc>
 8005780:	1e62      	subs	r2, r4, #1
 8005782:	ab0e      	add	r3, sp, #56	; 0x38
 8005784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005788:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800578c:	e7f4      	b.n	8005778 <__kernel_rem_pio2+0x350>
 800578e:	a90e      	add	r1, sp, #56	; 0x38
 8005790:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005794:	3b01      	subs	r3, #1
 8005796:	430a      	orrs	r2, r1
 8005798:	e789      	b.n	80056ae <__kernel_rem_pio2+0x286>
 800579a:	3301      	adds	r3, #1
 800579c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80057a0:	2900      	cmp	r1, #0
 80057a2:	d0fa      	beq.n	800579a <__kernel_rem_pio2+0x372>
 80057a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057a6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80057aa:	446a      	add	r2, sp
 80057ac:	3a98      	subs	r2, #152	; 0x98
 80057ae:	920a      	str	r2, [sp, #40]	; 0x28
 80057b0:	9a08      	ldr	r2, [sp, #32]
 80057b2:	18e3      	adds	r3, r4, r3
 80057b4:	18a5      	adds	r5, r4, r2
 80057b6:	aa22      	add	r2, sp, #136	; 0x88
 80057b8:	f104 0801 	add.w	r8, r4, #1
 80057bc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80057c0:	9304      	str	r3, [sp, #16]
 80057c2:	9b04      	ldr	r3, [sp, #16]
 80057c4:	4543      	cmp	r3, r8
 80057c6:	da04      	bge.n	80057d2 <__kernel_rem_pio2+0x3aa>
 80057c8:	461c      	mov	r4, r3
 80057ca:	e6a3      	b.n	8005514 <__kernel_rem_pio2+0xec>
 80057cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80057ce:	2301      	movs	r3, #1
 80057d0:	e7e4      	b.n	800579c <__kernel_rem_pio2+0x374>
 80057d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057d4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80057d8:	f7fa fe48 	bl	800046c <__aeabi_i2d>
 80057dc:	e8e5 0102 	strd	r0, r1, [r5], #8
 80057e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057e2:	46ab      	mov	fp, r5
 80057e4:	461c      	mov	r4, r3
 80057e6:	f04f 0900 	mov.w	r9, #0
 80057ea:	2600      	movs	r6, #0
 80057ec:	2700      	movs	r7, #0
 80057ee:	9b06      	ldr	r3, [sp, #24]
 80057f0:	4599      	cmp	r9, r3
 80057f2:	dd06      	ble.n	8005802 <__kernel_rem_pio2+0x3da>
 80057f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057f6:	e8e3 6702 	strd	r6, r7, [r3], #8
 80057fa:	f108 0801 	add.w	r8, r8, #1
 80057fe:	930a      	str	r3, [sp, #40]	; 0x28
 8005800:	e7df      	b.n	80057c2 <__kernel_rem_pio2+0x39a>
 8005802:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005806:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800580a:	f7fa fe99 	bl	8000540 <__aeabi_dmul>
 800580e:	4602      	mov	r2, r0
 8005810:	460b      	mov	r3, r1
 8005812:	4630      	mov	r0, r6
 8005814:	4639      	mov	r1, r7
 8005816:	f7fa fcdd 	bl	80001d4 <__adddf3>
 800581a:	f109 0901 	add.w	r9, r9, #1
 800581e:	4606      	mov	r6, r0
 8005820:	460f      	mov	r7, r1
 8005822:	e7e4      	b.n	80057ee <__kernel_rem_pio2+0x3c6>
 8005824:	3d01      	subs	r5, #1
 8005826:	e748      	b.n	80056ba <__kernel_rem_pio2+0x292>
 8005828:	ec47 6b10 	vmov	d0, r6, r7
 800582c:	f1ca 0000 	rsb	r0, sl, #0
 8005830:	f000 fa92 	bl	8005d58 <scalbn>
 8005834:	ec57 6b10 	vmov	r6, r7, d0
 8005838:	4ba0      	ldr	r3, [pc, #640]	; (8005abc <__kernel_rem_pio2+0x694>)
 800583a:	ee10 0a10 	vmov	r0, s0
 800583e:	2200      	movs	r2, #0
 8005840:	4639      	mov	r1, r7
 8005842:	f7fb f903 	bl	8000a4c <__aeabi_dcmpge>
 8005846:	b1f8      	cbz	r0, 8005888 <__kernel_rem_pio2+0x460>
 8005848:	4b9d      	ldr	r3, [pc, #628]	; (8005ac0 <__kernel_rem_pio2+0x698>)
 800584a:	2200      	movs	r2, #0
 800584c:	4630      	mov	r0, r6
 800584e:	4639      	mov	r1, r7
 8005850:	f7fa fe76 	bl	8000540 <__aeabi_dmul>
 8005854:	f7fb f90e 	bl	8000a74 <__aeabi_d2iz>
 8005858:	4680      	mov	r8, r0
 800585a:	f7fa fe07 	bl	800046c <__aeabi_i2d>
 800585e:	4b97      	ldr	r3, [pc, #604]	; (8005abc <__kernel_rem_pio2+0x694>)
 8005860:	2200      	movs	r2, #0
 8005862:	f7fa fe6d 	bl	8000540 <__aeabi_dmul>
 8005866:	460b      	mov	r3, r1
 8005868:	4602      	mov	r2, r0
 800586a:	4639      	mov	r1, r7
 800586c:	4630      	mov	r0, r6
 800586e:	f7fa fcaf 	bl	80001d0 <__aeabi_dsub>
 8005872:	f7fb f8ff 	bl	8000a74 <__aeabi_d2iz>
 8005876:	1c65      	adds	r5, r4, #1
 8005878:	ab0e      	add	r3, sp, #56	; 0x38
 800587a:	f10a 0a18 	add.w	sl, sl, #24
 800587e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005882:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005886:	e720      	b.n	80056ca <__kernel_rem_pio2+0x2a2>
 8005888:	4630      	mov	r0, r6
 800588a:	4639      	mov	r1, r7
 800588c:	f7fb f8f2 	bl	8000a74 <__aeabi_d2iz>
 8005890:	ab0e      	add	r3, sp, #56	; 0x38
 8005892:	4625      	mov	r5, r4
 8005894:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005898:	e717      	b.n	80056ca <__kernel_rem_pio2+0x2a2>
 800589a:	ab0e      	add	r3, sp, #56	; 0x38
 800589c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80058a0:	f7fa fde4 	bl	800046c <__aeabi_i2d>
 80058a4:	4632      	mov	r2, r6
 80058a6:	463b      	mov	r3, r7
 80058a8:	f7fa fe4a 	bl	8000540 <__aeabi_dmul>
 80058ac:	4b84      	ldr	r3, [pc, #528]	; (8005ac0 <__kernel_rem_pio2+0x698>)
 80058ae:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80058b2:	2200      	movs	r2, #0
 80058b4:	4630      	mov	r0, r6
 80058b6:	4639      	mov	r1, r7
 80058b8:	f7fa fe42 	bl	8000540 <__aeabi_dmul>
 80058bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058c0:	4606      	mov	r6, r0
 80058c2:	460f      	mov	r7, r1
 80058c4:	e70f      	b.n	80056e6 <__kernel_rem_pio2+0x2be>
 80058c6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80058ca:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80058ce:	f7fa fe37 	bl	8000540 <__aeabi_dmul>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058da:	f7fa fc7b 	bl	80001d4 <__adddf3>
 80058de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80058e2:	f108 0801 	add.w	r8, r8, #1
 80058e6:	9b02      	ldr	r3, [sp, #8]
 80058e8:	4598      	cmp	r8, r3
 80058ea:	dc01      	bgt.n	80058f0 <__kernel_rem_pio2+0x4c8>
 80058ec:	45b8      	cmp	r8, r7
 80058ee:	ddea      	ble.n	80058c6 <__kernel_rem_pio2+0x49e>
 80058f0:	ed9d 7b06 	vldr	d7, [sp, #24]
 80058f4:	ab4a      	add	r3, sp, #296	; 0x128
 80058f6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80058fa:	ed87 7b00 	vstr	d7, [r7]
 80058fe:	3e01      	subs	r6, #1
 8005900:	e6f8      	b.n	80056f4 <__kernel_rem_pio2+0x2cc>
 8005902:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005904:	2b02      	cmp	r3, #2
 8005906:	dc0b      	bgt.n	8005920 <__kernel_rem_pio2+0x4f8>
 8005908:	2b00      	cmp	r3, #0
 800590a:	dc35      	bgt.n	8005978 <__kernel_rem_pio2+0x550>
 800590c:	d059      	beq.n	80059c2 <__kernel_rem_pio2+0x59a>
 800590e:	9b04      	ldr	r3, [sp, #16]
 8005910:	f003 0007 	and.w	r0, r3, #7
 8005914:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005918:	ecbd 8b02 	vpop	{d8}
 800591c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005920:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005922:	2b03      	cmp	r3, #3
 8005924:	d1f3      	bne.n	800590e <__kernel_rem_pio2+0x4e6>
 8005926:	ab4a      	add	r3, sp, #296	; 0x128
 8005928:	4423      	add	r3, r4
 800592a:	9306      	str	r3, [sp, #24]
 800592c:	461c      	mov	r4, r3
 800592e:	469a      	mov	sl, r3
 8005930:	9502      	str	r5, [sp, #8]
 8005932:	9b02      	ldr	r3, [sp, #8]
 8005934:	2b00      	cmp	r3, #0
 8005936:	f1aa 0a08 	sub.w	sl, sl, #8
 800593a:	dc6b      	bgt.n	8005a14 <__kernel_rem_pio2+0x5ec>
 800593c:	46aa      	mov	sl, r5
 800593e:	f1ba 0f01 	cmp.w	sl, #1
 8005942:	f1a4 0408 	sub.w	r4, r4, #8
 8005946:	f300 8085 	bgt.w	8005a54 <__kernel_rem_pio2+0x62c>
 800594a:	9c06      	ldr	r4, [sp, #24]
 800594c:	2000      	movs	r0, #0
 800594e:	3408      	adds	r4, #8
 8005950:	2100      	movs	r1, #0
 8005952:	2d01      	cmp	r5, #1
 8005954:	f300 809d 	bgt.w	8005a92 <__kernel_rem_pio2+0x66a>
 8005958:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800595c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8005960:	f1bb 0f00 	cmp.w	fp, #0
 8005964:	f040 809b 	bne.w	8005a9e <__kernel_rem_pio2+0x676>
 8005968:	9b01      	ldr	r3, [sp, #4]
 800596a:	e9c3 5600 	strd	r5, r6, [r3]
 800596e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005972:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005976:	e7ca      	b.n	800590e <__kernel_rem_pio2+0x4e6>
 8005978:	3408      	adds	r4, #8
 800597a:	ab4a      	add	r3, sp, #296	; 0x128
 800597c:	441c      	add	r4, r3
 800597e:	462e      	mov	r6, r5
 8005980:	2000      	movs	r0, #0
 8005982:	2100      	movs	r1, #0
 8005984:	2e00      	cmp	r6, #0
 8005986:	da36      	bge.n	80059f6 <__kernel_rem_pio2+0x5ce>
 8005988:	f1bb 0f00 	cmp.w	fp, #0
 800598c:	d039      	beq.n	8005a02 <__kernel_rem_pio2+0x5da>
 800598e:	4602      	mov	r2, r0
 8005990:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005994:	9c01      	ldr	r4, [sp, #4]
 8005996:	e9c4 2300 	strd	r2, r3, [r4]
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80059a2:	f7fa fc15 	bl	80001d0 <__aeabi_dsub>
 80059a6:	ae4c      	add	r6, sp, #304	; 0x130
 80059a8:	2401      	movs	r4, #1
 80059aa:	42a5      	cmp	r5, r4
 80059ac:	da2c      	bge.n	8005a08 <__kernel_rem_pio2+0x5e0>
 80059ae:	f1bb 0f00 	cmp.w	fp, #0
 80059b2:	d002      	beq.n	80059ba <__kernel_rem_pio2+0x592>
 80059b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059b8:	4619      	mov	r1, r3
 80059ba:	9b01      	ldr	r3, [sp, #4]
 80059bc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80059c0:	e7a5      	b.n	800590e <__kernel_rem_pio2+0x4e6>
 80059c2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80059c6:	eb0d 0403 	add.w	r4, sp, r3
 80059ca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80059ce:	2000      	movs	r0, #0
 80059d0:	2100      	movs	r1, #0
 80059d2:	2d00      	cmp	r5, #0
 80059d4:	da09      	bge.n	80059ea <__kernel_rem_pio2+0x5c2>
 80059d6:	f1bb 0f00 	cmp.w	fp, #0
 80059da:	d002      	beq.n	80059e2 <__kernel_rem_pio2+0x5ba>
 80059dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059e0:	4619      	mov	r1, r3
 80059e2:	9b01      	ldr	r3, [sp, #4]
 80059e4:	e9c3 0100 	strd	r0, r1, [r3]
 80059e8:	e791      	b.n	800590e <__kernel_rem_pio2+0x4e6>
 80059ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80059ee:	f7fa fbf1 	bl	80001d4 <__adddf3>
 80059f2:	3d01      	subs	r5, #1
 80059f4:	e7ed      	b.n	80059d2 <__kernel_rem_pio2+0x5aa>
 80059f6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80059fa:	f7fa fbeb 	bl	80001d4 <__adddf3>
 80059fe:	3e01      	subs	r6, #1
 8005a00:	e7c0      	b.n	8005984 <__kernel_rem_pio2+0x55c>
 8005a02:	4602      	mov	r2, r0
 8005a04:	460b      	mov	r3, r1
 8005a06:	e7c5      	b.n	8005994 <__kernel_rem_pio2+0x56c>
 8005a08:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005a0c:	f7fa fbe2 	bl	80001d4 <__adddf3>
 8005a10:	3401      	adds	r4, #1
 8005a12:	e7ca      	b.n	80059aa <__kernel_rem_pio2+0x582>
 8005a14:	e9da 8900 	ldrd	r8, r9, [sl]
 8005a18:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005a1c:	9b02      	ldr	r3, [sp, #8]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	9302      	str	r3, [sp, #8]
 8005a22:	4632      	mov	r2, r6
 8005a24:	463b      	mov	r3, r7
 8005a26:	4640      	mov	r0, r8
 8005a28:	4649      	mov	r1, r9
 8005a2a:	f7fa fbd3 	bl	80001d4 <__adddf3>
 8005a2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4640      	mov	r0, r8
 8005a38:	4649      	mov	r1, r9
 8005a3a:	f7fa fbc9 	bl	80001d0 <__aeabi_dsub>
 8005a3e:	4632      	mov	r2, r6
 8005a40:	463b      	mov	r3, r7
 8005a42:	f7fa fbc7 	bl	80001d4 <__adddf3>
 8005a46:	ed9d 7b08 	vldr	d7, [sp, #32]
 8005a4a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005a4e:	ed8a 7b00 	vstr	d7, [sl]
 8005a52:	e76e      	b.n	8005932 <__kernel_rem_pio2+0x50a>
 8005a54:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005a58:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8005a5c:	4640      	mov	r0, r8
 8005a5e:	4632      	mov	r2, r6
 8005a60:	463b      	mov	r3, r7
 8005a62:	4649      	mov	r1, r9
 8005a64:	f7fa fbb6 	bl	80001d4 <__adddf3>
 8005a68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4640      	mov	r0, r8
 8005a72:	4649      	mov	r1, r9
 8005a74:	f7fa fbac 	bl	80001d0 <__aeabi_dsub>
 8005a78:	4632      	mov	r2, r6
 8005a7a:	463b      	mov	r3, r7
 8005a7c:	f7fa fbaa 	bl	80001d4 <__adddf3>
 8005a80:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005a84:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005a88:	ed84 7b00 	vstr	d7, [r4]
 8005a8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a90:	e755      	b.n	800593e <__kernel_rem_pio2+0x516>
 8005a92:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005a96:	f7fa fb9d 	bl	80001d4 <__adddf3>
 8005a9a:	3d01      	subs	r5, #1
 8005a9c:	e759      	b.n	8005952 <__kernel_rem_pio2+0x52a>
 8005a9e:	9b01      	ldr	r3, [sp, #4]
 8005aa0:	9a01      	ldr	r2, [sp, #4]
 8005aa2:	601d      	str	r5, [r3, #0]
 8005aa4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005aa8:	605c      	str	r4, [r3, #4]
 8005aaa:	609f      	str	r7, [r3, #8]
 8005aac:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005ab0:	60d3      	str	r3, [r2, #12]
 8005ab2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ab6:	6110      	str	r0, [r2, #16]
 8005ab8:	6153      	str	r3, [r2, #20]
 8005aba:	e728      	b.n	800590e <__kernel_rem_pio2+0x4e6>
 8005abc:	41700000 	.word	0x41700000
 8005ac0:	3e700000 	.word	0x3e700000
 8005ac4:	00000000 	.word	0x00000000

08005ac8 <__kernel_sin>:
 8005ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005acc:	ed2d 8b04 	vpush	{d8-d9}
 8005ad0:	eeb0 8a41 	vmov.f32	s16, s2
 8005ad4:	eef0 8a61 	vmov.f32	s17, s3
 8005ad8:	ec55 4b10 	vmov	r4, r5, d0
 8005adc:	b083      	sub	sp, #12
 8005ade:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005ae2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005ae6:	9001      	str	r0, [sp, #4]
 8005ae8:	da06      	bge.n	8005af8 <__kernel_sin+0x30>
 8005aea:	ee10 0a10 	vmov	r0, s0
 8005aee:	4629      	mov	r1, r5
 8005af0:	f7fa ffc0 	bl	8000a74 <__aeabi_d2iz>
 8005af4:	2800      	cmp	r0, #0
 8005af6:	d051      	beq.n	8005b9c <__kernel_sin+0xd4>
 8005af8:	4622      	mov	r2, r4
 8005afa:	462b      	mov	r3, r5
 8005afc:	4620      	mov	r0, r4
 8005afe:	4629      	mov	r1, r5
 8005b00:	f7fa fd1e 	bl	8000540 <__aeabi_dmul>
 8005b04:	4682      	mov	sl, r0
 8005b06:	468b      	mov	fp, r1
 8005b08:	4602      	mov	r2, r0
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	4629      	mov	r1, r5
 8005b10:	f7fa fd16 	bl	8000540 <__aeabi_dmul>
 8005b14:	a341      	add	r3, pc, #260	; (adr r3, 8005c1c <__kernel_sin+0x154>)
 8005b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1a:	4680      	mov	r8, r0
 8005b1c:	4689      	mov	r9, r1
 8005b1e:	4650      	mov	r0, sl
 8005b20:	4659      	mov	r1, fp
 8005b22:	f7fa fd0d 	bl	8000540 <__aeabi_dmul>
 8005b26:	a33f      	add	r3, pc, #252	; (adr r3, 8005c24 <__kernel_sin+0x15c>)
 8005b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2c:	f7fa fb50 	bl	80001d0 <__aeabi_dsub>
 8005b30:	4652      	mov	r2, sl
 8005b32:	465b      	mov	r3, fp
 8005b34:	f7fa fd04 	bl	8000540 <__aeabi_dmul>
 8005b38:	a33c      	add	r3, pc, #240	; (adr r3, 8005c2c <__kernel_sin+0x164>)
 8005b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3e:	f7fa fb49 	bl	80001d4 <__adddf3>
 8005b42:	4652      	mov	r2, sl
 8005b44:	465b      	mov	r3, fp
 8005b46:	f7fa fcfb 	bl	8000540 <__aeabi_dmul>
 8005b4a:	a33a      	add	r3, pc, #232	; (adr r3, 8005c34 <__kernel_sin+0x16c>)
 8005b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b50:	f7fa fb3e 	bl	80001d0 <__aeabi_dsub>
 8005b54:	4652      	mov	r2, sl
 8005b56:	465b      	mov	r3, fp
 8005b58:	f7fa fcf2 	bl	8000540 <__aeabi_dmul>
 8005b5c:	a337      	add	r3, pc, #220	; (adr r3, 8005c3c <__kernel_sin+0x174>)
 8005b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b62:	f7fa fb37 	bl	80001d4 <__adddf3>
 8005b66:	9b01      	ldr	r3, [sp, #4]
 8005b68:	4606      	mov	r6, r0
 8005b6a:	460f      	mov	r7, r1
 8005b6c:	b9eb      	cbnz	r3, 8005baa <__kernel_sin+0xe2>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	4650      	mov	r0, sl
 8005b74:	4659      	mov	r1, fp
 8005b76:	f7fa fce3 	bl	8000540 <__aeabi_dmul>
 8005b7a:	a325      	add	r3, pc, #148	; (adr r3, 8005c10 <__kernel_sin+0x148>)
 8005b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b80:	f7fa fb26 	bl	80001d0 <__aeabi_dsub>
 8005b84:	4642      	mov	r2, r8
 8005b86:	464b      	mov	r3, r9
 8005b88:	f7fa fcda 	bl	8000540 <__aeabi_dmul>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4620      	mov	r0, r4
 8005b92:	4629      	mov	r1, r5
 8005b94:	f7fa fb1e 	bl	80001d4 <__adddf3>
 8005b98:	4604      	mov	r4, r0
 8005b9a:	460d      	mov	r5, r1
 8005b9c:	ec45 4b10 	vmov	d0, r4, r5
 8005ba0:	b003      	add	sp, #12
 8005ba2:	ecbd 8b04 	vpop	{d8-d9}
 8005ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005baa:	4b1b      	ldr	r3, [pc, #108]	; (8005c18 <__kernel_sin+0x150>)
 8005bac:	ec51 0b18 	vmov	r0, r1, d8
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f7fa fcc5 	bl	8000540 <__aeabi_dmul>
 8005bb6:	4632      	mov	r2, r6
 8005bb8:	ec41 0b19 	vmov	d9, r0, r1
 8005bbc:	463b      	mov	r3, r7
 8005bbe:	4640      	mov	r0, r8
 8005bc0:	4649      	mov	r1, r9
 8005bc2:	f7fa fcbd 	bl	8000540 <__aeabi_dmul>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	ec51 0b19 	vmov	r0, r1, d9
 8005bce:	f7fa faff 	bl	80001d0 <__aeabi_dsub>
 8005bd2:	4652      	mov	r2, sl
 8005bd4:	465b      	mov	r3, fp
 8005bd6:	f7fa fcb3 	bl	8000540 <__aeabi_dmul>
 8005bda:	ec53 2b18 	vmov	r2, r3, d8
 8005bde:	f7fa faf7 	bl	80001d0 <__aeabi_dsub>
 8005be2:	a30b      	add	r3, pc, #44	; (adr r3, 8005c10 <__kernel_sin+0x148>)
 8005be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be8:	4606      	mov	r6, r0
 8005bea:	460f      	mov	r7, r1
 8005bec:	4640      	mov	r0, r8
 8005bee:	4649      	mov	r1, r9
 8005bf0:	f7fa fca6 	bl	8000540 <__aeabi_dmul>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	4639      	mov	r1, r7
 8005bfc:	f7fa faea 	bl	80001d4 <__adddf3>
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	4620      	mov	r0, r4
 8005c06:	4629      	mov	r1, r5
 8005c08:	f7fa fae2 	bl	80001d0 <__aeabi_dsub>
 8005c0c:	e7c4      	b.n	8005b98 <__kernel_sin+0xd0>
 8005c0e:	bf00      	nop
 8005c10:	55555549 	.word	0x55555549
 8005c14:	3fc55555 	.word	0x3fc55555
 8005c18:	3fe00000 	.word	0x3fe00000
 8005c1c:	5acfd57c 	.word	0x5acfd57c
 8005c20:	3de5d93a 	.word	0x3de5d93a
 8005c24:	8a2b9ceb 	.word	0x8a2b9ceb
 8005c28:	3e5ae5e6 	.word	0x3e5ae5e6
 8005c2c:	57b1fe7d 	.word	0x57b1fe7d
 8005c30:	3ec71de3 	.word	0x3ec71de3
 8005c34:	19c161d5 	.word	0x19c161d5
 8005c38:	3f2a01a0 	.word	0x3f2a01a0
 8005c3c:	1110f8a6 	.word	0x1110f8a6
 8005c40:	3f811111 	.word	0x3f811111

08005c44 <fabs>:
 8005c44:	ec51 0b10 	vmov	r0, r1, d0
 8005c48:	ee10 2a10 	vmov	r2, s0
 8005c4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005c50:	ec43 2b10 	vmov	d0, r2, r3
 8005c54:	4770      	bx	lr
	...

08005c58 <floor>:
 8005c58:	ec51 0b10 	vmov	r0, r1, d0
 8005c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c60:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005c64:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005c68:	2e13      	cmp	r6, #19
 8005c6a:	ee10 5a10 	vmov	r5, s0
 8005c6e:	ee10 8a10 	vmov	r8, s0
 8005c72:	460c      	mov	r4, r1
 8005c74:	dc32      	bgt.n	8005cdc <floor+0x84>
 8005c76:	2e00      	cmp	r6, #0
 8005c78:	da14      	bge.n	8005ca4 <floor+0x4c>
 8005c7a:	a333      	add	r3, pc, #204	; (adr r3, 8005d48 <floor+0xf0>)
 8005c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c80:	f7fa faa8 	bl	80001d4 <__adddf3>
 8005c84:	2200      	movs	r2, #0
 8005c86:	2300      	movs	r3, #0
 8005c88:	f7fa feea 	bl	8000a60 <__aeabi_dcmpgt>
 8005c8c:	b138      	cbz	r0, 8005c9e <floor+0x46>
 8005c8e:	2c00      	cmp	r4, #0
 8005c90:	da57      	bge.n	8005d42 <floor+0xea>
 8005c92:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005c96:	431d      	orrs	r5, r3
 8005c98:	d001      	beq.n	8005c9e <floor+0x46>
 8005c9a:	4c2d      	ldr	r4, [pc, #180]	; (8005d50 <floor+0xf8>)
 8005c9c:	2500      	movs	r5, #0
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	e025      	b.n	8005cf0 <floor+0x98>
 8005ca4:	4f2b      	ldr	r7, [pc, #172]	; (8005d54 <floor+0xfc>)
 8005ca6:	4137      	asrs	r7, r6
 8005ca8:	ea01 0307 	and.w	r3, r1, r7
 8005cac:	4303      	orrs	r3, r0
 8005cae:	d01f      	beq.n	8005cf0 <floor+0x98>
 8005cb0:	a325      	add	r3, pc, #148	; (adr r3, 8005d48 <floor+0xf0>)
 8005cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb6:	f7fa fa8d 	bl	80001d4 <__adddf3>
 8005cba:	2200      	movs	r2, #0
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f7fa fecf 	bl	8000a60 <__aeabi_dcmpgt>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d0eb      	beq.n	8005c9e <floor+0x46>
 8005cc6:	2c00      	cmp	r4, #0
 8005cc8:	bfbe      	ittt	lt
 8005cca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005cce:	fa43 f606 	asrlt.w	r6, r3, r6
 8005cd2:	19a4      	addlt	r4, r4, r6
 8005cd4:	ea24 0407 	bic.w	r4, r4, r7
 8005cd8:	2500      	movs	r5, #0
 8005cda:	e7e0      	b.n	8005c9e <floor+0x46>
 8005cdc:	2e33      	cmp	r6, #51	; 0x33
 8005cde:	dd0b      	ble.n	8005cf8 <floor+0xa0>
 8005ce0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005ce4:	d104      	bne.n	8005cf0 <floor+0x98>
 8005ce6:	ee10 2a10 	vmov	r2, s0
 8005cea:	460b      	mov	r3, r1
 8005cec:	f7fa fa72 	bl	80001d4 <__adddf3>
 8005cf0:	ec41 0b10 	vmov	d0, r0, r1
 8005cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cf8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8005d00:	fa23 f707 	lsr.w	r7, r3, r7
 8005d04:	4207      	tst	r7, r0
 8005d06:	d0f3      	beq.n	8005cf0 <floor+0x98>
 8005d08:	a30f      	add	r3, pc, #60	; (adr r3, 8005d48 <floor+0xf0>)
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	f7fa fa61 	bl	80001d4 <__adddf3>
 8005d12:	2200      	movs	r2, #0
 8005d14:	2300      	movs	r3, #0
 8005d16:	f7fa fea3 	bl	8000a60 <__aeabi_dcmpgt>
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	d0bf      	beq.n	8005c9e <floor+0x46>
 8005d1e:	2c00      	cmp	r4, #0
 8005d20:	da02      	bge.n	8005d28 <floor+0xd0>
 8005d22:	2e14      	cmp	r6, #20
 8005d24:	d103      	bne.n	8005d2e <floor+0xd6>
 8005d26:	3401      	adds	r4, #1
 8005d28:	ea25 0507 	bic.w	r5, r5, r7
 8005d2c:	e7b7      	b.n	8005c9e <floor+0x46>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005d34:	fa03 f606 	lsl.w	r6, r3, r6
 8005d38:	4435      	add	r5, r6
 8005d3a:	4545      	cmp	r5, r8
 8005d3c:	bf38      	it	cc
 8005d3e:	18e4      	addcc	r4, r4, r3
 8005d40:	e7f2      	b.n	8005d28 <floor+0xd0>
 8005d42:	2500      	movs	r5, #0
 8005d44:	462c      	mov	r4, r5
 8005d46:	e7aa      	b.n	8005c9e <floor+0x46>
 8005d48:	8800759c 	.word	0x8800759c
 8005d4c:	7e37e43c 	.word	0x7e37e43c
 8005d50:	bff00000 	.word	0xbff00000
 8005d54:	000fffff 	.word	0x000fffff

08005d58 <scalbn>:
 8005d58:	b570      	push	{r4, r5, r6, lr}
 8005d5a:	ec55 4b10 	vmov	r4, r5, d0
 8005d5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005d62:	4606      	mov	r6, r0
 8005d64:	462b      	mov	r3, r5
 8005d66:	b99a      	cbnz	r2, 8005d90 <scalbn+0x38>
 8005d68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005d6c:	4323      	orrs	r3, r4
 8005d6e:	d036      	beq.n	8005dde <scalbn+0x86>
 8005d70:	4b39      	ldr	r3, [pc, #228]	; (8005e58 <scalbn+0x100>)
 8005d72:	4629      	mov	r1, r5
 8005d74:	ee10 0a10 	vmov	r0, s0
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f7fa fbe1 	bl	8000540 <__aeabi_dmul>
 8005d7e:	4b37      	ldr	r3, [pc, #220]	; (8005e5c <scalbn+0x104>)
 8005d80:	429e      	cmp	r6, r3
 8005d82:	4604      	mov	r4, r0
 8005d84:	460d      	mov	r5, r1
 8005d86:	da10      	bge.n	8005daa <scalbn+0x52>
 8005d88:	a32b      	add	r3, pc, #172	; (adr r3, 8005e38 <scalbn+0xe0>)
 8005d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8e:	e03a      	b.n	8005e06 <scalbn+0xae>
 8005d90:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005d94:	428a      	cmp	r2, r1
 8005d96:	d10c      	bne.n	8005db2 <scalbn+0x5a>
 8005d98:	ee10 2a10 	vmov	r2, s0
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	4629      	mov	r1, r5
 8005da0:	f7fa fa18 	bl	80001d4 <__adddf3>
 8005da4:	4604      	mov	r4, r0
 8005da6:	460d      	mov	r5, r1
 8005da8:	e019      	b.n	8005dde <scalbn+0x86>
 8005daa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005dae:	460b      	mov	r3, r1
 8005db0:	3a36      	subs	r2, #54	; 0x36
 8005db2:	4432      	add	r2, r6
 8005db4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005db8:	428a      	cmp	r2, r1
 8005dba:	dd08      	ble.n	8005dce <scalbn+0x76>
 8005dbc:	2d00      	cmp	r5, #0
 8005dbe:	a120      	add	r1, pc, #128	; (adr r1, 8005e40 <scalbn+0xe8>)
 8005dc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dc4:	da1c      	bge.n	8005e00 <scalbn+0xa8>
 8005dc6:	a120      	add	r1, pc, #128	; (adr r1, 8005e48 <scalbn+0xf0>)
 8005dc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dcc:	e018      	b.n	8005e00 <scalbn+0xa8>
 8005dce:	2a00      	cmp	r2, #0
 8005dd0:	dd08      	ble.n	8005de4 <scalbn+0x8c>
 8005dd2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005dd6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005dda:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005dde:	ec45 4b10 	vmov	d0, r4, r5
 8005de2:	bd70      	pop	{r4, r5, r6, pc}
 8005de4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005de8:	da19      	bge.n	8005e1e <scalbn+0xc6>
 8005dea:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005dee:	429e      	cmp	r6, r3
 8005df0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005df4:	dd0a      	ble.n	8005e0c <scalbn+0xb4>
 8005df6:	a112      	add	r1, pc, #72	; (adr r1, 8005e40 <scalbn+0xe8>)
 8005df8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e2      	bne.n	8005dc6 <scalbn+0x6e>
 8005e00:	a30f      	add	r3, pc, #60	; (adr r3, 8005e40 <scalbn+0xe8>)
 8005e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e06:	f7fa fb9b 	bl	8000540 <__aeabi_dmul>
 8005e0a:	e7cb      	b.n	8005da4 <scalbn+0x4c>
 8005e0c:	a10a      	add	r1, pc, #40	; (adr r1, 8005e38 <scalbn+0xe0>)
 8005e0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0b8      	beq.n	8005d88 <scalbn+0x30>
 8005e16:	a10e      	add	r1, pc, #56	; (adr r1, 8005e50 <scalbn+0xf8>)
 8005e18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e1c:	e7b4      	b.n	8005d88 <scalbn+0x30>
 8005e1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005e22:	3236      	adds	r2, #54	; 0x36
 8005e24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e28:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	4b0c      	ldr	r3, [pc, #48]	; (8005e60 <scalbn+0x108>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	e7e8      	b.n	8005e06 <scalbn+0xae>
 8005e34:	f3af 8000 	nop.w
 8005e38:	c2f8f359 	.word	0xc2f8f359
 8005e3c:	01a56e1f 	.word	0x01a56e1f
 8005e40:	8800759c 	.word	0x8800759c
 8005e44:	7e37e43c 	.word	0x7e37e43c
 8005e48:	8800759c 	.word	0x8800759c
 8005e4c:	fe37e43c 	.word	0xfe37e43c
 8005e50:	c2f8f359 	.word	0xc2f8f359
 8005e54:	81a56e1f 	.word	0x81a56e1f
 8005e58:	43500000 	.word	0x43500000
 8005e5c:	ffff3cb0 	.word	0xffff3cb0
 8005e60:	3c900000 	.word	0x3c900000

08005e64 <_init>:
 8005e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e66:	bf00      	nop
 8005e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e6a:	bc08      	pop	{r3}
 8005e6c:	469e      	mov	lr, r3
 8005e6e:	4770      	bx	lr

08005e70 <_fini>:
 8005e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e72:	bf00      	nop
 8005e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e76:	bc08      	pop	{r3}
 8005e78:	469e      	mov	lr, r3
 8005e7a:	4770      	bx	lr
