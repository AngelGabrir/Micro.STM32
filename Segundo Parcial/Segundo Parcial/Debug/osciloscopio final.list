
osciloscopio final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000783c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080079cc  080079cc  000179cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a54  08007a54  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08007a54  08007a54  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a54  08007a54  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a54  08007a54  00017a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a58  08007a58  00017a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  20000084  08007ae0  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08007ae0  00020498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a62  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a56  00000000  00000000  00034b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00037570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  00038660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d95f  00000000  00000000  00039638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015263  00000000  00000000  00056f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af1a9  00000000  00000000  0006c1fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011b3a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ca8  00000000  00000000  0011b3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080079b4 	.word	0x080079b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	080079b4 	.word	0x080079b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__gedf2>:
 800084c:	f04f 3cff 	mov.w	ip, #4294967295
 8000850:	e006      	b.n	8000860 <__cmpdf2+0x4>
 8000852:	bf00      	nop

08000854 <__ledf2>:
 8000854:	f04f 0c01 	mov.w	ip, #1
 8000858:	e002      	b.n	8000860 <__cmpdf2+0x4>
 800085a:	bf00      	nop

0800085c <__cmpdf2>:
 800085c:	f04f 0c01 	mov.w	ip, #1
 8000860:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000864:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000868:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800086c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000870:	bf18      	it	ne
 8000872:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000876:	d01b      	beq.n	80008b0 <__cmpdf2+0x54>
 8000878:	b001      	add	sp, #4
 800087a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800087e:	bf0c      	ite	eq
 8000880:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000884:	ea91 0f03 	teqne	r1, r3
 8000888:	bf02      	ittt	eq
 800088a:	ea90 0f02 	teqeq	r0, r2
 800088e:	2000      	moveq	r0, #0
 8000890:	4770      	bxeq	lr
 8000892:	f110 0f00 	cmn.w	r0, #0
 8000896:	ea91 0f03 	teq	r1, r3
 800089a:	bf58      	it	pl
 800089c:	4299      	cmppl	r1, r3
 800089e:	bf08      	it	eq
 80008a0:	4290      	cmpeq	r0, r2
 80008a2:	bf2c      	ite	cs
 80008a4:	17d8      	asrcs	r0, r3, #31
 80008a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008aa:	f040 0001 	orr.w	r0, r0, #1
 80008ae:	4770      	bx	lr
 80008b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d102      	bne.n	80008c0 <__cmpdf2+0x64>
 80008ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008be:	d107      	bne.n	80008d0 <__cmpdf2+0x74>
 80008c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d1d6      	bne.n	8000878 <__cmpdf2+0x1c>
 80008ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008ce:	d0d3      	beq.n	8000878 <__cmpdf2+0x1c>
 80008d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdrcmple>:
 80008d8:	4684      	mov	ip, r0
 80008da:	4610      	mov	r0, r2
 80008dc:	4662      	mov	r2, ip
 80008de:	468c      	mov	ip, r1
 80008e0:	4619      	mov	r1, r3
 80008e2:	4663      	mov	r3, ip
 80008e4:	e000      	b.n	80008e8 <__aeabi_cdcmpeq>
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdcmpeq>:
 80008e8:	b501      	push	{r0, lr}
 80008ea:	f7ff ffb7 	bl	800085c <__cmpdf2>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	bf48      	it	mi
 80008f2:	f110 0f00 	cmnmi.w	r0, #0
 80008f6:	bd01      	pop	{r0, pc}

080008f8 <__aeabi_dcmpeq>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff fff4 	bl	80008e8 <__aeabi_cdcmpeq>
 8000900:	bf0c      	ite	eq
 8000902:	2001      	moveq	r0, #1
 8000904:	2000      	movne	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_dcmplt>:
 800090c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000910:	f7ff ffea 	bl	80008e8 <__aeabi_cdcmpeq>
 8000914:	bf34      	ite	cc
 8000916:	2001      	movcc	r0, #1
 8000918:	2000      	movcs	r0, #0
 800091a:	f85d fb08 	ldr.w	pc, [sp], #8
 800091e:	bf00      	nop

08000920 <__aeabi_dcmple>:
 8000920:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000924:	f7ff ffe0 	bl	80008e8 <__aeabi_cdcmpeq>
 8000928:	bf94      	ite	ls
 800092a:	2001      	movls	r0, #1
 800092c:	2000      	movhi	r0, #0
 800092e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000932:	bf00      	nop

08000934 <__aeabi_dcmpge>:
 8000934:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000938:	f7ff ffce 	bl	80008d8 <__aeabi_cdrcmple>
 800093c:	bf94      	ite	ls
 800093e:	2001      	movls	r0, #1
 8000940:	2000      	movhi	r0, #0
 8000942:	f85d fb08 	ldr.w	pc, [sp], #8
 8000946:	bf00      	nop

08000948 <__aeabi_dcmpgt>:
 8000948:	f84d ed08 	str.w	lr, [sp, #-8]!
 800094c:	f7ff ffc4 	bl	80008d8 <__aeabi_cdrcmple>
 8000950:	bf34      	ite	cc
 8000952:	2001      	movcc	r0, #1
 8000954:	2000      	movcs	r0, #0
 8000956:	f85d fb08 	ldr.w	pc, [sp], #8
 800095a:	bf00      	nop

0800095c <Uart>:
//			isOK = 1;
//		}
//	}
//}

void Uart() {
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	//--------[ Read The Button State & Send It Via UART ]---------
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8000960:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000964:	481f      	ldr	r0, [pc, #124]	; (80009e4 <Uart+0x88>)
 8000966:	f002 ff4b 	bl	8003800 <HAL_GPIO_ReadPin>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d105      	bne.n	800097c <Uart+0x20>
		//HAL_UART_Transmit(&huart2, MSG2, sizeof(MSG2), 100);
		//HAL_UART_Transmit(&huart2, MSG1, sizeof(MSG1), 100);
	}

	else {
		HAL_UART_Transmit(&huart2, MSG1, sizeof(MSG1), 100);
 8000970:	2364      	movs	r3, #100	; 0x64
 8000972:	2205      	movs	r2, #5
 8000974:	491c      	ldr	r1, [pc, #112]	; (80009e8 <Uart+0x8c>)
 8000976:	481d      	ldr	r0, [pc, #116]	; (80009ec <Uart+0x90>)
 8000978:	f005 f99a 	bl	8005cb0 <HAL_UART_Transmit>
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)) {
 800097c:	2110      	movs	r1, #16
 800097e:	481c      	ldr	r0, [pc, #112]	; (80009f0 <Uart+0x94>)
 8000980:	f002 ff3e 	bl	8003800 <HAL_GPIO_ReadPin>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d105      	bne.n	8000996 <Uart+0x3a>

			//HAL_UART_Transmit(&huart2, MSG2, sizeof(MSG2), 100);
			//HAL_UART_Transmit(&huart2, MSG1, sizeof(MSG1), 100);
		}
	else {
		HAL_UART_Transmit(&huart2, MSG3, sizeof(MSG3), 100);
 800098a:	2364      	movs	r3, #100	; 0x64
 800098c:	2206      	movs	r2, #6
 800098e:	4919      	ldr	r1, [pc, #100]	; (80009f4 <Uart+0x98>)
 8000990:	4816      	ldr	r0, [pc, #88]	; (80009ec <Uart+0x90>)
 8000992:	f005 f98d 	bl	8005cb0 <HAL_UART_Transmit>
		}
	//--------[ Read The Received Character & Toggle LEDs Accordingly ]--------
	if (RX1_Char == '1') {
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <Uart+0x9c>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b31      	cmp	r3, #49	; 0x31
 800099c:	d10c      	bne.n	80009b8 <Uart+0x5c>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800099e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a2:	4813      	ldr	r0, [pc, #76]	; (80009f0 <Uart+0x94>)
 80009a4:	f002 ff5c 	bl	8003860 <HAL_GPIO_TogglePin>
		HAL_UART_Receive_IT(&huart2, &RX1_Char, 1);
 80009a8:	2201      	movs	r2, #1
 80009aa:	4913      	ldr	r1, [pc, #76]	; (80009f8 <Uart+0x9c>)
 80009ac:	480f      	ldr	r0, [pc, #60]	; (80009ec <Uart+0x90>)
 80009ae:	f005 fa09 	bl	8005dc4 <HAL_UART_Receive_IT>
		RX1_Char = 0x00;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <Uart+0x9c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]

	}
	if (RX1_Char == '2') {
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <Uart+0x9c>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b32      	cmp	r3, #50	; 0x32
 80009be:	d10c      	bne.n	80009da <Uart+0x7e>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80009c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c4:	480a      	ldr	r0, [pc, #40]	; (80009f0 <Uart+0x94>)
 80009c6:	f002 ff4b 	bl	8003860 <HAL_GPIO_TogglePin>
		HAL_UART_Receive_IT(&huart2, &RX1_Char, 1);
 80009ca:	2201      	movs	r2, #1
 80009cc:	490a      	ldr	r1, [pc, #40]	; (80009f8 <Uart+0x9c>)
 80009ce:	4807      	ldr	r0, [pc, #28]	; (80009ec <Uart+0x90>)
 80009d0:	f005 f9f8 	bl	8005dc4 <HAL_UART_Receive_IT>
		RX1_Char = 0x00;
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <Uart+0x9c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1);
 80009da:	2001      	movs	r0, #1
 80009dc:	f001 fb02 	bl	8001fe4 <HAL_Delay>
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	48000800 	.word	0x48000800
 80009e8:	20000004 	.word	0x20000004
 80009ec:	20000224 	.word	0x20000224
 80009f0:	48000400 	.word	0x48000400
 80009f4:	2000000c 	.word	0x2000000c
 80009f8:	200003c9 	.word	0x200003c9

080009fc <HAL_TIM_IC_CaptureCallback>:
 } else {
 Stat = 0; // Establecer Stat en 0 cuando el pin del LED está inactivo
 }
 }
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]

	counter = __HAL_TIM_GET_COUNTER(htim);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a0a:	4a28      	ldr	r2, [pc, #160]	; (8000aac <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000a0c:	6013      	str	r3, [r2, #0]

	count = (int16_t) counter;
 8000a0e:	4b27      	ldr	r3, [pc, #156]	; (8000aac <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	b21a      	sxth	r2, r3
 8000a14:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000a16:	801a      	strh	r2, [r3, #0]
	Position_voltt = count / 4;
 8000a18:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	da00      	bge.n	8000a24 <HAL_TIM_IC_CaptureCallback+0x28>
 8000a22:	3303      	adds	r3, #3
 8000a24:	109b      	asrs	r3, r3, #2
 8000a26:	b21a      	sxth	r2, r3
 8000a28:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000a2a:	801a      	strh	r2, [r3, #0]
	if (Position_voltt < 0) {
 8000a2c:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	da06      	bge.n	8000a44 <HAL_TIM_IC_CaptureCallback+0x48>
		Position_voltt = 0;
 8000a36:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2200      	movs	r2, #0
 8000a42:	625a      	str	r2, [r3, #36]	; 0x24

	}

	 // Verificar si Position_voltt está aumentando o disminuyendo
	 if (Position_voltt > previous_position) {
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000a46:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000a4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	dd0e      	ble.n	8000a72 <HAL_TIM_IC_CaptureCallback+0x76>
	 strcpy(MSG2, "aumentar\r\n");
 8000a54:	4b19      	ldr	r3, [pc, #100]	; (8000abc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000a56:	4a1a      	ldr	r2, [pc, #104]	; (8000ac0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000a58:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a5a:	c303      	stmia	r3!, {r0, r1}
 8000a5c:	801a      	strh	r2, [r3, #0]
 8000a5e:	3302      	adds	r3, #2
 8000a60:	0c12      	lsrs	r2, r2, #16
 8000a62:	701a      	strb	r2, [r3, #0]
	 HAL_UART_Transmit(&huart2, MSG2, sizeof(MSG2), 100);
 8000a64:	2364      	movs	r3, #100	; 0x64
 8000a66:	2214      	movs	r2, #20
 8000a68:	4914      	ldr	r1, [pc, #80]	; (8000abc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000a6a:	4816      	ldr	r0, [pc, #88]	; (8000ac4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000a6c:	f005 f920 	bl	8005cb0 <HAL_UART_Transmit>
 8000a70:	e012      	b.n	8000a98 <HAL_TIM_IC_CaptureCallback+0x9c>
	 } else if (Position_voltt < previous_position) {
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000a74:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000a7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	da0a      	bge.n	8000a98 <HAL_TIM_IC_CaptureCallback+0x9c>
	 strcpy(MSG2, "disminuir\r\n");
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000a84:	4a10      	ldr	r2, [pc, #64]	; (8000ac8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000a86:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	 HAL_UART_Transmit(&huart2, MSG2, sizeof(MSG2), 100);
 8000a8c:	2364      	movs	r3, #100	; 0x64
 8000a8e:	2214      	movs	r2, #20
 8000a90:	490a      	ldr	r1, [pc, #40]	; (8000abc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000a92:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000a94:	f005 f90c 	bl	8005cb0 <HAL_UART_Transmit>
	 }
	 previous_position = Position_voltt;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000a9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000aa0:	801a      	strh	r2, [r3, #0]
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200003c0 	.word	0x200003c0
 8000ab0:	200003c4 	.word	0x200003c4
 8000ab4:	200003c6 	.word	0x200003c6
 8000ab8:	200003ca 	.word	0x200003ca
 8000abc:	200003cc 	.word	0x200003cc
 8000ac0:	080079cc 	.word	0x080079cc
 8000ac4:	20000224 	.word	0x20000224
 8000ac8:	080079d8 	.word	0x080079d8
 8000acc:	00000000 	.word	0x00000000

08000ad0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad0:	b5b0      	push	{r4, r5, r7, lr}
 8000ad2:	b092      	sub	sp, #72	; 0x48
 8000ad4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad6:	f001 fa1f 	bl	8001f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ada:	f000 fbc3 	bl	8001264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ade:	f000 fd9d 	bl	800161c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ae2:	f000 fd75 	bl	80015d0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ae6:	f000 fd43 	bl	8001570 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000aea:	f000 fc17 	bl	800131c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000aee:	f000 fc9b 	bl	8001428 <MX_TIM2_Init>
  MX_DAC_Init();
 8000af2:	f000 fc6f 	bl	80013d4 <MX_DAC_Init>
  MX_TIM15_Init();
 8000af6:	f000 fceb 	bl	80014d0 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000afa:	213c      	movs	r1, #60	; 0x3c
 8000afc:	48ac      	ldr	r0, [pc, #688]	; (8000db0 <main+0x2e0>)
 8000afe:	f004 fc19 	bl	8005334 <HAL_TIM_Encoder_Start_IT>
	HAL_UART_Receive_IT(&huart2, &RX1_Char, 1);
 8000b02:	2201      	movs	r2, #1
 8000b04:	49ab      	ldr	r1, [pc, #684]	; (8000db4 <main+0x2e4>)
 8000b06:	48ac      	ldr	r0, [pc, #688]	; (8000db8 <main+0x2e8>)
 8000b08:	f005 f95c 	bl	8005dc4 <HAL_UART_Receive_IT>
	HAL_ADC_Start_DMA(&hadc1, &VALOR_ADC, 1);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	49ab      	ldr	r1, [pc, #684]	; (8000dbc <main+0x2ec>)
 8000b10:	48ab      	ldr	r0, [pc, #684]	; (8000dc0 <main+0x2f0>)
 8000b12:	f001 fc2f 	bl	8002374 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim15);
 8000b16:	48ab      	ldr	r0, [pc, #684]	; (8000dc4 <main+0x2f4>)
 8000b18:	f004 fb1a 	bl	8005150 <HAL_TIM_Base_Start>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, &VALOR_ADC, 1, DAC_ALIGN_12B_R);
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	2301      	movs	r3, #1
 8000b22:	4aa6      	ldr	r2, [pc, #664]	; (8000dbc <main+0x2ec>)
 8000b24:	2100      	movs	r1, #0
 8000b26:	48a8      	ldr	r0, [pc, #672]	; (8000dc8 <main+0x2f8>)
 8000b28:	f002 f9f8 	bl	8002f1c <HAL_DAC_Start_DMA>
	HAL_UART_Transmit(&huart2, MSG1, sizeof(MSG1), 100);
 8000b2c:	2364      	movs	r3, #100	; 0x64
 8000b2e:	2205      	movs	r2, #5
 8000b30:	49a6      	ldr	r1, [pc, #664]	; (8000dcc <main+0x2fc>)
 8000b32:	48a1      	ldr	r0, [pc, #644]	; (8000db8 <main+0x2e8>)
 8000b34:	f005 f8bc 	bl	8005cb0 <HAL_UART_Transmit>
	max_init(0x02);
 8000b38:	2002      	movs	r0, #2
 8000b3a:	f000 ff59 	bl	80019f0 <max_init>
	Uart();
 8000b3e:	f7ff ff0d 	bl	800095c <Uart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		Uart();
 8000b42:	f7ff ff0b 	bl	800095c <Uart>
		//	button();
		sprintf(val, "%u\n", VALOR_ADC);
 8000b46:	4b9d      	ldr	r3, [pc, #628]	; (8000dbc <main+0x2ec>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	49a0      	ldr	r1, [pc, #640]	; (8000dd0 <main+0x300>)
 8000b4e:	48a1      	ldr	r0, [pc, #644]	; (8000dd4 <main+0x304>)
 8000b50:	f006 fac2 	bl	80070d8 <siprintf>
		uint8_t len = strlen(val);
 8000b54:	489f      	ldr	r0, [pc, #636]	; (8000dd4 <main+0x304>)
 8000b56:	f7ff fb3b 	bl	80001d0 <strlen>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	70fb      	strb	r3, [r7, #3]
		HAL_UART_Transmit(&huart2, (uint8_t*) val, len, 100);
 8000b5e:	78fb      	ldrb	r3, [r7, #3]
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	2364      	movs	r3, #100	; 0x64
 8000b64:	499b      	ldr	r1, [pc, #620]	; (8000dd4 <main+0x304>)
 8000b66:	4894      	ldr	r0, [pc, #592]	; (8000db8 <main+0x2e8>)
 8000b68:	f005 f8a2 	bl	8005cb0 <HAL_UART_Transmit>

		if (Stat == 0) {
 8000b6c:	4b9a      	ldr	r3, [pc, #616]	; (8000dd8 <main+0x308>)
 8000b6e:	f993 3000 	ldrsb.w	r3, [r3]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f040 82e8 	bne.w	8001148 <main+0x678>

			if (VALOR_ADC > 1) {
 8000b78:	4b90      	ldr	r3, [pc, #576]	; (8000dbc <main+0x2ec>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d90e      	bls.n	8000b9e <main+0xce>
				for (int i = 0; i < 8; i++) {
 8000b80:	2300      	movs	r3, #0
 8000b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b84:	e008      	b.n	8000b98 <main+0xc8>
					matris_on[7][i] = 1;
 8000b86:	4a95      	ldr	r2, [pc, #596]	; (8000ddc <main+0x30c>)
 8000b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b8a:	3338      	adds	r3, #56	; 0x38
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int i = 0; i < 8; i++) {
 8000b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b94:	3301      	adds	r3, #1
 8000b96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b9a:	2b07      	cmp	r3, #7
 8000b9c:	ddf3      	ble.n	8000b86 <main+0xb6>
				}
			}
			max_clear();
 8000b9e:	f000 fef9 	bl	8001994 <max_clear>
			if (VALOR_ADC >= (250 * Position_volt * 0.1)
 8000ba2:	4b86      	ldr	r3, [pc, #536]	; (8000dbc <main+0x2ec>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fdd6 	bl	8000758 <__aeabi_ui2d>
 8000bac:	4604      	mov	r4, r0
 8000bae:	460d      	mov	r5, r1
 8000bb0:	4b8b      	ldr	r3, [pc, #556]	; (8000de0 <main+0x310>)
 8000bb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	23fa      	movs	r3, #250	; 0xfa
 8000bba:	fb02 f303 	mul.w	r3, r2, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fdda 	bl	8000778 <__aeabi_i2d>
 8000bc4:	a378      	add	r3, pc, #480	; (adr r3, 8000da8 <main+0x2d8>)
 8000bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bca:	f7ff fb59 	bl	8000280 <__aeabi_dmul>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	4629      	mov	r1, r5
 8000bd6:	f7ff fead 	bl	8000934 <__aeabi_dcmpge>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d030      	beq.n	8000c42 <main+0x172>
					&& VALOR_ADC <= (720 * Position_volt * 0.1)) {
 8000be0:	4b76      	ldr	r3, [pc, #472]	; (8000dbc <main+0x2ec>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fdb7 	bl	8000758 <__aeabi_ui2d>
 8000bea:	4604      	mov	r4, r0
 8000bec:	460d      	mov	r5, r1
 8000bee:	4b7c      	ldr	r3, [pc, #496]	; (8000de0 <main+0x310>)
 8000bf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8000bfa:	fb02 f303 	mul.w	r3, r2, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fdba 	bl	8000778 <__aeabi_i2d>
 8000c04:	a368      	add	r3, pc, #416	; (adr r3, 8000da8 <main+0x2d8>)
 8000c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0a:	f7ff fb39 	bl	8000280 <__aeabi_dmul>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	460b      	mov	r3, r1
 8000c12:	4620      	mov	r0, r4
 8000c14:	4629      	mov	r1, r5
 8000c16:	f7ff fe83 	bl	8000920 <__aeabi_dcmple>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d010      	beq.n	8000c42 <main+0x172>
				for (int i = wave; i < 8; i++) {
 8000c20:	4b70      	ldr	r3, [pc, #448]	; (8000de4 <main+0x314>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c26:	e008      	b.n	8000c3a <main+0x16a>
					matris_on[i][0] = 1;
 8000c28:	4a6c      	ldr	r2, [pc, #432]	; (8000ddc <main+0x30c>)
 8000c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c2c:	015b      	lsls	r3, r3, #5
 8000c2e:	4413      	add	r3, r2
 8000c30:	2201      	movs	r2, #1
 8000c32:	601a      	str	r2, [r3, #0]
				for (int i = wave; i < 8; i++) {
 8000c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c36:	3301      	adds	r3, #1
 8000c38:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c3c:	2b07      	cmp	r3, #7
 8000c3e:	ddf3      	ble.n	8000c28 <main+0x158>
 8000c40:	e006      	b.n	8000c50 <main+0x180>
				}
			} else {
				matris_on[wave][0] = 0;
 8000c42:	4b68      	ldr	r3, [pc, #416]	; (8000de4 <main+0x314>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a65      	ldr	r2, [pc, #404]	; (8000ddc <main+0x30c>)
 8000c48:	015b      	lsls	r3, r3, #5
 8000c4a:	4413      	add	r3, r2
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
			}

			// Columna 2
			if (VALOR_ADC >= (1260 * Position_volt * 0.1)
 8000c50:	4b5a      	ldr	r3, [pc, #360]	; (8000dbc <main+0x2ec>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fd7f 	bl	8000758 <__aeabi_ui2d>
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	460d      	mov	r5, r1
 8000c5e:	4b60      	ldr	r3, [pc, #384]	; (8000de0 <main+0x310>)
 8000c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c64:	461a      	mov	r2, r3
 8000c66:	f240 43ec 	movw	r3, #1260	; 0x4ec
 8000c6a:	fb02 f303 	mul.w	r3, r2, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fd82 	bl	8000778 <__aeabi_i2d>
 8000c74:	a34c      	add	r3, pc, #304	; (adr r3, 8000da8 <main+0x2d8>)
 8000c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c7a:	f7ff fb01 	bl	8000280 <__aeabi_dmul>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	460b      	mov	r3, r1
 8000c82:	4620      	mov	r0, r4
 8000c84:	4629      	mov	r1, r5
 8000c86:	f7ff fe55 	bl	8000934 <__aeabi_dcmpge>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d031      	beq.n	8000cf4 <main+0x224>
					&& VALOR_ADC <= (1780 * Position_volt * 0.1)) {
 8000c90:	4b4a      	ldr	r3, [pc, #296]	; (8000dbc <main+0x2ec>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fd5f 	bl	8000758 <__aeabi_ui2d>
 8000c9a:	4604      	mov	r4, r0
 8000c9c:	460d      	mov	r5, r1
 8000c9e:	4b50      	ldr	r3, [pc, #320]	; (8000de0 <main+0x310>)
 8000ca0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	f240 63f4 	movw	r3, #1780	; 0x6f4
 8000caa:	fb02 f303 	mul.w	r3, r2, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fd62 	bl	8000778 <__aeabi_i2d>
 8000cb4:	a33c      	add	r3, pc, #240	; (adr r3, 8000da8 <main+0x2d8>)
 8000cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cba:	f7ff fae1 	bl	8000280 <__aeabi_dmul>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	4629      	mov	r1, r5
 8000cc6:	f7ff fe2b 	bl	8000920 <__aeabi_dcmple>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d011      	beq.n	8000cf4 <main+0x224>
				for (int i = wave; i < 8; i++) {
 8000cd0:	4b44      	ldr	r3, [pc, #272]	; (8000de4 <main+0x314>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8000cd6:	e009      	b.n	8000cec <main+0x21c>
					matris_on[i][2] = 1;
 8000cd8:	4a40      	ldr	r2, [pc, #256]	; (8000ddc <main+0x30c>)
 8000cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cdc:	015b      	lsls	r3, r3, #5
 8000cde:	4413      	add	r3, r2
 8000ce0:	3308      	adds	r3, #8
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	601a      	str	r2, [r3, #0]
				for (int i = wave; i < 8; i++) {
 8000ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ce8:	3301      	adds	r3, #1
 8000cea:	637b      	str	r3, [r7, #52]	; 0x34
 8000cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cee:	2b07      	cmp	r3, #7
 8000cf0:	ddf2      	ble.n	8000cd8 <main+0x208>
 8000cf2:	e007      	b.n	8000d04 <main+0x234>
				}
			} else {
				matris_on[wave][2] = 0;
 8000cf4:	4b3b      	ldr	r3, [pc, #236]	; (8000de4 <main+0x314>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a38      	ldr	r2, [pc, #224]	; (8000ddc <main+0x30c>)
 8000cfa:	015b      	lsls	r3, r3, #5
 8000cfc:	4413      	add	r3, r2
 8000cfe:	3308      	adds	r3, #8
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
			}

			// Columna 3
			if (VALOR_ADC >= (1780 * Position_volt * 0.1)
 8000d04:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <main+0x2ec>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fd25 	bl	8000758 <__aeabi_ui2d>
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	4b33      	ldr	r3, [pc, #204]	; (8000de0 <main+0x310>)
 8000d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	f240 63f4 	movw	r3, #1780	; 0x6f4
 8000d1e:	fb02 f303 	mul.w	r3, r2, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fd28 	bl	8000778 <__aeabi_i2d>
 8000d28:	a31f      	add	r3, pc, #124	; (adr r3, 8000da8 <main+0x2d8>)
 8000d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2e:	f7ff faa7 	bl	8000280 <__aeabi_dmul>
 8000d32:	4602      	mov	r2, r0
 8000d34:	460b      	mov	r3, r1
 8000d36:	4620      	mov	r0, r4
 8000d38:	4629      	mov	r1, r5
 8000d3a:	f7ff fdfb 	bl	8000934 <__aeabi_dcmpge>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d051      	beq.n	8000de8 <main+0x318>
					&& VALOR_ADC <= (2280 * Position_volt * 0.1)) {
 8000d44:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <main+0x2ec>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fd05 	bl	8000758 <__aeabi_ui2d>
 8000d4e:	4604      	mov	r4, r0
 8000d50:	460d      	mov	r5, r1
 8000d52:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <main+0x310>)
 8000d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	f640 03e8 	movw	r3, #2280	; 0x8e8
 8000d5e:	fb02 f303 	mul.w	r3, r2, r3
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fd08 	bl	8000778 <__aeabi_i2d>
 8000d68:	a30f      	add	r3, pc, #60	; (adr r3, 8000da8 <main+0x2d8>)
 8000d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d6e:	f7ff fa87 	bl	8000280 <__aeabi_dmul>
 8000d72:	4602      	mov	r2, r0
 8000d74:	460b      	mov	r3, r1
 8000d76:	4620      	mov	r0, r4
 8000d78:	4629      	mov	r1, r5
 8000d7a:	f7ff fdd1 	bl	8000920 <__aeabi_dcmple>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d031      	beq.n	8000de8 <main+0x318>
				for (int i = wave; i < 8; i++) {
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <main+0x314>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	633b      	str	r3, [r7, #48]	; 0x30
 8000d8a:	e009      	b.n	8000da0 <main+0x2d0>
					matris_on[i][3] = 1;
 8000d8c:	4a13      	ldr	r2, [pc, #76]	; (8000ddc <main+0x30c>)
 8000d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d90:	015b      	lsls	r3, r3, #5
 8000d92:	4413      	add	r3, r2
 8000d94:	330c      	adds	r3, #12
 8000d96:	2201      	movs	r2, #1
 8000d98:	601a      	str	r2, [r3, #0]
				for (int i = wave; i < 8; i++) {
 8000d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
 8000da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da2:	2b07      	cmp	r3, #7
 8000da4:	ddf2      	ble.n	8000d8c <main+0x2bc>
 8000da6:	e027      	b.n	8000df8 <main+0x328>
 8000da8:	9999999a 	.word	0x9999999a
 8000dac:	3fb99999 	.word	0x3fb99999
 8000db0:	2000018c 	.word	0x2000018c
 8000db4:	200003c9 	.word	0x200003c9
 8000db8:	20000224 	.word	0x20000224
 8000dbc:	200002ac 	.word	0x200002ac
 8000dc0:	200000a0 	.word	0x200000a0
 8000dc4:	200001d8 	.word	0x200001d8
 8000dc8:	20000134 	.word	0x20000134
 8000dcc:	20000004 	.word	0x20000004
 8000dd0:	080079e4 	.word	0x080079e4
 8000dd4:	200002b0 	.word	0x200002b0
 8000dd8:	200003c8 	.word	0x200003c8
 8000ddc:	200002bc 	.word	0x200002bc
 8000de0:	20000000 	.word	0x20000000
 8000de4:	200003bc 	.word	0x200003bc
				}
			} else {
				matris_on[wave][3] = 0;
 8000de8:	4bbd      	ldr	r3, [pc, #756]	; (80010e0 <main+0x610>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4abd      	ldr	r2, [pc, #756]	; (80010e4 <main+0x614>)
 8000dee:	015b      	lsls	r3, r3, #5
 8000df0:	4413      	add	r3, r2
 8000df2:	330c      	adds	r3, #12
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
			}

			// Columna 4
			if (VALOR_ADC >= (2280 * Position_volt * 0.1)
 8000df8:	4bbb      	ldr	r3, [pc, #748]	; (80010e8 <main+0x618>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fcab 	bl	8000758 <__aeabi_ui2d>
 8000e02:	4604      	mov	r4, r0
 8000e04:	460d      	mov	r5, r1
 8000e06:	4bb9      	ldr	r3, [pc, #740]	; (80010ec <main+0x61c>)
 8000e08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	f640 03e8 	movw	r3, #2280	; 0x8e8
 8000e12:	fb02 f303 	mul.w	r3, r2, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fcae 	bl	8000778 <__aeabi_i2d>
 8000e1c:	a3ae      	add	r3, pc, #696	; (adr r3, 80010d8 <main+0x608>)
 8000e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e22:	f7ff fa2d 	bl	8000280 <__aeabi_dmul>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	4629      	mov	r1, r5
 8000e2e:	f7ff fd81 	bl	8000934 <__aeabi_dcmpge>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d031      	beq.n	8000e9c <main+0x3cc>
					&& VALOR_ADC <= (2780 * Position_volt * 0.1)) {
 8000e38:	4bab      	ldr	r3, [pc, #684]	; (80010e8 <main+0x618>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fc8b 	bl	8000758 <__aeabi_ui2d>
 8000e42:	4604      	mov	r4, r0
 8000e44:	460d      	mov	r5, r1
 8000e46:	4ba9      	ldr	r3, [pc, #676]	; (80010ec <main+0x61c>)
 8000e48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	f640 23dc 	movw	r3, #2780	; 0xadc
 8000e52:	fb02 f303 	mul.w	r3, r2, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fc8e 	bl	8000778 <__aeabi_i2d>
 8000e5c:	a39e      	add	r3, pc, #632	; (adr r3, 80010d8 <main+0x608>)
 8000e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e62:	f7ff fa0d 	bl	8000280 <__aeabi_dmul>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	4629      	mov	r1, r5
 8000e6e:	f7ff fd57 	bl	8000920 <__aeabi_dcmple>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d011      	beq.n	8000e9c <main+0x3cc>
				for (int i = wave; i < 8; i++) {
 8000e78:	4b99      	ldr	r3, [pc, #612]	; (80010e0 <main+0x610>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e7e:	e009      	b.n	8000e94 <main+0x3c4>
					matris_on[i][4] = 1;
 8000e80:	4a98      	ldr	r2, [pc, #608]	; (80010e4 <main+0x614>)
 8000e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e84:	015b      	lsls	r3, r3, #5
 8000e86:	4413      	add	r3, r2
 8000e88:	3310      	adds	r3, #16
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	601a      	str	r2, [r3, #0]
				for (int i = wave; i < 8; i++) {
 8000e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e90:	3301      	adds	r3, #1
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e96:	2b07      	cmp	r3, #7
 8000e98:	ddf2      	ble.n	8000e80 <main+0x3b0>
 8000e9a:	e007      	b.n	8000eac <main+0x3dc>
				}
			} else {
				matris_on[wave][4] = 0;
 8000e9c:	4b90      	ldr	r3, [pc, #576]	; (80010e0 <main+0x610>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a90      	ldr	r2, [pc, #576]	; (80010e4 <main+0x614>)
 8000ea2:	015b      	lsls	r3, r3, #5
 8000ea4:	4413      	add	r3, r2
 8000ea6:	3310      	adds	r3, #16
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
			}

			// Columna 5
			if (VALOR_ADC >= (2780 * Position_volt * 0.1)
 8000eac:	4b8e      	ldr	r3, [pc, #568]	; (80010e8 <main+0x618>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fc51 	bl	8000758 <__aeabi_ui2d>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	460d      	mov	r5, r1
 8000eba:	4b8c      	ldr	r3, [pc, #560]	; (80010ec <main+0x61c>)
 8000ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	f640 23dc 	movw	r3, #2780	; 0xadc
 8000ec6:	fb02 f303 	mul.w	r3, r2, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fc54 	bl	8000778 <__aeabi_i2d>
 8000ed0:	a381      	add	r3, pc, #516	; (adr r3, 80010d8 <main+0x608>)
 8000ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed6:	f7ff f9d3 	bl	8000280 <__aeabi_dmul>
 8000eda:	4602      	mov	r2, r0
 8000edc:	460b      	mov	r3, r1
 8000ede:	4620      	mov	r0, r4
 8000ee0:	4629      	mov	r1, r5
 8000ee2:	f7ff fd27 	bl	8000934 <__aeabi_dcmpge>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d031      	beq.n	8000f50 <main+0x480>
					&& VALOR_ADC <= (3280 * Position_volt * 0.1)) {
 8000eec:	4b7e      	ldr	r3, [pc, #504]	; (80010e8 <main+0x618>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fc31 	bl	8000758 <__aeabi_ui2d>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	460d      	mov	r5, r1
 8000efa:	4b7c      	ldr	r3, [pc, #496]	; (80010ec <main+0x61c>)
 8000efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f00:	461a      	mov	r2, r3
 8000f02:	f44f 634d 	mov.w	r3, #3280	; 0xcd0
 8000f06:	fb02 f303 	mul.w	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fc34 	bl	8000778 <__aeabi_i2d>
 8000f10:	a371      	add	r3, pc, #452	; (adr r3, 80010d8 <main+0x608>)
 8000f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f16:	f7ff f9b3 	bl	8000280 <__aeabi_dmul>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	4620      	mov	r0, r4
 8000f20:	4629      	mov	r1, r5
 8000f22:	f7ff fcfd 	bl	8000920 <__aeabi_dcmple>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d011      	beq.n	8000f50 <main+0x480>
				for (int i = wave; i < 8; i++) {
 8000f2c:	4b6c      	ldr	r3, [pc, #432]	; (80010e0 <main+0x610>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f32:	e009      	b.n	8000f48 <main+0x478>
					matris_on[i][5] = 1;
 8000f34:	4a6b      	ldr	r2, [pc, #428]	; (80010e4 <main+0x614>)
 8000f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f38:	015b      	lsls	r3, r3, #5
 8000f3a:	4413      	add	r3, r2
 8000f3c:	3314      	adds	r3, #20
 8000f3e:	2201      	movs	r2, #1
 8000f40:	601a      	str	r2, [r3, #0]
				for (int i = wave; i < 8; i++) {
 8000f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f44:	3301      	adds	r3, #1
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f4a:	2b07      	cmp	r3, #7
 8000f4c:	ddf2      	ble.n	8000f34 <main+0x464>
 8000f4e:	e007      	b.n	8000f60 <main+0x490>
				}
			} else {
				matris_on[wave][5] = 0;
 8000f50:	4b63      	ldr	r3, [pc, #396]	; (80010e0 <main+0x610>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a63      	ldr	r2, [pc, #396]	; (80010e4 <main+0x614>)
 8000f56:	015b      	lsls	r3, r3, #5
 8000f58:	4413      	add	r3, r2
 8000f5a:	3314      	adds	r3, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
			}

			// Columna 6
			if (VALOR_ADC >= (3280 * Position_volt * 0.1)
 8000f60:	4b61      	ldr	r3, [pc, #388]	; (80010e8 <main+0x618>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fbf7 	bl	8000758 <__aeabi_ui2d>
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	460d      	mov	r5, r1
 8000f6e:	4b5f      	ldr	r3, [pc, #380]	; (80010ec <main+0x61c>)
 8000f70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f74:	461a      	mov	r2, r3
 8000f76:	f44f 634d 	mov.w	r3, #3280	; 0xcd0
 8000f7a:	fb02 f303 	mul.w	r3, r2, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fbfa 	bl	8000778 <__aeabi_i2d>
 8000f84:	a354      	add	r3, pc, #336	; (adr r3, 80010d8 <main+0x608>)
 8000f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8a:	f7ff f979 	bl	8000280 <__aeabi_dmul>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4620      	mov	r0, r4
 8000f94:	4629      	mov	r1, r5
 8000f96:	f7ff fccd 	bl	8000934 <__aeabi_dcmpge>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d031      	beq.n	8001004 <main+0x534>
					&& VALOR_ADC <= (3780 * Position_volt * 0.1)) {
 8000fa0:	4b51      	ldr	r3, [pc, #324]	; (80010e8 <main+0x618>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fbd7 	bl	8000758 <__aeabi_ui2d>
 8000faa:	4604      	mov	r4, r0
 8000fac:	460d      	mov	r5, r1
 8000fae:	4b4f      	ldr	r3, [pc, #316]	; (80010ec <main+0x61c>)
 8000fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	f640 63c4 	movw	r3, #3780	; 0xec4
 8000fba:	fb02 f303 	mul.w	r3, r2, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fbda 	bl	8000778 <__aeabi_i2d>
 8000fc4:	a344      	add	r3, pc, #272	; (adr r3, 80010d8 <main+0x608>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	f7ff f959 	bl	8000280 <__aeabi_dmul>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	4629      	mov	r1, r5
 8000fd6:	f7ff fca3 	bl	8000920 <__aeabi_dcmple>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d011      	beq.n	8001004 <main+0x534>
				for (int i = wave; i < 8; i++) {
 8000fe0:	4b3f      	ldr	r3, [pc, #252]	; (80010e0 <main+0x610>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe6:	e009      	b.n	8000ffc <main+0x52c>
					matris_on[i][6] = 1;
 8000fe8:	4a3e      	ldr	r2, [pc, #248]	; (80010e4 <main+0x614>)
 8000fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fec:	015b      	lsls	r3, r3, #5
 8000fee:	4413      	add	r3, r2
 8000ff0:	3318      	adds	r3, #24
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]
				for (int i = wave; i < 8; i++) {
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffe:	2b07      	cmp	r3, #7
 8001000:	ddf2      	ble.n	8000fe8 <main+0x518>
 8001002:	e007      	b.n	8001014 <main+0x544>
				}
			} else {
				matris_on[wave][6] = 0;
 8001004:	4b36      	ldr	r3, [pc, #216]	; (80010e0 <main+0x610>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a36      	ldr	r2, [pc, #216]	; (80010e4 <main+0x614>)
 800100a:	015b      	lsls	r3, r3, #5
 800100c:	4413      	add	r3, r2
 800100e:	3318      	adds	r3, #24
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
			}

			// Columna 7
			if (VALOR_ADC >= (3780 * Position_volt * 0.1)
 8001014:	4b34      	ldr	r3, [pc, #208]	; (80010e8 <main+0x618>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fb9d 	bl	8000758 <__aeabi_ui2d>
 800101e:	4604      	mov	r4, r0
 8001020:	460d      	mov	r5, r1
 8001022:	4b32      	ldr	r3, [pc, #200]	; (80010ec <main+0x61c>)
 8001024:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001028:	461a      	mov	r2, r3
 800102a:	f640 63c4 	movw	r3, #3780	; 0xec4
 800102e:	fb02 f303 	mul.w	r3, r2, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fba0 	bl	8000778 <__aeabi_i2d>
 8001038:	a327      	add	r3, pc, #156	; (adr r3, 80010d8 <main+0x608>)
 800103a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103e:	f7ff f91f 	bl	8000280 <__aeabi_dmul>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4620      	mov	r0, r4
 8001048:	4629      	mov	r1, r5
 800104a:	f7ff fc73 	bl	8000934 <__aeabi_dcmpge>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d031      	beq.n	80010b8 <main+0x5e8>
					&& VALOR_ADC <= (4000 * Position_volt * 0.1)) {
 8001054:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <main+0x618>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fb7d 	bl	8000758 <__aeabi_ui2d>
 800105e:	4604      	mov	r4, r0
 8001060:	460d      	mov	r5, r1
 8001062:	4b22      	ldr	r3, [pc, #136]	; (80010ec <main+0x61c>)
 8001064:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001068:	461a      	mov	r2, r3
 800106a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800106e:	fb02 f303 	mul.w	r3, r2, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fb80 	bl	8000778 <__aeabi_i2d>
 8001078:	a317      	add	r3, pc, #92	; (adr r3, 80010d8 <main+0x608>)
 800107a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107e:	f7ff f8ff 	bl	8000280 <__aeabi_dmul>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4620      	mov	r0, r4
 8001088:	4629      	mov	r1, r5
 800108a:	f7ff fc49 	bl	8000920 <__aeabi_dcmple>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d011      	beq.n	80010b8 <main+0x5e8>
				for (int i = wave; i < 8; i++) {
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <main+0x610>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	623b      	str	r3, [r7, #32]
 800109a:	e009      	b.n	80010b0 <main+0x5e0>
					matris_on[i][7] = 1;
 800109c:	4a11      	ldr	r2, [pc, #68]	; (80010e4 <main+0x614>)
 800109e:	6a3b      	ldr	r3, [r7, #32]
 80010a0:	015b      	lsls	r3, r3, #5
 80010a2:	4413      	add	r3, r2
 80010a4:	331c      	adds	r3, #28
 80010a6:	2201      	movs	r2, #1
 80010a8:	601a      	str	r2, [r3, #0]
				for (int i = wave; i < 8; i++) {
 80010aa:	6a3b      	ldr	r3, [r7, #32]
 80010ac:	3301      	adds	r3, #1
 80010ae:	623b      	str	r3, [r7, #32]
 80010b0:	6a3b      	ldr	r3, [r7, #32]
 80010b2:	2b07      	cmp	r3, #7
 80010b4:	ddf2      	ble.n	800109c <main+0x5cc>
 80010b6:	e007      	b.n	80010c8 <main+0x5f8>
				}
			} else {
				matris_on[wave][7] = 0;
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <main+0x610>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a09      	ldr	r2, [pc, #36]	; (80010e4 <main+0x614>)
 80010be:	015b      	lsls	r3, r3, #5
 80010c0:	4413      	add	r3, r2
 80010c2:	331c      	adds	r3, #28
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
			}

			// Actualizar los LEDs en la matriz
			for (int z = 0; z < 8; z++) {
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
 80010cc:	e028      	b.n	8001120 <main+0x650>
				for (int i = 0; i < 8; i++) {
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
 80010d2:	e01f      	b.n	8001114 <main+0x644>
 80010d4:	f3af 8000 	nop.w
 80010d8:	9999999a 	.word	0x9999999a
 80010dc:	3fb99999 	.word	0x3fb99999
 80010e0:	200003bc 	.word	0x200003bc
 80010e4:	200002bc 	.word	0x200002bc
 80010e8:	200002ac 	.word	0x200002ac
 80010ec:	20000000 	.word	0x20000000
					setled(i, z, matris_on[i][z]);
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	b2d8      	uxtb	r0, r3
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	b2d9      	uxtb	r1, r3
 80010f8:	4c56      	ldr	r4, [pc, #344]	; (8001254 <main+0x784>)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	00da      	lsls	r2, r3, #3
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	4413      	add	r3, r2
 8001102:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	461a      	mov	r2, r3
 800110a:	f000 fb85 	bl	8001818 <setled>
				for (int i = 0; i < 8; i++) {
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	3301      	adds	r3, #1
 8001112:	61bb      	str	r3, [r7, #24]
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	2b07      	cmp	r3, #7
 8001118:	ddea      	ble.n	80010f0 <main+0x620>
			for (int z = 0; z < 8; z++) {
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3301      	adds	r3, #1
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	2b07      	cmp	r3, #7
 8001124:	ddd3      	ble.n	80010ce <main+0x5fe>
				}
			}

			wave++;
 8001126:	4b4c      	ldr	r3, [pc, #304]	; (8001258 <main+0x788>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	3301      	adds	r3, #1
 800112c:	4a4a      	ldr	r2, [pc, #296]	; (8001258 <main+0x788>)
 800112e:	6013      	str	r3, [r2, #0]
			HAL_Delay(30);
 8001130:	201e      	movs	r0, #30
 8001132:	f000 ff57 	bl	8001fe4 <HAL_Delay>
			if (wave > 7) {
 8001136:	4b48      	ldr	r3, [pc, #288]	; (8001258 <main+0x788>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b07      	cmp	r3, #7
 800113c:	f77f ad01 	ble.w	8000b42 <main+0x72>
				wave = 0;
 8001140:	4b45      	ldr	r3, [pc, #276]	; (8001258 <main+0x788>)
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	e4fc      	b.n	8000b42 <main+0x72>
			}
		} else if (Stat == 1) {
 8001148:	4b44      	ldr	r3, [pc, #272]	; (800125c <main+0x78c>)
 800114a:	f993 3000 	ldrsb.w	r3, [r3]
 800114e:	2b01      	cmp	r3, #1
 8001150:	f47f acf7 	bne.w	8000b42 <main+0x72>

			if (VALOR_ADC > 1) {
 8001154:	4b42      	ldr	r3, [pc, #264]	; (8001260 <main+0x790>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d90e      	bls.n	800117a <main+0x6aa>
				for (int i = 0; i < 8; i++) {
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	e008      	b.n	8001174 <main+0x6a4>
					matris_on[7][i] = 1;
 8001162:	4a3c      	ldr	r2, [pc, #240]	; (8001254 <main+0x784>)
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	3338      	adds	r3, #56	; 0x38
 8001168:	2101      	movs	r1, #1
 800116a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int i = 0; i < 8; i++) {
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	3301      	adds	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	2b07      	cmp	r3, #7
 8001178:	ddf3      	ble.n	8001162 <main+0x692>
				}
			}
			max_clear();
 800117a:	f000 fc0b 	bl	8001994 <max_clear>
			if (VALOR_ADC >= (250 * 4 * 0.1) && VALOR_ADC <= (720 * 4 * 0.1)) {
 800117e:	4b38      	ldr	r3, [pc, #224]	; (8001260 <main+0x790>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b63      	cmp	r3, #99	; 0x63
 8001184:	d917      	bls.n	80011b6 <main+0x6e6>
 8001186:	4b36      	ldr	r3, [pc, #216]	; (8001260 <main+0x790>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 800118e:	d812      	bhi.n	80011b6 <main+0x6e6>
				for (int i = 0; i < 8; i++) {
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	e00b      	b.n	80011ae <main+0x6de>
					matris_on[wave][i] = 1;
 8001196:	4b30      	ldr	r3, [pc, #192]	; (8001258 <main+0x788>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	492e      	ldr	r1, [pc, #184]	; (8001254 <main+0x784>)
 800119c:	00da      	lsls	r2, r3, #3
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	4413      	add	r3, r2
 80011a2:	2201      	movs	r2, #1
 80011a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for (int i = 0; i < 8; i++) {
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	3301      	adds	r3, #1
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	2b07      	cmp	r3, #7
 80011b2:	ddf0      	ble.n	8001196 <main+0x6c6>
 80011b4:	e011      	b.n	80011da <main+0x70a>
				}
			} else {
				for (int i = 0; i < 8; i++) {
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	e00b      	b.n	80011d4 <main+0x704>
					matris_on[wave][i] = 0;
 80011bc:	4b26      	ldr	r3, [pc, #152]	; (8001258 <main+0x788>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4924      	ldr	r1, [pc, #144]	; (8001254 <main+0x784>)
 80011c2:	00da      	lsls	r2, r3, #3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	2200      	movs	r2, #0
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for (int i = 0; i < 8; i++) {
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	3301      	adds	r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2b07      	cmp	r3, #7
 80011d8:	ddf0      	ble.n	80011bc <main+0x6ec>
				}
			}

			for (int z = 0; z < 8; z++) {
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	e025      	b.n	800122c <main+0x75c>
				for (int i = 0; i < 8; i++) {
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	e01c      	b.n	8001220 <main+0x750>
					if (matris_on[i][z] == 1) {
 80011e6:	491b      	ldr	r1, [pc, #108]	; (8001254 <main+0x784>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	00da      	lsls	r2, r3, #3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	4413      	add	r3, r2
 80011f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d108      	bne.n	800120a <main+0x73a>
						setled(i, z, 1);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	b2d1      	uxtb	r1, r2
 8001200:	2201      	movs	r2, #1
 8001202:	4618      	mov	r0, r3
 8001204:	f000 fb08 	bl	8001818 <setled>
 8001208:	e007      	b.n	800121a <main+0x74a>
					} else {
						setled(i, z, 0);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	b2d1      	uxtb	r1, r2
 8001212:	2200      	movs	r2, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f000 faff 	bl	8001818 <setled>
				for (int i = 0; i < 8; i++) {
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3301      	adds	r3, #1
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b07      	cmp	r3, #7
 8001224:	dddf      	ble.n	80011e6 <main+0x716>
			for (int z = 0; z < 8; z++) {
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	3301      	adds	r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	2b07      	cmp	r3, #7
 8001230:	ddd6      	ble.n	80011e0 <main+0x710>
					}
				}
			}
			wave++;
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <main+0x788>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	3301      	adds	r3, #1
 8001238:	4a07      	ldr	r2, [pc, #28]	; (8001258 <main+0x788>)
 800123a:	6013      	str	r3, [r2, #0]
			HAL_Delay(1);
 800123c:	2001      	movs	r0, #1
 800123e:	f000 fed1 	bl	8001fe4 <HAL_Delay>
			if (wave > 7) {
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <main+0x788>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b07      	cmp	r3, #7
 8001248:	f77f ac7b 	ble.w	8000b42 <main+0x72>
				wave = 0;
 800124c:	4b02      	ldr	r3, [pc, #8]	; (8001258 <main+0x788>)
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
	while (1) {
 8001252:	e476      	b.n	8000b42 <main+0x72>
 8001254:	200002bc 	.word	0x200002bc
 8001258:	200003bc 	.word	0x200003bc
 800125c:	200003c8 	.word	0x200003c8
 8001260:	200002ac 	.word	0x200002ac

08001264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b09c      	sub	sp, #112	; 0x70
 8001268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800126e:	2228      	movs	r2, #40	; 0x28
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f005 ff28 	bl	80070c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001278:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001288:	463b      	mov	r3, r7
 800128a:	2234      	movs	r2, #52	; 0x34
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f005 ff1a 	bl	80070c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001294:	2302      	movs	r3, #2
 8001296:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001298:	2301      	movs	r3, #1
 800129a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800129c:	2310      	movs	r3, #16
 800129e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a0:	2302      	movs	r3, #2
 80012a2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012a4:	2300      	movs	r3, #0
 80012a6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80012a8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80012ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012b2:	4618      	mov	r0, r3
 80012b4:	f002 faee 	bl	8003894 <HAL_RCC_OscConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80012be:	f000 fa45 	bl	800174c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c2:	230f      	movs	r3, #15
 80012c4:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c6:	2302      	movs	r3, #2
 80012c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012dc:	2102      	movs	r1, #2
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 fb16 	bl	8004910 <HAL_RCC_ClockConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80012ea:	f000 fa2f 	bl	800174c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15|RCC_PERIPHCLK_ADC1;
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <SystemClock_Config+0xb4>)
 80012f0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 80012f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012fc:	463b      	mov	r3, r7
 80012fe:	4618      	mov	r0, r3
 8001300:	f003 fd3c 	bl	8004d7c <HAL_RCCEx_PeriphCLKConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800130a:	f000 fa1f 	bl	800174c <Error_Handler>
  }
}
 800130e:	bf00      	nop
 8001310:	3770      	adds	r7, #112	; 0x70
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	00040080 	.word	0x00040080

0800131c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001322:	463b      	mov	r3, r7
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
 8001330:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001332:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <MX_ADC1_Init+0xb4>)
 8001334:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001338:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800133a:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <MX_ADC1_Init+0xb4>)
 800133c:	2200      	movs	r2, #0
 800133e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <MX_ADC1_Init+0xb4>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001346:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <MX_ADC1_Init+0xb4>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800134c:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <MX_ADC1_Init+0xb4>)
 800134e:	2201      	movs	r2, #1
 8001350:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <MX_ADC1_Init+0xb4>)
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <MX_ADC1_Init+0xb4>)
 800135c:	2200      	movs	r2, #0
 800135e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <MX_ADC1_Init+0xb4>)
 8001362:	2201      	movs	r2, #1
 8001364:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <MX_ADC1_Init+0xb4>)
 8001368:	2200      	movs	r2, #0
 800136a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_ADC1_Init+0xb4>)
 800136e:	2201      	movs	r2, #1
 8001370:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <MX_ADC1_Init+0xb4>)
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <MX_ADC1_Init+0xb4>)
 800137c:	2204      	movs	r2, #4
 800137e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <MX_ADC1_Init+0xb4>)
 8001382:	2200      	movs	r2, #0
 8001384:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_ADC1_Init+0xb4>)
 8001388:	2200      	movs	r2, #0
 800138a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800138c:	4810      	ldr	r0, [pc, #64]	; (80013d0 <MX_ADC1_Init+0xb4>)
 800138e:	f000 fe6b 	bl	8002068 <HAL_ADC_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8001398:	f000 f9d8 	bl	800174c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800139c:	2301      	movs	r3, #1
 800139e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80013a8:	2307      	movs	r3, #7
 80013aa:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b4:	463b      	mov	r3, r7
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_ADC1_Init+0xb4>)
 80013ba:	f001 f877 	bl	80024ac <HAL_ADC_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80013c4:	f000 f9c2 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200000a0 	.word	0x200000a0

080013d4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80013e4:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_DAC_Init+0x4c>)
 80013e6:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <MX_DAC_Init+0x50>)
 80013e8:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80013ea:	480d      	ldr	r0, [pc, #52]	; (8001420 <MX_DAC_Init+0x4c>)
 80013ec:	f001 fd55 	bl	8002e9a <HAL_DAC_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_DAC_Init+0x26>
  {
    Error_Handler();
 80013f6:	f000 f9a9 	bl	800174c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T15_TRGO;
 80013fa:	231c      	movs	r3, #28
 80013fc:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2200      	movs	r2, #0
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_DAC_Init+0x4c>)
 800140a:	f001 fdf5 	bl	8002ff8 <HAL_DAC_ConfigChannel>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8001414:	f000 f99a 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000134 	.word	0x20000134
 8001424:	40007400 	.word	0x40007400

08001428 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08c      	sub	sp, #48	; 0x30
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	2224      	movs	r2, #36	; 0x24
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f005 fe46 	bl	80070c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	463b      	mov	r3, r7
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001446:	4b21      	ldr	r3, [pc, #132]	; (80014cc <MX_TIM2_Init+0xa4>)
 8001448:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800144c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800144e:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <MX_TIM2_Init+0xa4>)
 8001450:	2200      	movs	r2, #0
 8001452:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001454:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <MX_TIM2_Init+0xa4>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800145a:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <MX_TIM2_Init+0xa4>)
 800145c:	f04f 32ff 	mov.w	r2, #4294967295
 8001460:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001462:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <MX_TIM2_Init+0xa4>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001468:	4b18      	ldr	r3, [pc, #96]	; (80014cc <MX_TIM2_Init+0xa4>)
 800146a:	2200      	movs	r2, #0
 800146c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800146e:	2303      	movs	r3, #3
 8001470:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001472:	2302      	movs	r3, #2
 8001474:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001476:	2301      	movs	r3, #1
 8001478:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001482:	2302      	movs	r3, #2
 8001484:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001486:	2301      	movs	r3, #1
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	4619      	mov	r1, r3
 8001498:	480c      	ldr	r0, [pc, #48]	; (80014cc <MX_TIM2_Init+0xa4>)
 800149a:	f003 fea5 	bl	80051e8 <HAL_TIM_Encoder_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80014a4:	f000 f952 	bl	800174c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_TIM2_Init+0xa4>)
 80014b6:	f004 fb29 	bl	8005b0c <HAL_TIMEx_MasterConfigSynchronization>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80014c0:	f000 f944 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	3730      	adds	r7, #48	; 0x30
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	2000018c 	.word	0x2000018c

080014d0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80014ee:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <MX_TIM15_Init+0x98>)
 80014f0:	4a1e      	ldr	r2, [pc, #120]	; (800156c <MX_TIM15_Init+0x9c>)
 80014f2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 64-1;
 80014f4:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <MX_TIM15_Init+0x98>)
 80014f6:	223f      	movs	r2, #63	; 0x3f
 80014f8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fa:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <MX_TIM15_Init+0x98>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 100-1;
 8001500:	4b19      	ldr	r3, [pc, #100]	; (8001568 <MX_TIM15_Init+0x98>)
 8001502:	2263      	movs	r2, #99	; 0x63
 8001504:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001506:	4b18      	ldr	r3, [pc, #96]	; (8001568 <MX_TIM15_Init+0x98>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <MX_TIM15_Init+0x98>)
 800150e:	2200      	movs	r2, #0
 8001510:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <MX_TIM15_Init+0x98>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001518:	4813      	ldr	r0, [pc, #76]	; (8001568 <MX_TIM15_Init+0x98>)
 800151a:	f003 fdc1 	bl	80050a0 <HAL_TIM_Base_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8001524:	f000 f912 	bl	800174c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	4619      	mov	r1, r3
 8001534:	480c      	ldr	r0, [pc, #48]	; (8001568 <MX_TIM15_Init+0x98>)
 8001536:	f004 f8ca 	bl	80056ce <HAL_TIM_ConfigClockSource>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8001540:	f000 f904 	bl	800174c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001544:	2320      	movs	r3, #32
 8001546:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_TIM15_Init+0x98>)
 8001552:	f004 fadb 	bl	8005b0c <HAL_TIMEx_MasterConfigSynchronization>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 800155c:	f000 f8f6 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	3720      	adds	r7, #32
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200001d8 	.word	0x200001d8
 800156c:	40014000 	.word	0x40014000

08001570 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 8001576:	4a15      	ldr	r2, [pc, #84]	; (80015cc <MX_USART2_UART_Init+0x5c>)
 8001578:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 800157c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001580:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 8001596:	220c      	movs	r2, #12
 8001598:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 80015b4:	f004 fb2e 	bl	8005c14 <HAL_UART_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015be:	f000 f8c5 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000224 	.word	0x20000224
 80015cc:	40004400 	.word	0x40004400

080015d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <MX_DMA_Init+0x48>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	4a0f      	ldr	r2, [pc, #60]	; (8001618 <MX_DMA_Init+0x48>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6153      	str	r3, [r2, #20]
 80015e2:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <MX_DMA_Init+0x48>)
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	200b      	movs	r0, #11
 80015f4:	f001 fc1b 	bl	8002e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015f8:	200b      	movs	r0, #11
 80015fa:	f001 fc34 	bl	8002e66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2100      	movs	r1, #0
 8001602:	200d      	movs	r0, #13
 8001604:	f001 fc13 	bl	8002e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001608:	200d      	movs	r0, #13
 800160a:	f001 fc2c 	bl	8002e66 <HAL_NVIC_EnableIRQ>

}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000

0800161c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	; 0x28
 8001620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001632:	4b43      	ldr	r3, [pc, #268]	; (8001740 <MX_GPIO_Init+0x124>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	4a42      	ldr	r2, [pc, #264]	; (8001740 <MX_GPIO_Init+0x124>)
 8001638:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800163c:	6153      	str	r3, [r2, #20]
 800163e:	4b40      	ldr	r3, [pc, #256]	; (8001740 <MX_GPIO_Init+0x124>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800164a:	4b3d      	ldr	r3, [pc, #244]	; (8001740 <MX_GPIO_Init+0x124>)
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	4a3c      	ldr	r2, [pc, #240]	; (8001740 <MX_GPIO_Init+0x124>)
 8001650:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001654:	6153      	str	r3, [r2, #20]
 8001656:	4b3a      	ldr	r3, [pc, #232]	; (8001740 <MX_GPIO_Init+0x124>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	4b37      	ldr	r3, [pc, #220]	; (8001740 <MX_GPIO_Init+0x124>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	4a36      	ldr	r2, [pc, #216]	; (8001740 <MX_GPIO_Init+0x124>)
 8001668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166c:	6153      	str	r3, [r2, #20]
 800166e:	4b34      	ldr	r3, [pc, #208]	; (8001740 <MX_GPIO_Init+0x124>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	4b31      	ldr	r3, [pc, #196]	; (8001740 <MX_GPIO_Init+0x124>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	4a30      	ldr	r2, [pc, #192]	; (8001740 <MX_GPIO_Init+0x124>)
 8001680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001684:	6153      	str	r3, [r2, #20]
 8001686:	4b2e      	ldr	r3, [pc, #184]	; (8001740 <MX_GPIO_Init+0x124>)
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R2_Pin|LED_Pin|GPIO_PIN_14|GPIO_PIN_15
 8001692:	2200      	movs	r2, #0
 8001694:	f24e 4160 	movw	r1, #58464	; 0xe460
 8001698:	482a      	ldr	r0, [pc, #168]	; (8001744 <MX_GPIO_Init+0x128>)
 800169a:	f002 f8c9 	bl	8003830 <HAL_GPIO_WritePin>
                          |R4_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a8:	f002 f8c2 	bl	8003830 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Pulsador_Pin C3_Pin */
  GPIO_InitStruct.Pin = Pulsador_Pin|C3_Pin;
 80016ac:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 80016b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	4821      	ldr	r0, [pc, #132]	; (8001748 <MX_GPIO_Init+0x12c>)
 80016c2:	f001 ff2b 	bl	800351c <HAL_GPIO_Init>

  /*Configure GPIO pins : R2_Pin LED_Pin PB14 PB15
                           R4_Pin PB6 */
  GPIO_InitStruct.Pin = R2_Pin|LED_Pin|GPIO_PIN_14|GPIO_PIN_15
 80016c6:	f24e 4360 	movw	r3, #58464	; 0xe460
 80016ca:	617b      	str	r3, [r7, #20]
                          |R4_Pin|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016cc:	2301      	movs	r3, #1
 80016ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2300      	movs	r3, #0
 80016d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4619      	mov	r1, r3
 80016de:	4819      	ldr	r0, [pc, #100]	; (8001744 <MX_GPIO_Init+0x128>)
 80016e0:	f001 ff1c 	bl	800351c <HAL_GPIO_Init>

  /*Configure GPIO pin : R1_Pin */
  GPIO_InitStruct.Pin = R1_Pin;
 80016e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(R1_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001700:	f001 ff0c 	bl	800351c <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_Pin C2_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C2_Pin;
 8001704:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800170e:	2301      	movs	r3, #1
 8001710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4619      	mov	r1, r3
 8001718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171c:	f001 fefe 	bl	800351c <HAL_GPIO_Init>

  /*Configure GPIO pin : C1_Pin */
  GPIO_InitStruct.Pin = C1_Pin;
 8001720:	2308      	movs	r3, #8
 8001722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001724:	2300      	movs	r3, #0
 8001726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001728:	2301      	movs	r3, #1
 800172a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(C1_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	4804      	ldr	r0, [pc, #16]	; (8001744 <MX_GPIO_Init+0x128>)
 8001734:	f001 fef2 	bl	800351c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001738:	bf00      	nop
 800173a:	3728      	adds	r7, #40	; 0x28
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40021000 	.word	0x40021000
 8001744:	48000400 	.word	0x48000400
 8001748:	48000800 	.word	0x48000800

0800174c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001750:	b672      	cpsid	i
}
 8001752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001754:	e7fe      	b.n	8001754 <Error_Handler+0x8>
	...

08001758 <write_byte>:
};



void write_byte (uint8_t byte)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	e01a      	b.n	800179e <write_byte+0x46>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 8001768:	2200      	movs	r2, #0
 800176a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800176e:	4810      	ldr	r0, [pc, #64]	; (80017b0 <write_byte+0x58>)
 8001770:	f002 f85e 	bl	8003830 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800177a:	b2db      	uxtb	r3, r3
 800177c:	461a      	mov	r2, r3
 800177e:	2140      	movs	r1, #64	; 0x40
 8001780:	480b      	ldr	r0, [pc, #44]	; (80017b0 <write_byte+0x58>)
 8001782:	f002 f855 	bl	8003830 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 800178c:	2201      	movs	r2, #1
 800178e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001792:	4807      	ldr	r0, [pc, #28]	; (80017b0 <write_byte+0x58>)
 8001794:	f002 f84c 	bl	8003830 <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3301      	adds	r3, #1
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2b07      	cmp	r3, #7
 80017a2:	dde1      	ble.n	8001768 <write_byte+0x10>
	}
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	48000400 	.word	0x48000400

080017b4 <write_max_cmd>:


void write_max_cmd (uint8_t address, uint8_t cmd)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	460a      	mov	r2, r1
 80017be:	71fb      	strb	r3, [r7, #7]
 80017c0:	4613      	mov	r3, r2
 80017c2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 80017c4:	2200      	movs	r2, #0
 80017c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ca:	4812      	ldr	r0, [pc, #72]	; (8001814 <write_max_cmd+0x60>)
 80017cc:	f002 f830 	bl	8003830 <HAL_GPIO_WritePin>
	for (int i=0;i<num; i++)
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	e00a      	b.n	80017ec <write_max_cmd+0x38>
	{
		write_byte (address);
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ffbd 	bl	8001758 <write_byte>
		write_byte (cmd); 
 80017de:	79bb      	ldrb	r3, [r7, #6]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ffb9 	bl	8001758 <write_byte>
	for (int i=0;i<num; i++)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	3301      	adds	r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	ddf1      	ble.n	80017d6 <write_max_cmd+0x22>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 80017f2:	2200      	movs	r2, #0
 80017f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017f8:	4806      	ldr	r0, [pc, #24]	; (8001814 <write_max_cmd+0x60>)
 80017fa:	f002 f819 	bl	8003830 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 80017fe:	2201      	movs	r2, #1
 8001800:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001804:	4803      	ldr	r0, [pc, #12]	; (8001814 <write_max_cmd+0x60>)
 8001806:	f002 f813 	bl	8003830 <HAL_GPIO_WritePin>
}
 800180a:	bf00      	nop
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	48000400 	.word	0x48000400

08001818 <setled>:


void setled(uint8_t row, uint8_t col, uint8_t value)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
 8001822:	460b      	mov	r3, r1
 8001824:	71bb      	strb	r3, [r7, #6]
 8001826:	4613      	mov	r3, r2
 8001828:	717b      	strb	r3, [r7, #5]
  bitWrite(buffer[col], row, value);
 800182a:	797b      	ldrb	r3, [r7, #5]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00d      	beq.n	800184c <setled+0x34>
 8001830:	79bb      	ldrb	r3, [r7, #6]
 8001832:	4a2e      	ldr	r2, [pc, #184]	; (80018ec <setled+0xd4>)
 8001834:	5cd1      	ldrb	r1, [r2, r3]
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2201      	movs	r2, #1
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	b2da      	uxtb	r2, r3
 8001840:	79bb      	ldrb	r3, [r7, #6]
 8001842:	430a      	orrs	r2, r1
 8001844:	b2d1      	uxtb	r1, r2
 8001846:	4a29      	ldr	r2, [pc, #164]	; (80018ec <setled+0xd4>)
 8001848:	54d1      	strb	r1, [r2, r3]
 800184a:	e00e      	b.n	800186a <setled+0x52>
 800184c:	79bb      	ldrb	r3, [r7, #6]
 800184e:	4a27      	ldr	r2, [pc, #156]	; (80018ec <setled+0xd4>)
 8001850:	5cd1      	ldrb	r1, [r2, r3]
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	2201      	movs	r2, #1
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	b2da      	uxtb	r2, r3
 8001860:	79bb      	ldrb	r3, [r7, #6]
 8001862:	400a      	ands	r2, r1
 8001864:	b2d1      	uxtb	r1, r2
 8001866:	4a21      	ldr	r2, [pc, #132]	; (80018ec <setled+0xd4>)
 8001868:	54d1      	strb	r1, [r2, r3]

	int n = col / 8;
 800186a:	79bb      	ldrb	r3, [r7, #6]
 800186c:	08db      	lsrs	r3, r3, #3
 800186e:	b2db      	uxtb	r3, r3
 8001870:	613b      	str	r3, [r7, #16]
	int c = col % 8;
 8001872:	79bb      	ldrb	r3, [r7, #6]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW    
 800187a:	2200      	movs	r2, #0
 800187c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001880:	481b      	ldr	r0, [pc, #108]	; (80018f0 <setled+0xd8>)
 8001882:	f001 ffd5 	bl	8003830 <HAL_GPIO_WritePin>
	for (int i=0; i<num; i++) 
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	e01b      	b.n	80018c4 <setled+0xac>
	{
		if (i == (num-(n+1)))
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	425b      	negs	r3, r3
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	429a      	cmp	r2, r3
 8001894:	d10d      	bne.n	80018b2 <setled+0x9a>
		{
			write_byte (((c+1)));
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	3301      	adds	r3, #1
 800189c:	b2db      	uxtb	r3, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ff5a 	bl	8001758 <write_byte>
			write_byte (buffer[col]);
 80018a4:	79bb      	ldrb	r3, [r7, #6]
 80018a6:	4a11      	ldr	r2, [pc, #68]	; (80018ec <setled+0xd4>)
 80018a8:	5cd3      	ldrb	r3, [r2, r3]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff ff54 	bl	8001758 <write_byte>
 80018b0:	e005      	b.n	80018be <setled+0xa6>
		}
		else
		{
			write_byte (0);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f7ff ff50 	bl	8001758 <write_byte>
			write_byte (0);
 80018b8:	2000      	movs	r0, #0
 80018ba:	f7ff ff4d 	bl	8001758 <write_byte>
	for (int i=0; i<num; i++) 
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	3301      	adds	r3, #1
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	dde0      	ble.n	800188c <setled+0x74>
		}
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW 
 80018ca:	2200      	movs	r2, #0
 80018cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018d0:	4807      	ldr	r0, [pc, #28]	; (80018f0 <setled+0xd8>)
 80018d2:	f001 ffad 	bl	8003830 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH 
 80018d6:	2201      	movs	r2, #1
 80018d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018dc:	4804      	ldr	r0, [pc, #16]	; (80018f0 <setled+0xd8>)
 80018de:	f001 ffa7 	bl	8003830 <HAL_GPIO_WritePin>
}
 80018e2:	bf00      	nop
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200003e0 	.word	0x200003e0
 80018f0:	48000400 	.word	0x48000400

080018f4 <setrow>:


void setrow(uint8_t row, uint8_t value)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	460a      	mov	r2, r1
 80018fe:	71fb      	strb	r3, [r7, #7]
 8001900:	4613      	mov	r3, r2
 8001902:	71bb      	strb	r3, [r7, #6]
	int n = row / 8;
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	08db      	lsrs	r3, r3, #3
 8001908:	b2db      	uxtb	r3, r3
 800190a:	617b      	str	r3, [r7, #20]
	int r = row % 8;
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	613b      	str	r3, [r7, #16]
	
	uint8_t store = value;
 8001914:	79bb      	ldrb	r3, [r7, #6]
 8001916:	73fb      	strb	r3, [r7, #15]
	for (int i=0; i<num; i++) 
 8001918:	2300      	movs	r3, #0
 800191a:	61fb      	str	r3, [r7, #28]
 800191c:	e02d      	b.n	800197a <setrow+0x86>
	{
		if (i == ((n)))
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	429a      	cmp	r2, r3
 8001924:	d120      	bne.n	8001968 <setrow+0x74>
		{
//			for (int col=0+(8*n); col<8+(8*n); col++)  // uncomment this if the character looks inverted about X axis
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	3307      	adds	r3, #7
 800192c:	61bb      	str	r3, [r7, #24]
 800192e:	e015      	b.n	800195c <setrow+0x68>
			{
				bool b = value&0x80;
 8001930:	79bb      	ldrb	r3, [r7, #6]
 8001932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001936:	2b00      	cmp	r3, #0
 8001938:	bf14      	ite	ne
 800193a:	2301      	movne	r3, #1
 800193c:	2300      	moveq	r3, #0
 800193e:	73bb      	strb	r3, [r7, #14]
				setled (r, col, b);
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	b2d1      	uxtb	r1, r2
 8001948:	7bba      	ldrb	r2, [r7, #14]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ff64 	bl	8001818 <setled>
				value<<=1;
 8001950:	79bb      	ldrb	r3, [r7, #6]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	71bb      	strb	r3, [r7, #6]
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	3b01      	subs	r3, #1
 800195a:	61bb      	str	r3, [r7, #24]
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	429a      	cmp	r2, r3
 8001964:	dae4      	bge.n	8001930 <setrow+0x3c>
 8001966:	e005      	b.n	8001974 <setrow+0x80>
			}
		}
		else
		{
			write_byte (0);
 8001968:	2000      	movs	r0, #0
 800196a:	f7ff fef5 	bl	8001758 <write_byte>
			write_byte (0);
 800196e:	2000      	movs	r0, #0
 8001970:	f7ff fef2 	bl	8001758 <write_byte>
	for (int i=0; i<num; i++) 
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	3301      	adds	r3, #1
 8001978:	61fb      	str	r3, [r7, #28]
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	2b00      	cmp	r3, #0
 800197e:	ddce      	ble.n	800191e <setrow+0x2a>
		}
	}
	buffer_row[row] = store;
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	4903      	ldr	r1, [pc, #12]	; (8001990 <setrow+0x9c>)
 8001984:	7bfa      	ldrb	r2, [r7, #15]
 8001986:	54ca      	strb	r2, [r1, r3]
}
 8001988:	bf00      	nop
 800198a:	3720      	adds	r7, #32
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000430 	.word	0x20000430

08001994 <max_clear>:
}



void max_clear(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
	for (int i=0; i<num*8; i++) 
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	e008      	b.n	80019b2 <max_clear+0x1e>
		setrow(i,0);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff ffa4 	bl	80018f4 <setrow>
	for (int i=0; i<num*8; i++) 
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3301      	adds	r3, #1
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b07      	cmp	r3, #7
 80019b6:	ddf3      	ble.n	80019a0 <max_clear+0xc>
		
	for (int i=0; i<80; i++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	e00c      	b.n	80019d8 <max_clear+0x44>
	{
		buffer[i] = 0;
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <max_clear+0x54>)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
	  buffer_row[i] = 0;
 80019c8:	4a08      	ldr	r2, [pc, #32]	; (80019ec <max_clear+0x58>)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	4413      	add	r3, r2
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	3301      	adds	r3, #1
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	2b4f      	cmp	r3, #79	; 0x4f
 80019dc:	ddef      	ble.n	80019be <max_clear+0x2a>
	}
}
 80019de:	bf00      	nop
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200003e0 	.word	0x200003e0
 80019ec:	20000430 	.word	0x20000430

080019f0 <max_init>:
}



void max_init (uint8_t brightness)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	71fb      	strb	r3, [r7, #7]
	write_max_cmd(0x09, 0x00);       //  no decoding
 80019fa:	2100      	movs	r1, #0
 80019fc:	2009      	movs	r0, #9
 80019fe:	f7ff fed9 	bl	80017b4 <write_max_cmd>
	write_max_cmd(0x0b, 0x07);       //  scan limit = 8 LEDs
 8001a02:	2107      	movs	r1, #7
 8001a04:	200b      	movs	r0, #11
 8001a06:	f7ff fed5 	bl	80017b4 <write_max_cmd>
	write_max_cmd(0x0c, 0x01);       //  power down =0,normal mode = 1
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	200c      	movs	r0, #12
 8001a0e:	f7ff fed1 	bl	80017b4 <write_max_cmd>
	write_max_cmd(0x0f, 0x00);       //  no test display
 8001a12:	2100      	movs	r1, #0
 8001a14:	200f      	movs	r0, #15
 8001a16:	f7ff fecd 	bl	80017b4 <write_max_cmd>
	
	max_clear ();
 8001a1a:	f7ff ffbb 	bl	8001994 <max_clear>
	
	write_max_cmd(0x0a, brightness);       //  brightness intensity
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	4619      	mov	r1, r3
 8001a22:	200a      	movs	r0, #10
 8001a24:	f7ff fec6 	bl	80017b4 <write_max_cmd>
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a36:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <HAL_MspInit+0x44>)
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <HAL_MspInit+0x44>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6193      	str	r3, [r2, #24]
 8001a42:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <HAL_MspInit+0x44>)
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_MspInit+0x44>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	4a08      	ldr	r2, [pc, #32]	; (8001a74 <HAL_MspInit+0x44>)
 8001a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a58:	61d3      	str	r3, [r2, #28]
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <HAL_MspInit+0x44>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a66:	2007      	movs	r0, #7
 8001a68:	f001 f9d6 	bl	8002e18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40021000 	.word	0x40021000

08001a78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	; 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a98:	d14c      	bne.n	8001b34 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a9a:	4b28      	ldr	r3, [pc, #160]	; (8001b3c <HAL_ADC_MspInit+0xc4>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	4a27      	ldr	r2, [pc, #156]	; (8001b3c <HAL_ADC_MspInit+0xc4>)
 8001aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	6153      	str	r3, [r2, #20]
 8001aa6:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <HAL_ADC_MspInit+0xc4>)
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	4b22      	ldr	r3, [pc, #136]	; (8001b3c <HAL_ADC_MspInit+0xc4>)
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	4a21      	ldr	r2, [pc, #132]	; (8001b3c <HAL_ADC_MspInit+0xc4>)
 8001ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001abc:	6153      	str	r3, [r2, #20]
 8001abe:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <HAL_ADC_MspInit+0xc4>)
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aca:	2301      	movs	r3, #1
 8001acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae0:	f001 fd1c 	bl	800351c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <HAL_ADC_MspInit+0xc8>)
 8001ae6:	4a17      	ldr	r2, [pc, #92]	; (8001b44 <HAL_ADC_MspInit+0xcc>)
 8001ae8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <HAL_ADC_MspInit+0xc8>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <HAL_ADC_MspInit+0xc8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001af6:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_ADC_MspInit+0xc8>)
 8001af8:	2280      	movs	r2, #128	; 0x80
 8001afa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001afc:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <HAL_ADC_MspInit+0xc8>)
 8001afe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b02:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <HAL_ADC_MspInit+0xc8>)
 8001b06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b0a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <HAL_ADC_MspInit+0xc8>)
 8001b0e:	2220      	movs	r2, #32
 8001b10:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_ADC_MspInit+0xc8>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b18:	4809      	ldr	r0, [pc, #36]	; (8001b40 <HAL_ADC_MspInit+0xc8>)
 8001b1a:	f001 faf0 	bl	80030fe <HAL_DMA_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001b24:	f7ff fe12 	bl	800174c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <HAL_ADC_MspInit+0xc8>)
 8001b2c:	639a      	str	r2, [r3, #56]	; 0x38
 8001b2e:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <HAL_ADC_MspInit+0xc8>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b34:	bf00      	nop
 8001b36:	3728      	adds	r7, #40	; 0x28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	200000f0 	.word	0x200000f0
 8001b44:	40020008 	.word	0x40020008

08001b48 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a2c      	ldr	r2, [pc, #176]	; (8001c18 <HAL_DAC_MspInit+0xd0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d152      	bne.n	8001c10 <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001b6a:	4b2c      	ldr	r3, [pc, #176]	; (8001c1c <HAL_DAC_MspInit+0xd4>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	4a2b      	ldr	r2, [pc, #172]	; (8001c1c <HAL_DAC_MspInit+0xd4>)
 8001b70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b74:	61d3      	str	r3, [r2, #28]
 8001b76:	4b29      	ldr	r3, [pc, #164]	; (8001c1c <HAL_DAC_MspInit+0xd4>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b82:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <HAL_DAC_MspInit+0xd4>)
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	4a25      	ldr	r2, [pc, #148]	; (8001c1c <HAL_DAC_MspInit+0xd4>)
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b8c:	6153      	str	r3, [r2, #20]
 8001b8e:	4b23      	ldr	r3, [pc, #140]	; (8001c1c <HAL_DAC_MspInit+0xd4>)
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b9a:	2310      	movs	r3, #16
 8001b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb0:	f001 fcb4 	bl	800351c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <HAL_DAC_MspInit+0xd8>)
 8001bb6:	4a1b      	ldr	r2, [pc, #108]	; (8001c24 <HAL_DAC_MspInit+0xdc>)
 8001bb8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bba:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <HAL_DAC_MspInit+0xd8>)
 8001bbc:	2210      	movs	r2, #16
 8001bbe:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc0:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <HAL_DAC_MspInit+0xd8>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001bc6:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <HAL_DAC_MspInit+0xd8>)
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <HAL_DAC_MspInit+0xd8>)
 8001bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd2:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_DAC_MspInit+0xd8>)
 8001bd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bda:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <HAL_DAC_MspInit+0xd8>)
 8001bde:	2220      	movs	r2, #32
 8001be0:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <HAL_DAC_MspInit+0xd8>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001be8:	480d      	ldr	r0, [pc, #52]	; (8001c20 <HAL_DAC_MspInit+0xd8>)
 8001bea:	f001 fa88 	bl	80030fe <HAL_DMA_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8001bf4:	f7ff fdaa 	bl	800174c <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_DAC_MspInit+0xe0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <HAL_DAC_MspInit+0xe0>)
 8001bfe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c02:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <HAL_DAC_MspInit+0xd8>)
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <HAL_DAC_MspInit+0xd8>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001c10:	bf00      	nop
 8001c12:	3728      	adds	r7, #40	; 0x28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40007400 	.word	0x40007400
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	20000148 	.word	0x20000148
 8001c24:	40020030 	.word	0x40020030
 8001c28:	40010000 	.word	0x40010000

08001c2c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c4c:	d130      	bne.n	8001cb0 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	4a19      	ldr	r2, [pc, #100]	; (8001cb8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	61d3      	str	r3, [r2, #28]
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	4a13      	ldr	r2, [pc, #76]	; (8001cb8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c70:	6153      	str	r3, [r2, #20]
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8001c7e:	2322      	movs	r3, #34	; 0x22
 8001c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	4619      	mov	r1, r3
 8001c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9c:	f001 fc3e 	bl	800351c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	201c      	movs	r0, #28
 8001ca6:	f001 f8c2 	bl	8002e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001caa:	201c      	movs	r0, #28
 8001cac:	f001 f8db 	bl	8002e66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cb0:	bf00      	nop
 8001cb2:	3728      	adds	r7, #40	; 0x28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40021000 	.word	0x40021000

08001cbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <HAL_TIM_Base_MspInit+0x38>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d10b      	bne.n	8001ce6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <HAL_TIM_Base_MspInit+0x3c>)
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	4a09      	ldr	r2, [pc, #36]	; (8001cf8 <HAL_TIM_Base_MspInit+0x3c>)
 8001cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd8:	6193      	str	r3, [r2, #24]
 8001cda:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <HAL_TIM_Base_MspInit+0x3c>)
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001ce6:	bf00      	nop
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40014000 	.word	0x40014000
 8001cf8:	40021000 	.word	0x40021000

08001cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	; 0x28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a1b      	ldr	r2, [pc, #108]	; (8001d88 <HAL_UART_MspInit+0x8c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d130      	bne.n	8001d80 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HAL_UART_MspInit+0x90>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	4a1a      	ldr	r2, [pc, #104]	; (8001d8c <HAL_UART_MspInit+0x90>)
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d28:	61d3      	str	r3, [r2, #28]
 8001d2a:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <HAL_UART_MspInit+0x90>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HAL_UART_MspInit+0x90>)
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	4a14      	ldr	r2, [pc, #80]	; (8001d8c <HAL_UART_MspInit+0x90>)
 8001d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d40:	6153      	str	r3, [r2, #20]
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <HAL_UART_MspInit+0x90>)
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d4e:	230c      	movs	r3, #12
 8001d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d5e:	2307      	movs	r3, #7
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	4619      	mov	r1, r3
 8001d68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d6c:	f001 fbd6 	bl	800351c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2100      	movs	r1, #0
 8001d74:	2026      	movs	r0, #38	; 0x26
 8001d76:	f001 f85a 	bl	8002e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d7a:	2026      	movs	r0, #38	; 0x26
 8001d7c:	f001 f873 	bl	8002e66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d80:	bf00      	nop
 8001d82:	3728      	adds	r7, #40	; 0x28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40004400 	.word	0x40004400
 8001d8c:	40021000 	.word	0x40021000

08001d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <NMI_Handler+0x4>

08001d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d9a:	e7fe      	b.n	8001d9a <HardFault_Handler+0x4>

08001d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <MemManage_Handler+0x4>

08001da2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da6:	e7fe      	b.n	8001da6 <BusFault_Handler+0x4>

08001da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <UsageFault_Handler+0x4>

08001dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ddc:	f000 f8e2 	bl	8001fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001de8:	4802      	ldr	r0, [pc, #8]	; (8001df4 <DMA1_Channel1_IRQHandler+0x10>)
 8001dea:	f001 faa5 	bl	8003338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200000f0 	.word	0x200000f0

08001df8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001dfc:	4802      	ldr	r0, [pc, #8]	; (8001e08 <DMA1_Channel3_IRQHandler+0x10>)
 8001dfe:	f001 fa9b 	bl	8003338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000148 	.word	0x20000148

08001e0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <TIM2_IRQHandler+0x10>)
 8001e12:	f003 fb3d 	bl	8005490 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	2000018c 	.word	0x2000018c

08001e20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <USART2_IRQHandler+0x10>)
 8001e26:	f004 f811 	bl	8005e4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000224 	.word	0x20000224

08001e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e3c:	4a14      	ldr	r2, [pc, #80]	; (8001e90 <_sbrk+0x5c>)
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <_sbrk+0x60>)
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e48:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <_sbrk+0x64>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d102      	bne.n	8001e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <_sbrk+0x64>)
 8001e52:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <_sbrk+0x68>)
 8001e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <_sbrk+0x64>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d207      	bcs.n	8001e74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e64:	f005 f906 	bl	8007074 <__errno>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	220c      	movs	r2, #12
 8001e6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e72:	e009      	b.n	8001e88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <_sbrk+0x64>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <_sbrk+0x64>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	4a05      	ldr	r2, [pc, #20]	; (8001e98 <_sbrk+0x64>)
 8001e84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e86:	68fb      	ldr	r3, [r7, #12]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20004000 	.word	0x20004000
 8001e94:	00000400 	.word	0x00000400
 8001e98:	20000480 	.word	0x20000480
 8001e9c:	20000498 	.word	0x20000498

08001ea0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <SystemInit+0x20>)
 8001ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eaa:	4a05      	ldr	r2, [pc, #20]	; (8001ec0 <SystemInit+0x20>)
 8001eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001efc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ec8:	f7ff ffea 	bl	8001ea0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ecc:	480c      	ldr	r0, [pc, #48]	; (8001f00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ece:	490d      	ldr	r1, [pc, #52]	; (8001f04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ed0:	4a0d      	ldr	r2, [pc, #52]	; (8001f08 <LoopForever+0xe>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed4:	e002      	b.n	8001edc <LoopCopyDataInit>

08001ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eda:	3304      	adds	r3, #4

08001edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee0:	d3f9      	bcc.n	8001ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ee4:	4c0a      	ldr	r4, [pc, #40]	; (8001f10 <LoopForever+0x16>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee8:	e001      	b.n	8001eee <LoopFillZerobss>

08001eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eec:	3204      	adds	r2, #4

08001eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef0:	d3fb      	bcc.n	8001eea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ef2:	f005 f8c5 	bl	8007080 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ef6:	f7fe fdeb 	bl	8000ad0 <main>

08001efa <LoopForever>:

LoopForever:
    b LoopForever
 8001efa:	e7fe      	b.n	8001efa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001efc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f04:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001f08:	08007a5c 	.word	0x08007a5c
  ldr r2, =_sbss
 8001f0c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001f10:	20000498 	.word	0x20000498

08001f14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f14:	e7fe      	b.n	8001f14 <ADC1_IRQHandler>
	...

08001f18 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <HAL_Init+0x28>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a07      	ldr	r2, [pc, #28]	; (8001f40 <HAL_Init+0x28>)
 8001f22:	f043 0310 	orr.w	r3, r3, #16
 8001f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f28:	2003      	movs	r0, #3
 8001f2a:	f000 ff75 	bl	8002e18 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f000 f808 	bl	8001f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f34:	f7ff fd7c 	bl	8001a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40022000 	.word	0x40022000

08001f44 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_InitTick+0x54>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_InitTick+0x58>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	4619      	mov	r1, r3
 8001f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 ff8d 	bl	8002e82 <HAL_SYSTICK_Config>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e00e      	b.n	8001f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b0f      	cmp	r3, #15
 8001f76:	d80a      	bhi.n	8001f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f80:	f000 ff55 	bl	8002e2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f84:	4a06      	ldr	r2, [pc, #24]	; (8001fa0 <HAL_InitTick+0x5c>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e000      	b.n	8001f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000014 	.word	0x20000014
 8001f9c:	2000001c 	.word	0x2000001c
 8001fa0:	20000018 	.word	0x20000018

08001fa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_IncTick+0x20>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_IncTick+0x24>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <HAL_IncTick+0x24>)
 8001fb6:	6013      	str	r3, [r2, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	2000001c 	.word	0x2000001c
 8001fc8:	20000484 	.word	0x20000484

08001fcc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return uwTick;  
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_GetTick+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000484 	.word	0x20000484

08001fe4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fec:	f7ff ffee 	bl	8001fcc <HAL_GetTick>
 8001ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffc:	d005      	beq.n	800200a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <HAL_Delay+0x44>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800200a:	bf00      	nop
 800200c:	f7ff ffde 	bl	8001fcc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	429a      	cmp	r2, r3
 800201a:	d8f7      	bhi.n	800200c <HAL_Delay+0x28>
  {
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	2000001c 	.word	0x2000001c

0800202c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b09a      	sub	sp, #104	; 0x68
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002070:	2300      	movs	r3, #0
 8002072:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002076:	2300      	movs	r3, #0
 8002078:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e169      	b.n	800235c <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	2b00      	cmp	r3, #0
 8002098:	d176      	bne.n	8002188 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d152      	bne.n	8002148 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff fcdb 	bl	8001a78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d13b      	bne.n	8002148 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 fd6b 	bl	8002bac <ADC_Disable>
 80020d6:	4603      	mov	r3, r0
 80020d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d12f      	bne.n	8002148 <HAL_ADC_Init+0xe0>
 80020e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d12b      	bne.n	8002148 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020f8:	f023 0302 	bic.w	r3, r3, #2
 80020fc:	f043 0202 	orr.w	r2, r3, #2
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002112:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002122:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002124:	4b8f      	ldr	r3, [pc, #572]	; (8002364 <HAL_ADC_Init+0x2fc>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a8f      	ldr	r2, [pc, #572]	; (8002368 <HAL_ADC_Init+0x300>)
 800212a:	fba2 2303 	umull	r2, r3, r2, r3
 800212e:	0c9a      	lsrs	r2, r3, #18
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800213a:	e002      	b.n	8002142 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	3b01      	subs	r3, #1
 8002140:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f9      	bne.n	800213c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d007      	beq.n	8002166 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002164:	d110      	bne.n	8002188 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f023 0312 	bic.w	r3, r3, #18
 800216e:	f043 0210 	orr.w	r2, r3, #16
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	f043 0201 	orr.w	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	f003 0310 	and.w	r3, r3, #16
 8002190:	2b00      	cmp	r3, #0
 8002192:	f040 80d6 	bne.w	8002342 <HAL_ADC_Init+0x2da>
 8002196:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800219a:	2b00      	cmp	r3, #0
 800219c:	f040 80d1 	bne.w	8002342 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f040 80c9 	bne.w	8002342 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021b8:	f043 0202 	orr.w	r2, r3, #2
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021c0:	4b6a      	ldr	r3, [pc, #424]	; (800236c <HAL_ADC_Init+0x304>)
 80021c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80021c4:	2300      	movs	r3, #0
 80021c6:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d108      	bne.n	80021e8 <HAL_ADC_Init+0x180>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_ADC_Init+0x180>
 80021e4:	2301      	movs	r3, #1
 80021e6:	e000      	b.n	80021ea <HAL_ADC_Init+0x182>
 80021e8:	2300      	movs	r3, #0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d11c      	bne.n	8002228 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021ee:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d010      	beq.n	8002216 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d107      	bne.n	8002210 <HAL_ADC_Init+0x1a8>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_ADC_Init+0x1a8>
 800220c:	2301      	movs	r3, #1
 800220e:	e000      	b.n	8002212 <HAL_ADC_Init+0x1aa>
 8002210:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002212:	2b00      	cmp	r3, #0
 8002214:	d108      	bne.n	8002228 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	431a      	orrs	r2, r3
 8002224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002226:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	7e5b      	ldrb	r3, [r3, #25]
 800222c:	035b      	lsls	r3, r3, #13
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002232:	2a01      	cmp	r2, #1
 8002234:	d002      	beq.n	800223c <HAL_ADC_Init+0x1d4>
 8002236:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800223a:	e000      	b.n	800223e <HAL_ADC_Init+0x1d6>
 800223c:	2200      	movs	r2, #0
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	431a      	orrs	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	4313      	orrs	r3, r2
 800224c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800224e:	4313      	orrs	r3, r2
 8002250:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d11b      	bne.n	8002294 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	7e5b      	ldrb	r3, [r3, #25]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d109      	bne.n	8002278 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	3b01      	subs	r3, #1
 800226a:	045a      	lsls	r2, r3, #17
 800226c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800226e:	4313      	orrs	r3, r2
 8002270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002274:	663b      	str	r3, [r7, #96]	; 0x60
 8002276:	e00d      	b.n	8002294 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002280:	f043 0220 	orr.w	r2, r3, #32
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228c:	f043 0201 	orr.w	r2, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	2b01      	cmp	r3, #1
 800229a:	d007      	beq.n	80022ac <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	4313      	orrs	r3, r2
 80022a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022a8:	4313      	orrs	r3, r2
 80022aa:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d114      	bne.n	80022e4 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022c8:	f023 0302 	bic.w	r3, r3, #2
 80022cc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	7e1b      	ldrb	r3, [r3, #24]
 80022d2:	039a      	lsls	r2, r3, #14
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	4313      	orrs	r3, r2
 80022de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022e0:	4313      	orrs	r3, r2
 80022e2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	4b21      	ldr	r3, [pc, #132]	; (8002370 <HAL_ADC_Init+0x308>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80022f4:	430b      	orrs	r3, r1
 80022f6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d10c      	bne.n	800231a <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f023 010f 	bic.w	r1, r3, #15
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	1e5a      	subs	r2, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
 8002318:	e007      	b.n	800232a <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 020f 	bic.w	r2, r2, #15
 8002328:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	f023 0303 	bic.w	r3, r3, #3
 8002338:	f043 0201 	orr.w	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	641a      	str	r2, [r3, #64]	; 0x40
 8002340:	e00a      	b.n	8002358 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f023 0312 	bic.w	r3, r3, #18
 800234a:	f043 0210 	orr.w	r2, r3, #16
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002352:	2301      	movs	r3, #1
 8002354:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002358:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800235c:	4618      	mov	r0, r3
 800235e:	3768      	adds	r7, #104	; 0x68
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000014 	.word	0x20000014
 8002368:	431bde83 	.word	0x431bde83
 800236c:	50000300 	.word	0x50000300
 8002370:	fff0c007 	.word	0xfff0c007

08002374 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	2b00      	cmp	r3, #0
 8002390:	d17e      	bne.n	8002490 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_ADC_Start_DMA+0x2c>
 800239c:	2302      	movs	r3, #2
 800239e:	e07a      	b.n	8002496 <HAL_ADC_Start_DMA+0x122>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 fb9b 	bl	8002ae4 <ADC_Enable>
 80023ae:	4603      	mov	r3, r0
 80023b0:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80023b2:	7dfb      	ldrb	r3, [r7, #23]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d166      	bne.n	8002486 <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023c0:	f023 0301 	bic.w	r3, r3, #1
 80023c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d007      	beq.n	80023f6 <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002402:	d106      	bne.n	8002412 <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002408:	f023 0206 	bic.w	r2, r3, #6
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	645a      	str	r2, [r3, #68]	; 0x44
 8002410:	e002      	b.n	8002418 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002424:	4a1e      	ldr	r2, [pc, #120]	; (80024a0 <HAL_ADC_Start_DMA+0x12c>)
 8002426:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242c:	4a1d      	ldr	r2, [pc, #116]	; (80024a4 <HAL_ADC_Start_DMA+0x130>)
 800242e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002434:	4a1c      	ldr	r2, [pc, #112]	; (80024a8 <HAL_ADC_Start_DMA+0x134>)
 8002436:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	221c      	movs	r2, #28
 800243e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0210 	orr.w	r2, r2, #16
 800244e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0201 	orr.w	r2, r2, #1
 800245e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	3340      	adds	r3, #64	; 0x40
 800246a:	4619      	mov	r1, r3
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f000 fe8c 	bl	800318c <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0204 	orr.w	r2, r2, #4
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	e006      	b.n	8002494 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800248e:	e001      	b.n	8002494 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002490:	2302      	movs	r3, #2
 8002492:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002494:	7dfb      	ldrb	r3, [r7, #23]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	08002a19 	.word	0x08002a19
 80024a4:	08002a93 	.word	0x08002a93
 80024a8:	08002aaf 	.word	0x08002aaf

080024ac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b09b      	sub	sp, #108	; 0x6c
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x22>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e299      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x556>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f040 827d 	bne.w	80029e0 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d81c      	bhi.n	8002528 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	461a      	mov	r2, r3
 8002502:	231f      	movs	r3, #31
 8002504:	4093      	lsls	r3, r2
 8002506:	43db      	mvns	r3, r3
 8002508:	4019      	ands	r1, r3
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4413      	add	r3, r2
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	fa00 f203 	lsl.w	r2, r0, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	631a      	str	r2, [r3, #48]	; 0x30
 8002526:	e063      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b09      	cmp	r3, #9
 800252e:	d81e      	bhi.n	800256e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	4413      	add	r3, r2
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	3b1e      	subs	r3, #30
 8002544:	221f      	movs	r2, #31
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	4019      	ands	r1, r3
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	4413      	add	r3, r2
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	3b1e      	subs	r3, #30
 8002560:	fa00 f203 	lsl.w	r2, r0, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	635a      	str	r2, [r3, #52]	; 0x34
 800256c:	e040      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b0e      	cmp	r3, #14
 8002574:	d81e      	bhi.n	80025b4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4413      	add	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	3b3c      	subs	r3, #60	; 0x3c
 800258a:	221f      	movs	r2, #31
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	4019      	ands	r1, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	4413      	add	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	3b3c      	subs	r3, #60	; 0x3c
 80025a6:	fa00 f203 	lsl.w	r2, r0, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	639a      	str	r2, [r3, #56]	; 0x38
 80025b2:	e01d      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	4413      	add	r3, r2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	3b5a      	subs	r3, #90	; 0x5a
 80025c8:	221f      	movs	r2, #31
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	4019      	ands	r1, r3
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	4413      	add	r3, r2
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	3b5a      	subs	r3, #90	; 0x5a
 80025e4:	fa00 f203 	lsl.w	r2, r0, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f040 80e5 	bne.w	80027ca <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b09      	cmp	r3, #9
 8002606:	d91c      	bls.n	8002642 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6999      	ldr	r1, [r3, #24]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	4613      	mov	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	3b1e      	subs	r3, #30
 800261a:	2207      	movs	r2, #7
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	4019      	ands	r1, r3
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	6898      	ldr	r0, [r3, #8]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	3b1e      	subs	r3, #30
 8002634:	fa00 f203 	lsl.w	r2, r0, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	619a      	str	r2, [r3, #24]
 8002640:	e019      	b.n	8002676 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6959      	ldr	r1, [r3, #20]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	2207      	movs	r2, #7
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	4019      	ands	r1, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	6898      	ldr	r0, [r3, #8]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4613      	mov	r3, r2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4413      	add	r3, r2
 800266a:	fa00 f203 	lsl.w	r2, r0, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	08db      	lsrs	r3, r3, #3
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	3b01      	subs	r3, #1
 8002694:	2b03      	cmp	r3, #3
 8002696:	d84f      	bhi.n	8002738 <HAL_ADC_ConfigChannel+0x28c>
 8002698:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <HAL_ADC_ConfigChannel+0x1f4>)
 800269a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269e:	bf00      	nop
 80026a0:	080026b1 	.word	0x080026b1
 80026a4:	080026d3 	.word	0x080026d3
 80026a8:	080026f5 	.word	0x080026f5
 80026ac:	08002717 	.word	0x08002717
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026b6:	4b99      	ldr	r3, [pc, #612]	; (800291c <HAL_ADC_ConfigChannel+0x470>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	6812      	ldr	r2, [r2, #0]
 80026be:	0691      	lsls	r1, r2, #26
 80026c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026c2:	430a      	orrs	r2, r1
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80026ce:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80026d0:	e07e      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80026d8:	4b90      	ldr	r3, [pc, #576]	; (800291c <HAL_ADC_ConfigChannel+0x470>)
 80026da:	4013      	ands	r3, r2
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	0691      	lsls	r1, r2, #26
 80026e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026e4:	430a      	orrs	r2, r1
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80026f0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80026f2:	e06d      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80026fa:	4b88      	ldr	r3, [pc, #544]	; (800291c <HAL_ADC_ConfigChannel+0x470>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	6812      	ldr	r2, [r2, #0]
 8002702:	0691      	lsls	r1, r2, #26
 8002704:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002706:	430a      	orrs	r2, r1
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002712:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002714:	e05c      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800271c:	4b7f      	ldr	r3, [pc, #508]	; (800291c <HAL_ADC_ConfigChannel+0x470>)
 800271e:	4013      	ands	r3, r2
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	0691      	lsls	r1, r2, #26
 8002726:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002728:	430a      	orrs	r2, r1
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002734:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002736:	e04b      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800273e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	069b      	lsls	r3, r3, #26
 8002748:	429a      	cmp	r2, r3
 800274a:	d107      	bne.n	800275c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800275a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002762:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	069b      	lsls	r3, r3, #26
 800276c:	429a      	cmp	r2, r3
 800276e:	d107      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800277e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002786:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	069b      	lsls	r3, r3, #26
 8002790:	429a      	cmp	r2, r3
 8002792:	d107      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027a2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	069b      	lsls	r3, r3, #26
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d10a      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027c6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80027c8:	e001      	b.n	80027ce <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80027ca:	bf00      	nop
 80027cc:	e000      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80027ce:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d108      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x344>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x344>
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x346>
 80027f0:	2300      	movs	r3, #0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f040 80ff 	bne.w	80029f6 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d00f      	beq.n	8002820 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2201      	movs	r2, #1
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43da      	mvns	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	400a      	ands	r2, r1
 800281a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800281e:	e049      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2201      	movs	r2, #1
 800282e:	409a      	lsls	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b09      	cmp	r3, #9
 8002840:	d91c      	bls.n	800287c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6999      	ldr	r1, [r3, #24]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4613      	mov	r3, r2
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	4413      	add	r3, r2
 8002852:	3b1b      	subs	r3, #27
 8002854:	2207      	movs	r2, #7
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43db      	mvns	r3, r3
 800285c:	4019      	ands	r1, r3
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6898      	ldr	r0, [r3, #8]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	4613      	mov	r3, r2
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	4413      	add	r3, r2
 800286c:	3b1b      	subs	r3, #27
 800286e:	fa00 f203 	lsl.w	r2, r0, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	619a      	str	r2, [r3, #24]
 800287a:	e01b      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6959      	ldr	r1, [r3, #20]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	4613      	mov	r3, r2
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4413      	add	r3, r2
 800288e:	2207      	movs	r2, #7
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	4019      	ands	r1, r3
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	6898      	ldr	r0, [r3, #8]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	4613      	mov	r3, r2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	4413      	add	r3, r2
 80028a8:	fa00 f203 	lsl.w	r2, r0, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028b4:	4b1a      	ldr	r3, [pc, #104]	; (8002920 <HAL_ADC_ConfigChannel+0x474>)
 80028b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b10      	cmp	r3, #16
 80028be:	d105      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80028c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d014      	beq.n	80028f6 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80028d0:	2b11      	cmp	r3, #17
 80028d2:	d105      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80028d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80028e4:	2b12      	cmp	r3, #18
 80028e6:	f040 8086 	bne.w	80029f6 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80028ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d17f      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	2b01      	cmp	r3, #1
 8002906:	d10d      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x478>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b01      	cmp	r3, #1
 8002914:	d106      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x478>
 8002916:	2301      	movs	r3, #1
 8002918:	e005      	b.n	8002926 <HAL_ADC_ConfigChannel+0x47a>
 800291a:	bf00      	nop
 800291c:	83fff000 	.word	0x83fff000
 8002920:	50000300 	.word	0x50000300
 8002924:	2300      	movs	r3, #0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d150      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800292a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800292c:	2b00      	cmp	r3, #0
 800292e:	d010      	beq.n	8002952 <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	2b01      	cmp	r3, #1
 800293a:	d107      	bne.n	800294c <HAL_ADC_ConfigChannel+0x4a0>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_ADC_ConfigChannel+0x4a0>
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <HAL_ADC_ConfigChannel+0x4a2>
 800294c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800294e:	2b00      	cmp	r3, #0
 8002950:	d13c      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b10      	cmp	r3, #16
 8002958:	d11d      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x4ea>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002962:	d118      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800296c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800296e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002970:	4b27      	ldr	r3, [pc, #156]	; (8002a10 <HAL_ADC_ConfigChannel+0x564>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a27      	ldr	r2, [pc, #156]	; (8002a14 <HAL_ADC_ConfigChannel+0x568>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	0c9a      	lsrs	r2, r3, #18
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002986:	e002      	b.n	800298e <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	3b01      	subs	r3, #1
 800298c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f9      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002994:	e02e      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b11      	cmp	r3, #17
 800299c:	d10b      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x50a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029a6:	d106      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80029a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80029b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029b2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029b4:	e01e      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b12      	cmp	r3, #18
 80029bc:	d11a      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80029be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80029c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029c8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029ca:	e013      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	f043 0220 	orr.w	r2, r3, #32
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80029de:	e00a      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	f043 0220 	orr.w	r2, r3, #32
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80029f2:	e000      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029f4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80029fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	376c      	adds	r7, #108	; 0x6c
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	20000014 	.word	0x20000014
 8002a14:	431bde83 	.word	0x431bde83

08002a18 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d126      	bne.n	8002a80 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d115      	bne.n	8002a78 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d111      	bne.n	8002a78 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d105      	bne.n	8002a78 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	f043 0201 	orr.w	r2, r3, #1
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f7ff fad7 	bl	800202c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002a7e:	e004      	b.n	8002a8a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	4798      	blx	r3
}
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b084      	sub	sp, #16
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f7ff facd 	bl	8002040 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b084      	sub	sp, #16
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002acc:	f043 0204 	orr.w	r2, r3, #4
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f7ff fabd 	bl	8002054 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d108      	bne.n	8002b10 <ADC_Enable+0x2c>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <ADC_Enable+0x2c>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <ADC_Enable+0x2e>
 8002b10:	2300      	movs	r3, #0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d143      	bne.n	8002b9e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	4b22      	ldr	r3, [pc, #136]	; (8002ba8 <ADC_Enable+0xc4>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00d      	beq.n	8002b40 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	f043 0210 	orr.w	r2, r3, #16
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b34:	f043 0201 	orr.w	r2, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e02f      	b.n	8002ba0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002b50:	f7ff fa3c 	bl	8001fcc <HAL_GetTick>
 8002b54:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b56:	e01b      	b.n	8002b90 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b58:	f7ff fa38 	bl	8001fcc <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d914      	bls.n	8002b90 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d00d      	beq.n	8002b90 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	f043 0210 	orr.w	r2, r3, #16
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b84:	f043 0201 	orr.w	r2, r3, #1
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e007      	b.n	8002ba0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d1dc      	bne.n	8002b58 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	8000003f 	.word	0x8000003f

08002bac <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d108      	bne.n	8002bd8 <ADC_Disable+0x2c>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <ADC_Disable+0x2c>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <ADC_Disable+0x2e>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d047      	beq.n	8002c6e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 030d 	and.w	r3, r3, #13
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d10f      	bne.n	8002c0c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0202 	orr.w	r2, r2, #2
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2203      	movs	r2, #3
 8002c02:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002c04:	f7ff f9e2 	bl	8001fcc <HAL_GetTick>
 8002c08:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c0a:	e029      	b.n	8002c60 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f043 0210 	orr.w	r2, r3, #16
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1c:	f043 0201 	orr.w	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e023      	b.n	8002c70 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c28:	f7ff f9d0 	bl	8001fcc <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d914      	bls.n	8002c60 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d10d      	bne.n	8002c60 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f043 0210 	orr.w	r2, r3, #16
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c54:	f043 0201 	orr.w	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e007      	b.n	8002c70 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d0dc      	beq.n	8002c28 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c88:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <__NVIC_SetPriorityGrouping+0x44>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c94:	4013      	ands	r3, r2
 8002c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002caa:	4a04      	ldr	r2, [pc, #16]	; (8002cbc <__NVIC_SetPriorityGrouping+0x44>)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	60d3      	str	r3, [r2, #12]
}
 8002cb0:	bf00      	nop
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cc4:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	0a1b      	lsrs	r3, r3, #8
 8002cca:	f003 0307 	and.w	r3, r3, #7
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	db0b      	blt.n	8002d06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	f003 021f 	and.w	r2, r3, #31
 8002cf4:	4907      	ldr	r1, [pc, #28]	; (8002d14 <__NVIC_EnableIRQ+0x38>)
 8002cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	e000e100 	.word	0xe000e100

08002d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	6039      	str	r1, [r7, #0]
 8002d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	db0a      	blt.n	8002d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	490c      	ldr	r1, [pc, #48]	; (8002d64 <__NVIC_SetPriority+0x4c>)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	0112      	lsls	r2, r2, #4
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d40:	e00a      	b.n	8002d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	4908      	ldr	r1, [pc, #32]	; (8002d68 <__NVIC_SetPriority+0x50>)
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	3b04      	subs	r3, #4
 8002d50:	0112      	lsls	r2, r2, #4
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	440b      	add	r3, r1
 8002d56:	761a      	strb	r2, [r3, #24]
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000e100 	.word	0xe000e100
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b089      	sub	sp, #36	; 0x24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f1c3 0307 	rsb	r3, r3, #7
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	bf28      	it	cs
 8002d8a:	2304      	movcs	r3, #4
 8002d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	3304      	adds	r3, #4
 8002d92:	2b06      	cmp	r3, #6
 8002d94:	d902      	bls.n	8002d9c <NVIC_EncodePriority+0x30>
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	3b03      	subs	r3, #3
 8002d9a:	e000      	b.n	8002d9e <NVIC_EncodePriority+0x32>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da0:	f04f 32ff 	mov.w	r2, #4294967295
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43da      	mvns	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	401a      	ands	r2, r3
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002db4:	f04f 31ff 	mov.w	r1, #4294967295
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbe:	43d9      	mvns	r1, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc4:	4313      	orrs	r3, r2
         );
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3724      	adds	r7, #36	; 0x24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002de4:	d301      	bcc.n	8002dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002de6:	2301      	movs	r3, #1
 8002de8:	e00f      	b.n	8002e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dea:	4a0a      	ldr	r2, [pc, #40]	; (8002e14 <SysTick_Config+0x40>)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002df2:	210f      	movs	r1, #15
 8002df4:	f04f 30ff 	mov.w	r0, #4294967295
 8002df8:	f7ff ff8e 	bl	8002d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dfc:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <SysTick_Config+0x40>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e02:	4b04      	ldr	r3, [pc, #16]	; (8002e14 <SysTick_Config+0x40>)
 8002e04:	2207      	movs	r2, #7
 8002e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	e000e010 	.word	0xe000e010

08002e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff ff29 	bl	8002c78 <__NVIC_SetPriorityGrouping>
}
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b086      	sub	sp, #24
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	4603      	mov	r3, r0
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
 8002e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e40:	f7ff ff3e 	bl	8002cc0 <__NVIC_GetPriorityGrouping>
 8002e44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	6978      	ldr	r0, [r7, #20]
 8002e4c:	f7ff ff8e 	bl	8002d6c <NVIC_EncodePriority>
 8002e50:	4602      	mov	r2, r0
 8002e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e56:	4611      	mov	r1, r2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff ff5d 	bl	8002d18 <__NVIC_SetPriority>
}
 8002e5e:	bf00      	nop
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff ff31 	bl	8002cdc <__NVIC_EnableIRQ>
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff ffa2 	bl	8002dd4 <SysTick_Config>
 8002e90:	4603      	mov	r3, r0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e014      	b.n	8002ed6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	791b      	ldrb	r3, [r3, #4]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d105      	bne.n	8002ec2 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7fe fe43 	bl	8001b48 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	795b      	ldrb	r3, [r3, #5]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_DAC_Start_DMA+0x1e>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e053      	b.n	8002fe2 <HAL_DAC_Start_DMA+0xc6>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2202      	movs	r2, #2
 8002f44:	711a      	strb	r2, [r3, #4]
    
  /* Set the DMA transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	4a28      	ldr	r2, [pc, #160]	; (8002fec <HAL_DAC_Start_DMA+0xd0>)
 8002f4c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set the DMA half transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	4a27      	ldr	r2, [pc, #156]	; (8002ff0 <HAL_DAC_Start_DMA+0xd4>)
 8002f54:	62da      	str	r2, [r3, #44]	; 0x2c
    
  /* Set the DMA error callback for channel1 */
  hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	4a26      	ldr	r2, [pc, #152]	; (8002ff4 <HAL_DAC_Start_DMA+0xd8>)
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Enable the selected DAC channel1 DMA request */
  SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f6c:	601a      	str	r2, [r3, #0]
    
  /* Case of use of channel 1U */
  switch(Alignment)
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d013      	beq.n	8002f9c <HAL_DAC_Start_DMA+0x80>
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d815      	bhi.n	8002fa6 <HAL_DAC_Start_DMA+0x8a>
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <HAL_DAC_Start_DMA+0x6c>
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d005      	beq.n	8002f92 <HAL_DAC_Start_DMA+0x76>
    case DAC_ALIGN_8B_R:
      /* Get DHR8R1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
      break;
    default:
      break;
 8002f86:	e00e      	b.n	8002fa6 <HAL_DAC_Start_DMA+0x8a>
      tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	3308      	adds	r3, #8
 8002f8e:	617b      	str	r3, [r7, #20]
      break;
 8002f90:	e00a      	b.n	8002fa8 <HAL_DAC_Start_DMA+0x8c>
      tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	330c      	adds	r3, #12
 8002f98:	617b      	str	r3, [r7, #20]
      break;
 8002f9a:	e005      	b.n	8002fa8 <HAL_DAC_Start_DMA+0x8c>
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	3310      	adds	r3, #16
 8002fa2:	617b      	str	r3, [r7, #20]
      break;
 8002fa4:	e000      	b.n	8002fa8 <HAL_DAC_Start_DMA+0x8c>
      break;
 8002fa6:	bf00      	nop
  }
  
  /* Enable the DMA Channel */
  /* Enable the DAC DMA underrun interrupt */
  __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fb6:	601a      	str	r2, [r3, #0]

  /* Enable the DMA Channel */
  HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6898      	ldr	r0, [r3, #8]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	f000 f8e3 	bl	800318c <HAL_DMA_Start_IT>
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel); 
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6819      	ldr	r1, [r3, #0]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	601a      	str	r2, [r3, #0]
 
  /* Return function status */
  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	08003093 	.word	0x08003093
 8002ff0:	080030b5 	.word	0x080030b5
 8002ff4:	080030d1 	.word	0x080030d1

08002ff8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	2300      	movs	r3, #0
 800300a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	795b      	ldrb	r3, [r3, #5]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_DAC_ConfigChannel+0x20>
 8003014:	2302      	movs	r3, #2
 8003016:	e036      	b.n	8003086 <HAL_DAC_ConfigChannel+0x8e>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2201      	movs	r2, #1
 800301c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2202      	movs	r2, #2
 8003022:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800302c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43db      	mvns	r3, r3
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4013      	ands	r3, r2
 800303c:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	4313      	orrs	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6819      	ldr	r1, [r3, #0]
 8003066:	22c0      	movs	r2, #192	; 0xc0
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	43da      	mvns	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	400a      	ands	r2, r1
 8003076:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2201      	movs	r2, #1
 800307c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b084      	sub	sp, #16
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f7ff ff1c 	bl	8002ede <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2201      	movs	r2, #1
 80030aa:	711a      	strb	r2, [r3, #4]
}
 80030ac:	bf00      	nop
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f7ff ff15 	bl	8002ef2 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f043 0204 	orr.w	r2, r3, #4
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f7ff ff0b 	bl	8002f06 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	711a      	strb	r2, [r3, #4]
}
 80030f6:	bf00      	nop
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80030fe:	b580      	push	{r7, lr}
 8003100:	b084      	sub	sp, #16
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e037      	b.n	8003184 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800312a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800312e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003138:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003144:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003150:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f9b8 	bl	80034dc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}  
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_DMA_Start_IT+0x20>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e04a      	b.n	8003242 <HAL_DMA_Start_IT+0xb6>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d13a      	bne.n	8003234 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2202      	movs	r2, #2
 80031c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0201 	bic.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f94b 	bl	800347e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 020e 	orr.w	r2, r2, #14
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	e00f      	b.n	8003222 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f042 020a 	orr.w	r2, r2, #10
 8003210:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0204 	bic.w	r2, r2, #4
 8003220:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f042 0201 	orr.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	e005      	b.n	8003240 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800323c:	2302      	movs	r3, #2
 800323e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003240:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003258:	2b02      	cmp	r3, #2
 800325a:	d008      	beq.n	800326e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2204      	movs	r2, #4
 8003260:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e020      	b.n	80032b0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 020e 	bic.w	r2, r2, #14
 800327c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003296:	2101      	movs	r1, #1
 8003298:	fa01 f202 	lsl.w	r2, r1, r2
 800329c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d005      	beq.n	80032de <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2204      	movs	r2, #4
 80032d6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	73fb      	strb	r3, [r7, #15]
 80032dc:	e027      	b.n	800332e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 020e 	bic.w	r2, r2, #14
 80032ec:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0201 	bic.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003306:	2101      	movs	r1, #1
 8003308:	fa01 f202 	lsl.w	r2, r1, r2
 800330c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	4798      	blx	r3
    } 
  }
  return status;
 800332e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	2204      	movs	r2, #4
 8003356:	409a      	lsls	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4013      	ands	r3, r2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d024      	beq.n	80033aa <HAL_DMA_IRQHandler+0x72>
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b00      	cmp	r3, #0
 8003368:	d01f      	beq.n	80033aa <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0320 	and.w	r3, r3, #32
 8003374:	2b00      	cmp	r3, #0
 8003376:	d107      	bne.n	8003388 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0204 	bic.w	r2, r2, #4
 8003386:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003390:	2104      	movs	r1, #4
 8003392:	fa01 f202 	lsl.w	r2, r1, r2
 8003396:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	2b00      	cmp	r3, #0
 800339e:	d06a      	beq.n	8003476 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80033a8:	e065      	b.n	8003476 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	2202      	movs	r2, #2
 80033b0:	409a      	lsls	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d02c      	beq.n	8003414 <HAL_DMA_IRQHandler+0xdc>
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d027      	beq.n	8003414 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0320 	and.w	r3, r3, #32
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10b      	bne.n	80033ea <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 020a 	bic.w	r2, r2, #10
 80033e0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f2:	2102      	movs	r1, #2
 80033f4:	fa01 f202 	lsl.w	r2, r1, r2
 80033f8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	2b00      	cmp	r3, #0
 8003408:	d035      	beq.n	8003476 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003412:	e030      	b.n	8003476 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	2208      	movs	r2, #8
 800341a:	409a      	lsls	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4013      	ands	r3, r2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d028      	beq.n	8003476 <HAL_DMA_IRQHandler+0x13e>
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d023      	beq.n	8003476 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 020e 	bic.w	r2, r2, #14
 800343c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003446:	2101      	movs	r1, #1
 8003448:	fa01 f202 	lsl.w	r2, r1, r2
 800344c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	2b00      	cmp	r3, #0
 800346a:	d004      	beq.n	8003476 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
    }
  }
}  
 8003474:	e7ff      	b.n	8003476 <HAL_DMA_IRQHandler+0x13e>
 8003476:	bf00      	nop
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800347e:	b480      	push	{r7}
 8003480:	b085      	sub	sp, #20
 8003482:	af00      	add	r7, sp, #0
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	607a      	str	r2, [r7, #4]
 800348a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003494:	2101      	movs	r1, #1
 8003496:	fa01 f202 	lsl.w	r2, r1, r2
 800349a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b10      	cmp	r3, #16
 80034aa:	d108      	bne.n	80034be <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034bc:	e007      	b.n	80034ce <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	60da      	str	r2, [r3, #12]
}
 80034ce:	bf00      	nop
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	461a      	mov	r2, r3
 80034ea:	4b09      	ldr	r3, [pc, #36]	; (8003510 <DMA_CalcBaseAndBitshift+0x34>)
 80034ec:	4413      	add	r3, r2
 80034ee:	4a09      	ldr	r2, [pc, #36]	; (8003514 <DMA_CalcBaseAndBitshift+0x38>)
 80034f0:	fba2 2303 	umull	r2, r3, r2, r3
 80034f4:	091b      	lsrs	r3, r3, #4
 80034f6:	009a      	lsls	r2, r3, #2
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a06      	ldr	r2, [pc, #24]	; (8003518 <DMA_CalcBaseAndBitshift+0x3c>)
 8003500:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	bffdfff8 	.word	0xbffdfff8
 8003514:	cccccccd 	.word	0xcccccccd
 8003518:	40020000 	.word	0x40020000

0800351c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800352a:	e14e      	b.n	80037ca <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	2101      	movs	r1, #1
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	fa01 f303 	lsl.w	r3, r1, r3
 8003538:	4013      	ands	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 8140 	beq.w	80037c4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 0303 	and.w	r3, r3, #3
 800354c:	2b01      	cmp	r3, #1
 800354e:	d005      	beq.n	800355c <HAL_GPIO_Init+0x40>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d130      	bne.n	80035be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	2203      	movs	r2, #3
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4013      	ands	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003592:	2201      	movs	r2, #1
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	43db      	mvns	r3, r3
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4013      	ands	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	091b      	lsrs	r3, r3, #4
 80035a8:	f003 0201 	and.w	r2, r3, #1
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	d017      	beq.n	80035fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	2203      	movs	r2, #3
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43db      	mvns	r3, r3
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4013      	ands	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d123      	bne.n	800364e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	08da      	lsrs	r2, r3, #3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3208      	adds	r2, #8
 800360e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003612:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	220f      	movs	r2, #15
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	43db      	mvns	r3, r3
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4013      	ands	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	691a      	ldr	r2, [r3, #16]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	08da      	lsrs	r2, r3, #3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3208      	adds	r2, #8
 8003648:	6939      	ldr	r1, [r7, #16]
 800364a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	2203      	movs	r2, #3
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43db      	mvns	r3, r3
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4013      	ands	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 0203 	and.w	r2, r3, #3
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 809a 	beq.w	80037c4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003690:	4b55      	ldr	r3, [pc, #340]	; (80037e8 <HAL_GPIO_Init+0x2cc>)
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	4a54      	ldr	r2, [pc, #336]	; (80037e8 <HAL_GPIO_Init+0x2cc>)
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	6193      	str	r3, [r2, #24]
 800369c:	4b52      	ldr	r3, [pc, #328]	; (80037e8 <HAL_GPIO_Init+0x2cc>)
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036a8:	4a50      	ldr	r2, [pc, #320]	; (80037ec <HAL_GPIO_Init+0x2d0>)
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	089b      	lsrs	r3, r3, #2
 80036ae:	3302      	adds	r3, #2
 80036b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f003 0303 	and.w	r3, r3, #3
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	220f      	movs	r2, #15
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4013      	ands	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036d2:	d013      	beq.n	80036fc <HAL_GPIO_Init+0x1e0>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a46      	ldr	r2, [pc, #280]	; (80037f0 <HAL_GPIO_Init+0x2d4>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d00d      	beq.n	80036f8 <HAL_GPIO_Init+0x1dc>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a45      	ldr	r2, [pc, #276]	; (80037f4 <HAL_GPIO_Init+0x2d8>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d007      	beq.n	80036f4 <HAL_GPIO_Init+0x1d8>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a44      	ldr	r2, [pc, #272]	; (80037f8 <HAL_GPIO_Init+0x2dc>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d101      	bne.n	80036f0 <HAL_GPIO_Init+0x1d4>
 80036ec:	2303      	movs	r3, #3
 80036ee:	e006      	b.n	80036fe <HAL_GPIO_Init+0x1e2>
 80036f0:	2305      	movs	r3, #5
 80036f2:	e004      	b.n	80036fe <HAL_GPIO_Init+0x1e2>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e002      	b.n	80036fe <HAL_GPIO_Init+0x1e2>
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <HAL_GPIO_Init+0x1e2>
 80036fc:	2300      	movs	r3, #0
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	f002 0203 	and.w	r2, r2, #3
 8003704:	0092      	lsls	r2, r2, #2
 8003706:	4093      	lsls	r3, r2
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	4313      	orrs	r3, r2
 800370c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800370e:	4937      	ldr	r1, [pc, #220]	; (80037ec <HAL_GPIO_Init+0x2d0>)
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	089b      	lsrs	r3, r3, #2
 8003714:	3302      	adds	r3, #2
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800371c:	4b37      	ldr	r3, [pc, #220]	; (80037fc <HAL_GPIO_Init+0x2e0>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	43db      	mvns	r3, r3
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4013      	ands	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4313      	orrs	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003740:	4a2e      	ldr	r2, [pc, #184]	; (80037fc <HAL_GPIO_Init+0x2e0>)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003746:	4b2d      	ldr	r3, [pc, #180]	; (80037fc <HAL_GPIO_Init+0x2e0>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	43db      	mvns	r3, r3
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4013      	ands	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800376a:	4a24      	ldr	r2, [pc, #144]	; (80037fc <HAL_GPIO_Init+0x2e0>)
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003770:	4b22      	ldr	r3, [pc, #136]	; (80037fc <HAL_GPIO_Init+0x2e0>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	43db      	mvns	r3, r3
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4013      	ands	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003794:	4a19      	ldr	r2, [pc, #100]	; (80037fc <HAL_GPIO_Init+0x2e0>)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800379a:	4b18      	ldr	r3, [pc, #96]	; (80037fc <HAL_GPIO_Init+0x2e0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	43db      	mvns	r3, r3
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4013      	ands	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80037be:	4a0f      	ldr	r2, [pc, #60]	; (80037fc <HAL_GPIO_Init+0x2e0>)
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	3301      	adds	r3, #1
 80037c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	fa22 f303 	lsr.w	r3, r2, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f47f aea9 	bne.w	800352c <HAL_GPIO_Init+0x10>
  }
}
 80037da:	bf00      	nop
 80037dc:	bf00      	nop
 80037de:	371c      	adds	r7, #28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	40021000 	.word	0x40021000
 80037ec:	40010000 	.word	0x40010000
 80037f0:	48000400 	.word	0x48000400
 80037f4:	48000800 	.word	0x48000800
 80037f8:	48000c00 	.word	0x48000c00
 80037fc:	40010400 	.word	0x40010400

08003800 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	887b      	ldrh	r3, [r7, #2]
 8003812:	4013      	ands	r3, r2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003818:	2301      	movs	r3, #1
 800381a:	73fb      	strb	r3, [r7, #15]
 800381c:	e001      	b.n	8003822 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800381e:	2300      	movs	r3, #0
 8003820:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003822:	7bfb      	ldrb	r3, [r7, #15]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	807b      	strh	r3, [r7, #2]
 800383c:	4613      	mov	r3, r2
 800383e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003840:	787b      	ldrb	r3, [r7, #1]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003846:	887a      	ldrh	r2, [r7, #2]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800384c:	e002      	b.n	8003854 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800384e:	887a      	ldrh	r2, [r7, #2]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003872:	887a      	ldrh	r2, [r7, #2]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4013      	ands	r3, r2
 8003878:	041a      	lsls	r2, r3, #16
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	43d9      	mvns	r1, r3
 800387e:	887b      	ldrh	r3, [r7, #2]
 8003880:	400b      	ands	r3, r1
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	619a      	str	r2, [r3, #24]
}
 8003888:	bf00      	nop
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800389a:	af00      	add	r7, sp, #0
 800389c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038a4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d102      	bne.n	80038ba <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	f001 b823 	b.w	8004900 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 817d 	beq.w	8003bca <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80038d0:	4bbc      	ldr	r3, [pc, #752]	; (8003bc4 <HAL_RCC_OscConfig+0x330>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f003 030c 	and.w	r3, r3, #12
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d00c      	beq.n	80038f6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038dc:	4bb9      	ldr	r3, [pc, #740]	; (8003bc4 <HAL_RCC_OscConfig+0x330>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 030c 	and.w	r3, r3, #12
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d15c      	bne.n	80039a2 <HAL_RCC_OscConfig+0x10e>
 80038e8:	4bb6      	ldr	r3, [pc, #728]	; (8003bc4 <HAL_RCC_OscConfig+0x330>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f4:	d155      	bne.n	80039a2 <HAL_RCC_OscConfig+0x10e>
 80038f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038fa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003902:	fa93 f3a3 	rbit	r3, r3
 8003906:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800390a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800390e:	fab3 f383 	clz	r3, r3
 8003912:	b2db      	uxtb	r3, r3
 8003914:	095b      	lsrs	r3, r3, #5
 8003916:	b2db      	uxtb	r3, r3
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b01      	cmp	r3, #1
 8003920:	d102      	bne.n	8003928 <HAL_RCC_OscConfig+0x94>
 8003922:	4ba8      	ldr	r3, [pc, #672]	; (8003bc4 <HAL_RCC_OscConfig+0x330>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	e015      	b.n	8003954 <HAL_RCC_OscConfig+0xc0>
 8003928:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800392c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003930:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003934:	fa93 f3a3 	rbit	r3, r3
 8003938:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800393c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003940:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003944:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003948:	fa93 f3a3 	rbit	r3, r3
 800394c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003950:	4b9c      	ldr	r3, [pc, #624]	; (8003bc4 <HAL_RCC_OscConfig+0x330>)
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003958:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800395c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003960:	fa92 f2a2 	rbit	r2, r2
 8003964:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003968:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800396c:	fab2 f282 	clz	r2, r2
 8003970:	b2d2      	uxtb	r2, r2
 8003972:	f042 0220 	orr.w	r2, r2, #32
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	f002 021f 	and.w	r2, r2, #31
 800397c:	2101      	movs	r1, #1
 800397e:	fa01 f202 	lsl.w	r2, r1, r2
 8003982:	4013      	ands	r3, r2
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 811f 	beq.w	8003bc8 <HAL_RCC_OscConfig+0x334>
 800398a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	f040 8116 	bne.w	8003bc8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	f000 bfaf 	b.w	8004900 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b2:	d106      	bne.n	80039c2 <HAL_RCC_OscConfig+0x12e>
 80039b4:	4b83      	ldr	r3, [pc, #524]	; (8003bc4 <HAL_RCC_OscConfig+0x330>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a82      	ldr	r2, [pc, #520]	; (8003bc4 <HAL_RCC_OscConfig+0x330>)
 80039ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	e036      	b.n	8003a30 <HAL_RCC_OscConfig+0x19c>
 80039c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10c      	bne.n	80039ec <HAL_RCC_OscConfig+0x158>
 80039d2:	4b7c      	ldr	r3, [pc, #496]	; (8003bc4 <HAL_RCC_OscConfig+0x330>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a7b      	ldr	r2, [pc, #492]	; (8003bc4 <HAL_RCC_OscConfig+0x330>)
 80039d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4b79      	ldr	r3, [pc, #484]	; (8003bc4 <HAL_RCC_OscConfig+0x330>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a78      	ldr	r2, [pc, #480]	; (8003bc4 <HAL_RCC_OscConfig+0x330>)
 80039e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e021      	b.n	8003a30 <HAL_RCC_OscConfig+0x19c>
 80039ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039fc:	d10c      	bne.n	8003a18 <HAL_RCC_OscConfig+0x184>
 80039fe:	4b71      	ldr	r3, [pc, #452]	; (8003bc4 <HAL_RCC_OscConfig+0x330>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a70      	ldr	r2, [pc, #448]	; (8003bc4 <HAL_RCC_OscConfig+0x330>)
 8003a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	4b6e      	ldr	r3, [pc, #440]	; (8003bc4 <HAL_RCC_OscConfig+0x330>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a6d      	ldr	r2, [pc, #436]	; (8003bc4 <HAL_RCC_OscConfig+0x330>)
 8003a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	e00b      	b.n	8003a30 <HAL_RCC_OscConfig+0x19c>
 8003a18:	4b6a      	ldr	r3, [pc, #424]	; (8003bc4 <HAL_RCC_OscConfig+0x330>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a69      	ldr	r2, [pc, #420]	; (8003bc4 <HAL_RCC_OscConfig+0x330>)
 8003a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	4b67      	ldr	r3, [pc, #412]	; (8003bc4 <HAL_RCC_OscConfig+0x330>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a66      	ldr	r2, [pc, #408]	; (8003bc4 <HAL_RCC_OscConfig+0x330>)
 8003a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a2e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a30:	4b64      	ldr	r3, [pc, #400]	; (8003bc4 <HAL_RCC_OscConfig+0x330>)
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	f023 020f 	bic.w	r2, r3, #15
 8003a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	495f      	ldr	r1, [pc, #380]	; (8003bc4 <HAL_RCC_OscConfig+0x330>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d059      	beq.n	8003b0e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5a:	f7fe fab7 	bl	8001fcc <HAL_GetTick>
 8003a5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a62:	e00a      	b.n	8003a7a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a64:	f7fe fab2 	bl	8001fcc <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b64      	cmp	r3, #100	; 0x64
 8003a72:	d902      	bls.n	8003a7a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	f000 bf43 	b.w	8004900 <HAL_RCC_OscConfig+0x106c>
 8003a7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a7e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a82:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003a86:	fa93 f3a3 	rbit	r3, r3
 8003a8a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003a8e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a92:	fab3 f383 	clz	r3, r3
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	095b      	lsrs	r3, r3, #5
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	f043 0301 	orr.w	r3, r3, #1
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d102      	bne.n	8003aac <HAL_RCC_OscConfig+0x218>
 8003aa6:	4b47      	ldr	r3, [pc, #284]	; (8003bc4 <HAL_RCC_OscConfig+0x330>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	e015      	b.n	8003ad8 <HAL_RCC_OscConfig+0x244>
 8003aac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ab0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003ab8:	fa93 f3a3 	rbit	r3, r3
 8003abc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003ac0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ac4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003ac8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003acc:	fa93 f3a3 	rbit	r3, r3
 8003ad0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003ad4:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <HAL_RCC_OscConfig+0x330>)
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003adc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003ae0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003ae4:	fa92 f2a2 	rbit	r2, r2
 8003ae8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003aec:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003af0:	fab2 f282 	clz	r2, r2
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	f042 0220 	orr.w	r2, r2, #32
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	f002 021f 	and.w	r2, r2, #31
 8003b00:	2101      	movs	r1, #1
 8003b02:	fa01 f202 	lsl.w	r2, r1, r2
 8003b06:	4013      	ands	r3, r2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0ab      	beq.n	8003a64 <HAL_RCC_OscConfig+0x1d0>
 8003b0c:	e05d      	b.n	8003bca <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0e:	f7fe fa5d 	bl	8001fcc <HAL_GetTick>
 8003b12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b16:	e00a      	b.n	8003b2e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b18:	f7fe fa58 	bl	8001fcc <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b64      	cmp	r3, #100	; 0x64
 8003b26:	d902      	bls.n	8003b2e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	f000 bee9 	b.w	8004900 <HAL_RCC_OscConfig+0x106c>
 8003b2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b32:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b36:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003b3a:	fa93 f3a3 	rbit	r3, r3
 8003b3e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003b42:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b46:	fab3 f383 	clz	r3, r3
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	095b      	lsrs	r3, r3, #5
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d102      	bne.n	8003b60 <HAL_RCC_OscConfig+0x2cc>
 8003b5a:	4b1a      	ldr	r3, [pc, #104]	; (8003bc4 <HAL_RCC_OscConfig+0x330>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	e015      	b.n	8003b8c <HAL_RCC_OscConfig+0x2f8>
 8003b60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b64:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b68:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003b6c:	fa93 f3a3 	rbit	r3, r3
 8003b70:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003b74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b78:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003b7c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003b80:	fa93 f3a3 	rbit	r3, r3
 8003b84:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003b88:	4b0e      	ldr	r3, [pc, #56]	; (8003bc4 <HAL_RCC_OscConfig+0x330>)
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b90:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003b94:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003b98:	fa92 f2a2 	rbit	r2, r2
 8003b9c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003ba0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003ba4:	fab2 f282 	clz	r2, r2
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	f042 0220 	orr.w	r2, r2, #32
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	f002 021f 	and.w	r2, r2, #31
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bba:	4013      	ands	r3, r2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1ab      	bne.n	8003b18 <HAL_RCC_OscConfig+0x284>
 8003bc0:	e003      	b.n	8003bca <HAL_RCC_OscConfig+0x336>
 8003bc2:	bf00      	nop
 8003bc4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 817d 	beq.w	8003eda <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003be0:	4ba6      	ldr	r3, [pc, #664]	; (8003e7c <HAL_RCC_OscConfig+0x5e8>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 030c 	and.w	r3, r3, #12
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00b      	beq.n	8003c04 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003bec:	4ba3      	ldr	r3, [pc, #652]	; (8003e7c <HAL_RCC_OscConfig+0x5e8>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 030c 	and.w	r3, r3, #12
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d172      	bne.n	8003cde <HAL_RCC_OscConfig+0x44a>
 8003bf8:	4ba0      	ldr	r3, [pc, #640]	; (8003e7c <HAL_RCC_OscConfig+0x5e8>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d16c      	bne.n	8003cde <HAL_RCC_OscConfig+0x44a>
 8003c04:	2302      	movs	r3, #2
 8003c06:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003c0e:	fa93 f3a3 	rbit	r3, r3
 8003c12:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003c16:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c1a:	fab3 f383 	clz	r3, r3
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	095b      	lsrs	r3, r3, #5
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	f043 0301 	orr.w	r3, r3, #1
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d102      	bne.n	8003c34 <HAL_RCC_OscConfig+0x3a0>
 8003c2e:	4b93      	ldr	r3, [pc, #588]	; (8003e7c <HAL_RCC_OscConfig+0x5e8>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	e013      	b.n	8003c5c <HAL_RCC_OscConfig+0x3c8>
 8003c34:	2302      	movs	r3, #2
 8003c36:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003c3e:	fa93 f3a3 	rbit	r3, r3
 8003c42:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003c46:	2302      	movs	r3, #2
 8003c48:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003c4c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c50:	fa93 f3a3 	rbit	r3, r3
 8003c54:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003c58:	4b88      	ldr	r3, [pc, #544]	; (8003e7c <HAL_RCC_OscConfig+0x5e8>)
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	2202      	movs	r2, #2
 8003c5e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003c62:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003c66:	fa92 f2a2 	rbit	r2, r2
 8003c6a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003c6e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003c72:	fab2 f282 	clz	r2, r2
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	f042 0220 	orr.w	r2, r2, #32
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	f002 021f 	and.w	r2, r2, #31
 8003c82:	2101      	movs	r1, #1
 8003c84:	fa01 f202 	lsl.w	r2, r1, r2
 8003c88:	4013      	ands	r3, r2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x410>
 8003c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d002      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	f000 be2e 	b.w	8004900 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca4:	4b75      	ldr	r3, [pc, #468]	; (8003e7c <HAL_RCC_OscConfig+0x5e8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	21f8      	movs	r1, #248	; 0xf8
 8003cba:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbe:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003cc2:	fa91 f1a1 	rbit	r1, r1
 8003cc6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003cca:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003cce:	fab1 f181 	clz	r1, r1
 8003cd2:	b2c9      	uxtb	r1, r1
 8003cd4:	408b      	lsls	r3, r1
 8003cd6:	4969      	ldr	r1, [pc, #420]	; (8003e7c <HAL_RCC_OscConfig+0x5e8>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cdc:	e0fd      	b.n	8003eda <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 8088 	beq.w	8003e00 <HAL_RCC_OscConfig+0x56c>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003cfa:	fa93 f3a3 	rbit	r3, r3
 8003cfe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003d02:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d06:	fab3 f383 	clz	r3, r3
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	461a      	mov	r2, r3
 8003d18:	2301      	movs	r3, #1
 8003d1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1c:	f7fe f956 	bl	8001fcc <HAL_GetTick>
 8003d20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d24:	e00a      	b.n	8003d3c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d26:	f7fe f951 	bl	8001fcc <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d902      	bls.n	8003d3c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	f000 bde2 	b.w	8004900 <HAL_RCC_OscConfig+0x106c>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d42:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003d46:	fa93 f3a3 	rbit	r3, r3
 8003d4a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003d4e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d52:	fab3 f383 	clz	r3, r3
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	095b      	lsrs	r3, r3, #5
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d102      	bne.n	8003d6c <HAL_RCC_OscConfig+0x4d8>
 8003d66:	4b45      	ldr	r3, [pc, #276]	; (8003e7c <HAL_RCC_OscConfig+0x5e8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	e013      	b.n	8003d94 <HAL_RCC_OscConfig+0x500>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d72:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003d76:	fa93 f3a3 	rbit	r3, r3
 8003d7a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003d7e:	2302      	movs	r3, #2
 8003d80:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003d84:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003d88:	fa93 f3a3 	rbit	r3, r3
 8003d8c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003d90:	4b3a      	ldr	r3, [pc, #232]	; (8003e7c <HAL_RCC_OscConfig+0x5e8>)
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	2202      	movs	r2, #2
 8003d96:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003d9a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003d9e:	fa92 f2a2 	rbit	r2, r2
 8003da2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003da6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003daa:	fab2 f282 	clz	r2, r2
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	f042 0220 	orr.w	r2, r2, #32
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	f002 021f 	and.w	r2, r2, #31
 8003dba:	2101      	movs	r1, #1
 8003dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0af      	beq.n	8003d26 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc6:	4b2d      	ldr	r3, [pc, #180]	; (8003e7c <HAL_RCC_OscConfig+0x5e8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	21f8      	movs	r1, #248	; 0xf8
 8003ddc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003de4:	fa91 f1a1 	rbit	r1, r1
 8003de8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003dec:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003df0:	fab1 f181 	clz	r1, r1
 8003df4:	b2c9      	uxtb	r1, r1
 8003df6:	408b      	lsls	r3, r1
 8003df8:	4920      	ldr	r1, [pc, #128]	; (8003e7c <HAL_RCC_OscConfig+0x5e8>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	600b      	str	r3, [r1, #0]
 8003dfe:	e06c      	b.n	8003eda <HAL_RCC_OscConfig+0x646>
 8003e00:	2301      	movs	r3, #1
 8003e02:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e06:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003e0a:	fa93 f3a3 	rbit	r3, r3
 8003e0e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003e12:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e16:	fab3 f383 	clz	r3, r3
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	461a      	mov	r2, r3
 8003e28:	2300      	movs	r3, #0
 8003e2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2c:	f7fe f8ce 	bl	8001fcc <HAL_GetTick>
 8003e30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e34:	e00a      	b.n	8003e4c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e36:	f7fe f8c9 	bl	8001fcc <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d902      	bls.n	8003e4c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	f000 bd5a 	b.w	8004900 <HAL_RCC_OscConfig+0x106c>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e52:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003e56:	fa93 f3a3 	rbit	r3, r3
 8003e5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e62:	fab3 f383 	clz	r3, r3
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	095b      	lsrs	r3, r3, #5
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	f043 0301 	orr.w	r3, r3, #1
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d104      	bne.n	8003e80 <HAL_RCC_OscConfig+0x5ec>
 8003e76:	4b01      	ldr	r3, [pc, #4]	; (8003e7c <HAL_RCC_OscConfig+0x5e8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	e015      	b.n	8003ea8 <HAL_RCC_OscConfig+0x614>
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	2302      	movs	r3, #2
 8003e82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e8a:	fa93 f3a3 	rbit	r3, r3
 8003e8e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003e92:	2302      	movs	r3, #2
 8003e94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003e98:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e9c:	fa93 f3a3 	rbit	r3, r3
 8003ea0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003ea4:	4bc8      	ldr	r3, [pc, #800]	; (80041c8 <HAL_RCC_OscConfig+0x934>)
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003eae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003eb2:	fa92 f2a2 	rbit	r2, r2
 8003eb6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003eba:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003ebe:	fab2 f282 	clz	r2, r2
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	f042 0220 	orr.w	r2, r2, #32
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	f002 021f 	and.w	r2, r2, #31
 8003ece:	2101      	movs	r1, #1
 8003ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1ad      	bne.n	8003e36 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ede:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 8110 	beq.w	8004110 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d079      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x760>
 8003f00:	2301      	movs	r3, #1
 8003f02:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f06:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003f0a:	fa93 f3a3 	rbit	r3, r3
 8003f0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f16:	fab3 f383 	clz	r3, r3
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	4bab      	ldr	r3, [pc, #684]	; (80041cc <HAL_RCC_OscConfig+0x938>)
 8003f20:	4413      	add	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	461a      	mov	r2, r3
 8003f26:	2301      	movs	r3, #1
 8003f28:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f2a:	f7fe f84f 	bl	8001fcc <HAL_GetTick>
 8003f2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f32:	e00a      	b.n	8003f4a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f34:	f7fe f84a 	bl	8001fcc <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d902      	bls.n	8003f4a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	f000 bcdb 	b.w	8004900 <HAL_RCC_OscConfig+0x106c>
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003f54:	fa93 f3a3 	rbit	r3, r3
 8003f58:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f60:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003f64:	2202      	movs	r2, #2
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	fa93 f2a3 	rbit	r2, r3
 8003f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f88:	2202      	movs	r2, #2
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	fa93 f2a3 	rbit	r2, r3
 8003f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003fa2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fa4:	4b88      	ldr	r3, [pc, #544]	; (80041c8 <HAL_RCC_OscConfig+0x934>)
 8003fa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003fb0:	2102      	movs	r1, #2
 8003fb2:	6019      	str	r1, [r3, #0]
 8003fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	fa93 f1a3 	rbit	r1, r3
 8003fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003fca:	6019      	str	r1, [r3, #0]
  return result;
 8003fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	fab3 f383 	clz	r3, r3
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	f003 031f 	and.w	r3, r3, #31
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fec:	4013      	ands	r3, r2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0a0      	beq.n	8003f34 <HAL_RCC_OscConfig+0x6a0>
 8003ff2:	e08d      	b.n	8004110 <HAL_RCC_OscConfig+0x87c>
 8003ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004004:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	fa93 f2a3 	rbit	r2, r3
 800400e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004012:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004016:	601a      	str	r2, [r3, #0]
  return result;
 8004018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800401c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004020:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004022:	fab3 f383 	clz	r3, r3
 8004026:	b2db      	uxtb	r3, r3
 8004028:	461a      	mov	r2, r3
 800402a:	4b68      	ldr	r3, [pc, #416]	; (80041cc <HAL_RCC_OscConfig+0x938>)
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	461a      	mov	r2, r3
 8004032:	2300      	movs	r3, #0
 8004034:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004036:	f7fd ffc9 	bl	8001fcc <HAL_GetTick>
 800403a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800403e:	e00a      	b.n	8004056 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004040:	f7fd ffc4 	bl	8001fcc <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d902      	bls.n	8004056 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	f000 bc55 	b.w	8004900 <HAL_RCC_OscConfig+0x106c>
 8004056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800405e:	2202      	movs	r2, #2
 8004060:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004066:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	fa93 f2a3 	rbit	r2, r3
 8004070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004074:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800407e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004082:	2202      	movs	r2, #2
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800408a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	fa93 f2a3 	rbit	r2, r3
 8004094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004098:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040a6:	2202      	movs	r2, #2
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	fa93 f2a3 	rbit	r2, r3
 80040b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80040c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c2:	4b41      	ldr	r3, [pc, #260]	; (80041c8 <HAL_RCC_OscConfig+0x934>)
 80040c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80040ce:	2102      	movs	r1, #2
 80040d0:	6019      	str	r1, [r3, #0]
 80040d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	fa93 f1a3 	rbit	r1, r3
 80040e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80040e8:	6019      	str	r1, [r3, #0]
  return result;
 80040ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ee:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	fab3 f383 	clz	r3, r3
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	2101      	movs	r1, #1
 8004106:	fa01 f303 	lsl.w	r3, r1, r3
 800410a:	4013      	ands	r3, r2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d197      	bne.n	8004040 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004114:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 81a1 	beq.w	8004468 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004126:	2300      	movs	r3, #0
 8004128:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800412c:	4b26      	ldr	r3, [pc, #152]	; (80041c8 <HAL_RCC_OscConfig+0x934>)
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d116      	bne.n	8004166 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004138:	4b23      	ldr	r3, [pc, #140]	; (80041c8 <HAL_RCC_OscConfig+0x934>)
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	4a22      	ldr	r2, [pc, #136]	; (80041c8 <HAL_RCC_OscConfig+0x934>)
 800413e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004142:	61d3      	str	r3, [r2, #28]
 8004144:	4b20      	ldr	r3, [pc, #128]	; (80041c8 <HAL_RCC_OscConfig+0x934>)
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800414c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004150:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800415a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800415e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004160:	2301      	movs	r3, #1
 8004162:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004166:	4b1a      	ldr	r3, [pc, #104]	; (80041d0 <HAL_RCC_OscConfig+0x93c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416e:	2b00      	cmp	r3, #0
 8004170:	d11a      	bne.n	80041a8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004172:	4b17      	ldr	r3, [pc, #92]	; (80041d0 <HAL_RCC_OscConfig+0x93c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a16      	ldr	r2, [pc, #88]	; (80041d0 <HAL_RCC_OscConfig+0x93c>)
 8004178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800417c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800417e:	f7fd ff25 	bl	8001fcc <HAL_GetTick>
 8004182:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004186:	e009      	b.n	800419c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004188:	f7fd ff20 	bl	8001fcc <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b64      	cmp	r3, #100	; 0x64
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e3b1      	b.n	8004900 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419c:	4b0c      	ldr	r3, [pc, #48]	; (80041d0 <HAL_RCC_OscConfig+0x93c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0ef      	beq.n	8004188 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d10d      	bne.n	80041d4 <HAL_RCC_OscConfig+0x940>
 80041b8:	4b03      	ldr	r3, [pc, #12]	; (80041c8 <HAL_RCC_OscConfig+0x934>)
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	4a02      	ldr	r2, [pc, #8]	; (80041c8 <HAL_RCC_OscConfig+0x934>)
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	6213      	str	r3, [r2, #32]
 80041c4:	e03c      	b.n	8004240 <HAL_RCC_OscConfig+0x9ac>
 80041c6:	bf00      	nop
 80041c8:	40021000 	.word	0x40021000
 80041cc:	10908120 	.word	0x10908120
 80041d0:	40007000 	.word	0x40007000
 80041d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10c      	bne.n	80041fe <HAL_RCC_OscConfig+0x96a>
 80041e4:	4bc1      	ldr	r3, [pc, #772]	; (80044ec <HAL_RCC_OscConfig+0xc58>)
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	4ac0      	ldr	r2, [pc, #768]	; (80044ec <HAL_RCC_OscConfig+0xc58>)
 80041ea:	f023 0301 	bic.w	r3, r3, #1
 80041ee:	6213      	str	r3, [r2, #32]
 80041f0:	4bbe      	ldr	r3, [pc, #760]	; (80044ec <HAL_RCC_OscConfig+0xc58>)
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	4abd      	ldr	r2, [pc, #756]	; (80044ec <HAL_RCC_OscConfig+0xc58>)
 80041f6:	f023 0304 	bic.w	r3, r3, #4
 80041fa:	6213      	str	r3, [r2, #32]
 80041fc:	e020      	b.n	8004240 <HAL_RCC_OscConfig+0x9ac>
 80041fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004202:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	2b05      	cmp	r3, #5
 800420c:	d10c      	bne.n	8004228 <HAL_RCC_OscConfig+0x994>
 800420e:	4bb7      	ldr	r3, [pc, #732]	; (80044ec <HAL_RCC_OscConfig+0xc58>)
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	4ab6      	ldr	r2, [pc, #728]	; (80044ec <HAL_RCC_OscConfig+0xc58>)
 8004214:	f043 0304 	orr.w	r3, r3, #4
 8004218:	6213      	str	r3, [r2, #32]
 800421a:	4bb4      	ldr	r3, [pc, #720]	; (80044ec <HAL_RCC_OscConfig+0xc58>)
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	4ab3      	ldr	r2, [pc, #716]	; (80044ec <HAL_RCC_OscConfig+0xc58>)
 8004220:	f043 0301 	orr.w	r3, r3, #1
 8004224:	6213      	str	r3, [r2, #32]
 8004226:	e00b      	b.n	8004240 <HAL_RCC_OscConfig+0x9ac>
 8004228:	4bb0      	ldr	r3, [pc, #704]	; (80044ec <HAL_RCC_OscConfig+0xc58>)
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	4aaf      	ldr	r2, [pc, #700]	; (80044ec <HAL_RCC_OscConfig+0xc58>)
 800422e:	f023 0301 	bic.w	r3, r3, #1
 8004232:	6213      	str	r3, [r2, #32]
 8004234:	4bad      	ldr	r3, [pc, #692]	; (80044ec <HAL_RCC_OscConfig+0xc58>)
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	4aac      	ldr	r2, [pc, #688]	; (80044ec <HAL_RCC_OscConfig+0xc58>)
 800423a:	f023 0304 	bic.w	r3, r3, #4
 800423e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004244:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 8081 	beq.w	8004354 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004252:	f7fd febb 	bl	8001fcc <HAL_GetTick>
 8004256:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800425a:	e00b      	b.n	8004274 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800425c:	f7fd feb6 	bl	8001fcc <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	f241 3288 	movw	r2, #5000	; 0x1388
 800426c:	4293      	cmp	r3, r2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e345      	b.n	8004900 <HAL_RCC_OscConfig+0x106c>
 8004274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004278:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800427c:	2202      	movs	r2, #2
 800427e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004284:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	fa93 f2a3 	rbit	r2, r3
 800428e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004292:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800429c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80042a0:	2202      	movs	r2, #2
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	fa93 f2a3 	rbit	r2, r3
 80042b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042b6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80042ba:	601a      	str	r2, [r3, #0]
  return result;
 80042bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80042c4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c6:	fab3 f383 	clz	r3, r3
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	095b      	lsrs	r3, r3, #5
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	f043 0302 	orr.w	r3, r3, #2
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d102      	bne.n	80042e0 <HAL_RCC_OscConfig+0xa4c>
 80042da:	4b84      	ldr	r3, [pc, #528]	; (80044ec <HAL_RCC_OscConfig+0xc58>)
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	e013      	b.n	8004308 <HAL_RCC_OscConfig+0xa74>
 80042e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80042e8:	2202      	movs	r2, #2
 80042ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	fa93 f2a3 	rbit	r2, r3
 80042fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	4b79      	ldr	r3, [pc, #484]	; (80044ec <HAL_RCC_OscConfig+0xc58>)
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800430c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004310:	2102      	movs	r1, #2
 8004312:	6011      	str	r1, [r2, #0]
 8004314:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004318:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	fa92 f1a2 	rbit	r1, r2
 8004322:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004326:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800432a:	6011      	str	r1, [r2, #0]
  return result;
 800432c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004330:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004334:	6812      	ldr	r2, [r2, #0]
 8004336:	fab2 f282 	clz	r2, r2
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	f002 021f 	and.w	r2, r2, #31
 8004346:	2101      	movs	r1, #1
 8004348:	fa01 f202 	lsl.w	r2, r1, r2
 800434c:	4013      	ands	r3, r2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d084      	beq.n	800425c <HAL_RCC_OscConfig+0x9c8>
 8004352:	e07f      	b.n	8004454 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004354:	f7fd fe3a 	bl	8001fcc <HAL_GetTick>
 8004358:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800435c:	e00b      	b.n	8004376 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800435e:	f7fd fe35 	bl	8001fcc <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	f241 3288 	movw	r2, #5000	; 0x1388
 800436e:	4293      	cmp	r3, r2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e2c4      	b.n	8004900 <HAL_RCC_OscConfig+0x106c>
 8004376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800437a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800437e:	2202      	movs	r2, #2
 8004380:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004386:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	fa93 f2a3 	rbit	r2, r3
 8004390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004394:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800439e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80043a2:	2202      	movs	r2, #2
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	fa93 f2a3 	rbit	r2, r3
 80043b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80043bc:	601a      	str	r2, [r3, #0]
  return result;
 80043be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80043c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043c8:	fab3 f383 	clz	r3, r3
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	f043 0302 	orr.w	r3, r3, #2
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d102      	bne.n	80043e2 <HAL_RCC_OscConfig+0xb4e>
 80043dc:	4b43      	ldr	r3, [pc, #268]	; (80044ec <HAL_RCC_OscConfig+0xc58>)
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	e013      	b.n	800440a <HAL_RCC_OscConfig+0xb76>
 80043e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80043ea:	2202      	movs	r2, #2
 80043ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	fa93 f2a3 	rbit	r2, r3
 80043fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004400:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	4b39      	ldr	r3, [pc, #228]	; (80044ec <HAL_RCC_OscConfig+0xc58>)
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800440e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004412:	2102      	movs	r1, #2
 8004414:	6011      	str	r1, [r2, #0]
 8004416:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800441a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800441e:	6812      	ldr	r2, [r2, #0]
 8004420:	fa92 f1a2 	rbit	r1, r2
 8004424:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004428:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800442c:	6011      	str	r1, [r2, #0]
  return result;
 800442e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004432:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004436:	6812      	ldr	r2, [r2, #0]
 8004438:	fab2 f282 	clz	r2, r2
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	f002 021f 	and.w	r2, r2, #31
 8004448:	2101      	movs	r1, #1
 800444a:	fa01 f202 	lsl.w	r2, r1, r2
 800444e:	4013      	ands	r3, r2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d184      	bne.n	800435e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004454:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004458:	2b01      	cmp	r3, #1
 800445a:	d105      	bne.n	8004468 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800445c:	4b23      	ldr	r3, [pc, #140]	; (80044ec <HAL_RCC_OscConfig+0xc58>)
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	4a22      	ldr	r2, [pc, #136]	; (80044ec <HAL_RCC_OscConfig+0xc58>)
 8004462:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004466:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800446c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 8242 	beq.w	80048fe <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800447a:	4b1c      	ldr	r3, [pc, #112]	; (80044ec <HAL_RCC_OscConfig+0xc58>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f003 030c 	and.w	r3, r3, #12
 8004482:	2b08      	cmp	r3, #8
 8004484:	f000 8213 	beq.w	80048ae <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800448c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	2b02      	cmp	r3, #2
 8004496:	f040 8162 	bne.w	800475e <HAL_RCC_OscConfig+0xeca>
 800449a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800449e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80044a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ac:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	fa93 f2a3 	rbit	r2, r3
 80044b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ba:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80044be:	601a      	str	r2, [r3, #0]
  return result;
 80044c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044c4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80044c8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ca:	fab3 f383 	clz	r3, r3
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	461a      	mov	r2, r3
 80044dc:	2300      	movs	r3, #0
 80044de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e0:	f7fd fd74 	bl	8001fcc <HAL_GetTick>
 80044e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044e8:	e00c      	b.n	8004504 <HAL_RCC_OscConfig+0xc70>
 80044ea:	bf00      	nop
 80044ec:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044f0:	f7fd fd6c 	bl	8001fcc <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e1fd      	b.n	8004900 <HAL_RCC_OscConfig+0x106c>
 8004504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004508:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800450c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004510:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004516:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	fa93 f2a3 	rbit	r2, r3
 8004520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004524:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004528:	601a      	str	r2, [r3, #0]
  return result;
 800452a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800452e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004532:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004534:	fab3 f383 	clz	r3, r3
 8004538:	b2db      	uxtb	r3, r3
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	b2db      	uxtb	r3, r3
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b01      	cmp	r3, #1
 8004546:	d102      	bne.n	800454e <HAL_RCC_OscConfig+0xcba>
 8004548:	4bb0      	ldr	r3, [pc, #704]	; (800480c <HAL_RCC_OscConfig+0xf78>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	e027      	b.n	800459e <HAL_RCC_OscConfig+0xd0a>
 800454e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004552:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004556:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800455a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004560:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	fa93 f2a3 	rbit	r2, r3
 800456a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800456e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004578:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800457c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004586:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	fa93 f2a3 	rbit	r2, r3
 8004590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004594:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	4b9c      	ldr	r3, [pc, #624]	; (800480c <HAL_RCC_OscConfig+0xf78>)
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045a2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80045a6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80045aa:	6011      	str	r1, [r2, #0]
 80045ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045b0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80045b4:	6812      	ldr	r2, [r2, #0]
 80045b6:	fa92 f1a2 	rbit	r1, r2
 80045ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045be:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80045c2:	6011      	str	r1, [r2, #0]
  return result;
 80045c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045c8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80045cc:	6812      	ldr	r2, [r2, #0]
 80045ce:	fab2 f282 	clz	r2, r2
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	f042 0220 	orr.w	r2, r2, #32
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	f002 021f 	and.w	r2, r2, #31
 80045de:	2101      	movs	r1, #1
 80045e0:	fa01 f202 	lsl.w	r2, r1, r2
 80045e4:	4013      	ands	r3, r2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d182      	bne.n	80044f0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045ea:	4b88      	ldr	r3, [pc, #544]	; (800480c <HAL_RCC_OscConfig+0xf78>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80045fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004602:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	430b      	orrs	r3, r1
 800460c:	497f      	ldr	r1, [pc, #508]	; (800480c <HAL_RCC_OscConfig+0xf78>)
 800460e:	4313      	orrs	r3, r2
 8004610:	604b      	str	r3, [r1, #4]
 8004612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004616:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800461a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800461e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004624:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	fa93 f2a3 	rbit	r2, r3
 800462e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004632:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004636:	601a      	str	r2, [r3, #0]
  return result;
 8004638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800463c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004640:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004642:	fab3 f383 	clz	r3, r3
 8004646:	b2db      	uxtb	r3, r3
 8004648:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800464c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	461a      	mov	r2, r3
 8004654:	2301      	movs	r3, #1
 8004656:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004658:	f7fd fcb8 	bl	8001fcc <HAL_GetTick>
 800465c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004660:	e009      	b.n	8004676 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004662:	f7fd fcb3 	bl	8001fcc <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e144      	b.n	8004900 <HAL_RCC_OscConfig+0x106c>
 8004676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800467a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800467e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004682:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004688:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	fa93 f2a3 	rbit	r2, r3
 8004692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004696:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800469a:	601a      	str	r2, [r3, #0]
  return result;
 800469c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80046a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046a6:	fab3 f383 	clz	r3, r3
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	095b      	lsrs	r3, r3, #5
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d102      	bne.n	80046c0 <HAL_RCC_OscConfig+0xe2c>
 80046ba:	4b54      	ldr	r3, [pc, #336]	; (800480c <HAL_RCC_OscConfig+0xf78>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	e027      	b.n	8004710 <HAL_RCC_OscConfig+0xe7c>
 80046c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80046c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	fa93 f2a3 	rbit	r2, r3
 80046dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ea:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80046ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	fa93 f2a3 	rbit	r2, r3
 8004702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004706:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	4b3f      	ldr	r3, [pc, #252]	; (800480c <HAL_RCC_OscConfig+0xf78>)
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004714:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004718:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800471c:	6011      	str	r1, [r2, #0]
 800471e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004722:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004726:	6812      	ldr	r2, [r2, #0]
 8004728:	fa92 f1a2 	rbit	r1, r2
 800472c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004730:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004734:	6011      	str	r1, [r2, #0]
  return result;
 8004736:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800473a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800473e:	6812      	ldr	r2, [r2, #0]
 8004740:	fab2 f282 	clz	r2, r2
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	f042 0220 	orr.w	r2, r2, #32
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	f002 021f 	and.w	r2, r2, #31
 8004750:	2101      	movs	r1, #1
 8004752:	fa01 f202 	lsl.w	r2, r1, r2
 8004756:	4013      	ands	r3, r2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d082      	beq.n	8004662 <HAL_RCC_OscConfig+0xdce>
 800475c:	e0cf      	b.n	80048fe <HAL_RCC_OscConfig+0x106a>
 800475e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004762:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004766:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800476a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004770:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	fa93 f2a3 	rbit	r2, r3
 800477a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800477e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004782:	601a      	str	r2, [r3, #0]
  return result;
 8004784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004788:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800478c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478e:	fab3 f383 	clz	r3, r3
 8004792:	b2db      	uxtb	r3, r3
 8004794:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004798:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	461a      	mov	r2, r3
 80047a0:	2300      	movs	r3, #0
 80047a2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a4:	f7fd fc12 	bl	8001fcc <HAL_GetTick>
 80047a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047ac:	e009      	b.n	80047c2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ae:	f7fd fc0d 	bl	8001fcc <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e09e      	b.n	8004900 <HAL_RCC_OscConfig+0x106c>
 80047c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80047ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	fa93 f2a3 	rbit	r2, r3
 80047de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80047e6:	601a      	str	r2, [r3, #0]
  return result;
 80047e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ec:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80047f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047f2:	fab3 f383 	clz	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	095b      	lsrs	r3, r3, #5
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	f043 0301 	orr.w	r3, r3, #1
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b01      	cmp	r3, #1
 8004804:	d104      	bne.n	8004810 <HAL_RCC_OscConfig+0xf7c>
 8004806:	4b01      	ldr	r3, [pc, #4]	; (800480c <HAL_RCC_OscConfig+0xf78>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	e029      	b.n	8004860 <HAL_RCC_OscConfig+0xfcc>
 800480c:	40021000 	.word	0x40021000
 8004810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004814:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004818:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800481c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004822:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	fa93 f2a3 	rbit	r2, r3
 800482c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004830:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800483a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800483e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004848:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	fa93 f2a3 	rbit	r2, r3
 8004852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004856:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	4b2b      	ldr	r3, [pc, #172]	; (800490c <HAL_RCC_OscConfig+0x1078>)
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004864:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004868:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800486c:	6011      	str	r1, [r2, #0]
 800486e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004872:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004876:	6812      	ldr	r2, [r2, #0]
 8004878:	fa92 f1a2 	rbit	r1, r2
 800487c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004880:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004884:	6011      	str	r1, [r2, #0]
  return result;
 8004886:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800488a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	fab2 f282 	clz	r2, r2
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	f042 0220 	orr.w	r2, r2, #32
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	f002 021f 	and.w	r2, r2, #31
 80048a0:	2101      	movs	r1, #1
 80048a2:	fa01 f202 	lsl.w	r2, r1, r2
 80048a6:	4013      	ands	r3, r2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d180      	bne.n	80047ae <HAL_RCC_OscConfig+0xf1a>
 80048ac:	e027      	b.n	80048fe <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d101      	bne.n	80048c2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e01e      	b.n	8004900 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048c2:	4b12      	ldr	r3, [pc, #72]	; (800490c <HAL_RCC_OscConfig+0x1078>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80048ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80048ce:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80048d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d10b      	bne.n	80048fa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80048e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80048e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d001      	beq.n	80048fe <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	40021000 	.word	0x40021000

08004910 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b09e      	sub	sp, #120	; 0x78
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e162      	b.n	8004bee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004928:	4b90      	ldr	r3, [pc, #576]	; (8004b6c <HAL_RCC_ClockConfig+0x25c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d910      	bls.n	8004958 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004936:	4b8d      	ldr	r3, [pc, #564]	; (8004b6c <HAL_RCC_ClockConfig+0x25c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f023 0207 	bic.w	r2, r3, #7
 800493e:	498b      	ldr	r1, [pc, #556]	; (8004b6c <HAL_RCC_ClockConfig+0x25c>)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	4313      	orrs	r3, r2
 8004944:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004946:	4b89      	ldr	r3, [pc, #548]	; (8004b6c <HAL_RCC_ClockConfig+0x25c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d001      	beq.n	8004958 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e14a      	b.n	8004bee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d008      	beq.n	8004976 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004964:	4b82      	ldr	r3, [pc, #520]	; (8004b70 <HAL_RCC_ClockConfig+0x260>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	497f      	ldr	r1, [pc, #508]	; (8004b70 <HAL_RCC_ClockConfig+0x260>)
 8004972:	4313      	orrs	r3, r2
 8004974:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 80dc 	beq.w	8004b3c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d13c      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xf6>
 800498c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004990:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004992:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004994:	fa93 f3a3 	rbit	r3, r3
 8004998:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800499a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800499c:	fab3 f383 	clz	r3, r3
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	f043 0301 	orr.w	r3, r3, #1
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d102      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xa6>
 80049b0:	4b6f      	ldr	r3, [pc, #444]	; (8004b70 <HAL_RCC_ClockConfig+0x260>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	e00f      	b.n	80049d6 <HAL_RCC_ClockConfig+0xc6>
 80049b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049be:	fa93 f3a3 	rbit	r3, r3
 80049c2:	667b      	str	r3, [r7, #100]	; 0x64
 80049c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049c8:	663b      	str	r3, [r7, #96]	; 0x60
 80049ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049cc:	fa93 f3a3 	rbit	r3, r3
 80049d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049d2:	4b67      	ldr	r3, [pc, #412]	; (8004b70 <HAL_RCC_ClockConfig+0x260>)
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049da:	65ba      	str	r2, [r7, #88]	; 0x58
 80049dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049de:	fa92 f2a2 	rbit	r2, r2
 80049e2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80049e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80049e6:	fab2 f282 	clz	r2, r2
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	f042 0220 	orr.w	r2, r2, #32
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	f002 021f 	and.w	r2, r2, #31
 80049f6:	2101      	movs	r1, #1
 80049f8:	fa01 f202 	lsl.w	r2, r1, r2
 80049fc:	4013      	ands	r3, r2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d17b      	bne.n	8004afa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e0f3      	b.n	8004bee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d13c      	bne.n	8004a88 <HAL_RCC_ClockConfig+0x178>
 8004a0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a16:	fa93 f3a3 	rbit	r3, r3
 8004a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a1e:	fab3 f383 	clz	r3, r3
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	095b      	lsrs	r3, r3, #5
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	f043 0301 	orr.w	r3, r3, #1
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d102      	bne.n	8004a38 <HAL_RCC_ClockConfig+0x128>
 8004a32:	4b4f      	ldr	r3, [pc, #316]	; (8004b70 <HAL_RCC_ClockConfig+0x260>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	e00f      	b.n	8004a58 <HAL_RCC_ClockConfig+0x148>
 8004a38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a40:	fa93 f3a3 	rbit	r3, r3
 8004a44:	647b      	str	r3, [r7, #68]	; 0x44
 8004a46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a4a:	643b      	str	r3, [r7, #64]	; 0x40
 8004a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a4e:	fa93 f3a3 	rbit	r3, r3
 8004a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a54:	4b46      	ldr	r3, [pc, #280]	; (8004b70 <HAL_RCC_ClockConfig+0x260>)
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a5c:	63ba      	str	r2, [r7, #56]	; 0x38
 8004a5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a60:	fa92 f2a2 	rbit	r2, r2
 8004a64:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004a66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a68:	fab2 f282 	clz	r2, r2
 8004a6c:	b2d2      	uxtb	r2, r2
 8004a6e:	f042 0220 	orr.w	r2, r2, #32
 8004a72:	b2d2      	uxtb	r2, r2
 8004a74:	f002 021f 	and.w	r2, r2, #31
 8004a78:	2101      	movs	r1, #1
 8004a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a7e:	4013      	ands	r3, r2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d13a      	bne.n	8004afa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e0b2      	b.n	8004bee <HAL_RCC_ClockConfig+0x2de>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8e:	fa93 f3a3 	rbit	r3, r3
 8004a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a96:	fab3 f383 	clz	r3, r3
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	095b      	lsrs	r3, r3, #5
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	f043 0301 	orr.w	r3, r3, #1
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d102      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0x1a0>
 8004aaa:	4b31      	ldr	r3, [pc, #196]	; (8004b70 <HAL_RCC_ClockConfig+0x260>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	e00d      	b.n	8004acc <HAL_RCC_ClockConfig+0x1bc>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab6:	fa93 f3a3 	rbit	r3, r3
 8004aba:	627b      	str	r3, [r7, #36]	; 0x24
 8004abc:	2302      	movs	r3, #2
 8004abe:	623b      	str	r3, [r7, #32]
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	fa93 f3a3 	rbit	r3, r3
 8004ac6:	61fb      	str	r3, [r7, #28]
 8004ac8:	4b29      	ldr	r3, [pc, #164]	; (8004b70 <HAL_RCC_ClockConfig+0x260>)
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	2202      	movs	r2, #2
 8004ace:	61ba      	str	r2, [r7, #24]
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	fa92 f2a2 	rbit	r2, r2
 8004ad6:	617a      	str	r2, [r7, #20]
  return result;
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	fab2 f282 	clz	r2, r2
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	f042 0220 	orr.w	r2, r2, #32
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	f002 021f 	and.w	r2, r2, #31
 8004aea:	2101      	movs	r1, #1
 8004aec:	fa01 f202 	lsl.w	r2, r1, r2
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e079      	b.n	8004bee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004afa:	4b1d      	ldr	r3, [pc, #116]	; (8004b70 <HAL_RCC_ClockConfig+0x260>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f023 0203 	bic.w	r2, r3, #3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	491a      	ldr	r1, [pc, #104]	; (8004b70 <HAL_RCC_ClockConfig+0x260>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b0c:	f7fd fa5e 	bl	8001fcc <HAL_GetTick>
 8004b10:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b12:	e00a      	b.n	8004b2a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b14:	f7fd fa5a 	bl	8001fcc <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e061      	b.n	8004bee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b2a:	4b11      	ldr	r3, [pc, #68]	; (8004b70 <HAL_RCC_ClockConfig+0x260>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f003 020c 	and.w	r2, r3, #12
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d1eb      	bne.n	8004b14 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <HAL_RCC_ClockConfig+0x25c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d214      	bcs.n	8004b74 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4a:	4b08      	ldr	r3, [pc, #32]	; (8004b6c <HAL_RCC_ClockConfig+0x25c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f023 0207 	bic.w	r2, r3, #7
 8004b52:	4906      	ldr	r1, [pc, #24]	; (8004b6c <HAL_RCC_ClockConfig+0x25c>)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5a:	4b04      	ldr	r3, [pc, #16]	; (8004b6c <HAL_RCC_ClockConfig+0x25c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d005      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e040      	b.n	8004bee <HAL_RCC_ClockConfig+0x2de>
 8004b6c:	40022000 	.word	0x40022000
 8004b70:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d008      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b80:	4b1d      	ldr	r3, [pc, #116]	; (8004bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	491a      	ldr	r1, [pc, #104]	; (8004bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d009      	beq.n	8004bb2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b9e:	4b16      	ldr	r3, [pc, #88]	; (8004bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	4912      	ldr	r1, [pc, #72]	; (8004bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004bb2:	f000 f829 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 8004bb6:	4601      	mov	r1, r0
 8004bb8:	4b0f      	ldr	r3, [pc, #60]	; (8004bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bc0:	22f0      	movs	r2, #240	; 0xf0
 8004bc2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	fa92 f2a2 	rbit	r2, r2
 8004bca:	60fa      	str	r2, [r7, #12]
  return result;
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	fab2 f282 	clz	r2, r2
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	40d3      	lsrs	r3, r2
 8004bd6:	4a09      	ldr	r2, [pc, #36]	; (8004bfc <HAL_RCC_ClockConfig+0x2ec>)
 8004bd8:	5cd3      	ldrb	r3, [r2, r3]
 8004bda:	fa21 f303 	lsr.w	r3, r1, r3
 8004bde:	4a08      	ldr	r2, [pc, #32]	; (8004c00 <HAL_RCC_ClockConfig+0x2f0>)
 8004be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004be2:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <HAL_RCC_ClockConfig+0x2f4>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fd f9ac 	bl	8001f44 <HAL_InitTick>
  
  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3778      	adds	r7, #120	; 0x78
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	080079e8 	.word	0x080079e8
 8004c00:	20000014 	.word	0x20000014
 8004c04:	20000018 	.word	0x20000018

08004c08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b08b      	sub	sp, #44	; 0x2c
 8004c0c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61fb      	str	r3, [r7, #28]
 8004c12:	2300      	movs	r3, #0
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	2300      	movs	r3, #0
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004c22:	4b29      	ldr	r3, [pc, #164]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f003 030c 	and.w	r3, r3, #12
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d002      	beq.n	8004c38 <HAL_RCC_GetSysClockFreq+0x30>
 8004c32:	2b08      	cmp	r3, #8
 8004c34:	d003      	beq.n	8004c3e <HAL_RCC_GetSysClockFreq+0x36>
 8004c36:	e03c      	b.n	8004cb2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c38:	4b24      	ldr	r3, [pc, #144]	; (8004ccc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c3a:	623b      	str	r3, [r7, #32]
      break;
 8004c3c:	e03c      	b.n	8004cb8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004c44:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004c48:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	fa92 f2a2 	rbit	r2, r2
 8004c50:	607a      	str	r2, [r7, #4]
  return result;
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	fab2 f282 	clz	r2, r2
 8004c58:	b2d2      	uxtb	r2, r2
 8004c5a:	40d3      	lsrs	r3, r2
 8004c5c:	4a1c      	ldr	r2, [pc, #112]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004c5e:	5cd3      	ldrb	r3, [r2, r3]
 8004c60:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004c62:	4b19      	ldr	r3, [pc, #100]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	220f      	movs	r2, #15
 8004c6c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	fa92 f2a2 	rbit	r2, r2
 8004c74:	60fa      	str	r2, [r7, #12]
  return result;
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	fab2 f282 	clz	r2, r2
 8004c7c:	b2d2      	uxtb	r2, r2
 8004c7e:	40d3      	lsrs	r3, r2
 8004c80:	4a14      	ldr	r2, [pc, #80]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c82:	5cd3      	ldrb	r3, [r2, r3]
 8004c84:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d008      	beq.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c90:	4a0e      	ldr	r2, [pc, #56]	; (8004ccc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	fb02 f303 	mul.w	r3, r2, r3
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca0:	e004      	b.n	8004cac <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	4a0c      	ldr	r2, [pc, #48]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ca6:	fb02 f303 	mul.w	r3, r2, r3
 8004caa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	623b      	str	r3, [r7, #32]
      break;
 8004cb0:	e002      	b.n	8004cb8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004cb2:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004cb4:	623b      	str	r3, [r7, #32]
      break;
 8004cb6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	372c      	adds	r7, #44	; 0x2c
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	007a1200 	.word	0x007a1200
 8004cd0:	08007a00 	.word	0x08007a00
 8004cd4:	08007a10 	.word	0x08007a10
 8004cd8:	003d0900 	.word	0x003d0900

08004cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ce0:	4b03      	ldr	r3, [pc, #12]	; (8004cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	20000014 	.word	0x20000014

08004cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004cfa:	f7ff ffef 	bl	8004cdc <HAL_RCC_GetHCLKFreq>
 8004cfe:	4601      	mov	r1, r0
 8004d00:	4b0b      	ldr	r3, [pc, #44]	; (8004d30 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d08:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004d0c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	fa92 f2a2 	rbit	r2, r2
 8004d14:	603a      	str	r2, [r7, #0]
  return result;
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	fab2 f282 	clz	r2, r2
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	40d3      	lsrs	r3, r2
 8004d20:	4a04      	ldr	r2, [pc, #16]	; (8004d34 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004d22:	5cd3      	ldrb	r3, [r2, r3]
 8004d24:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40021000 	.word	0x40021000
 8004d34:	080079f8 	.word	0x080079f8

08004d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004d3e:	f7ff ffcd 	bl	8004cdc <HAL_RCC_GetHCLKFreq>
 8004d42:	4601      	mov	r1, r0
 8004d44:	4b0b      	ldr	r3, [pc, #44]	; (8004d74 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004d4c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004d50:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	fa92 f2a2 	rbit	r2, r2
 8004d58:	603a      	str	r2, [r7, #0]
  return result;
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	fab2 f282 	clz	r2, r2
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	40d3      	lsrs	r3, r2
 8004d64:	4a04      	ldr	r2, [pc, #16]	; (8004d78 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004d66:	5cd3      	ldrb	r3, [r2, r3]
 8004d68:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	40021000 	.word	0x40021000
 8004d78:	080079f8 	.word	0x080079f8

08004d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b092      	sub	sp, #72	; 0x48
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 80d4 	beq.w	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004da0:	4b4e      	ldr	r3, [pc, #312]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10e      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dac:	4b4b      	ldr	r3, [pc, #300]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	4a4a      	ldr	r2, [pc, #296]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db6:	61d3      	str	r3, [r2, #28]
 8004db8:	4b48      	ldr	r3, [pc, #288]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc0:	60bb      	str	r3, [r7, #8]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dca:	4b45      	ldr	r3, [pc, #276]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d118      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dd6:	4b42      	ldr	r3, [pc, #264]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a41      	ldr	r2, [pc, #260]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004de2:	f7fd f8f3 	bl	8001fcc <HAL_GetTick>
 8004de6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de8:	e008      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dea:	f7fd f8ef 	bl	8001fcc <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b64      	cmp	r3, #100	; 0x64
 8004df6:	d901      	bls.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e14b      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dfc:	4b38      	ldr	r3, [pc, #224]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0f0      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e08:	4b34      	ldr	r3, [pc, #208]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e10:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 8084 	beq.w	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d07c      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e28:	4b2c      	ldr	r3, [pc, #176]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3a:	fa93 f3a3 	rbit	r3, r3
 8004e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e42:	fab3 f383 	clz	r3, r3
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	461a      	mov	r2, r3
 8004e4a:	4b26      	ldr	r3, [pc, #152]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e4c:	4413      	add	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	461a      	mov	r2, r3
 8004e52:	2301      	movs	r3, #1
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5e:	fa93 f3a3 	rbit	r3, r3
 8004e62:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e66:	fab3 f383 	clz	r3, r3
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e70:	4413      	add	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	461a      	mov	r2, r3
 8004e76:	2300      	movs	r3, #0
 8004e78:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e7a:	4a18      	ldr	r2, [pc, #96]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e7e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d04b      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8a:	f7fd f89f 	bl	8001fcc <HAL_GetTick>
 8004e8e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e90:	e00a      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e92:	f7fd f89b 	bl	8001fcc <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e0f5      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	fa93 f3a3 	rbit	r3, r3
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	623b      	str	r3, [r7, #32]
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	fa93 f3a3 	rbit	r3, r3
 8004ebe:	61fb      	str	r3, [r7, #28]
  return result;
 8004ec0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec2:	fab3 f383 	clz	r3, r3
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	095b      	lsrs	r3, r3, #5
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	f043 0302 	orr.w	r3, r3, #2
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d108      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004ed6:	4b01      	ldr	r3, [pc, #4]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	e00d      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	40007000 	.word	0x40007000
 8004ee4:	10908100 	.word	0x10908100
 8004ee8:	2302      	movs	r3, #2
 8004eea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	fa93 f3a3 	rbit	r3, r3
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	4b69      	ldr	r3, [pc, #420]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	2202      	movs	r2, #2
 8004efa:	613a      	str	r2, [r7, #16]
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	fa92 f2a2 	rbit	r2, r2
 8004f02:	60fa      	str	r2, [r7, #12]
  return result;
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	fab2 f282 	clz	r2, r2
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	f002 021f 	and.w	r2, r2, #31
 8004f16:	2101      	movs	r1, #1
 8004f18:	fa01 f202 	lsl.w	r2, r1, r2
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0b7      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004f22:	4b5e      	ldr	r3, [pc, #376]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	495b      	ldr	r1, [pc, #364]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d105      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f3c:	4b57      	ldr	r3, [pc, #348]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	4a56      	ldr	r2, [pc, #344]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f46:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d008      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f54:	4b51      	ldr	r3, [pc, #324]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f58:	f023 0203 	bic.w	r2, r3, #3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	494e      	ldr	r1, [pc, #312]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d008      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f72:	4b4a      	ldr	r3, [pc, #296]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f76:	f023 0210 	bic.w	r2, r3, #16
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	4947      	ldr	r1, [pc, #284]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d008      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004f90:	4b42      	ldr	r3, [pc, #264]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9c:	493f      	ldr	r1, [pc, #252]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d008      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fae:	4b3b      	ldr	r3, [pc, #236]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb2:	f023 0220 	bic.w	r2, r3, #32
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	4938      	ldr	r1, [pc, #224]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d008      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fcc:	4b33      	ldr	r3, [pc, #204]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	4930      	ldr	r1, [pc, #192]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d008      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004fea:	4b2c      	ldr	r3, [pc, #176]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	4929      	ldr	r1, [pc, #164]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005004:	2b00      	cmp	r3, #0
 8005006:	d008      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8005008:	4b24      	ldr	r3, [pc, #144]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800500a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	4921      	ldr	r1, [pc, #132]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005016:	4313      	orrs	r3, r2
 8005018:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d008      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005026:	4b1d      	ldr	r3, [pc, #116]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	491a      	ldr	r1, [pc, #104]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005034:	4313      	orrs	r3, r2
 8005036:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d008      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005044:	4b15      	ldr	r3, [pc, #84]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005048:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	4912      	ldr	r1, [pc, #72]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005052:	4313      	orrs	r3, r2
 8005054:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d008      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005062:	4b0e      	ldr	r3, [pc, #56]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005066:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506e:	490b      	ldr	r1, [pc, #44]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005070:	4313      	orrs	r3, r2
 8005072:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d008      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005080:	4b06      	ldr	r3, [pc, #24]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005084:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	4903      	ldr	r1, [pc, #12]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800508e:	4313      	orrs	r3, r2
 8005090:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3748      	adds	r7, #72	; 0x48
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40021000 	.word	0x40021000

080050a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e049      	b.n	8005146 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fc fdf8 	bl	8001cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3304      	adds	r3, #4
 80050dc:	4619      	mov	r1, r3
 80050de:	4610      	mov	r0, r2
 80050e0:	f000 fbe6 	bl	80058b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b01      	cmp	r3, #1
 8005162:	d001      	beq.n	8005168 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e033      	b.n	80051d0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a19      	ldr	r2, [pc, #100]	; (80051dc <HAL_TIM_Base_Start+0x8c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d009      	beq.n	800518e <HAL_TIM_Base_Start+0x3e>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005182:	d004      	beq.n	800518e <HAL_TIM_Base_Start+0x3e>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a15      	ldr	r2, [pc, #84]	; (80051e0 <HAL_TIM_Base_Start+0x90>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d115      	bne.n	80051ba <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	4b13      	ldr	r3, [pc, #76]	; (80051e4 <HAL_TIM_Base_Start+0x94>)
 8005196:	4013      	ands	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2b06      	cmp	r3, #6
 800519e:	d015      	beq.n	80051cc <HAL_TIM_Base_Start+0x7c>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051a6:	d011      	beq.n	80051cc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0201 	orr.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b8:	e008      	b.n	80051cc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f042 0201 	orr.w	r2, r2, #1
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	e000      	b.n	80051ce <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	40012c00 	.word	0x40012c00
 80051e0:	40014000 	.word	0x40014000
 80051e4:	00010007 	.word	0x00010007

080051e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e097      	b.n	800532c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d106      	bne.n	8005216 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f7fc fd0b 	bl	8001c2c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2202      	movs	r2, #2
 800521a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6812      	ldr	r2, [r2, #0]
 8005228:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800522c:	f023 0307 	bic.w	r3, r3, #7
 8005230:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3304      	adds	r3, #4
 800523a:	4619      	mov	r1, r3
 800523c:	4610      	mov	r0, r2
 800523e:	f000 fb37 	bl	80058b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	4313      	orrs	r3, r2
 8005262:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800526a:	f023 0303 	bic.w	r3, r3, #3
 800526e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	021b      	lsls	r3, r3, #8
 800527a:	4313      	orrs	r3, r2
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005288:	f023 030c 	bic.w	r3, r3, #12
 800528c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005294:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005298:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	021b      	lsls	r3, r3, #8
 80052a4:	4313      	orrs	r3, r2
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	011a      	lsls	r2, r3, #4
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	031b      	lsls	r3, r3, #12
 80052b8:	4313      	orrs	r3, r2
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	4313      	orrs	r3, r2
 80052be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80052c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80052ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	4313      	orrs	r3, r2
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005344:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800534c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005354:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800535c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d110      	bne.n	8005386 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005364:	7bfb      	ldrb	r3, [r7, #15]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d102      	bne.n	8005370 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800536a:	7b7b      	ldrb	r3, [r7, #13]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d001      	beq.n	8005374 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e089      	b.n	8005488 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005384:	e031      	b.n	80053ea <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b04      	cmp	r3, #4
 800538a:	d110      	bne.n	80053ae <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800538c:	7bbb      	ldrb	r3, [r7, #14]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d102      	bne.n	8005398 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005392:	7b3b      	ldrb	r3, [r7, #12]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d001      	beq.n	800539c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e075      	b.n	8005488 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053ac:	e01d      	b.n	80053ea <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d108      	bne.n	80053c6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80053b4:	7bbb      	ldrb	r3, [r7, #14]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d105      	bne.n	80053c6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053ba:	7b7b      	ldrb	r3, [r7, #13]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d102      	bne.n	80053c6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80053c0:	7b3b      	ldrb	r3, [r7, #12]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d001      	beq.n	80053ca <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e05e      	b.n	8005488 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2202      	movs	r2, #2
 80053ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2202      	movs	r2, #2
 80053d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2202      	movs	r2, #2
 80053de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2202      	movs	r2, #2
 80053e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <HAL_TIM_Encoder_Start_IT+0xc4>
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d010      	beq.n	8005418 <HAL_TIM_Encoder_Start_IT+0xe4>
 80053f6:	e01f      	b.n	8005438 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2201      	movs	r2, #1
 80053fe:	2100      	movs	r1, #0
 8005400:	4618      	mov	r0, r3
 8005402:	f000 fb5d 	bl	8005ac0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f042 0202 	orr.w	r2, r2, #2
 8005414:	60da      	str	r2, [r3, #12]
      break;
 8005416:	e02e      	b.n	8005476 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2201      	movs	r2, #1
 800541e:	2104      	movs	r1, #4
 8005420:	4618      	mov	r0, r3
 8005422:	f000 fb4d 	bl	8005ac0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68da      	ldr	r2, [r3, #12]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f042 0204 	orr.w	r2, r2, #4
 8005434:	60da      	str	r2, [r3, #12]
      break;
 8005436:	e01e      	b.n	8005476 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2201      	movs	r2, #1
 800543e:	2100      	movs	r1, #0
 8005440:	4618      	mov	r0, r3
 8005442:	f000 fb3d 	bl	8005ac0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2201      	movs	r2, #1
 800544c:	2104      	movs	r1, #4
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fb36 	bl	8005ac0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68da      	ldr	r2, [r3, #12]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0202 	orr.w	r2, r2, #2
 8005462:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0204 	orr.w	r2, r2, #4
 8005472:	60da      	str	r2, [r3, #12]
      break;
 8005474:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f042 0201 	orr.w	r2, r2, #1
 8005484:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d122      	bne.n	80054ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d11b      	bne.n	80054ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f06f 0202 	mvn.w	r2, #2
 80054bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7fb fa92 	bl	80009fc <HAL_TIM_IC_CaptureCallback>
 80054d8:	e005      	b.n	80054e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f9ca 	bl	8005874 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f9d1 	bl	8005888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f003 0304 	and.w	r3, r3, #4
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d122      	bne.n	8005540 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b04      	cmp	r3, #4
 8005506:	d11b      	bne.n	8005540 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f06f 0204 	mvn.w	r2, #4
 8005510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2202      	movs	r2, #2
 8005516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fb fa68 	bl	80009fc <HAL_TIM_IC_CaptureCallback>
 800552c:	e005      	b.n	800553a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f9a0 	bl	8005874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f9a7 	bl	8005888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	f003 0308 	and.w	r3, r3, #8
 800554a:	2b08      	cmp	r3, #8
 800554c:	d122      	bne.n	8005594 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f003 0308 	and.w	r3, r3, #8
 8005558:	2b08      	cmp	r3, #8
 800555a:	d11b      	bne.n	8005594 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f06f 0208 	mvn.w	r2, #8
 8005564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2204      	movs	r2, #4
 800556a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	f003 0303 	and.w	r3, r3, #3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7fb fa3e 	bl	80009fc <HAL_TIM_IC_CaptureCallback>
 8005580:	e005      	b.n	800558e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f976 	bl	8005874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f97d 	bl	8005888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	f003 0310 	and.w	r3, r3, #16
 800559e:	2b10      	cmp	r3, #16
 80055a0:	d122      	bne.n	80055e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f003 0310 	and.w	r3, r3, #16
 80055ac:	2b10      	cmp	r3, #16
 80055ae:	d11b      	bne.n	80055e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f06f 0210 	mvn.w	r2, #16
 80055b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2208      	movs	r2, #8
 80055be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7fb fa14 	bl	80009fc <HAL_TIM_IC_CaptureCallback>
 80055d4:	e005      	b.n	80055e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f94c 	bl	8005874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f953 	bl	8005888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d10e      	bne.n	8005614 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b01      	cmp	r3, #1
 8005602:	d107      	bne.n	8005614 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f06f 0201 	mvn.w	r2, #1
 800560c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f926 	bl	8005860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561e:	2b80      	cmp	r3, #128	; 0x80
 8005620:	d10e      	bne.n	8005640 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562c:	2b80      	cmp	r3, #128	; 0x80
 800562e:	d107      	bne.n	8005640 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 fad6 	bl	8005bec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800564e:	d10e      	bne.n	800566e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800565a:	2b80      	cmp	r3, #128	; 0x80
 800565c:	d107      	bne.n	800566e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 fac9 	bl	8005c00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005678:	2b40      	cmp	r3, #64	; 0x40
 800567a:	d10e      	bne.n	800569a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005686:	2b40      	cmp	r3, #64	; 0x40
 8005688:	d107      	bne.n	800569a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f901 	bl	800589c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	f003 0320 	and.w	r3, r3, #32
 80056a4:	2b20      	cmp	r3, #32
 80056a6:	d10e      	bne.n	80056c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f003 0320 	and.w	r3, r3, #32
 80056b2:	2b20      	cmp	r3, #32
 80056b4:	d107      	bne.n	80056c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f06f 0220 	mvn.w	r2, #32
 80056be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fa89 	bl	8005bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056c6:	bf00      	nop
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b084      	sub	sp, #16
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056d8:	2300      	movs	r3, #0
 80056da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d101      	bne.n	80056ea <HAL_TIM_ConfigClockSource+0x1c>
 80056e6:	2302      	movs	r3, #2
 80056e8:	e0b6      	b.n	8005858 <HAL_TIM_ConfigClockSource+0x18a>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2202      	movs	r2, #2
 80056f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005708:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800570c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005714:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005726:	d03e      	beq.n	80057a6 <HAL_TIM_ConfigClockSource+0xd8>
 8005728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800572c:	f200 8087 	bhi.w	800583e <HAL_TIM_ConfigClockSource+0x170>
 8005730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005734:	f000 8086 	beq.w	8005844 <HAL_TIM_ConfigClockSource+0x176>
 8005738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800573c:	d87f      	bhi.n	800583e <HAL_TIM_ConfigClockSource+0x170>
 800573e:	2b70      	cmp	r3, #112	; 0x70
 8005740:	d01a      	beq.n	8005778 <HAL_TIM_ConfigClockSource+0xaa>
 8005742:	2b70      	cmp	r3, #112	; 0x70
 8005744:	d87b      	bhi.n	800583e <HAL_TIM_ConfigClockSource+0x170>
 8005746:	2b60      	cmp	r3, #96	; 0x60
 8005748:	d050      	beq.n	80057ec <HAL_TIM_ConfigClockSource+0x11e>
 800574a:	2b60      	cmp	r3, #96	; 0x60
 800574c:	d877      	bhi.n	800583e <HAL_TIM_ConfigClockSource+0x170>
 800574e:	2b50      	cmp	r3, #80	; 0x50
 8005750:	d03c      	beq.n	80057cc <HAL_TIM_ConfigClockSource+0xfe>
 8005752:	2b50      	cmp	r3, #80	; 0x50
 8005754:	d873      	bhi.n	800583e <HAL_TIM_ConfigClockSource+0x170>
 8005756:	2b40      	cmp	r3, #64	; 0x40
 8005758:	d058      	beq.n	800580c <HAL_TIM_ConfigClockSource+0x13e>
 800575a:	2b40      	cmp	r3, #64	; 0x40
 800575c:	d86f      	bhi.n	800583e <HAL_TIM_ConfigClockSource+0x170>
 800575e:	2b30      	cmp	r3, #48	; 0x30
 8005760:	d064      	beq.n	800582c <HAL_TIM_ConfigClockSource+0x15e>
 8005762:	2b30      	cmp	r3, #48	; 0x30
 8005764:	d86b      	bhi.n	800583e <HAL_TIM_ConfigClockSource+0x170>
 8005766:	2b20      	cmp	r3, #32
 8005768:	d060      	beq.n	800582c <HAL_TIM_ConfigClockSource+0x15e>
 800576a:	2b20      	cmp	r3, #32
 800576c:	d867      	bhi.n	800583e <HAL_TIM_ConfigClockSource+0x170>
 800576e:	2b00      	cmp	r3, #0
 8005770:	d05c      	beq.n	800582c <HAL_TIM_ConfigClockSource+0x15e>
 8005772:	2b10      	cmp	r3, #16
 8005774:	d05a      	beq.n	800582c <HAL_TIM_ConfigClockSource+0x15e>
 8005776:	e062      	b.n	800583e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6818      	ldr	r0, [r3, #0]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	6899      	ldr	r1, [r3, #8]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f000 f97a 	bl	8005a80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800579a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	609a      	str	r2, [r3, #8]
      break;
 80057a4:	e04f      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6818      	ldr	r0, [r3, #0]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	6899      	ldr	r1, [r3, #8]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f000 f963 	bl	8005a80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057c8:	609a      	str	r2, [r3, #8]
      break;
 80057ca:	e03c      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6818      	ldr	r0, [r3, #0]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	6859      	ldr	r1, [r3, #4]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	461a      	mov	r2, r3
 80057da:	f000 f8d7 	bl	800598c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2150      	movs	r1, #80	; 0x50
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 f930 	bl	8005a4a <TIM_ITRx_SetConfig>
      break;
 80057ea:	e02c      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6818      	ldr	r0, [r3, #0]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	6859      	ldr	r1, [r3, #4]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	461a      	mov	r2, r3
 80057fa:	f000 f8f6 	bl	80059ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2160      	movs	r1, #96	; 0x60
 8005804:	4618      	mov	r0, r3
 8005806:	f000 f920 	bl	8005a4a <TIM_ITRx_SetConfig>
      break;
 800580a:	e01c      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6818      	ldr	r0, [r3, #0]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	6859      	ldr	r1, [r3, #4]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	461a      	mov	r2, r3
 800581a:	f000 f8b7 	bl	800598c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2140      	movs	r1, #64	; 0x40
 8005824:	4618      	mov	r0, r3
 8005826:	f000 f910 	bl	8005a4a <TIM_ITRx_SetConfig>
      break;
 800582a:	e00c      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4619      	mov	r1, r3
 8005836:	4610      	mov	r0, r2
 8005838:	f000 f907 	bl	8005a4a <TIM_ITRx_SetConfig>
      break;
 800583c:	e003      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	73fb      	strb	r3, [r7, #15]
      break;
 8005842:	e000      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005844:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005856:	7bfb      	ldrb	r3, [r7, #15]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a2e      	ldr	r2, [pc, #184]	; (800597c <TIM_Base_SetConfig+0xcc>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d003      	beq.n	80058d0 <TIM_Base_SetConfig+0x20>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ce:	d108      	bne.n	80058e2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a25      	ldr	r2, [pc, #148]	; (800597c <TIM_Base_SetConfig+0xcc>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d00f      	beq.n	800590a <TIM_Base_SetConfig+0x5a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f0:	d00b      	beq.n	800590a <TIM_Base_SetConfig+0x5a>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a22      	ldr	r2, [pc, #136]	; (8005980 <TIM_Base_SetConfig+0xd0>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d007      	beq.n	800590a <TIM_Base_SetConfig+0x5a>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a21      	ldr	r2, [pc, #132]	; (8005984 <TIM_Base_SetConfig+0xd4>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d003      	beq.n	800590a <TIM_Base_SetConfig+0x5a>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a20      	ldr	r2, [pc, #128]	; (8005988 <TIM_Base_SetConfig+0xd8>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d108      	bne.n	800591c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	4313      	orrs	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	4313      	orrs	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a0e      	ldr	r2, [pc, #56]	; (800597c <TIM_Base_SetConfig+0xcc>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d00b      	beq.n	8005960 <TIM_Base_SetConfig+0xb0>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a0d      	ldr	r2, [pc, #52]	; (8005980 <TIM_Base_SetConfig+0xd0>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d007      	beq.n	8005960 <TIM_Base_SetConfig+0xb0>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a0c      	ldr	r2, [pc, #48]	; (8005984 <TIM_Base_SetConfig+0xd4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d003      	beq.n	8005960 <TIM_Base_SetConfig+0xb0>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a0b      	ldr	r2, [pc, #44]	; (8005988 <TIM_Base_SetConfig+0xd8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d103      	bne.n	8005968 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	691a      	ldr	r2, [r3, #16]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	615a      	str	r2, [r3, #20]
}
 800596e:	bf00      	nop
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	40012c00 	.word	0x40012c00
 8005980:	40014000 	.word	0x40014000
 8005984:	40014400 	.word	0x40014400
 8005988:	40014800 	.word	0x40014800

0800598c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	f023 0201 	bic.w	r2, r3, #1
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	011b      	lsls	r3, r3, #4
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	4313      	orrs	r3, r2
 80059c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f023 030a 	bic.w	r3, r3, #10
 80059c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	621a      	str	r2, [r3, #32]
}
 80059de:	bf00      	nop
 80059e0:	371c      	adds	r7, #28
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b087      	sub	sp, #28
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	60f8      	str	r0, [r7, #12]
 80059f2:	60b9      	str	r1, [r7, #8]
 80059f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	f023 0210 	bic.w	r2, r3, #16
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	031b      	lsls	r3, r3, #12
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	011b      	lsls	r3, r3, #4
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	621a      	str	r2, [r3, #32]
}
 8005a3e:	bf00      	nop
 8005a40:	371c      	adds	r7, #28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b085      	sub	sp, #20
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	f043 0307 	orr.w	r3, r3, #7
 8005a6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	609a      	str	r2, [r3, #8]
}
 8005a74:	bf00      	nop
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
 8005a8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	021a      	lsls	r2, r3, #8
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	609a      	str	r2, [r3, #8]
}
 8005ab4:	bf00      	nop
 8005ab6:	371c      	adds	r7, #28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f003 031f 	and.w	r3, r3, #31
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6a1a      	ldr	r2, [r3, #32]
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	43db      	mvns	r3, r3
 8005ae2:	401a      	ands	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6a1a      	ldr	r2, [r3, #32]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f003 031f 	and.w	r3, r3, #31
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	fa01 f303 	lsl.w	r3, r1, r3
 8005af8:	431a      	orrs	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	621a      	str	r2, [r3, #32]
}
 8005afe:	bf00      	nop
 8005b00:	371c      	adds	r7, #28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
	...

08005b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b20:	2302      	movs	r3, #2
 8005b22:	e04f      	b.n	8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a21      	ldr	r2, [pc, #132]	; (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d108      	bne.n	8005b60 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b54:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a14      	ldr	r2, [pc, #80]	; (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d009      	beq.n	8005b98 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b8c:	d004      	beq.n	8005b98 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a10      	ldr	r2, [pc, #64]	; (8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d10c      	bne.n	8005bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	40012c00 	.word	0x40012c00
 8005bd4:	40014000 	.word	0x40014000

08005bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e040      	b.n	8005ca8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d106      	bne.n	8005c3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7fc f860 	bl	8001cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2224      	movs	r2, #36	; 0x24
 8005c40:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 0201 	bic.w	r2, r2, #1
 8005c50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fc0a 	bl	800646c <UART_SetConfig>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d101      	bne.n	8005c62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e022      	b.n	8005ca8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fd34 	bl	80066d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689a      	ldr	r2, [r3, #8]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0201 	orr.w	r2, r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fdbb 	bl	800681c <UART_CheckIdleState>
 8005ca6:	4603      	mov	r3, r0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08a      	sub	sp, #40	; 0x28
 8005cb4:	af02      	add	r7, sp, #8
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	603b      	str	r3, [r7, #0]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cc4:	2b20      	cmp	r3, #32
 8005cc6:	d178      	bne.n	8005dba <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d002      	beq.n	8005cd4 <HAL_UART_Transmit+0x24>
 8005cce:	88fb      	ldrh	r3, [r7, #6]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e071      	b.n	8005dbc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2221      	movs	r2, #33	; 0x21
 8005ce4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ce6:	f7fc f971 	bl	8001fcc <HAL_GetTick>
 8005cea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	88fa      	ldrh	r2, [r7, #6]
 8005cf0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	88fa      	ldrh	r2, [r7, #6]
 8005cf8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d04:	d108      	bne.n	8005d18 <HAL_UART_Transmit+0x68>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d104      	bne.n	8005d18 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	61bb      	str	r3, [r7, #24]
 8005d16:	e003      	b.n	8005d20 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d20:	e030      	b.n	8005d84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	2180      	movs	r1, #128	; 0x80
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 fe1d 	bl	800696c <UART_WaitOnFlagUntilTimeout>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d004      	beq.n	8005d42 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e03c      	b.n	8005dbc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10b      	bne.n	8005d60 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	881a      	ldrh	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d54:	b292      	uxth	r2, r2
 8005d56:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	3302      	adds	r3, #2
 8005d5c:	61bb      	str	r3, [r7, #24]
 8005d5e:	e008      	b.n	8005d72 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	781a      	ldrb	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	b292      	uxth	r2, r2
 8005d6a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1c8      	bne.n	8005d22 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	2200      	movs	r2, #0
 8005d98:	2140      	movs	r1, #64	; 0x40
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f000 fde6 	bl	800696c <UART_WaitOnFlagUntilTimeout>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d004      	beq.n	8005db0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2220      	movs	r2, #32
 8005daa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e005      	b.n	8005dbc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2220      	movs	r2, #32
 8005db4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	e000      	b.n	8005dbc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005dba:	2302      	movs	r3, #2
  }
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3720      	adds	r7, #32
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08a      	sub	sp, #40	; 0x28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dd8:	2b20      	cmp	r3, #32
 8005dda:	d132      	bne.n	8005e42 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d002      	beq.n	8005de8 <HAL_UART_Receive_IT+0x24>
 8005de2:	88fb      	ldrh	r3, [r7, #6]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e02b      	b.n	8005e44 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d018      	beq.n	8005e32 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	e853 3f00 	ldrex	r3, [r3]
 8005e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e14:	627b      	str	r3, [r7, #36]	; 0x24
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	623b      	str	r3, [r7, #32]
 8005e20:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e22:	69f9      	ldr	r1, [r7, #28]
 8005e24:	6a3a      	ldr	r2, [r7, #32]
 8005e26:	e841 2300 	strex	r3, r2, [r1]
 8005e2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1e6      	bne.n	8005e00 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e32:	88fb      	ldrh	r3, [r7, #6]
 8005e34:	461a      	mov	r2, r3
 8005e36:	68b9      	ldr	r1, [r7, #8]
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 fdff 	bl	8006a3c <UART_Start_Receive_IT>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	e000      	b.n	8005e44 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005e42:	2302      	movs	r3, #2
  }
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3728      	adds	r7, #40	; 0x28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b0ba      	sub	sp, #232	; 0xe8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005e76:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005e80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d115      	bne.n	8005eb4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e8c:	f003 0320 	and.w	r3, r3, #32
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00f      	beq.n	8005eb4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e98:	f003 0320 	and.w	r3, r3, #32
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d009      	beq.n	8005eb4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 82ab 	beq.w	8006400 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	4798      	blx	r3
      }
      return;
 8005eb2:	e2a5      	b.n	8006400 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005eb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 8117 	beq.w	80060ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d106      	bne.n	8005ed8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005eca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005ece:	4b85      	ldr	r3, [pc, #532]	; (80060e4 <HAL_UART_IRQHandler+0x298>)
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 810a 	beq.w	80060ec <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d011      	beq.n	8005f08 <HAL_UART_IRQHandler+0xbc>
 8005ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00b      	beq.n	8005f08 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005efe:	f043 0201 	orr.w	r2, r3, #1
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d011      	beq.n	8005f38 <HAL_UART_IRQHandler+0xec>
 8005f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00b      	beq.n	8005f38 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2202      	movs	r2, #2
 8005f26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f2e:	f043 0204 	orr.w	r2, r3, #4
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d011      	beq.n	8005f68 <HAL_UART_IRQHandler+0x11c>
 8005f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00b      	beq.n	8005f68 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2204      	movs	r2, #4
 8005f56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f5e:	f043 0202 	orr.w	r2, r3, #2
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f6c:	f003 0308 	and.w	r3, r3, #8
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d017      	beq.n	8005fa4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f78:	f003 0320 	and.w	r3, r3, #32
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d105      	bne.n	8005f8c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f84:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00b      	beq.n	8005fa4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2208      	movs	r2, #8
 8005f92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f9a:	f043 0208 	orr.w	r2, r3, #8
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d012      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x18a>
 8005fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00c      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fcc:	f043 0220 	orr.w	r2, r3, #32
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 8211 	beq.w	8006404 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fe6:	f003 0320 	and.w	r3, r3, #32
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00d      	beq.n	800600a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d007      	beq.n	800600a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006010:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601e:	2b40      	cmp	r3, #64	; 0x40
 8006020:	d005      	beq.n	800602e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006022:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006026:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800602a:	2b00      	cmp	r3, #0
 800602c:	d04f      	beq.n	80060ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 fdca 	bl	8006bc8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603e:	2b40      	cmp	r3, #64	; 0x40
 8006040:	d141      	bne.n	80060c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3308      	adds	r3, #8
 8006048:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006050:	e853 3f00 	ldrex	r3, [r3]
 8006054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006058:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800605c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006060:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3308      	adds	r3, #8
 800606a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800606e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006072:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006076:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800607a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800607e:	e841 2300 	strex	r3, r2, [r1]
 8006082:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006086:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1d9      	bne.n	8006042 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006092:	2b00      	cmp	r3, #0
 8006094:	d013      	beq.n	80060be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800609a:	4a13      	ldr	r2, [pc, #76]	; (80060e8 <HAL_UART_IRQHandler+0x29c>)
 800609c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fd f90a 	bl	80032bc <HAL_DMA_Abort_IT>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d017      	beq.n	80060de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80060b8:	4610      	mov	r0, r2
 80060ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060bc:	e00f      	b.n	80060de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f9be 	bl	8006440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c4:	e00b      	b.n	80060de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f9ba 	bl	8006440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060cc:	e007      	b.n	80060de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f9b6 	bl	8006440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80060dc:	e192      	b.n	8006404 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060de:	bf00      	nop
    return;
 80060e0:	e190      	b.n	8006404 <HAL_UART_IRQHandler+0x5b8>
 80060e2:	bf00      	nop
 80060e4:	04000120 	.word	0x04000120
 80060e8:	08006c91 	.word	0x08006c91

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	f040 814b 	bne.w	800638c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80060f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060fa:	f003 0310 	and.w	r3, r3, #16
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 8144 	beq.w	800638c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006108:	f003 0310 	and.w	r3, r3, #16
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 813d 	beq.w	800638c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2210      	movs	r2, #16
 8006118:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006124:	2b40      	cmp	r3, #64	; 0x40
 8006126:	f040 80b5 	bne.w	8006294 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006136:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 8164 	beq.w	8006408 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006146:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800614a:	429a      	cmp	r2, r3
 800614c:	f080 815c 	bcs.w	8006408 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006156:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	2b20      	cmp	r3, #32
 8006162:	f000 8086 	beq.w	8006272 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006172:	e853 3f00 	ldrex	r3, [r3]
 8006176:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800617a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800617e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006182:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	461a      	mov	r2, r3
 800618c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006190:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006194:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006198:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800619c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061a0:	e841 2300 	strex	r3, r2, [r1]
 80061a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80061a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1da      	bne.n	8006166 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3308      	adds	r3, #8
 80061b6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061ba:	e853 3f00 	ldrex	r3, [r3]
 80061be:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061c2:	f023 0301 	bic.w	r3, r3, #1
 80061c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3308      	adds	r3, #8
 80061d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061d4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061d8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061da:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061e0:	e841 2300 	strex	r3, r2, [r1]
 80061e4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80061e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e1      	bne.n	80061b0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3308      	adds	r3, #8
 80061f2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061f6:	e853 3f00 	ldrex	r3, [r3]
 80061fa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006202:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3308      	adds	r3, #8
 800620c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006210:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006212:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006214:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006216:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006218:	e841 2300 	strex	r3, r2, [r1]
 800621c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800621e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1e3      	bne.n	80061ec <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2220      	movs	r2, #32
 8006228:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800623a:	e853 3f00 	ldrex	r3, [r3]
 800623e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006242:	f023 0310 	bic.w	r3, r3, #16
 8006246:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	461a      	mov	r2, r3
 8006250:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006254:	65bb      	str	r3, [r7, #88]	; 0x58
 8006256:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800625a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e4      	bne.n	8006232 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800626c:	4618      	mov	r0, r3
 800626e:	f7fc ffec 	bl	800324a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2202      	movs	r2, #2
 8006276:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006284:	b29b      	uxth	r3, r3
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	b29b      	uxth	r3, r3
 800628a:	4619      	mov	r1, r3
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f8e1 	bl	8006454 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006292:	e0b9      	b.n	8006408 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 80ab 	beq.w	800640c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80062b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f000 80a6 	beq.w	800640c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c8:	e853 3f00 	ldrex	r3, [r3]
 80062cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	461a      	mov	r2, r3
 80062de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062e2:	647b      	str	r3, [r7, #68]	; 0x44
 80062e4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062ea:	e841 2300 	strex	r3, r2, [r1]
 80062ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1e4      	bne.n	80062c0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	3308      	adds	r3, #8
 80062fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	e853 3f00 	ldrex	r3, [r3]
 8006304:	623b      	str	r3, [r7, #32]
   return(result);
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	f023 0301 	bic.w	r3, r3, #1
 800630c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3308      	adds	r3, #8
 8006316:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800631a:	633a      	str	r2, [r7, #48]	; 0x30
 800631c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006322:	e841 2300 	strex	r3, r2, [r1]
 8006326:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1e3      	bne.n	80062f6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2220      	movs	r2, #32
 8006332:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	e853 3f00 	ldrex	r3, [r3]
 800634e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f023 0310 	bic.w	r3, r3, #16
 8006356:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006364:	61fb      	str	r3, [r7, #28]
 8006366:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006368:	69b9      	ldr	r1, [r7, #24]
 800636a:	69fa      	ldr	r2, [r7, #28]
 800636c:	e841 2300 	strex	r3, r2, [r1]
 8006370:	617b      	str	r3, [r7, #20]
   return(result);
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1e4      	bne.n	8006342 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2202      	movs	r2, #2
 800637c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800637e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f865 	bl	8006454 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800638a:	e03f      	b.n	800640c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800638c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006390:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00e      	beq.n	80063b6 <HAL_UART_IRQHandler+0x56a>
 8006398:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800639c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d008      	beq.n	80063b6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80063ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fe56 	bl	8007060 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063b4:	e02d      	b.n	8006412 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80063b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00e      	beq.n	80063e0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80063c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d008      	beq.n	80063e0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d01c      	beq.n	8006410 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	4798      	blx	r3
    }
    return;
 80063de:	e017      	b.n	8006410 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d012      	beq.n	8006412 <HAL_UART_IRQHandler+0x5c6>
 80063ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00c      	beq.n	8006412 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fc5f 	bl	8006cbc <UART_EndTransmit_IT>
    return;
 80063fe:	e008      	b.n	8006412 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006400:	bf00      	nop
 8006402:	e006      	b.n	8006412 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006404:	bf00      	nop
 8006406:	e004      	b.n	8006412 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006408:	bf00      	nop
 800640a:	e002      	b.n	8006412 <HAL_UART_IRQHandler+0x5c6>
      return;
 800640c:	bf00      	nop
 800640e:	e000      	b.n	8006412 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006410:	bf00      	nop
  }

}
 8006412:	37e8      	adds	r7, #232	; 0xe8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	460b      	mov	r3, r1
 800645e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	431a      	orrs	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	431a      	orrs	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	4313      	orrs	r3, r2
 800648e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	4b8a      	ldr	r3, [pc, #552]	; (80066c0 <UART_SetConfig+0x254>)
 8006498:	4013      	ands	r3, r2
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	6812      	ldr	r2, [r2, #0]
 800649e:	6979      	ldr	r1, [r7, #20]
 80064a0:	430b      	orrs	r3, r1
 80064a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68da      	ldr	r2, [r3, #12]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	430a      	orrs	r2, r1
 80064dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a78      	ldr	r2, [pc, #480]	; (80066c4 <UART_SetConfig+0x258>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d120      	bne.n	800652a <UART_SetConfig+0xbe>
 80064e8:	4b77      	ldr	r3, [pc, #476]	; (80066c8 <UART_SetConfig+0x25c>)
 80064ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ec:	f003 0303 	and.w	r3, r3, #3
 80064f0:	2b03      	cmp	r3, #3
 80064f2:	d817      	bhi.n	8006524 <UART_SetConfig+0xb8>
 80064f4:	a201      	add	r2, pc, #4	; (adr r2, 80064fc <UART_SetConfig+0x90>)
 80064f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fa:	bf00      	nop
 80064fc:	0800650d 	.word	0x0800650d
 8006500:	08006519 	.word	0x08006519
 8006504:	0800651f 	.word	0x0800651f
 8006508:	08006513 	.word	0x08006513
 800650c:	2300      	movs	r3, #0
 800650e:	77fb      	strb	r3, [r7, #31]
 8006510:	e01d      	b.n	800654e <UART_SetConfig+0xe2>
 8006512:	2302      	movs	r3, #2
 8006514:	77fb      	strb	r3, [r7, #31]
 8006516:	e01a      	b.n	800654e <UART_SetConfig+0xe2>
 8006518:	2304      	movs	r3, #4
 800651a:	77fb      	strb	r3, [r7, #31]
 800651c:	e017      	b.n	800654e <UART_SetConfig+0xe2>
 800651e:	2308      	movs	r3, #8
 8006520:	77fb      	strb	r3, [r7, #31]
 8006522:	e014      	b.n	800654e <UART_SetConfig+0xe2>
 8006524:	2310      	movs	r3, #16
 8006526:	77fb      	strb	r3, [r7, #31]
 8006528:	e011      	b.n	800654e <UART_SetConfig+0xe2>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a67      	ldr	r2, [pc, #412]	; (80066cc <UART_SetConfig+0x260>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d102      	bne.n	800653a <UART_SetConfig+0xce>
 8006534:	2300      	movs	r3, #0
 8006536:	77fb      	strb	r3, [r7, #31]
 8006538:	e009      	b.n	800654e <UART_SetConfig+0xe2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a64      	ldr	r2, [pc, #400]	; (80066d0 <UART_SetConfig+0x264>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d102      	bne.n	800654a <UART_SetConfig+0xde>
 8006544:	2300      	movs	r3, #0
 8006546:	77fb      	strb	r3, [r7, #31]
 8006548:	e001      	b.n	800654e <UART_SetConfig+0xe2>
 800654a:	2310      	movs	r3, #16
 800654c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006556:	d15a      	bne.n	800660e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8006558:	7ffb      	ldrb	r3, [r7, #31]
 800655a:	2b08      	cmp	r3, #8
 800655c:	d827      	bhi.n	80065ae <UART_SetConfig+0x142>
 800655e:	a201      	add	r2, pc, #4	; (adr r2, 8006564 <UART_SetConfig+0xf8>)
 8006560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006564:	08006589 	.word	0x08006589
 8006568:	08006591 	.word	0x08006591
 800656c:	08006599 	.word	0x08006599
 8006570:	080065af 	.word	0x080065af
 8006574:	0800659f 	.word	0x0800659f
 8006578:	080065af 	.word	0x080065af
 800657c:	080065af 	.word	0x080065af
 8006580:	080065af 	.word	0x080065af
 8006584:	080065a7 	.word	0x080065a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006588:	f7fe fbb4 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 800658c:	61b8      	str	r0, [r7, #24]
        break;
 800658e:	e013      	b.n	80065b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006590:	f7fe fbd2 	bl	8004d38 <HAL_RCC_GetPCLK2Freq>
 8006594:	61b8      	str	r0, [r7, #24]
        break;
 8006596:	e00f      	b.n	80065b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006598:	4b4e      	ldr	r3, [pc, #312]	; (80066d4 <UART_SetConfig+0x268>)
 800659a:	61bb      	str	r3, [r7, #24]
        break;
 800659c:	e00c      	b.n	80065b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800659e:	f7fe fb33 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 80065a2:	61b8      	str	r0, [r7, #24]
        break;
 80065a4:	e008      	b.n	80065b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065aa:	61bb      	str	r3, [r7, #24]
        break;
 80065ac:	e004      	b.n	80065b8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	77bb      	strb	r3, [r7, #30]
        break;
 80065b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d074      	beq.n	80066a8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	005a      	lsls	r2, r3, #1
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	085b      	lsrs	r3, r3, #1
 80065c8:	441a      	add	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	2b0f      	cmp	r3, #15
 80065d8:	d916      	bls.n	8006608 <UART_SetConfig+0x19c>
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e0:	d212      	bcs.n	8006608 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	f023 030f 	bic.w	r3, r3, #15
 80065ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	085b      	lsrs	r3, r3, #1
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	f003 0307 	and.w	r3, r3, #7
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	89fb      	ldrh	r3, [r7, #14]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	89fa      	ldrh	r2, [r7, #14]
 8006604:	60da      	str	r2, [r3, #12]
 8006606:	e04f      	b.n	80066a8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	77bb      	strb	r3, [r7, #30]
 800660c:	e04c      	b.n	80066a8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800660e:	7ffb      	ldrb	r3, [r7, #31]
 8006610:	2b08      	cmp	r3, #8
 8006612:	d828      	bhi.n	8006666 <UART_SetConfig+0x1fa>
 8006614:	a201      	add	r2, pc, #4	; (adr r2, 800661c <UART_SetConfig+0x1b0>)
 8006616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661a:	bf00      	nop
 800661c:	08006641 	.word	0x08006641
 8006620:	08006649 	.word	0x08006649
 8006624:	08006651 	.word	0x08006651
 8006628:	08006667 	.word	0x08006667
 800662c:	08006657 	.word	0x08006657
 8006630:	08006667 	.word	0x08006667
 8006634:	08006667 	.word	0x08006667
 8006638:	08006667 	.word	0x08006667
 800663c:	0800665f 	.word	0x0800665f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006640:	f7fe fb58 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 8006644:	61b8      	str	r0, [r7, #24]
        break;
 8006646:	e013      	b.n	8006670 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006648:	f7fe fb76 	bl	8004d38 <HAL_RCC_GetPCLK2Freq>
 800664c:	61b8      	str	r0, [r7, #24]
        break;
 800664e:	e00f      	b.n	8006670 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006650:	4b20      	ldr	r3, [pc, #128]	; (80066d4 <UART_SetConfig+0x268>)
 8006652:	61bb      	str	r3, [r7, #24]
        break;
 8006654:	e00c      	b.n	8006670 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006656:	f7fe fad7 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 800665a:	61b8      	str	r0, [r7, #24]
        break;
 800665c:	e008      	b.n	8006670 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800665e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006662:	61bb      	str	r3, [r7, #24]
        break;
 8006664:	e004      	b.n	8006670 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006666:	2300      	movs	r3, #0
 8006668:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	77bb      	strb	r3, [r7, #30]
        break;
 800666e:	bf00      	nop
    }

    if (pclk != 0U)
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d018      	beq.n	80066a8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	085a      	lsrs	r2, r3, #1
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	441a      	add	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	fbb2 f3f3 	udiv	r3, r2, r3
 8006688:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	2b0f      	cmp	r3, #15
 800668e:	d909      	bls.n	80066a4 <UART_SetConfig+0x238>
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006696:	d205      	bcs.n	80066a4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	b29a      	uxth	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	60da      	str	r2, [r3, #12]
 80066a2:	e001      	b.n	80066a8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80066b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3720      	adds	r7, #32
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	efff69f3 	.word	0xefff69f3
 80066c4:	40013800 	.word	0x40013800
 80066c8:	40021000 	.word	0x40021000
 80066cc:	40004400 	.word	0x40004400
 80066d0:	40004800 	.word	0x40004800
 80066d4:	007a1200 	.word	0x007a1200

080066d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00a      	beq.n	8006702 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00a      	beq.n	8006724 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00a      	beq.n	8006746 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	430a      	orrs	r2, r1
 8006744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	f003 0308 	and.w	r3, r3, #8
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00a      	beq.n	8006768 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	430a      	orrs	r2, r1
 8006766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	f003 0310 	and.w	r3, r3, #16
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00a      	beq.n	800678a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	f003 0320 	and.w	r3, r3, #32
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00a      	beq.n	80067ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d01a      	beq.n	80067ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067d6:	d10a      	bne.n	80067ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00a      	beq.n	8006810 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	430a      	orrs	r2, r1
 800680e:	605a      	str	r2, [r3, #4]
  }
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b098      	sub	sp, #96	; 0x60
 8006820:	af02      	add	r7, sp, #8
 8006822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800682c:	f7fb fbce 	bl	8001fcc <HAL_GetTick>
 8006830:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0308 	and.w	r3, r3, #8
 800683c:	2b08      	cmp	r3, #8
 800683e:	d12e      	bne.n	800689e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006840:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006848:	2200      	movs	r2, #0
 800684a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f88c 	bl	800696c <UART_WaitOnFlagUntilTimeout>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d021      	beq.n	800689e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006862:	e853 3f00 	ldrex	r3, [r3]
 8006866:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800686e:	653b      	str	r3, [r7, #80]	; 0x50
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	461a      	mov	r2, r3
 8006876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006878:	647b      	str	r3, [r7, #68]	; 0x44
 800687a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800687e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006880:	e841 2300 	strex	r3, r2, [r1]
 8006884:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1e6      	bne.n	800685a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2220      	movs	r2, #32
 8006890:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e062      	b.n	8006964 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b04      	cmp	r3, #4
 80068aa:	d149      	bne.n	8006940 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068b4:	2200      	movs	r2, #0
 80068b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f856 	bl	800696c <UART_WaitOnFlagUntilTimeout>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d03c      	beq.n	8006940 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	e853 3f00 	ldrex	r3, [r3]
 80068d2:	623b      	str	r3, [r7, #32]
   return(result);
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	461a      	mov	r2, r3
 80068e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e4:	633b      	str	r3, [r7, #48]	; 0x30
 80068e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ec:	e841 2300 	strex	r3, r2, [r1]
 80068f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1e6      	bne.n	80068c6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	3308      	adds	r3, #8
 80068fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	e853 3f00 	ldrex	r3, [r3]
 8006906:	60fb      	str	r3, [r7, #12]
   return(result);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f023 0301 	bic.w	r3, r3, #1
 800690e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3308      	adds	r3, #8
 8006916:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006918:	61fa      	str	r2, [r7, #28]
 800691a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691c:	69b9      	ldr	r1, [r7, #24]
 800691e:	69fa      	ldr	r2, [r7, #28]
 8006920:	e841 2300 	strex	r3, r2, [r1]
 8006924:	617b      	str	r3, [r7, #20]
   return(result);
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1e5      	bne.n	80068f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2220      	movs	r2, #32
 8006930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e011      	b.n	8006964 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2220      	movs	r2, #32
 8006944:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2220      	movs	r2, #32
 800694a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3758      	adds	r7, #88	; 0x58
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	603b      	str	r3, [r7, #0]
 8006978:	4613      	mov	r3, r2
 800697a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800697c:	e049      	b.n	8006a12 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006984:	d045      	beq.n	8006a12 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006986:	f7fb fb21 	bl	8001fcc <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	69ba      	ldr	r2, [r7, #24]
 8006992:	429a      	cmp	r2, r3
 8006994:	d302      	bcc.n	800699c <UART_WaitOnFlagUntilTimeout+0x30>
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d101      	bne.n	80069a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e048      	b.n	8006a32 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0304 	and.w	r3, r3, #4
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d031      	beq.n	8006a12 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	69db      	ldr	r3, [r3, #28]
 80069b4:	f003 0308 	and.w	r3, r3, #8
 80069b8:	2b08      	cmp	r3, #8
 80069ba:	d110      	bne.n	80069de <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2208      	movs	r2, #8
 80069c2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f000 f8ff 	bl	8006bc8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2208      	movs	r2, #8
 80069ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e029      	b.n	8006a32 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	69db      	ldr	r3, [r3, #28]
 80069e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ec:	d111      	bne.n	8006a12 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 f8e5 	bl	8006bc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2220      	movs	r2, #32
 8006a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e00f      	b.n	8006a32 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	69da      	ldr	r2, [r3, #28]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	bf0c      	ite	eq
 8006a22:	2301      	moveq	r3, #1
 8006a24:	2300      	movne	r3, #0
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	461a      	mov	r2, r3
 8006a2a:	79fb      	ldrb	r3, [r7, #7]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d0a6      	beq.n	800697e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
	...

08006a3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b097      	sub	sp, #92	; 0x5c
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	4613      	mov	r3, r2
 8006a48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	88fa      	ldrh	r2, [r7, #6]
 8006a54:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	88fa      	ldrh	r2, [r7, #6]
 8006a5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a6e:	d10e      	bne.n	8006a8e <UART_Start_Receive_IT+0x52>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d105      	bne.n	8006a84 <UART_Start_Receive_IT+0x48>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006a7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a82:	e02d      	b.n	8006ae0 <UART_Start_Receive_IT+0xa4>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	22ff      	movs	r2, #255	; 0xff
 8006a88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a8c:	e028      	b.n	8006ae0 <UART_Start_Receive_IT+0xa4>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10d      	bne.n	8006ab2 <UART_Start_Receive_IT+0x76>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d104      	bne.n	8006aa8 <UART_Start_Receive_IT+0x6c>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	22ff      	movs	r2, #255	; 0xff
 8006aa2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006aa6:	e01b      	b.n	8006ae0 <UART_Start_Receive_IT+0xa4>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	227f      	movs	r2, #127	; 0x7f
 8006aac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ab0:	e016      	b.n	8006ae0 <UART_Start_Receive_IT+0xa4>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aba:	d10d      	bne.n	8006ad8 <UART_Start_Receive_IT+0x9c>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d104      	bne.n	8006ace <UART_Start_Receive_IT+0x92>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	227f      	movs	r2, #127	; 0x7f
 8006ac8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006acc:	e008      	b.n	8006ae0 <UART_Start_Receive_IT+0xa4>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	223f      	movs	r2, #63	; 0x3f
 8006ad2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ad6:	e003      	b.n	8006ae0 <UART_Start_Receive_IT+0xa4>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2222      	movs	r2, #34	; 0x22
 8006aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3308      	adds	r3, #8
 8006af6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006afa:	e853 3f00 	ldrex	r3, [r3]
 8006afe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b02:	f043 0301 	orr.w	r3, r3, #1
 8006b06:	657b      	str	r3, [r7, #84]	; 0x54
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	3308      	adds	r3, #8
 8006b0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b10:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b12:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b18:	e841 2300 	strex	r3, r2, [r1]
 8006b1c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1e5      	bne.n	8006af0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b2c:	d107      	bne.n	8006b3e <UART_Start_Receive_IT+0x102>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d103      	bne.n	8006b3e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	4a21      	ldr	r2, [pc, #132]	; (8006bc0 <UART_Start_Receive_IT+0x184>)
 8006b3a:	669a      	str	r2, [r3, #104]	; 0x68
 8006b3c:	e002      	b.n	8006b44 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	4a20      	ldr	r2, [pc, #128]	; (8006bc4 <UART_Start_Receive_IT+0x188>)
 8006b42:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d019      	beq.n	8006b80 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b54:	e853 3f00 	ldrex	r3, [r3]
 8006b58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006b60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b6c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b72:	e841 2300 	strex	r3, r2, [r1]
 8006b76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1e6      	bne.n	8006b4c <UART_Start_Receive_IT+0x110>
 8006b7e:	e018      	b.n	8006bb2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	e853 3f00 	ldrex	r3, [r3]
 8006b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	f043 0320 	orr.w	r3, r3, #32
 8006b94:	653b      	str	r3, [r7, #80]	; 0x50
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b9e:	623b      	str	r3, [r7, #32]
 8006ba0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	69f9      	ldr	r1, [r7, #28]
 8006ba4:	6a3a      	ldr	r2, [r7, #32]
 8006ba6:	e841 2300 	strex	r3, r2, [r1]
 8006baa:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1e6      	bne.n	8006b80 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	375c      	adds	r7, #92	; 0x5c
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	08006eb9 	.word	0x08006eb9
 8006bc4:	08006d11 	.word	0x08006d11

08006bc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b095      	sub	sp, #84	; 0x54
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd8:	e853 3f00 	ldrex	r3, [r3]
 8006bdc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006be4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bee:	643b      	str	r3, [r7, #64]	; 0x40
 8006bf0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bf6:	e841 2300 	strex	r3, r2, [r1]
 8006bfa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1e6      	bne.n	8006bd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3308      	adds	r3, #8
 8006c08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	f023 0301 	bic.w	r3, r3, #1
 8006c18:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3308      	adds	r3, #8
 8006c20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c2a:	e841 2300 	strex	r3, r2, [r1]
 8006c2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1e5      	bne.n	8006c02 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d118      	bne.n	8006c70 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	e853 3f00 	ldrex	r3, [r3]
 8006c4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f023 0310 	bic.w	r3, r3, #16
 8006c52:	647b      	str	r3, [r7, #68]	; 0x44
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	461a      	mov	r2, r3
 8006c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c5c:	61bb      	str	r3, [r7, #24]
 8006c5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c60:	6979      	ldr	r1, [r7, #20]
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	e841 2300 	strex	r3, r2, [r1]
 8006c68:	613b      	str	r3, [r7, #16]
   return(result);
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1e6      	bne.n	8006c3e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2220      	movs	r2, #32
 8006c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006c84:	bf00      	nop
 8006c86:	3754      	adds	r7, #84	; 0x54
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f7ff fbc6 	bl	8006440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cb4:	bf00      	nop
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b088      	sub	sp, #32
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	e853 3f00 	ldrex	r3, [r3]
 8006cd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cd8:	61fb      	str	r3, [r7, #28]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	61bb      	str	r3, [r7, #24]
 8006ce4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce6:	6979      	ldr	r1, [r7, #20]
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	e841 2300 	strex	r3, r2, [r1]
 8006cee:	613b      	str	r3, [r7, #16]
   return(result);
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1e6      	bne.n	8006cc4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7ff fb88 	bl	8006418 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d08:	bf00      	nop
 8006d0a:	3720      	adds	r7, #32
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b09c      	sub	sp, #112	; 0x70
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d1e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d28:	2b22      	cmp	r3, #34	; 0x22
 8006d2a:	f040 80b9 	bne.w	8006ea0 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006d34:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d38:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006d3c:	b2d9      	uxtb	r1, r3
 8006d3e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006d42:	b2da      	uxtb	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d48:	400a      	ands	r2, r1
 8006d4a:	b2d2      	uxtb	r2, r2
 8006d4c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d52:	1c5a      	adds	r2, r3, #1
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	3b01      	subs	r3, #1
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f040 809c 	bne.w	8006eb0 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d80:	e853 3f00 	ldrex	r3, [r3]
 8006d84:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	461a      	mov	r2, r3
 8006d94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d96:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d98:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d9e:	e841 2300 	strex	r3, r2, [r1]
 8006da2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006da4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1e6      	bne.n	8006d78 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	3308      	adds	r3, #8
 8006db0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db4:	e853 3f00 	ldrex	r3, [r3]
 8006db8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dbc:	f023 0301 	bic.w	r3, r3, #1
 8006dc0:	667b      	str	r3, [r7, #100]	; 0x64
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3308      	adds	r3, #8
 8006dc8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006dca:	647a      	str	r2, [r7, #68]	; 0x44
 8006dcc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006dd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dd2:	e841 2300 	strex	r3, r2, [r1]
 8006dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1e5      	bne.n	8006daa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2220      	movs	r2, #32
 8006de2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d018      	beq.n	8006e32 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	e853 3f00 	ldrex	r3, [r3]
 8006e0c:	623b      	str	r3, [r7, #32]
   return(result);
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e14:	663b      	str	r3, [r7, #96]	; 0x60
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e1e:	633b      	str	r3, [r7, #48]	; 0x30
 8006e20:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e26:	e841 2300 	strex	r3, r2, [r1]
 8006e2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1e6      	bne.n	8006e00 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d12e      	bne.n	8006e98 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	e853 3f00 	ldrex	r3, [r3]
 8006e4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f023 0310 	bic.w	r3, r3, #16
 8006e54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e5e:	61fb      	str	r3, [r7, #28]
 8006e60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e62:	69b9      	ldr	r1, [r7, #24]
 8006e64:	69fa      	ldr	r2, [r7, #28]
 8006e66:	e841 2300 	strex	r3, r2, [r1]
 8006e6a:	617b      	str	r3, [r7, #20]
   return(result);
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1e6      	bne.n	8006e40 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	f003 0310 	and.w	r3, r3, #16
 8006e7c:	2b10      	cmp	r3, #16
 8006e7e:	d103      	bne.n	8006e88 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2210      	movs	r2, #16
 8006e86:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e8e:	4619      	mov	r1, r3
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7ff fadf 	bl	8006454 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e96:	e00b      	b.n	8006eb0 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f7ff fac7 	bl	800642c <HAL_UART_RxCpltCallback>
}
 8006e9e:	e007      	b.n	8006eb0 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	699a      	ldr	r2, [r3, #24]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f042 0208 	orr.w	r2, r2, #8
 8006eae:	619a      	str	r2, [r3, #24]
}
 8006eb0:	bf00      	nop
 8006eb2:	3770      	adds	r7, #112	; 0x70
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b09c      	sub	sp, #112	; 0x70
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ec6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ed0:	2b22      	cmp	r3, #34	; 0x22
 8006ed2:	f040 80b9 	bne.w	8007048 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006edc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006ee6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006eea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006eee:	4013      	ands	r3, r2
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ef4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006efa:	1c9a      	adds	r2, r3, #2
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f040 809c 	bne.w	8007058 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f28:	e853 3f00 	ldrex	r3, [r3]
 8006f2c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f34:	667b      	str	r3, [r7, #100]	; 0x64
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f3e:	657b      	str	r3, [r7, #84]	; 0x54
 8006f40:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f46:	e841 2300 	strex	r3, r2, [r1]
 8006f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1e6      	bne.n	8006f20 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3308      	adds	r3, #8
 8006f58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5c:	e853 3f00 	ldrex	r3, [r3]
 8006f60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f64:	f023 0301 	bic.w	r3, r3, #1
 8006f68:	663b      	str	r3, [r7, #96]	; 0x60
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	3308      	adds	r3, #8
 8006f70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f72:	643a      	str	r2, [r7, #64]	; 0x40
 8006f74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f7a:	e841 2300 	strex	r3, r2, [r1]
 8006f7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1e5      	bne.n	8006f52 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2220      	movs	r2, #32
 8006f8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d018      	beq.n	8006fda <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	e853 3f00 	ldrex	r3, [r3]
 8006fb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fc8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fce:	e841 2300 	strex	r3, r2, [r1]
 8006fd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1e6      	bne.n	8006fa8 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d12e      	bne.n	8007040 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	f023 0310 	bic.w	r3, r3, #16
 8006ffc:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	461a      	mov	r2, r3
 8007004:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007006:	61bb      	str	r3, [r7, #24]
 8007008:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700a:	6979      	ldr	r1, [r7, #20]
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	e841 2300 	strex	r3, r2, [r1]
 8007012:	613b      	str	r3, [r7, #16]
   return(result);
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1e6      	bne.n	8006fe8 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	69db      	ldr	r3, [r3, #28]
 8007020:	f003 0310 	and.w	r3, r3, #16
 8007024:	2b10      	cmp	r3, #16
 8007026:	d103      	bne.n	8007030 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2210      	movs	r2, #16
 800702e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007036:	4619      	mov	r1, r3
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7ff fa0b 	bl	8006454 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800703e:	e00b      	b.n	8007058 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f7ff f9f3 	bl	800642c <HAL_UART_RxCpltCallback>
}
 8007046:	e007      	b.n	8007058 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	699a      	ldr	r2, [r3, #24]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f042 0208 	orr.w	r2, r2, #8
 8007056:	619a      	str	r2, [r3, #24]
}
 8007058:	bf00      	nop
 800705a:	3770      	adds	r7, #112	; 0x70
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <__errno>:
 8007074:	4b01      	ldr	r3, [pc, #4]	; (800707c <__errno+0x8>)
 8007076:	6818      	ldr	r0, [r3, #0]
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	20000020 	.word	0x20000020

08007080 <__libc_init_array>:
 8007080:	b570      	push	{r4, r5, r6, lr}
 8007082:	4d0d      	ldr	r5, [pc, #52]	; (80070b8 <__libc_init_array+0x38>)
 8007084:	4c0d      	ldr	r4, [pc, #52]	; (80070bc <__libc_init_array+0x3c>)
 8007086:	1b64      	subs	r4, r4, r5
 8007088:	10a4      	asrs	r4, r4, #2
 800708a:	2600      	movs	r6, #0
 800708c:	42a6      	cmp	r6, r4
 800708e:	d109      	bne.n	80070a4 <__libc_init_array+0x24>
 8007090:	4d0b      	ldr	r5, [pc, #44]	; (80070c0 <__libc_init_array+0x40>)
 8007092:	4c0c      	ldr	r4, [pc, #48]	; (80070c4 <__libc_init_array+0x44>)
 8007094:	f000 fc8e 	bl	80079b4 <_init>
 8007098:	1b64      	subs	r4, r4, r5
 800709a:	10a4      	asrs	r4, r4, #2
 800709c:	2600      	movs	r6, #0
 800709e:	42a6      	cmp	r6, r4
 80070a0:	d105      	bne.n	80070ae <__libc_init_array+0x2e>
 80070a2:	bd70      	pop	{r4, r5, r6, pc}
 80070a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80070a8:	4798      	blx	r3
 80070aa:	3601      	adds	r6, #1
 80070ac:	e7ee      	b.n	800708c <__libc_init_array+0xc>
 80070ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80070b2:	4798      	blx	r3
 80070b4:	3601      	adds	r6, #1
 80070b6:	e7f2      	b.n	800709e <__libc_init_array+0x1e>
 80070b8:	08007a54 	.word	0x08007a54
 80070bc:	08007a54 	.word	0x08007a54
 80070c0:	08007a54 	.word	0x08007a54
 80070c4:	08007a58 	.word	0x08007a58

080070c8 <memset>:
 80070c8:	4402      	add	r2, r0
 80070ca:	4603      	mov	r3, r0
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d100      	bne.n	80070d2 <memset+0xa>
 80070d0:	4770      	bx	lr
 80070d2:	f803 1b01 	strb.w	r1, [r3], #1
 80070d6:	e7f9      	b.n	80070cc <memset+0x4>

080070d8 <siprintf>:
 80070d8:	b40e      	push	{r1, r2, r3}
 80070da:	b500      	push	{lr}
 80070dc:	b09c      	sub	sp, #112	; 0x70
 80070de:	ab1d      	add	r3, sp, #116	; 0x74
 80070e0:	9002      	str	r0, [sp, #8]
 80070e2:	9006      	str	r0, [sp, #24]
 80070e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070e8:	4809      	ldr	r0, [pc, #36]	; (8007110 <siprintf+0x38>)
 80070ea:	9107      	str	r1, [sp, #28]
 80070ec:	9104      	str	r1, [sp, #16]
 80070ee:	4909      	ldr	r1, [pc, #36]	; (8007114 <siprintf+0x3c>)
 80070f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80070f4:	9105      	str	r1, [sp, #20]
 80070f6:	6800      	ldr	r0, [r0, #0]
 80070f8:	9301      	str	r3, [sp, #4]
 80070fa:	a902      	add	r1, sp, #8
 80070fc:	f000 f868 	bl	80071d0 <_svfiprintf_r>
 8007100:	9b02      	ldr	r3, [sp, #8]
 8007102:	2200      	movs	r2, #0
 8007104:	701a      	strb	r2, [r3, #0]
 8007106:	b01c      	add	sp, #112	; 0x70
 8007108:	f85d eb04 	ldr.w	lr, [sp], #4
 800710c:	b003      	add	sp, #12
 800710e:	4770      	bx	lr
 8007110:	20000020 	.word	0x20000020
 8007114:	ffff0208 	.word	0xffff0208

08007118 <__ssputs_r>:
 8007118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800711c:	688e      	ldr	r6, [r1, #8]
 800711e:	429e      	cmp	r6, r3
 8007120:	4682      	mov	sl, r0
 8007122:	460c      	mov	r4, r1
 8007124:	4690      	mov	r8, r2
 8007126:	461f      	mov	r7, r3
 8007128:	d838      	bhi.n	800719c <__ssputs_r+0x84>
 800712a:	898a      	ldrh	r2, [r1, #12]
 800712c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007130:	d032      	beq.n	8007198 <__ssputs_r+0x80>
 8007132:	6825      	ldr	r5, [r4, #0]
 8007134:	6909      	ldr	r1, [r1, #16]
 8007136:	eba5 0901 	sub.w	r9, r5, r1
 800713a:	6965      	ldr	r5, [r4, #20]
 800713c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007140:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007144:	3301      	adds	r3, #1
 8007146:	444b      	add	r3, r9
 8007148:	106d      	asrs	r5, r5, #1
 800714a:	429d      	cmp	r5, r3
 800714c:	bf38      	it	cc
 800714e:	461d      	movcc	r5, r3
 8007150:	0553      	lsls	r3, r2, #21
 8007152:	d531      	bpl.n	80071b8 <__ssputs_r+0xa0>
 8007154:	4629      	mov	r1, r5
 8007156:	f000 fb63 	bl	8007820 <_malloc_r>
 800715a:	4606      	mov	r6, r0
 800715c:	b950      	cbnz	r0, 8007174 <__ssputs_r+0x5c>
 800715e:	230c      	movs	r3, #12
 8007160:	f8ca 3000 	str.w	r3, [sl]
 8007164:	89a3      	ldrh	r3, [r4, #12]
 8007166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800716a:	81a3      	strh	r3, [r4, #12]
 800716c:	f04f 30ff 	mov.w	r0, #4294967295
 8007170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007174:	6921      	ldr	r1, [r4, #16]
 8007176:	464a      	mov	r2, r9
 8007178:	f000 fabe 	bl	80076f8 <memcpy>
 800717c:	89a3      	ldrh	r3, [r4, #12]
 800717e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007186:	81a3      	strh	r3, [r4, #12]
 8007188:	6126      	str	r6, [r4, #16]
 800718a:	6165      	str	r5, [r4, #20]
 800718c:	444e      	add	r6, r9
 800718e:	eba5 0509 	sub.w	r5, r5, r9
 8007192:	6026      	str	r6, [r4, #0]
 8007194:	60a5      	str	r5, [r4, #8]
 8007196:	463e      	mov	r6, r7
 8007198:	42be      	cmp	r6, r7
 800719a:	d900      	bls.n	800719e <__ssputs_r+0x86>
 800719c:	463e      	mov	r6, r7
 800719e:	6820      	ldr	r0, [r4, #0]
 80071a0:	4632      	mov	r2, r6
 80071a2:	4641      	mov	r1, r8
 80071a4:	f000 fab6 	bl	8007714 <memmove>
 80071a8:	68a3      	ldr	r3, [r4, #8]
 80071aa:	1b9b      	subs	r3, r3, r6
 80071ac:	60a3      	str	r3, [r4, #8]
 80071ae:	6823      	ldr	r3, [r4, #0]
 80071b0:	4433      	add	r3, r6
 80071b2:	6023      	str	r3, [r4, #0]
 80071b4:	2000      	movs	r0, #0
 80071b6:	e7db      	b.n	8007170 <__ssputs_r+0x58>
 80071b8:	462a      	mov	r2, r5
 80071ba:	f000 fba5 	bl	8007908 <_realloc_r>
 80071be:	4606      	mov	r6, r0
 80071c0:	2800      	cmp	r0, #0
 80071c2:	d1e1      	bne.n	8007188 <__ssputs_r+0x70>
 80071c4:	6921      	ldr	r1, [r4, #16]
 80071c6:	4650      	mov	r0, sl
 80071c8:	f000 fabe 	bl	8007748 <_free_r>
 80071cc:	e7c7      	b.n	800715e <__ssputs_r+0x46>
	...

080071d0 <_svfiprintf_r>:
 80071d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d4:	4698      	mov	r8, r3
 80071d6:	898b      	ldrh	r3, [r1, #12]
 80071d8:	061b      	lsls	r3, r3, #24
 80071da:	b09d      	sub	sp, #116	; 0x74
 80071dc:	4607      	mov	r7, r0
 80071de:	460d      	mov	r5, r1
 80071e0:	4614      	mov	r4, r2
 80071e2:	d50e      	bpl.n	8007202 <_svfiprintf_r+0x32>
 80071e4:	690b      	ldr	r3, [r1, #16]
 80071e6:	b963      	cbnz	r3, 8007202 <_svfiprintf_r+0x32>
 80071e8:	2140      	movs	r1, #64	; 0x40
 80071ea:	f000 fb19 	bl	8007820 <_malloc_r>
 80071ee:	6028      	str	r0, [r5, #0]
 80071f0:	6128      	str	r0, [r5, #16]
 80071f2:	b920      	cbnz	r0, 80071fe <_svfiprintf_r+0x2e>
 80071f4:	230c      	movs	r3, #12
 80071f6:	603b      	str	r3, [r7, #0]
 80071f8:	f04f 30ff 	mov.w	r0, #4294967295
 80071fc:	e0d1      	b.n	80073a2 <_svfiprintf_r+0x1d2>
 80071fe:	2340      	movs	r3, #64	; 0x40
 8007200:	616b      	str	r3, [r5, #20]
 8007202:	2300      	movs	r3, #0
 8007204:	9309      	str	r3, [sp, #36]	; 0x24
 8007206:	2320      	movs	r3, #32
 8007208:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800720c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007210:	2330      	movs	r3, #48	; 0x30
 8007212:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80073bc <_svfiprintf_r+0x1ec>
 8007216:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800721a:	f04f 0901 	mov.w	r9, #1
 800721e:	4623      	mov	r3, r4
 8007220:	469a      	mov	sl, r3
 8007222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007226:	b10a      	cbz	r2, 800722c <_svfiprintf_r+0x5c>
 8007228:	2a25      	cmp	r2, #37	; 0x25
 800722a:	d1f9      	bne.n	8007220 <_svfiprintf_r+0x50>
 800722c:	ebba 0b04 	subs.w	fp, sl, r4
 8007230:	d00b      	beq.n	800724a <_svfiprintf_r+0x7a>
 8007232:	465b      	mov	r3, fp
 8007234:	4622      	mov	r2, r4
 8007236:	4629      	mov	r1, r5
 8007238:	4638      	mov	r0, r7
 800723a:	f7ff ff6d 	bl	8007118 <__ssputs_r>
 800723e:	3001      	adds	r0, #1
 8007240:	f000 80aa 	beq.w	8007398 <_svfiprintf_r+0x1c8>
 8007244:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007246:	445a      	add	r2, fp
 8007248:	9209      	str	r2, [sp, #36]	; 0x24
 800724a:	f89a 3000 	ldrb.w	r3, [sl]
 800724e:	2b00      	cmp	r3, #0
 8007250:	f000 80a2 	beq.w	8007398 <_svfiprintf_r+0x1c8>
 8007254:	2300      	movs	r3, #0
 8007256:	f04f 32ff 	mov.w	r2, #4294967295
 800725a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800725e:	f10a 0a01 	add.w	sl, sl, #1
 8007262:	9304      	str	r3, [sp, #16]
 8007264:	9307      	str	r3, [sp, #28]
 8007266:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800726a:	931a      	str	r3, [sp, #104]	; 0x68
 800726c:	4654      	mov	r4, sl
 800726e:	2205      	movs	r2, #5
 8007270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007274:	4851      	ldr	r0, [pc, #324]	; (80073bc <_svfiprintf_r+0x1ec>)
 8007276:	f7f8 ffb3 	bl	80001e0 <memchr>
 800727a:	9a04      	ldr	r2, [sp, #16]
 800727c:	b9d8      	cbnz	r0, 80072b6 <_svfiprintf_r+0xe6>
 800727e:	06d0      	lsls	r0, r2, #27
 8007280:	bf44      	itt	mi
 8007282:	2320      	movmi	r3, #32
 8007284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007288:	0711      	lsls	r1, r2, #28
 800728a:	bf44      	itt	mi
 800728c:	232b      	movmi	r3, #43	; 0x2b
 800728e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007292:	f89a 3000 	ldrb.w	r3, [sl]
 8007296:	2b2a      	cmp	r3, #42	; 0x2a
 8007298:	d015      	beq.n	80072c6 <_svfiprintf_r+0xf6>
 800729a:	9a07      	ldr	r2, [sp, #28]
 800729c:	4654      	mov	r4, sl
 800729e:	2000      	movs	r0, #0
 80072a0:	f04f 0c0a 	mov.w	ip, #10
 80072a4:	4621      	mov	r1, r4
 80072a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072aa:	3b30      	subs	r3, #48	; 0x30
 80072ac:	2b09      	cmp	r3, #9
 80072ae:	d94e      	bls.n	800734e <_svfiprintf_r+0x17e>
 80072b0:	b1b0      	cbz	r0, 80072e0 <_svfiprintf_r+0x110>
 80072b2:	9207      	str	r2, [sp, #28]
 80072b4:	e014      	b.n	80072e0 <_svfiprintf_r+0x110>
 80072b6:	eba0 0308 	sub.w	r3, r0, r8
 80072ba:	fa09 f303 	lsl.w	r3, r9, r3
 80072be:	4313      	orrs	r3, r2
 80072c0:	9304      	str	r3, [sp, #16]
 80072c2:	46a2      	mov	sl, r4
 80072c4:	e7d2      	b.n	800726c <_svfiprintf_r+0x9c>
 80072c6:	9b03      	ldr	r3, [sp, #12]
 80072c8:	1d19      	adds	r1, r3, #4
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	9103      	str	r1, [sp, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	bfbb      	ittet	lt
 80072d2:	425b      	neglt	r3, r3
 80072d4:	f042 0202 	orrlt.w	r2, r2, #2
 80072d8:	9307      	strge	r3, [sp, #28]
 80072da:	9307      	strlt	r3, [sp, #28]
 80072dc:	bfb8      	it	lt
 80072de:	9204      	strlt	r2, [sp, #16]
 80072e0:	7823      	ldrb	r3, [r4, #0]
 80072e2:	2b2e      	cmp	r3, #46	; 0x2e
 80072e4:	d10c      	bne.n	8007300 <_svfiprintf_r+0x130>
 80072e6:	7863      	ldrb	r3, [r4, #1]
 80072e8:	2b2a      	cmp	r3, #42	; 0x2a
 80072ea:	d135      	bne.n	8007358 <_svfiprintf_r+0x188>
 80072ec:	9b03      	ldr	r3, [sp, #12]
 80072ee:	1d1a      	adds	r2, r3, #4
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	9203      	str	r2, [sp, #12]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	bfb8      	it	lt
 80072f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80072fc:	3402      	adds	r4, #2
 80072fe:	9305      	str	r3, [sp, #20]
 8007300:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80073cc <_svfiprintf_r+0x1fc>
 8007304:	7821      	ldrb	r1, [r4, #0]
 8007306:	2203      	movs	r2, #3
 8007308:	4650      	mov	r0, sl
 800730a:	f7f8 ff69 	bl	80001e0 <memchr>
 800730e:	b140      	cbz	r0, 8007322 <_svfiprintf_r+0x152>
 8007310:	2340      	movs	r3, #64	; 0x40
 8007312:	eba0 000a 	sub.w	r0, r0, sl
 8007316:	fa03 f000 	lsl.w	r0, r3, r0
 800731a:	9b04      	ldr	r3, [sp, #16]
 800731c:	4303      	orrs	r3, r0
 800731e:	3401      	adds	r4, #1
 8007320:	9304      	str	r3, [sp, #16]
 8007322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007326:	4826      	ldr	r0, [pc, #152]	; (80073c0 <_svfiprintf_r+0x1f0>)
 8007328:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800732c:	2206      	movs	r2, #6
 800732e:	f7f8 ff57 	bl	80001e0 <memchr>
 8007332:	2800      	cmp	r0, #0
 8007334:	d038      	beq.n	80073a8 <_svfiprintf_r+0x1d8>
 8007336:	4b23      	ldr	r3, [pc, #140]	; (80073c4 <_svfiprintf_r+0x1f4>)
 8007338:	bb1b      	cbnz	r3, 8007382 <_svfiprintf_r+0x1b2>
 800733a:	9b03      	ldr	r3, [sp, #12]
 800733c:	3307      	adds	r3, #7
 800733e:	f023 0307 	bic.w	r3, r3, #7
 8007342:	3308      	adds	r3, #8
 8007344:	9303      	str	r3, [sp, #12]
 8007346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007348:	4433      	add	r3, r6
 800734a:	9309      	str	r3, [sp, #36]	; 0x24
 800734c:	e767      	b.n	800721e <_svfiprintf_r+0x4e>
 800734e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007352:	460c      	mov	r4, r1
 8007354:	2001      	movs	r0, #1
 8007356:	e7a5      	b.n	80072a4 <_svfiprintf_r+0xd4>
 8007358:	2300      	movs	r3, #0
 800735a:	3401      	adds	r4, #1
 800735c:	9305      	str	r3, [sp, #20]
 800735e:	4619      	mov	r1, r3
 8007360:	f04f 0c0a 	mov.w	ip, #10
 8007364:	4620      	mov	r0, r4
 8007366:	f810 2b01 	ldrb.w	r2, [r0], #1
 800736a:	3a30      	subs	r2, #48	; 0x30
 800736c:	2a09      	cmp	r2, #9
 800736e:	d903      	bls.n	8007378 <_svfiprintf_r+0x1a8>
 8007370:	2b00      	cmp	r3, #0
 8007372:	d0c5      	beq.n	8007300 <_svfiprintf_r+0x130>
 8007374:	9105      	str	r1, [sp, #20]
 8007376:	e7c3      	b.n	8007300 <_svfiprintf_r+0x130>
 8007378:	fb0c 2101 	mla	r1, ip, r1, r2
 800737c:	4604      	mov	r4, r0
 800737e:	2301      	movs	r3, #1
 8007380:	e7f0      	b.n	8007364 <_svfiprintf_r+0x194>
 8007382:	ab03      	add	r3, sp, #12
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	462a      	mov	r2, r5
 8007388:	4b0f      	ldr	r3, [pc, #60]	; (80073c8 <_svfiprintf_r+0x1f8>)
 800738a:	a904      	add	r1, sp, #16
 800738c:	4638      	mov	r0, r7
 800738e:	f3af 8000 	nop.w
 8007392:	1c42      	adds	r2, r0, #1
 8007394:	4606      	mov	r6, r0
 8007396:	d1d6      	bne.n	8007346 <_svfiprintf_r+0x176>
 8007398:	89ab      	ldrh	r3, [r5, #12]
 800739a:	065b      	lsls	r3, r3, #25
 800739c:	f53f af2c 	bmi.w	80071f8 <_svfiprintf_r+0x28>
 80073a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073a2:	b01d      	add	sp, #116	; 0x74
 80073a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a8:	ab03      	add	r3, sp, #12
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	462a      	mov	r2, r5
 80073ae:	4b06      	ldr	r3, [pc, #24]	; (80073c8 <_svfiprintf_r+0x1f8>)
 80073b0:	a904      	add	r1, sp, #16
 80073b2:	4638      	mov	r0, r7
 80073b4:	f000 f87a 	bl	80074ac <_printf_i>
 80073b8:	e7eb      	b.n	8007392 <_svfiprintf_r+0x1c2>
 80073ba:	bf00      	nop
 80073bc:	08007a20 	.word	0x08007a20
 80073c0:	08007a2a 	.word	0x08007a2a
 80073c4:	00000000 	.word	0x00000000
 80073c8:	08007119 	.word	0x08007119
 80073cc:	08007a26 	.word	0x08007a26

080073d0 <_printf_common>:
 80073d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073d4:	4616      	mov	r6, r2
 80073d6:	4699      	mov	r9, r3
 80073d8:	688a      	ldr	r2, [r1, #8]
 80073da:	690b      	ldr	r3, [r1, #16]
 80073dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073e0:	4293      	cmp	r3, r2
 80073e2:	bfb8      	it	lt
 80073e4:	4613      	movlt	r3, r2
 80073e6:	6033      	str	r3, [r6, #0]
 80073e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073ec:	4607      	mov	r7, r0
 80073ee:	460c      	mov	r4, r1
 80073f0:	b10a      	cbz	r2, 80073f6 <_printf_common+0x26>
 80073f2:	3301      	adds	r3, #1
 80073f4:	6033      	str	r3, [r6, #0]
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	0699      	lsls	r1, r3, #26
 80073fa:	bf42      	ittt	mi
 80073fc:	6833      	ldrmi	r3, [r6, #0]
 80073fe:	3302      	addmi	r3, #2
 8007400:	6033      	strmi	r3, [r6, #0]
 8007402:	6825      	ldr	r5, [r4, #0]
 8007404:	f015 0506 	ands.w	r5, r5, #6
 8007408:	d106      	bne.n	8007418 <_printf_common+0x48>
 800740a:	f104 0a19 	add.w	sl, r4, #25
 800740e:	68e3      	ldr	r3, [r4, #12]
 8007410:	6832      	ldr	r2, [r6, #0]
 8007412:	1a9b      	subs	r3, r3, r2
 8007414:	42ab      	cmp	r3, r5
 8007416:	dc26      	bgt.n	8007466 <_printf_common+0x96>
 8007418:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800741c:	1e13      	subs	r3, r2, #0
 800741e:	6822      	ldr	r2, [r4, #0]
 8007420:	bf18      	it	ne
 8007422:	2301      	movne	r3, #1
 8007424:	0692      	lsls	r2, r2, #26
 8007426:	d42b      	bmi.n	8007480 <_printf_common+0xb0>
 8007428:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800742c:	4649      	mov	r1, r9
 800742e:	4638      	mov	r0, r7
 8007430:	47c0      	blx	r8
 8007432:	3001      	adds	r0, #1
 8007434:	d01e      	beq.n	8007474 <_printf_common+0xa4>
 8007436:	6823      	ldr	r3, [r4, #0]
 8007438:	68e5      	ldr	r5, [r4, #12]
 800743a:	6832      	ldr	r2, [r6, #0]
 800743c:	f003 0306 	and.w	r3, r3, #6
 8007440:	2b04      	cmp	r3, #4
 8007442:	bf08      	it	eq
 8007444:	1aad      	subeq	r5, r5, r2
 8007446:	68a3      	ldr	r3, [r4, #8]
 8007448:	6922      	ldr	r2, [r4, #16]
 800744a:	bf0c      	ite	eq
 800744c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007450:	2500      	movne	r5, #0
 8007452:	4293      	cmp	r3, r2
 8007454:	bfc4      	itt	gt
 8007456:	1a9b      	subgt	r3, r3, r2
 8007458:	18ed      	addgt	r5, r5, r3
 800745a:	2600      	movs	r6, #0
 800745c:	341a      	adds	r4, #26
 800745e:	42b5      	cmp	r5, r6
 8007460:	d11a      	bne.n	8007498 <_printf_common+0xc8>
 8007462:	2000      	movs	r0, #0
 8007464:	e008      	b.n	8007478 <_printf_common+0xa8>
 8007466:	2301      	movs	r3, #1
 8007468:	4652      	mov	r2, sl
 800746a:	4649      	mov	r1, r9
 800746c:	4638      	mov	r0, r7
 800746e:	47c0      	blx	r8
 8007470:	3001      	adds	r0, #1
 8007472:	d103      	bne.n	800747c <_printf_common+0xac>
 8007474:	f04f 30ff 	mov.w	r0, #4294967295
 8007478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800747c:	3501      	adds	r5, #1
 800747e:	e7c6      	b.n	800740e <_printf_common+0x3e>
 8007480:	18e1      	adds	r1, r4, r3
 8007482:	1c5a      	adds	r2, r3, #1
 8007484:	2030      	movs	r0, #48	; 0x30
 8007486:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800748a:	4422      	add	r2, r4
 800748c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007490:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007494:	3302      	adds	r3, #2
 8007496:	e7c7      	b.n	8007428 <_printf_common+0x58>
 8007498:	2301      	movs	r3, #1
 800749a:	4622      	mov	r2, r4
 800749c:	4649      	mov	r1, r9
 800749e:	4638      	mov	r0, r7
 80074a0:	47c0      	blx	r8
 80074a2:	3001      	adds	r0, #1
 80074a4:	d0e6      	beq.n	8007474 <_printf_common+0xa4>
 80074a6:	3601      	adds	r6, #1
 80074a8:	e7d9      	b.n	800745e <_printf_common+0x8e>
	...

080074ac <_printf_i>:
 80074ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074b0:	7e0f      	ldrb	r7, [r1, #24]
 80074b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074b4:	2f78      	cmp	r7, #120	; 0x78
 80074b6:	4691      	mov	r9, r2
 80074b8:	4680      	mov	r8, r0
 80074ba:	460c      	mov	r4, r1
 80074bc:	469a      	mov	sl, r3
 80074be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074c2:	d807      	bhi.n	80074d4 <_printf_i+0x28>
 80074c4:	2f62      	cmp	r7, #98	; 0x62
 80074c6:	d80a      	bhi.n	80074de <_printf_i+0x32>
 80074c8:	2f00      	cmp	r7, #0
 80074ca:	f000 80d8 	beq.w	800767e <_printf_i+0x1d2>
 80074ce:	2f58      	cmp	r7, #88	; 0x58
 80074d0:	f000 80a3 	beq.w	800761a <_printf_i+0x16e>
 80074d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074dc:	e03a      	b.n	8007554 <_printf_i+0xa8>
 80074de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074e2:	2b15      	cmp	r3, #21
 80074e4:	d8f6      	bhi.n	80074d4 <_printf_i+0x28>
 80074e6:	a101      	add	r1, pc, #4	; (adr r1, 80074ec <_printf_i+0x40>)
 80074e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074ec:	08007545 	.word	0x08007545
 80074f0:	08007559 	.word	0x08007559
 80074f4:	080074d5 	.word	0x080074d5
 80074f8:	080074d5 	.word	0x080074d5
 80074fc:	080074d5 	.word	0x080074d5
 8007500:	080074d5 	.word	0x080074d5
 8007504:	08007559 	.word	0x08007559
 8007508:	080074d5 	.word	0x080074d5
 800750c:	080074d5 	.word	0x080074d5
 8007510:	080074d5 	.word	0x080074d5
 8007514:	080074d5 	.word	0x080074d5
 8007518:	08007665 	.word	0x08007665
 800751c:	08007589 	.word	0x08007589
 8007520:	08007647 	.word	0x08007647
 8007524:	080074d5 	.word	0x080074d5
 8007528:	080074d5 	.word	0x080074d5
 800752c:	08007687 	.word	0x08007687
 8007530:	080074d5 	.word	0x080074d5
 8007534:	08007589 	.word	0x08007589
 8007538:	080074d5 	.word	0x080074d5
 800753c:	080074d5 	.word	0x080074d5
 8007540:	0800764f 	.word	0x0800764f
 8007544:	682b      	ldr	r3, [r5, #0]
 8007546:	1d1a      	adds	r2, r3, #4
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	602a      	str	r2, [r5, #0]
 800754c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007550:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007554:	2301      	movs	r3, #1
 8007556:	e0a3      	b.n	80076a0 <_printf_i+0x1f4>
 8007558:	6820      	ldr	r0, [r4, #0]
 800755a:	6829      	ldr	r1, [r5, #0]
 800755c:	0606      	lsls	r6, r0, #24
 800755e:	f101 0304 	add.w	r3, r1, #4
 8007562:	d50a      	bpl.n	800757a <_printf_i+0xce>
 8007564:	680e      	ldr	r6, [r1, #0]
 8007566:	602b      	str	r3, [r5, #0]
 8007568:	2e00      	cmp	r6, #0
 800756a:	da03      	bge.n	8007574 <_printf_i+0xc8>
 800756c:	232d      	movs	r3, #45	; 0x2d
 800756e:	4276      	negs	r6, r6
 8007570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007574:	485e      	ldr	r0, [pc, #376]	; (80076f0 <_printf_i+0x244>)
 8007576:	230a      	movs	r3, #10
 8007578:	e019      	b.n	80075ae <_printf_i+0x102>
 800757a:	680e      	ldr	r6, [r1, #0]
 800757c:	602b      	str	r3, [r5, #0]
 800757e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007582:	bf18      	it	ne
 8007584:	b236      	sxthne	r6, r6
 8007586:	e7ef      	b.n	8007568 <_printf_i+0xbc>
 8007588:	682b      	ldr	r3, [r5, #0]
 800758a:	6820      	ldr	r0, [r4, #0]
 800758c:	1d19      	adds	r1, r3, #4
 800758e:	6029      	str	r1, [r5, #0]
 8007590:	0601      	lsls	r1, r0, #24
 8007592:	d501      	bpl.n	8007598 <_printf_i+0xec>
 8007594:	681e      	ldr	r6, [r3, #0]
 8007596:	e002      	b.n	800759e <_printf_i+0xf2>
 8007598:	0646      	lsls	r6, r0, #25
 800759a:	d5fb      	bpl.n	8007594 <_printf_i+0xe8>
 800759c:	881e      	ldrh	r6, [r3, #0]
 800759e:	4854      	ldr	r0, [pc, #336]	; (80076f0 <_printf_i+0x244>)
 80075a0:	2f6f      	cmp	r7, #111	; 0x6f
 80075a2:	bf0c      	ite	eq
 80075a4:	2308      	moveq	r3, #8
 80075a6:	230a      	movne	r3, #10
 80075a8:	2100      	movs	r1, #0
 80075aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075ae:	6865      	ldr	r5, [r4, #4]
 80075b0:	60a5      	str	r5, [r4, #8]
 80075b2:	2d00      	cmp	r5, #0
 80075b4:	bfa2      	ittt	ge
 80075b6:	6821      	ldrge	r1, [r4, #0]
 80075b8:	f021 0104 	bicge.w	r1, r1, #4
 80075bc:	6021      	strge	r1, [r4, #0]
 80075be:	b90e      	cbnz	r6, 80075c4 <_printf_i+0x118>
 80075c0:	2d00      	cmp	r5, #0
 80075c2:	d04d      	beq.n	8007660 <_printf_i+0x1b4>
 80075c4:	4615      	mov	r5, r2
 80075c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80075ca:	fb03 6711 	mls	r7, r3, r1, r6
 80075ce:	5dc7      	ldrb	r7, [r0, r7]
 80075d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075d4:	4637      	mov	r7, r6
 80075d6:	42bb      	cmp	r3, r7
 80075d8:	460e      	mov	r6, r1
 80075da:	d9f4      	bls.n	80075c6 <_printf_i+0x11a>
 80075dc:	2b08      	cmp	r3, #8
 80075de:	d10b      	bne.n	80075f8 <_printf_i+0x14c>
 80075e0:	6823      	ldr	r3, [r4, #0]
 80075e2:	07de      	lsls	r6, r3, #31
 80075e4:	d508      	bpl.n	80075f8 <_printf_i+0x14c>
 80075e6:	6923      	ldr	r3, [r4, #16]
 80075e8:	6861      	ldr	r1, [r4, #4]
 80075ea:	4299      	cmp	r1, r3
 80075ec:	bfde      	ittt	le
 80075ee:	2330      	movle	r3, #48	; 0x30
 80075f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80075f8:	1b52      	subs	r2, r2, r5
 80075fa:	6122      	str	r2, [r4, #16]
 80075fc:	f8cd a000 	str.w	sl, [sp]
 8007600:	464b      	mov	r3, r9
 8007602:	aa03      	add	r2, sp, #12
 8007604:	4621      	mov	r1, r4
 8007606:	4640      	mov	r0, r8
 8007608:	f7ff fee2 	bl	80073d0 <_printf_common>
 800760c:	3001      	adds	r0, #1
 800760e:	d14c      	bne.n	80076aa <_printf_i+0x1fe>
 8007610:	f04f 30ff 	mov.w	r0, #4294967295
 8007614:	b004      	add	sp, #16
 8007616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800761a:	4835      	ldr	r0, [pc, #212]	; (80076f0 <_printf_i+0x244>)
 800761c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007620:	6829      	ldr	r1, [r5, #0]
 8007622:	6823      	ldr	r3, [r4, #0]
 8007624:	f851 6b04 	ldr.w	r6, [r1], #4
 8007628:	6029      	str	r1, [r5, #0]
 800762a:	061d      	lsls	r5, r3, #24
 800762c:	d514      	bpl.n	8007658 <_printf_i+0x1ac>
 800762e:	07df      	lsls	r7, r3, #31
 8007630:	bf44      	itt	mi
 8007632:	f043 0320 	orrmi.w	r3, r3, #32
 8007636:	6023      	strmi	r3, [r4, #0]
 8007638:	b91e      	cbnz	r6, 8007642 <_printf_i+0x196>
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	f023 0320 	bic.w	r3, r3, #32
 8007640:	6023      	str	r3, [r4, #0]
 8007642:	2310      	movs	r3, #16
 8007644:	e7b0      	b.n	80075a8 <_printf_i+0xfc>
 8007646:	6823      	ldr	r3, [r4, #0]
 8007648:	f043 0320 	orr.w	r3, r3, #32
 800764c:	6023      	str	r3, [r4, #0]
 800764e:	2378      	movs	r3, #120	; 0x78
 8007650:	4828      	ldr	r0, [pc, #160]	; (80076f4 <_printf_i+0x248>)
 8007652:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007656:	e7e3      	b.n	8007620 <_printf_i+0x174>
 8007658:	0659      	lsls	r1, r3, #25
 800765a:	bf48      	it	mi
 800765c:	b2b6      	uxthmi	r6, r6
 800765e:	e7e6      	b.n	800762e <_printf_i+0x182>
 8007660:	4615      	mov	r5, r2
 8007662:	e7bb      	b.n	80075dc <_printf_i+0x130>
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	6826      	ldr	r6, [r4, #0]
 8007668:	6961      	ldr	r1, [r4, #20]
 800766a:	1d18      	adds	r0, r3, #4
 800766c:	6028      	str	r0, [r5, #0]
 800766e:	0635      	lsls	r5, r6, #24
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	d501      	bpl.n	8007678 <_printf_i+0x1cc>
 8007674:	6019      	str	r1, [r3, #0]
 8007676:	e002      	b.n	800767e <_printf_i+0x1d2>
 8007678:	0670      	lsls	r0, r6, #25
 800767a:	d5fb      	bpl.n	8007674 <_printf_i+0x1c8>
 800767c:	8019      	strh	r1, [r3, #0]
 800767e:	2300      	movs	r3, #0
 8007680:	6123      	str	r3, [r4, #16]
 8007682:	4615      	mov	r5, r2
 8007684:	e7ba      	b.n	80075fc <_printf_i+0x150>
 8007686:	682b      	ldr	r3, [r5, #0]
 8007688:	1d1a      	adds	r2, r3, #4
 800768a:	602a      	str	r2, [r5, #0]
 800768c:	681d      	ldr	r5, [r3, #0]
 800768e:	6862      	ldr	r2, [r4, #4]
 8007690:	2100      	movs	r1, #0
 8007692:	4628      	mov	r0, r5
 8007694:	f7f8 fda4 	bl	80001e0 <memchr>
 8007698:	b108      	cbz	r0, 800769e <_printf_i+0x1f2>
 800769a:	1b40      	subs	r0, r0, r5
 800769c:	6060      	str	r0, [r4, #4]
 800769e:	6863      	ldr	r3, [r4, #4]
 80076a0:	6123      	str	r3, [r4, #16]
 80076a2:	2300      	movs	r3, #0
 80076a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076a8:	e7a8      	b.n	80075fc <_printf_i+0x150>
 80076aa:	6923      	ldr	r3, [r4, #16]
 80076ac:	462a      	mov	r2, r5
 80076ae:	4649      	mov	r1, r9
 80076b0:	4640      	mov	r0, r8
 80076b2:	47d0      	blx	sl
 80076b4:	3001      	adds	r0, #1
 80076b6:	d0ab      	beq.n	8007610 <_printf_i+0x164>
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	079b      	lsls	r3, r3, #30
 80076bc:	d413      	bmi.n	80076e6 <_printf_i+0x23a>
 80076be:	68e0      	ldr	r0, [r4, #12]
 80076c0:	9b03      	ldr	r3, [sp, #12]
 80076c2:	4298      	cmp	r0, r3
 80076c4:	bfb8      	it	lt
 80076c6:	4618      	movlt	r0, r3
 80076c8:	e7a4      	b.n	8007614 <_printf_i+0x168>
 80076ca:	2301      	movs	r3, #1
 80076cc:	4632      	mov	r2, r6
 80076ce:	4649      	mov	r1, r9
 80076d0:	4640      	mov	r0, r8
 80076d2:	47d0      	blx	sl
 80076d4:	3001      	adds	r0, #1
 80076d6:	d09b      	beq.n	8007610 <_printf_i+0x164>
 80076d8:	3501      	adds	r5, #1
 80076da:	68e3      	ldr	r3, [r4, #12]
 80076dc:	9903      	ldr	r1, [sp, #12]
 80076de:	1a5b      	subs	r3, r3, r1
 80076e0:	42ab      	cmp	r3, r5
 80076e2:	dcf2      	bgt.n	80076ca <_printf_i+0x21e>
 80076e4:	e7eb      	b.n	80076be <_printf_i+0x212>
 80076e6:	2500      	movs	r5, #0
 80076e8:	f104 0619 	add.w	r6, r4, #25
 80076ec:	e7f5      	b.n	80076da <_printf_i+0x22e>
 80076ee:	bf00      	nop
 80076f0:	08007a31 	.word	0x08007a31
 80076f4:	08007a42 	.word	0x08007a42

080076f8 <memcpy>:
 80076f8:	440a      	add	r2, r1
 80076fa:	4291      	cmp	r1, r2
 80076fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007700:	d100      	bne.n	8007704 <memcpy+0xc>
 8007702:	4770      	bx	lr
 8007704:	b510      	push	{r4, lr}
 8007706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800770a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800770e:	4291      	cmp	r1, r2
 8007710:	d1f9      	bne.n	8007706 <memcpy+0xe>
 8007712:	bd10      	pop	{r4, pc}

08007714 <memmove>:
 8007714:	4288      	cmp	r0, r1
 8007716:	b510      	push	{r4, lr}
 8007718:	eb01 0402 	add.w	r4, r1, r2
 800771c:	d902      	bls.n	8007724 <memmove+0x10>
 800771e:	4284      	cmp	r4, r0
 8007720:	4623      	mov	r3, r4
 8007722:	d807      	bhi.n	8007734 <memmove+0x20>
 8007724:	1e43      	subs	r3, r0, #1
 8007726:	42a1      	cmp	r1, r4
 8007728:	d008      	beq.n	800773c <memmove+0x28>
 800772a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800772e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007732:	e7f8      	b.n	8007726 <memmove+0x12>
 8007734:	4402      	add	r2, r0
 8007736:	4601      	mov	r1, r0
 8007738:	428a      	cmp	r2, r1
 800773a:	d100      	bne.n	800773e <memmove+0x2a>
 800773c:	bd10      	pop	{r4, pc}
 800773e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007746:	e7f7      	b.n	8007738 <memmove+0x24>

08007748 <_free_r>:
 8007748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800774a:	2900      	cmp	r1, #0
 800774c:	d044      	beq.n	80077d8 <_free_r+0x90>
 800774e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007752:	9001      	str	r0, [sp, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	f1a1 0404 	sub.w	r4, r1, #4
 800775a:	bfb8      	it	lt
 800775c:	18e4      	addlt	r4, r4, r3
 800775e:	f000 f913 	bl	8007988 <__malloc_lock>
 8007762:	4a1e      	ldr	r2, [pc, #120]	; (80077dc <_free_r+0x94>)
 8007764:	9801      	ldr	r0, [sp, #4]
 8007766:	6813      	ldr	r3, [r2, #0]
 8007768:	b933      	cbnz	r3, 8007778 <_free_r+0x30>
 800776a:	6063      	str	r3, [r4, #4]
 800776c:	6014      	str	r4, [r2, #0]
 800776e:	b003      	add	sp, #12
 8007770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007774:	f000 b90e 	b.w	8007994 <__malloc_unlock>
 8007778:	42a3      	cmp	r3, r4
 800777a:	d908      	bls.n	800778e <_free_r+0x46>
 800777c:	6825      	ldr	r5, [r4, #0]
 800777e:	1961      	adds	r1, r4, r5
 8007780:	428b      	cmp	r3, r1
 8007782:	bf01      	itttt	eq
 8007784:	6819      	ldreq	r1, [r3, #0]
 8007786:	685b      	ldreq	r3, [r3, #4]
 8007788:	1949      	addeq	r1, r1, r5
 800778a:	6021      	streq	r1, [r4, #0]
 800778c:	e7ed      	b.n	800776a <_free_r+0x22>
 800778e:	461a      	mov	r2, r3
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	b10b      	cbz	r3, 8007798 <_free_r+0x50>
 8007794:	42a3      	cmp	r3, r4
 8007796:	d9fa      	bls.n	800778e <_free_r+0x46>
 8007798:	6811      	ldr	r1, [r2, #0]
 800779a:	1855      	adds	r5, r2, r1
 800779c:	42a5      	cmp	r5, r4
 800779e:	d10b      	bne.n	80077b8 <_free_r+0x70>
 80077a0:	6824      	ldr	r4, [r4, #0]
 80077a2:	4421      	add	r1, r4
 80077a4:	1854      	adds	r4, r2, r1
 80077a6:	42a3      	cmp	r3, r4
 80077a8:	6011      	str	r1, [r2, #0]
 80077aa:	d1e0      	bne.n	800776e <_free_r+0x26>
 80077ac:	681c      	ldr	r4, [r3, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	6053      	str	r3, [r2, #4]
 80077b2:	4421      	add	r1, r4
 80077b4:	6011      	str	r1, [r2, #0]
 80077b6:	e7da      	b.n	800776e <_free_r+0x26>
 80077b8:	d902      	bls.n	80077c0 <_free_r+0x78>
 80077ba:	230c      	movs	r3, #12
 80077bc:	6003      	str	r3, [r0, #0]
 80077be:	e7d6      	b.n	800776e <_free_r+0x26>
 80077c0:	6825      	ldr	r5, [r4, #0]
 80077c2:	1961      	adds	r1, r4, r5
 80077c4:	428b      	cmp	r3, r1
 80077c6:	bf04      	itt	eq
 80077c8:	6819      	ldreq	r1, [r3, #0]
 80077ca:	685b      	ldreq	r3, [r3, #4]
 80077cc:	6063      	str	r3, [r4, #4]
 80077ce:	bf04      	itt	eq
 80077d0:	1949      	addeq	r1, r1, r5
 80077d2:	6021      	streq	r1, [r4, #0]
 80077d4:	6054      	str	r4, [r2, #4]
 80077d6:	e7ca      	b.n	800776e <_free_r+0x26>
 80077d8:	b003      	add	sp, #12
 80077da:	bd30      	pop	{r4, r5, pc}
 80077dc:	20000488 	.word	0x20000488

080077e0 <sbrk_aligned>:
 80077e0:	b570      	push	{r4, r5, r6, lr}
 80077e2:	4e0e      	ldr	r6, [pc, #56]	; (800781c <sbrk_aligned+0x3c>)
 80077e4:	460c      	mov	r4, r1
 80077e6:	6831      	ldr	r1, [r6, #0]
 80077e8:	4605      	mov	r5, r0
 80077ea:	b911      	cbnz	r1, 80077f2 <sbrk_aligned+0x12>
 80077ec:	f000 f8bc 	bl	8007968 <_sbrk_r>
 80077f0:	6030      	str	r0, [r6, #0]
 80077f2:	4621      	mov	r1, r4
 80077f4:	4628      	mov	r0, r5
 80077f6:	f000 f8b7 	bl	8007968 <_sbrk_r>
 80077fa:	1c43      	adds	r3, r0, #1
 80077fc:	d00a      	beq.n	8007814 <sbrk_aligned+0x34>
 80077fe:	1cc4      	adds	r4, r0, #3
 8007800:	f024 0403 	bic.w	r4, r4, #3
 8007804:	42a0      	cmp	r0, r4
 8007806:	d007      	beq.n	8007818 <sbrk_aligned+0x38>
 8007808:	1a21      	subs	r1, r4, r0
 800780a:	4628      	mov	r0, r5
 800780c:	f000 f8ac 	bl	8007968 <_sbrk_r>
 8007810:	3001      	adds	r0, #1
 8007812:	d101      	bne.n	8007818 <sbrk_aligned+0x38>
 8007814:	f04f 34ff 	mov.w	r4, #4294967295
 8007818:	4620      	mov	r0, r4
 800781a:	bd70      	pop	{r4, r5, r6, pc}
 800781c:	2000048c 	.word	0x2000048c

08007820 <_malloc_r>:
 8007820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007824:	1ccd      	adds	r5, r1, #3
 8007826:	f025 0503 	bic.w	r5, r5, #3
 800782a:	3508      	adds	r5, #8
 800782c:	2d0c      	cmp	r5, #12
 800782e:	bf38      	it	cc
 8007830:	250c      	movcc	r5, #12
 8007832:	2d00      	cmp	r5, #0
 8007834:	4607      	mov	r7, r0
 8007836:	db01      	blt.n	800783c <_malloc_r+0x1c>
 8007838:	42a9      	cmp	r1, r5
 800783a:	d905      	bls.n	8007848 <_malloc_r+0x28>
 800783c:	230c      	movs	r3, #12
 800783e:	603b      	str	r3, [r7, #0]
 8007840:	2600      	movs	r6, #0
 8007842:	4630      	mov	r0, r6
 8007844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007848:	4e2e      	ldr	r6, [pc, #184]	; (8007904 <_malloc_r+0xe4>)
 800784a:	f000 f89d 	bl	8007988 <__malloc_lock>
 800784e:	6833      	ldr	r3, [r6, #0]
 8007850:	461c      	mov	r4, r3
 8007852:	bb34      	cbnz	r4, 80078a2 <_malloc_r+0x82>
 8007854:	4629      	mov	r1, r5
 8007856:	4638      	mov	r0, r7
 8007858:	f7ff ffc2 	bl	80077e0 <sbrk_aligned>
 800785c:	1c43      	adds	r3, r0, #1
 800785e:	4604      	mov	r4, r0
 8007860:	d14d      	bne.n	80078fe <_malloc_r+0xde>
 8007862:	6834      	ldr	r4, [r6, #0]
 8007864:	4626      	mov	r6, r4
 8007866:	2e00      	cmp	r6, #0
 8007868:	d140      	bne.n	80078ec <_malloc_r+0xcc>
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	4631      	mov	r1, r6
 800786e:	4638      	mov	r0, r7
 8007870:	eb04 0803 	add.w	r8, r4, r3
 8007874:	f000 f878 	bl	8007968 <_sbrk_r>
 8007878:	4580      	cmp	r8, r0
 800787a:	d13a      	bne.n	80078f2 <_malloc_r+0xd2>
 800787c:	6821      	ldr	r1, [r4, #0]
 800787e:	3503      	adds	r5, #3
 8007880:	1a6d      	subs	r5, r5, r1
 8007882:	f025 0503 	bic.w	r5, r5, #3
 8007886:	3508      	adds	r5, #8
 8007888:	2d0c      	cmp	r5, #12
 800788a:	bf38      	it	cc
 800788c:	250c      	movcc	r5, #12
 800788e:	4629      	mov	r1, r5
 8007890:	4638      	mov	r0, r7
 8007892:	f7ff ffa5 	bl	80077e0 <sbrk_aligned>
 8007896:	3001      	adds	r0, #1
 8007898:	d02b      	beq.n	80078f2 <_malloc_r+0xd2>
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	442b      	add	r3, r5
 800789e:	6023      	str	r3, [r4, #0]
 80078a0:	e00e      	b.n	80078c0 <_malloc_r+0xa0>
 80078a2:	6822      	ldr	r2, [r4, #0]
 80078a4:	1b52      	subs	r2, r2, r5
 80078a6:	d41e      	bmi.n	80078e6 <_malloc_r+0xc6>
 80078a8:	2a0b      	cmp	r2, #11
 80078aa:	d916      	bls.n	80078da <_malloc_r+0xba>
 80078ac:	1961      	adds	r1, r4, r5
 80078ae:	42a3      	cmp	r3, r4
 80078b0:	6025      	str	r5, [r4, #0]
 80078b2:	bf18      	it	ne
 80078b4:	6059      	strne	r1, [r3, #4]
 80078b6:	6863      	ldr	r3, [r4, #4]
 80078b8:	bf08      	it	eq
 80078ba:	6031      	streq	r1, [r6, #0]
 80078bc:	5162      	str	r2, [r4, r5]
 80078be:	604b      	str	r3, [r1, #4]
 80078c0:	4638      	mov	r0, r7
 80078c2:	f104 060b 	add.w	r6, r4, #11
 80078c6:	f000 f865 	bl	8007994 <__malloc_unlock>
 80078ca:	f026 0607 	bic.w	r6, r6, #7
 80078ce:	1d23      	adds	r3, r4, #4
 80078d0:	1af2      	subs	r2, r6, r3
 80078d2:	d0b6      	beq.n	8007842 <_malloc_r+0x22>
 80078d4:	1b9b      	subs	r3, r3, r6
 80078d6:	50a3      	str	r3, [r4, r2]
 80078d8:	e7b3      	b.n	8007842 <_malloc_r+0x22>
 80078da:	6862      	ldr	r2, [r4, #4]
 80078dc:	42a3      	cmp	r3, r4
 80078de:	bf0c      	ite	eq
 80078e0:	6032      	streq	r2, [r6, #0]
 80078e2:	605a      	strne	r2, [r3, #4]
 80078e4:	e7ec      	b.n	80078c0 <_malloc_r+0xa0>
 80078e6:	4623      	mov	r3, r4
 80078e8:	6864      	ldr	r4, [r4, #4]
 80078ea:	e7b2      	b.n	8007852 <_malloc_r+0x32>
 80078ec:	4634      	mov	r4, r6
 80078ee:	6876      	ldr	r6, [r6, #4]
 80078f0:	e7b9      	b.n	8007866 <_malloc_r+0x46>
 80078f2:	230c      	movs	r3, #12
 80078f4:	603b      	str	r3, [r7, #0]
 80078f6:	4638      	mov	r0, r7
 80078f8:	f000 f84c 	bl	8007994 <__malloc_unlock>
 80078fc:	e7a1      	b.n	8007842 <_malloc_r+0x22>
 80078fe:	6025      	str	r5, [r4, #0]
 8007900:	e7de      	b.n	80078c0 <_malloc_r+0xa0>
 8007902:	bf00      	nop
 8007904:	20000488 	.word	0x20000488

08007908 <_realloc_r>:
 8007908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800790c:	4680      	mov	r8, r0
 800790e:	4614      	mov	r4, r2
 8007910:	460e      	mov	r6, r1
 8007912:	b921      	cbnz	r1, 800791e <_realloc_r+0x16>
 8007914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007918:	4611      	mov	r1, r2
 800791a:	f7ff bf81 	b.w	8007820 <_malloc_r>
 800791e:	b92a      	cbnz	r2, 800792c <_realloc_r+0x24>
 8007920:	f7ff ff12 	bl	8007748 <_free_r>
 8007924:	4625      	mov	r5, r4
 8007926:	4628      	mov	r0, r5
 8007928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800792c:	f000 f838 	bl	80079a0 <_malloc_usable_size_r>
 8007930:	4284      	cmp	r4, r0
 8007932:	4607      	mov	r7, r0
 8007934:	d802      	bhi.n	800793c <_realloc_r+0x34>
 8007936:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800793a:	d812      	bhi.n	8007962 <_realloc_r+0x5a>
 800793c:	4621      	mov	r1, r4
 800793e:	4640      	mov	r0, r8
 8007940:	f7ff ff6e 	bl	8007820 <_malloc_r>
 8007944:	4605      	mov	r5, r0
 8007946:	2800      	cmp	r0, #0
 8007948:	d0ed      	beq.n	8007926 <_realloc_r+0x1e>
 800794a:	42bc      	cmp	r4, r7
 800794c:	4622      	mov	r2, r4
 800794e:	4631      	mov	r1, r6
 8007950:	bf28      	it	cs
 8007952:	463a      	movcs	r2, r7
 8007954:	f7ff fed0 	bl	80076f8 <memcpy>
 8007958:	4631      	mov	r1, r6
 800795a:	4640      	mov	r0, r8
 800795c:	f7ff fef4 	bl	8007748 <_free_r>
 8007960:	e7e1      	b.n	8007926 <_realloc_r+0x1e>
 8007962:	4635      	mov	r5, r6
 8007964:	e7df      	b.n	8007926 <_realloc_r+0x1e>
	...

08007968 <_sbrk_r>:
 8007968:	b538      	push	{r3, r4, r5, lr}
 800796a:	4d06      	ldr	r5, [pc, #24]	; (8007984 <_sbrk_r+0x1c>)
 800796c:	2300      	movs	r3, #0
 800796e:	4604      	mov	r4, r0
 8007970:	4608      	mov	r0, r1
 8007972:	602b      	str	r3, [r5, #0]
 8007974:	f7fa fa5e 	bl	8001e34 <_sbrk>
 8007978:	1c43      	adds	r3, r0, #1
 800797a:	d102      	bne.n	8007982 <_sbrk_r+0x1a>
 800797c:	682b      	ldr	r3, [r5, #0]
 800797e:	b103      	cbz	r3, 8007982 <_sbrk_r+0x1a>
 8007980:	6023      	str	r3, [r4, #0]
 8007982:	bd38      	pop	{r3, r4, r5, pc}
 8007984:	20000490 	.word	0x20000490

08007988 <__malloc_lock>:
 8007988:	4801      	ldr	r0, [pc, #4]	; (8007990 <__malloc_lock+0x8>)
 800798a:	f000 b811 	b.w	80079b0 <__retarget_lock_acquire_recursive>
 800798e:	bf00      	nop
 8007990:	20000494 	.word	0x20000494

08007994 <__malloc_unlock>:
 8007994:	4801      	ldr	r0, [pc, #4]	; (800799c <__malloc_unlock+0x8>)
 8007996:	f000 b80c 	b.w	80079b2 <__retarget_lock_release_recursive>
 800799a:	bf00      	nop
 800799c:	20000494 	.word	0x20000494

080079a0 <_malloc_usable_size_r>:
 80079a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079a4:	1f18      	subs	r0, r3, #4
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	bfbc      	itt	lt
 80079aa:	580b      	ldrlt	r3, [r1, r0]
 80079ac:	18c0      	addlt	r0, r0, r3
 80079ae:	4770      	bx	lr

080079b0 <__retarget_lock_acquire_recursive>:
 80079b0:	4770      	bx	lr

080079b2 <__retarget_lock_release_recursive>:
 80079b2:	4770      	bx	lr

080079b4 <_init>:
 80079b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b6:	bf00      	nop
 80079b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ba:	bc08      	pop	{r3}
 80079bc:	469e      	mov	lr, r3
 80079be:	4770      	bx	lr

080079c0 <_fini>:
 80079c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c2:	bf00      	nop
 80079c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079c6:	bc08      	pop	{r3}
 80079c8:	469e      	mov	lr, r3
 80079ca:	4770      	bx	lr
